{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":18,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":453,"com.google.gson.functional.StringTest.testStringValueDeserialization":451,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":655,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":161,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":256,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":367,"com.google.gson.stream.JsonWriterTest.testRepeatedName":652,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":174,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":349,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":469,"com.google.gson.MixedStreamTest.testWriteLenient":590,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":265,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":446,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":101,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":105,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":317,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":415,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":526,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":533,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":43,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":376,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":487,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":512,"com.google.gson.functional.ObjectTest.testSingletonLists":315,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":257,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":360,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":454,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":2,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":308,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":45,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":562,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":275,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":332,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":603,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":418,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":528,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":648,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":467,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":575,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":71,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":407,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":146,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":352,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":598,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":506,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":145,"com.google.gson.functional.EnumTest.testEnumCaseMapping":525,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":117,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":452,"com.google.gson.functional.JsonTreeTest.testToJsonTree":29,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":351,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":278,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":196,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":231,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":624,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":249,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":362,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":490,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":554,"com.google.gson.functional.ObjectTest.testNullDeserialization":342,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":290,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":464,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":327,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":60,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":606,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":368,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":333,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":504,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":583,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":339,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":605,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":279,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":98,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":430,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":429,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":274,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":412,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":625,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":230,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":436,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":56,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":205,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":645,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":255,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":389,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":139,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":404,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":470,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":246,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":64,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":631,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":296,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":158,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":413,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":476,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":405,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":200,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":338,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":110,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":322,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":573,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":154,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":179,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":372,"com.google.gson.metrics.PerformanceTest.testDummy":113,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":536,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":189,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":84,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":544,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":298,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":160,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":281,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":124,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":248,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":541,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":582,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":293,"com.google.gson.functional.CollectionTest.testSetDeserialization":559,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":44,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":52,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":171,"com.google.gson.functional.EnumTest.testEnumSet":516,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":396,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":85,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":297,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":659,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":236,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":54,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":83,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":597,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":409,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":543,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":420,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":46,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":501,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":59,"com.google.gson.functional.MapTest.testHashMapDeserialization":129,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":365,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":551,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":261,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":163,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":574,"com.google.gson.MixedStreamTest.testReadNulls":591,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":17,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":180,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":644,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":62,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":287,"com.google.gson.functional.MapTest.testSortedMap":149,"com.google.gson.functional.MapTest.testMapSerialization":13,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":19,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":120,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":402,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":210,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":11,"com.google.gson.functional.MapTest.testSerializeMaps":12,"com.google.gson.functional.MapTest.testComplexKeysSerialization":155,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":170,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":159,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":637,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":37,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":292,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":523,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":499,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":663,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":8,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":284,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":521,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":74,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":662,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":21,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":341,"com.google.gson.functional.MapTest.testStringKeyDeserialization":157,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":661,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":213,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":302,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":432,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":16,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":371,"com.google.gson.functional.PrettyPrintingTest.testMap":72,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":366,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":567,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":102,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":226,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":285,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":215,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":602,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":626,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":457,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":461,"com.google.gson.functional.MapTest.testMapSerializationEmpty":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":243,"com.google.gson.functional.CollectionTest.testQueueSerialization":552,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":397,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":657,"com.google.gson.functional.MapTest.testMapOfMapSerialization":144,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":388,"com.google.gson.JavaSerializationTest.testMapIsSerializable":608,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":251,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":556,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":650,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":399,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":615,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":309,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":635,"com.google.gson.functional.FieldNamingTest.testIdentity":39,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":455,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":299,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":66,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":343,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":22,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":28,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":314,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":448,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":354,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":599,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":456,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":579,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":312,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":267,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":277,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":614,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":126,"com.google.gson.functional.MapTest.testMapSubclassSerialization":131,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":428,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":108,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":515,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":173,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":112,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":386,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":527,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":569,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":225,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":443,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":471,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":283,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":82,"com.google.gson.functional.EnumTest.testEnumSubclass":519,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":408,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":330,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":604,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":353,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":578,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":610,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":414,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":301,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":6,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":356,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":50,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":392,"com.google.gson.stream.JsonWriterTest.testTwoNames":649,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":313,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":187,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":114,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":207,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":326,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":398,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":178,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":390,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":653,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":270,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":316,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":128,"com.google.gson.MixedStreamTest.testWriteNulls":588,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":34,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":474,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":202,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":291,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":511,"com.google.gson.CommentsTest.testParseComments":601,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":51,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":304,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":493,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":69,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":211,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":411,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":119,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":148,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":459,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":577,"com.google.gson.MixedStreamTest.testReadInvalidState":586,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":40,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":89,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":272,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":0,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":121,"com.google.gson.JsonParserTest.testParseMixedArray":636,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":646,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":364,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":647,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":216,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":660,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":482,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":381,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":613,"com.google.gson.JsonArrayTest.testRemove":634,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":253,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":424,"com.google.gson.functional.MapTest.testMapDeserialization":137,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":247,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":77,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":127,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":486,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":628,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":31,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":136,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":492,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":488,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":185,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":27,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":520,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":223,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":57,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":331,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":3,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":570,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":188,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":232,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":513,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":24,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":49,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":73,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":147,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":617,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":276,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":350,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":306,"com.google.gson.functional.PrimitiveTest.testShortSerialization":427,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":495,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":417,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":508,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":642,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":387,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":416,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":237,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":363,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":38,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":518,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":548,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":584,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":132,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":380,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":434,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":563,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":472,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":639,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":264,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":500,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":595,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":633,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":441,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":435,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":622,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":177,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":194,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":300,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":344,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":218,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":640,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":422,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":477,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":47,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":393,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":347,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":321,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":524,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":4,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":172,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":233,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":565,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":303,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":485,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":254,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":494,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":370,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":240,"com.google.gson.stream.JsonWriterTest.testNullStringValue":643,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":496,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":259,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":191,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":549,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":357,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":423,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":395,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":438,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":538,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":491,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":517,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":167,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":122,"com.google.gson.functional.MapTest.testGeneralMapField":14,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":319,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":199,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":440,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":36,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":566,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":580,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":266,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":219,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":361,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":546,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":419,"com.google.gson.MixedStreamTest.testReadMixedStreamed":594,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":140,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":234,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":382,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":445,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":560,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":600,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":535,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":400,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":507,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":607,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":542,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":252,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":141,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":510,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":130,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":305,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":439,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":96,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":93,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":651,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":383,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":638,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":250,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":475,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":67,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":217,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":555,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":498,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":311,"com.google.gson.functional.ObjectTest.testNestedDeserialization":348,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":336,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":576,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":164,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":186,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":505,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":437,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":68,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":142,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":175,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":458,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":81,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":426,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":182,"com.google.gson.JavaSerializationTest.testListIsSerializable":609,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":450,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":473,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":107,"com.google.gson.functional.ObjectTest.testNullSerialization":328,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":23,"com.google.gson.stream.JsonWriterTest.testDoubles":658,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":509,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":133,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":152,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":355,"com.google.gson.functional.MapTest.testInterfaceTypeMap":150,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":209,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":629,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":568,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":190,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":358,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":522,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":621,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":184,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":571,"com.google.gson.MixedStreamTest.testReadClosed":587,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":220,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":503,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":374,"com.google.gson.MixedStreamTest.testWriteClosed":593,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":166,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":553,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":193,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":280,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":320,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":86,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":30,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":70,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":58,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":483,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":273,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":195,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":323,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":103,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":530,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":641,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":403,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":94,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":7,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":557,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":260,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":479,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":442,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":611,"com.google.gson.stream.JsonWriterTest.testNumbers":630,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":379,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":26,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":228,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":197,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":294,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":484,"com.google.gson.functional.CollectionTest.testQueueDeserialization":564,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":385,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":401,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":463,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":271,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":531,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":138,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":340,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":656,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":242,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":99,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":346,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":547,"com.google.gson.functional.MapTest.testRawMapSerialization":15,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":111,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":561,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":258,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":100,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":181,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":335,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":125,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":497,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":616,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":201,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":282,"com.google.gson.functional.PrimitiveTest.testByteSerialization":425,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":618,"com.google.gson.ObjectTypeAdapterTest.testSerialize":1,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":168,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":97,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":369,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":627,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":447,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":35,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":9,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":87,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":460,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":596,"com.google.gson.functional.MapTest.testMapWithQuotes":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":227,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":377,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":462,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":295,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":444,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":310,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":25,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":224,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":42,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":489,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":79,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":345,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":239,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":329,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":410,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":214,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":325,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":229,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":241,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":449,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":421,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":288,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":558,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":203,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":32,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":269,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":5,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":480,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":532,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":109,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":286,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":359,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":514,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":619,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":307,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":620,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":334,"com.google.gson.functional.ObjectTest.testNestedSerialization":55,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":539,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":373,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":466,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":545,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":537,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":153,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":123,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":65,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":585,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":592,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":53,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":478,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":433,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":192,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":534,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":244,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":116,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":118,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":375,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":222,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":337,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":529,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":623,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":465,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":206,"com.google.gson.functional.CollectionTest.testSetSerialization":106,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":581,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":48,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":75,"com.google.gson.functional.StringTest.testStringValueSerialization":468,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":20,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":176,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":550,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":612,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":198,"com.google.gson.MixedStreamTest.testWriteInvalidState":589,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":324,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":378,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":212,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":384,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":572,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":235,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":10,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":289,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":481,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":502,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":632,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":262,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":169,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":135,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":654,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":33,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":540},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"2cb611a1-3e89-11e6-8522-597b17514dc3","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[0,1,2],"tindex":"2cb65fc2-3e89-11e6-8522-f9f7304c0779","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (out == null) {\n                {\n                    com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n                    write(writer, value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"2cb65fc3-3e89-11e6-8522-4bb78d3bbd37","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        {\n                            if (json == null) {\n                                return null;\n                            } \n                            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                            T T = ((T)(fromJson(reader, typeOfT)));\n                            return target;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[3,4,5,6,7,8,9,10,11],"tindex":"2cb65fc4-3e89-11e6-8522-8dccc537ac3d","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        {\n            if (name == null) {\n                {\n                    if (separator == null) {\n                        {\n                            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                            for (int int = 0 ; i < (name.length()) ; i++) {\n                                char char = name.charAt(i);\n                                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                                    translation.append(separator);\n                                } \n                                translation.append(character);\n                            }\n                            return translation.toString();\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,9,10,11,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,1],"tindex":"2cb686d5-3e89-11e6-8522-3926c2c62c78","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"2cb686d6-3e89-11e6-8522-8f25b0af4113","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"2cb6ade7-3e89-11e6-8522-a7d81cc71fcc","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,12,132,133,134,135,136,137,138,139,140,141,142,143,144,13,145,146,147,148,149,150,151,152,14,153,15,154,155,156,157,158,159,160,16,161,17,162,18,19,163,164,165,166,167,20,168,169,170,171,172,173,174,175,21,176,177,178,22,179,180,181,3,182,4,5,23,6,7,183,184,24,8,185,26,27,28,29,186,187,188,189,30,190,191,192,193,194,31,195,196,197,32,198,199,200,201,202,33,203,204,205,206,34,207,208,209,35,210,36,211,212,213,214,215,37,216,38,9,10,11,39,40,41,42,43,44,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,45,284,285,286,287,288,46,289,290,291,292,293,294,295,296,297,298,299,300,301,302,47,303,48,304,305,306,307,308,309,310,311,49,312,313,50,314,315,316,317,51,318,319,320,321,322,323,324,325,326,52,327,328,53,329,330,331,332,333,54,334,335,55,336,337,338,339,340,341,342,56,343,57,344,345,58,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,59,421,422,423,424,425,426,60,427,61,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,62,444,445,63,64,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,65,477,478,66,67,479,480,481,482,483,68,69,484,70,71,72,73,74,75,76,77,78,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,79,511,80,81,82,83,84,85,512,86,87,88,513,89,514,515,90,516,517,518,519,520,521,522,523,524,525,526,527,91,528,529,92,93,530,531,94,532,533,534,535,95,536,537,96,538,539,540,541,542,543,544,97,545,546,98,99,101,547,548,102,549,550,551,552,103,553,554,104,555,556,557,558,559,105,560,561,106,107,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,108,109,110,585,111,586,587,112,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606],"tindex":"2cb6d4f8-3e89-11e6-8522-395b0276b48a","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return ((float)(in.nextDouble()));\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    float float = value.floatValue();\n                                    checkValidFloatingPoint(floatValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"2cb6fc09-3e89-11e6-8522-2f52714137a4","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[607,608,609,114,115,610,117,118,119,120,121,122,123,124,125,126,128,129,130,131,12,132,133,134,135,136,137,138,139,140,141,142,143,144,13,145,146,147,148,149,150,151,152,14,153,15,154,155,156,157,158,159,160,16,161,17,162,18,19,163,164,165,166,167,20,170,171,172,173,174,175,21,176,177,178,22,179,180,181,3,182,4,5,23,6,7,183,184,24,8,185,25,26,27,28,29,186,187,188,189,30,190,191,192,193,194,31,195,196,197,32,198,199,200,201,202,33,203,204,205,206,34,207,208,209,35,210,36,211,212,213,214,215,37,216,38,9,10,11,39,611,612,613,614,615,40,41,42,43,44,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,45,285,286,287,46,289,290,291,292,293,294,295,296,297,298,299,300,301,302,47,303,48,304,305,306,307,308,309,310,311,49,312,313,50,314,315,316,317,51,318,319,320,321,322,323,325,326,52,327,53,330,331,332,333,54,334,335,55,336,337,338,339,340,341,56,343,57,344,345,58,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,59,421,422,423,424,425,426,60,427,61,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,62,444,445,63,64,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,65,477,478,66,67,479,480,481,482,483,68,69,484,70,71,72,73,74,75,76,77,78,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,79,511,80,81,82,83,84,85,512,86,87,88,513,89,515,90,516,517,518,519,520,521,522,523,524,525,526,527,91,528,529,92,93,530,531,94,532,533,534,535,95,536,537,96,538,539,540,541,542,543,544,97,545,546,98,99,101,547,548,102,549,550,551,552,103,553,554,104,556,557,558,559,105,560,561,106,107,562,564,565,566,567,568,569,570,571,572,573,574,575,576,578,579,580,581,582,583,584,108,109,110,616,617,618,585,111,586,112,589,590,592,593,594,595,596,597,598,599,600,601,602,603,604,1],"tindex":"2cb6fc0a-3e89-11e6-8522-3159988967f4","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (type instanceof java.lang.Class) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[575],"tindex":"2cb7231b-3e89-11e6-8522-fdcebf360c17","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"2cb7231c-3e89-11e6-8522-97a0f4f68f8a","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"2cb7231d-3e89-11e6-8522-3740b28e17f1","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[619],"tindex":"2cb74a2e-3e89-11e6-8522-63a53fb7adcc","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[118,127,12,13,14,15,16,17,19,165,20,174,21,22,181,23,24,25,27,30,31,32,33,34,35,36,37,38,9,10,11,39,40,41,42,43,44,224,227,235,252,273,45,46,302,47,48,307,309,310,49,50,314,51,52,53,54,335,55,56,57,58,353,373,390,394,395,399,408,410,412,413,416,419,59,424,425,426,60,427,61,432,434,438,439,441,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,620,621,622,100,623,624,625,626,101,548,102,103,104,105,106,107,575,108,109,110,627,628,629,630,111,112,590,599,1,631,632,633],"tindex":"2cb7713f-3e89-11e6-8522-7f4c0aba9af3","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"2cb77140-3e89-11e6-8522-8b4ca297f64f","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        {\n                            if (json == null) {\n                                return null;\n                            } \n                            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                            T T = ((T)(fromJson(reader, typeOfT)));\n                            return target;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"2cb77141-3e89-11e6-8522-87f7e6427621","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (type instanceof java.lang.Class) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2cb77142-3e89-11e6-8522-7398491da29e","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2cb79853-3e89-11e6-8522-cfe98c946b4c","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[634],"tindex":"2cb79854-3e89-11e6-8522-79a24762bf1e","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"2cb79855-3e89-11e6-8522-7f314b5ea651","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.WildcardType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"2cb79856-3e89-11e6-8522-d5fbc1f3d35f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[18,26,27,28,29,62,63,64,70,80,575,635],"tindex":"2cb79857-3e89-11e6-8522-bf4ccab5905a","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[127,161,168,169,27,219,224,227,229,231,235,265,269,276,277,284,288,295,297,301,302,47,48,304,305,307,309,310,311,324,328,62,63,64,446,447,448,449,450,65,495,497,501,503,504,506,80,518,563,568,575,576,636,627,628,588,599,605,606,637,631,632,633,638,639,640],"tindex":"2cb7bf68-3e89-11e6-8522-33d7f2c27207","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[118,14,17,18,19,165,20,181,26,27,28,29,30,31,35,36,45,46,314,51,53,54,335,55,56,57,58,395,408,434,441,66,67,74,78,85,92,95,96,97,98,99,101,548,104,105,575,110],"tindex":"2cb7bf69-3e89-11e6-8522-179162411669","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[485,491,492,499,79,82,83,87,88],"tindex":"2cb7bf6a-3e89-11e6-8522-4398affe7657","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2cb7e67b-3e89-11e6-8522-8f4ef42a12d7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[610,119,120,121,122,123,124,125,127,161,253,260,264,272,276,289,291,296,298,300,301,302,47,303,48,305,307,308,309,446,447,448,449,450,65,477,479,489,490,495,501,502,503,504,505,506,508,80,514,621,622,641,563,566,567,568,579,596,597,598,599,600,602,603,604],"tindex":"2cb7e67c-3e89-11e6-8522-91d3e2814a58","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"2cb7e67d-3e89-11e6-8522-475bfa3be456","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"2cb7e67e-3e89-11e6-8522-51a71d3c0c99","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        {\n            if (name == null) {\n                {\n                    if (separator == null) {\n                        {\n                            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                            for (int int = 0 ; i < (name.length()) ; i++) {\n                                char char = name.charAt(i);\n                                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                                    translation.append(separator);\n                                } \n                                translation.append(character);\n                            }\n                            return translation.toString();\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"2cb80d8f-3e89-11e6-8522-0f805e0bd776","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[161,28,186,187,188,191,192,196],"tindex":"2cb80d90-3e89-11e6-8522-03f45698dc21","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[114,115,117,118,121,123,127,131,12,134,136,138,143,144,13,147,148,150,151,152,14,153,15,155,156,158,16,161,17,162,18,19,165,20,168,169,172,174,21,177,22,179,180,181,3,4,5,23,183,24,25,26,27,28,29,186,187,188,189,30,190,191,192,31,195,196,197,32,199,200,201,202,33,205,206,34,35,36,212,214,37,38,9,10,11,39,611,612,613,614,615,40,41,42,43,44,218,219,220,224,226,227,229,231,232,235,237,239,240,241,242,243,245,247,248,250,252,253,254,255,257,260,262,263,265,266,268,269,270,271,272,273,276,277,279,282,45,284,288,46,289,290,291,292,294,295,297,301,302,47,48,304,305,307,309,310,311,49,50,314,315,51,320,323,324,52,328,53,331,333,54,335,55,336,338,56,57,344,58,353,355,361,364,372,373,379,381,382,385,388,390,391,394,395,399,408,410,412,413,416,419,59,424,425,426,60,427,61,428,432,434,438,439,441,62,63,64,446,447,448,449,450,452,453,454,455,456,459,461,465,468,65,66,67,480,482,483,68,69,484,70,71,72,73,74,75,76,77,78,485,488,490,491,492,494,495,496,497,499,501,502,503,504,505,506,507,508,510,79,80,81,82,83,84,85,86,87,88,89,90,516,517,518,519,522,524,525,526,527,91,92,93,94,533,95,537,96,538,539,97,545,546,98,99,621,101,547,548,102,552,103,553,554,104,557,105,560,106,107,563,565,566,567,568,569,570,571,572,573,574,575,576,578,579,580,582,583,584,108,109,110,616,617,618,585,111,112,588,589,590,592,593,597,598,599,600,602,603,604,605,606,642,635],"tindex":"2cb80d91-3e89-11e6-8522-091899b53e73","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[138,150,152,161,189,190,195,206,214,612,237,268,485,488,491,492,497,499,554,643],"tindex":"2cb834a2-3e89-11e6-8522-ff78bad65093","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"2cb834a3-3e89-11e6-8522-9d004c31d05a","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[],"tindex":"2cb834a4-3e89-11e6-8522-039a258d566d","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.equals(to)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[644,645,646,219,229,231,269],"tindex":"2cb834a5-3e89-11e6-8522-0f2bb2a5696d","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[23,237],"tindex":"2cb85bb6-3e89-11e6-8522-6d9a897dbcc8","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"2cb85bb7-3e89-11e6-8522-55ea861b39de","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return ((float)(in.nextDouble()));\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    float float = value.floatValue();\n                                    checkValidFloatingPoint(floatValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"2cb85bb8-3e89-11e6-8522-55fb4bfe475a","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"2cb85bb9-3e89-11e6-8522-a33788fef1a6","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        {\n            if (name == null) {\n                {\n                    if (separator == null) {\n                        {\n                            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                            for (int int = 0 ; i < (name.length()) ; i++) {\n                                char char = name.charAt(i);\n                                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                                    translation.append(separator);\n                                } \n                                translation.append(character);\n                            }\n                            return translation.toString();\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2cb882ca-3e89-11e6-8522-335c2966e303","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[127,631,632,639],"tindex":"2cb882cb-3e89-11e6-8522-b52142879e23","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[302,47,307,469,470,471,473],"tindex":"2cb882cc-3e89-11e6-8522-05d5f18c6e1c","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"2cb882cd-3e89-11e6-8522-974480c58c4f","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[607,608,609,126,130,132,133,134,135,136,137,138,140,141,142,13,145,146,147,149,150,151,152,14,153,154,155,156,157,158,159,160,16,161,187,30,193,34,208,611,612,613,614,615,40,42,44,229,281,287,297,299,306,311,315,326,338,344,346,418,62,444,445,63,64,474,475,65,477,478,482,483,69,484,70,73,78,485,491,492,499,79,81,82,83,86,87,88,89,90,516,517,518,519,520,524,96,101,547,549,550,552,103,554,555,556,557,559,561,107,564,578,581,583,108,109,616,617,590,592,601],"tindex":"2cb8a9de-3e89-11e6-8522-27d62ce3f949","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"2cb8d0ef-3e89-11e6-8522-5d686e3b93b9","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.equals(to)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[647],"tindex":"2cb8d0f0-3e89-11e6-8522-afeeac3194bf","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[114,115,121,123,131,12,134,136,138,143,144,13,147,148,150,151,152,14,153,15,155,158,16,161,17,19,165,20,168,169,174,21,22,179,180,181,3,4,5,23,183,24,25,27,189,30,190,31,195,36,38,9,10,11,39,611,612,613,614,615,40,42,43,44,235,250,252,254,263,268,273,45,46,289,290,291,292,294,301,302,47,48,304,307,311,49,50,314,315,51,320,323,52,53,54,335,55,338,56,57,344,58,62,63,64,65,66,67,480,482,483,68,69,72,73,74,78,485,491,492,494,495,496,499,79,80,81,82,83,84,85,86,87,88,89,90,522,91,92,93,94,95,96,538,539,97,98,99,621,622,100,624,625,626,648,101,548,104,105,106,565,569,572,573,575,578,582,583,584,108,109,110,649,650,643,651,652,653,654,655,656,657,111,112,597,605,606,1,2,633,638,640],"tindex":"2cb8d0f1-3e89-11e6-8522-b7ef866ce999","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"2cb8f802-3e89-11e6-8522-d972d9cecaca","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[654,655,658],"tindex":"2cb8f803-3e89-11e6-8522-9d834fd465b5","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"2cb8f804-3e89-11e6-8522-bd502fd7b38f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n                    if (pivotRight != null) {\n                        pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"2cb91f15-3e89-11e6-8522-9b9f916fe128","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[237],"tindex":"2cb91f16-3e89-11e6-8522-172e99d25d4d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[180,5,6,185,38,11],"tindex":"2cb91f17-3e89-11e6-8522-19d71a37d987","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[659,660,661],"tindex":"2cb91f18-3e89-11e6-8522-c1baa750fb94","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from.getRawType().equals(to.getRawType())) {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"2cb94629-3e89-11e6-8522-5347d6fcc8c3","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        {\n                            if (json == null) {\n                                return null;\n                            } \n                            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                            T T = ((T)(fromJson(reader, typeOfT)));\n                            return target;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[114,115,120,121,122,123,125,138,146,150,152,14,155,161,17,18,19,164,165,166,167,20,174,21,176,178,22,179,180,181,3,182,4,5,23,6,7,183,184,24,8,185,25,26,27,28,29,186,187,188,189,30,190,191,192,193,194,31,195,196,36,211,212,38,9,10,11,39,611,612,613,614,615,40,42,43,44,222,223,233,237,244,252,268,273,283,45,46,289,290,291,292,293,294,296,300,301,47,48,49,312,313,50,314,315,316,317,51,318,319,320,321,322,323,325,52,327,53,330,332,54,334,335,55,337,338,339,340,56,343,57,344,345,58,346,347,348,349,422,62,445,63,64,446,447,449,450,469,470,471,472,473,65,477,66,67,480,481,482,483,68,69,484,70,73,74,78,485,486,487,491,492,493,494,496,499,500,79,511,81,82,83,84,85,512,86,87,88,513,89,515,90,522,523,91,528,529,92,93,530,531,94,534,535,95,536,96,538,539,541,542,543,97,98,99,101,548,104,559,105,106,569,572,573,575,578,580,581,582,583,584,108,109,110,111,112,589,593,594,595,597,1],"tindex":"2cb9462a-3e89-11e6-8522-4741109f3c6e","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"2cb9462b-3e89-11e6-8522-4b9447cfc37c","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"2cb96d3c-3e89-11e6-8522-31636394b51e","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (out == null) {\n                {\n                    com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n                    write(writer, value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"2cb96d3d-3e89-11e6-8522-43a075cfa2a5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"2cb96d3e-3e89-11e6-8522-87885ff38da1","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b == a) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b","b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"2cb96d3f-3e89-11e6-8522-2d9d6835331c","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[12,138,153,161,17,18,165,168,26,27,28,29,186,187,188,191,192,196,206,288,324,446,447,448,449,450,484,70,485,488,491,492,494,495,496,497,499,80,575,579,616,617,618,111,112,588,589,590,592,593,640],"tindex":"2cb96d40-3e89-11e6-8522-a9918e781ed1","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"2cb99451-3e89-11e6-8522-8105dadd3e21","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"2cb99452-3e89-11e6-8522-5fd56bd840bc","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n                    if (pivotRight != null) {\n                        pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2cb99453-3e89-11e6-8522-d32e5accaec4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[472,662,663],"tindex":"2cb9bb64-3e89-11e6-8522-8b1c1473c123","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"2cb9bb65-3e89-11e6-8522-29ed773d0ad6","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"2cb9e276-3e89-11e6-8522-7940e3ecc087","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return ((float)(in.nextDouble()));\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    float float = value.floatValue();\n                                    checkValidFloatingPoint(floatValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[114,115,117,118,121,123,127,131,12,134,136,138,143,144,13,147,148,150,151,152,14,153,15,155,156,158,16,161,17,162,19,165,20,172,174,21,177,22,179,180,181,3,182,4,5,23,183,24,25,27,189,30,190,31,195,197,32,199,200,201,202,33,205,206,34,35,36,212,214,37,38,9,10,11,39,611,612,613,614,615,40,41,42,43,44,218,219,220,224,226,227,229,231,232,235,239,240,241,242,243,245,247,248,250,252,253,254,255,257,260,262,263,265,266,268,269,270,271,272,273,276,279,282,45,289,290,291,292,294,295,297,301,302,47,48,304,305,307,309,310,311,49,50,314,315,51,320,323,52,53,331,333,54,335,55,336,338,56,57,344,58,353,355,361,364,372,373,379,381,382,385,388,390,391,394,395,399,408,410,412,413,416,419,59,424,425,426,60,427,61,428,432,434,438,439,441,62,63,64,452,453,454,455,456,459,461,465,468,65,66,67,480,482,483,68,69,71,72,73,74,75,76,77,78,485,488,490,491,492,494,495,496,499,501,502,503,504,505,506,507,508,510,79,80,81,82,83,84,85,86,87,88,89,516,517,518,519,522,524,525,526,527,91,92,93,94,533,95,537,96,538,539,97,545,546,98,99,621,101,547,548,102,552,103,553,554,104,557,105,560,106,107,563,565,566,567,568,569,570,571,572,573,574,575,576,578,579,580,582,583,584,108,109,110,585,597,598,599,600,602,603,604],"tindex":"2cb9e277-3e89-11e6-8522-b7a5f17f88b4","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"2cb9e278-3e89-11e6-8522-49e25b8f5ab9","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.WildcardType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"2cba0989-3e89-11e6-8522-7bf6a6c6e748","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"2cba098a-3e89-11e6-8522-d73aeffb0d2d","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2cba098b-3e89-11e6-8522-f73573fd46ce","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[12,71,72,73,74,75,76,77,78,575,654,655,112],"tindex":"2cba098c-3e89-11e6-8522-fdc8bbede2c1","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent.length()) == 0) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:540","type":"CtBinaryOperatorImpl","sourcecode":"c < 128"},"failures":[],"tindex":"2cba309d-3e89-11e6-8522-f1c0627ec1d1","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c < 128) {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714525/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":77,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":527,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":313,"com.google.gson.functional.StringTest.testStringValueDeserialization":311,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":276,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":480,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":195,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":442,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":8,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":146,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":298,"com.google.gson.MixedStreamTest.testWriteLenient":586,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":627,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":204,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":520,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":331,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":106,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":348,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":489,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":70,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":560,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":226,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":450,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":61,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":536,"com.google.gson.functional.ObjectTest.testSingletonLists":104,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":196,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":314,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":435,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":50,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":150,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":214,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":124,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":597,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":492,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":563,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":327,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":75,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":228,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":481,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":258,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":428,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":573,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":89,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":257,"com.google.gson.functional.EnumTest.testEnumCaseMapping":559,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":312,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":593,"com.google.gson.functional.JsonTreeTest.testToJsonTree":222,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":427,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":217,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":27,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":69,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":171,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":188,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":437,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":633,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":539,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":341,"com.google.gson.functional.ObjectTest.testNullDeserialization":136,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":95,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":324,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":118,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":502,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":600,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":443,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":125,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":87,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":425,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":133,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":599,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":218,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":309,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":506,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":505,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":213,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":486,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":465,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":170,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":512,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":137,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":400,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":194,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":463,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":250,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":299,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":478,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":185,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":419,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":628,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":36,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":272,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":305,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":487,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":479,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":132,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":394,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":112,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":388,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":595,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":5,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":15,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":268,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":620,"com.google.gson.metrics.PerformanceTest.testDummy":592,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":74,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":19,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":60,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":34,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":38,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":147,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":202,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":370,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":187,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":424,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":98,"com.google.gson.functional.CollectionTest.testSetDeserialization":347,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":227,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":117,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":357,"com.google.gson.functional.EnumTest.testEnumSet":550,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":470,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":1,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":176,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":245,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":126,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":59,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":572,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":483,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":33,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":494,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":84,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":156,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":495,"com.google.gson.functional.MapTest.testHashMapDeserialization":239,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":440,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":200,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":389,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":529,"com.google.gson.MixedStreamTest.testReadNulls":587,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":281,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":525,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":154,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":415,"com.google.gson.functional.MapTest.testSortedMap":261,"com.google.gson.functional.MapTest.testMapSerialization":256,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":528,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":366,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":476,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":406,"com.google.gson.functional.MapTest.testSerializeMaps":242,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":363,"com.google.gson.functional.MapTest.testComplexKeysSerialization":269,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":356,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":273,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":602,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":413,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":97,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":557,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":548,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":293,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":151,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":555,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":231,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":634,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":10,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":135,"com.google.gson.functional.MapTest.testStringKeyDeserialization":271,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":410,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":42,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":508,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":275,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":446,"com.google.gson.functional.PrettyPrintingTest.testMap":229,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":374,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":441,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":334,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":166,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":531,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":412,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":596,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":317,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":182,"com.google.gson.functional.MapTest.testMapSerializationEmpty":270,"com.google.gson.functional.CollectionTest.testQueueSerialization":338,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":471,"com.google.gson.functional.MapTest.testMapOfMapSerialization":255,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":190,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":344,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":473,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":609,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":51,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":315,"com.google.gson.functional.FieldNamingTest.testIdentity":364,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":39,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":79,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":138,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":14,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":103,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":221,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":522,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":430,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":574,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":316,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":421,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":278,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":468,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":206,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":577,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":184,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":216,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":608,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":236,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":6,"com.google.gson.functional.MapTest.testMapSubclassSerialization":241,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":68,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":296,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":359,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":376,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":460,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":561,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":583,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":165,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":300,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":519,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":149,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":58,"com.google.gson.functional.EnumTest.testEnumSubclass":553,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":482,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":122,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":598,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":429,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":420,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":488,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":41,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":288,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":431,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":280,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":466,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":279,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":17,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":403,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":576,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":116,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":472,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":13,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":464,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":209,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":105,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":238,"com.google.gson.MixedStreamTest.testWriteNulls":584,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":402,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":303,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":396,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":55,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":96,"com.google.gson.CommentsTest.testParseComments":579,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":46,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":107,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":542,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":382,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":408,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":485,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":365,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":260,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":319,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":77,"com.google.gson.MixedStreamTest.testReadInvalidState":581,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":223,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":211,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":504,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":367,"com.google.gson.JsonParserTest.testParseMixedArray":626,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":439,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":617,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":414,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":379,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":630,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":455,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":607,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":192,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":499,"com.google.gson.functional.MapTest.testMapDeserialization":248,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":186,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":234,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":237,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":535,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":624,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":25,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":247,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":541,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":537,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":294,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":2,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":554,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":163,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":123,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":139,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":283,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":377,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":172,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":65,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":277,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":292,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":230,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":259,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":612,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":215,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":426,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":48,"com.google.gson.functional.PrimitiveTest.testShortSerialization":503,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":544,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":491,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":91,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":461,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":490,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":7,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":438,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":360,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":552,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":333,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":295,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":243,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":454,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":354,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":510,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":301,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":631,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":203,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":549,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":591,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":614,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":517,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":511,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":12,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":24,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":40,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":140,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":158,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":562,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":603,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":497,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":29,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":43,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":467,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":144,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":111,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":558,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":285,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":358,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":173,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":342,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":372,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":44,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":534,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":193,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":543,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":445,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":179,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":418,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":545,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":198,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":21,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":335,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":432,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":498,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":469,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":514,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":385,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":540,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":551,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":533,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":368,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":109,"com.google.gson.functional.MapTest.testGeneralMapField":265,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":393,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":516,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":373,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":407,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":205,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":159,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":308,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":436,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":493,"com.google.gson.MixedStreamTest.testReadMixedStreamed":590,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":174,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":251,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":456,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":349,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":417,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":575,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":616,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":72,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":474,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":90,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":191,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":252,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":330,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":240,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":47,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":515,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":93,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":566,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":457,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":615,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":189,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":621,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":304,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":157,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":343,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":547,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":53,"com.google.gson.functional.ObjectTest.testNestedDeserialization":145,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":76,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":130,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":530,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":16,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":88,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":513,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":381,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":9,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":253,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":318,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":57,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":501,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":284,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":302,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":524,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":352,"com.google.gson.functional.ObjectTest.testNullSerialization":119,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":287,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":329,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":244,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":4,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":264,"com.google.gson.functional.MapTest.testInterfaceTypeMap":262,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":405,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":375,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":20,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":433,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":556,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":622,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":291,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":378,"com.google.gson.MixedStreamTest.testReadClosed":582,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":160,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":86,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":448,"com.google.gson.MixedStreamTest.testWriteClosed":589,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":340,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":532,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":23,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":219,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":62,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":0,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":384,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":142,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":380,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":212,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":26,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":113,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":339,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":567,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":477,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":569,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":289,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":345,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":199,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":81,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":518,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":605,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":453,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":168,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":99,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":390,"com.google.gson.functional.CollectionTest.testQueueDeserialization":355,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":383,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":618,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":459,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":475,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":323,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":526,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":210,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":568,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":134,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":181,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":143,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":310,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":332,"com.google.gson.functional.MapTest.testRawMapSerialization":267,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":580,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":350,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":197,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":128,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":282,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":371,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":546,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":611,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":148,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":395,"com.google.gson.functional.PrimitiveTest.testByteSerialization":500,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":613,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":101,"com.google.gson.ObjectTypeAdapterTest.testSerialize":610,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":306,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":444,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":623,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":521,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":3,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":361,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":63,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":320,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":571,"com.google.gson.functional.MapTest.testMapWithQuotes":254,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":167,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":451,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":322,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":35,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":416,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":52,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":604,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":507,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":164,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":225,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":625,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":538,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":54,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":141,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":632,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":235,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":178,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":484,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":115,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":180,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":523,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":565,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":496,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":155,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":346,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":398,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":208,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":391,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":286,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":82,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":570,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":619,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":297,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":153,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":67,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":434,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":49,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":127,"com.google.gson.functional.ObjectTest.testNestedSerialization":129,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":386,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":307,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":326,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":447,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":92,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":266,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":369,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":28,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":588,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":601,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":78,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":120,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":509,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":22,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":183,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":449,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":578,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":594,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":162,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":564,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":325,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":401,"com.google.gson.functional.CollectionTest.testSetSerialization":351,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":423,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":45,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":232,"com.google.gson.functional.StringTest.testStringValueSerialization":328,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":100,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":11,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":336,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":606,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":392,"com.google.gson.MixedStreamTest.testWriteInvalidState":585,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":114,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":452,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":409,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":458,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":175,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":362,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":94,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":83,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":85,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":629,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":201,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":102,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":246,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":30,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":397},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"59a0ffc8-3e5e-11e6-80a8-592584b4689d","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6],"tindex":"59a14de9-3e5e-11e6-80a8-d9c931a84269","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"59a174fa-3e5e-11e6-80a8-39221defb900","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[7],"tindex":"59a174fb-3e5e-11e6-80a8-bdab5890c246","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"59a174fc-3e5e-11e6-80a8-cb9e09a6a685","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[],"tindex":"59a19c0d-3e5e-11e6-80a8-6bcba7ce5a8e","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from == null) {\n        {\n            if (from instanceof java.lang.Class<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n                    if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                        java.lang.reflect.Type java.lang.reflect.Type = from;\n                        if (from instanceof java.lang.reflect.GenericArrayType) {\n                            t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                        } else if (from instanceof java.lang.Class<?>) {\n                            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                            while (classType.isArray()) {\n                                classType = classType.getComponentType();\n                            }\n                            t = classType;\n                        } \n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } \n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[8,9,10,11,12,13,14,15,16,17,18,19,0,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,1,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,7,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,2,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,3,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,4,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,5,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,6,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601],"tindex":"59a19c0e-3e5e-11e6-80a8-f537e8e2d216","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return ((float)(in.nextDouble()));\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    float float = value.floatValue();\n                                    checkValidFloatingPoint(floatValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"59a1ea2f-3e5e-11e6-80a8-0fd32e4ca692","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[52,75,76,77,89,90,91,125,552,572],"tindex":"59a1ea30-3e5e-11e6-80a8-937728268120","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[16,17,18,21,22,27,221,276,383,384,522,602,603],"tindex":"59a21141-3e5e-11e6-80a8-9b05c299ffe0","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"59a21142-3e5e-11e6-80a8-3518fbb61764","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[8,9,10,11,12,13,14,15,16,17,18,19,0,20,21,22,23,24,25,26,27,28,29,31,32,33,36,40,41,43,45,54,55,57,58,59,60,1,61,62,63,64,65,66,68,69,71,72,73,74,75,79,80,82,83,604,93,94,95,96,97,98,99,100,103,104,105,106,107,108,109,110,111,112,113,115,117,118,120,122,124,126,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,149,150,156,162,163,173,7,183,191,207,212,220,2,221,222,223,225,226,227,230,231,235,249,258,262,264,265,269,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,306,309,310,605,606,607,608,609,331,333,342,347,348,351,360,361,362,363,364,366,367,368,369,371,376,379,380,381,382,383,384,385,386,387,388,407,408,409,415,417,418,419,420,422,423,424,425,497,520,521,523,524,525,527,528,530,531,532,533,534,535,536,540,541,542,543,545,548,549,556,557,562,563,564,565,566,567,568,569,572,576,577,580,583,585,589,590,591,595,610],"tindex":"59a23853-3e5e-11e6-80a8-f172ffa7ca13","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[16,17,18,21,22,27,56,75,220,2,221,222,276,383,384,421,520,521,522,523,524,527,611,612,613],"tindex":"59a23854-3e5e-11e6-80a8-7d68a2d54105","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[16,17,18,21,22,27,75,220,2,221,222,276,383,384,415,418,419,520,521,523,524,527,611,602,614,615,603],"tindex":"59a23855-3e5e-11e6-80a8-b76a1902c4e2","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[616],"tindex":"59a25f66-3e5e-11e6-80a8-bf2c3db8e585","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[617,618,619,620,621],"tindex":"59a25f67-3e5e-11e6-80a8-cbfde5c94d1d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"59a28678-3e5e-11e6-80a8-47c15d5f93f3","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return ((float)(in.nextDouble()));\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    float float = value.floatValue();\n                                    checkValidFloatingPoint(floatValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[8,10,12,14,15,16,17,18,19,0,20,21,22,25,26,27,28,35,37,41,42,43,45,46,47,49,51,52,53,54,56,57,58,59,60,1,62,63,64,66,69,622,70,73,75,76,79,80,82,604,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,104,107,110,113,114,117,119,120,123,125,126,128,129,130,132,137,139,140,142,148,150,151,155,156,158,159,160,164,166,167,169,171,172,175,7,178,179,180,181,182,184,186,187,189,191,192,193,194,196,199,201,202,204,205,207,208,209,210,211,212,215,216,218,220,2,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,237,241,242,245,247,249,254,255,256,259,260,262,263,264,265,266,267,269,270,272,275,276,277,280,281,282,283,285,286,287,290,292,295,296,297,306,307,308,309,310,312,313,314,315,316,319,321,325,328,605,606,607,608,609,330,331,332,333,334,338,339,340,341,342,345,348,349,351,352,354,358,360,361,362,363,364,367,369,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,393,394,395,396,397,400,401,402,3,407,409,411,413,415,418,419,420,421,422,424,425,429,4,436,439,5,447,453,455,456,459,462,464,465,468,469,473,482,484,486,487,490,493,495,499,500,501,502,503,504,6,508,510,514,515,517,520,521,522,523,524,525,526,527,528,531,534,537,539,540,541,543,544,545,546,548,550,551,552,553,556,558,559,560,561,562,565,566,569,572,573,574,575,576,577,611,612,613,580,583,584,585,586,588,589,623,624,593,594,625,595,626,596,597,598,627,602,628,629,630,614,615,631,603,599,600,601],"tindex":"59a2ad89-3e5e-11e6-80a8-31ff40883219","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[632,617,633,634],"tindex":"59a2ad8a-3e5e-11e6-80a8-49df340274e0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[562,563,564,566,567,569],"tindex":"59a2d49b-3e5e-11e6-80a8-1df66811b90a","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[],"tindex":"59a2d49c-3e5e-11e6-80a8-33ccbf949a78","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"59a2d49d-3e5e-11e6-80a8-cda51727c20b","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"59a2fbae-3e5e-11e6-80a8-6b9f0e4f56d8","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"59a2fbaf-3e5e-11e6-80a8-a72b0e238c2c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"59a2fbb0-3e5e-11e6-80a8-8d92e9cab6fb","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from == null) {\n        {\n            if (from instanceof java.lang.Class<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n                    if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                        java.lang.reflect.Type java.lang.reflect.Type = from;\n                        if (from instanceof java.lang.reflect.GenericArrayType) {\n                            t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                        } else if (from instanceof java.lang.Class<?>) {\n                            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                            while (classType.isArray()) {\n                                classType = classType.getComponentType();\n                            }\n                            t = classType;\n                        } \n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } \n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"59a322c1-3e5e-11e6-80a8-379ac03e8bfd","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"59a322c2-3e5e-11e6-80a8-3db162074fc7","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"59a322c3-3e5e-11e6-80a8-0b7abff093e2","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"59a349d4-3e5e-11e6-80a8-c156ea9c6458","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"59a349d5-3e5e-11e6-80a8-bb252fbecab1","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"59a349d6-3e5e-11e6-80a8-1fcc7cf95197","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[],"tindex":"59a349d7-3e5e-11e6-80a8-d1c6119e95f5","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"59a349d8-3e5e-11e6-80a8-9f6f91bb1af2","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"59a349d9-3e5e-11e6-80a8-eb88ea8c7417","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"59a370ea-3e5e-11e6-80a8-c9fd8afd74cc","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"59a370eb-3e5e-11e6-80a8-bfd1bcaa7a50","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return ((float)(in.nextDouble()));\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    float float = value.floatValue();\n                                    checkValidFloatingPoint(floatValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247968947/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":36,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
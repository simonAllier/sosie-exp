{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":330,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":202,"com.google.gson.functional.StringTest.testStringValueDeserialization":577,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":19,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":532,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":630,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":495,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":66,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":82,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":340,"com.google.gson.MixedStreamTest.testWriteLenient":428,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":247,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":20,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":214,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":221,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":308,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":539,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":106,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":119,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":379,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":504,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":407,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":77,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":359,"com.google.gson.functional.ObjectTest.testSingletonLists":190,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":245,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":203,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":490,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":656,"com.google.gson.stream.JsonWriterTest.testStrings":104,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":59,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":212,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":605,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":637,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":317,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":63,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":542,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":186,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":351,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":585,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":153,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":475,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":533,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":270,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":9,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":482,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":17,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":417,"com.google.gson.functional.EnumTest.testEnumCaseMapping":118,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":95,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":201,"com.google.gson.functional.JsonTreeTest.testToJsonTree":269,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":481,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":478,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":639,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":278,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":239,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":299,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":433,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":451,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":491,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":625,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":40,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":401,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":218,"com.google.gson.functional.ObjectTest.testNullDeserialization":574,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":223,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":583,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":315,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":439,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":549,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":496,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":571,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":392,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":402,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":16,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":385,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":322,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":100,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":641,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":251,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":421,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":171,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":554,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":553,"com.google.gson.JsonParserTest.testParseString":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":636,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":423,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":434,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":518,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":394,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":559,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":131,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":197,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":516,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":629,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":341,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":462,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":530,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":624,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":232,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":5,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":45,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":152,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":424,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":610,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":531,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":321,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":445,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":99,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":109,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":312,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":73,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":418,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":500,"com.google.gson.metrics.PerformanceTest.testDummy":437,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":258,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":157,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":293,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":90,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":47,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":471,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":589,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":246,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":244,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":384,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":393,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":339,"com.google.gson.functional.CollectionTest.testSetDeserialization":337,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":380,"com.google.gson.functional.EnumTest.testEnumSet":112,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":314,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":587,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":523,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":173,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":46,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":651,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":621,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":195,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":8,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":292,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":535,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":89,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":544,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":13,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":213,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":184,"com.google.gson.functional.MapTest.testHashMapDeserialization":460,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":493,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":598,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":633,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":440,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":576,"com.google.gson.MixedStreamTest.testReadNulls":646,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":163,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":199,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":367,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":593,"com.google.gson.functional.MapTest.testSortedMap":467,"com.google.gson.functional.MapTest.testMapSerialization":465,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":200,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":30,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":528,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":453,"com.google.gson.functional.MapTest.testSerializeMaps":141,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":348,"com.google.gson.functional.MapTest.testComplexKeysSerialization":151,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":586,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":470,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":456,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":224,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":260,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":365,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":390,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":286,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":590,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":442,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":175,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":391,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":68,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":573,"com.google.gson.functional.MapTest.testStringKeyDeserialization":419,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":653,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":454,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":51,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":426,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":472,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":499,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":85,"com.google.gson.functional.PrettyPrintingTest.testMap":476,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":494,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":595,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":236,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":332,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":591,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":62,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":455,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":207,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":578,"com.google.gson.functional.CollectionTest.testQueueSerialization":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":241,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":409,"com.google.gson.functional.MapTest.testMapSerializationEmpty":469,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":102,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":524,"com.google.gson.functional.MapTest.testMapOfMapSerialization":146,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":515,"com.google.gson.JavaSerializationTest.testMapIsSerializable":649,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":627,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":601,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":124,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":422,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":60,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":204,"com.google.gson.functional.FieldNamingTest.testIdentity":349,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":48,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":136,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":324,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":22,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":72,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":268,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":306,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":484,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":10,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":43,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":205,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":261,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":521,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":635,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":622,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":242,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":638,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":459,"com.google.gson.functional.MapTest.testMapSubclassSerialization":140,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":552,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":110,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":298,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":588,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":227,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":253,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":513,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":611,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":342,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":565,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":617,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":335,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":291,"com.google.gson.functional.EnumTest.testEnumSubclass":115,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":534,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":64,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":316,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":483,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":65,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":381,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":538,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":50,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":282,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":486,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":126,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":519,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":262,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":272,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":97,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":450,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":404,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":525,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":567,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":71,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":517,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":250,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":307,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":76,"com.google.gson.MixedStreamTest.testWriteNulls":645,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":449,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":608,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":130,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":84,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":289,"com.google.gson.CommentsTest.testParseComments":436,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":405,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":55,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":191,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":362,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":263,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":302,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":537,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":29,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":206,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":466,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":473,"com.google.gson.MixedStreamTest.testReadInvalidState":643,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":377,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":94,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":551,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":31,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":182,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":431,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":457,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":652,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":177,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":508,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":91,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":547,"com.google.gson.functional.MapTest.testMapDeserialization":415,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":448,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":243,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":479,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":18,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":101,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":358,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":143,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":160,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":361,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":230,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":287,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":420,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":139,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":441,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":370,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":325,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":570,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":164,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":228,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":240,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":78,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":125,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":285,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":300,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":429,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":654,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":42,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":480,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":57,"com.google.gson.functional.PrimitiveTest.testShortSerialization":550,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":41,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":541,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":6,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":75,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":514,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":540,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":372,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":492,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":345,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":114,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":403,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":336,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":259,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":400,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":413,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":507,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":36,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":557,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":343,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":93,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":366,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":389,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":563,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":558,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":80,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":70,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":0,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":49,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":277,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":233,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":350,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":305,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":28,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":52,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":520,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":328,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":311,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":117,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":165,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":210,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":219,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":371,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":226,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":53,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":357,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":363,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":628,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":498,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":623,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":632,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":274,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":596,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":487,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":546,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":522,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":427,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":155,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":113,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":360,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":334,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":32,"com.google.gson.functional.MapTest.testGeneralMapField":149,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":310,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":444,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":562,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":37,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":134,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":248,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":468,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":170,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":234,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":543,"com.google.gson.MixedStreamTest.testReadMixedStreamed":388,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":396,"com.google.gson.JsonObjectTest.testDeepCopy":410,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":463,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":509,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":619,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":11,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":222,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":368,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":647,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":257,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":526,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":138,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":648,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":374,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":416,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":174,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":412,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":56,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":561,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":180,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":353,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":510,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":626,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":609,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":137,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":600,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":615,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":613,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":61,"com.google.gson.functional.ObjectTest.testNestedDeserialization":329,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":154,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":572,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":331,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":271,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":74,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":560,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":301,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":67,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":464,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":579,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":290,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":425,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":280,"com.google.gson.JavaSerializationTest.testListIsSerializable":650,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":24,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":344,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":604,"com.google.gson.functional.ObjectTest.testNullSerialization":568,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":281,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":474,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":414,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":148,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":485,"com.google.gson.functional.MapTest.testInterfaceTypeMap":147,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":452,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":38,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":159,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":488,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":79,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":116,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":284,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":607,"com.google.gson.MixedStreamTest.testReadClosed":644,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":235,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":15,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":502,"com.google.gson.MixedStreamTest.testWriteClosed":387,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":217,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":333,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":192,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":640,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":294,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":158,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":304,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":178,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":376,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":161,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":193,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":599,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":354,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":81,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":529,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":356,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":283,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":92,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":12,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":120,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":564,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":183,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":618,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":127,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":225,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":303,"com.google.gson.functional.CollectionTest.testQueueDeserialization":606,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":512,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":527,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":582,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":575,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":4,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":355,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":144,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":3,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":172,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":327,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":215,"com.google.gson.functional.MapTest.testRawMapSerialization":150,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":252,"com.google.gson.JsonParserTest.testParseReader":398,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":603,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":631,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":185,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":279,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":319,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":35,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":432,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":395,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":129,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":211,"com.google.gson.functional.PrimitiveTest.testByteSerialization":548,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":655,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":188,"com.google.gson.ObjectTypeAdapterTest.testSerialize":255,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":168,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":497,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":21,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":133,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":346,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":7,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":295,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":580,"com.google.gson.functional.MapTest.testMapWithQuotes":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":237,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":505,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":581,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":44,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":614,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":642,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":162,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":555,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":616,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":378,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":39,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":288,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":326,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":176,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":1,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":536,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":569,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":135,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":313,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":375,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":2,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":23,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":229,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":545,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":594,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":602,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":447,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":25,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":249,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":166,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":265,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":612,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":111,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":592,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":26,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":489,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":58,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":318,"com.google.gson.functional.ObjectTest.testNestedSerialization":196,"com.google.gson.JsonObjectTest.testAddingStringProperties":411,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":156,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":169,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":501,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":584,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":179,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":430,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":33,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":27,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":96,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":254,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":105,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":194,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":458,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":556,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":275,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":373,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":435,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":438,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":503,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":369,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":352,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":208,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":132,"com.google.gson.functional.CollectionTest.testSetSerialization":338,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":383,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":54,"com.google.gson.functional.StringTest.testStringValueSerialization":209,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":477,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":187,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":69,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":121,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":597,"com.google.gson.MixedStreamTest.testWriteInvalidState":386,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":443,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":566,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":506,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":264,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":511,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":108,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":103,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":620,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":347,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":397,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":83,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":406,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":266,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":14,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":634,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":189,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":461,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":86,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":446},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4],"tindex":"1beb03ac-3f57-11e6-9b0f-f97077f63f09","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"1beb78dd-3f57-11e6-9b0f-b327c098bdc8","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from.getRawType().equals(to.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(from.getRawType())) {\n                {\n                    if (from.getRawType().equals(to.getRawType())) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                        for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                            if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                                return false;\n                            } \n                        }\n                        return true;\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[5,6],"tindex":"1beb9fee-3f57-11e6-9b0f-133634c55a9f","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                        throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"tindex":"1beb9fef-3f57-11e6-9b0f-b95389d73ada","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl"},"failures":[62,63,64,7,8,9,10,11,65,66,67,68,69,70,71,72,73,12,13,14,15,16,74,17,75,18,76,19,20,21,22,23,24,25,77,78,26,27,28,79,80,81,29,30,31,32,33,34,35,82,36,83,84,37,85,38,39,40,41,86,87,88,89,90,91,92,93,94,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"tindex":"1bebc700-3f57-11e6-9b0f-85bb74b2e9b9","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bebee11-3f57-11e6-9b0f-f58eabc87f9c","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[95,62,8,11,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,13,14,15,16,74,17,138,75,139,140,141,142,143,144,145,146,147,148,149,150,151,152,19,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,25,173,27,174,175,176,177,178,179,180,181,182,183,184,79,80,185,186,31,33,187,188,189,190,191,192,193,194,195,196,197,0,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,36,83,223,84,224,225,226,37,85,38,227,228,229,230,231,232,233,234,235,236,237,238,239,240,1,2,3,241,242,243,244,91,245,92,246,247,248,249,250,4,94,42,251,44,46,50,55,56,61,252,253,254],"tindex":"1bebee12-3f57-11e6-9b0f-4d53c2cc43c1","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    string(value);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[8,255,97,98,99,256,257,107,258,108,109,259,110,111,116,260,120,121,122,123,124,125,261,262,126,66,68,69,71,72,73,134,263,264,136,137,265,266,267,139,268,269,144,270,147,148,149,151,19,153,155,156,271,272,273,157,158,159,274,275,276,277,160,161,278,162,163,279,164,280,165,166,281,282,283,167,284,285,286,287,168,171,172,20,21,23,24,288,289,290,291,292,293,173,77,294,295,296,78,297,298,299,27,28,300,175,176,177,178,301,302,303,304,180,305,30,31,32,33,35,187,306,190,307,308,191,309,310,192,311,312,193,313,314,315,194,316,317,195,318,319,196,320,321,322,323,197,324,325,0,326,198,327,328,329,82,199,330,200,331,332,333,334,335,212,213,214,336,219,337,221,338,83,223,84,224,339,225,227,340,341,342,343,344,345,346,347,348,349,350,351,352,229,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,231,232,87,88,89,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,45,49,50,52,54,252,253,386,387,388,389],"tindex":"1bec1523-3f57-11e6-9b0f-292a5f194d18","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[16,138],"tindex":"1bec3c34-3f57-11e6-9b0f-73d40d10c241","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bec6345-3f57-11e6-9b0f-65cc029da069","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bec8a56-3f57-11e6-9b0f-0f8043f3710f","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"1becb167-3f57-11e6-9b0f-cbcb9819c049","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from.getRawType().equals(to.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(from.getRawType())) {\n                {\n                    if (from.getRawType().equals(to.getRawType())) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                        for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                            if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                                return false;\n                            } \n                        }\n                        return true;\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl"},"failures":[390,391,343],"tindex":"1becb168-3f57-11e6-9b0f-574e3ac7cc92","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            if (insert) {\n                {\n                    for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[392,393,394],"tindex":"1becff89-3f57-11e6-9b0f-77a4d1ce8eb1","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1becff8a-3f57-11e6-9b0f-fbe81e16d08f","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl"},"failures":[395,396,397,398,399,400,401,402,403,404,405,406,407,408,391,409,410,411,110,111,12,268,412,413,414,415,416,417,418,419,153,271,272,273,274,275,278,162,20,21,23,24,26,303,304,420,31,32,33,330,343,232,421,47,48],"tindex":"1bed9bcb-3f57-11e6-9b0f-555c7e5a7f5e","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bedc2dc-3f57-11e6-9b0f-7912b6541bf7","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[422,423,424,425,426,427,428],"tindex":"1bedc2dd-3f57-11e6-9b0f-73cc2d12c1f9","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[66,72,429,430,288,292,295,296,363,372],"tindex":"1bede9ee-3f57-11e6-9b0f-e11bf8fed6b9","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    java.lang.String java.lang.String = value.toString();\n                    if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    beforeValue(false);\n                    java.io.Writer.append(string);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[350,351,352,353,354,356],"tindex":"1bede9ef-3f57-11e6-9b0f-f7bc379490d3","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bede9f0-3f57-11e6-9b0f-c79e433d7afd","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                        throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[69,73,155,181],"tindex":"1bee1101-3f57-11e6-9b0f-5fba40752406","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl"},"failures":[431],"tindex":"1bee1102-3f57-11e6-9b0f-792274c73d79","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bee5f23-3f57-11e6-9b0f-5b2f044bfd9c","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[268,19,271,272,273,274,275,278],"tindex":"1bee5f24-3f57-11e6-9b0f-61b65041568c","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bee5f25-3f57-11e6-9b0f-3119e021c16d","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bee8636-3f57-11e6-9b0f-27f2740a37d6","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bee8637-3f57-11e6-9b0f-09285b6a3fa1","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1bee8638-3f57-11e6-9b0f-053eb31590ae","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[121,132,135,268,144,147,148,19,271,272,273,157,159,274,275,161,278,218,357,230,360,361,432,365,372],"tindex":"1bee8639-3f57-11e6-9b0f-ff70bf5ecce4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[255,108,109,120,121,122,123,124,66,68,69,71,72,73,139,270,151,155,156,272,158,274,276,277,160,278,162,163,279,164,280,165,166,281,282,283,286,287,20,21,23,24,297,299,177,178,301,302,303,304,181,35,313,314,325,0,214,337,338,83,223,84,224,339,225,227,87,369,370,372,373,374,376,377,378,379,380,45,50],"tindex":"1beead4a-3f57-11e6-9b0f-0b6f8cf7477d","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1beed45b-3f57-11e6-9b0f-7fb0b3ea5396","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    java.lang.String java.lang.String = value.toString();\n                    if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    beforeValue(false);\n                    java.io.Writer.append(string);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1beed45c-3f57-11e6-9b0f-259bd4dae442","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1beefb6d-3f57-11e6-9b0f-5918949e4fcb","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[363,372],"tindex":"1beefb6e-3f57-11e6-9b0f-cd2d782e83a0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl"},"failures":[8,255,97,98,99,107,108,109,259,110,111,116,120,121,122,123,124,125,126,66,68,72,73,134,136,137,265,267,139,268,269,144,147,148,149,19,153,155,156,271,272,273,157,158,159,274,275,160,161,278,162,163,279,164,165,166,281,167,285,168,171,172,20,21,23,24,288,290,291,292,293,173,294,295,296,297,299,27,300,175,176,177,178,301,302,303,304,180,79,80,185,433,434,186,31,33,187,306,190,191,192,193,314,194,195,319,196,321,197,325,0,198,199,330,200,332,212,213,214,336,219,221,338,83,223,84,224,225,227,345,346,347,348,349,350,229,353,356,357,360,361,363,364,365,367,231,232,374,375,376,377,378,379,380,381,384,385,50,52,54,252,253],"tindex":"1beefb6f-3f57-11e6-9b0f-2bd511b01814","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bef2280-3f57-11e6-9b0f-dfec8bef65e2","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[95,435,62,63,64,436,7,8,9,10,11,96,437,97,98,438,99,100,439,106,256,257,107,258,108,109,440,259,110,111,112,113,114,115,441,442,116,260,117,118,119,125,261,262,126,66,67,68,69,70,71,72,73,127,128,443,444,445,129,130,446,447,448,131,132,449,450,451,452,133,453,134,263,264,454,135,455,456,457,458,136,137,12,265,266,13,14,15,16,74,17,138,75,267,139,268,269,459,18,76,460,412,140,141,413,414,142,461,143,415,144,462,463,416,464,145,146,465,417,270,429,466,467,147,468,148,149,430,150,418,151,469,419,152,470,471,472,19,153,154,473,155,156,271,272,273,157,158,159,274,275,276,277,160,161,278,163,279,164,280,165,166,281,282,283,167,284,285,286,287,168,169,170,171,172,20,21,22,23,24,288,289,25,290,291,292,293,173,77,294,295,296,78,297,26,298,299,27,28,474,174,475,476,300,175,477,478,479,176,177,178,301,302,303,304,179,180,480,481,482,483,484,485,486,487,488,489,490,181,491,492,182,493,494,495,496,497,498,499,500,501,502,503,504,505,506,183,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,422,526,527,528,529,530,531,532,533,534,535,536,537,423,424,538,539,540,541,542,543,544,184,545,305,546,547,548,425,549,550,551,552,553,554,555,426,556,557,558,559,560,427,561,562,563,564,565,29,30,31,32,33,34,35,187,188,189,306,190,307,308,191,309,310,192,311,312,193,566,313,567,314,315,568,194,569,316,570,317,571,195,318,319,196,572,320,321,322,323,573,574,197,324,325,0,326,198,327,328,329,82,199,575,330,200,576,331,332,333,334,577,201,202,203,204,205,578,579,206,580,207,581,582,583,208,584,585,209,586,587,210,588,589,211,335,212,590,591,592,593,594,213,214,215,336,595,596,597,598,216,599,217,218,219,600,601,220,602,337,221,222,603,338,604,605,36,606,83,223,84,224,339,225,226,37,85,38,227,228,607,340,341,342,343,344,608,609,610,345,346,347,348,349,611,350,351,352,229,353,354,355,356,612,357,358,359,230,39,40,360,361,362,363,41,364,432,613,365,366,367,614,368,231,232,86,87,88,89,90,615,233,234,235,421,369,370,616,617,236,237,618,238,394,239,240,371,619,620,621,372,622,1,623,2,3,241,373,242,624,243,244,625,626,627,374,91,628,629,630,245,631,632,92,633,634,246,93,247,248,635,375,249,250,4,94,376,636,637,42,638,639,251,640,377,641,378,379,380,381,43,382,383,384,385,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,642,61,252,643,644,253,645,386,428,646,254,387,388,389],"tindex":"1bef4991-3f57-11e6-9b0f-592917d5f160","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bef70a2-3f57-11e6-9b0f-c5cb181b5103","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    string(value);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bef70a3-3f57-11e6-9b0f-fb84b3d68731","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonObject) {\n                {\n                    return containsKey(o);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bef70a4-3f57-11e6-9b0f-1be97b08aaa8","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[647],"tindex":"1bef97b5-3f57-11e6-9b0f-c1fcb3a96958","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[522],"tindex":"1bef97b6-3f57-11e6-9b0f-6928e2d3bbc4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bef97b7-3f57-11e6-9b0f-d51f0c70a09f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl"},"failures":[95,435,648,649,650,651,652,653,62,63,64,436,7,8,9,10,11,96,395,654,655,255,656,97,98,65,99,106,256,257,107,258,108,109,440,259,110,111,112,113,114,115,441,442,116,260,117,118,119,120,121,122,123,124,125,261,262,126,66,67,68,69,70,71,72,73,127,128,443,444,445,129,130,446,447,448,131,132,449,450,451,452,133,453,134,263,264,454,135,455,456,457,458,136,137,12,265,266,13,14,15,16,74,17,138,75,267,139,268,269,459,18,76,460,412,140,141,413,414,142,461,143,415,144,462,463,416,464,145,146,465,417,270,429,466,467,147,468,148,149,430,150,418,151,469,419,152,470,471,472,19,153,154,155,156,271,272,273,157,158,159,274,275,276,277,160,161,278,162,163,279,164,280,165,166,281,282,283,167,284,285,286,287,168,169,170,171,172,20,21,22,23,24,288,289,25,290,291,292,293,173,77,294,295,296,78,297,26,298,299,27,28,474,174,475,476,300,175,477,478,479,176,177,178,301,302,303,304,179,180,480,481,482,483,484,485,486,487,488,489,490,181,491,492,182,493,494,495,496,497,498,499,500,501,502,503,504,505,506,183,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,422,526,527,528,529,530,531,532,533,534,535,536,537,423,424,538,539,540,541,542,543,544,184,545,305,546,547,548,425,549,550,551,552,553,554,555,426,556,557,558,559,560,427,561,562,563,564,565,29,30,31,32,33,34,35,187,306,190,307,308,191,309,310,192,311,312,193,313,567,314,315,194,316,570,317,571,195,318,319,196,572,320,321,322,323,573,197,324,325,0,326,198,327,328,329,82,199,575,330,200,576,331,332,333,334,577,201,202,203,204,205,578,579,206,580,207,581,582,583,208,584,585,209,586,587,210,588,589,211,335,212,591,592,593,213,214,215,336,595,596,597,598,216,599,217,218,219,600,601,220,602,337,221,222,603,338,604,605,36,606,83,223,84,224,339,225,226,37,85,38,227,228,607,340,341,342,343,344,608,609,610,345,346,347,348,349,611,350,351,352,229,353,354,355,356,612,357,358,359,230,39,40,360,361,362,363,41,364,432,613,365,366,367,614,368,231,232,86,87,88,89,90,615,233,234,235,421,369,370,616,617,236,237,618,238,394,239,240,371,619,620,621,372,622,1,623,2,3,241,373,242,624,243,244,625,626,627,374,91,628,629,630,245,631,632,92,633,634,246,93,247,248,635,375,249,250,4,94,376,636,637,42,638,639,251,640,377,641,378,379,380,381,43,382,383,384,385,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,642,61,252,643,253,386,428,646,254,387,388,389],"tindex":"1befbec8-3f57-11e6-9b0f-d73c7640e524","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bf00ce9-3f57-11e6-9b0f-47bbf0cf7912","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[9,10,11,96,97,98,99,106,107,108,109,440,259,110,112,113,114,115,116,117,119,120,121,122,123,124,125,126,66,68,70,72,73,127,128,444,445,129,130,446,131,132,133,134,264,135,456,136,137,265,13,14,15,16,74,17,138,75,139,141,144,145,146,466,147,148,149,150,19,155,156,158,160,161,162,163,279,164,280,165,166,281,167,285,168,169,170,171,172,293,174,475,476,300,175,477,478,479,177,178,301,302,179,180,483,485,181,182,500,501,183,508,509,512,515,517,518,521,522,422,534,536,423,424,540,543,184,547,425,549,551,552,426,557,427,561,31,33,187,306,190,191,192,193,314,194,570,571,195,319,196,572,321,197,325,0,198,199,332,201,202,203,204,205,206,207,208,209,210,211,212,214,215,595,599,217,219,220,221,338,83,223,84,224,225,226,37,85,38,227,228,607,345,346,347,348,349,611,350,229,353,356,357,230,40,360,361,363,41,364,365,233,235,236,240,1,623,2,3,241,242,243,244,626,374,628,629,245,246,247,248,375,249,250,4,94,376,42,251,377,641,378,379,380,381,43,382,384,385,44,50,51,52,54,55,56,58,642],"tindex":"1bf00cea-3f57-11e6-9b0f-65f51253f906","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bf033fb-3f57-11e6-9b0f-598c8443d9f5","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl"},"failures":[],"tindex":"1bf033fc-3f57-11e6-9b0f-81c6d643cd34","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (java.lang.Character.isLetter(firstCharacter)) {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl"},"failures":[390,391,343],"tindex":"1bf033fd-3f57-11e6-9b0f-4b4cd2302438","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bf05b0e-3f57-11e6-9b0f-a9e9881e9c50","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bf05b0f-3f57-11e6-9b0f-2b806eb29c61","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[350,351,352,229,353,354,355,356],"tindex":"1bf05b10-3f57-11e6-9b0f-01114193892a","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[269,272,274,275,278,20,21,22,23,24,25,303,304,330,43],"tindex":"1bf08221-3f57-11e6-9b0f-9173509bdaff","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[66,72,429,430,288,292,295,296,372],"tindex":"1bf08222-3f57-11e6-9b0f-635000ddb04e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bf08223-3f57-11e6-9b0f-55e8da3521c7","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1bf08224-3f57-11e6-9b0f-9f46e26e3d7e","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bf0d045-3f57-11e6-9b0f-cb4b8ef85927","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonObject) {\n                {\n                    return containsKey(o);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bf0d046-3f57-11e6-9b0f-1566c46cdd94","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl"},"failures":[],"tindex":"1bf0d047-3f57-11e6-9b0f-edb9a6e92405","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            if (insert) {\n                {\n                    for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bf11e68-3f57-11e6-9b0f-5367c53cd591","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1bf11e69-3f57-11e6-9b0f-b7bc2501d4f3","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353972298/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":62,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
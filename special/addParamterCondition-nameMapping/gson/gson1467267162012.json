{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":48,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":409,"com.google.gson.functional.StringTest.testStringValueDeserialization":407,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":15,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":540,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":331,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":33,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":503,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":67,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":292,"com.google.gson.MixedStreamTest.testWriteLenient":204,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":207,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":340,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":43,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":150,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":153,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":269,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":547,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":250,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":597,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":126,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":511,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":655,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":246,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":581,"com.google.gson.functional.ObjectTest.testSingletonLists":105,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":332,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":410,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":496,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":212,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":241,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":119,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":347,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":279,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":197,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":550,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":91,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":599,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":423,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":62,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":354,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":541,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":380,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":489,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":605,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":263,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":379,"com.google.gson.functional.EnumTest.testEnumCaseMapping":596,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":408,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":617,"com.google.gson.functional.JsonTreeTest.testToJsonTree":39,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":488,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":357,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":350,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":9,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":631,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":313,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":89,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":475,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":326,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":498,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":583,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":17,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":99,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":420,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":647,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":276,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":559,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":660,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":504,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":280,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":261,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":176,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":284,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":653,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":351,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":144,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":563,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":562,"com.google.gson.JsonParserTest.testParseString":646,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":346,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":90,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":199,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":526,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":312,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":568,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":115,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":472,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":195,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":524,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":208,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":372,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":538,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":642,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":323,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":172,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":217,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":232,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":391,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":200,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":404,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":539,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":114,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":466,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":168,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":192,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":273,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":32,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":60,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":70,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":387,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":253,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":4,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":80,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":230,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":234,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":293,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":393,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":338,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":453,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":325,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":175,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":629,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":267,"com.google.gson.functional.CollectionTest.testSetDeserialization":439,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":127,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":109,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":447,"com.google.gson.functional.EnumTest.testEnumSet":588,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":531,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":56,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":233,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":622,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":318,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":368,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":111,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":79,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":187,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":543,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":229,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":552,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":120,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":258,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":553,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":35,"com.google.gson.functional.MapTest.testHashMapDeserialization":362,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":501,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":336,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":461,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":576,"com.google.gson.MixedStreamTest.testReadNulls":612,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":49,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":177,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":170,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":298,"com.google.gson.functional.MapTest.testSortedMap":383,"com.google.gson.functional.MapTest.testMapSerialization":378,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":178,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":649,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":451,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":536,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":477,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":54,"com.google.gson.functional.MapTest.testSerializeMaps":365,"com.google.gson.functional.MapTest.testComplexKeysSerialization":388,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":446,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":392,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":482,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":101,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":594,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":25,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":400,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":633,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":593,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":28,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":129,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":656,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":68,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":286,"com.google.gson.functional.MapTest.testStringKeyDeserialization":390,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":624,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":480,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":205,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":202,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":394,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":507,"com.google.gson.functional.PrettyPrintingTest.testMap":355,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":457,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":502,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":428,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":179,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":308,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":481,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":625,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":413,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":417,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":320,"com.google.gson.functional.MapTest.testMapSerializationEmpty":389,"com.google.gson.functional.CollectionTest.testQueueSerialization":432,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":657,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":532,"com.google.gson.functional.MapTest.testMapOfMapSerialization":377,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":523,"com.google.gson.JavaSerializationTest.testMapIsSerializable":620,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":328,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":436,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":149,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":198,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":242,"com.google.gson.functional.FieldNamingTest.testIdentity":157,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":411,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":235,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":93,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":287,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":11,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":45,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":69,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":104,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":491,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":606,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":42,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":412,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":395,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":529,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":342,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":189,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":319,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":349,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":359,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":61,"com.google.gson.functional.MapTest.testMapSubclassSerialization":364,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":141,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":249,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":449,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":160,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":191,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":521,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":598,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":209,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":307,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":574,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":295,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":78,"com.google.gson.functional.EnumTest.testEnumSubclass":591,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":542,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":277,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":626,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":490,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":173,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":608,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":546,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":73,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":51,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":492,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":133,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":527,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":396,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":2,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":188,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":474,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":275,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":533,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":222,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":525,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":344,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":268,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":361,"com.google.gson.MixedStreamTest.testWriteNulls":635,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":473,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":402,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":468,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":100,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":245,"com.google.gson.CommentsTest.testParseComments":609,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":652,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":106,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":238,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":584,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":164,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":478,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":545,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":450,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":382,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":415,"com.google.gson.MixedStreamTest.testReadInvalidState":610,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":124,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":345,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":561,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":158,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":211,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":500,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":0,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":483,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":623,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":161,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":516,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":147,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":329,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":557,"com.google.gson.functional.MapTest.testMapDeserialization":371,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":471,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":324,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":358,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":360,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":580,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":637,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":71,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":370,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":23,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":21,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":52,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":57,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":592,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":305,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":116,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":278,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":135,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":459,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":314,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":247,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":132,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":139,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":128,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":381,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":348,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":487,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":240,"com.google.gson.functional.PrimitiveTest.testShortSerialization":560,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":585,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":549,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":218,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":265,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":522,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":548,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":10,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":499,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":53,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":590,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":151,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":140,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":366,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":515,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":444,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":566,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":401,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":639,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":339,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":587,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":616,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":650,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":572,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":567,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":87,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":221,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":117,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":224,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":236,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":300,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":555,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":225,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":74,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":528,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":290,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":272,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":595,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":136,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":448,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":315,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":455,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":237,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":20,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":330,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":506,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":30,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":194,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":334,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":6,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":429,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":493,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":556,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":530,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":203,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":165,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":22,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":589,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":579,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":452,"com.google.gson.functional.MapTest.testGeneralMapField":131,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":271,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":465,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":571,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":169,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":174,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":456,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":341,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":384,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":301,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":406,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":497,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":551,"com.google.gson.MixedStreamTest.testReadMixedStreamed":615,"com.google.gson.JsonObjectTest.testDeepCopy":658,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":316,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":373,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":517,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":440,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":485,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":607,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":252,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":534,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":264,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":619,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":228,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":121,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":374,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":426,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":363,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":239,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":570,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":97,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":185,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":518,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":651,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":327,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":403,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":299,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":435,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":586,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":244,"com.google.gson.functional.ObjectTest.testNestedDeserialization":291,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":254,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":282,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":577,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":1,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":262,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":569,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":163,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":219,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":375,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":414,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":77,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":201,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":397,"com.google.gson.JavaSerializationTest.testListIsSerializable":621,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":47,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":210,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":442,"com.google.gson.functional.ObjectTest.testNullSerialization":632,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":137,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":425,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":367,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":14,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":59,"com.google.gson.functional.MapTest.testInterfaceTypeMap":13,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":476,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":458,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":5,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":494,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":86,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":182,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":399,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":460,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":302,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":260,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":509,"com.google.gson.MixedStreamTest.testWriteClosed":614,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":434,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":578,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":107,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":352,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":34,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":81,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":55,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":41,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":118,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":162,"com.google.gson.stream.JsonWriterTest.testLongs":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":123,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":8,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":108,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":433,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":601,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":537,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":186,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":398,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":437,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":648,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":335,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":256,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":146,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":573,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":514,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":310,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":102,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":462,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":29,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":40,"com.google.gson.functional.CollectionTest.testQueueDeserialization":445,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":520,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":535,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":419,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":575,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":216,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":602,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":12,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":215,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":145,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":289,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":427,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":190,"com.google.gson.functional.MapTest.testRawMapSerialization":386,"com.google.gson.JsonParserTest.testParseReader":645,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":441,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":333,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":88,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":112,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":134,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":454,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":24,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":64,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":66,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":294,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":467,"com.google.gson.functional.PrimitiveTest.testByteSerialization":558,"com.google.gson.ObjectTypeAdapterTest.testSerialize":193,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":643,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":143,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":505,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":628,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":636,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":44,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":58,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":155,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":82,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":416,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":604,"com.google.gson.functional.MapTest.testMapWithQuotes":376,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":309,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":512,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":418,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":231,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":484,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":630,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":243,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":96,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":564,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":306,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":125,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":582,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":76,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":288,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":26,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":213,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":544,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":19,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":311,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":46,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":184,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":214,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":554,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":634,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":438,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":470,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":343,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":463,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":50,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":95,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":31,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":603,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":142,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":297,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":248,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":495,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":37,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":206,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":640,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":281,"com.google.gson.functional.ObjectTest.testNestedSerialization":113,"com.google.gson.JsonObjectTest.testAddingStringProperties":659,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":166,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":405,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":422,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":508,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":266,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":385,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":159,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":72,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":613,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":627,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":110,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":255,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":565,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":7,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":251,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":321,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":510,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":618,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":283,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":304,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":600,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":641,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":421,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":18,"com.google.gson.functional.CollectionTest.testSetSerialization":154,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":486,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":75,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":356,"com.google.gson.functional.StringTest.testStringValueSerialization":424,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":103,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":16,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":220,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":430,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":464,"com.google.gson.MixedStreamTest.testWriteInvalidState":611,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":513,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":479,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":519,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":317,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":156,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":98,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":654,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":257,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":259,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":638,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":337,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":644,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":369,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":226,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":469},"transformations":[{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"a7566fab-3e89-11e6-950c-1f16e3a1e3c2","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (json == null) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"a756bdcc-3e89-11e6-950c-ab2645ab1b6a","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[0],"tindex":"a756bdcd-3e89-11e6-950c-db4d0479ff1e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root == null) {\n                {\n                    if (root == null) {\n                        {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n                            if (pivotRight != null) {\n                                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                            } \n                            replaceInParent(root, pivot);\n                            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n                            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"a756e4de-3e89-11e6-950c-c118e75c599b","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"tindex":"a7570bef-3e89-11e6-950c-7fb8b9c6a047","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[26,0,27,28],"tindex":"a7570bf0-3e89-11e6-950c-2544351f705a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    node.int = 1;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n                    (int)++;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                        if ((int) == 0) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                        } else if ((int) == 1) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            int = 0;\n                        } else if ((int) == 2) {\n                            int = 0;\n                        } \n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[0,29,30,31,32,33,34,35,36,37],"tindex":"a7573301-3e89-11e6-950c-63c7fd17d50c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"a7575a12-3e89-11e6-950c-bfb1ed6b8bae","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[2,6,7,9,38,39,40,41,42,43,44,45,46,47,48],"tindex":"a7575a13-3e89-11e6-950c-a5be95d8744b","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"a7578124-3e89-11e6-950c-bd74f9caad3d","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLetter(firstCharacter)"},"failures":[49,50,51,52,53,54],"tindex":"a7578125-3e89-11e6-950c-8b40d172bba6","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        {\n            if (java.lang.Character.isLetter(firstCharacter)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"a7578126-3e89-11e6-950c-1f92ba735b0a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root == null) {\n                {\n                    if (root == null) {\n                        {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n                            if (pivotRight != null) {\n                                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                            } \n                            replaceInParent(root, pivot);\n                            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n                            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[55,56,57,58,59,60,61],"tindex":"a757a837-3e89-11e6-950c-634f22862c95","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"a757a838-3e89-11e6-950c-4b3c8b507ea0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root == null) {\n                {\n                    if (root == null) {\n                        {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n                            if (pivotRight != null) {\n                                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                            } \n                            replaceInParent(root, pivot);\n                            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n                            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"a757a839-3e89-11e6-950c-cb5a0ba6df07","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"a757a83a-3e89-11e6-950c-0113d30c6859","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"a757cf4b-3e89-11e6-950c-1b953f32c38a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    node.int = 1;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n                    (int)++;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                        if ((int) == 0) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                        } else if ((int) == 1) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            int = 0;\n                        } else if ((int) == 2) {\n                            int = 0;\n                        } \n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[1,2,3,6,7,9,38,62,63,57,11,39,15,40,41,42,43,44,45,46,47,48,64,65,66],"tindex":"a757f65c-3e89-11e6-950c-ab5b37581c91","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"a757f65d-3e89-11e6-950c-b127d508d2df","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"a757f65e-3e89-11e6-950c-2df08f575b8c","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[67,68,69,70,1,2,3,4,55,5,6,7,71,8,9,72,73,74,75,76,77,78,79,80,56,81,82,83,84,85,86,87,88,89,90,91,92,62,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,63,57,11,39,124,125,126,127,128,129,130,12,13,14,131,15,132,133,49,134,135,136,50,137,138,139,140,141,142,143,144,145,146,16,147,148,149,150,151,152,153,154,53,155,156,54,157,158,159,160,161,162,163,164,40,41,165,166,167,168,169,170,171,172,173,174,175,176,43,44,46,47,177,48,178,179,20,22,23,180,181,25,182,183,184,185,186,187,188,189,190,191,192,193],"tindex":"a757f65f-3e89-11e6-950c-afa19b8e6e44","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            if (!(boolean))\n                                return false;\n                            \n                            java.lang.Object java.lang.Object = field.get(value);\n                            return fieldValue != value;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[194,195,196,197],"tindex":"a7581c70-3e89-11e6-950c-d7a01ecb625a","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"a7581c71-3e89-11e6-950c-fd3de5557548","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[198,199,200,201,202,203,204],"tindex":"a7581c72-3e89-11e6-950c-8bbad17371b1","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[205,74,206,207,208,209,210],"tindex":"a7581c73-3e89-11e6-950c-b1acb0ee72c0","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"a7584384-3e89-11e6-950c-c7575dc52b01","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"a7584385-3e89-11e6-950c-ef12947c840c","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[211,193,212],"tindex":"a7586a96-3e89-11e6-950c-6df9b1b6452e","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"a7586a97-3e89-11e6-950c-2d4852d6cd38","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (json == null) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[117,213,214,215,216],"tindex":"a7586a98-3e89-11e6-950c-adb5245bfccb","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[217,218],"tindex":"a7586a99-3e89-11e6-950c-2b512be058b7","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"a7586a9a-3e89-11e6-950c-83a93ce0846f","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[67,219,68,220,221,222,69,70,1,2,3,4,55,5,6,7,223,224,71,8,9,72,225,226,227,228,229,230,231,232,233,234,235,236,73,205,74,237,75,238,239,240,206,241,242,243,244,76,245,38,77,78,79,80,56,246,81,82,83,247,84,248,249,85,250,251,252,92,253,62,254,255,93,94,256,95,257,96,258,259,260,261,262,263,264,265,266,97,98,99,100,101,267,102,103,104,105,268,269,106,270,271,107,272,273,108,274,275,109,276,110,277,278,279,280,111,281,112,113,282,283,114,284,285,286,115,287,116,117,288,118,289,290,291,292,293,294,295,119,296,297,298,120,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,10,319,213,194,214,215,320,321,322,323,324,325,326,327,328,121,329,330,195,331,332,333,334,335,336,337,338,339,340,341,342,122,343,344,216,345,123,346,347,348,349,350,351,352,63,57,11,39,124,353,125,126,127,354,355,128,129,356,357,358,130,359,360,361,362,363,364,365,366,367,368,369,370,371,12,372,373,374,375,376,377,378,379,380,381,382,383,13,384,14,131,385,386,387,388,389,390,391,392,393,394,15,132,395,396,133,49,134,135,397,136,50,137,51,398,138,399,139,400,52,140,141,142,207,208,209,401,210,402,403,404,143,405,406,144,145,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,146,16,147,148,149,425,426,150,427,151,428,429,430,431,432,433,434,17,152,435,436,437,438,439,153,440,441,154,442,443,444,445,446,447,448,449,53,155,156,54,157,450,451,158,452,159,453,454,455,456,457,458,160,459,460,161,162,163,164,40,41,165,166,167,168,461,462,463,464,465,466,467,468,469,470,471,472,18,473,474,475,476,58,477,169,478,479,480,19,481,482,483,170,484,485,171,172,173,42,174,486,175,176,487,488,489,490,491,59,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,60,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,198,534,535,536,537,538,539,540,541,542,543,544,545,199,200,546,547,548,549,550,551,552,553,554,555,556,557,558,201,559,560,561,61,562,563,564,202,565,566,567,568,569,203,570,571,572,573,574,43,44,45,46,47,177,575,48,178,576,577,179,578,579,20,580,581,21,582,583,22,23,584,180,585,181,24,586,25,587,588,589,590,591,592,593,182,594,595,596,597,598,183,599,600,184,185,601,602,186,603,604,187,605,606,607,188,189,608,64,65,66,609,190,610,191,611,204,612,613,614,615,616,617,618,619,620,621,192,193,212,622,623,624,625,197,626,627],"tindex":"a75891ab-3e89-11e6-950c-6d9d09690e46","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[628],"tindex":"a75891ac-3e89-11e6-950c-e7215a4e45bc","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (java.lang.reflect.Type.equals(from)) {\n                        return true;\n                    } \n                    if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                        return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                        return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n                    } else {\n                        throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"a758b8bd-3e89-11e6-950c-11ca0010bc5a","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isUpperCase(firstCharacter))"},"failures":[],"tindex":"a758b8be-3e89-11e6-950c-d5282555ea10","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        {\n            if (java.lang.Character.isLetter(firstCharacter)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"a758b8bf-3e89-11e6-950c-171975b7a934","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[198,199,200,201,202,203,204],"tindex":"a758b8c0-3e89-11e6-950c-c7bb91fe6233","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[365,427,465,193,212],"tindex":"a758dfd1-3e89-11e6-950c-1f0abc24125f","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"a758dfd2-3e89-11e6-950c-dfd2168631bd","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"a758dfd3-3e89-11e6-950c-7ba0d8fea476","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            if (o instanceof com.google.gson.JsonPrimitive) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.util.Map.Entry) {\n                        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                    } \n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[303,629,630,631],"tindex":"a758dfd4-3e89-11e6-950c-ed306e9ae05c","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"a758dfd5-3e89-11e6-950c-0de731bd0f16","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[72,231,233,75,238,239,242,243,244,254,258,260,261,263,632,633,634,301,311,313,340,343,348,360,444,458,45,583,24,590,606,635,636,637,217,638,639],"tindex":"a75906e6-3e89-11e6-950c-ef6f719e4147","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[622,623,624],"tindex":"a75906e7-3e89-11e6-950c-1b7f7d618ac5","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.equals(from)) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[69,6,76,77,79,81,82,640,641,62,266,103,104,106,110,111,112,354,129,356,357,358,365,131,406,415,146,16,147,148,149,462,463,465,466,467,468,469,472,18,473,58,169,479,19,482,175,508,517,548,561,566,570,43,21,617,618],"tindex":"a75906e8-3e89-11e6-950c-9db16750ff6e","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"a7592df9-3e89-11e6-950c-0b2bfd221805","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[],"tindex":"a7592dfa-3e89-11e6-950c-212935984f03","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            if (!(boolean))\n                                return false;\n                            \n                            java.lang.Object java.lang.Object = field.get(value);\n                            return fieldValue != value;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"a7592dfb-3e89-11e6-950c-abf64f9672c5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[10,349,24],"tindex":"a7592dfc-3e89-11e6-950c-55a111dd7612","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[1,2,3,6,7,9,234,73,205,74,206,38,248,642,62,256,96,643,644,119,303,317,63,57,11,39,392,15,207,208,209,401,210,450,451,158,452,159,453,454,40,41,170,171,172,42,43,44,46,47,48,579,582,64,645,646,192,647,648,649,650,651,652,653,654,655,631,656,657,658,659,660],"tindex":"a7592dfd-3e89-11e6-950c-17e00d639f7f","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:618","type":"CtBinaryOperatorImpl","sourcecode":"(c == 'f') || (c == 'F')"},"failures":[],"tindex":"a759550e-3e89-11e6-950c-4fce512fc91f","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c == 'f') || (c == 'F')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"a759550f-3e89-11e6-950c-7b03dfaf80c8","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            if (o instanceof com.google.gson.JsonPrimitive) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.util.Map.Entry) {\n                        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                    } \n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"a7595510-3e89-11e6-950c-e98e95217669","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"a7595511-3e89-11e6-950c-0525ea85160f","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (throwOnEof) {\n                {\n                    char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n                    int int = int;\n                    int int = int;\n                    while (true) {\n                        if (p == l) {\n                            int = p;\n                            if (!(fillBuffer(1))) {\n                                break;\n                            } \n                            p = int;\n                            l = int;\n                        } \n                        int int = buffer[(p++)];\n                        if (c == '\\n') {\n                            (int)++;\n                            int = p;\n                            continue;\n                        } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                            continue;\n                        } \n                        if (c == '/') {\n                            int = p;\n                            if (p == l) {\n                                (int)--;\n                                boolean boolean = fillBuffer(2);\n                                (int)++;\n                                if (!charsLoaded) {\n                                    return c;\n                                } \n                            } \n                            checkLenient();\n                            char char = buffer[int];\n                            switch (peek) {\n                                case '*' :\n                                    (int)++;\n                                    if (!(skipTo(\"*/\"))) {\n                                        throw syntaxError(\"Unterminated comment\");\n                                    } \n                                    p = (int) + 2;\n                                    l = int;\n                                    continue;\n                                case '/' :\n                                    (int)++;\n                                    skipToEndOfLine();\n                                    p = int;\n                                    l = int;\n                                    continue;\n                                default :\n                                    return c;\n                            }\n                        } else if (c == '#') {\n                            int = p;\n                            checkLenient();\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                        } else {\n                            int = p;\n                            return c;\n                        }\n                    }\n                    if (throwOnEof) {\n                        throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n                    } else {\n                        return -1;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"a7597c22-3e89-11e6-950c-55e3c365df16","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"a7597c23-3e89-11e6-950c-65729643dff4","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"a7597c24-3e89-11e6-950c-a75fea8b3ae0","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"a759a335-3e89-11e6-950c-41b718b90810","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"a759a336-3e89-11e6-950c-0dd33387b9e5","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"a759a337-3e89-11e6-950c-056fb22d6633","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (java.lang.reflect.Type.equals(from)) {\n                        return true;\n                    } \n                    if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                        return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                        return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n                    } else {\n                        throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"a759a338-3e89-11e6-950c-116bc1034da8","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        {\n            if ((indent.length()) == 0) {\n                {\n                    if ((indent.length()) == 0) {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n                    } else {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"a759a339-3e89-11e6-950c-dfbae519729f","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"a759ca4a-3e89-11e6-950c-19e7455be823","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"a759ca4b-3e89-11e6-950c-297cd1af6017","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        {\n            if ((indent.length()) == 0) {\n                {\n                    if ((indent.length()) == 0) {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n                    } else {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"a759ca4c-3e89-11e6-950c-197a09dc45dd","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"a759f15d-3e89-11e6-950c-5b6b7d35066f","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"a759f15e-3e89-11e6-950c-03d9a0f37728","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[],"tindex":"a759f15f-3e89-11e6-950c-b9a21a44679a","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"a759f160-3e89-11e6-950c-8dfb1484e6f8","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"a75a1871-3e89-11e6-950c-ef0c9402816d","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            if (!(boolean))\n                                return false;\n                            \n                            java.lang.Object java.lang.Object = field.get(value);\n                            return fieldValue != value;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"a75a1872-3e89-11e6-950c-d7cf692387f8","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"a75a1873-3e89-11e6-950c-bd4a9849c724","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"a75a1874-3e89-11e6-950c-efc28882ddd8","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[],"tindex":"a75a1875-3e89-11e6-950c-61e399d6ceab","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"a75a3f86-3e89-11e6-950c-836d09beba4a","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (throwOnEof) {\n                {\n                    char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n                    int int = int;\n                    int int = int;\n                    while (true) {\n                        if (p == l) {\n                            int = p;\n                            if (!(fillBuffer(1))) {\n                                break;\n                            } \n                            p = int;\n                            l = int;\n                        } \n                        int int = buffer[(p++)];\n                        if (c == '\\n') {\n                            (int)++;\n                            int = p;\n                            continue;\n                        } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                            continue;\n                        } \n                        if (c == '/') {\n                            int = p;\n                            if (p == l) {\n                                (int)--;\n                                boolean boolean = fillBuffer(2);\n                                (int)++;\n                                if (!charsLoaded) {\n                                    return c;\n                                } \n                            } \n                            checkLenient();\n                            char char = buffer[int];\n                            switch (peek) {\n                                case '*' :\n                                    (int)++;\n                                    if (!(skipTo(\"*/\"))) {\n                                        throw syntaxError(\"Unterminated comment\");\n                                    } \n                                    p = (int) + 2;\n                                    l = int;\n                                    continue;\n                                case '/' :\n                                    (int)++;\n                                    skipToEndOfLine();\n                                    p = int;\n                                    l = int;\n                                    continue;\n                                default :\n                                    return c;\n                            }\n                        } else if (c == '#') {\n                            int = p;\n                            checkLenient();\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                        } else {\n                            int = p;\n                            return c;\n                        }\n                    }\n                    if (throwOnEof) {\n                        throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n                    } else {\n                        return -1;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"a75a3f87-3e89-11e6-950c-576445386e84","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[],"tindex":"a75a3f88-3e89-11e6-950c-89451dd69ec5","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from.equals(from)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"a75a6699-3e89-11e6-950c-b9ab681cae4e","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915559/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":79,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
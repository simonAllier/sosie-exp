{"failureDictionary":{"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":283,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":31,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":110,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":180,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":92,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":163,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":13,"com.google.gson.functional.PrimitiveTest.testShortSerialization":325,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":191,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":201,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":18,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":150,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":261,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":84,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":206,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":227,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":344,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":234,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":251,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":210,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":216,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":64,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":281,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":159,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":349,"com.google.gson.functional.ObjectTest.testSingletonLists":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":82,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":217,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":164,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":274,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":95,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":326,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":20,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":355,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":128,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":279,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":66,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":212,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":104,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":350,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":178,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":209,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":17,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":27,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":232,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":236,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":185,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":255,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":80,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":190,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":199,"com.google.gson.functional.EnumTest.testEnumCaseMapping":342,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":162,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":71,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":328,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":192,"com.google.gson.functional.JsonTreeTest.testToJsonTree":289,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":290,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":144,"com.google.gson.JsonArrayTest.testSet":266,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":316,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":160,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":220,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":187,"com.google.gson.JsonPrimitiveTest.testEquals":292,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":188,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":205,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":346,"com.google.gson.functional.MapTest.testGeneralMapField":11,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":39,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":286,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":97,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":47,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":237,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":85,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":302,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":132,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":155,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":313,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":151,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":358,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":120,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":277,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":360,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":197,"com.google.gson.JsonObjectTest.testDeepCopy":270,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":250,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":138,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":275,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":257,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":347,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":93,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":225,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":79,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":148,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":142,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":202,"com.google.gson.JsonArrayTest.testDeepCopy":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":260,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":44,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":107,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":126,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":81,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":219,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":78,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":30,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":291,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":172,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":329,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":271,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":323,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":124,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":351,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":306,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":149,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":198,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":176,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":40,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":125,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":244,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":253,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":293,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":22,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":134,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":264,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":334,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":154,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":26,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":310,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":203,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":348,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":83,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":10,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":131,"com.google.gson.functional.MapTest.testInterfaceTypeMap":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":77,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":249,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":269,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":239,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":311,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":65,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":208,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":343,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":117,"com.google.gson.functional.EnumTest.testEnumSet":204,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":242,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":337,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":67,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":196,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":298,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":121,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":336,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":353,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":194,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":231,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":115,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":152,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":338,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":34,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":129,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":175,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":245,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":14,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":23,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":91,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":36,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":116,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":230,"com.google.gson.functional.MapTest.testMapSerialization":300,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":309,"com.google.gson.functional.MapTest.testSerializeMaps":4,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":54,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":215,"com.google.gson.functional.MapTest.testComplexKeysSerialization":304,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":233,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":276,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":319,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":50,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":56,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":99,"com.google.gson.JsonParserTest.testParseInvalidJson":265,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":136,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":193,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":288,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":37,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":100,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":139,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":308,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":89,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":181,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":282,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":19,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":5,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":73,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":103,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":226,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":158,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":228,"com.google.gson.functional.MapTest.testRawMapSerialization":12,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":307,"com.google.gson.functional.PrettyPrintingTest.testMap":179,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":238,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":24,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":122,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":229,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":68,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":354,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":74,"com.google.gson.functional.MapTest.testMapSerializationEmpty":305,"com.google.gson.functional.CollectionTest.testQueueSerialization":345,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":41,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":94,"com.google.gson.functional.PrimitiveTest.testByteSerialization":324,"com.google.gson.functional.MapTest.testMapOfMapSerialization":7,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":140,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":222,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":60,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":145,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":322,"com.google.gson.functional.FieldNamingTest.testIdentity":55,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":165,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":46,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":52,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":339,"com.google.gson.functional.MapTest.testMapWithQuotes":6,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":171,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":314,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":21,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":112,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":101,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":109,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":32,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":256,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":166,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":259,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":143,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":63,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":1,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":75,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":332,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":157,"com.google.gson.functional.MapTest.testMapSubclassSerialization":297,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":70,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":147,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":252,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":49,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":211,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":240,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":86,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":335,"com.google.gson.functional.EnumTest.testEnumSubclass":207,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":315,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":356,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":130,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":246,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":72,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":213,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":102,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":87,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":333,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":28,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":173,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":111,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":352,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":357,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":108,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":0,"com.google.gson.functional.ObjectTest.testNestedSerialization":123,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":221,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":135,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":223,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":141,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":218,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":303,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":88,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":330,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":312,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":254,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":42,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":118,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":98,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":106,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":114,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":177,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":8,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":167,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":296,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":61,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":169,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":90,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":156,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":45,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":2,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":280,"com.google.gson.functional.CollectionTest.testSetSerialization":235,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":105,"com.google.gson.functional.StringTest.testStringValueSerialization":170,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":182,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":16,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":57,"com.google.gson.JsonParserTest.testParseMixedArray":263,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":133,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":294,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":174,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":273,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":137,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":48,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":58,"com.google.gson.JsonArrayTest.testRemove":268,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":318,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":317,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":53,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":76,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":359,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":96,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":184,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":258,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":284,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":35,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":299,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":189,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":186,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":33,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":195,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":272,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":340,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":119,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":320,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":25,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":69,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":43},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257],"tindex":"16b2ee50-3e8b-11e6-9279-332d01f35209","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                            } \n                            return toJson(src, src.getClass());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287],"tindex":"16b36381-3e8b-11e6-9279-91a0c06132c7","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                {\n                    if (element == null) {\n                        element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    java.util.List<com.google.gson.JsonElement>.add(element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[288,289,290,291,292,293],"tindex":"16b36382-3e8b-11e6-9279-e959783639fc","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isNumber()) {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[294],"tindex":"16b38a93-3e8b-11e6-9279-e717a0e80b39","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[0,1,295,296,2,3,258,297,4,298,299,5,6,7,300,301,8,9,302,10,11,303,12,304,305,306,307,13,14,308,309,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,310,34,311,35,36,37,38,39,40,41,42,43,44,45,312,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,313,67,259,68,314,315,316,69,317,70,71,72,73,74,75,76,77,78,79,318,80,81,82,319,320,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,321,102,103,104,105,106,107,108,322,109,323,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,324,154,155,325,156,157,158,159,160,161,326,327,328,329,162,163,164,165,166,167,168,169,170,330,171,172,173,174,175,176,177,178,179,180,181,182,183,184,331,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,332,333,334,335,336,203,337,338,339,340,341,204,205,206,207,208,209,342,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,343,227,228,344,229,345,230,231,346,232,233,234,347,235,348,349,236,237,238,239,240,241,242,243,244,245,350,351,246,247,248,249,250,251,252,352,253,254,353,255,256,257,354,355,356],"tindex":"16b38a94-3e8b-11e6-9279-d54b6aca6747","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[357],"tindex":"16b3b1a5-3e8b-11e6-9279-c5c7995a4584","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[358,359],"tindex":"16b3d8b6-3e8b-11e6-9279-457d64622801","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"16b3ffc7-3e8b-11e6-9279-673262d50681","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.set(index, element);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[360,269],"tindex":"16b3ffc8-3e8b-11e6-9279-a1b0419cc6d2","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[313,315,316,84,87,92],"tindex":"16b3ffc9-3e8b-11e6-9279-7bbb61f1de2a","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"16b426da-3e8b-11e6-9279-f583ed2efbe3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"16b426db-3e8b-11e6-9279-fdf832389c7f","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a","b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[187],"tindex":"16b426dc-3e8b-11e6-9279-9db70dc85241","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    return toJsonTree(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"16b44ded-3e8b-11e6-9279-01cef15c6c74","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    return toJsonTree(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"16b44dee-3e8b-11e6-9279-87e38feea895","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[],"tindex":"16b44def-3e8b-11e6-9279-3b4ff099331a","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"16b44df0-3e8b-11e6-9279-0b8c46b4115d","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                            } \n                            return toJson(src, src.getClass());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"16b44df1-3e8b-11e6-9279-49b4c5a23d61","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                {\n                    if (element == null) {\n                        element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    java.util.List<com.google.gson.JsonElement>.add(element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"16b47402-3e8b-11e6-9279-8d652e8f2cbd","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"16b47403-3e8b-11e6-9279-6177c6711930","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                            } \n                            return toJson(src, src.getClass());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"16b47404-3e8b-11e6-9279-4143276c2b44","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.set(index, element);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"16b47405-3e8b-11e6-9279-d7af5b4fbd23","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:545","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\u2028'"},"failures":[],"tindex":"16b47406-3e8b-11e6-9279-adb6609a97e3","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\u2028') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"16b49b17-3e8b-11e6-9279-dd98ca5f8393","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[],"tindex":"16b49b18-3e8b-11e6-9279-79368638aeee","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"16b4c229-3e8b-11e6-9279-79301c0d4bff","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[],"tindex":"16b4c22a-3e8b-11e6-9279-3fae099406d7","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from.equals(from)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"16b4e93b-3e8b-11e6-9279-47680e643d26","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"16b4e93c-3e8b-11e6-9279-f9f40fc4908f","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267295162/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":29,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
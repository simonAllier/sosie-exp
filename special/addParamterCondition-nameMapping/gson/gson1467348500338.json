{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":21,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":79,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":106,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":161,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":50,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":276,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":25,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":159,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":221,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":183,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":128,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":188,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":85,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":170,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":171,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":11,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":126,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":174,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":273,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":228,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":96,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":203,"com.google.gson.functional.ObjectTest.testSingletonLists":124,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":186,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":7,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":301,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":168,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":210,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":245,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":281,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":294,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":139,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":29,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":63,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":153,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":236,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":193,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":194,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":116,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":105,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":238,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":157,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":131,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":51,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":256,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":72,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":220,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":201,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":45,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":207,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":287,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":213,"com.google.gson.functional.JsonTreeTest.testToJsonTree":43,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":208,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":259,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":60,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":66,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":283,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":103,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":303,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":52,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":275,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":204,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":166,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":119,"com.google.gson.functional.MapTest.testGeneralMapField":48,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":129,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":177,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":33,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":231,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":279,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":136,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":262,"com.google.gson.MixedStreamTest.testReadMixedStreamed":244,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":299,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":234,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":147,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":212,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":295,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":6,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":83,"com.google.gson.JsonParserTest.testParseString":272,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":223,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":286,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":150,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":115,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":184,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":197,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":289,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":282,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":77,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":37,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":214,"com.google.gson.functional.ObjectTest.testNestedDeserialization":158,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":235,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":144,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":163,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":54,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":111,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":146,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":4,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":10,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":132,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":26,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":32,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":91,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":8,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":71,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":57,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":94,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":88,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":187,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":267,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":297,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":74,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":291,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":47,"com.google.gson.functional.MapTest.testInterfaceTypeMap":46,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":215,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":233,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":59,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":180,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":284,"com.google.gson.functional.CollectionTest.testSetDeserialization":173,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":229,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":14,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":135,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":78,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":95,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":140,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":0,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":93,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":217,"com.google.gson.MixedStreamTest.testWriteClosed":243,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":165,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":169,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":62,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":130,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":261,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":97,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":58,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":114,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":110,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":155,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":68,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":160,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":211,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":225,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":65,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":133,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":266,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":198,"com.google.gson.functional.MapTest.testMapSerialization":252,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":162,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":280,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":117,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":191,"com.google.gson.functional.MapTest.testSerializeMaps":251,"com.google.gson.functional.MapTest.testComplexKeysSerialization":49,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":200,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":76,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":250,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":16,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":15,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":179,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":209,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":40,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":278,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":80,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":181,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":113,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":107,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":199,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":27,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":44,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":148,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":149,"com.google.gson.functional.MapTest.testStringKeyDeserialization":288,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":84,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":156,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":240,"com.google.gson.functional.MapTest.testRawMapSerialization":253,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":254,"com.google.gson.JsonParserTest.testParseReader":271,"com.google.gson.functional.PrettyPrintingTest.testMap":257,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":264,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":69,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":142,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":265,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":164,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":121,"com.google.gson.ObjectTypeAdapterTest.testSerialize":1,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":292,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":82,"com.google.gson.JavaSerializationTest.testMapIsSerializable":269,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":86,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":20,"com.google.gson.functional.FieldNamingTest.testIdentity":192,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":249,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":189,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":98,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":36,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":151,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":31,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":42,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":123,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":67,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":22,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":227,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":3,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":19,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":89,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":154,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":108,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":12,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":102,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":134,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":182,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":241,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":185,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":224,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":167,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":92,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":138,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":230,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":87,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":196,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":237,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":75,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":246,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":255,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":73,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":38,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":13,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":24,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":23,"com.google.gson.stream.JsonWriterTest.testNullName":302,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":55,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":298,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":2,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":141,"com.google.gson.functional.ObjectTest.testNestedSerialization":143,"com.google.gson.internal.LinkedTreeMapTest.testClear":274,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":277,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":53,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":30,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":120,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":104,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":125,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":248,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":137,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":90,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":178,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":127,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":206,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":61,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":5,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":34,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":222,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":218,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":195,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":226,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":101,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":263,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":118,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":300,"com.google.gson.functional.CollectionTest.testSetSerialization":175,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":232,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":239,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":258,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":122,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":17,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":28,"com.google.gson.MixedStreamTest.testWriteInvalidState":242,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":109,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":18,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":35,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":9,"com.google.gson.functional.MapTest.testMapDeserialization":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":296,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":190,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":270,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":176,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":260,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":202,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":64,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":205,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":39,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":81,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":290,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":219,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":99,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":152,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":70,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":293,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":56,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":100,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":247},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"08c4508d-3f47-11e6-9177-5f6fd49e4893","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347995189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245],"tindex":"08c5b01e-3f47-11e6-9177-012d04491a44","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347995189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[221],"tindex":"08c6254f-3f47-11e6-9177-25dcb40feb06","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347995189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"08c64c60-3f47-11e6-9177-030ab910fd44","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347995189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[1,4,7,12,13,21,24,27,31,246,247,248,249,33,250,36,37,40,41,42,43,251,252,48,253,254,58,64,67,74,79,82,83,84,89,255,91,92,93,94,95,97,98,99,101,103,104,256,257,106,107,258,259,260,108,111,112,114,115,261,262,263,264,122,127,135,137,140,143,150,152,155,160,161,162,168,169,170,265,266,172,174,175,267,188,189,190,191,192,193,196,197,200,211,213,214,226,268,227,228,229,238,239,240,241],"tindex":"08c64c61-3f47-11e6-9177-178e3e277a58","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347995189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl"},"failures":[269,270,271,272,4,273,274,275,276,277,278,279,280,281,282,283,284,12,40,41,42,43,285,286,287,288,51,55,56,60,61,66,67,113,114,289,290,119,291,121,292,293,161,166,168,294,183,184,185,186,187,211,213,214,295,296,297,298],"tindex":"08c67372-3f47-11e6-9177-af982b31eeeb","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347995189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[299,270],"tindex":"08c6c193-3f47-11e6-9177-a5c853c81300","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347995189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl"},"failures":[],"tindex":"08c6c194-3f47-11e6-9177-11de070fa7f0","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isNumber()) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347995189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"08c6e8a5-3f47-11e6-9177-e5afe9f16ecb","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347995189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[300,1,301,33,122,137,172,174,175,226,227,228,229],"tindex":"08c6e8a6-3f47-11e6-9177-353c4db0a284","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347995189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n                    if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                        out.beginObject();\n                        out.endObject();\n                        return ;\n                    } \n                    typeAdapter.write(out, value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347995189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"08c70fb7-3f47-11e6-9177-a90e12261211","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"08c736c8-3f47-11e6-9177-a154e1a0a85a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347995189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[302],"tindex":"08c75dd9-3f47-11e6-9177-a117bf826891","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347995189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[303],"tindex":"08c75dda-3f47-11e6-9177-11812345b807","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347995189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"08c75ddb-3f47-11e6-9177-25272aa5049a","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347995189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n                    if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                        out.beginObject();\n                        out.endObject();\n                        return ;\n                    } \n                    typeAdapter.write(out, value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347995189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[300,1,301],"tindex":"08c784ec-3f47-11e6-9177-33d7abae1c89","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347995189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl"},"failures":[68,73,75,81,188,191],"tindex":"08c7abfd-3f47-11e6-9177-79d845929a71","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347995189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"08c7abfe-3f47-11e6-9177-2bc967db569a","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347995189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[],"tindex":"08c7fa1f-3f47-11e6-9177-7b491c79330d","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347995189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"08c7fa20-3f47-11e6-9177-95bec4264b5a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347995189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"08c7fa21-3f47-11e6-9177-074b673a52f8","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347995189/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":21,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
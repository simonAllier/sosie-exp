{"failureDictionary":{"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":92,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":112,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":131,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":176,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":89,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":235,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":183,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":211,"com.google.gson.stream.JsonWriterTest.testRepeatedName":232,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":250,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":0,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":102,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":251,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":59,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":74,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":221,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":159,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":227,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":39,"com.google.gson.functional.ObjectTest.testSingletonLists":201,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":150,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":241,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":108,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":242,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":216,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":29,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":57,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":146,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":220,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":244,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":110,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":223,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":129,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":16,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":158,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":222,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":207,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":193,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":210,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":248,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":124,"com.google.gson.stream.JsonWriterTest.testNullStringValue":230,"com.google.gson.functional.JsonTreeTest.testToJsonTree":95,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":212,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":134,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":27,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":31,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":70,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":217,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":71,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":208,"com.google.gson.functional.MapTest.testGeneralMapField":85,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":47,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":100,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":179,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":58,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":121,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":240,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":246,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":247,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":226,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":239,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":107,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":153,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":44,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":218,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":118,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":151,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":148,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":231,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":192,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":187,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":128,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":125,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":199,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":52,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":252,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":182,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":65,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":205,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":79,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":163,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":11,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":138,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":15,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":188,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":141,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":62,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":160,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":194,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":180,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":73,"com.google.gson.functional.MapTest.testInterfaceTypeMap":178,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":225,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":50,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":189,"com.google.gson.functional.CollectionTest.testSetDeserialization":75,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":40,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":214,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":215,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":55,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":142,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":171,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":116,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":140,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":238,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":109,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":28,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":120,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":202,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":143,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":26,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":68,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":64,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":119,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":12,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":88,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":45,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":190,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":203,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":157,"com.google.gson.functional.MapTest.testMapSerialization":84,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":90,"com.google.gson.functional.MapTest.testSerializeMaps":83,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":105,"com.google.gson.functional.MapTest.testComplexKeysSerialization":5,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":149,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":20,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":101,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":32,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":49,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":213,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":93,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":21,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":51,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":67,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":132,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":7,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":173,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":236,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":154,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":196,"com.google.gson.functional.MapTest.testRawMapSerialization":86,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":164,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":87,"com.google.gson.functional.PrettyPrintingTest.testMap":130,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":155,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":13,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":156,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":204,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":184,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":3,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":219,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":2,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":237,"com.google.gson.functional.PrimitiveTest.testByteSerialization":254,"com.google.gson.ObjectTypeAdapterTest.testSerialize":80,"com.google.gson.functional.MapTest.testMapOfMapSerialization":175,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":185,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":152,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":229,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":60,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":36,"com.google.gson.functional.FieldNamingTest.testIdentity":106,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":99,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":103,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":144,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":127,"com.google.gson.functional.MapTest.testMapWithQuotes":174,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":10,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":94,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":200,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":245,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":23,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":82,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":38,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":1,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":35,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":137,"com.google.gson.functional.MapTest.testMapSubclassSerialization":170,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":136,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":161,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":54,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":77,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":195,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":139,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":224,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":61,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":147,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":53,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":19,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":81,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":96,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":17,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":206,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":113,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":162,"com.google.gson.stream.JsonWriterTest.testTwoNames":228,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":25,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":198,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":166,"com.google.gson.functional.ObjectTest.testNestedSerialization":117,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":72,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":9,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":181,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":233,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":169,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":126,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":98,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":115,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":48,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":114,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":197,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":43,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":41,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":253,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":37,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":69,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":122,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":168,"com.google.gson.functional.CollectionTest.testSetSerialization":76,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":111,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":133,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":91,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":8,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":33,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":63,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":34,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":191,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":104,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":46,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":135,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":30,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":172,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":209,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":22,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":42,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":145,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":56,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":14,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":186,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":234,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":97},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[],"tindex":"04451cd0-3e51-11e6-8d87-f5b19a268fec","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0],"tindex":"04456af1-3e51-11e6-8d87-85f5d1f03580","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"04459202-3e51-11e6-8d87-eb02800d45d3","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"0445b913-3e51-11e6-8d87-09ad60a932f9","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[0,1,2],"tindex":"0445e024-3e51-11e6-8d87-bd176767445c","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"0445e025-3e51-11e6-8d87-092ad3aef146","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"0445e026-3e51-11e6-8d87-610bb422c2d7","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,0,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"tindex":"04465557-3e51-11e6-8d87-535697805e25","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[81,82],"tindex":"04467c68-3e51-11e6-8d87-c558fecef3be","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"04467c69-3e51-11e6-8d87-0fa869401dbb","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"0446a37a-3e51-11e6-8d87-71fa4524aa97","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"0446a37b-3e51-11e6-8d87-4d169c4c7ed4","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"0446ca8c-3e51-11e6-8d87-374e431239a2","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[83,84,85,86,87,88,89,90,91,7,10,18,92,23,93,24,94,95,26,30,96,97,98,99,100,101,102,103,104,105,106,37,107,38,39,40,108,109,110,111,112,113,114,55,115,116,117,118,56,119,120,121,122,123,124,125,126,127,128,65,66,68,129,130,131,132,133,134,135,136,137,81,138,139,140,141,142,143,144,145,69,70,146,147,148,149,150,151,152,153,154,155,74,156,157,158,159,76,160,161,162,163,164,165,80],"tindex":"0446ca8d-3e51-11e6-8d87-dbdf801e4059","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[166,167,168,169,170,83,171,172,173,174,175,84,176,177,178,179,180,85,181,86,5,182,87,183,88,90,184,91,185,186,6,7,10,11,12,13,14,16,17,18,187,92,23,24,188,26,189,30,190,100,102,103,104,105,106,32,33,34,35,36,37,38,39,40,191,192,44,193,194,195,45,108,109,46,47,48,49,51,53,196,110,111,197,198,199,112,113,200,201,114,202,203,55,115,116,204,117,205,118,56,57,119,123,124,125,126,127,128,206,63,64,65,66,130,131,132,136,207,208,209,210,211,212,213,137,81,138,139,140,141,142,143,144,145,69,70,214,146,147,148,149,150,151,71,72,152,153,154,215,216,155,217,218,219,220,74,221,158,159,76,222,77,78,79,223,224,225,226,227,161,162,163,228,229,230,231,232,233,234,235,236,237,164,165,238,239,240,80,241,242,243,244],"tindex":"0446ca8e-3e51-11e6-8d87-f1384f14f644","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[245,246,247,248,249,250,251,223,252,253,238],"tindex":"0446f19f-3e51-11e6-8d87-43c618e7a899","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[254],"tindex":"0446f1a0-3e51-11e6-8d87-e584dcc72502","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLetter(firstCharacter)"},"failures":[],"tindex":"044718b1-3e51-11e6-8d87-a90941d1fabb","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (java.lang.Character.isLetter(firstCharacter)) {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:547","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\u2029'"},"failures":[],"tindex":"044718b2-3e51-11e6-8d87-4bfe3d1c1688","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\u2029') {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"044718b3-3e51-11e6-8d87-53e78eb5ba68","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":20,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
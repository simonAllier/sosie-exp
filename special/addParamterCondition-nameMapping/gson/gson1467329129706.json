{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":52,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":134,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":98,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":161,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":11,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":342,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":242,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":375,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":110,"com.google.gson.functional.PrimitiveTest.testShortSerialization":202,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":299,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":84,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":54,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":316,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":17,"com.google.gson.MixedStreamTest.testWriteLenient":371,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":283,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":334,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":140,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":256,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":258,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":36,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":266,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":31,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":46,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":348,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":206,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":270,"com.google.gson.functional.ObjectTest.testSingletonLists":217,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":330,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":243,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":24,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":252,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":22,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":209,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":3,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":56,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":234,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":25,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":289,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":306,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":359,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":111,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":159,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":44,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":130,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":250,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":264,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":276,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":293,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":6,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":82,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":328,"com.google.gson.functional.EnumTest.testEnumCaseMapping":45,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":0,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":241,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":304,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":318,"com.google.gson.functional.JsonTreeTest.testToJsonTree":88,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":300,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":164,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":121,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":125,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":156,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":189,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":313,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":207,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":113,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":295,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":40,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":296,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":263,"com.google.gson.functional.MapTest.testGeneralMapField":103,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":61,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":272,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":70,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":277,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":335,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":101,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":27,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":137,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":177,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":307,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":196,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":226,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":80,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":354,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":183,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":8,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":26,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":267,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":344,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":138,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":83,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":193,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":326,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":158,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":187,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":66,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":208,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":232,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":329,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":174,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":291,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":325,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":133,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":75,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":305,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":19,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":366,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":112,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":230,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":108,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":115,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":81,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":194,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":169,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":62,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":231,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":15,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":34,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":58,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":179,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":147,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":200,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":118,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":150,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":144,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":269,"com.google.gson.functional.ObjectTest.testNullSerialization":223,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":333,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":102,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":176,"com.google.gson.functional.MapTest.testInterfaceTypeMap":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":324,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":353,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":279,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":120,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":349,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":43,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":210,"com.google.gson.functional.EnumTest.testEnumSet":39,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":222,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":282,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":151,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":308,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":79,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":92,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":227,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":5,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":149,"com.google.gson.MixedStreamTest.testWriteClosed":373,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":77,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":255,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":262,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":197,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":219,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":152,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":119,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":172,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":35,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":168,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":235,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":127,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":236,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":341,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":124,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":220,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":261,"com.google.gson.functional.MapTest.testMapSerialization":97,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":239,"com.google.gson.functional.MapTest.testSerializeMaps":91,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":286,"com.google.gson.functional.MapTest.testComplexKeysSerialization":106,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":292,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":265,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":331,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":73,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":47,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":274,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":181,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":302,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":85,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":59,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":275,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":171,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":184,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":253,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":237,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":339,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":55,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":320,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":139,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":358,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":205,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":257,"com.google.gson.functional.MapTest.testRawMapSerialization":105,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":367,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":109,"com.google.gson.functional.PrettyPrintingTest.testMap":160,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":278,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":128,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":228,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":259,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":310,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":2,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":247,"com.google.gson.functional.MapTest.testMapSerializationEmpty":107,"com.google.gson.functional.CollectionTest.testQueueSerialization":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":321,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":301,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":10,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":12,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":63,"com.google.gson.functional.PrimitiveTest.testByteSerialization":199,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":251,"com.google.gson.functional.MapTest.testMapOfMapSerialization":96,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":214,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":185,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":135,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":28,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":141,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":51,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":190,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":364,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":244,"com.google.gson.functional.FieldNamingTest.testIdentity":287,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":69,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":284,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":153,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":74,"com.google.gson.functional.MapTest.testMapWithQuotes":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":311,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":57,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":87,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":142,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":216,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":355,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":365,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":7,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":126,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":309,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":351,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":188,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":347,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":14,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":30,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":343,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":145,"com.google.gson.functional.MapTest.testMapSubclassSerialization":90,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":204,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":166,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":37,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":317,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":72,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":280,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":288,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":368,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":336,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":148,"com.google.gson.functional.EnumTest.testEnumSubclass":42,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":312,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":4,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":175,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":350,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":143,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":319,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":254,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":357,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":60,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":337,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":131,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":76,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":38,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":53,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":116,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":363,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":13,"com.google.gson.functional.ObjectTest.testNestedSerialization":229,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":114,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":136,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":180,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":173,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":186,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":104,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":338,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":157,"com.google.gson.MixedStreamTest.testWriteNulls":369,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":68,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":9,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":372,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":64,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":224,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":273,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":218,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":361,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":122,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":170,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":1,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":99,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":246,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":345,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":248,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":155,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":340,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":67,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":211,"com.google.gson.functional.CollectionTest.testSetSerialization":268,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":163,"com.google.gson.functional.StringTest.testStringValueSerialization":249,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":360,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":213,"com.google.gson.JsonParserTest.testParseMixedArray":16,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":48,"com.google.gson.MixedStreamTest.testWriteInvalidState":370,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":178,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":221,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":167,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":21,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":182,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":49,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":71,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":327,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":315,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":323,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":165,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":271,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":89,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":29,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":93,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":123,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":297,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":294,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":86,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":20,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":78,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":154,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":225,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":332,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":129,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":215,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":281,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":117,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":314,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":65},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373],"tindex":"eef7fb0f-3f19-11e6-8246-41028ced3604","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"eef89750-3f19-11e6-8246-d7dd2367f8a1","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"eef8be61-3f19-11e6-8246-c16920898f9d","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"eef8be62-3f19-11e6-8246-0776649750e7","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.Class<?>) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[374,375,91,111,159,160,161,162,163,164,165,166,368],"tindex":"eef8e573-3f19-11e6-8246-e1b59b42511f","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[146,351],"tindex":"eef90c84-3f19-11e6-8246-75b2679e2603","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:614","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"eef90c85-3f19-11e6-8246-57549dc928e1","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c == 't') || (c == 'T')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"eef93396-3f19-11e6-8246-23e6c53769ee","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"eef93397-3f19-11e6-8246-f39fee7a51fc","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"eef95aa8-3f19-11e6-8246-b3a32189c2c8","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"eef95aa9-3f19-11e6-8246-ab08ce8eccb2","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[],"tindex":"eef981ba-3f19-11e6-8246-df198e078665","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"eef9a8cb-3f19-11e6-8246-eb27076740de","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"eef9a8cc-3f19-11e6-8246-c9a660134763","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"eef9f6ed-3f19-11e6-8246-ef334b5db636","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"eefa1dfe-3f19-11e6-8246-835df70d5a87","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl"},"failures":[],"tindex":"eefa1dff-3f19-11e6-8246-dd99a02dcf46","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"eefa6c20-3f19-11e6-8246-9913d37e2c4f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"eefaba41-3f19-11e6-8246-678b2d2ccd40","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"eefae152-3f19-11e6-8246-054c117069aa","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[],"tindex":"eefae153-3f19-11e6-8246-778489630784","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"eefae154-3f19-11e6-8246-69dc8a47f4a9","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from.getRawType().equals(from.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"eefb0865-3f19-11e6-8246-95eb84c64817","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"eefb0866-3f19-11e6-8246-d9832bd8f040","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"eefb0867-3f19-11e6-8246-a9caf0b9d253","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"eefb2f78-3f19-11e6-8246-8d5290f98b3b","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596637/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":26,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter":66,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":112,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":283,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":14,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":156,"org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException":212,"org.apache.commons.codec.language.Caverphone1Test.testEncodeEmpty":104,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":185,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":183,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":184,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":186,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":168,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":282,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull":160,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":278,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":265,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":242,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":229,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":27,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":246,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty":208,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":284,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":71,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":151,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":245,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":196,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":198,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":197,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":272,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":271,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":44,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":45,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":49,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":117,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":270,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":46,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":157,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":47,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":115,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":130,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent":204,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":25,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":225,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":274,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":139,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":91,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":210,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":63,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":277,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail":97,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeWithNullArray":286,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":37,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":132,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":22,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":61,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithEmptySalt":175,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":241,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeNull":125,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":216,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull":162,"org.apache.commons.codec.language.SoundexTest.testB650":182,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":36,"org.apache.commons.codec.language.SoundexTest.testNewInstance":190,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":264,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":110,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":78,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":135,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":94,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":253,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput":158,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":15,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":116,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":209,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Length":221,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":228,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":73,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":24,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":13,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":54,"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad":16,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":108,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":102,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":275,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":6,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":140,"org.apache.commons.codec.binary.Base64Test.testUUID":40,"org.apache.commons.codec.binary.Base64Test.testSingletons":62,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":29,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":68,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":261,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":92,"org.apache.commons.codec.binary.Base64Test.testPairs":39,"org.apache.commons.codec.binary.Base64Test.testConstructors":42,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":28,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":152,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":136,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":144,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":84,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":143,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":191,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":236,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":155,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":290,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":96,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":5,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":119,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":273,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":214,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":57,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull":269,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":3,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":9,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":58,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":134,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":129,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8":231,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":248,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":280,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":232,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":17,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":192,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":178,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":87,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedNullInput":237,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":10,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullKey":98,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":224,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":169,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter":50,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":81,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":43,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":12,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":127,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":217,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105":250,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":88,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString":233,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail":99,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":266,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":213,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":239,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":247,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":21,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":20,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":254,"org.apache.commons.codec.language.NysiisTest.testEncodeEmpty":159,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty":260,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length":218,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":149,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":172,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":171,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":285,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":32,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":109,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":89,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":83,"org.apache.commons.codec.binary.Base64Test.testTriplets":34,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":7,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":252,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":291,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":292,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument":121,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":207,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":59,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":79,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":114,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":100,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":51,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":82,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":76,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex":201,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":145,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":113,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":219,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":38,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":173,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":142,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":238,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":164,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":195,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":193,"org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence":163,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":194,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":211,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":215,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull":202,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":226,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":243,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":141,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":222,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":255,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":256,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":276,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":55,"org.apache.commons.codec.language.Caverphone2Test.testLocaleIndependence":148,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":85,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":120,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":154,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":18,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":111,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":60,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":70,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":251,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":187,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":206,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":19,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":177,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":123,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":77,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":137,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":268,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":138,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":11,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":153,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":235,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":8,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":31,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":205,"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence":200,"org.apache.commons.codec.digest.HmacUtilsTest.testNullKey":103,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":279,"org.apache.commons.codec.language.MetaphoneTest.testTCH":128,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithHalfSalt":176,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":220,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":240,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":67,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":179,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":180,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":181,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":93,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":72,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":167,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":281,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":131,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":48,"org.apache.commons.codec.binary.Base64Test.testBase64":69,"org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull":118,"org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt":174,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":170,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":107,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":230,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":23,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":52,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":33,"org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence":161,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":146,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":288,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":223,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":287,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":227,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":257,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":74,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":249,"org.apache.commons.codec.binary.Base64Test.testCodec112":56,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":86,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":165,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":90,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":2,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":133,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":35,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty":267,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":26,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":95,"org.apache.commons.codec.binary.Base64Test.testCodec68":64,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":188,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":126,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":199,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":234,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":80,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be":124,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":263,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":75,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail":101,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":0,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":259,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":244,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":289,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":30,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":147,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":122,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":65,"org.apache.commons.codec.language.SoundexTest.testDifference":189,"org.apache.commons.codec.language.Caverphone2Test.testEncodeEmpty":105,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":203,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":262,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":4,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":258,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":1,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":166,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":106,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":53,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":150,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":41},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:264","type":"CtBinaryOperatorImpl","sourcecode":"n > 0"},"failures":[],"tindex":"e9d471fe-2e89-11e6-86d0-8577506713b9","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:392","type":"CtMethodImpl","sourcecode":"private static int hPermOp(int a, final int n, final int m) {\n    if (n > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = ((a << (16 - n)) ^ a) & m;\n            a = (a ^ t) ^ (t >>> (16 - n));\n            return a;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtBinaryOperatorImpl","sourcecode":"arrayOctet == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],"tindex":"e9d5354f-2e89-11e6-86d0-213d053fdfa4","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:495","type":"CtMethodImpl","sourcecode":"protected boolean containsAlphabetOrPad(final byte[] arrayOctet) {\n    if (arrayOctet == null) {\n        {\n            if (arrayOctet == null) {\n                return false;\n            } \n            for (final byte byte : arrayOctet) {\n                if (((byte) == element) || (isInAlphabet(element))) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayOctet":"arrayOctet"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[97,98,99,100,101,102,103],"tindex":"e9d55c60-2e89-11e6-86d0-91e9d07b7d30","method":{"position":"org.apache.commons.codec.digest.HmacUtils:154","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getInitializedMac(final org.apache.commons.codec.digest.HmacAlgorithms algorithm, final byte[] key) {\n    if (key == null) {\n        {\n            if (key == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[104,105],"tindex":"e9d55c61-2e89-11e6-86d0-490e33853821","method":{"position":"org.apache.commons.codec.language.AbstractCaverphone:56","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object source) throws org.apache.commons.codec.EncoderException {\n    if (source == null) {\n        {\n            if (!(source instanceof java.lang.String)) {\n                {\n                    if (source == null) {\n                        {\n                            if (!(source instanceof java.lang.String)) {\n                                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n                            } \n                            return org.apache.commons.codec.language.AbstractCaverphone.this.encode(((java.lang.String)(source)));\n                        }\n                    } else {\n                        throw new org.apache.commons.codec.EncoderException();\n                    }\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:85","type":"CtUnaryOperatorImpl","sourcecode":"!(source instanceof java.lang.String)"},"failures":[],"tindex":"e9d58372-2e89-11e6-86d0-655f84d3315b","method":{"position":"org.apache.commons.codec.language.AbstractCaverphone:56","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object source) throws org.apache.commons.codec.EncoderException {\n    if (source == null) {\n        {\n            if (!(source instanceof java.lang.String)) {\n                {\n                    if (source == null) {\n                        {\n                            if (!(source instanceof java.lang.String)) {\n                                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n                            } \n                            return org.apache.commons.codec.language.AbstractCaverphone.this.encode(((java.lang.String)(source)));\n                        }\n                    } else {\n                        throw new org.apache.commons.codec.EncoderException();\n                    }\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:270","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[106,107,108,109,110,111,112],"tindex":"e9d5aa83-2e89-11e6-86d0-0febe2fc8f0a","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:568","type":"CtMethodImpl","sourcecode":"private int handleP(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (index == 0) {\n        {\n            if ((charAt(value, (index + 1))) == 'H') {\n                result.append('F');\n                index += 2;\n            } else {\n                result.append('P');\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"P\", \"B\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[35,72],"tindex":"e9d5d194-2e89-11e6-86d0-6f773b650060","method":{"position":"org.apache.commons.codec.binary.StringUtils:382","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf8(final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.StringUtils.newString(bytes, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[113,114],"tindex":"e9d5d195-2e89-11e6-86d0-f35a458b5a1c","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:238","type":"CtMethodImpl","sourcecode":"public static byte[] toAsciiBytes(final byte[] raw) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n                        return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n                    } \n                    final byte[] byte[] = new byte[(raw.int) << 3];\n                    for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n                        for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                            if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n                                l_ascii[(jj - bits)] = '0';\n                            } else {\n                                l_ascii[(jj - bits)] = '1';\n                            }\n                        }\n                    }\n                    return l_ascii;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl","sourcecode":"((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))"},"failures":[],"tindex":"e9d61fb6-2e89-11e6-86d0-4fcca2614b9d","method":{"position":"org.apache.commons.codec.language.bm.Rule:198","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        {\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[115,116,117,118,119,120],"tindex":"e9d646c7-2e89-11e6-86d0-c7d6ddca1803","method":{"position":"org.apache.commons.codec.net.URLCodec:243","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if ((str.length()) == 0) {\n        {\n            if (str == null) {\n                return null;\n            } \n            try {\n                return encode(str, getDefaultCharset());\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[106,107,109,110,111,112],"tindex":"e9d694e8-2e89-11e6-86d0-83ad7ff47acc","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:978","type":"CtMethodImpl","sourcecode":"public void appendPrimary(final java.lang.String value) {\n    if (value == null) {\n        {\n            final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length());\n            if ((value.length()) <= addChars) {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n            } else {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:192","type":"CtBinaryOperatorImpl","sourcecode":"n < 0"},"failures":[121,90],"tindex":"e9d6bbf9-2e89-11e6-86d0-4f8303a1ed49","method":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:191","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(final long n) throws java.io.IOException {\n    if (n < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (n < 0) {\n                throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n));\n            } \n            final byte[] byte[] = new byte[512];\n            long long = n;\n            while (todo > 0) {\n                int int = ((int)(java.lang.Math.min(b.int, todo)));\n                len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len);\n                if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n                    break;\n                } \n                todo -= len;\n            }\n            return n - todo;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[122],"tindex":"e9d6e30a-2e89-11e6-86d0-f5db7347bb7a","method":{"position":"org.apache.commons.codec.digest.HmacUtils:708","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha512Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.codec.net.QCodec:247","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"e9d6e30b-2e89-11e6-86d0-195ee5f2b7e7","method":{"position":"org.apache.commons.codec.net.URLCodec:269","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if (charset == null) {\n        throw new java.io.UnsupportedEncodingException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"charset"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.Soundex:150","type":"CtUnaryOperatorImpl","sourcecode":"!(obj instanceof java.lang.String)"},"failures":[119],"tindex":"e9d70a1c-2e89-11e6-86d0-8701c932407f","method":{"position":"org.apache.commons.codec.net.URLCodec:309","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof byte[]) {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                {\n                    if (obj == null) {\n                        return null;\n                    } else if (obj instanceof byte[]) {\n                        return encode(((byte[])(obj)));\n                    } else if (obj instanceof java.lang.String) {\n                        return encode(((java.lang.String)(obj)));\n                    } else {\n                        throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n                    }\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:450","type":"CtFieldReadImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.this.concat"},"failures":[123],"tindex":"e9d7312d-2e89-11e6-86d0-cd6450e11ce0","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:133","type":"CtMethodImpl","sourcecode":"public void setConcat(final boolean concat) {\n    if (concat) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (concat) {\n                {\n                    org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , concat , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"concat":"concat"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"e9d7312e-2e89-11e6-86d0-29a8e8314e14","method":{"position":"org.apache.commons.codec.language.bm.Rule:612","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                str = str.substring(1);\n            } \n            if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                str = str.substring(0, ((str.length()) - 1));\n            } \n            return str;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:225","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"e9d7583f-2e89-11e6-86d0-ddc5e86019ac","method":{"position":"org.apache.commons.codec.language.bm.Rule:124","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Rule.Phoneme append(final java.lang.CharSequence str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.append(str);\n                    return org.apache.commons.codec.language.bm.Rule.Phoneme.this;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:304","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CI\", \"CE\", \"CY\")"},"failures":[106,107,110,111],"tindex":"e9d75840-2e89-11e6-86d0-37224bf3b8be","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:800","type":"CtMethodImpl","sourcecode":"private boolean conditionCH0(final java.lang.String value, final int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n        {\n            if (index != 0) {\n                return false;\n            } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n                return false;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[2],"tindex":"e9d7a661-2e89-11e6-86d0-f57d6f5df35e","method":{"position":"org.apache.commons.codec.net.BCodec:221","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object value) throws org.apache.commons.codec.DecoderException {\n    if (value instanceof java.lang.String) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return null;\n                    } else if (value instanceof java.lang.String) {\n                        return decode(((java.lang.String)(value)));\n                    } else {\n                        throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"));\n                    }\n                }\n            } else {\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[124],"tindex":"e9d7cd72-2e89-11e6-86d0-31c34162fbb9","method":{"position":"org.apache.commons.codec.binary.StringUtils:350","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf16Be(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:622","type":"CtBinaryOperatorImpl","sourcecode":"((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\"))"},"failures":[],"tindex":"e9d7cd73-2e89-11e6-86d0-81dc373cd7c6","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:816","type":"CtMethodImpl","sourcecode":"private boolean conditionCH1(final java.lang.String value, final int index) {\n    if (((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"T\", \"S\"))) || (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"A\", \"O\", \"U\", \"E\")) || (index == 0)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])) || ((index + 1) == ((value.length()) - 1))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[125],"tindex":"e9d7cd74-2e89-11e6-86d0-953884dbecb0","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:273","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeQuotedPrintable(java.util.BitSet printable, final byte[] bytes, boolean strict) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (bytes == null) {\n                        return null;\n                    } \n                    if (printable == null) {\n                        printable = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet;\n                    } \n                    final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n                    if (strict) {\n                        int int = 1;\n                        for (int int = 0 ; i < ((bytes.int) - 3) ; i++) {\n                            int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n                            if (pos < (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int)) {\n                                pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer);\n                            } else {\n                                org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer);\n                                buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                                buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                                buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                                pos = 1;\n                            }\n                        }\n                        int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(((bytes.int) - 3), bytes);\n                        boolean boolean = (!(printable.get(b))) || ((org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)) && (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int) - 5)));\n                        pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n                        if (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int) - 2)) {\n                            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                        } \n                        for (int int = (bytes.int) - 2 ; i < (bytes.int) ; i++) {\n                            b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n                            encode = (!(printable.get(b))) || ((i > ((bytes.int) - 2)) && (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)));\n                            org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n                        }\n                    } else {\n                        for (final byte byte : bytes) {\n                            int int = c;\n                            if (b < 0) {\n                                b = 256 + b;\n                            } \n                            if (printable.get(b)) {\n                                buffer.write(b);\n                            } else {\n                                org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n                            }\n                        }\n                    }\n                    return buffer.toByteArray();\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:740","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[126,127,128,129,130,131,132,133,134,135,136,137,138],"tindex":"e9d81b95-2e89-11e6-86d0-019fd9437856","method":{"position":"org.apache.commons.codec.language.Metaphone:351","type":"CtMethodImpl","sourcecode":"private boolean isNextChar(final java.lang.StringBuilder string, final int index, final char c) {\n    if (index == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index <= 1) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (index == 0) {\n                        {\n                            boolean boolean = false;\n                            if ((index >= 0) && (index < ((string.length()) - 1))) {\n                                matches = (string.charAt((index + 1))) == c;\n                            } \n                            return matches;\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:220","type":"CtInvocationImpl","sourcecode":"name1.equalsIgnoreCase(name2)"},"failures":[],"tindex":"e9d81b96-2e89-11e6-86d0-eb607b05bbd0","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:294","type":"CtMethodImpl","sourcecode":"int leftToRightThenRightToLeftProcessing(final java.lang.String name1, final java.lang.String name2) {\n    if (name2.equalsIgnoreCase(name2)) {\n        {\n            final char[] char[] = name1.toCharArray();\n            final char[] char[] = name2.toCharArray();\n            final int int = (name1.length()) - 1;\n            final int int = (name2.length()) - 1;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            for (int int = 0 ; i < (name1Char.int) ; i++) {\n                if (i > name2Size) {\n                    break;\n                } \n                name1LtRStart = name1.substring(i, (i + 1));\n                name1LtREnd = name1.substring((name1Size - i), ((name1Size - i) + 1));\n                name2RtLStart = name2.substring(i, (i + 1));\n                name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1));\n                if (name1LtRStart.equals(name2RtLStart)) {\n                    name1Char[i] = ' ';\n                    name2Char[i] = ' ';\n                } \n                if (name1LtREnd.equals(name2RtLEnd)) {\n                    name1Char[(name1Size - i)] = ' ';\n                    name2Char[(name2Size - i)] = ' ';\n                } \n            }\n            final java.lang.String java.lang.String = new java.lang.String(name1Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            final java.lang.String java.lang.String = new java.lang.String(name2Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            if ((strA.length()) > (strB.length())) {\n                return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strA.length())));\n            } else {\n                return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strB.length())));\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"name2","name1":"name2"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"e9d842a7-2e89-11e6-86d0-997a81d1ac54","method":{"position":"org.apache.commons.codec.binary.StringUtils:382","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf8(final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.StringUtils.newString(bytes, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:652","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")"},"failures":[106,107,110,111,112],"tindex":"e9d842a8-2e89-11e6-86d0-839f97f20401","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:498","type":"CtMethodImpl","sourcecode":"private int handleH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n        {\n            if (((index == 0) || (isVowel(charAt(value, (index - 1))))) && (isVowel(charAt(value, (index + 1))))) {\n                result.append('H');\n                index += 2;\n            } else {\n                index++;\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[139,140,141,142,143,144,145,146,147,105,148],"tindex":"e9d842a9-2e89-11e6-86d0-1b31505fa8ce","method":{"position":"org.apache.commons.codec.language.Caverphone2:45","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if (source == null) {\n        {\n            java.lang.String java.lang.String = source;\n            if ((txt == null) || ((txt.length()) == 0)) {\n                return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n            } \n            txt = txt.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            txt = txt.replaceAll(\"[^a-z]\", \"\");\n            txt = txt.replaceAll(\"e$\", \"\");\n            txt = txt.replaceAll(\"^cough\", \"cou2f\");\n            txt = txt.replaceAll(\"^rough\", \"rou2f\");\n            txt = txt.replaceAll(\"^tough\", \"tou2f\");\n            txt = txt.replaceAll(\"^enough\", \"enou2f\");\n            txt = txt.replaceAll(\"^trough\", \"trou2f\");\n            txt = txt.replaceAll(\"^gn\", \"2n\");\n            txt = txt.replaceAll(\"mb$\", \"m2\");\n            txt = txt.replaceAll(\"cq\", \"2q\");\n            txt = txt.replaceAll(\"ci\", \"si\");\n            txt = txt.replaceAll(\"ce\", \"se\");\n            txt = txt.replaceAll(\"cy\", \"sy\");\n            txt = txt.replaceAll(\"tch\", \"2ch\");\n            txt = txt.replaceAll(\"c\", \"k\");\n            txt = txt.replaceAll(\"q\", \"k\");\n            txt = txt.replaceAll(\"x\", \"k\");\n            txt = txt.replaceAll(\"v\", \"f\");\n            txt = txt.replaceAll(\"dg\", \"2g\");\n            txt = txt.replaceAll(\"tio\", \"sio\");\n            txt = txt.replaceAll(\"tia\", \"sia\");\n            txt = txt.replaceAll(\"d\", \"t\");\n            txt = txt.replaceAll(\"ph\", \"fh\");\n            txt = txt.replaceAll(\"b\", \"p\");\n            txt = txt.replaceAll(\"sh\", \"s2\");\n            txt = txt.replaceAll(\"z\", \"s\");\n            txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n            txt = txt.replaceAll(\"[aeiou]\", \"3\");\n            txt = txt.replaceAll(\"j\", \"y\");\n            txt = txt.replaceAll(\"^y3\", \"Y3\");\n            txt = txt.replaceAll(\"^y\", \"A\");\n            txt = txt.replaceAll(\"y\", \"3\");\n            txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n            txt = txt.replaceAll(\"gh\", \"22\");\n            txt = txt.replaceAll(\"g\", \"k\");\n            txt = txt.replaceAll(\"s+\", \"S\");\n            txt = txt.replaceAll(\"t+\", \"T\");\n            txt = txt.replaceAll(\"p+\", \"P\");\n            txt = txt.replaceAll(\"k+\", \"K\");\n            txt = txt.replaceAll(\"f+\", \"F\");\n            txt = txt.replaceAll(\"m+\", \"M\");\n            txt = txt.replaceAll(\"n+\", \"N\");\n            txt = txt.replaceAll(\"w3\", \"W3\");\n            txt = txt.replaceAll(\"wh3\", \"Wh3\");\n            txt = txt.replaceAll(\"w$\", \"3\");\n            txt = txt.replaceAll(\"w\", \"2\");\n            txt = txt.replaceAll(\"^h\", \"A\");\n            txt = txt.replaceAll(\"h\", \"2\");\n            txt = txt.replaceAll(\"r3\", \"R3\");\n            txt = txt.replaceAll(\"r$\", \"3\");\n            txt = txt.replaceAll(\"r\", \"2\");\n            txt = txt.replaceAll(\"l3\", \"L3\");\n            txt = txt.replaceAll(\"l$\", \"3\");\n            txt = txt.replaceAll(\"l\", \"2\");\n            txt = txt.replaceAll(\"2\", \"\");\n            txt = txt.replaceAll(\"3$\", \"A\");\n            txt = txt.replaceAll(\"3\", \"\");\n            txt = txt + (org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String);\n            return txt.substring(0, org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String.length());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[149],"tindex":"e9d890ca-2e89-11e6-86d0-2d9d0c1d6f3b","method":{"position":"org.apache.commons.codec.digest.HmacUtils:474","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha256Hex(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"valueToDigest"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:504","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[],"tindex":"e9d890cb-2e89-11e6-86d0-5bc861562d59","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:237","type":"CtMethodImpl","sourcecode":"private static boolean isWhitespace(final int b) {\n    if (b < 0) {\n        {\n            if (b < 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) || (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte));\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[150],"tindex":"e9d890cc-2e89-11e6-86d0-5fb908b55703","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if (source == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (source == null) {\n                return null;\n            } \n            return soundex(source, false)[0];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:470","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[151,152,153,154,155],"tindex":"e9d8b7dd-2e89-11e6-86d0-81a168a48b08","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:201","type":"CtMethodImpl","sourcecode":"private static int getUnsignedOctet(final int index, final byte[] bytes) {\n    if (index == 0) {\n        {\n            int int = bytes[index];\n            if (b < 0) {\n                b = 256 + b;\n            } \n            return b;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:312","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof byte[]"},"failures":[156],"tindex":"e9d8b7de-2e89-11e6-86d0-79a03a9437c9","method":{"position":"org.apache.commons.codec.net.QCodec:309","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj instanceof byte[]) {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof java.lang.String) {\n                return decode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be decoded using Q codec\"));\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:66","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[157],"tindex":"e9d8b7df-2e89-11e6-86d0-259bdca0b646","method":{"position":"org.apache.commons.codec.digest.Crypt:148","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final java.lang.String key, final java.lang.String salt) {\n    if (salt == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.Crypt.crypt(key.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[158],"tindex":"e9d8def0-2e89-11e6-86d0-81dc1d37c16e","method":{"position":"org.apache.commons.codec.binary.StringUtils:279","type":"CtMethodImpl","sourcecode":"public static java.lang.String newString(final byte[] bytes, final java.lang.String charsetName) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            try {\n                return new java.lang.String(bytes , charsetName);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:784","type":"CtBinaryOperatorImpl","sourcecode":"index <= 1"},"failures":[],"tindex":"e9d8def1-2e89-11e6-86d0-4ff1cd86c936","method":{"position":"org.apache.commons.codec.language.Metaphone:351","type":"CtMethodImpl","sourcecode":"private boolean isNextChar(final java.lang.StringBuilder string, final int index, final char c) {\n    if (index == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index <= 1) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (index == 0) {\n                        {\n                            boolean boolean = false;\n                            if ((index >= 0) && (index < ((string.length()) - 1))) {\n                                matches = (string.charAt((index + 1))) == c;\n                            } \n                            return matches;\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.Metaphone:389","type":"CtUnaryOperatorImpl","sourcecode":"!(obj instanceof java.lang.String)"},"failures":[159],"tindex":"e9d90602-2e89-11e6-86d0-4fc11a9aa0e6","method":{"position":"org.apache.commons.codec.language.Nysiis:210","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (!(obj instanceof java.lang.String)) {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\");\n            } \n            return org.apache.commons.codec.language.Nysiis.this.nysiis(((java.lang.String)(obj)));\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")"},"failures":[160,161,112,162,163],"tindex":"e9d90603-2e89-11e6-86d0-01ccc772a75b","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:216","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String value) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        {\n            return doubleMetaphone(value);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtBinaryOperatorImpl","sourcecode":"input == null"},"failures":[164,165,166,167,168,169,170,171,172,173],"tindex":"e9d92d14-2e89-11e6-86d0-9f1b357941a8","method":{"position":"org.apache.commons.codec.language.bm.Rule:539","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        {\n            return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"e9d92d15-2e89-11e6-86d0-4907b1de538d","method":{"position":"org.apache.commons.codec.language.bm.Rule:124","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Rule.Phoneme append(final java.lang.CharSequence str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.append(str);\n                    return org.apache.commons.codec.language.bm.Rule.Phoneme.this;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:224","type":"CtBinaryOperatorImpl","sourcecode":"value instanceof java.lang.String"},"failures":[],"tindex":"e9d92d16-2e89-11e6-86d0-a7e75d7696b0","method":{"position":"org.apache.commons.codec.net.BCodec:221","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object value) throws org.apache.commons.codec.DecoderException {\n    if (value instanceof java.lang.String) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return null;\n                    } else if (value instanceof java.lang.String) {\n                        return decode(((java.lang.String)(value)));\n                    } else {\n                        throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"));\n                    }\n                }\n            } else {\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"e9d95427-2e89-11e6-86d0-cf1fae0cad32","method":{"position":"org.apache.commons.codec.digest.HmacUtils:154","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getInitializedMac(final org.apache.commons.codec.digest.HmacAlgorithms algorithm, final byte[] key) {\n    if (key == null) {\n        {\n            if (key == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:540","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[174,175,176],"tindex":"e9d95428-2e89-11e6-86d0-d3320fa1e2e0","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:277","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final java.lang.String original, final java.lang.String salt) {\n    if (salt == null) {\n        {\n            return org.apache.commons.codec.digest.UnixCrypt.crypt(original.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"e9d97b39-2e89-11e6-86d0-05f960987e54","method":{"position":"org.apache.commons.codec.language.AbstractCaverphone:56","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object source) throws org.apache.commons.codec.EncoderException {\n    if (source == null) {\n        {\n            if (!(source instanceof java.lang.String)) {\n                {\n                    if (source == null) {\n                        {\n                            if (!(source instanceof java.lang.String)) {\n                                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n                            } \n                            return org.apache.commons.codec.language.AbstractCaverphone.this.encode(((java.lang.String)(source)));\n                        }\n                    } else {\n                        throw new org.apache.commons.codec.EncoderException();\n                    }\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:470","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[],"tindex":"e9d97b3a-2e89-11e6-86d0-2dacb7e534fc","method":{"position":"org.apache.commons.codec.language.Metaphone:351","type":"CtMethodImpl","sourcecode":"private boolean isNextChar(final java.lang.StringBuilder string, final int index, final char c) {\n    if (index == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index <= 1) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (index == 0) {\n                        {\n                            boolean boolean = false;\n                            if ((index >= 0) && (index < ((string.length()) - 1))) {\n                                matches = (string.charAt((index + 1))) == c;\n                            } \n                            return matches;\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:622","type":"CtBinaryOperatorImpl","sourcecode":"((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\"))"},"failures":[110,111],"tindex":"e9d9a24b-2e89-11e6-86d0-959f595eb3fb","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:827","type":"CtMethodImpl","sourcecode":"private boolean conditionL0(final java.lang.String value, final int index) {\n    if (((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n                return true;\n            } else if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:244","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201],"tindex":"e9d9c95c-2e89-11e6-86d0-f569059435c0","method":{"position":"org.apache.commons.codec.language.Soundex:258","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n                    if ((str.length()) == 0) {\n                        return str;\n                    } \n                    final char[] char[] = new char[]{ '0' , '0' , '0' , '0' };\n                    char char;\n                    char char;\n                    int int = 1;\n                    int int = 1;\n                    out[0] = str.charAt(0);\n                    last = getMappingCode(str, 0);\n                    while ((incount < (str.length())) && (count < (out.int))) {\n                        mapped = getMappingCode(str, (incount++));\n                        if (mapped != 0) {\n                            if ((mapped != '0') && (mapped != last)) {\n                                out[(count++)] = mapped;\n                            } \n                            last = mapped;\n                        } \n                    }\n                    return new java.lang.String(out);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:652","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")"},"failures":[106,107,109,110,111],"tindex":"e9d9c95d-2e89-11e6-86d0-91b84acc3317","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:676","type":"CtMethodImpl","sourcecode":"private int handleT(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"TION\")) {\n                result.append('X');\n                index += 3;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TIA\", \"TCH\")) {\n                result.append('X');\n                index += 3;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"TH\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TTH\"))) {\n                if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n                    result.append('T');\n                } else {\n                    result.append('0', 'T');\n                }\n                index += 2;\n            } else {\n                result.append('T');\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"T\", \"D\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:247","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[202],"tindex":"e9d9f06e-2e89-11e6-86d0-a1595ee47f39","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:486","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String str) throws org.apache.commons.codec.DecoderException {\n    if (str == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(str, org.apache.commons.codec.net.QuotedPrintableCodec.this.getCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"e9d9f06f-2e89-11e6-86d0-7b5ec0511f63","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:273","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeQuotedPrintable(java.util.BitSet printable, final byte[] bytes, boolean strict) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (bytes == null) {\n                        return null;\n                    } \n                    if (printable == null) {\n                        printable = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet;\n                    } \n                    final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n                    if (strict) {\n                        int int = 1;\n                        for (int int = 0 ; i < ((bytes.int) - 3) ; i++) {\n                            int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n                            if (pos < (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int)) {\n                                pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer);\n                            } else {\n                                org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer);\n                                buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                                buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                                buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                                pos = 1;\n                            }\n                        }\n                        int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(((bytes.int) - 3), bytes);\n                        boolean boolean = (!(printable.get(b))) || ((org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)) && (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int) - 5)));\n                        pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n                        if (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int) - 2)) {\n                            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                        } \n                        for (int int = (bytes.int) - 2 ; i < (bytes.int) ; i++) {\n                            b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n                            encode = (!(printable.get(b))) || ((i > ((bytes.int) - 2)) && (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)));\n                            org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n                        }\n                    } else {\n                        for (final byte byte : bytes) {\n                            int int = c;\n                            if (b < 0) {\n                                b = 256 + b;\n                            } \n                            if (printable.get(b)) {\n                                buffer.write(b);\n                            } else {\n                                org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n                            }\n                        }\n                    }\n                    return buffer.toByteArray();\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"e9da1680-2e89-11e6-86d0-2f9705c502a8","method":{"position":"org.apache.commons.codec.digest.HmacUtils:280","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacMd5Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:450","type":"CtFieldReadImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.this.concat"},"failures":[],"tindex":"e9da3d91-2e89-11e6-86d0-6990e608f289","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:133","type":"CtMethodImpl","sourcecode":"public void setConcat(final boolean concat) {\n    if (concat) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (concat) {\n                {\n                    org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , concat , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"concat":"concat"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"e9da3d92-2e89-11e6-86d0-1dbb3392eed0","method":{"position":"org.apache.commons.codec.digest.HmacUtils:601","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha384Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[203,204,205,115,117,206,120],"tindex":"e9da64a3-2e89-11e6-86d0-a71193724923","method":{"position":"org.apache.commons.codec.net.URLCodec:209","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        {\n            return org.apache.commons.codec.net.URLCodec.decodeUrl(bytes);\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[],"tindex":"e9da64a4-2e89-11e6-86d0-cbd7a233f53c","method":{"position":"org.apache.commons.codec.binary.StringUtils:113","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesIso8859_1(final java.lang.String string) {\n    if (string == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"e9da8bb5-2e89-11e6-86d0-67a88831a81c","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:238","type":"CtMethodImpl","sourcecode":"public static byte[] toAsciiBytes(final byte[] raw) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n                        return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n                    } \n                    final byte[] byte[] = new byte[(raw.int) << 3];\n                    for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n                        for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                            if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n                                l_ascii[(jj - bits)] = '0';\n                            } else {\n                                l_ascii[(jj - bits)] = '1';\n                            }\n                        }\n                    }\n                    return l_ascii;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:334","type":"CtInvocationImpl","sourcecode":"finalRules.isEmpty()"},"failures":[166],"tindex":"e9da8bb6-2e89-11e6-86d0-c7580fe195ce","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:329","type":"CtMethodImpl","sourcecode":"private org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder applyFinalRules(final org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder phonemeBuilder, final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> finalRules) {\n    if (finalRules.isEmpty()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (finalRules == null) {\n                throw new java.lang.NullPointerException(\"finalRules can not be null\");\n            } \n            if (finalRules.isEmpty()) {\n                return phonemeBuilder;\n            } \n            final java.util.Map<org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme> java.util.Map<org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.TreeMap<org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme>(org.apache.commons.codec.language.bm.Rule.Phoneme.org.apache.commons.codec.language.bm.Rule.Phoneme.java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme>);\n            for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : phonemeBuilder.getPhonemes()) {\n                org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.empty(phoneme.getLanguages());\n                final java.lang.String java.lang.String = phoneme.getPhonemeText().toString();\n                for (int int = 0 ; i < (phonemeText.length()) ; ) {\n                    final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(finalRules , phonemeText , subBuilder , i , int).invoke();\n                    final boolean boolean = rulesApplication.isFound();\n                    subBuilder = rulesApplication.getPhonemeBuilder();\n                    if (!found) {\n                        subBuilder.append(phonemeText.subSequence(i, (i + 1)));\n                    } \n                    i = rulesApplication.getI();\n                }\n                for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : subBuilder.getPhonemes()) {\n                    if (phonemes.containsKey(newPhoneme)) {\n                        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = phonemes.remove(newPhoneme);\n                        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n                        phonemes.put(mergedPhoneme, mergedPhoneme);\n                    } else {\n                        phonemes.put(newPhoneme, newPhoneme);\n                    }\n                }\n            }\n            return new org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder(phonemes.keySet());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"finalRules":"finalRules"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"ascii instanceof char[]"},"failures":[207],"tindex":"e9dad9d7-2e89-11e6-86d0-01ada6fe561b","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:115","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object ascii) throws org.apache.commons.codec.DecoderException {\n    if (ascii instanceof char[]) {\n        {\n            if (ascii == null) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            if (ascii instanceof byte[]) {\n                return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)));\n            } \n            if (ascii instanceof char[]) {\n                return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)));\n            } \n            if (ascii instanceof java.lang.String) {\n                return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n            } \n            throw new org.apache.commons.codec.DecoderException(\"argument not a byte array\");\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"ascii"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl","sourcecode":"((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))"},"failures":[],"tindex":"e9dad9d8-2e89-11e6-86d0-8341da010ec7","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:383","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String input) {\n    if (input == null) {\n        {\n            if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.Lang.guessLanguages(input);\n                    return encode(input, languageSet);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:413","type":"CtUnaryOperatorImpl","sourcecode":"!(obj instanceof java.lang.String)"},"failures":[208],"tindex":"e9dad9d9-2e89-11e6-86d0-918b6c126599","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:133","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (!(obj instanceof java.lang.String)) {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n            } \n            return soundex(((java.lang.String)(obj)));\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[35,209],"tindex":"e9db00ea-2e89-11e6-86d0-c9d2d1fab1cf","method":{"position":"org.apache.commons.codec.binary.StringUtils:92","type":"CtMethodImpl","sourcecode":"private static byte[] getBytes(final java.lang.String string, final java.nio.charset.Charset charset) {\n    if (string == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (string == null) {\n                {\n                    if (string == null) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (string == null) {\n                                return null;\n                            } \n                            return string.getBytes(charset);\n                        }\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[0,1,2],"tindex":"e9db00eb-2e89-11e6-86d0-cf70210ad44b","method":{"position":"org.apache.commons.codec.net.BCodec:100","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doDecoding(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.Base64.decodeBase64(bytes);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[210,211,212,149,213,214,215,216,217,122,218,219,220,221,222,223,224,225,226,227,228,229,230,6,7,231,8,9,11,12,13,232,15,233,17,19,23,234,235,236,35,40,65,68,69,72,74,75,76,209,77,78,81,82,83,84,85,86,87,88,89,96],"tindex":"e9db00ec-2e89-11e6-86d0-0b4683e88cd5","method":{"position":"org.apache.commons.codec.binary.StringUtils:234","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf8(final java.lang.String string) {\n    if (string == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:762","type":"CtBinaryOperatorImpl","sourcecode":"((bigInt.bitLength()) % 8) == 0"},"failures":[46,47],"tindex":"e9db27fd-2e89-11e6-86d0-61a819bff3bc","method":{"position":"org.apache.commons.codec.binary.Base64:734","type":"CtMethodImpl","sourcecode":"public static byte[] encodeInteger(final java.math.BigInteger bigInt) {\n    if (((bigInt.bitLength()) % 8) == 0) {\n        {\n            if (bigInt == null) {\n                throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\");\n            } \n            return org.apache.commons.codec.binary.Base64.encodeBase64(org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInt), false);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bigInt":"bigInt"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[237],"tindex":"e9db27fe-2e89-11e6-86d0-89f157c73be8","method":{"position":"org.apache.commons.codec.binary.StringUtils:137","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUnchecked(final java.lang.String string, final java.lang.String charsetName) {\n    if (string == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (string == null) {\n                return null;\n            } \n            try {\n                return string.getBytes(charsetName);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:132","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[],"tindex":"e9db4f0f-2e89-11e6-86d0-cf323fded744","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:237","type":"CtMethodImpl","sourcecode":"private static boolean isWhitespace(final int b) {\n    if (b < 0) {\n        {\n            if (b < 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) || (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte));\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:406","type":"CtUnaryOperatorImpl","sourcecode":"!(object instanceof java.lang.String)"},"failures":[],"tindex":"e9db4f10-2e89-11e6-86d0-e3cebcead469","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:405","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object object) throws org.apache.commons.codec.EncoderException {\n    if (!(object instanceof java.lang.String)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(object instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(((((\"This method's parameter was expected to be of the type \" + (java.lang.String.java.lang.String.java.lang.Class.getName())) + \". But actually it was of the type \") + (object.getClass().getName())) + \".\"));\n            } \n            return encode(((java.lang.String)(object)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:382","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[0,1,2,3,6,7,8,238,239,10,240,232,241,14,242,243,15,17,19,23,24,25,26,27,28,29,30,31,244,245,246,247,248,32,249,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,62,63,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,85,88,250,89,91,92,93,94,95,96],"tindex":"e9db4f11-2e89-11e6-86d0-47c97db8d40a","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:291","type":"CtMethodImpl","sourcecode":"int readResults(final byte[] b, final int bPos, final int bAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (bAvail < 0) {\n        {\n            if ((context.byte[]) != null) {\n                final int int = java.lang.Math.min(available(context), bAvail);\n                java.lang.System.arraycopy(context.byte[], context.int, b, bPos, len);\n                context.int += len;\n                if ((context.int) >= (context.int)) {\n                    context.byte[] = null;\n                } \n                return len;\n            } \n            return context.boolean ? org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int : 0;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"bAvail"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"e9db7622-2e89-11e6-86d0-9d101596180b","method":{"position":"org.apache.commons.codec.digest.HmacUtils:688","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha512Hex(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        {\n            if (key == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest));\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[165,166,167,169,170,172],"tindex":"e9db9d33-2e89-11e6-86d0-1ff1ff3fbd8b","method":{"position":"org.apache.commons.codec.language.bm.Rule:275","type":"CtMethodImpl","sourcecode":"private static boolean endsWith(final java.lang.CharSequence input, final java.lang.CharSequence suffix) {\n    if ((input.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((suffix.length()) > (input.length())) {\n                return false;\n            } \n            for (int int = (input.length()) - 1, int int = (suffix.length()) - 1 ; j >= 0 ; i-- , j--) {\n                if ((input.charAt(i)) != (suffix.charAt(j))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"e9db9d34-2e89-11e6-86d0-175ee50e6323","method":{"position":"org.apache.commons.codec.binary.StringUtils:366","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf16Le(final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[165,166,167,168,169,170,171,172,251,252],"tindex":"e9dbc445-2e89-11e6-86d0-6dbda2495230","method":{"position":"org.apache.commons.codec.language.bm.Rule:600","type":"CtMethodImpl","sourcecode":"private static boolean startsWith(final java.lang.CharSequence input, final java.lang.CharSequence prefix) {\n    if ((prefix.length()) == 0) {\n        {\n            if ((input.length()) == 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((prefix.length()) > (input.length())) {\n                        return false;\n                    } \n                    for (int int = 0 ; i < (prefix.length()) ; i++) {\n                        if ((input.charAt(i)) != (prefix.charAt(i))) {\n                            return false;\n                        } \n                    }\n                    return true;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[253,254,255,256,151,257,152,258,259],"tindex":"e9dbc446-2e89-11e6-86d0-b966d37c06b0","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:409","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:486","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"e9dbeb57-2e89-11e6-86d0-2533c21dab9f","method":{"position":"org.apache.commons.codec.language.Caverphone:57","type":"CtMethodImpl","sourcecode":"public java.lang.String caverphone(final java.lang.String source) {\n    if (source == null) {\n        {\n            return org.apache.commons.codec.language.Caverphone.this.org.apache.commons.codec.language.Caverphone2.encode(source);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[],"tindex":"e9dbeb58-2e89-11e6-86d0-59af6f8961db","method":{"position":"org.apache.commons.codec.binary.StringUtils:92","type":"CtMethodImpl","sourcecode":"private static byte[] getBytes(final java.lang.String string, final java.nio.charset.Charset charset) {\n    if (string == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (string == null) {\n                {\n                    if (string == null) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (string == null) {\n                                return null;\n                            } \n                            return string.getBytes(charset);\n                        }\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[106,107,160,260,161,108,109,261,262,263,264,110,111,112,265,266,162,267,163,268],"tindex":"e9dbeb59-2e89-11e6-86d0-83f26f0d9ef5","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:888","type":"CtMethodImpl","sourcecode":"private java.lang.String cleanInput(java.lang.String input) {\n    if ((input.length()) == 0) {\n        {\n            if (input == null) {\n                return null;\n            } \n            input = input.trim();\n            if ((input.length()) == 0) {\n                return null;\n            } \n            return input.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:530","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof byte[]"},"failures":[],"tindex":"e9dc126a-2e89-11e6-86d0-fd31351f2935","method":{"position":"org.apache.commons.codec.net.URLCodec:309","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof byte[]) {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                {\n                    if (obj == null) {\n                        return null;\n                    } else if (obj instanceof byte[]) {\n                        return encode(((byte[])(obj)));\n                    } else if (obj instanceof java.lang.String) {\n                        return encode(((java.lang.String)(obj)));\n                    } else {\n                        throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n                    }\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[35,72],"tindex":"e9dc126b-2e89-11e6-86d0-3fdbf3be79f0","method":{"position":"org.apache.commons.codec.binary.StringUtils:256","type":"CtMethodImpl","sourcecode":"private static java.lang.String newString(final byte[] bytes, final java.nio.charset.Charset charset) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return bytes == null ? null : new java.lang.String(bytes , charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[],"tindex":"e9dc608c-2e89-11e6-86d0-21cbd4ce4914","method":{"position":"org.apache.commons.codec.binary.StringUtils:92","type":"CtMethodImpl","sourcecode":"private static byte[] getBytes(final java.lang.String string, final java.nio.charset.Charset charset) {\n    if (string == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (string == null) {\n                {\n                    if (string == null) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (string == null) {\n                                return null;\n                            } \n                            return string.getBytes(charset);\n                        }\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:176","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[269],"tindex":"e9dc608d-2e89-11e6-86d0-d1bd08952194","method":{"position":"org.apache.commons.codec.net.QCodec:246","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if (str == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return encode(str, getCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"e9dc879e-2e89-11e6-86d0-458fc919ea02","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:462","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(final java.lang.String source) {\n    if (source == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.String[] java.lang.String[] = soundex(source, true);\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            for (final java.lang.String java.lang.String : branches) {\n                sb.append(branch);\n                if ((++index) < (branches.int)) {\n                    sb.append('|');\n                } \n            }\n            return sb.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"e9dc879f-2e89-11e6-86d0-f191451b60e9","method":{"position":"org.apache.commons.codec.language.Soundex:258","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n                    if ((str.length()) == 0) {\n                        return str;\n                    } \n                    final char[] char[] = new char[]{ '0' , '0' , '0' , '0' };\n                    char char;\n                    char char;\n                    int int = 1;\n                    int int = 1;\n                    out[0] = str.charAt(0);\n                    last = getMappingCode(str, 0);\n                    while ((incount < (str.length())) && (count < (out.int))) {\n                        mapped = getMappingCode(str, (incount++));\n                        if (mapped != 0) {\n                            if ((mapped != '0') && (mapped != last)) {\n                                out[(count++)] = mapped;\n                            } \n                            last = mapped;\n                        } \n                    }\n                    return new java.lang.String(out);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:606","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SH\")"},"failures":[106,107,108,110,111,112,266,268],"tindex":"e9dcaeb0-2e89-11e6-86d0-7504140c4289","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:384","type":"CtMethodImpl","sourcecode":"private int handleD(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SH\")) {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n                    result.append('J');\n                    index += 3;\n                } else {\n                    result.append(\"TK\");\n                    index += 2;\n                }\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n                result.append('T');\n                index += 2;\n            } else {\n                result.append('T');\n                index++;\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:286","type":"CtBinaryOperatorImpl","sourcecode":"obj == null"},"failures":[258],"tindex":"e9dcd5c1-2e89-11e6-86d0-f31f92e88572","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:527","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj instanceof byte[]) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (obj == null) {\n                {\n                    if (obj == null) {\n                        return null;\n                    } else if (obj instanceof byte[]) {\n                        return decode(((byte[])(obj)));\n                    } else if (obj instanceof java.lang.String) {\n                        return decode(((java.lang.String)(obj)));\n                    } else {\n                        throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable decoded\"));\n                    }\n                }\n            } else {\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[203,115,116,117,119,120],"tindex":"e9dd4af2-2e89-11e6-86d0-d58f38b2a58f","method":{"position":"org.apache.commons.codec.net.URLCodec:193","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            return org.apache.commons.codec.net.URLCodec.encodeUrl(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet, bytes);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"e9dd4af3-2e89-11e6-86d0-017cce80e6cc","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:125","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final java.lang.String keyBytes, final java.lang.String salt) {\n    if (keyBytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"keyBytes"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[],"tindex":"e9dd7204-2e89-11e6-86d0-df7dc10337b1","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:182","type":"CtMethodImpl","sourcecode":"private static final int encodeQuotedPrintable(final int b, final java.io.ByteArrayOutputStream buffer) {\n    if (b < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n            final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), 16));\n            final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), 16));\n            buffer.write(hex1);\n            buffer.write(hex2);\n            return 3;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:126","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[270,271,272,273,274,275,276,277,278,279],"tindex":"e9dd7205-2e89-11e6-86d0-d9d657bfe628","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:417","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String text) {\n    if (text == null) {\n        {\n            return colognePhonetic(text);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"text"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtBinaryOperatorImpl","sourcecode":"input == null"},"failures":[],"tindex":"e9dd9916-2e89-11e6-86d0-4f11f79c2a29","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:383","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String input) {\n    if (input == null) {\n        {\n            if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.Lang.guessLanguages(input);\n                    return encode(input, languageSet);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:801","type":"CtBinaryOperatorImpl","sourcecode":"index != 0"},"failures":[126,129,280,130,281,282,134,136,283,284,138,285],"tindex":"e9dd9917-2e89-11e6-86d0-7d4b2b797976","method":{"position":"org.apache.commons.codec.language.Metaphone:360","type":"CtMethodImpl","sourcecode":"private boolean regionMatch(final java.lang.StringBuilder string, final int index, final java.lang.String test) {\n    if (index != 0) {\n        {\n            boolean boolean = false;\n            if ((index >= 0) && (((index + (test.length())) - 1) < (string.length()))) {\n                final java.lang.String java.lang.String = string.substring(index, (index + (test.length())));\n                matches = substring.equals(test);\n            } \n            return matches;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:516","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))"},"failures":[],"tindex":"e9ddc028-2e89-11e6-86d0-6bc37d412d50","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:703","type":"CtMethodImpl","sourcecode":"private int handleW(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WR\")) {\n                        result.append('R');\n                        index += 2;\n                    } else {\n                        if ((index == 0) && ((isVowel(charAt(value, (index + 1)))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WH\")))) {\n                            if (isVowel(charAt(value, (index + 1)))) {\n                                result.append('A', 'F');\n                            } else {\n                                result.append('A');\n                            }\n                            index++;\n                        } else if ((((index == ((value.length()) - 1)) && (isVowel(charAt(value, (index - 1))))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n                            result.appendAlternate('F');\n                            index++;\n                        } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n                            result.append(\"TS\", \"FX\");\n                            index += 4;\n                        } else {\n                            index++;\n                        }\n                    }\n                    return index;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:468","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"e9dde739-2e89-11e6-86d0-557b3f808c15","method":{"position":"org.apache.commons.codec.net.QCodec:225","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.lang.String charset) throws org.apache.commons.codec.EncoderException {\n    if (charset == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            try {\n                return encodeText(str, charset);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"charset"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"e9dde73a-2e89-11e6-86d0-4d733ab6e323","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:408","type":"CtMethodImpl","sourcecode":"private int handleG(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((charAt(value, (index + 1))) == 'H') {\n                index = handleGH(value, result, index);\n            } else if ((charAt(value, (index + 1))) == 'N') {\n                if (((index == 1) && (isVowel(charAt(value, 0)))) && (!slavoGermanic)) {\n                    result.append(\"KN\", \"N\");\n                } else if (((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"EY\"))) && ((charAt(value, (index + 1))) != 'Y')) && (!slavoGermanic)) {\n                    result.append(\"N\", \"KN\");\n                } else {\n                    result.append(\"KN\");\n                }\n                index = index + 2;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"LI\")) && (!slavoGermanic)) {\n                result.append(\"KL\", \"L\");\n                index += 2;\n            } else if ((index == 0) && (((charAt(value, (index + 1))) == 'Y') || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])))) {\n                result.append('K', 'J');\n                index += 2;\n            } else if (((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ER\")) || ((charAt(value, (index + 1))) == 'Y')) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\")))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"E\", \"I\")))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"RGY\", \"OGY\")))) {\n                result.append('K', 'J');\n                index += 2;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"E\", \"I\", \"Y\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"AGGI\", \"OGGI\"))) {\n                if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ET\"))) {\n                    result.append('K');\n                } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")) {\n                    result.append('J');\n                } else {\n                    result.append('J', 'K');\n                }\n                index += 2;\n            } else if ((charAt(value, (index + 1))) == 'G') {\n                index += 2;\n                result.append('K');\n            } else {\n                index++;\n                result.append('K');\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[286],"tindex":"e9de355b-2e89-11e6-86d0-b5146783279d","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:352","type":"CtMethodImpl","sourcecode":"public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (bytes == null) {\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    if (bytes == null) {\n                        return null;\n                    } \n                    final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n                    for (int int = 0 ; i < (bytes.int) ; i++) {\n                        final int int = bytes[i];\n                        if (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n                            try {\n                                if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n                                    continue;\n                                } \n                                final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n                                final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                                buffer.write(((char)((u << 4) + l)));\n                            } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n                                throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n                            }\n                        } else if ((b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n                            buffer.write(b);\n                        } \n                    }\n                    return buffer.toByteArray();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:377","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof byte[]"},"failures":[],"tindex":"e9de5c6c-2e89-11e6-86d0-f13a9a8fcf13","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:527","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj instanceof byte[]) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (obj == null) {\n                {\n                    if (obj == null) {\n                        return null;\n                    } else if (obj instanceof byte[]) {\n                        return decode(((byte[])(obj)));\n                    } else if (obj instanceof java.lang.String) {\n                        return decode(((java.lang.String)(obj)));\n                    } else {\n                        throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable decoded\"));\n                    }\n                }\n            } else {\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:803","type":"CtBinaryOperatorImpl","sourcecode":"(!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))"},"failures":[],"tindex":"e9de837d-2e89-11e6-86d0-9f44e7ecb691","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:703","type":"CtMethodImpl","sourcecode":"private int handleW(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WR\")) {\n                        result.append('R');\n                        index += 2;\n                    } else {\n                        if ((index == 0) && ((isVowel(charAt(value, (index + 1)))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WH\")))) {\n                            if (isVowel(charAt(value, (index + 1)))) {\n                                result.append('A', 'F');\n                            } else {\n                                result.append('A');\n                            }\n                            index++;\n                        } else if ((((index == ((value.length()) - 1)) && (isVowel(charAt(value, (index - 1))))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n                            result.appendAlternate('F');\n                            index++;\n                        } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n                            result.append(\"TS\", \"FX\");\n                            index += 4;\n                        } else {\n                            index++;\n                        }\n                    }\n                    return index;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"e9def8ae-2e89-11e6-86d0-2f661448e1d7","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:352","type":"CtMethodImpl","sourcecode":"public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (bytes == null) {\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    if (bytes == null) {\n                        return null;\n                    } \n                    final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n                    for (int int = 0 ; i < (bytes.int) ; i++) {\n                        final int int = bytes[i];\n                        if (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n                            try {\n                                if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n                                    continue;\n                                } \n                                final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n                                final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                                buffer.write(((char)((u << 4) + l)));\n                            } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n                                throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n                            }\n                        } else if ((b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n                            buffer.write(b);\n                        } \n                    }\n                    return buffer.toByteArray();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"e9df1fbf-2e89-11e6-86d0-6f168e10969d","method":{"position":"org.apache.commons.codec.digest.HmacUtils:688","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha512Hex(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        {\n            if (key == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest));\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"valueToDigest"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:382","type":"CtInvocationImpl","sourcecode":"ph.startsWith(\"(\")"},"failures":[164,165,166,167,168,287,288,169,170,171,172,173,289,290,291,251,252,292],"tindex":"e9df46d0-2e89-11e6-86d0-492376e941bc","method":{"position":"org.apache.commons.codec.language.bm.Rule:365","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.codec.language.bm.Rule.Phoneme parsePhoneme(final java.lang.String ph) {\n    if (ph.startsWith(\"(\")) {\n        {\n            final int int = ph.indexOf(\"[\");\n            if (open >= 0) {\n                if (!(ph.endsWith(\"]\"))) {\n                    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n                } \n                final java.lang.String java.lang.String = ph.substring(0, open);\n                final java.lang.String java.lang.String = ph.substring((open + 1), ((ph.length()) - 1));\n                final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(in.split(\"[+]\")));\n                return new org.apache.commons.codec.language.bm.Rule.Phoneme(before , org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs));\n            } else {\n                return new org.apache.commons.codec.language.bm.Rule.Phoneme(ph , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"ph"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[],"tindex":"e9df6de1-2e89-11e6-86d0-134e52dbe00a","method":{"position":"org.apache.commons.codec.language.bm.Rule:600","type":"CtMethodImpl","sourcecode":"private static boolean startsWith(final java.lang.CharSequence input, final java.lang.CharSequence prefix) {\n    if ((prefix.length()) == 0) {\n        {\n            if ((input.length()) == 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((prefix.length()) > (input.length())) {\n                        return false;\n                    } \n                    for (int int = 0 ; i < (prefix.length()) ; i++) {\n                        if ((input.charAt(i)) != (prefix.charAt(i))) {\n                            return false;\n                        } \n                    }\n                    return true;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"prefix"},"type":"special","returnInThen":true,"status":0}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
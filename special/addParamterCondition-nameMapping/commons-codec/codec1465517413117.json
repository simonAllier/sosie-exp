{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":30,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":42,"org.apache.commons.codec.language.NysiisTest.testSnat":150,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":96,"org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException":27,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeNull":49,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty":39,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":110,"org.apache.commons.codec.language.Caverphone1Test.testEncodeEmpty":175,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":108,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":109,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":28,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":36,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":82,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":81,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":138,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":58,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":111,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":78,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull":38,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":57,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":63,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":94,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":86,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":84,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":87,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":5,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":72,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty":50,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":168,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":51,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":118,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":120,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":172,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":8,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":119,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex":182,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":7,"org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac":29,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":83,"org.apache.commons.codec.language.NysiisTest.testCap":139,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":74,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le":21,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":135,"org.apache.commons.codec.digest.HmacUtilsTest.testEmptyKey":37,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":117,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":6,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":179,"org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence":45,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":133,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":180,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":10,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":25,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":33,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":93,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":126,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull":164,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":13,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii":19,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":24,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding":159,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":54,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":136,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":62,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":14,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":92,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":85,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":112,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":122,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":125,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":130,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":95,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":103,"org.apache.commons.codec.language.MetaphoneTest.testEncodeEmpty":3,"org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull":165,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":34,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeNull":56,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull":43,"org.apache.commons.codec.language.SoundexTest.testB650":107,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":46,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8":18,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":171,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":48,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":53,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":73,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16":22,"org.apache.commons.codec.language.SoundexTest.testNewInstance":178,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":60,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":61,"org.apache.commons.codec.language.NysiisTest.testTranan":154,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":158,"org.apache.commons.codec.language.NysiisTest.testEncodeNull":163,"org.apache.commons.codec.language.NysiisTest.testFal":142,"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence":121,"org.apache.commons.codec.language.NysiisTest.testSnad":149,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":128,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":15,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":173,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":131,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":134,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":129,"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":174,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":104,"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad":16,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":105,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":106,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":67,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":77,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":98,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":0,"org.apache.commons.codec.language.MetaphoneTest.testEncodeNull":2,"org.apache.commons.codec.language.NysiisTest.testDropBy":152,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":12,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringBadEnc":23,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":71,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":80,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":161,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":66,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":127,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":160,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":69,"org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt":124,"org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence":40,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":41,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":100,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":99,"org.apache.commons.codec.net.BCodecTest.testNullInput":4,"org.apache.commons.codec.language.NysiisTest.testRule2":144,"org.apache.commons.codec.language.NysiisTest.testRule1":143,"org.apache.commons.codec.language.NysiisTest.testRule7":147,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":52,"org.apache.commons.codec.language.NysiisTest.testRule6":146,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":170,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":70,"org.apache.commons.codec.language.NysiisTest.testRule5":145,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":75,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":115,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty":44,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":97,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":151,"org.apache.commons.codec.language.Caverphone1Test.testLocaleIndependence":176,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":156,"org.apache.commons.codec.language.NysiisTest.testBran":148,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":155,"org.apache.commons.codec.net.BCodecTest.testDecodeStringWithNull":169,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":55,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":113,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":102,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":181,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":9,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":47,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be":20,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":32,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":68,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull":162,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":88,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":90,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":11,"org.apache.commons.codec.binary.HexTest.testEncodeEmpty":157,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":116,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":177,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":101,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":79,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":123,"org.apache.commons.codec.language.NysiisTest.testDad":140,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":1,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":26,"org.apache.commons.codec.language.NysiisTest.testOthers":153,"org.apache.commons.codec.language.SoundexTest.testDifference":114,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1":17,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":137,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":59,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":132,"org.apache.commons.codec.language.NysiisTest.testDan":141,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":89,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":35,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":76,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":65,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullAlgo":31,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":166,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail":167,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":64,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":91},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[0,1],"tindex":"b3bc03ec-2e9f-11e6-93ec-b96e7165a025","method":{"position":"org.apache.commons.codec.digest.HmacUtils:633","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha512(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        {\n            if (valueToDigest == null) {\n                {\n                    try {\n                        return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest);\n                    } catch (final java.lang.IllegalStateException e) {\n                        throw new java.lang.IllegalArgumentException(e);\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"valueToDigest"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[2,3],"tindex":"b3bca02d-2e9f-11e6-93ec-57c4d5ac5f74","method":{"position":"org.apache.commons.codec.language.Metaphone:92","type":"CtMethodImpl","sourcecode":"public java.lang.String metaphone(final java.lang.String txt) {\n    if ((txt == null) || ((txt.length()) == 0)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((txt == null) || ((txt.length()) == 0)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = false;\n                    int int;\n                    if ((txt == null) || ((txtLength = txt.length()) == 0)) {\n                        return \"\";\n                    } \n                    if (txtLength == 1) {\n                        return txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                    } \n                    final char[] char[] = txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale).toCharArray();\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40);\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10);\n                    switch (inwd[0]) {\n                        case 'K' :\n                        case 'G' :\n                        case 'P' :\n                            if ((inwd[1]) == 'N') {\n                                local.append(inwd, 1, ((inwd.int) - 1));\n                            } else {\n                                local.append(inwd);\n                            }\n                            break;\n                        case 'A' :\n                            if ((inwd[1]) == 'E') {\n                                local.append(inwd, 1, ((inwd.int) - 1));\n                            } else {\n                                local.append(inwd);\n                            }\n                            break;\n                        case 'W' :\n                            if ((inwd[1]) == 'R') {\n                                local.append(inwd, 1, ((inwd.int) - 1));\n                                break;\n                            } \n                            if ((inwd[1]) == 'H') {\n                                local.append(inwd, 1, ((inwd.int) - 1));\n                                local.setCharAt(0, 'W');\n                            } else {\n                                local.append(inwd);\n                            }\n                            break;\n                        case 'X' :\n                            inwd[0] = 'S';\n                            local.append(inwd);\n                            break;\n                        default :\n                            local.append(inwd);\n                    }\n                    final int int = local.length();\n                    int int = 0;\n                    while (((code.length()) < (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) && (n < wdsz)) {\n                        final char char = local.charAt(n);\n                        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n                            n++;\n                        } else {\n                            switch (symb) {\n                                case 'A' :\n                                case 'E' :\n                                case 'I' :\n                                case 'O' :\n                                case 'U' :\n                                    if (n == 0) {\n                                        code.append(symb);\n                                    } \n                                    break;\n                                case 'B' :\n                                    if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n                                        break;\n                                    } \n                                    code.append(symb);\n                                    break;\n                                case 'C' :\n                                    if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                        break;\n                                    } \n                                    if (regionMatch(local, n, \"CIA\")) {\n                                        code.append('X');\n                                        break;\n                                    } \n                                    if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                        code.append('S');\n                                        break;\n                                    } \n                                    if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n                                        code.append('K');\n                                        break;\n                                    } \n                                    if (isNextChar(local, n, 'H')) {\n                                        if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                                            code.append('K');\n                                        } else {\n                                            code.append('X');\n                                        }\n                                    } else {\n                                        code.append('K');\n                                    }\n                                    break;\n                                case 'D' :\n                                    if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n                                        code.append('J');\n                                        n += 2;\n                                    } else {\n                                        code.append('T');\n                                    }\n                                    break;\n                                case 'G' :\n                                    if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n                                        break;\n                                    } \n                                    if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n                                        break;\n                                    } \n                                    if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n                                        break;\n                                    } \n                                    if (isPreviousChar(local, n, 'G')) {\n                                        hard = true;\n                                    } else {\n                                        hard = false;\n                                    }\n                                    if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n                                        code.append('J');\n                                    } else {\n                                        code.append('K');\n                                    }\n                                    break;\n                                case 'H' :\n                                    if (isLastChar(wdsz, n)) {\n                                        break;\n                                    } \n                                    if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n                                        break;\n                                    } \n                                    if (isVowel(local, (n + 1))) {\n                                        code.append('H');\n                                    } \n                                    break;\n                                case 'F' :\n                                case 'J' :\n                                case 'L' :\n                                case 'M' :\n                                case 'N' :\n                                case 'R' :\n                                    code.append(symb);\n                                    break;\n                                case 'K' :\n                                    if (n > 0) {\n                                        if (!(isPreviousChar(local, n, 'C'))) {\n                                            code.append(symb);\n                                        } \n                                    } else {\n                                        code.append(symb);\n                                    }\n                                    break;\n                                case 'P' :\n                                    if (isNextChar(local, n, 'H')) {\n                                        code.append('F');\n                                    } else {\n                                        code.append(symb);\n                                    }\n                                    break;\n                                case 'Q' :\n                                    code.append('K');\n                                    break;\n                                case 'S' :\n                                    if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n                                        code.append('X');\n                                    } else {\n                                        code.append('S');\n                                    }\n                                    break;\n                                case 'T' :\n                                    if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n                                        code.append('X');\n                                        break;\n                                    } \n                                    if (regionMatch(local, n, \"TCH\")) {\n                                        break;\n                                    } \n                                    if (regionMatch(local, n, \"TH\")) {\n                                        code.append('0');\n                                    } else {\n                                        code.append('T');\n                                    }\n                                    break;\n                                case 'V' :\n                                    code.append('F');\n                                    break;\n                                case 'W' :\n                                case 'Y' :\n                                    if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n                                        code.append(symb);\n                                    } \n                                    break;\n                                case 'X' :\n                                    code.append('K');\n                                    code.append('S');\n                                    break;\n                                case 'Z' :\n                                    code.append('S');\n                                    break;\n                                default :\n                                    break;\n                            }\n                            n++;\n                        }\n                        if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n                            code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n                        } \n                    }\n                    return code.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"txt"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[4],"tindex":"b3bd637e-2e9f-11e6-93ec-c7ba84cc2e44","method":{"position":"org.apache.commons.codec.net.BCodec:100","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doDecoding(final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.Base64.decodeBase64(bytes);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:735","type":"CtBinaryOperatorImpl","sourcecode":"bigInt == null"},"failures":[],"tindex":"b3bd637f-2e9f-11e6-93ec-e9729ecf9829","method":{"position":"org.apache.commons.codec.binary.Base64:748","type":"CtMethodImpl","sourcecode":"static byte[] toIntegerBytes(final java.math.BigInteger bigInt) {\n    if (((bigInt.bitLength()) % 8) == 0) {\n        {\n            if (bigInt == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    int int = bigInt.bitLength();\n                    bitlen = ((bitlen + 7) >> 3) << 3;\n                    final byte[] byte[] = bigInt.toByteArray();\n                    if ((((bigInt.bitLength()) % 8) != 0) && ((((bigInt.bitLength()) / 8) + 1) == (bitlen / 8))) {\n                        return bigBytes;\n                    } \n                    int int = 0;\n                    int int = bigBytes.int;\n                    if (((bigInt.bitLength()) % 8) == 0) {\n                        startSrc = 1;\n                        len--;\n                    } \n                    final int int = (bitlen / 8) - len;\n                    final byte[] byte[] = new byte[bitlen / 8];\n                    java.lang.System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n                    return resizedBytes;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bigInt":"bigInt"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isWhitespace(ch)"},"failures":[],"tindex":"b3bd8a90-2e9f-11e6-93ec-2547a3f7d8b5","method":{"position":"org.apache.commons.codec.language.Soundex:229","type":"CtMethodImpl","sourcecode":"private char map(final char ch) {\n    if (java.lang.Character.isWhitespace(ch)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = ch - 'A';\n            if ((index < 0) || (index >= (org.apache.commons.codec.language.Soundex.this.getSoundexMapping().int))) {\n                throw new java.lang.IllegalArgumentException((\"The character is not mapped: \" + ch));\n            } \n            return org.apache.commons.codec.language.Soundex.this.getSoundexMapping()[index];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[5],"tindex":"b3bdb1a1-2e9f-11e6-93ec-7b183512dbdb","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:140","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] ascii) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"ascii"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:349","type":"CtBinaryOperatorImpl","sourcecode":"((chr == 'H') || (chr < 'A')) || (chr > 'Z')"},"failures":[6,7,8,9,10,11,12,13,14,15],"tindex":"b3bdd8b2-2e9f-11e6-93ec-55a46acbcfca","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:234","type":"CtMethodImpl","sourcecode":"public void addRight(final char chr) {\n    if (((chr == 'H') || (chr < 'A')) || (chr > 'Z')) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            char[][int] = chr;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chr":"chr"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtBinaryOperatorImpl","sourcecode":"arrayOctet == null"},"failures":[16],"tindex":"b3bdd8b3-2e9f-11e6-93ec-735f8c5d5ae1","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:495","type":"CtMethodImpl","sourcecode":"protected boolean containsAlphabetOrPad(final byte[] arrayOctet) {\n    if (arrayOctet == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (arrayOctet == null) {\n                return false;\n            } \n            for (final byte byte : arrayOctet) {\n                if (((byte) == element) || (isInAlphabet(element))) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayOctet":"arrayOctet"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[17,18,19,20,21,22,23],"tindex":"b3bdffc4-2e9f-11e6-93ec-63dbc312ccce","method":{"position":"org.apache.commons.codec.binary.StringUtils:279","type":"CtMethodImpl","sourcecode":"public static java.lang.String newString(final byte[] bytes, final java.lang.String charsetName) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            try {\n                return new java.lang.String(bytes , charsetName);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,1],"tindex":"b3bdffc5-2e9f-11e6-93ec-7f1ee88525ce","method":{"position":"org.apache.commons.codec.digest.HmacUtils:174","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getInitializedMac(final java.lang.String algorithm, final byte[] key) {\n    if (key == null) {\n        {\n            if (key == null) {\n                throw new java.lang.IllegalArgumentException(\"Null key\");\n            } \n            try {\n                final javax.crypto.spec.SecretKeySpec javax.crypto.spec.SecretKeySpec = new javax.crypto.spec.SecretKeySpec(key , algorithm);\n                final javax.crypto.Mac javax.crypto.Mac = javax.crypto.Mac.getInstance(algorithm);\n                mac.init(keySpec);\n                return mac;\n            } catch (final java.security.NoSuchAlgorithmException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            } catch (final java.security.InvalidKeyException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[17],"tindex":"b3be26d6-2e9f-11e6-93ec-3980eceec29d","method":{"position":"org.apache.commons.codec.binary.StringUtils:302","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringIso8859_1(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[1],"tindex":"b3be4de7-2e9f-11e6-93ec-bdb287c166d3","method":{"position":"org.apache.commons.codec.digest.HmacUtils:658","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha512(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (key == null) {\n                {\n                    return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key), valueToDigest).doFinal();\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")"},"failures":[38,39,40,41,42,43,44,45,46],"tindex":"b3be4de8-2e9f-11e6-93ec-3bfc56d3141c","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:75","type":"CtMethodImpl","sourcecode":"public java.lang.String doubleMetaphone(final java.lang.String value) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n        {\n            return doubleMetaphone(value, false);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:339","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.lang.String"},"failures":[47],"tindex":"b3be74f9-2e9f-11e6-93ec-eb0a549a8091","method":{"position":"org.apache.commons.codec.net.URLCodec:309","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof java.lang.String) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                {\n                    if (obj instanceof java.lang.String) {\n                        throw new org.apache.commons.codec.EncoderException();\n                    } else {\n                        {\n                            if (obj == null) {\n                                return null;\n                            } else if (obj instanceof byte[]) {\n                                return encode(((byte[])(obj)));\n                            } else if (obj instanceof java.lang.String) {\n                                return encode(((java.lang.String)(obj)));\n                            } else {\n                                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n                            }\n                        }\n                    }\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtBinaryOperatorImpl","sourcecode":"(str == null) || ((str.length()) == 0)"},"failures":[48,49,50],"tindex":"b3be9c0a-2e9f-11e6-93ec-8134752fe36b","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:175","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if ((str == null) || ((str.length()) == 0)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n            if ((str.length()) == 0) {\n                return str;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            sBuf.append(str.charAt(0));\n            char char;\n            char char;\n            last = '*';\n            for (int int = 0 ; i < (str.length()) ; i++) {\n                current = getMappingCode(str.charAt(i));\n                if (current == last) {\n                    continue;\n                } else if (current != 0) {\n                    sBuf.append(current);\n                } \n                last = current;\n            }\n            return sBuf.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"b3bec31b-2e9f-11e6-93ec-33e156e6c805","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:338","type":"CtMethodImpl","sourcecode":"private static int[] desSetKey(final byte[] key) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int[] int[] = new int[32];\n            int int = org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(key, 0);\n            int int = org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(key, 4);\n            final int[] int[] = new int[2];\n            org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 4, 252645135, results);\n            d = results[0];\n            c = results[1];\n            c = org.apache.commons.codec.digest.UnixCrypt.hPermOp(c, (-2), -859045888);\n            d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888);\n            org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results);\n            d = results[0];\n            c = results[1];\n            org.apache.commons.codec.digest.UnixCrypt.permOp(c, d, 8, 16711935, results);\n            c = results[0];\n            d = results[1];\n            org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results);\n            d = results[0];\n            c = results[1];\n            d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4);\n            c &= 268435455;\n            int int = 0;\n            for (int int = 0 ; i < 16 ; i++) {\n                if (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.boolean[][i]) {\n                    c = (c >>> 2) | (c << 26);\n                    d = (d >>> 2) | (d << 26);\n                } else {\n                    c = (c >>> 1) | (c << 27);\n                    d = (d >>> 1) | (d << 27);\n                }\n                c &= 268435455;\n                d &= 268435455;\n                int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(c & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(((c >>> 6) & 3) | ((c >>> 7) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][(((c >>> 13) & 15) | ((c >>> 14) & 48))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((((c >>> 20) & 1) | ((c >>> 21) & 6)) | ((c >>> 22) & 56))]);\n                final int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][(d & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][(((d >>> 7) & 3) | ((d >>> 8) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((d >>> 15) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][(((d >>> 21) & 15) | ((d >>> 22) & 48))]);\n                schedule[(j++)] = (t << 16) | (s & 65535);\n                s = (s >>> 16) | (t & -65536);\n                s = (s << 4) | (s >>> 28);\n                schedule[(j++)] = s;\n            }\n            return schedule;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:784","type":"CtBinaryOperatorImpl","sourcecode":"index <= 1"},"failures":[51,52,53,54,55],"tindex":"b3bf113c-2e9f-11e6-93ec-4116440a4d47","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:201","type":"CtMethodImpl","sourcecode":"private static int getUnsignedOctet(final int index, final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (index <= 1) {\n                {\n                    int int = bytes[index];\n                    if (b < 0) {\n                        b = 256 + b;\n                    } \n                    return b;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[56],"tindex":"b3bf113d-2e9f-11e6-93ec-8d4a601396e8","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:273","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeQuotedPrintable(java.util.BitSet printable, final byte[] bytes, boolean strict) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            if (printable == null) {\n                printable = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet;\n            } \n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n            if (strict) {\n                int int = 1;\n                for (int int = 0 ; i < ((bytes.int) - 3) ; i++) {\n                    int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n                    if (pos < (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int)) {\n                        pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer);\n                    } else {\n                        org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer);\n                        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                        pos = 1;\n                    }\n                }\n                int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(((bytes.int) - 3), bytes);\n                boolean boolean = (!(printable.get(b))) || ((org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)) && (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int) - 5)));\n                pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n                if (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int) - 2)) {\n                    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n                } \n                for (int int = (bytes.int) - 2 ; i < (bytes.int) ; i++) {\n                    b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n                    encode = (!(printable.get(b))) || ((i > ((bytes.int) - 2)) && (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)));\n                    org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n                }\n            } else {\n                for (final byte byte : bytes) {\n                    int int = c;\n                    if (b < 0) {\n                        b = 256 + b;\n                    } \n                    if (printable.get(b)) {\n                        buffer.write(b);\n                    } else {\n                        org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n                    }\n                }\n            }\n            return buffer.toByteArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:126","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[6,7,8,9,10,11,12,13,14,57,15],"tindex":"b3bf5f5e-2e9f-11e6-93ec-c9f340c8ac7d","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:428","type":"CtMethodImpl","sourcecode":"private java.lang.String preprocess(java.lang.String text) {\n    if (text == null) {\n        {\n            text = text.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            final char[] char[] = text.toCharArray();\n            for (int int = 0 ; index < (chrs.int) ; index++) {\n                if ((chrs[index]) > 'Z') {\n                    for (final char[] char[] : org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[][]) {\n                        if ((chrs[index]) == (element[0])) {\n                            chrs[index] = element[1];\n                            break;\n                        } \n                    }\n                } \n            }\n            return new java.lang.String(chrs);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"text"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:74","type":"CtBinaryOperatorImpl","sourcecode":"(cs1 == null) || (cs2 == null)"},"failures":[58,59,60,61,62,63,64],"tindex":"b3bf866f-2e9f-11e6-93ec-7fc2fbdf8c93","method":{"position":"org.apache.commons.codec.binary.StringUtils:70","type":"CtMethodImpl","sourcecode":"public static boolean equals(final java.lang.CharSequence cs1, final java.lang.CharSequence cs2) {\n    if ((cs1 == null) || (cs2 == null)) {\n        {\n            if (cs1 == cs2) {\n                return true;\n            } \n            if ((cs1 == null) || (cs2 == null)) {\n                return false;\n            } \n            if ((cs1 instanceof java.lang.String) && (cs2 instanceof java.lang.String)) {\n                return cs1.equals(cs2);\n            } \n            return org.apache.commons.codec.binary.CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, java.lang.Math.max(cs1.length(), cs2.length()));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs1":"cs1","cs2":"cs2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[65,66,38,39,40,67,58,41,59,68,60,61,62,42,63,64,43,44,45,46],"tindex":"b3bfad80-2e9f-11e6-93ec-b5f280f6e559","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:888","type":"CtMethodImpl","sourcecode":"private java.lang.String cleanInput(java.lang.String input) {\n    if ((input.length()) == 0) {\n        {\n            if (input == null) {\n                return null;\n            } \n            input = input.trim();\n            if ((input.length()) == 0) {\n                return null;\n            } \n            return input.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[69,70,71,72,73],"tindex":"b3bfad81-2e9f-11e6-93ec-2f7465d2c4dc","method":{"position":"org.apache.commons.codec.net.QCodec:153","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doEncoding(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                {\n                    if (bytes == null) {\n                        {\n                            if (bytes == null) {\n                                return null;\n                            } \n                            final byte[] byte[] = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet, bytes);\n                            if (org.apache.commons.codec.net.QCodec.this.boolean) {\n                                for (int int = 0 ; i < (data.int) ; i++) {\n                                    if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                                        data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n                                    } \n                                }\n                            } \n                            return data;\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[],"tindex":"b3bfad82-2e9f-11e6-93ec-6dcfa981eac1","method":{"position":"org.apache.commons.codec.language.Metaphone:92","type":"CtMethodImpl","sourcecode":"public java.lang.String metaphone(final java.lang.String txt) {\n    if ((txt == null) || ((txt.length()) == 0)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((txt == null) || ((txt.length()) == 0)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = false;\n                    int int;\n                    if ((txt == null) || ((txtLength = txt.length()) == 0)) {\n                        return \"\";\n                    } \n                    if (txtLength == 1) {\n                        return txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                    } \n                    final char[] char[] = txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale).toCharArray();\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40);\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10);\n                    switch (inwd[0]) {\n                        case 'K' :\n                        case 'G' :\n                        case 'P' :\n                            if ((inwd[1]) == 'N') {\n                                local.append(inwd, 1, ((inwd.int) - 1));\n                            } else {\n                                local.append(inwd);\n                            }\n                            break;\n                        case 'A' :\n                            if ((inwd[1]) == 'E') {\n                                local.append(inwd, 1, ((inwd.int) - 1));\n                            } else {\n                                local.append(inwd);\n                            }\n                            break;\n                        case 'W' :\n                            if ((inwd[1]) == 'R') {\n                                local.append(inwd, 1, ((inwd.int) - 1));\n                                break;\n                            } \n                            if ((inwd[1]) == 'H') {\n                                local.append(inwd, 1, ((inwd.int) - 1));\n                                local.setCharAt(0, 'W');\n                            } else {\n                                local.append(inwd);\n                            }\n                            break;\n                        case 'X' :\n                            inwd[0] = 'S';\n                            local.append(inwd);\n                            break;\n                        default :\n                            local.append(inwd);\n                    }\n                    final int int = local.length();\n                    int int = 0;\n                    while (((code.length()) < (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) && (n < wdsz)) {\n                        final char char = local.charAt(n);\n                        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n                            n++;\n                        } else {\n                            switch (symb) {\n                                case 'A' :\n                                case 'E' :\n                                case 'I' :\n                                case 'O' :\n                                case 'U' :\n                                    if (n == 0) {\n                                        code.append(symb);\n                                    } \n                                    break;\n                                case 'B' :\n                                    if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n                                        break;\n                                    } \n                                    code.append(symb);\n                                    break;\n                                case 'C' :\n                                    if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                        break;\n                                    } \n                                    if (regionMatch(local, n, \"CIA\")) {\n                                        code.append('X');\n                                        break;\n                                    } \n                                    if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                        code.append('S');\n                                        break;\n                                    } \n                                    if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n                                        code.append('K');\n                                        break;\n                                    } \n                                    if (isNextChar(local, n, 'H')) {\n                                        if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                                            code.append('K');\n                                        } else {\n                                            code.append('X');\n                                        }\n                                    } else {\n                                        code.append('K');\n                                    }\n                                    break;\n                                case 'D' :\n                                    if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n                                        code.append('J');\n                                        n += 2;\n                                    } else {\n                                        code.append('T');\n                                    }\n                                    break;\n                                case 'G' :\n                                    if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n                                        break;\n                                    } \n                                    if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n                                        break;\n                                    } \n                                    if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n                                        break;\n                                    } \n                                    if (isPreviousChar(local, n, 'G')) {\n                                        hard = true;\n                                    } else {\n                                        hard = false;\n                                    }\n                                    if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n                                        code.append('J');\n                                    } else {\n                                        code.append('K');\n                                    }\n                                    break;\n                                case 'H' :\n                                    if (isLastChar(wdsz, n)) {\n                                        break;\n                                    } \n                                    if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n                                        break;\n                                    } \n                                    if (isVowel(local, (n + 1))) {\n                                        code.append('H');\n                                    } \n                                    break;\n                                case 'F' :\n                                case 'J' :\n                                case 'L' :\n                                case 'M' :\n                                case 'N' :\n                                case 'R' :\n                                    code.append(symb);\n                                    break;\n                                case 'K' :\n                                    if (n > 0) {\n                                        if (!(isPreviousChar(local, n, 'C'))) {\n                                            code.append(symb);\n                                        } \n                                    } else {\n                                        code.append(symb);\n                                    }\n                                    break;\n                                case 'P' :\n                                    if (isNextChar(local, n, 'H')) {\n                                        code.append('F');\n                                    } else {\n                                        code.append(symb);\n                                    }\n                                    break;\n                                case 'Q' :\n                                    code.append('K');\n                                    break;\n                                case 'S' :\n                                    if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n                                        code.append('X');\n                                    } else {\n                                        code.append('S');\n                                    }\n                                    break;\n                                case 'T' :\n                                    if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n                                        code.append('X');\n                                        break;\n                                    } \n                                    if (regionMatch(local, n, \"TCH\")) {\n                                        break;\n                                    } \n                                    if (regionMatch(local, n, \"TH\")) {\n                                        code.append('0');\n                                    } else {\n                                        code.append('T');\n                                    }\n                                    break;\n                                case 'V' :\n                                    code.append('F');\n                                    break;\n                                case 'W' :\n                                case 'Y' :\n                                    if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n                                        code.append(symb);\n                                    } \n                                    break;\n                                case 'X' :\n                                    code.append('K');\n                                    code.append('S');\n                                    break;\n                                case 'Z' :\n                                    code.append('S');\n                                    break;\n                                default :\n                                    break;\n                            }\n                            n++;\n                        }\n                        if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n                            code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n                        } \n                    }\n                    return code.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"txt"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:276","type":"CtBinaryOperatorImpl","sourcecode":"(suffix.length()) > (input.length())"},"failures":[74,75,76,77,78,79,80,81,82,83],"tindex":"b3c022b3-2e9f-11e6-93ec-fdfe28c407c4","method":{"position":"org.apache.commons.codec.language.bm.Rule:275","type":"CtMethodImpl","sourcecode":"private static boolean endsWith(final java.lang.CharSequence input, final java.lang.CharSequence suffix) {\n    if ((input.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((suffix.length()) > (suffix.length())) {\n                {\n                    if ((suffix.length()) > (input.length())) {\n                        return false;\n                    } \n                    for (int int = (input.length()) - 1, int int = (suffix.length()) - 1 ; j >= 0 ; i-- , j--) {\n                        if ((input.charAt(i)) != (suffix.charAt(j))) {\n                            return false;\n                        } \n                    }\n                    return true;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"suffix","suffix":"suffix"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[28],"tindex":"b3c022b4-2e9f-11e6-93ec-2f19adfcfe0b","method":{"position":"org.apache.commons.codec.digest.HmacUtils:494","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha256Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[],"tindex":"b3c049c5-2e9f-11e6-93ec-c17e18aaf2cc","method":{"position":"org.apache.commons.codec.binary.StringUtils:162","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUsAscii(final java.lang.String string) {\n    if (string == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (string == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"b3c049c6-2e9f-11e6-93ec-851a8c9e65b7","method":{"position":"org.apache.commons.codec.digest.HmacUtils:633","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha512(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        {\n            if (valueToDigest == null) {\n                {\n                    try {\n                        return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest);\n                    } catch (final java.lang.IllegalStateException e) {\n                        throw new java.lang.IllegalArgumentException(e);\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"valueToDigest"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[84,85,86,87,74,75,76,77,78,79,80,81,82,83],"tindex":"b3c070d7-2e9f-11e6-93ec-7da7c8fbd8d9","method":{"position":"org.apache.commons.codec.language.bm.Rule:600","type":"CtMethodImpl","sourcecode":"private static boolean startsWith(final java.lang.CharSequence input, final java.lang.CharSequence prefix) {\n    if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        {\n            if ((input.length()) == 0) {\n                {\n                    if ((prefix.length()) > (input.length())) {\n                        return false;\n                    } \n                    for (int int = 0 ; i < (prefix.length()) ; i++) {\n                        if ((input.charAt(i)) != (prefix.charAt(i))) {\n                            return false;\n                        } \n                    }\n                    return true;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[88,89,90],"tindex":"b3c070d8-2e9f-11e6-93ec-1d6f5fb6ede0","method":{"position":"org.apache.commons.codec.net.BCodec:119","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String value, final java.nio.charset.Charset charset) throws org.apache.commons.codec.EncoderException {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return null;\n                    } \n                    return encodeText(value, charset);\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:126","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"b3c070d9-2e9f-11e6-93ec-fb76e56f2194","method":{"position":"org.apache.commons.codec.language.bm.Lang:202","type":"CtMethodImpl","sourcecode":"public java.lang.String guessLanguage(final java.lang.String text) {\n    if (text == null) {\n        {\n            if (text == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (text == null) {\n                        {\n                            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = guessLanguages(text);\n                            return ls.isSingleton() ? ls.getAny() : org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.String;\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"text"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:326","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[91,92,93,94],"tindex":"b3c097ea-2e9f-11e6-93ec-b13d139dbdec","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:405","type":"CtMethodImpl","sourcecode":"private static void permOp(int a, int b, final int n, final int m, final int[] results) {\n    if (m == ' ') {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (b < 0) {\n                {\n                    final int int = ((a >>> n) ^ b) & m;\n                    a ^= t << n;\n                    b ^= t;\n                    results[0] = a;\n                    results[1] = b;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[95],"tindex":"b3c097eb-2e9f-11e6-93ec-1d22ad268450","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:160","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Crypt(final byte[] keyBytes, final java.lang.String salt) {\n    if (salt == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"b3c097ec-2e9f-11e6-93ec-01e1d9ca6b10","method":{"position":"org.apache.commons.codec.digest.HmacUtils:367","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha1Hex(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"valueToDigest"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:828","type":"CtBinaryOperatorImpl","sourcecode":"(index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))"},"failures":[65,66,61,62,42],"tindex":"b3c0befd-2e9f-11e6-93ec-1340147d79bc","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:498","type":"CtMethodImpl","sourcecode":"private int handleH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n        {\n            if (((index == 0) || (isVowel(charAt(value, (index - 1))))) && (isVowel(charAt(value, (index + 1))))) {\n                result.append('H');\n                index += 2;\n            } else {\n                index++;\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.Metaphone:389","type":"CtUnaryOperatorImpl","sourcecode":"!(obj instanceof java.lang.String)"},"failures":[96],"tindex":"b3c0e60e-2e9f-11e6-93ec-a36f01d3ccb7","method":{"position":"org.apache.commons.codec.net.QCodec:309","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (!(obj instanceof java.lang.String)) {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof java.lang.String) {\n                return decode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be decoded using Q codec\"));\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:762","type":"CtBinaryOperatorImpl","sourcecode":"((bigInt.bitLength()) % 8) == 0"},"failures":[],"tindex":"b3c0e60f-2e9f-11e6-93ec-a9577af6de45","method":{"position":"org.apache.commons.codec.binary.Base64:748","type":"CtMethodImpl","sourcecode":"static byte[] toIntegerBytes(final java.math.BigInteger bigInt) {\n    if (((bigInt.bitLength()) % 8) == 0) {\n        {\n            if (bigInt == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    int int = bigInt.bitLength();\n                    bitlen = ((bitlen + 7) >> 3) << 3;\n                    final byte[] byte[] = bigInt.toByteArray();\n                    if ((((bigInt.bitLength()) % 8) != 0) && ((((bigInt.bitLength()) / 8) + 1) == (bitlen / 8))) {\n                        return bigBytes;\n                    } \n                    int int = 0;\n                    int int = bigBytes.int;\n                    if (((bigInt.bitLength()) % 8) == 0) {\n                        startSrc = 1;\n                        len--;\n                    } \n                    final int int = (bitlen / 8) - len;\n                    final byte[] byte[] = new byte[bitlen / 8];\n                    java.lang.System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n                    return resizedBytes;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bigInt":"bigInt"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[97,98],"tindex":"b3c0e610-2e9f-11e6-93ec-c93d1654a98e","method":{"position":"org.apache.commons.codec.binary.StringUtils:382","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf8(final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.StringUtils.newString(bytes, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[84,85,86,87,74,75,76,77,78,79,80,81,82,83],"tindex":"b3c10d21-2e9f-11e6-93ec-55a822889a08","method":{"position":"org.apache.commons.codec.language.bm.Rule:531","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if ((input.length()) == 0) {\n        {\n            return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:244","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[84,85,86,87,74,75,76,77,78,99,100,79,80,81,82,83,101,102],"tindex":"b3c10d22-2e9f-11e6-93ec-6b0e34d808a8","method":{"position":"org.apache.commons.codec.language.bm.Rule:612","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                {\n                    if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                        str = str.substring(1);\n                    } \n                    if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                        str = str.substring(0, ((str.length()) - 1));\n                    } \n                    return str;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:208","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121],"tindex":"b3c10d23-2e9f-11e6-93ec-f76871e0d8b9","method":{"position":"org.apache.commons.codec.language.Soundex:166","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (str == null) {\n        {\n            return soundex(str);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"b3c13434-2e9f-11e6-93ec-791c326d6d8b","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:201","type":"CtMethodImpl","sourcecode":"private static int getUnsignedOctet(final int index, final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (index <= 1) {\n                {\n                    int int = bytes[index];\n                    if (b < 0) {\n                        b = 256 + b;\n                    } \n                    return b;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:66","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[91,94,122,123,124,125,126,127,128,129,130],"tindex":"b3c13435-2e9f-11e6-93ec-491387a73048","method":{"position":"org.apache.commons.codec.digest.Crypt:148","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final java.lang.String key, final java.lang.String salt) {\n    if (salt == null) {\n        {\n            return org.apache.commons.codec.digest.Crypt.crypt(key.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtBinaryOperatorImpl","sourcecode":"input == null"},"failures":[84,86,87,75,76,77,79,80,81,82,83,102],"tindex":"b3c13436-2e9f-11e6-93ec-531d6cbff069","method":{"position":"org.apache.commons.codec.language.bm.Rule:579","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[97,131],"tindex":"b3c15b47-2e9f-11e6-93ec-452bc8356123","method":{"position":"org.apache.commons.codec.binary.StringUtils:234","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf8(final java.lang.String string) {\n    if (string == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:208","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"b3c15b48-2e9f-11e6-93ec-db2dc7d65a43","method":{"position":"org.apache.commons.codec.language.bm.Rule:612","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                {\n                    if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                        str = str.substring(1);\n                    } \n                    if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                        str = str.substring(0, ((str.length()) - 1));\n                    } \n                    return str;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[132,133,134,135,47,136],"tindex":"b3c15b49-2e9f-11e6-93ec-f77126c91cda","method":{"position":"org.apache.commons.codec.net.URLCodec:193","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                {\n                    return org.apache.commons.codec.net.URLCodec.encodeUrl(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet, bytes);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:326","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[],"tindex":"b3c1825a-2e9f-11e6-93ec-a1e93dd39c01","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:220","type":"CtMethodImpl","sourcecode":"private static int encodeByte(final int b, final boolean encode, final java.io.ByteArrayOutputStream buffer) {\n    if (b < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (encode) {\n                return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n            } else {\n                buffer.write(b);\n                return 1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:162","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isLetter(c))"},"failures":[137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155],"tindex":"b3c1825b-2e9f-11e6-93ec-97459ce763c4","method":{"position":"org.apache.commons.codec.language.Nysiis:100","type":"CtMethodImpl","sourcecode":"private static boolean isVowel(final char c) {\n    if (!(java.lang.Character.isLetter(c))) {\n        {\n            return ((((c == 'A') || (c == 'E')) || (c == 'I')) || (c == 'O')) || (c == 'U');\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"b3c1825c-2e9f-11e6-93ec-75db3302ace1","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:133","type":"CtMethodImpl","sourcecode":"private static java.lang.String sha2Crypt(final byte[] keyBytes, final java.lang.String salt, final java.lang.String saltPrefix, final int blocksize, final java.lang.String algorithm) {\n    if (salt == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = keyBytes.int;\n            int int = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int;\n            boolean boolean = false;\n            if (salt == null) {\n                throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n            } \n            final java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.util.regex.Pattern.matcher(salt);\n            if ((m == null) || (!(m.find()))) {\n                throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n            } \n            if ((m.group(3)) != null) {\n                rounds = java.lang.Integer.parseInt(m.group(3));\n                rounds = java.lang.Math.max(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, java.lang.Math.min(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, rounds));\n                roundsCustom = true;\n            } \n            final java.lang.String java.lang.String = m.group(4);\n            final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n            final int int = saltBytes.int;\n            java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n            ctx.update(keyBytes);\n            ctx.update(saltBytes);\n            java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n            altCtx.update(keyBytes);\n            altCtx.update(saltBytes);\n            altCtx.update(keyBytes);\n            byte[] byte[] = altCtx.digest();\n            int int = keyBytes.int;\n            while (cnt > blocksize) {\n                ctx.update(altResult, 0, blocksize);\n                cnt -= blocksize;\n            }\n            ctx.update(altResult, 0, cnt);\n            cnt = keyBytes.int;\n            while (cnt > 0) {\n                if ((cnt & 1) != 0) {\n                    ctx.update(altResult, 0, blocksize);\n                } else {\n                    ctx.update(keyBytes);\n                }\n                cnt >>= 1;\n            }\n            altResult = ctx.digest();\n            altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n            for (int int = 1 ; i <= keyLen ; i++) {\n                altCtx.update(keyBytes);\n            }\n            byte[] byte[] = altCtx.digest();\n            final byte[] byte[] = new byte[keyLen];\n            int int = 0;\n            while (cp < (keyLen - blocksize)) {\n                java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n                cp += blocksize;\n            }\n            java.lang.System.arraycopy(tempResult, 0, pBytes, cp, (keyLen - cp));\n            altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n            for (int int = 1 ; i <= (16 + ((altResult[0]) & 255)) ; i++) {\n                altCtx.update(saltBytes);\n            }\n            tempResult = altCtx.digest();\n            final byte[] byte[] = new byte[saltLen];\n            cp = 0;\n            while (cp < (saltLen - blocksize)) {\n                java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n                cp += blocksize;\n            }\n            java.lang.System.arraycopy(tempResult, 0, sBytes, cp, (saltLen - cp));\n            for (int int = 0 ; i <= (rounds - 1) ; i++) {\n                ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                if ((i & 1) != 0) {\n                    ctx.update(pBytes, 0, keyLen);\n                } else {\n                    ctx.update(altResult, 0, blocksize);\n                }\n                if ((i % 3) != 0) {\n                    ctx.update(sBytes, 0, saltLen);\n                } \n                if ((i % 7) != 0) {\n                    ctx.update(pBytes, 0, keyLen);\n                } \n                if ((i & 1) != 0) {\n                    ctx.update(altResult, 0, blocksize);\n                } else {\n                    ctx.update(pBytes, 0, keyLen);\n                }\n                altResult = ctx.digest();\n            }\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(saltPrefix);\n            if (roundsCustom) {\n                buffer.append(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String);\n                buffer.append(rounds);\n                buffer.append(\"$\");\n            } \n            buffer.append(saltString);\n            buffer.append(\"$\");\n            if (blocksize == 32) {\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[13], altResult[23], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), altResult[31], altResult[30], 3, buffer);\n            } else {\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), altResult[63], 2, buffer);\n            }\n            java.util.Arrays.fill(tempResult, ((byte)(0)));\n            java.util.Arrays.fill(pBytes, ((byte)(0)));\n            java.util.Arrays.fill(sBytes, ((byte)(0)));\n            ctx.reset();\n            altCtx.reset();\n            java.util.Arrays.fill(keyBytes, ((byte)(0)));\n            java.util.Arrays.fill(saltBytes, ((byte)(0)));\n            return buffer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:540","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"b3c1f78d-2e9f-11e6-93ec-47fa24395167","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:277","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final java.lang.String original, final java.lang.String salt) {\n    if (original == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.UnixCrypt.crypt(original.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"original"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:136","type":"CtBinaryOperatorImpl","sourcecode":"b == ' '"},"failures":[],"tindex":"b3c1f78e-2e9f-11e6-93ec-21b8bd4fef54","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:405","type":"CtMethodImpl","sourcecode":"private static void permOp(int a, int b, final int n, final int m, final int[] results) {\n    if (m == ' ') {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (b < 0) {\n                {\n                    final int int = ((a >>> n) ^ b) & m;\n                    a ^= t << n;\n                    b ^= t;\n                    results[0] = a;\n                    results[1] = b;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"m"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:406","type":"CtUnaryOperatorImpl","sourcecode":"!(object instanceof java.lang.String)"},"failures":[156,157],"tindex":"b3c1f78f-2e9f-11e6-93ec-cfa3529a0161","method":{"position":"org.apache.commons.codec.binary.Hex:295","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object object) throws org.apache.commons.codec.EncoderException {\n    if (!(object instanceof java.lang.String)) {\n        {\n            try {\n                final byte[] byte[] = object instanceof java.lang.String ? ((java.lang.String)(object)).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset()) : ((byte[])(object));\n                return org.apache.commons.codec.binary.Hex.encodeHex(byteArray);\n            } catch (final java.lang.ClassCastException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b3c21ea0-2e9f-11e6-93ec-dba0caa5065a","method":{"position":"org.apache.commons.codec.net.BCodec:137","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String value, final java.lang.String charset) throws org.apache.commons.codec.EncoderException {\n    if (charset == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (value == null) {\n                return null;\n            } \n            try {\n                return org.apache.commons.codec.net.BCodec.this.encodeText(value, charset);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"charset"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.codec.net.QCodec:208","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[158,159],"tindex":"b3c21ea1-2e9f-11e6-93ec-078417d4f18e","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:596","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)));\n        }\n    } else {\n        throw new java.io.UnsupportedEncodingException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.net.URLCodec:136","type":"CtBinaryOperatorImpl","sourcecode":"b == ' '"},"failures":[160,161],"tindex":"b3c245b2-2e9f-11e6-93ec-c7a98d0e1572","method":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:84","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(final byte[] b, final int offset, final int len) throws java.io.IOException {\n    if (len == ' ') {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (b == null) {\n                throw new java.lang.NullPointerException();\n            } else if ((offset < 0) || (len < 0)) {\n                throw new java.lang.IndexOutOfBoundsException();\n            } else if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n                throw new java.lang.IndexOutOfBoundsException();\n            } else if (len > 0) {\n                if (boolean) {\n                    org.apache.commons.codec.binary.BaseNCodec.encode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n                } else {\n                    org.apache.commons.codec.binary.BaseNCodec.decode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n                }\n                flush(false);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"len"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"b3c245b3-2e9f-11e6-93ec-3bfb0d7d3a5b","method":{"position":"org.apache.commons.codec.digest.HmacUtils:658","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha512(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (key == null) {\n                {\n                    return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key), valueToDigest).doFinal();\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl","sourcecode":"((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))"},"failures":[],"tindex":"b3c245b4-2e9f-11e6-93ec-1d5908d8d3df","method":{"position":"org.apache.commons.codec.language.bm.Rule:600","type":"CtMethodImpl","sourcecode":"private static boolean startsWith(final java.lang.CharSequence input, final java.lang.CharSequence prefix) {\n    if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        {\n            if ((input.length()) == 0) {\n                {\n                    if ((prefix.length()) > (input.length())) {\n                        return false;\n                    } \n                    for (int int = 0 ; i < (prefix.length()) ; i++) {\n                        if ((input.charAt(i)) != (prefix.charAt(i))) {\n                            return false;\n                        } \n                    }\n                    return true;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:264","type":"CtBinaryOperatorImpl","sourcecode":"n > 0"},"failures":[91,92,93,94],"tindex":"b3c26cc5-2e9f-11e6-93ec-57391a0bbdac","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:392","type":"CtMethodImpl","sourcecode":"private static int hPermOp(int a, final int n, final int m) {\n    if (a > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = ((a << (16 - n)) ^ a) & m;\n            a = (a ^ t) ^ (t >>> (16 - n));\n            return a;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"a"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:247","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[162],"tindex":"b3c26cc6-2e9f-11e6-93ec-ed4dfc859cd5","method":{"position":"org.apache.commons.codec.net.QCodec:246","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if (str == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return encode(str, getCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:134","type":"CtUnaryOperatorImpl","sourcecode":"!(obj instanceof java.lang.String)"},"failures":[],"tindex":"b3c26cc7-2e9f-11e6-93ec-37670b23c770","method":{"position":"org.apache.commons.codec.net.URLCodec:309","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof java.lang.String) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                {\n                    if (obj instanceof java.lang.String) {\n                        throw new org.apache.commons.codec.EncoderException();\n                    } else {\n                        {\n                            if (obj == null) {\n                                return null;\n                            } else if (obj instanceof byte[]) {\n                                return encode(((byte[])(obj)));\n                            } else if (obj instanceof java.lang.String) {\n                                return encode(((java.lang.String)(obj)));\n                            } else {\n                                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n                            }\n                        }\n                    }\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:208","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[163],"tindex":"b3c293d8-2e9f-11e6-93ec-cfb6a7689ba6","method":{"position":"org.apache.commons.codec.language.Nysiis:247","type":"CtMethodImpl","sourcecode":"public java.lang.String nysiis(java.lang.String str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n            if ((str.length()) == 0) {\n                return str;\n            } \n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"MCC\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"NN\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"C\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"FF\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"SSS\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"Y\");\n            str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"D\");\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(str.length());\n            key.append(str.charAt(0));\n            final char[] char[] = str.toCharArray();\n            final int int = chars.int;\n            for (int int = 1 ; i < len ; i++) {\n                final char char = i < (len - 1) ? chars[(i + 1)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char;\n                final char char = i < (len - 2) ? chars[(i + 2)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char;\n                final char[] char[] = org.apache.commons.codec.language.Nysiis.transcodeRemaining(chars[(i - 1)], chars[i], next, aNext);\n                java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.int);\n                if ((chars[i]) != (chars[(i - 1)])) {\n                    key.append(chars[i]);\n                } \n            }\n            if ((key.length()) > 1) {\n                char char = key.charAt(((key.length()) - 1));\n                if (lastChar == 'S') {\n                    key.deleteCharAt(((key.length()) - 1));\n                    lastChar = key.charAt(((key.length()) - 1));\n                } \n                if ((key.length()) > 2) {\n                    final char char = key.charAt(((key.length()) - 2));\n                    if ((last2Char == 'A') && (lastChar == 'Y')) {\n                        key.deleteCharAt(((key.length()) - 2));\n                    } \n                } \n                if (lastChar == 'A') {\n                    key.deleteCharAt(((key.length()) - 1));\n                } \n            } \n            final java.lang.String java.lang.String = key.toString();\n            return org.apache.commons.codec.language.Nysiis.this.isStrict() ? string.substring(0, java.lang.Math.min(org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.int, string.length())) : string;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[],"tindex":"b3c2bae9-2e9f-11e6-93ec-51db04f30862","method":{"position":"org.apache.commons.codec.binary.StringUtils:162","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUsAscii(final java.lang.String string) {\n    if (string == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (string == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtUnaryOperatorImpl","sourcecode":"!ignoreCase"},"failures":[],"tindex":"b3c2baea-2e9f-11e6-93ec-554d2432f8b5","method":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:49","type":"CtMethodImpl","sourcecode":"static boolean regionMatches(final java.lang.CharSequence cs, final boolean ignoreCase, final int thisStart, final java.lang.CharSequence substring, final int start, final int length) {\n    if (!ignoreCase) {\n        {\n            if ((cs instanceof java.lang.String) && (substring instanceof java.lang.String)) {\n                return ((java.lang.String)(cs)).regionMatches(ignoreCase, thisStart, ((java.lang.String)(substring)), start, length);\n            } \n            int int = thisStart;\n            int int = start;\n            int int = length;\n            while ((tmpLen--) > 0) {\n                char char = cs.charAt((index1++));\n                char char = substring.charAt((index2++));\n                if (c1 == c2) {\n                    continue;\n                } \n                if (!ignoreCase) {\n                    return false;\n                } \n                if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ignoreCase":"ignoreCase"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtBinaryOperatorImpl","sourcecode":"input == null"},"failures":[],"tindex":"b3c2e1fb-2e9f-11e6-93ec-057c7f9c5939","method":{"position":"org.apache.commons.codec.language.bm.Rule:198","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"b3c2e1fc-2e9f-11e6-93ec-879fb0f84545","method":{"position":"org.apache.commons.codec.digest.HmacUtils:444","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha256(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key), valueToDigest).doFinal();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:208","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[164],"tindex":"b3c2e1fd-2e9f-11e6-93ec-61c9e1992fe0","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:429","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if (str == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str, getCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:69","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"b3c3090e-2e9f-11e6-93ec-6719a8dc009f","method":{"position":"org.apache.commons.codec.language.bm.Lang:202","type":"CtMethodImpl","sourcecode":"public java.lang.String guessLanguage(final java.lang.String text) {\n    if (text == null) {\n        {\n            if (text == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (text == null) {\n                        {\n                            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = guessLanguages(text);\n                            return ls.isSingleton() ? ls.getAny() : org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.String;\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"text"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[165],"tindex":"b3c3090f-2e9f-11e6-93ec-b38c678d9e42","method":{"position":"org.apache.commons.codec.net.BCodec:158","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String value) throws org.apache.commons.codec.EncoderException {\n    if (value == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (value == null) {\n                return null;\n            } \n            return encode(value, org.apache.commons.codec.net.BCodec.this.getCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:468","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[158],"tindex":"b3c30910-2e9f-11e6-93ec-05a5ec701671","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:467","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[166],"tindex":"b3c33021-2e9f-11e6-93ec-75d83b17d8cd","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if (source == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (source == null) {\n                return null;\n            } \n            return soundex(source, false)[0];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[167],"tindex":"b3c33022-2e9f-11e6-93ec-4f0d0daa9cfc","method":{"position":"org.apache.commons.codec.digest.HmacUtils:312","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha1(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"b3c33023-2e9f-11e6-93ec-4faa8c5f14d0","method":{"position":"org.apache.commons.codec.net.QCodec:153","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doEncoding(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                {\n                    if (bytes == null) {\n                        {\n                            if (bytes == null) {\n                                return null;\n                            } \n                            final byte[] byte[] = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet, bytes);\n                            if (org.apache.commons.codec.net.QCodec.this.boolean) {\n                                for (int int = 0 ; i < (data.int) ; i++) {\n                                    if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                                        data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n                                    } \n                                }\n                            } \n                            return data;\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")"},"failures":[65,66,67,58,61,62,42,46],"tindex":"b3c35734-2e9f-11e6-93ec-6782ec4702e8","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:568","type":"CtMethodImpl","sourcecode":"private int handleP(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        {\n            if ((charAt(value, (index + 1))) == 'H') {\n                result.append('F');\n                index += 2;\n            } else {\n                result.append('P');\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"P\", \"B\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:314","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.lang.String"},"failures":[],"tindex":"b3c35735-2e9f-11e6-93ec-d5557ded95a6","method":{"position":"org.apache.commons.codec.language.Metaphone:388","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (!(obj instanceof java.lang.String)) {\n        {\n            if (obj instanceof java.lang.String) {\n                {\n                    if (!(obj instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n                    } \n                    return metaphone(((java.lang.String)(obj)));\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:382","type":"CtInvocationImpl","sourcecode":"ph.startsWith(\"(\")"},"failures":[84,85,86,87,74,75,76,77,78,99,100,79,80,81,82,83,101,102],"tindex":"b3c35736-2e9f-11e6-93ec-9f904abdabc3","method":{"position":"org.apache.commons.codec.language.bm.Rule:381","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.codec.language.bm.Rule.PhonemeExpr parsePhonemeExpr(final java.lang.String ph) {\n    if (ph.startsWith(\"(\")) {\n        {\n            if (ph.startsWith(\"(\")) {\n                if (!(ph.endsWith(\")\"))) {\n                    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n                } \n                final java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme>();\n                final java.lang.String java.lang.String = ph.substring(1, ((ph.length()) - 1));\n                for (final java.lang.String java.lang.String : body.split(\"[|]\")) {\n                    phs.add(org.apache.commons.codec.language.bm.Rule.parsePhoneme(part));\n                }\n                if ((body.startsWith(\"|\")) || (body.endsWith(\"|\"))) {\n                    phs.add(new org.apache.commons.codec.language.bm.Rule.Phoneme(\"\" , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet));\n                } \n                return new org.apache.commons.codec.language.bm.Rule.PhonemeList(phs);\n            } else {\n                return org.apache.commons.codec.language.bm.Rule.parsePhoneme(ph);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"ph"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:244","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"b3c37e47-2e9f-11e6-93ec-bf07fd5df982","method":{"position":"org.apache.commons.codec.net.QCodec:207","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.nio.charset.Charset charset) throws org.apache.commons.codec.EncoderException {\n    if (str == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return encodeText(str, charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:270","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[65,66,61,62,42],"tindex":"b3c37e48-2e9f-11e6-93ec-fb284839f1b1","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:331","type":"CtMethodImpl","sourcecode":"private int handleCC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (index == 0) {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"H\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"HU\")))) {\n                if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n                    result.append(\"KS\");\n                } else {\n                    result.append('X');\n                }\n                index += 3;\n            } else {\n                result.append('K');\n                index += 2;\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"b3c3a559-2e9f-11e6-93ec-d5e789fbce41","method":{"position":"org.apache.commons.codec.net.URLCodec:193","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                {\n                    return org.apache.commons.codec.net.URLCodec.encodeUrl(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet, bytes);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[24,25,26,28,29,30,32,33,34,35,36,37,1],"tindex":"b3c3a55a-2e9f-11e6-93ec-f34014b79cb3","method":{"position":"org.apache.commons.codec.digest.HmacUtils:154","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getInitializedMac(final org.apache.commons.codec.digest.HmacAlgorithms algorithm, final byte[] key) {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:803","type":"CtBinaryOperatorImpl","sourcecode":"(!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))"},"failures":[],"tindex":"b3c3a55b-2e9f-11e6-93ec-89161172f2ed","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:550","type":"CtMethodImpl","sourcecode":"private int handleL(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n        {\n            if ((charAt(value, (index + 1))) == 'L') {\n                if (conditionL0(value, index)) {\n                    result.appendPrimary('L');\n                } else {\n                    result.append('L');\n                }\n                index += 2;\n            } else {\n                index++;\n                result.append('L');\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:119","type":"CtBinaryOperatorImpl","sourcecode":"ascii instanceof byte[]"},"failures":[5],"tindex":"b3c3cc6c-2e9f-11e6-93ec-d92fc22cf8e8","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:115","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object ascii) throws org.apache.commons.codec.DecoderException {\n    if (ascii instanceof java.lang.String) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (ascii instanceof byte[]) {\n                {\n                    if (ascii == null) {\n                        return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n                    } \n                    if (ascii instanceof byte[]) {\n                        return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)));\n                    } \n                    if (ascii instanceof char[]) {\n                        return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)));\n                    } \n                    if (ascii instanceof java.lang.String) {\n                        return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n                    } \n                    throw new org.apache.commons.codec.DecoderException(\"argument not a byte array\");\n                }\n            } else {\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"ascii"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:224","type":"CtBinaryOperatorImpl","sourcecode":"value instanceof java.lang.String"},"failures":[90],"tindex":"b3c3cc6d-2e9f-11e6-93ec-496544bc1683","method":{"position":"org.apache.commons.codec.net.BCodec:197","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object value) throws org.apache.commons.codec.EncoderException {\n    if (value instanceof java.lang.String) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (value == null) {\n                return null;\n            } else if (value instanceof java.lang.String) {\n                return encode(((java.lang.String)(value)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:69","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"b3c3cc6e-2e9f-11e6-93ec-a7dbe0baebd4","method":{"position":"org.apache.commons.codec.language.bm.Lang:202","type":"CtMethodImpl","sourcecode":"public java.lang.String guessLanguage(final java.lang.String text) {\n    if (text == null) {\n        {\n            if (text == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (text == null) {\n                        {\n                            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = guessLanguages(text);\n                            return ls.isSingleton() ? ls.getAny() : org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.String;\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"text"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"b3c3f37f-2e9f-11e6-93ec-5f5948ebcd4c","method":{"position":"org.apache.commons.codec.net.QCodec:153","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doEncoding(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                {\n                    if (bytes == null) {\n                        {\n                            if (bytes == null) {\n                                return null;\n                            } \n                            final byte[] byte[] = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet, bytes);\n                            if (org.apache.commons.codec.net.QCodec.this.boolean) {\n                                for (int int = 0 ; i < (data.int) ; i++) {\n                                    if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                                        data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n                                    } \n                                }\n                            } \n                            return data;\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:379","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.lang.String"},"failures":[],"tindex":"b3c3f380-2e9f-11e6-93ec-5dcf64d43e13","method":{"position":"org.apache.commons.codec.net.URLCodec:309","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof java.lang.String) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                {\n                    if (obj instanceof java.lang.String) {\n                        throw new org.apache.commons.codec.EncoderException();\n                    } else {\n                        {\n                            if (obj == null) {\n                                return null;\n                            } else if (obj instanceof byte[]) {\n                                return encode(((byte[])(obj)));\n                            } else if (obj instanceof java.lang.String) {\n                                return encode(((java.lang.String)(obj)));\n                            } else {\n                                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n                            }\n                        }\n                    }\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[168],"tindex":"b3c41a91-2e9f-11e6-93ec-d5888cf4ded4","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:82","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] raw) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(raw);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")"},"failures":[],"tindex":"b3c41a92-2e9f-11e6-93ec-772b5ad29e16","method":{"position":"org.apache.commons.codec.net.BCodec:119","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String value, final java.nio.charset.Charset charset) throws org.apache.commons.codec.EncoderException {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return null;\n                    } \n                    return encodeText(value, charset);\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[65,66,61,62,42],"tindex":"b3c41a93-2e9f-11e6-93ec-1979e52f9014","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:408","type":"CtMethodImpl","sourcecode":"private int handleG(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (value == null) {\n        {\n            if ((charAt(value, (index + 1))) == 'H') {\n                index = handleGH(value, result, index);\n            } else if ((charAt(value, (index + 1))) == 'N') {\n                if (((index == 1) && (isVowel(charAt(value, 0)))) && (!slavoGermanic)) {\n                    result.append(\"KN\", \"N\");\n                } else if (((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"EY\"))) && ((charAt(value, (index + 1))) != 'Y')) && (!slavoGermanic)) {\n                    result.append(\"N\", \"KN\");\n                } else {\n                    result.append(\"KN\");\n                }\n                index = index + 2;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"LI\")) && (!slavoGermanic)) {\n                result.append(\"KL\", \"L\");\n                index += 2;\n            } else if ((index == 0) && (((charAt(value, (index + 1))) == 'Y') || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])))) {\n                result.append('K', 'J');\n                index += 2;\n            } else if (((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ER\")) || ((charAt(value, (index + 1))) == 'Y')) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\")))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"E\", \"I\")))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"RGY\", \"OGY\")))) {\n                result.append('K', 'J');\n                index += 2;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"E\", \"I\", \"Y\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"AGGI\", \"OGGI\"))) {\n                if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ET\"))) {\n                    result.append('K');\n                } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")) {\n                    result.append('J');\n                } else {\n                    result.append('J', 'K');\n                }\n                index += 2;\n            } else if ((charAt(value, (index + 1))) == 'G') {\n                index += 2;\n                result.append('K');\n            } else {\n                index++;\n                result.append('K');\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:125","type":"CtBinaryOperatorImpl","sourcecode":"ascii instanceof java.lang.String"},"failures":[],"tindex":"b3c441a4-2e9f-11e6-93ec-5de3e0f6b965","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:115","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object ascii) throws org.apache.commons.codec.DecoderException {\n    if (ascii instanceof java.lang.String) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (ascii instanceof byte[]) {\n                {\n                    if (ascii == null) {\n                        return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n                    } \n                    if (ascii instanceof byte[]) {\n                        return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)));\n                    } \n                    if (ascii instanceof char[]) {\n                        return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)));\n                    } \n                    if (ascii instanceof java.lang.String) {\n                        return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n                    } \n                    throw new org.apache.commons.codec.DecoderException(\"argument not a byte array\");\n                }\n            } else {\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"ascii"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"b3c468b5-2e9f-11e6-93ec-5fd1eb37c34e","method":{"position":"org.apache.commons.codec.binary.StringUtils:366","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf16Le(final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[169,165],"tindex":"b3c468b6-2e9f-11e6-93ec-fda1c1ffb096","method":{"position":"org.apache.commons.codec.net.BCodec:176","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String value) throws org.apache.commons.codec.DecoderException {\n    if (value == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (value == null) {\n                return null;\n            } \n            try {\n                return org.apache.commons.codec.net.BCodec.this.decodeText(value);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[84,85,86,87,74,75,76,77,78,79,80,81,82,83,101,102],"tindex":"b3c468b7-2e9f-11e6-93ec-6317631e24f3","method":{"position":"org.apache.commons.codec.language.bm.Lang:91","type":"CtMethodImpl","sourcecode":"public boolean matches(final java.lang.String txt) {\n    if ((txt == null) || ((txt.length()) == 0)) {\n        {\n            return org.apache.commons.codec.language.bm.Lang.LangRule.this.java.util.regex.Pattern.matcher(txt).find();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"txt"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[],"tindex":"b3c468b8-2e9f-11e6-93ec-69ac6b9ba2e4","method":{"position":"org.apache.commons.codec.language.bm.Rule:275","type":"CtMethodImpl","sourcecode":"private static boolean endsWith(final java.lang.CharSequence input, final java.lang.CharSequence suffix) {\n    if ((input.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((suffix.length()) > (suffix.length())) {\n                {\n                    if ((suffix.length()) > (input.length())) {\n                        return false;\n                    } \n                    for (int int = (input.length()) - 1, int int = (suffix.length()) - 1 ; j >= 0 ; i-- , j--) {\n                        if ((input.charAt(i)) != (suffix.charAt(j))) {\n                            return false;\n                        } \n                    }\n                    return true;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtBinaryOperatorImpl","sourcecode":"arrayOctet == null"},"failures":[],"tindex":"b3c48fc9-2e9f-11e6-93ec-2591bba74761","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:463","type":"CtMethodImpl","sourcecode":"public boolean isInAlphabet(final byte[] arrayOctet, final boolean allowWSPad) {\n    if (arrayOctet == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (int int = 0 ; i < (arrayOctet.int) ; i++) {\n                if ((!(isInAlphabet(arrayOctet[i]))) && ((!allowWSPad) || (((arrayOctet[i]) != (byte)) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayOctet":"arrayOctet"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:203","type":"CtUnaryOperatorImpl","sourcecode":"!(obj instanceof java.lang.String)"},"failures":[],"tindex":"b3c48fca-2e9f-11e6-93ec-17668fe357f7","method":{"position":"org.apache.commons.codec.language.Metaphone:388","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (!(obj instanceof java.lang.String)) {\n        {\n            if (obj instanceof java.lang.String) {\n                {\n                    if (!(obj instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n                    } \n                    return metaphone(((java.lang.String)(obj)));\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[29,32],"tindex":"b3c48fcb-2e9f-11e6-93ec-c52023bb970b","method":{"position":"org.apache.commons.codec.digest.HmacUtils:116","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha384(final byte[] key) {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[170,171,172,173,174,175,176],"tindex":"b3c4b6dc-2e9f-11e6-93ec-8d664b20aa58","method":{"position":"org.apache.commons.codec.language.Caverphone1:45","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if (source == null) {\n        {\n            java.lang.String java.lang.String = source;\n            if ((txt == null) || ((txt.length()) == 0)) {\n                return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String;\n            } \n            txt = txt.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            txt = txt.replaceAll(\"[^a-z]\", \"\");\n            txt = txt.replaceAll(\"^cough\", \"cou2f\");\n            txt = txt.replaceAll(\"^rough\", \"rou2f\");\n            txt = txt.replaceAll(\"^tough\", \"tou2f\");\n            txt = txt.replaceAll(\"^enough\", \"enou2f\");\n            txt = txt.replaceAll(\"^gn\", \"2n\");\n            txt = txt.replaceAll(\"mb$\", \"m2\");\n            txt = txt.replaceAll(\"cq\", \"2q\");\n            txt = txt.replaceAll(\"ci\", \"si\");\n            txt = txt.replaceAll(\"ce\", \"se\");\n            txt = txt.replaceAll(\"cy\", \"sy\");\n            txt = txt.replaceAll(\"tch\", \"2ch\");\n            txt = txt.replaceAll(\"c\", \"k\");\n            txt = txt.replaceAll(\"q\", \"k\");\n            txt = txt.replaceAll(\"x\", \"k\");\n            txt = txt.replaceAll(\"v\", \"f\");\n            txt = txt.replaceAll(\"dg\", \"2g\");\n            txt = txt.replaceAll(\"tio\", \"sio\");\n            txt = txt.replaceAll(\"tia\", \"sia\");\n            txt = txt.replaceAll(\"d\", \"t\");\n            txt = txt.replaceAll(\"ph\", \"fh\");\n            txt = txt.replaceAll(\"b\", \"p\");\n            txt = txt.replaceAll(\"sh\", \"s2\");\n            txt = txt.replaceAll(\"z\", \"s\");\n            txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n            txt = txt.replaceAll(\"[aeiou]\", \"3\");\n            txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n            txt = txt.replaceAll(\"gh\", \"22\");\n            txt = txt.replaceAll(\"g\", \"k\");\n            txt = txt.replaceAll(\"s+\", \"S\");\n            txt = txt.replaceAll(\"t+\", \"T\");\n            txt = txt.replaceAll(\"p+\", \"P\");\n            txt = txt.replaceAll(\"k+\", \"K\");\n            txt = txt.replaceAll(\"f+\", \"F\");\n            txt = txt.replaceAll(\"m+\", \"M\");\n            txt = txt.replaceAll(\"n+\", \"N\");\n            txt = txt.replaceAll(\"w3\", \"W3\");\n            txt = txt.replaceAll(\"wy\", \"Wy\");\n            txt = txt.replaceAll(\"wh3\", \"Wh3\");\n            txt = txt.replaceAll(\"why\", \"Why\");\n            txt = txt.replaceAll(\"w\", \"2\");\n            txt = txt.replaceAll(\"^h\", \"A\");\n            txt = txt.replaceAll(\"h\", \"2\");\n            txt = txt.replaceAll(\"r3\", \"R3\");\n            txt = txt.replaceAll(\"ry\", \"Ry\");\n            txt = txt.replaceAll(\"r\", \"2\");\n            txt = txt.replaceAll(\"l3\", \"L3\");\n            txt = txt.replaceAll(\"ly\", \"Ly\");\n            txt = txt.replaceAll(\"l\", \"2\");\n            txt = txt.replaceAll(\"j\", \"y\");\n            txt = txt.replaceAll(\"y3\", \"Y3\");\n            txt = txt.replaceAll(\"y\", \"2\");\n            txt = txt.replaceAll(\"2\", \"\");\n            txt = txt.replaceAll(\"3\", \"\");\n            txt = txt + (org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String);\n            return txt.substring(0, org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String.length());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[65,66,39,40,67,58,41,59,68,60,61,62,42,63,64,44,45,46],"tindex":"b3c4dded-2e9f-11e6-93ec-ab3631087789","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:86","type":"CtMethodImpl","sourcecode":"public java.lang.String doubleMetaphone(java.lang.String value, final boolean alternate) {\n    if (value == null) {\n        {\n            value = cleanInput(value);\n            if (value == null) {\n                return null;\n            } \n            final boolean boolean = isSlavoGermanic(value);\n            int int = isSilentStart(value) ? 1 : 0;\n            final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult = new org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult(org.apache.commons.codec.language.DoubleMetaphone.this.getMaxCodeLen());\n            while ((!(result.isComplete())) && (index <= ((value.length()) - 1))) {\n                switch (value.charAt(index)) {\n                    case 'A' :\n                    case 'E' :\n                    case 'I' :\n                    case 'O' :\n                    case 'U' :\n                    case 'Y' :\n                        index = handleAEIOUY(result, index);\n                        break;\n                    case 'B' :\n                        result.append('P');\n                        index = (charAt(value, (index + 1))) == 'B' ? index + 2 : index + 1;\n                        break;\n                    case '\\u00c7' :\n                        result.append('S');\n                        index++;\n                        break;\n                    case 'C' :\n                        index = handleC(value, result, index);\n                        break;\n                    case 'D' :\n                        index = handleD(value, result, index);\n                        break;\n                    case 'F' :\n                        result.append('F');\n                        index = (charAt(value, (index + 1))) == 'F' ? index + 2 : index + 1;\n                        break;\n                    case 'G' :\n                        index = handleG(value, result, index, slavoGermanic);\n                        break;\n                    case 'H' :\n                        index = handleH(value, result, index);\n                        break;\n                    case 'J' :\n                        index = handleJ(value, result, index, slavoGermanic);\n                        break;\n                    case 'K' :\n                        result.append('K');\n                        index = (charAt(value, (index + 1))) == 'K' ? index + 2 : index + 1;\n                        break;\n                    case 'L' :\n                        index = handleL(value, result, index);\n                        break;\n                    case 'M' :\n                        result.append('M');\n                        index = conditionM0(value, index) ? index + 2 : index + 1;\n                        break;\n                    case 'N' :\n                        result.append('N');\n                        index = (charAt(value, (index + 1))) == 'N' ? index + 2 : index + 1;\n                        break;\n                    case '\\u00d1' :\n                        result.append('N');\n                        index++;\n                        break;\n                    case 'P' :\n                        index = handleP(value, result, index);\n                        break;\n                    case 'Q' :\n                        result.append('K');\n                        index = (charAt(value, (index + 1))) == 'Q' ? index + 2 : index + 1;\n                        break;\n                    case 'R' :\n                        index = handleR(value, result, index, slavoGermanic);\n                        break;\n                    case 'S' :\n                        index = handleS(value, result, index, slavoGermanic);\n                        break;\n                    case 'T' :\n                        index = handleT(value, result, index);\n                        break;\n                    case 'V' :\n                        result.append('F');\n                        index = (charAt(value, (index + 1))) == 'V' ? index + 2 : index + 1;\n                        break;\n                    case 'W' :\n                        index = handleW(value, result, index);\n                        break;\n                    case 'X' :\n                        index = handleX(value, result, index);\n                        break;\n                    case 'Z' :\n                        index = handleZ(value, result, index, slavoGermanic);\n                        break;\n                    default :\n                        index++;\n                        break;\n                }\n            }\n            return alternate ? result.getAlternate() : result.getPrimary();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:265","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[103,177,104,105,106,107,108,109,110,111,112,113,114,178,115,116,179,180,117,118,119,120,181,121,182],"tindex":"b3c504fe-2e9f-11e6-93ec-7fafcaa05210","method":{"position":"org.apache.commons.codec.language.Soundex:258","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n            if ((str.length()) == 0) {\n                return str;\n            } \n            final char[] char[] = new char[]{ '0' , '0' , '0' , '0' };\n            char char;\n            char char;\n            int int = 1;\n            int int = 1;\n            out[0] = str.charAt(0);\n            last = getMappingCode(str, 0);\n            while ((incount < (str.length())) && (count < (out.int))) {\n                mapped = getMappingCode(str, (incount++));\n                if (mapped != 0) {\n                    if ((mapped != '0') && (mapped != last)) {\n                        out[(count++)] = mapped;\n                    } \n                    last = mapped;\n                } \n            }\n            return new java.lang.String(out);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")"},"failures":[65,66,42],"tindex":"b3c52c0f-2e9f-11e6-93ec-4df01d5f92d4","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:843","type":"CtMethodImpl","sourcecode":"private boolean conditionM0(final java.lang.String value, final int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((charAt(value, (index + 1))) == 'M') {\n                return true;\n            } \n            return (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"UMB\")) && (((index + 1) == ((value.length()) - 1)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"ER\")));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":20,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":50,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":116,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":232,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":204,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":2,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":41,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull":104,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":202,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":227,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":117,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":37,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":47,"org.apache.commons.codec.net.URLCodecTest.testDecodeStringWithNull":92,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":137,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NullValue_ReturnNullSuccessfully":106,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":168,"org.apache.commons.codec.net.QCodecTest.testDecodeStringWithNull":252,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":52,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":64,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":72,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":238,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":80,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":79,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":178,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":179,"org.apache.commons.codec.language.NysiisTest.testCap":205,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":183,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":91,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":78,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":180,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":36,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":90,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":181,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":82,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":162,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":245,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":129,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":249,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":193,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":86,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":95,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":244,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail":59,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":173,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":40,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":115,"org.apache.commons.codec.language.MetaphoneTest.testEncodeEmpty":96,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull":105,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8":60,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":68,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":233,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":17,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":18,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":201,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":45,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":132,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":234,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":119,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":223,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":198,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":161,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":113,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":187,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":16,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":102,"org.apache.commons.codec.language.NysiisTest.testDropBy":218,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":84,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":231,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":157,"org.apache.commons.codec.binary.Base64Test.testUUID":176,"org.apache.commons.codec.binary.Base64Test.testSingletons":192,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":229,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":165,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":155,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":196,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":130,"org.apache.commons.codec.binary.Base64Test.testPairs":175,"org.apache.commons.codec.binary.Base64Test.testConstructors":69,"org.apache.commons.codec.language.NysiisTest.testRule2":210,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":164,"org.apache.commons.codec.language.NysiisTest.testRule1":209,"org.apache.commons.codec.language.NysiisTest.testRule7":213,"org.apache.commons.codec.language.NysiisTest.testRule6":212,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":240,"org.apache.commons.codec.language.NysiisTest.testRule5":211,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":230,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":46,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject":13,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":147,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":150,"org.apache.commons.codec.language.NysiisTest.testBran":214,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":221,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":144,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":134,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":81,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":224,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":22,"org.apache.commons.codec.language.SoundexTest.testEncodeNull":136,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":190,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull":248,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":44,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":110,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":154,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":191,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":33,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":83,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":34,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":170,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":61,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":62,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":126,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":111,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullKey":98,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":3,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert":42,"org.apache.commons.codec.language.NysiisTest.testDad":206,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":76,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":138,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":112,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeStringWithNull":251,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":203,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":30,"org.apache.commons.codec.language.NysiisTest.testDan":207,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105":128,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":127,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail":99,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":26,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":243,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":28,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":109,"org.apache.commons.codec.binary.HexTest.testCustomCharset":149,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":169,"org.apache.commons.codec.language.NysiisTest.testSnat":216,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":235,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":6,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":5,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":57,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":171,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":24,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":77,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":123,"org.apache.commons.codec.binary.Base64Test.testTriplets":172,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":158,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":246,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":9,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":8,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":10,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":120,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":100,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":184,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":122,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":74,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":7,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":174,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":108,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":139,"org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence":228,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":48,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":27,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":250,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":118,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":85,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":236,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":237,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":151,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":188,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":94,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":124,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":19,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":197,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":145,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString":12,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":93,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":159,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":253,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":21,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":55,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":75,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":56,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero":51,"org.apache.commons.codec.language.MetaphoneTest.testWhy":32,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":107,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":167,"org.apache.commons.codec.language.NysiisTest.testTranan":220,"org.apache.commons.codec.language.NysiisTest.testFal":208,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":89,"org.apache.commons.codec.language.NysiisTest.testSnad":215,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":87,"org.apache.commons.codec.digest.HmacUtilsTest.testNullKey":103,"org.apache.commons.codec.language.MetaphoneTest.testTCH":31,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":114,"org.apache.commons.codec.language.MetaphoneTest.testLocaleIndependence":97,"org.apache.commons.codec.language.NysiisTest.testLocaleIndependence":222,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":195,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars":11,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":35,"org.apache.commons.codec.binary.HexTest.testDencodeEmpty":148,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":131,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":1,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":39,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":73,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":38,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":182,"org.apache.commons.codec.binary.Base64Test.testBase64":71,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":4,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":15,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":160,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":185,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":66,"org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence":225,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":142,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":141,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":239,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":49,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":65,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":199,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":125,"org.apache.commons.codec.binary.Base64Test.testCodec112":189,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray":146,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":140,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":43,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":156,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay":58,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":67,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":217,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":163,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":133,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":53,"org.apache.commons.codec.binary.Base64Test.testCodec68":194,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":29,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":121,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":226,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be":247,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":200,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail":101,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":152,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":242,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":63,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":143,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":166,"org.apache.commons.codec.language.NysiisTest.testOthers":219,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":70,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":54,"org.apache.commons.codec.language.SoundexTest.testDifference":135,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":25,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":88,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":241,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":153,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":0,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":14,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":186,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":177,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16":23},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[0,1,2,3,4,5,6,7,8,9,10],"tindex":"31d1fc95-2ecc-11e6-9d73-3f8e720fd10b","method":{"position":"org.apache.commons.codec.language.bm.Rule:593","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if ((input.length()) == 0) {\n        {\n            final java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern.matcher(input);\n            return matcher.find();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"31d2bfe6-2ecc-11e6-9d73-5772d63c38a2","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:968","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.String value) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    appendPrimary(value);\n                    appendAlternate(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[11,12,13],"tindex":"31d2e6f7-2ecc-11e6-9d73-71a12ae49560","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:268","type":"CtMethodImpl","sourcecode":"public static char[] toAsciiChars(final byte[] raw) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.char[];\n            } \n            final char[] char[] = new char[(raw.int) << 3];\n            for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n                for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                    if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n                        l_ascii[(jj - bits)] = '0';\n                    } else {\n                        l_ascii[(jj - bits)] = '1';\n                    }\n                }\n            }\n            return l_ascii;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:422","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"LI\")) && (!slavoGermanic)"},"failures":[14,15,16,17,18,19,20,21],"tindex":"31d30e08-2ecc-11e6-9d73-493aac2d9f39","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:514","type":"CtMethodImpl","sourcecode":"private int handleJ(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n                {\n                    if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"LI\")) && (!slavoGermanic)) {\n                        {\n                            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n                                if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n                                    result.append('H');\n                                } else {\n                                    result.append('J', 'H');\n                                }\n                                index++;\n                            } else {\n                                if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n                                    result.append('J', 'A');\n                                } else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n                                    result.append('J', 'H');\n                                } else if (index == ((value.length()) - 1)) {\n                                    result.append('J', ' ');\n                                } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n                                    result.append('J');\n                                } \n                                if ((charAt(value, (index + 1))) == 'J') {\n                                    index += 2;\n                                } else {\n                                    index++;\n                                }\n                            }\n                            return index;\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","slavoGermanic":"slavoGermanic","value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:265","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"31d33519-2ecc-11e6-9d73-c79a851fa106","method":{"position":"org.apache.commons.codec.language.bm.Rule:124","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Rule.Phoneme append(final java.lang.CharSequence str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.append(str);\n            return org.apache.commons.codec.language.bm.Rule.Phoneme.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[22],"tindex":"31d35c2a-2ecc-11e6-9d73-c3d49ed3017a","method":{"position":"org.apache.commons.codec.digest.HmacUtils:601","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha384Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (key == null) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest));\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:450","type":"CtFieldReadImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.this.concat"},"failures":[],"tindex":"31d35c2b-2ecc-11e6-9d73-5dde4c2595ff","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:133","type":"CtMethodImpl","sourcecode":"public void setConcat(final boolean concat) {\n    if (concat) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , concat , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"concat":"concat"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[0,1,3,4,5,6,7,8,9,10],"tindex":"31d3833c-2ecc-11e6-9d73-cf9bf0e2d529","method":{"position":"org.apache.commons.codec.language.bm.Rule:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if ((input.length()) == 0) {\n        {\n            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:395","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")"},"failures":[],"tindex":"31d3aa4d-2ecc-11e6-9d73-33b66519c9a1","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:647","type":"CtMethodImpl","sourcecode":"private int handleSC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((charAt(value, (index + 2))) == 'H') {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n                        result.append(\"X\", \"SK\");\n                    } else {\n                        result.append(\"SK\");\n                    }\n                } else {\n                    if (((index == 0) && (!(isVowel(charAt(value, 3))))) && ((charAt(value, 3)) != 'W')) {\n                        result.append('X', 'S');\n                    } else {\n                        result.append('X');\n                    }\n                }\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n                result.append('S');\n            } else {\n                result.append(\"SK\");\n            }\n            return index + 3;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[23],"tindex":"31d3d15e-2ecc-11e6-9d73-5b17304d1981","method":{"position":"org.apache.commons.codec.binary.StringUtils:180","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16(final java.lang.String string) {\n    if (string == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")"},"failures":[14,15,16,24,25,17,18,19,20,26,21],"tindex":"31d3d15f-2ecc-11e6-9d73-55689808605c","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:915","type":"CtMethodImpl","sourcecode":"protected static boolean contains(final java.lang.String value, final int start, final int length, final java.lang.String... criteria) {\n    if ((length >= 0) && ((start + length) <= (value.length()))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = false;\n                    if ((start >= 0) && ((start + length) <= (value.length()))) {\n                        final java.lang.String java.lang.String = value.substring(start, (start + length));\n                        for (final java.lang.String java.lang.String : criteria) {\n                            if (target.equals(element)) {\n                                result = true;\n                                break;\n                            } \n                        }\n                    } \n                    return result;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"31d3f870-2ecc-11e6-9d73-650f43d5adc5","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:739","type":"CtMethodImpl","sourcecode":"private int handleX(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index == 0) {\n                result.append('S');\n                index++;\n            } else {\n                if (!((index == ((value.length()) - 1)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 3, \"IAU\", \"EAU\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AU\", \"OU\"))))) {\n                    result.append(\"KS\");\n                } \n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[27,28],"tindex":"31d41f81-2ecc-11e6-9d73-b3bb8bc496b3","method":{"position":"org.apache.commons.codec.digest.HmacUtils:387","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha1Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"31d46da2-2ecc-11e6-9d73-53d76e5fae58","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:462","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(final java.lang.String source) {\n    if (source == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.String[] java.lang.String[] = soundex(source, true);\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            for (final java.lang.String java.lang.String : branches) {\n                sb.append(branch);\n                if ((++index) < (branches.int)) {\n                    sb.append('|');\n                } \n            }\n            return sb.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:801","type":"CtBinaryOperatorImpl","sourcecode":"index != 0"},"failures":[29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"tindex":"31d46da3-2ecc-11e6-9d73-4104bffa7093","method":{"position":"org.apache.commons.codec.language.Metaphone:342","type":"CtMethodImpl","sourcecode":"private boolean isPreviousChar(final java.lang.StringBuilder string, final int index, final char c) {\n    if (index != 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            if ((index > 0) && (index < (string.length()))) {\n                matches = (string.charAt((index - 1))) == c;\n            } \n            return matches;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:468","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"31d46da4-2ecc-11e6-9d73-4b463d6fe060","method":{"position":"org.apache.commons.codec.net.QCodec:225","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.lang.String charset) throws org.apache.commons.codec.EncoderException {\n    if ((charset == null) || ((str.length()) == 0)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (charset == null) {\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (str == null) {\n                        {\n                            if (str == null) {\n                                return null;\n                            } \n                            try {\n                                return encodeText(str, charset);\n                            } catch (final java.io.UnsupportedEncodingException e) {\n                                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n                            }\n                        }\n                    } else {\n                        throw new org.apache.commons.codec.EncoderException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")"},"failures":[],"tindex":"31d494b5-2ecc-11e6-9d73-01e10e4513c5","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:968","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.String value) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    appendPrimary(value);\n                    appendAlternate(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[59],"tindex":"31d494b6-2ecc-11e6-9d73-2b77c7bf5d20","method":{"position":"org.apache.commons.codec.digest.HmacUtils:419","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha256(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"tindex":"31d494b7-2ecc-11e6-9d73-0fcbfa41595d","method":{"position":"org.apache.commons.codec.binary.StringUtils:382","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf8(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.newString(bytes, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:386","type":"CtBinaryOperatorImpl","sourcecode":"chr == 'L'"},"failures":[78,79,80,81,82,83,84,85,86,87],"tindex":"31d4bbc8-2ecc-11e6-9d73-f5384c5e0a5e","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:234","type":"CtMethodImpl","sourcecode":"public void addRight(final char chr) {\n    if (chr == 'L') {\n        {\n            char[][int] = chr;\n            (int)++;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chr":"chr"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtInvocationImpl","sourcecode":"charset.equals(\"\")"},"failures":[88,89,90,91,92,93,94],"tindex":"31d4bbc9-2ecc-11e6-9d73-f9b7934e24a5","method":{"position":"org.apache.commons.codec.net.URLCodec:269","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if (charset == null) {\n        {\n            if (charset.equals(\"\")) {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n                }\n            } else {\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    } else {\n        throw new java.io.UnsupportedEncodingException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"charset"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:153","type":"CtBinaryOperatorImpl","sourcecode":"ascii == null"},"failures":[95],"tindex":"31d4e2da-2ecc-11e6-9d73-a3b960f0f4a1","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:152","type":"CtMethodImpl","sourcecode":"public byte[] toByteArray(final java.lang.String ascii) {\n    if (ascii == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (ascii == null) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii.toCharArray());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"ascii"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,96,97],"tindex":"31d4e2db-2ecc-11e6-9d73-9f05b9bf58f9","method":{"position":"org.apache.commons.codec.language.Metaphone:92","type":"CtMethodImpl","sourcecode":"public java.lang.String metaphone(final java.lang.String txt) {\n    if ((txt == null) || ((txt.length()) == 0)) {\n        {\n            boolean boolean = false;\n            int int;\n            if ((txt == null) || ((txtLength = txt.length()) == 0)) {\n                return \"\";\n            } \n            if (txtLength == 1) {\n                return txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            } \n            final char[] char[] = txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale).toCharArray();\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40);\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10);\n            switch (inwd[0]) {\n                case 'K' :\n                case 'G' :\n                case 'P' :\n                    if ((inwd[1]) == 'N') {\n                        local.append(inwd, 1, ((inwd.int) - 1));\n                    } else {\n                        local.append(inwd);\n                    }\n                    break;\n                case 'A' :\n                    if ((inwd[1]) == 'E') {\n                        local.append(inwd, 1, ((inwd.int) - 1));\n                    } else {\n                        local.append(inwd);\n                    }\n                    break;\n                case 'W' :\n                    if ((inwd[1]) == 'R') {\n                        local.append(inwd, 1, ((inwd.int) - 1));\n                        break;\n                    } \n                    if ((inwd[1]) == 'H') {\n                        local.append(inwd, 1, ((inwd.int) - 1));\n                        local.setCharAt(0, 'W');\n                    } else {\n                        local.append(inwd);\n                    }\n                    break;\n                case 'X' :\n                    inwd[0] = 'S';\n                    local.append(inwd);\n                    break;\n                default :\n                    local.append(inwd);\n            }\n            final int int = local.length();\n            int int = 0;\n            while (((code.length()) < (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) && (n < wdsz)) {\n                final char char = local.charAt(n);\n                if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n                    n++;\n                } else {\n                    switch (symb) {\n                        case 'A' :\n                        case 'E' :\n                        case 'I' :\n                        case 'O' :\n                        case 'U' :\n                            if (n == 0) {\n                                code.append(symb);\n                            } \n                            break;\n                        case 'B' :\n                            if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n                                break;\n                            } \n                            code.append(symb);\n                            break;\n                        case 'C' :\n                            if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                break;\n                            } \n                            if (regionMatch(local, n, \"CIA\")) {\n                                code.append('X');\n                                break;\n                            } \n                            if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                code.append('S');\n                                break;\n                            } \n                            if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n                                code.append('K');\n                                break;\n                            } \n                            if (isNextChar(local, n, 'H')) {\n                                if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                                    code.append('K');\n                                } else {\n                                    code.append('X');\n                                }\n                            } else {\n                                code.append('K');\n                            }\n                            break;\n                        case 'D' :\n                            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n                                code.append('J');\n                                n += 2;\n                            } else {\n                                code.append('T');\n                            }\n                            break;\n                        case 'G' :\n                            if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n                                break;\n                            } \n                            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n                                break;\n                            } \n                            if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n                                break;\n                            } \n                            if (isPreviousChar(local, n, 'G')) {\n                                hard = true;\n                            } else {\n                                hard = false;\n                            }\n                            if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n                                code.append('J');\n                            } else {\n                                code.append('K');\n                            }\n                            break;\n                        case 'H' :\n                            if (isLastChar(wdsz, n)) {\n                                break;\n                            } \n                            if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n                                break;\n                            } \n                            if (isVowel(local, (n + 1))) {\n                                code.append('H');\n                            } \n                            break;\n                        case 'F' :\n                        case 'J' :\n                        case 'L' :\n                        case 'M' :\n                        case 'N' :\n                        case 'R' :\n                            code.append(symb);\n                            break;\n                        case 'K' :\n                            if (n > 0) {\n                                if (!(isPreviousChar(local, n, 'C'))) {\n                                    code.append(symb);\n                                } \n                            } else {\n                                code.append(symb);\n                            }\n                            break;\n                        case 'P' :\n                            if (isNextChar(local, n, 'H')) {\n                                code.append('F');\n                            } else {\n                                code.append(symb);\n                            }\n                            break;\n                        case 'Q' :\n                            code.append('K');\n                            break;\n                        case 'S' :\n                            if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n                                code.append('X');\n                            } else {\n                                code.append('S');\n                            }\n                            break;\n                        case 'T' :\n                            if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n                                code.append('X');\n                                break;\n                            } \n                            if (regionMatch(local, n, \"TCH\")) {\n                                break;\n                            } \n                            if (regionMatch(local, n, \"TH\")) {\n                                code.append('0');\n                            } else {\n                                code.append('T');\n                            }\n                            break;\n                        case 'V' :\n                            code.append('F');\n                            break;\n                        case 'W' :\n                        case 'Y' :\n                            if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n                                code.append(symb);\n                            } \n                            break;\n                        case 'X' :\n                            code.append('K');\n                            code.append('S');\n                            break;\n                        case 'Z' :\n                            code.append('S');\n                            break;\n                        default :\n                            break;\n                    }\n                    n++;\n                }\n                if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n                    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n                } \n            }\n            return code.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"txt"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[59,98,99,100,101,102,103],"tindex":"31d530fc-2ecc-11e6-9d73-59d1cf399751","method":{"position":"org.apache.commons.codec.digest.HmacUtils:174","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getInitializedMac(final java.lang.String algorithm, final byte[] key) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key == null) {\n                throw new java.lang.IllegalArgumentException(\"Null key\");\n            } \n            try {\n                final javax.crypto.spec.SecretKeySpec javax.crypto.spec.SecretKeySpec = new javax.crypto.spec.SecretKeySpec(key , algorithm);\n                final javax.crypto.Mac javax.crypto.Mac = javax.crypto.Mac.getInstance(algorithm);\n                mac.init(keySpec);\n                return mac;\n            } catch (final java.security.NoSuchAlgorithmException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            } catch (final java.security.InvalidKeyException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[22],"tindex":"31d5580d-2ecc-11e6-9d73-4fc98a8e7c17","method":{"position":"org.apache.commons.codec.digest.HmacUtils:551","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha384(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key), valueToDigest).doFinal();\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.Soundex:150","type":"CtUnaryOperatorImpl","sourcecode":"!(obj instanceof java.lang.String)"},"failures":[],"tindex":"31d5580e-2ecc-11e6-9d73-978ddf6ee56d","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:133","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (!(obj instanceof java.lang.String)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n            } \n            return soundex(((java.lang.String)(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[104,105],"tindex":"31d5580f-2ecc-11e6-9d73-d37d727852d3","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:216","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String value) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return doubleMetaphone(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtBinaryOperatorImpl","sourcecode":"accentedWord == null"},"failures":[106],"tindex":"31d57f20-2ecc-11e6-9d73-755bc9d5a68f","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:351","type":"CtMethodImpl","sourcecode":"java.lang.String removeAccents(final java.lang.String accentedWord) {\n    if (accentedWord == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (accentedWord == null) {\n                return null;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            final int int = accentedWord.length();\n            for (int int = 0 ; i < n ; i++) {\n                final char char = accentedWord.charAt(i);\n                final int int = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.indexOf(c);\n                if (pos > (-1)) {\n                    sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(pos));\n                } else {\n                    sb.append(c);\n                }\n            }\n            return sb.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"accentedWord":"accentedWord"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.Base64:382","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[107,108,109,110,111,112,113,114,61,115,116,117,118,119,120,121,76,122,123,124,125,126,127,128,77,129,130,131,132,133,134],"tindex":"31d57f21-2ecc-11e6-9d73-630fdf6b69fd","method":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:128","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(final byte[] b, final int offset, final int len) throws java.io.IOException {\n    if (b == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (offset < 0) {\n                {\n                    if (b == null) {\n                        throw new java.lang.NullPointerException();\n                    } else if ((offset < 0) || (len < 0)) {\n                        throw new java.lang.IndexOutOfBoundsException();\n                    } else if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n                        throw new java.lang.IndexOutOfBoundsException();\n                    } else if (len == 0) {\n                        return 0;\n                    } else {\n                        int int = 0;\n                        while (readLen == 0) {\n                            if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n                                final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n                                final int int = java.io.InputStream.read(buf);\n                                if (boolean) {\n                                    org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n                                } else {\n                                    org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n                                }\n                            } \n                            readLen = org.apache.commons.codec.binary.BaseNCodec.readResults(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n                        }\n                        return readLen;\n                    }\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"offset"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:104","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"31d5a632-2ecc-11e6-9d73-6ff217610e81","method":{"position":"org.apache.commons.codec.language.bm.Lang:202","type":"CtMethodImpl","sourcecode":"public java.lang.String guessLanguage(final java.lang.String text) {\n    if (text == null) {\n        {\n            if (text == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = guessLanguages(text);\n                    return ls.isSingleton() ? ls.getAny() : org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.String;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"text"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:289","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"31d5a633-2ecc-11e6-9d73-797c228dd8c9","method":{"position":"org.apache.commons.codec.net.QCodec:225","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.lang.String charset) throws org.apache.commons.codec.EncoderException {\n    if ((charset == null) || ((str.length()) == 0)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (charset == null) {\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (str == null) {\n                        {\n                            if (str == null) {\n                                return null;\n                            } \n                            try {\n                                return encodeText(str, charset);\n                            } catch (final java.io.UnsupportedEncodingException e) {\n                                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n                            }\n                        }\n                    } else {\n                        throw new org.apache.commons.codec.EncoderException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"charset"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:602","type":"CtBinaryOperatorImpl","sourcecode":"(index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 5, \"SUGAR\"))"},"failures":[],"tindex":"31d5cd44-2ecc-11e6-9d73-0d56e2a938ce","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:816","type":"CtMethodImpl","sourcecode":"private boolean conditionCH1(final java.lang.String value, final int index) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 5, \"SUGAR\"))) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"T\", \"S\"))) || (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"A\", \"O\", \"U\", \"E\")) || (index == 0)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])) || ((index + 1) == ((value.length()) - 1))));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:607","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")"},"failures":[],"tindex":"31d5cd45-2ecc-11e6-9d73-3bd7933f4375","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:514","type":"CtMethodImpl","sourcecode":"private int handleJ(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n                {\n                    if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"LI\")) && (!slavoGermanic)) {\n                        {\n                            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n                                if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n                                    result.append('H');\n                                } else {\n                                    result.append('J', 'H');\n                                }\n                                index++;\n                            } else {\n                                if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n                                    result.append('J', 'A');\n                                } else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n                                    result.append('J', 'H');\n                                } else if (index == ((value.length()) - 1)) {\n                                    result.append('J', ' ');\n                                } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n                                    result.append('J');\n                                } \n                                if ((charAt(value, (index + 1))) == 'J') {\n                                    index += 2;\n                                } else {\n                                    index++;\n                                }\n                            }\n                            return index;\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:208","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[135,136],"tindex":"31d5f456-2ecc-11e6-9d73-d597668bbaf5","method":{"position":"org.apache.commons.codec.language.Soundex:166","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return soundex(str);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.Nysiis:211","type":"CtUnaryOperatorImpl","sourcecode":"!(obj instanceof java.lang.String)"},"failures":[137,138],"tindex":"31d5f457-2ecc-11e6-9d73-b99551e6fb7a","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:376","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj instanceof byte[]) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    if (obj instanceof byte[]) {\n                        return decode(((byte[])(obj)));\n                    } else if (obj instanceof java.lang.String) {\n                        return decode(((java.lang.String)(obj)));\n                    } else {\n                        throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:382","type":"CtInvocationImpl","sourcecode":"ph.startsWith(\"(\")"},"failures":[139,140,0,1,2,141,142,3,4,5,6,7,143,144,8,145,9,10],"tindex":"31d61b68-2ecc-11e6-9d73-bf4fc4af8cde","method":{"position":"org.apache.commons.codec.language.bm.Rule:365","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.codec.language.bm.Rule.Phoneme parsePhoneme(final java.lang.String ph) {\n    if (ph.startsWith(\"(\")) {\n        {\n            final int int = ph.indexOf(\"[\");\n            if (open >= 0) {\n                if (!(ph.endsWith(\"]\"))) {\n                    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n                } \n                final java.lang.String java.lang.String = ph.substring(0, open);\n                final java.lang.String java.lang.String = ph.substring((open + 1), ((ph.length()) - 1));\n                final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(in.split(\"[+]\")));\n                return new org.apache.commons.codec.language.bm.Rule.Phoneme(before , org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs));\n            } else {\n                return new org.apache.commons.codec.language.bm.Rule.Phoneme(ph , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"ph"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:385","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")"},"failures":[],"tindex":"31d61b69-2ecc-11e6-9d73-ed4cb537f9fa","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:514","type":"CtMethodImpl","sourcecode":"private int handleJ(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n                {\n                    if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"LI\")) && (!slavoGermanic)) {\n                        {\n                            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n                                if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n                                    result.append('H');\n                                } else {\n                                    result.append('J', 'H');\n                                }\n                                index++;\n                            } else {\n                                if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n                                    result.append('J', 'A');\n                                } else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n                                    result.append('J', 'H');\n                                } else if (index == ((value.length()) - 1)) {\n                                    result.append('J', ' ');\n                                } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n                                    result.append('J');\n                                } \n                                if ((charAt(value, (index + 1))) == 'J') {\n                                    index += 2;\n                                } else {\n                                    index++;\n                                }\n                            }\n                            return index;\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:528","type":"CtBinaryOperatorImpl","sourcecode":"obj == null"},"failures":[96],"tindex":"31d6427a-2ecc-11e6-9d73-8fd3a37c710f","method":{"position":"org.apache.commons.codec.language.Metaphone:388","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n            } \n            return metaphone(((java.lang.String)(obj)));\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[146],"tindex":"31d6427b-2ecc-11e6-9d73-734e52a471b6","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:140","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] ascii) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n        {\n            return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"ascii"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:339","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.lang.String"},"failures":[147],"tindex":"31d6427c-2ecc-11e6-9d73-551204ef2e26","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:412","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof java.lang.String) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\");\n            } \n            return encode(((java.lang.String)(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"31d6698d-2ecc-11e6-9d73-631818bc4d02","method":{"position":"org.apache.commons.codec.digest.HmacUtils:205","type":"CtMethodImpl","sourcecode":"public static byte[] hmacMd5(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacMd5(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"valueToDigest"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"31d6698e-2ecc-11e6-9d73-ef6f72e5cf3c","method":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:128","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(final byte[] b, final int offset, final int len) throws java.io.IOException {\n    if (b == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (offset < 0) {\n                {\n                    if (b == null) {\n                        throw new java.lang.NullPointerException();\n                    } else if ((offset < 0) || (len < 0)) {\n                        throw new java.lang.IndexOutOfBoundsException();\n                    } else if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n                        throw new java.lang.IndexOutOfBoundsException();\n                    } else if (len == 0) {\n                        return 0;\n                    } else {\n                        int int = 0;\n                        while (readLen == 0) {\n                            if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n                                final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n                                final int int = java.io.InputStream.read(buf);\n                                if (boolean) {\n                                    org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n                                } else {\n                                    org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n                                }\n                            } \n                            readLen = org.apache.commons.codec.binary.BaseNCodec.readResults(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n                        }\n                        return readLen;\n                    }\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:355","type":"CtBinaryOperatorImpl","sourcecode":"result >= 0"},"failures":[],"tindex":"31d6909f-2ecc-11e6-9d73-918c03f6cc02","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:676","type":"CtMethodImpl","sourcecode":"private int handleT(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (index == 0) {\n        {\n            if (index >= 0) {\n                {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"TION\")) {\n                        result.append('X');\n                        index += 3;\n                    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TIA\", \"TCH\")) {\n                        result.append('X');\n                        index += 3;\n                    } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"TH\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TTH\"))) {\n                        if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n                            result.append('T');\n                        } else {\n                            result.append('0', 'T');\n                        }\n                        index += 2;\n                    } else {\n                        result.append('T');\n                        index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"T\", \"D\") ? index + 2 : index + 1;\n                    }\n                    return index;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"index"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:286","type":"CtBinaryOperatorImpl","sourcecode":"obj == null"},"failures":[],"tindex":"31d690a0-2ecc-11e6-9d73-7fd4a334d72a","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:202","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\");\n            } \n            return doubleMetaphone(((java.lang.String)(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl","sourcecode":"((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))"},"failures":[],"tindex":"31d6b7b1-2ecc-11e6-9d73-5584b421382b","method":{"position":"org.apache.commons.codec.language.bm.Rule:519","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        {\n            return input.equals(content);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-2},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:406","type":"CtUnaryOperatorImpl","sourcecode":"!(object instanceof java.lang.String)"},"failures":[148,149,150,151],"tindex":"31d6b7b2-2ecc-11e6-9d73-875fc8f8061f","method":{"position":"org.apache.commons.codec.binary.Hex:249","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object object) throws org.apache.commons.codec.DecoderException {\n    if (!(object instanceof java.lang.String)) {\n        {\n            try {\n                final char[] char[] = object instanceof java.lang.String ? ((java.lang.String)(object)).toCharArray() : ((char[])(object));\n                return org.apache.commons.codec.binary.Hex.decodeHex(charArray);\n            } catch (final java.lang.ClassCastException e) {\n                throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:447","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")"},"failures":[14,15,24,17,18,19,20],"tindex":"31d6b7b3-2ecc-11e6-9d73-fbf6f44b63b3","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:550","type":"CtMethodImpl","sourcecode":"private int handleL(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n                {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ISL\", \"YSL\")) {\n                        {\n                            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")) {\n                                {\n                                    if ((charAt(value, (index + 1))) == 'L') {\n                                        if (conditionL0(value, index)) {\n                                            result.appendPrimary('L');\n                                        } else {\n                                            result.append('L');\n                                        }\n                                        index += 2;\n                                    } else {\n                                        index++;\n                                        result.append('L');\n                                    }\n                                    return index;\n                                }\n                            } else {\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[152,153,154],"tindex":"31d6dec4-2ecc-11e6-9d73-2108a9406de0","method":{"position":"org.apache.commons.codec.net.BCodec:158","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String value) throws org.apache.commons.codec.EncoderException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return null;\n            } \n            return encode(value, org.apache.commons.codec.net.BCodec.this.getCharset());\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")"},"failures":[104,155,105],"tindex":"31d6dec5-2ecc-11e6-9d73-8d4744cd05b3","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:86","type":"CtMethodImpl","sourcecode":"public java.lang.String doubleMetaphone(java.lang.String value, final boolean alternate) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            value = cleanInput(value);\n            if (value == null) {\n                return null;\n            } \n            final boolean boolean = isSlavoGermanic(value);\n            int int = isSilentStart(value) ? 1 : 0;\n            final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult = new org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult(org.apache.commons.codec.language.DoubleMetaphone.this.getMaxCodeLen());\n            while ((!(result.isComplete())) && (index <= ((value.length()) - 1))) {\n                switch (value.charAt(index)) {\n                    case 'A' :\n                    case 'E' :\n                    case 'I' :\n                    case 'O' :\n                    case 'U' :\n                    case 'Y' :\n                        index = handleAEIOUY(result, index);\n                        break;\n                    case 'B' :\n                        result.append('P');\n                        index = (charAt(value, (index + 1))) == 'B' ? index + 2 : index + 1;\n                        break;\n                    case '\\u00c7' :\n                        result.append('S');\n                        index++;\n                        break;\n                    case 'C' :\n                        index = handleC(value, result, index);\n                        break;\n                    case 'D' :\n                        index = handleD(value, result, index);\n                        break;\n                    case 'F' :\n                        result.append('F');\n                        index = (charAt(value, (index + 1))) == 'F' ? index + 2 : index + 1;\n                        break;\n                    case 'G' :\n                        index = handleG(value, result, index, slavoGermanic);\n                        break;\n                    case 'H' :\n                        index = handleH(value, result, index);\n                        break;\n                    case 'J' :\n                        index = handleJ(value, result, index, slavoGermanic);\n                        break;\n                    case 'K' :\n                        result.append('K');\n                        index = (charAt(value, (index + 1))) == 'K' ? index + 2 : index + 1;\n                        break;\n                    case 'L' :\n                        index = handleL(value, result, index);\n                        break;\n                    case 'M' :\n                        result.append('M');\n                        index = conditionM0(value, index) ? index + 2 : index + 1;\n                        break;\n                    case 'N' :\n                        result.append('N');\n                        index = (charAt(value, (index + 1))) == 'N' ? index + 2 : index + 1;\n                        break;\n                    case '\\u00d1' :\n                        result.append('N');\n                        index++;\n                        break;\n                    case 'P' :\n                        index = handleP(value, result, index);\n                        break;\n                    case 'Q' :\n                        result.append('K');\n                        index = (charAt(value, (index + 1))) == 'Q' ? index + 2 : index + 1;\n                        break;\n                    case 'R' :\n                        index = handleR(value, result, index, slavoGermanic);\n                        break;\n                    case 'S' :\n                        index = handleS(value, result, index, slavoGermanic);\n                        break;\n                    case 'T' :\n                        index = handleT(value, result, index);\n                        break;\n                    case 'V' :\n                        result.append('F');\n                        index = (charAt(value, (index + 1))) == 'V' ? index + 2 : index + 1;\n                        break;\n                    case 'W' :\n                        index = handleW(value, result, index);\n                        break;\n                    case 'X' :\n                        index = handleX(value, result, index);\n                        break;\n                    case 'Z' :\n                        index = handleZ(value, result, index, slavoGermanic);\n                        break;\n                    default :\n                        index++;\n                        break;\n                }\n            }\n            return alternate ? result.getAlternate() : result.getPrimary();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:132","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[152,153,156,154,157,158,107,108,109,111,114,61,115,116,117,118,119,62,159,160,161,162,163,137,164,165,166,167,63,64,168,169,170,171,65,66,172,67,68,173,174,175,176,177,138,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,70,195,196,71,197,72,73,198,199,200,74,75,201,120,121,76,123,124,127,128,77,129,130,131,132,133,134],"tindex":"31d72ce6-2ecc-11e6-9d73-31add483e42a","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:291","type":"CtMethodImpl","sourcecode":"int readResults(final byte[] b, final int bPos, final int bAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (bAvail < 0) {\n        {\n            if ((context.byte[]) != null) {\n                final int int = java.lang.Math.min(available(context), bAvail);\n                java.lang.System.arraycopy(context.byte[], context.int, b, bPos, len);\n                context.int += len;\n                if ((context.int) >= (context.int)) {\n                    context.byte[] = null;\n                } \n                return len;\n            } \n            return context.boolean ? org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int : 0;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"bAvail"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[139,140,0,1,2,3,4,5,6,7,143,144,8,145,9,10],"tindex":"31d753f7-2ecc-11e6-9d73-1724c2fbe97d","method":{"position":"org.apache.commons.codec.language.bm.Lang:91","type":"CtMethodImpl","sourcecode":"public boolean matches(final java.lang.String txt) {\n    if ((txt == null) || ((txt.length()) == 0)) {\n        {\n            return org.apache.commons.codec.language.bm.Lang.LangRule.this.java.util.regex.Pattern.matcher(txt).find();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"txt"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"31d753f8-2ecc-11e6-9d73-6f370f132dd3","method":{"position":"org.apache.commons.codec.binary.StringUtils:334","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf16(final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:740","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[],"tindex":"31d753f9-2ecc-11e6-9d73-99d1721c3f3a","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:676","type":"CtMethodImpl","sourcecode":"private int handleT(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (index == 0) {\n        {\n            if (index >= 0) {\n                {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"TION\")) {\n                        result.append('X');\n                        index += 3;\n                    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TIA\", \"TCH\")) {\n                        result.append('X');\n                        index += 3;\n                    } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"TH\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TTH\"))) {\n                        if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n                            result.append('T');\n                        } else {\n                            result.append('0', 'T');\n                        }\n                        index += 2;\n                    } else {\n                        result.append('T');\n                        index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"T\", \"D\") ? index + 2 : index + 1;\n                    }\n                    return index;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[78,79,80,81,82,84,85,86,202,87],"tindex":"31d77b0a-2ecc-11e6-9d73-55f9b5e6ece2","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:417","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String text) {\n    if (text == null) {\n        {\n            return colognePhonetic(text);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"text"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222],"tindex":"31d77b0b-2ecc-11e6-9d73-993ed8d937c7","method":{"position":"org.apache.commons.codec.language.Nysiis:227","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (str == null) {\n        {\n            return org.apache.commons.codec.language.Nysiis.this.nysiis(str);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[88,90,223,91,224,94],"tindex":"31d7a21c-2ecc-11e6-9d73-bfd1e7be481c","method":{"position":"org.apache.commons.codec.net.URLCodec:193","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            return org.apache.commons.codec.net.URLCodec.encodeUrl(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet, bytes);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:138","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"31d7a21d-2ecc-11e6-9d73-f5d4f56fc455","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:816","type":"CtMethodImpl","sourcecode":"private boolean conditionCH1(final java.lang.String value, final int index) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 5, \"SUGAR\"))) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"T\", \"S\"))) || (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"A\", \"O\", \"U\", \"E\")) || (index == 0)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])) || ((index + 1) == ((value.length()) - 1))));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.codec.net.QCodec:265","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"31d7a21e-2ecc-11e6-9d73-6b01b6ec004a","method":{"position":"org.apache.commons.codec.net.URLCodec:269","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if (charset == null) {\n        {\n            if (charset.equals(\"\")) {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n                }\n            } else {\n                throw new org.apache.commons.codec.DecoderException();\n            }\n        }\n    } else {\n        throw new java.io.UnsupportedEncodingException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"charset"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isWhitespace(ch)"},"failures":[],"tindex":"31d7a21f-2ecc-11e6-9d73-ad6204964414","method":{"position":"org.apache.commons.codec.language.Soundex:229","type":"CtMethodImpl","sourcecode":"private char map(final char ch) {\n    if (java.lang.Character.isWhitespace(ch)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = ch - 'A';\n            if ((index < 0) || (index >= (org.apache.commons.codec.language.Soundex.this.getSoundexMapping().int))) {\n                throw new java.lang.IllegalArgumentException((\"The character is not mapped: \" + ch));\n            } \n            return org.apache.commons.codec.language.Soundex.this.getSoundexMapping()[index];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"31d7c930-2ecc-11e6-9d73-a5cae06e7524","method":{"position":"org.apache.commons.codec.digest.HmacUtils:601","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha384Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (key == null) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest));\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")"},"failures":[14,15,225,16,24,25,226,17,18,19,20,227,26,228,21],"tindex":"31d7c931-2ecc-11e6-9d73-615922126cb9","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:857","type":"CtMethodImpl","sourcecode":"private boolean isSlavoGermanic(final java.lang.String value) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        {\n            return ((((value.indexOf('W')) > (-1)) || ((value.indexOf('K')) > (-1))) || ((value.indexOf(\"CZ\")) > (-1))) || ((value.indexOf(\"WITZ\")) > (-1));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:138","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"31d7f042-2ecc-11e6-9d73-e7b2599e5970","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:216","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String value) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return doubleMetaphone(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:599","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ISL\", \"YSL\")"},"failures":[],"tindex":"31d7f043-2ecc-11e6-9d73-ff4663a4cae5","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:550","type":"CtMethodImpl","sourcecode":"private int handleL(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n                {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ISL\", \"YSL\")) {\n                        {\n                            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")) {\n                                {\n                                    if ((charAt(value, (index + 1))) == 'L') {\n                                        if (conditionL0(value, index)) {\n                                            result.appendPrimary('L');\n                                        } else {\n                                            result.append('L');\n                                        }\n                                        index += 2;\n                                    } else {\n                                        index++;\n                                        result.append('L');\n                                    }\n                                    return index;\n                                }\n                            } else {\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[229,230,231,232,233,234,235,236,237,238,239,240,241,242],"tindex":"31d7f044-2ecc-11e6-9d73-f32be0b1865a","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:352","type":"CtMethodImpl","sourcecode":"public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n            for (int int = 0 ; i < (bytes.int) ; i++) {\n                final int int = bytes[i];\n                if (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n                    try {\n                        if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n                            continue;\n                        } \n                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                        buffer.write(((char)((u << 4) + l)));\n                    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n                        throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n                    }\n                } else if ((b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n                    buffer.write(b);\n                } \n            }\n            return buffer.toByteArray();\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:607","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")"},"failures":[],"tindex":"31d8b395-2ecc-11e6-9d73-f9e2192a5a9a","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:331","type":"CtMethodImpl","sourcecode":"private int handleCC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"H\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"HU\")))) {\n                if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n                    result.append(\"KS\");\n                } else {\n                    result.append('X');\n                }\n                index += 3;\n            } else {\n                result.append('K');\n                index += 2;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[243,244,245,246],"tindex":"31d8b396-2ecc-11e6-9d73-25e4a71fcc27","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:384","type":"CtMethodImpl","sourcecode":"private static int fourBytesToInt(final byte[] b, int offset) {\n    if (b == null) {\n        {\n            int int = org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)]);\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 8;\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 16;\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 24;\n            return value;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:395","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")"},"failures":[],"tindex":"31d8daa7-2ecc-11e6-9d73-21a7e5e98284","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:781","type":"CtMethodImpl","sourcecode":"private boolean conditionC0(final java.lang.String value, final int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHIA\")) {\n                return true;\n            } else if (index <= 1) {\n                return false;\n            } else if (isVowel(charAt(value, (index - 2)))) {\n                return false;\n            } else if (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ACH\"))) {\n                return false;\n            } else {\n                final char char = charAt(value, (index + 2));\n                return ((c != 'I') && (c != 'E')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"BACHER\", \"MACHER\"));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:762","type":"CtBinaryOperatorImpl","sourcecode":"((bigInt.bitLength()) % 8) == 0"},"failures":[180,181],"tindex":"31d8daa8-2ecc-11e6-9d73-6319ec5eedb3","method":{"position":"org.apache.commons.codec.binary.Base64:734","type":"CtMethodImpl","sourcecode":"public static byte[] encodeInteger(final java.math.BigInteger bigInt) {\n    if (((bigInt.bitLength()) % 8) == 0) {\n        {\n            if (bigInt == null) {\n                throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\");\n            } \n            return org.apache.commons.codec.binary.Base64.encodeBase64(org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInt), false);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bigInt":"bigInt"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:270","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[149,150,151,67,176,73],"tindex":"31d8daa9-2ecc-11e6-9d73-85e1a4b11b78","method":{"position":"org.apache.commons.codec.binary.Hex:175","type":"CtMethodImpl","sourcecode":"protected static int toDigit(final char ch, final int index) throws org.apache.commons.codec.DecoderException {\n    if (index == 0) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            final int int = java.lang.Character.digit(ch, 16);\n            if (digit == (-1)) {\n                throw new org.apache.commons.codec.DecoderException((((\"Illegal hexadecimal character \" + ch) + \" at index \") + index));\n            } \n            return digit;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:224","type":"CtBinaryOperatorImpl","sourcecode":"value instanceof java.lang.String"},"failures":[154],"tindex":"31d901ba-2ecc-11e6-9d73-bb6eab72742f","method":{"position":"org.apache.commons.codec.net.BCodec:197","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object value) throws org.apache.commons.codec.EncoderException {\n    if (value == null) {\n        {\n            if (value instanceof java.lang.String) {\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (value == null) {\n                        return null;\n                    } else if (value instanceof java.lang.String) {\n                        return encode(((java.lang.String)(value)));\n                    } else {\n                        throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"));\n                    }\n                }\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:264","type":"CtBinaryOperatorImpl","sourcecode":"(i % 3) != 0"},"failures":[139,140,0,1,2,3,4,5,6,7,144,8,145,9,10],"tindex":"31d901bb-2ecc-11e6-9d73-dddceff46e77","method":{"position":"org.apache.commons.codec.language.bm.Rule:698","type":"CtMethodImpl","sourcecode":"public boolean patternAndContextMatches(final java.lang.CharSequence input, final int i) {\n    if ((i % 3) != 0) {\n        {\n            if (i < 0) {\n                throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n            } \n            final int int = org.apache.commons.codec.language.bm.Rule.this.java.lang.String.length();\n            final int int = i + patternLength;\n            if (ipl > (input.length())) {\n                return false;\n            } \n            if (!(input.subSequence(i, ipl).equals(org.apache.commons.codec.language.bm.Rule.this.java.lang.String))) {\n                return false;\n            } else if (!(org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(input.subSequence(ipl, input.length())))) {\n                return false;\n            } \n            return org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(input.subSequence(0, i));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"i"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[14,15,16,18,19,20],"tindex":"31d928cc-2ecc-11e6-9d73-1fb8c2d35f0d","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:843","type":"CtMethodImpl","sourcecode":"private boolean conditionM0(final java.lang.String value, final int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CH\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if ((charAt(value, (index + 1))) == 'M') {\n                        return true;\n                    } \n                    return (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"UMB\")) && (((index + 1) == ((value.length()) - 1)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"ER\")));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[247],"tindex":"31d928cd-2ecc-11e6-9d73-b5e7127d0d55","method":{"position":"org.apache.commons.codec.binary.StringUtils:350","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf16Be(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:161","type":"CtBinaryOperatorImpl","sourcecode":"n == 0"},"failures":[],"tindex":"31d928ce-2ecc-11e6-9d73-55dcfe13806a","method":{"position":"org.apache.commons.codec.language.Metaphone:370","type":"CtMethodImpl","sourcecode":"private boolean isLastChar(final int wdsz, final int n) {\n    if (wdsz == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (n + 1) == wdsz;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"wdsz"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:225","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"31d928cf-2ecc-11e6-9d73-c3ede495a88c","method":{"position":"org.apache.commons.codec.language.bm.Rule:612","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                str = str.substring(1);\n            } \n            if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                str = str.substring(0, ((str.length()) - 1));\n            } \n            return str;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:684","type":"CtBinaryOperatorImpl","sourcecode":"((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))"},"failures":[],"tindex":"31d94fe0-2ecc-11e6-9d73-c31ea7b03fce","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:550","type":"CtMethodImpl","sourcecode":"private int handleL(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n                {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ISL\", \"YSL\")) {\n                        {\n                            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")) {\n                                {\n                                    if ((charAt(value, (index + 1))) == 'L') {\n                                        if (conditionL0(value, index)) {\n                                            result.appendPrimary('L');\n                                        } else {\n                                            result.append('L');\n                                        }\n                                        index += 2;\n                                    } else {\n                                        index++;\n                                        result.append('L');\n                                    }\n                                    return index;\n                                }\n                            } else {\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:286","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CH\")"},"failures":[],"tindex":"31d94fe1-2ecc-11e6-9d73-df04ee5255ce","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:843","type":"CtMethodImpl","sourcecode":"private boolean conditionM0(final java.lang.String value, final int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CH\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if ((charAt(value, (index + 1))) == 'M') {\n                        return true;\n                    } \n                    return (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"UMB\")) && (((index + 1) == ((value.length()) - 1)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"ER\")));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:377","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof byte[]"},"failures":[241],"tindex":"31d976f2-2ecc-11e6-9d73-514810441c6e","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:527","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj instanceof byte[]) {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof byte[]) {\n                return decode(((byte[])(obj)));\n            } else if (obj instanceof java.lang.String) {\n                return decode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable decoded\"));\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:180","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[248],"tindex":"31d976f3-2ecc-11e6-9d73-1fc687ca4d11","method":{"position":"org.apache.commons.codec.net.QCodec:246","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if ((str.length()) == 0) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return encode(str, getCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:312","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof byte[]"},"failures":[],"tindex":"31d976f4-2ecc-11e6-9d73-835fc07e5e91","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:376","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (obj instanceof byte[]) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    if (obj instanceof byte[]) {\n                        return decode(((byte[])(obj)));\n                    } else if (obj instanceof java.lang.String) {\n                        return decode(((java.lang.String)(obj)));\n                    } else {\n                        throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:104","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"31d99e05-2ecc-11e6-9d73-bd717c92793b","method":{"position":"org.apache.commons.codec.language.bm.Lang:202","type":"CtMethodImpl","sourcecode":"public java.lang.String guessLanguage(final java.lang.String text) {\n    if (text == null) {\n        {\n            if (text == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = guessLanguages(text);\n                    return ls.isSingleton() ? ls.getAny() : org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.String;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"text"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[249,250],"tindex":"31d99e06-2ecc-11e6-9d73-2bc5aaca37b9","method":{"position":"org.apache.commons.codec.digest.HmacUtils:280","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacMd5Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[14,15,225,16,24,25,226,17,18,19,20,227,26,228,21],"tindex":"31d9ec27-2ecc-11e6-9d73-4d1ea65565dc","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:874","type":"CtMethodImpl","sourcecode":"private boolean isSilentStart(final java.lang.String value) {\n    if (value == null) {\n        {\n            boolean boolean = false;\n            for (final java.lang.String java.lang.String : org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]) {\n                if (value.startsWith(element)) {\n                    result = true;\n                    break;\n                } \n            }\n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtBinaryOperatorImpl","sourcecode":"input == null"},"failures":[139,140,0,1,2,3,4,5,6,7,143,144,8,145,9,10],"tindex":"31da8868-2ecc-11e6-9d73-1ff51f108f3e","method":{"position":"org.apache.commons.codec.language.bm.Lang:214","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Languages.LanguageSet guessLanguages(final java.lang.String input) {\n    if (input == null) {\n        {\n            final java.lang.String java.lang.String = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(org.apache.commons.codec.language.bm.Lang.this.org.apache.commons.codec.language.bm.Languages.getLanguages());\n            for (final org.apache.commons.codec.language.bm.Lang.LangRule org.apache.commons.codec.language.bm.Lang.LangRule : org.apache.commons.codec.language.bm.Lang.this.java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule>) {\n                if (rule.matches(text)) {\n                    if (rule.boolean) {\n                        langs.retainAll(rule.java.util.Set<java.lang.String>);\n                    } else {\n                        langs.removeAll(rule.java.util.Set<java.lang.String>);\n                    }\n                } \n            }\n            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs);\n            return ls.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : ls;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:918","type":"CtBinaryOperatorImpl","sourcecode":"(start >= 0) && ((start + length) <= (value.length()))"},"failures":[],"tindex":"31db99d9-2ecc-11e6-9d73-bd12b53140e1","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:915","type":"CtMethodImpl","sourcecode":"protected static boolean contains(final java.lang.String value, final int start, final int length, final java.lang.String... criteria) {\n    if ((length >= 0) && ((start + length) <= (value.length()))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = false;\n                    if ((start >= 0) && ((start + length) <= (value.length()))) {\n                        final java.lang.String java.lang.String = value.substring(start, (start + length));\n                        for (final java.lang.String java.lang.String : criteria) {\n                            if (target.equals(element)) {\n                                result = true;\n                                break;\n                            } \n                        }\n                    } \n                    return result;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"length","length":"length","value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:500","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isWhitespace(ch)"},"failures":[],"tindex":"31db99da-2ecc-11e6-9d73-0b73c97f937c","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:194","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final char ch) {\n    if (java.lang.Character.isWhitespace(ch)) {\n        {\n            if (java.lang.Character.isWhitespace(ch)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((((ch == 'a') || (ch == 'e')) || (ch == 'i')) || (ch == 'o')) || (ch == 'u');\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtBinaryOperatorImpl","sourcecode":"(str == null) || ((str.length()) == 0)"},"failures":[],"tindex":"31dbc0eb-2ecc-11e6-9d73-4b631e5c721b","method":{"position":"org.apache.commons.codec.net.QCodec:225","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.lang.String charset) throws org.apache.commons.codec.EncoderException {\n    if ((charset == null) || ((str.length()) == 0)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (charset == null) {\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (str == null) {\n                        {\n                            if (str == null) {\n                                return null;\n                            } \n                            try {\n                                return encodeText(str, charset);\n                            } catch (final java.io.UnsupportedEncodingException e) {\n                                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n                            }\n                        }\n                    } else {\n                        throw new org.apache.commons.codec.EncoderException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"charset"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:176","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[234,251],"tindex":"31dbc0ec-2ecc-11e6-9d73-ad24f6700b59","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:467","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if (charset == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n        }\n    } else {\n        throw new java.io.UnsupportedEncodingException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"charset"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:500","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isWhitespace(ch)"},"failures":[],"tindex":"31dbc0ed-2ecc-11e6-9d73-0b2a53169ae6","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:194","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final char ch) {\n    if (java.lang.Character.isWhitespace(ch)) {\n        {\n            if (java.lang.Character.isWhitespace(ch)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((((ch == 'a') || (ch == 'e')) || (ch == 'i')) || (ch == 'o')) || (ch == 'u');\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:575","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[252,248],"tindex":"31dbe7fe-2ecc-11e6-9d73-3b11000c96a4","method":{"position":"org.apache.commons.codec.net.QCodec:264","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String str) throws org.apache.commons.codec.DecoderException {\n    if (str == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            try {\n                return decodeText(str);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:740","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[14,15,24,18,19,20,21],"tindex":"31dbe7ff-2ecc-11e6-9d73-f9f447fc214a","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:597","type":"CtMethodImpl","sourcecode":"private int handleS(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (index == 0) {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ISL\", \"YSL\")) {\n                index++;\n            } else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 5, \"SUGAR\"))) {\n                result.append('X', 'S');\n                index++;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SH\")) {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n                    result.append('S');\n                } else {\n                    result.append('X');\n                }\n                index += 2;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"SIO\", \"SIA\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"SIAN\"))) {\n                if (slavoGermanic) {\n                    result.append('S');\n                } else {\n                    result.append('S', 'X');\n                }\n                index += 3;\n            } else if (((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\"))) {\n                result.append('S', 'X');\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\") ? index + 2 : index + 1;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SC\")) {\n                index = handleSC(value, result, index);\n            } else {\n                if ((index == ((value.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AI\", \"OI\"))) {\n                    result.appendAlternate('S');\n                } else {\n                    result.append('S');\n                }\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"S\", \"Z\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"31dc0e10-2ecc-11e6-9d73-b7489566eb25","method":{"position":"org.apache.commons.codec.digest.HmacUtils:474","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha256Hex(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:132","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[],"tindex":"31dc0e11-2ecc-11e6-9d73-373ec303883d","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:220","type":"CtMethodImpl","sourcecode":"private static int encodeByte(final int b, final boolean encode, final java.io.ByteArrayOutputStream buffer) {\n    if (b < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (encode) {\n                return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n            } else {\n                buffer.write(b);\n                return 1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:526","type":"CtBinaryOperatorImpl","sourcecode":"(index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))"},"failures":[],"tindex":"31dc0e12-2ecc-11e6-9d73-8b98ab46a4cd","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:550","type":"CtMethodImpl","sourcecode":"private int handleL(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n                {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ISL\", \"YSL\")) {\n                        {\n                            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")) {\n                                {\n                                    if ((charAt(value, (index + 1))) == 'L') {\n                                        if (conditionL0(value, index)) {\n                                            result.appendPrimary('L');\n                                        } else {\n                                            result.append('L');\n                                        }\n                                        index += 2;\n                                    } else {\n                                        index++;\n                                        result.append('L');\n                                    }\n                                    return index;\n                                }\n                            } else {\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"31dc3523-2ecc-11e6-9d73-713a39e6bd5d","method":{"position":"org.apache.commons.codec.net.BCodec:197","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object value) throws org.apache.commons.codec.EncoderException {\n    if (value == null) {\n        {\n            if (value instanceof java.lang.String) {\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (value == null) {\n                        return null;\n                    } else if (value instanceof java.lang.String) {\n                        return encode(((java.lang.String)(value)));\n                    } else {\n                        throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"));\n                    }\n                }\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"31dc3524-2ecc-11e6-9d73-218ea700333f","method":{"position":"org.apache.commons.codec.net.BCodec:137","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String value, final java.lang.String charset) throws org.apache.commons.codec.EncoderException {\n    if (charset == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (value == null) {\n                return null;\n            } \n            try {\n                return org.apache.commons.codec.net.BCodec.this.encodeText(value, charset);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"charset"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:677","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"TION\")"},"failures":[14,15,16,24,18,19,20,21],"tindex":"31dc3525-2ecc-11e6-9d73-af2536e869a2","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:568","type":"CtMethodImpl","sourcecode":"private int handleP(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"TION\")) {\n        {\n            if ((charAt(value, (index + 1))) == 'H') {\n                result.append('F');\n                index += 2;\n            } else {\n                result.append('P');\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"P\", \"B\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:51","type":"CtBinaryOperatorImpl","sourcecode":"(cs instanceof java.lang.String) && (substring instanceof java.lang.String)"},"failures":[],"tindex":"31dc3526-2ecc-11e6-9d73-ddb32d3779be","method":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:49","type":"CtMethodImpl","sourcecode":"static boolean regionMatches(final java.lang.CharSequence cs, final boolean ignoreCase, final int thisStart, final java.lang.CharSequence substring, final int start, final int length) {\n    if ((cs instanceof java.lang.String) && (substring instanceof java.lang.String)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((cs instanceof java.lang.String) && (substring instanceof java.lang.String)) {\n                return ((java.lang.String)(cs)).regionMatches(ignoreCase, thisStart, ((java.lang.String)(substring)), start, length);\n            } \n            int int = thisStart;\n            int int = start;\n            int int = length;\n            while ((tmpLen--) > 0) {\n                char char = cs.charAt((index1++));\n                char char = substring.charAt((index2++));\n                if (c1 == c2) {\n                    continue;\n                } \n                if (!ignoreCase) {\n                    return false;\n                } \n                if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"cs","substring":"substring"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[253],"tindex":"31dc5c37-2ecc-11e6-9d73-0f8ce91321de","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:160","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Crypt(final byte[] keyBytes, final java.lang.String salt) {\n    if (salt == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:258","type":"CtBinaryOperatorImpl","sourcecode":"(i & 1) != 0"},"failures":[158,159],"tindex":"31dc5c38-2ecc-11e6-9d73-3f5dae5d3dd1","method":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(final int i) throws java.io.IOException {\n    if ((i & 1) != 0) {\n        {\n            byte[][0] = ((byte)(i));\n            write(byte[], 0, 1);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"i"},"type":"special","returnInThen":true,"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
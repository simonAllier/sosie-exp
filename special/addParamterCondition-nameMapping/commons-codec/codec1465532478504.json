{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":10,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":28,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":34,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":229,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":69,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull":201,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameSameNames_ReturnsFalseSuccessfully":240,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":17,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":11,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse":244,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":85,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":133,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":239,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData":91,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithEmptySalt":182,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptWithEmptySalt":97,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":216,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":223,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":40,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":142,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":143,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":27,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":43,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":146,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":194,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":41,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData":175,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":93,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":144,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":145,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":192,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":205,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":199,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":54,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":171,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding":221,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":214,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":124,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":198,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail":106,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":210,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":49,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":101,"org.apache.commons.codec.language.MetaphoneTest.testEncodeEmpty":114,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull":202,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":31,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":118,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":209,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16":126,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":25,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":44,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":7,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":8,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":37,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":163,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":172,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":51,"org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull":105,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":123,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":193,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":159,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":204,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":22,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":212,"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad":250,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":3,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":111,"org.apache.commons.codec.language.MetaphoneTest.testEncodeNull":113,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":46,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":117,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":55,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":30,"org.apache.commons.codec.binary.Base64Test.testUUID":139,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":177,"org.apache.commons.codec.net.QCodecTest.testNullInput":125,"org.apache.commons.codec.binary.Base64Test.testSingletons":153,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":115,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":135,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":103,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":215,"org.apache.commons.codec.binary.Base64Test.testPairs":138,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":134,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":225,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":116,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":19,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":59,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":58,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":100,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt":88,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptWithEmptySalt":178,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray":83,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":231,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":24,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":76,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":174,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":195,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse":241,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":20,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":151,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":185,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":152,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":203,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":130,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJust1Letter_ReturnsFalse":243,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullKey":107,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":70,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":99,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":166,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":141,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":81,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":98,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":53,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":35,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105":219,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnameCornerCase_Nulls_NoMatch":236,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":169,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":36,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":42,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail":108,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":12,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":197,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse":235,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":32,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":48,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData":95,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameToSingleLetter_KARL_C_DoesNotMatch":246,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":52,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":87,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeNull":190,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty":102,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":73,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":120,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":72,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":4,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":170,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":167,"org.apache.commons.codec.binary.Base64Test.testTriplets":208,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":200,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse":234,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":79,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":77,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":80,"org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence":252,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":15,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":84,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":232,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":164,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":109,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":147,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":218,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse":237,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithInvalidSalt":187,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":60,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":74,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":137,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":57,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":65,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEqualsSecondNameJust1Letter_ReturnsFalse":247,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptWrongSalt":86,"org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence":13,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":176,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull":226,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":56,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":220,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":222,"org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64":233,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch":248,"org.apache.commons.codec.language.Caverphone2Test.testLocaleIndependence":64,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":150,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":168,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":196,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":228,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameNullSpace_ReturnsFalseSuccessfully":242,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":9,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":33,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":158,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":78,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString":119,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":186,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":47,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":89,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":131,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":94,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":179,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":14,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":162,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":21,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":184,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":16,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":38,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":188,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":189,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":227,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":207,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":39,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0":18,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":180,"org.apache.commons.codec.digest.HmacUtilsTest.testNullKey":112,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":92,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":96,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":156,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":68,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":217,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":211,"org.apache.commons.codec.binary.Base64Test.testBase64":157,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch":238,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":71,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":132,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":148,"org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence":2,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":61,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeEmpty":121,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":224,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":160,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData":183,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":82,"org.apache.commons.codec.binary.Base64Test.testCodec112":213,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":50,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":66,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":129,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty":104,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":122,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":45,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":206,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":173,"org.apache.commons.codec.binary.Base64Test.testCodec68":154,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":251,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":181,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":6,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":165,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":161,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail":110,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":127,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":230,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":26,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":75,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":90,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":136,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse":245,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":62,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":249,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":155,"org.apache.commons.codec.language.Caverphone2Test.testEncodeEmpty":63,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":5,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":191,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":128,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":67,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":29,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":149,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":140},"transformations":[{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:310","type":"CtBinaryOperatorImpl","sourcecode":"obj == null"},"failures":[],"tindex":"c7699f79-2ec2-11e6-aa4a-ad32bfb358b8","method":{"position":"org.apache.commons.codec.language.Caverphone:73","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj == null) {\n                {\n                    if (!(obj instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n                    } \n                    return org.apache.commons.codec.language.Caverphone.this.caverphone(((java.lang.String)(obj)));\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:85","type":"CtUnaryOperatorImpl","sourcecode":"!(source instanceof java.lang.String)"},"failures":[],"tindex":"c76b4d2a-2ec2-11e6-aa4a-e782b6cc5b79","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:84","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object source) throws org.apache.commons.codec.EncoderException {\n    if (!(source instanceof java.lang.String)) {\n        {\n            if (!(source instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (!(source instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\");\n                    } \n                    return encode(((java.lang.String)(source)));\n                }\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[],"tindex":"c76b743b-2ec2-11e6-aa4a-57ce890d26e6","method":{"position":"org.apache.commons.codec.binary.StringUtils:137","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUnchecked(final java.lang.String string, final java.lang.String charsetName) {\n    if (charsetName == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (string == null) {\n                return null;\n            } \n            try {\n                return string.getBytes(charsetName);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"charsetName"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"tindex":"c76b743c-2ec2-11e6-aa4a-f903124cb1be","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:874","type":"CtMethodImpl","sourcecode":"private boolean isSilentStart(final java.lang.String value) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n                {\n                    if (value == null) {\n                        {\n                            boolean boolean = false;\n                            for (final java.lang.String java.lang.String : org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]) {\n                                if (value.startsWith(element)) {\n                                    result = true;\n                                    break;\n                                } \n                            }\n                            return result;\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:335","type":"CtBinaryOperatorImpl","sourcecode":"obj == null"},"failures":[15],"tindex":"c76b9b4d-2ec2-11e6-aa4a-8320a45d15ef","method":{"position":"org.apache.commons.codec.net.QCodec:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof java.lang.String) {\n                return encode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be encoded using Q codec\"));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:218","type":"CtBinaryOperatorImpl","sourcecode":"((name1.length()) == 1) || ((name2.length()) == 1)"},"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"tindex":"c76bc25e-2ec2-11e6-aa4a-51714f603eb2","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:294","type":"CtMethodImpl","sourcecode":"int leftToRightThenRightToLeftProcessing(final java.lang.String name1, final java.lang.String name2) {\n    if (((name2.length()) == 1) || ((name1.length()) == 1)) {\n        {\n            final char[] char[] = name1.toCharArray();\n            final char[] char[] = name2.toCharArray();\n            final int int = (name1.length()) - 1;\n            final int int = (name2.length()) - 1;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            for (int int = 0 ; i < (name1Char.int) ; i++) {\n                if (i > name2Size) {\n                    break;\n                } \n                name1LtRStart = name1.substring(i, (i + 1));\n                name1LtREnd = name1.substring((name1Size - i), ((name1Size - i) + 1));\n                name2RtLStart = name2.substring(i, (i + 1));\n                name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1));\n                if (name1LtRStart.equals(name2RtLStart)) {\n                    name1Char[i] = ' ';\n                    name2Char[i] = ' ';\n                } \n                if (name1LtREnd.equals(name2RtLEnd)) {\n                    name1Char[(name1Size - i)] = ' ';\n                    name2Char[(name2Size - i)] = ' ';\n                } \n            }\n            final java.lang.String java.lang.String = new java.lang.String(name1Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            final java.lang.String java.lang.String = new java.lang.String(name2Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            if ((strA.length()) > (strB.length())) {\n                return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strA.length())));\n            } else {\n                return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strB.length())));\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"name1","name1":"name2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[54,55,56,57,58,59,60,61,62,63,64],"tindex":"c76c107f-2ec2-11e6-aa4a-f3df15afc67c","method":{"position":"org.apache.commons.codec.language.Caverphone2:45","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if (source == null) {\n        {\n            java.lang.String java.lang.String = source;\n            if ((txt == null) || ((txt.length()) == 0)) {\n                return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n            } \n            txt = txt.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            txt = txt.replaceAll(\"[^a-z]\", \"\");\n            txt = txt.replaceAll(\"e$\", \"\");\n            txt = txt.replaceAll(\"^cough\", \"cou2f\");\n            txt = txt.replaceAll(\"^rough\", \"rou2f\");\n            txt = txt.replaceAll(\"^tough\", \"tou2f\");\n            txt = txt.replaceAll(\"^enough\", \"enou2f\");\n            txt = txt.replaceAll(\"^trough\", \"trou2f\");\n            txt = txt.replaceAll(\"^gn\", \"2n\");\n            txt = txt.replaceAll(\"mb$\", \"m2\");\n            txt = txt.replaceAll(\"cq\", \"2q\");\n            txt = txt.replaceAll(\"ci\", \"si\");\n            txt = txt.replaceAll(\"ce\", \"se\");\n            txt = txt.replaceAll(\"cy\", \"sy\");\n            txt = txt.replaceAll(\"tch\", \"2ch\");\n            txt = txt.replaceAll(\"c\", \"k\");\n            txt = txt.replaceAll(\"q\", \"k\");\n            txt = txt.replaceAll(\"x\", \"k\");\n            txt = txt.replaceAll(\"v\", \"f\");\n            txt = txt.replaceAll(\"dg\", \"2g\");\n            txt = txt.replaceAll(\"tio\", \"sio\");\n            txt = txt.replaceAll(\"tia\", \"sia\");\n            txt = txt.replaceAll(\"d\", \"t\");\n            txt = txt.replaceAll(\"ph\", \"fh\");\n            txt = txt.replaceAll(\"b\", \"p\");\n            txt = txt.replaceAll(\"sh\", \"s2\");\n            txt = txt.replaceAll(\"z\", \"s\");\n            txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n            txt = txt.replaceAll(\"[aeiou]\", \"3\");\n            txt = txt.replaceAll(\"j\", \"y\");\n            txt = txt.replaceAll(\"^y3\", \"Y3\");\n            txt = txt.replaceAll(\"^y\", \"A\");\n            txt = txt.replaceAll(\"y\", \"3\");\n            txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n            txt = txt.replaceAll(\"gh\", \"22\");\n            txt = txt.replaceAll(\"g\", \"k\");\n            txt = txt.replaceAll(\"s+\", \"S\");\n            txt = txt.replaceAll(\"t+\", \"T\");\n            txt = txt.replaceAll(\"p+\", \"P\");\n            txt = txt.replaceAll(\"k+\", \"K\");\n            txt = txt.replaceAll(\"f+\", \"F\");\n            txt = txt.replaceAll(\"m+\", \"M\");\n            txt = txt.replaceAll(\"n+\", \"N\");\n            txt = txt.replaceAll(\"w3\", \"W3\");\n            txt = txt.replaceAll(\"wh3\", \"Wh3\");\n            txt = txt.replaceAll(\"w$\", \"3\");\n            txt = txt.replaceAll(\"w\", \"2\");\n            txt = txt.replaceAll(\"^h\", \"A\");\n            txt = txt.replaceAll(\"h\", \"2\");\n            txt = txt.replaceAll(\"r3\", \"R3\");\n            txt = txt.replaceAll(\"r$\", \"3\");\n            txt = txt.replaceAll(\"r\", \"2\");\n            txt = txt.replaceAll(\"l3\", \"L3\");\n            txt = txt.replaceAll(\"l$\", \"3\");\n            txt = txt.replaceAll(\"l\", \"2\");\n            txt = txt.replaceAll(\"2\", \"\");\n            txt = txt.replaceAll(\"3$\", \"A\");\n            txt = txt.replaceAll(\"3\", \"\");\n            txt = txt + (org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String);\n            return txt.substring(0, org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String.length());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:331","type":"CtBinaryOperatorImpl","sourcecode":"finalRules == null"},"failures":[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"tindex":"c76c5ea0-2ec2-11e6-aa4a-25c707b4bbd9","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:329","type":"CtMethodImpl","sourcecode":"private org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder applyFinalRules(final org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder phonemeBuilder, final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> finalRules) {\n    if (finalRules == null) {\n        {\n            if (finalRules == null) {\n                throw new java.lang.NullPointerException(\"finalRules can not be null\");\n            } \n            if (finalRules.isEmpty()) {\n                return phonemeBuilder;\n            } \n            final java.util.Map<org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme> java.util.Map<org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.TreeMap<org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme>(org.apache.commons.codec.language.bm.Rule.Phoneme.org.apache.commons.codec.language.bm.Rule.Phoneme.java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme>);\n            for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : phonemeBuilder.getPhonemes()) {\n                org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.empty(phoneme.getLanguages());\n                final java.lang.String java.lang.String = phoneme.getPhonemeText().toString();\n                for (int int = 0 ; i < (phonemeText.length()) ; ) {\n                    final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(finalRules , phonemeText , subBuilder , i , int).invoke();\n                    final boolean boolean = rulesApplication.isFound();\n                    subBuilder = rulesApplication.getPhonemeBuilder();\n                    if (!found) {\n                        subBuilder.append(phonemeText.subSequence(i, (i + 1)));\n                    } \n                    i = rulesApplication.getI();\n                }\n                for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : subBuilder.getPhonemes()) {\n                    if (phonemes.containsKey(newPhoneme)) {\n                        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = phonemes.remove(newPhoneme);\n                        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n                        phonemes.put(mergedPhoneme, mergedPhoneme);\n                    } else {\n                        phonemes.put(newPhoneme, newPhoneme);\n                    }\n                }\n            }\n            return new org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder(phonemes.keySet());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"finalRules":"finalRules"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"c76cfae1-2ec2-11e6-aa4a-7bf3f8db8b54","method":{"position":"org.apache.commons.codec.language.AbstractCaverphone:56","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object source) throws org.apache.commons.codec.EncoderException {\n    if (source == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(source instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n            } \n            return org.apache.commons.codec.language.AbstractCaverphone.this.encode(((java.lang.String)(source)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[81,82],"tindex":"c76d21f2-2ec2-11e6-aa4a-6f0bdca59904","method":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:128","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(final byte[] b, final int offset, final int len) throws java.io.IOException {\n    if (len < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (b == null) {\n                throw new java.lang.NullPointerException();\n            } else if ((offset < 0) || (len < 0)) {\n                throw new java.lang.IndexOutOfBoundsException();\n            } else if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n                throw new java.lang.IndexOutOfBoundsException();\n            } else if (len == 0) {\n                return 0;\n            } else {\n                int int = 0;\n                while (readLen == 0) {\n                    if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n                        final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n                        final int int = java.io.InputStream.read(buf);\n                        if (boolean) {\n                            org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n                        } else {\n                            org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n                        }\n                    } \n                    readLen = org.apache.commons.codec.binary.BaseNCodec.readResults(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n                }\n                return readLen;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"len"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[83,84],"tindex":"c76dbe33-2ec2-11e6-aa4a-e3a63675ff31","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:198","type":"CtMethodImpl","sourcecode":"public static byte[] fromAscii(final byte[] ascii) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            final byte[] byte[] = new byte[(ascii.int) >> 3];\n            for (int int = 0, int int = (ascii.int) - 1 ; ii < (l_raw.int) ; ii++ , jj -= 8) {\n                for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                    if ((ascii[(jj - bits)]) == '1') {\n                        l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n                    } \n                }\n            }\n            return l_raw;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"ascii"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:680","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TIA\", \"TCH\")"},"failures":[],"tindex":"c76de544-2ec2-11e6-aa4a-1d4c803033e4","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:568","type":"CtMethodImpl","sourcecode":"private int handleP(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TIA\", \"TCH\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((charAt(value, (index + 1))) == 'H') {\n                result.append('F');\n                index += 2;\n            } else {\n                result.append('P');\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"P\", \"B\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],"tindex":"c76e0c55-2ec2-11e6-aa4a-317bc7a25bea","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:133","type":"CtMethodImpl","sourcecode":"private static java.lang.String sha2Crypt(final byte[] keyBytes, final java.lang.String salt, final java.lang.String saltPrefix, final int blocksize, final java.lang.String algorithm) {\n    if (saltPrefix == null) {\n        {\n            if (saltPrefix == null) {\n                {\n                    final int int = keyBytes.int;\n                    int int = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int;\n                    boolean boolean = false;\n                    if (salt == null) {\n                        throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n                    } \n                    final java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.util.regex.Pattern.matcher(salt);\n                    if ((m == null) || (!(m.find()))) {\n                        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n                    } \n                    if ((m.group(3)) != null) {\n                        rounds = java.lang.Integer.parseInt(m.group(3));\n                        rounds = java.lang.Math.max(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, java.lang.Math.min(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, rounds));\n                        roundsCustom = true;\n                    } \n                    final java.lang.String java.lang.String = m.group(4);\n                    final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                    final int int = saltBytes.int;\n                    java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    ctx.update(keyBytes);\n                    ctx.update(saltBytes);\n                    java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    altCtx.update(keyBytes);\n                    altCtx.update(saltBytes);\n                    altCtx.update(keyBytes);\n                    byte[] byte[] = altCtx.digest();\n                    int int = keyBytes.int;\n                    while (cnt > blocksize) {\n                        ctx.update(altResult, 0, blocksize);\n                        cnt -= blocksize;\n                    }\n                    ctx.update(altResult, 0, cnt);\n                    cnt = keyBytes.int;\n                    while (cnt > 0) {\n                        if ((cnt & 1) != 0) {\n                            ctx.update(altResult, 0, blocksize);\n                        } else {\n                            ctx.update(keyBytes);\n                        }\n                        cnt >>= 1;\n                    }\n                    altResult = ctx.digest();\n                    altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    for (int int = 1 ; i <= keyLen ; i++) {\n                        altCtx.update(keyBytes);\n                    }\n                    byte[] byte[] = altCtx.digest();\n                    final byte[] byte[] = new byte[keyLen];\n                    int int = 0;\n                    while (cp < (keyLen - blocksize)) {\n                        java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n                        cp += blocksize;\n                    }\n                    java.lang.System.arraycopy(tempResult, 0, pBytes, cp, (keyLen - cp));\n                    altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    for (int int = 1 ; i <= (16 + ((altResult[0]) & 255)) ; i++) {\n                        altCtx.update(saltBytes);\n                    }\n                    tempResult = altCtx.digest();\n                    final byte[] byte[] = new byte[saltLen];\n                    cp = 0;\n                    while (cp < (saltLen - blocksize)) {\n                        java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n                        cp += blocksize;\n                    }\n                    java.lang.System.arraycopy(tempResult, 0, sBytes, cp, (saltLen - cp));\n                    for (int int = 0 ; i <= (rounds - 1) ; i++) {\n                        ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                        if ((i & 1) != 0) {\n                            ctx.update(pBytes, 0, keyLen);\n                        } else {\n                            ctx.update(altResult, 0, blocksize);\n                        }\n                        if ((i % 3) != 0) {\n                            ctx.update(sBytes, 0, saltLen);\n                        } \n                        if ((i % 7) != 0) {\n                            ctx.update(pBytes, 0, keyLen);\n                        } \n                        if ((i & 1) != 0) {\n                            ctx.update(altResult, 0, blocksize);\n                        } else {\n                            ctx.update(pBytes, 0, keyLen);\n                        }\n                        altResult = ctx.digest();\n                    }\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(saltPrefix);\n                    if (roundsCustom) {\n                        buffer.append(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String);\n                        buffer.append(rounds);\n                        buffer.append(\"$\");\n                    } \n                    buffer.append(saltString);\n                    buffer.append(\"$\");\n                    if (blocksize == 32) {\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[13], altResult[23], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), altResult[31], altResult[30], 3, buffer);\n                    } else {\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), altResult[63], 2, buffer);\n                    }\n                    java.util.Arrays.fill(tempResult, ((byte)(0)));\n                    java.util.Arrays.fill(pBytes, ((byte)(0)));\n                    java.util.Arrays.fill(sBytes, ((byte)(0)));\n                    ctx.reset();\n                    altCtx.reset();\n                    java.util.Arrays.fill(keyBytes, ((byte)(0)));\n                    java.util.Arrays.fill(saltBytes, ((byte)(0)));\n                    return buffer.toString();\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"saltPrefix"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"c76ecfa6-2ec2-11e6-aa4a-971c80ae36ee","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:133","type":"CtMethodImpl","sourcecode":"private static java.lang.String sha2Crypt(final byte[] keyBytes, final java.lang.String salt, final java.lang.String saltPrefix, final int blocksize, final java.lang.String algorithm) {\n    if (saltPrefix == null) {\n        {\n            if (saltPrefix == null) {\n                {\n                    final int int = keyBytes.int;\n                    int int = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int;\n                    boolean boolean = false;\n                    if (salt == null) {\n                        throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n                    } \n                    final java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.util.regex.Pattern.matcher(salt);\n                    if ((m == null) || (!(m.find()))) {\n                        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n                    } \n                    if ((m.group(3)) != null) {\n                        rounds = java.lang.Integer.parseInt(m.group(3));\n                        rounds = java.lang.Math.max(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, java.lang.Math.min(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, rounds));\n                        roundsCustom = true;\n                    } \n                    final java.lang.String java.lang.String = m.group(4);\n                    final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                    final int int = saltBytes.int;\n                    java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    ctx.update(keyBytes);\n                    ctx.update(saltBytes);\n                    java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    altCtx.update(keyBytes);\n                    altCtx.update(saltBytes);\n                    altCtx.update(keyBytes);\n                    byte[] byte[] = altCtx.digest();\n                    int int = keyBytes.int;\n                    while (cnt > blocksize) {\n                        ctx.update(altResult, 0, blocksize);\n                        cnt -= blocksize;\n                    }\n                    ctx.update(altResult, 0, cnt);\n                    cnt = keyBytes.int;\n                    while (cnt > 0) {\n                        if ((cnt & 1) != 0) {\n                            ctx.update(altResult, 0, blocksize);\n                        } else {\n                            ctx.update(keyBytes);\n                        }\n                        cnt >>= 1;\n                    }\n                    altResult = ctx.digest();\n                    altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    for (int int = 1 ; i <= keyLen ; i++) {\n                        altCtx.update(keyBytes);\n                    }\n                    byte[] byte[] = altCtx.digest();\n                    final byte[] byte[] = new byte[keyLen];\n                    int int = 0;\n                    while (cp < (keyLen - blocksize)) {\n                        java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n                        cp += blocksize;\n                    }\n                    java.lang.System.arraycopy(tempResult, 0, pBytes, cp, (keyLen - cp));\n                    altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                    for (int int = 1 ; i <= (16 + ((altResult[0]) & 255)) ; i++) {\n                        altCtx.update(saltBytes);\n                    }\n                    tempResult = altCtx.digest();\n                    final byte[] byte[] = new byte[saltLen];\n                    cp = 0;\n                    while (cp < (saltLen - blocksize)) {\n                        java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n                        cp += blocksize;\n                    }\n                    java.lang.System.arraycopy(tempResult, 0, sBytes, cp, (saltLen - cp));\n                    for (int int = 0 ; i <= (rounds - 1) ; i++) {\n                        ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                        if ((i & 1) != 0) {\n                            ctx.update(pBytes, 0, keyLen);\n                        } else {\n                            ctx.update(altResult, 0, blocksize);\n                        }\n                        if ((i % 3) != 0) {\n                            ctx.update(sBytes, 0, saltLen);\n                        } \n                        if ((i % 7) != 0) {\n                            ctx.update(pBytes, 0, keyLen);\n                        } \n                        if ((i & 1) != 0) {\n                            ctx.update(altResult, 0, blocksize);\n                        } else {\n                            ctx.update(pBytes, 0, keyLen);\n                        }\n                        altResult = ctx.digest();\n                    }\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(saltPrefix);\n                    if (roundsCustom) {\n                        buffer.append(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String);\n                        buffer.append(rounds);\n                        buffer.append(\"$\");\n                    } \n                    buffer.append(saltString);\n                    buffer.append(\"$\");\n                    if (blocksize == 32) {\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[13], altResult[23], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), altResult[31], altResult[30], 3, buffer);\n                    } else {\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer);\n                        org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), altResult[63], 2, buffer);\n                    }\n                    java.util.Arrays.fill(tempResult, ((byte)(0)));\n                    java.util.Arrays.fill(pBytes, ((byte)(0)));\n                    java.util.Arrays.fill(sBytes, ((byte)(0)));\n                    ctx.reset();\n                    altCtx.reset();\n                    java.util.Arrays.fill(keyBytes, ((byte)(0)));\n                    java.util.Arrays.fill(saltBytes, ((byte)(0)));\n                    return buffer.toString();\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"saltPrefix"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:310","type":"CtBinaryOperatorImpl","sourcecode":"obj == null"},"failures":[],"tindex":"c76f44d7-2ec2-11e6-aa4a-1f3daf380128","method":{"position":"org.apache.commons.codec.language.Caverphone:73","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj == null) {\n                {\n                    if (!(obj instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n                    } \n                    return org.apache.commons.codec.language.Caverphone.this.caverphone(((java.lang.String)(obj)));\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:470","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[],"tindex":"c76f44d8-2ec2-11e6-aa4a-235f49bab4c1","method":{"position":"org.apache.commons.codec.language.Metaphone:338","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final java.lang.StringBuilder string, final int index) {\n    if (index == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(string.charAt(index))) >= 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,102,2,3,4,103,5,6,7,8,9,10,11,12,104,13,14],"tindex":"c76f44d9-2ec2-11e6-aa4a-371ba13588c4","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:86","type":"CtMethodImpl","sourcecode":"public java.lang.String doubleMetaphone(java.lang.String value, final boolean alternate) {\n    if (value == null) {\n        {\n            value = cleanInput(value);\n            if (value == null) {\n                return null;\n            } \n            final boolean boolean = isSlavoGermanic(value);\n            int int = isSilentStart(value) ? 1 : 0;\n            final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult = new org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult(org.apache.commons.codec.language.DoubleMetaphone.this.getMaxCodeLen());\n            while ((!(result.isComplete())) && (index <= ((value.length()) - 1))) {\n                switch (value.charAt(index)) {\n                    case 'A' :\n                    case 'E' :\n                    case 'I' :\n                    case 'O' :\n                    case 'U' :\n                    case 'Y' :\n                        index = handleAEIOUY(result, index);\n                        break;\n                    case 'B' :\n                        result.append('P');\n                        index = (charAt(value, (index + 1))) == 'B' ? index + 2 : index + 1;\n                        break;\n                    case '\\u00c7' :\n                        result.append('S');\n                        index++;\n                        break;\n                    case 'C' :\n                        index = handleC(value, result, index);\n                        break;\n                    case 'D' :\n                        index = handleD(value, result, index);\n                        break;\n                    case 'F' :\n                        result.append('F');\n                        index = (charAt(value, (index + 1))) == 'F' ? index + 2 : index + 1;\n                        break;\n                    case 'G' :\n                        index = handleG(value, result, index, slavoGermanic);\n                        break;\n                    case 'H' :\n                        index = handleH(value, result, index);\n                        break;\n                    case 'J' :\n                        index = handleJ(value, result, index, slavoGermanic);\n                        break;\n                    case 'K' :\n                        result.append('K');\n                        index = (charAt(value, (index + 1))) == 'K' ? index + 2 : index + 1;\n                        break;\n                    case 'L' :\n                        index = handleL(value, result, index);\n                        break;\n                    case 'M' :\n                        result.append('M');\n                        index = conditionM0(value, index) ? index + 2 : index + 1;\n                        break;\n                    case 'N' :\n                        result.append('N');\n                        index = (charAt(value, (index + 1))) == 'N' ? index + 2 : index + 1;\n                        break;\n                    case '\\u00d1' :\n                        result.append('N');\n                        index++;\n                        break;\n                    case 'P' :\n                        index = handleP(value, result, index);\n                        break;\n                    case 'Q' :\n                        result.append('K');\n                        index = (charAt(value, (index + 1))) == 'Q' ? index + 2 : index + 1;\n                        break;\n                    case 'R' :\n                        index = handleR(value, result, index, slavoGermanic);\n                        break;\n                    case 'S' :\n                        index = handleS(value, result, index, slavoGermanic);\n                        break;\n                    case 'T' :\n                        index = handleT(value, result, index);\n                        break;\n                    case 'V' :\n                        result.append('F');\n                        index = (charAt(value, (index + 1))) == 'V' ? index + 2 : index + 1;\n                        break;\n                    case 'W' :\n                        index = handleW(value, result, index);\n                        break;\n                    case 'X' :\n                        index = handleX(value, result, index);\n                        break;\n                    case 'Z' :\n                        index = handleZ(value, result, index, slavoGermanic);\n                        break;\n                    default :\n                        index++;\n                        break;\n                }\n            }\n            return alternate ? result.getAlternate() : result.getPrimary();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isWhitespace(ch)"},"failures":[],"tindex":"c76f92fa-2ec2-11e6-aa4a-e5f41046d029","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:194","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final char ch) {\n    if (java.lang.Character.isWhitespace(ch)) {\n        {\n            if (java.lang.Character.isWhitespace(ch)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((((ch == 'a') || (ch == 'e')) || (ch == 'i')) || (ch == 'o')) || (ch == 'u');\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"c76f92fb-2ec2-11e6-aa4a-2fa8bc27a54e","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:338","type":"CtMethodImpl","sourcecode":"private static int[] desSetKey(final byte[] key) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final int[] int[] = new int[32];\n                    int int = org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(key, 0);\n                    int int = org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(key, 4);\n                    final int[] int[] = new int[2];\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 4, 252645135, results);\n                    d = results[0];\n                    c = results[1];\n                    c = org.apache.commons.codec.digest.UnixCrypt.hPermOp(c, (-2), -859045888);\n                    d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888);\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results);\n                    d = results[0];\n                    c = results[1];\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(c, d, 8, 16711935, results);\n                    c = results[0];\n                    d = results[1];\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results);\n                    d = results[0];\n                    c = results[1];\n                    d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4);\n                    c &= 268435455;\n                    int int = 0;\n                    for (int int = 0 ; i < 16 ; i++) {\n                        if (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.boolean[][i]) {\n                            c = (c >>> 2) | (c << 26);\n                            d = (d >>> 2) | (d << 26);\n                        } else {\n                            c = (c >>> 1) | (c << 27);\n                            d = (d >>> 1) | (d << 27);\n                        }\n                        c &= 268435455;\n                        d &= 268435455;\n                        int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(c & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(((c >>> 6) & 3) | ((c >>> 7) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][(((c >>> 13) & 15) | ((c >>> 14) & 48))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((((c >>> 20) & 1) | ((c >>> 21) & 6)) | ((c >>> 22) & 56))]);\n                        final int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][(d & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][(((d >>> 7) & 3) | ((d >>> 8) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((d >>> 15) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][(((d >>> 21) & 15) | ((d >>> 22) & 48))]);\n                        schedule[(j++)] = (t << 16) | (s & 65535);\n                        s = (s >>> 16) | (t & -65536);\n                        s = (s << 4) | (s >>> 28);\n                        schedule[(j++)] = s;\n                    }\n                    return schedule;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"tindex":"c770082c-2ec2-11e6-aa4a-336278f2fde3","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:857","type":"CtMethodImpl","sourcecode":"private boolean isSlavoGermanic(final java.lang.String value) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n        {\n            return ((((value.indexOf('W')) > (-1)) || ((value.indexOf('K')) > (-1))) || ((value.indexOf(\"CZ\")) > (-1))) || ((value.indexOf(\"WITZ\")) > (-1));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtInvocationImpl","sourcecode":"charset.equals(\"\")"},"failures":[105],"tindex":"c7702f3d-2ec2-11e6-aa4a-4536071a60ed","method":{"position":"org.apache.commons.codec.net.BCodec:137","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String value, final java.lang.String charset) throws org.apache.commons.codec.EncoderException {\n    if (value.equals(\"\")) {\n        {\n            if (value == null) {\n                return null;\n            } \n            try {\n                return org.apache.commons.codec.net.BCodec.this.encodeText(value, charset);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[106,107,108,109,110,111,112],"tindex":"c770564e-2ec2-11e6-aa4a-ed1d65a6e2e5","method":{"position":"org.apache.commons.codec.digest.HmacUtils:154","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getInitializedMac(final org.apache.commons.codec.digest.HmacAlgorithms algorithm, final byte[] key) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:264","type":"CtBinaryOperatorImpl","sourcecode":"(i % 3) != 0"},"failures":[65,66,67,68,69,70,71,72,73,74,76,77,78,79,80],"tindex":"c770564f-2ec2-11e6-aa4a-95a370199201","method":{"position":"org.apache.commons.codec.language.bm.Rule:698","type":"CtMethodImpl","sourcecode":"public boolean patternAndContextMatches(final java.lang.CharSequence input, final int i) {\n    if ((i % 3) != 0) {\n        {\n            if (i < 0) {\n                throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n            } \n            final int int = org.apache.commons.codec.language.bm.Rule.this.java.lang.String.length();\n            final int int = i + patternLength;\n            if (ipl > (input.length())) {\n                return false;\n            } \n            if (!(input.subSequence(i, ipl).equals(org.apache.commons.codec.language.bm.Rule.this.java.lang.String))) {\n                return false;\n            } else if (!(org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(input.subSequence(ipl, input.length())))) {\n                return false;\n            } \n            return org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(input.subSequence(0, i));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"i"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isWhitespace(ch)"},"failures":[],"tindex":"c7707d60-2ec2-11e6-aa4a-fddc947f9113","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:194","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final char ch) {\n    if (java.lang.Character.isWhitespace(ch)) {\n        {\n            if (java.lang.Character.isWhitespace(ch)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((((ch == 'a') || (ch == 'e')) || (ch == 'i')) || (ch == 'o')) || (ch == 'u');\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:138","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"c7707d61-2ec2-11e6-aa4a-cb5085c4f22b","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:978","type":"CtMethodImpl","sourcecode":"public void appendPrimary(final java.lang.String value) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length());\n            if ((value.length()) <= addChars) {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n            } else {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[113,114],"tindex":"c7707d62-2ec2-11e6-aa4a-199bd5536149","method":{"position":"org.apache.commons.codec.language.Metaphone:92","type":"CtMethodImpl","sourcecode":"public java.lang.String metaphone(final java.lang.String txt) {\n    if ((txt == null) || ((txt.length()) == 0)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            int int;\n            if ((txt == null) || ((txtLength = txt.length()) == 0)) {\n                return \"\";\n            } \n            if (txtLength == 1) {\n                return txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            } \n            final char[] char[] = txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale).toCharArray();\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40);\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10);\n            switch (inwd[0]) {\n                case 'K' :\n                case 'G' :\n                case 'P' :\n                    if ((inwd[1]) == 'N') {\n                        local.append(inwd, 1, ((inwd.int) - 1));\n                    } else {\n                        local.append(inwd);\n                    }\n                    break;\n                case 'A' :\n                    if ((inwd[1]) == 'E') {\n                        local.append(inwd, 1, ((inwd.int) - 1));\n                    } else {\n                        local.append(inwd);\n                    }\n                    break;\n                case 'W' :\n                    if ((inwd[1]) == 'R') {\n                        local.append(inwd, 1, ((inwd.int) - 1));\n                        break;\n                    } \n                    if ((inwd[1]) == 'H') {\n                        local.append(inwd, 1, ((inwd.int) - 1));\n                        local.setCharAt(0, 'W');\n                    } else {\n                        local.append(inwd);\n                    }\n                    break;\n                case 'X' :\n                    inwd[0] = 'S';\n                    local.append(inwd);\n                    break;\n                default :\n                    local.append(inwd);\n            }\n            final int int = local.length();\n            int int = 0;\n            while (((code.length()) < (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) && (n < wdsz)) {\n                final char char = local.charAt(n);\n                if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n                    n++;\n                } else {\n                    switch (symb) {\n                        case 'A' :\n                        case 'E' :\n                        case 'I' :\n                        case 'O' :\n                        case 'U' :\n                            if (n == 0) {\n                                code.append(symb);\n                            } \n                            break;\n                        case 'B' :\n                            if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n                                break;\n                            } \n                            code.append(symb);\n                            break;\n                        case 'C' :\n                            if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                break;\n                            } \n                            if (regionMatch(local, n, \"CIA\")) {\n                                code.append('X');\n                                break;\n                            } \n                            if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                code.append('S');\n                                break;\n                            } \n                            if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n                                code.append('K');\n                                break;\n                            } \n                            if (isNextChar(local, n, 'H')) {\n                                if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                                    code.append('K');\n                                } else {\n                                    code.append('X');\n                                }\n                            } else {\n                                code.append('K');\n                            }\n                            break;\n                        case 'D' :\n                            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n                                code.append('J');\n                                n += 2;\n                            } else {\n                                code.append('T');\n                            }\n                            break;\n                        case 'G' :\n                            if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n                                break;\n                            } \n                            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n                                break;\n                            } \n                            if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n                                break;\n                            } \n                            if (isPreviousChar(local, n, 'G')) {\n                                hard = true;\n                            } else {\n                                hard = false;\n                            }\n                            if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n                                code.append('J');\n                            } else {\n                                code.append('K');\n                            }\n                            break;\n                        case 'H' :\n                            if (isLastChar(wdsz, n)) {\n                                break;\n                            } \n                            if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n                                break;\n                            } \n                            if (isVowel(local, (n + 1))) {\n                                code.append('H');\n                            } \n                            break;\n                        case 'F' :\n                        case 'J' :\n                        case 'L' :\n                        case 'M' :\n                        case 'N' :\n                        case 'R' :\n                            code.append(symb);\n                            break;\n                        case 'K' :\n                            if (n > 0) {\n                                if (!(isPreviousChar(local, n, 'C'))) {\n                                    code.append(symb);\n                                } \n                            } else {\n                                code.append(symb);\n                            }\n                            break;\n                        case 'P' :\n                            if (isNextChar(local, n, 'H')) {\n                                code.append('F');\n                            } else {\n                                code.append(symb);\n                            }\n                            break;\n                        case 'Q' :\n                            code.append('K');\n                            break;\n                        case 'S' :\n                            if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n                                code.append('X');\n                            } else {\n                                code.append('S');\n                            }\n                            break;\n                        case 'T' :\n                            if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n                                code.append('X');\n                                break;\n                            } \n                            if (regionMatch(local, n, \"TCH\")) {\n                                break;\n                            } \n                            if (regionMatch(local, n, \"TH\")) {\n                                code.append('0');\n                            } else {\n                                code.append('T');\n                            }\n                            break;\n                        case 'V' :\n                            code.append('F');\n                            break;\n                        case 'W' :\n                        case 'Y' :\n                            if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n                                code.append(symb);\n                            } \n                            break;\n                        case 'X' :\n                            code.append('K');\n                            code.append('S');\n                            break;\n                        case 'Z' :\n                            code.append('S');\n                            break;\n                        default :\n                            break;\n                    }\n                    n++;\n                }\n                if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n                    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n                } \n            }\n            return code.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"txt"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:259","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[65,66,67,68,69,70,71,72,73,74,76,77,78,79,80],"tindex":"c771dcf3-2ec2-11e6-aa4a-5d78ffe39852","method":{"position":"org.apache.commons.codec.language.bm.Rule:124","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Rule.Phoneme append(final java.lang.CharSequence str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                {\n                    org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.append(str);\n                    return org.apache.commons.codec.language.bm.Rule.Phoneme.this;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[115,116,117,15,118],"tindex":"c771dcf4-2ec2-11e6-aa4a-0b1fd61febb2","method":{"position":"org.apache.commons.codec.net.QCodec:153","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doEncoding(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            final byte[] byte[] = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet, bytes);\n            if (org.apache.commons.codec.net.QCodec.this.boolean) {\n                for (int int = 0 ; i < (data.int) ; i++) {\n                    if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                        data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n                    } \n                }\n            } \n            return data;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")"},"failures":[],"tindex":"c7720405-2ec2-11e6-aa4a-7f9ab0827ee9","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:874","type":"CtMethodImpl","sourcecode":"private boolean isSilentStart(final java.lang.String value) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n                {\n                    if (value == null) {\n                        {\n                            boolean boolean = false;\n                            for (final java.lang.String java.lang.String : org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]) {\n                                if (value.startsWith(element)) {\n                                    result = true;\n                                    break;\n                                } \n                            }\n                            return result;\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[119],"tindex":"c7720406-2ec2-11e6-aa4a-9582e754c4b8","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:298","type":"CtMethodImpl","sourcecode":"public static java.lang.String toAsciiString(final byte[] raw) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n        {\n            return new java.lang.String(org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(raw));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[106,120],"tindex":"c7722b17-2ec2-11e6-aa4a-5f250599c4b2","method":{"position":"org.apache.commons.codec.digest.HmacUtils:419","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha256(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"valueToDigest"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,8,9,10],"tindex":"c772a048-2ec2-11e6-aa4a-ab7b0e246526","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:968","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.String value) {\n    if (value == null) {\n        {\n            appendPrimary(value);\n            appendAlternate(value);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:597","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"c772a049-2ec2-11e6-aa4a-b55694cf4b4a","method":{"position":"org.apache.commons.codec.language.bm.Rule:124","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Rule.Phoneme append(final java.lang.CharSequence str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                {\n                    org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.append(str);\n                    return org.apache.commons.codec.language.bm.Rule.Phoneme.this;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:265","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[65,66,67,68,69,70,71,72,73,74,76,77,78,79,80],"tindex":"c772c75a-2ec2-11e6-aa4a-017f466420ff","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:91","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.CharSequence str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                {\n                    for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n                        ph.append(str);\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[106],"tindex":"c772ee6b-2ec2-11e6-aa4a-85016e9410c4","method":{"position":"org.apache.commons.codec.digest.HmacUtils:98","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha256(final byte[] key) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:110","type":"CtUnaryOperatorImpl","sourcecode":"!(pObject instanceof java.lang.String)"},"failures":[121],"tindex":"c772ee6c-2ec2-11e6-aa4a-9577020c501e","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:109","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final java.lang.Object encode(final java.lang.Object pObject) throws org.apache.commons.codec.EncoderException {\n    if (!(pObject instanceof java.lang.String)) {\n        {\n            if (!(pObject instanceof java.lang.String)) {\n                {\n                    if (!(pObject instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\");\n                    } \n                    return encode(((java.lang.String)(pObject)));\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pObject":"pObject"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[86,87,88,89,90,94],"tindex":"c772ee6d-2ec2-11e6-aa4a-c33eb9761a0d","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:539","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Crypt(final byte[] keyBytes, java.lang.String salt) {\n    if (salt == null) {\n        {\n            if (salt == null) {\n                salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n            } \n            return org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(keyBytes, salt, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:312","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.lang.String"},"failures":[],"tindex":"c773157e-2ec2-11e6-aa4a-af97461b9e64","method":{"position":"org.apache.commons.codec.language.Nysiis:210","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof java.lang.String) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj instanceof java.lang.String) {\n                {\n                    if (!(obj instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\");\n                    } \n                    return org.apache.commons.codec.language.Nysiis.this.nysiis(((java.lang.String)(obj)));\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:602","type":"CtBinaryOperatorImpl","sourcecode":"(index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 5, \"SUGAR\"))"},"failures":[0,1,4,8,9,10],"tindex":"c773157f-2ec2-11e6-aa4a-c905b6f7380a","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:279","type":"CtMethodImpl","sourcecode":"private int handleC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 5, \"SUGAR\"))) {\n        {\n            if (conditionC0(value, index)) {\n                result.append('K');\n                index += 2;\n            } else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 6, \"CAESAR\"))) {\n                result.append('S');\n                index += 2;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CH\")) {\n                index = handleCH(value, result, index);\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CZ\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 4, \"WICZ\")))) {\n                result.append('S', 'X');\n                index += 2;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"CIA\")) {\n                result.append('X');\n                index += 3;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CC\")) && (!((index == 1) && ((charAt(value, 0)) == 'M')))) {\n                return handleCC(value, result, index);\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) {\n                result.append('K');\n                index += 2;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n                    result.append('S', 'X');\n                } else {\n                    result.append('S');\n                }\n                index += 2;\n            } else {\n                result.append('K');\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n                    index += 3;\n                } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n                    index += 2;\n                } else {\n                    index++;\n                }\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:531","type":"CtBinaryOperatorImpl","sourcecode":"index == ((value.length()) - 1)"},"failures":[],"tindex":"c7733c90-2ec2-11e6-aa4a-b539087499fa","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:355","type":"CtMethodImpl","sourcecode":"private int handleCH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n    if (index == ((value.length()) - 1)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))) {\n                result.append('K', 'X');\n                return index + 2;\n            } else if (conditionCH0(value, index)) {\n                result.append('K');\n                return index + 2;\n            } else if (conditionCH1(value, index)) {\n                result.append('K');\n                return index + 2;\n            } else {\n                if (index > 0) {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n                        result.append('K');\n                    } else {\n                        result.append('X', 'K');\n                    }\n                } else {\n                    result.append('X');\n                }\n                return index + 2;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[122,123],"tindex":"c7733c91-2ec2-11e6-aa4a-a90f9c906dff","method":{"position":"org.apache.commons.codec.binary.StringUtils:92","type":"CtMethodImpl","sourcecode":"private static byte[] getBytes(final java.lang.String string, final java.nio.charset.Charset charset) {\n    if (string.equals(\"\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (string == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (string == null) {\n                        return null;\n                    } \n                    return string.getBytes(charset);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:153","type":"CtBinaryOperatorImpl","sourcecode":"ascii == null"},"failures":[124],"tindex":"c77363a2-2ec2-11e6-aa4a-b16b91527f77","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:152","type":"CtMethodImpl","sourcecode":"public byte[] toByteArray(final java.lang.String ascii) {\n    if (ascii == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (ascii == null) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii.toCharArray());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"ascii"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:264","type":"CtBinaryOperatorImpl","sourcecode":"n > 0"},"failures":[],"tindex":"c77363a3-2ec2-11e6-aa4a-f3d6c538215c","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:392","type":"CtMethodImpl","sourcecode":"private static int hPermOp(int a, final int n, final int m) {\n    if (n > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = ((a << (16 - n)) ^ a) & m;\n            a = (a ^ t) ^ (t >>> (16 - n));\n            return a;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[125],"tindex":"c77363a4-2ec2-11e6-aa4a-cd3b51de450c","method":{"position":"org.apache.commons.codec.net.QCodec:169","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doDecoding(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            boolean boolean = false;\n            for (final byte byte : bytes) {\n                if (b == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                    hasUnderscores = true;\n                    break;\n                } \n            }\n            if (hasUnderscores) {\n                final byte[] byte[] = new byte[bytes.int];\n                for (int int = 0 ; i < (bytes.int) ; i++) {\n                    final byte byte = bytes[i];\n                    if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                        tmp[i] = b;\n                    } else {\n                        tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n                    }\n                }\n                return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp);\n            } \n            return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[126],"tindex":"c7738ab5-2ec2-11e6-aa4a-af576b14bfc2","method":{"position":"org.apache.commons.codec.binary.StringUtils:334","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf16(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:337","type":"CtBinaryOperatorImpl","sourcecode":"inAvail < 0"},"failures":[127,128,129,130,131,132,133,134,135,136,122,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174],"tindex":"c7738ab6-2ec2-11e6-aa4a-91dd8c51eb94","method":{"position":"org.apache.commons.codec.binary.Base64:428","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid decode(final byte[] in, int inPos, final int inAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (inAvail < 0) {\n        {\n            if (context.boolean) {\n                return ;\n            } \n            if (inAvail < 0) {\n                context.boolean = true;\n            } \n            for (int int = 0 ; i < inAvail ; i++) {\n                final byte[] byte[] = ensureBufferSize(int, context);\n                final byte byte = in[(inPos++)];\n                if (b == (byte)) {\n                    context.boolean = true;\n                    break;\n                } else {\n                    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) {\n                        final int int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][b];\n                        if (result >= 0) {\n                            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n                            context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n                            if ((context.int) == 0) {\n                                buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                            } \n                        } \n                    } \n                }\n            }\n            if ((context.boolean) && ((context.int) != 0)) {\n                final byte[] byte[] = ensureBufferSize(int, context);\n                switch (context.int) {\n                    case 1 :\n                        break;\n                    case 2 :\n                        context.int = (context.int) >> 4;\n                        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        break;\n                    case 3 :\n                        context.int = (context.int) >> 2;\n                        buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                        break;\n                    default :\n                        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n                }\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inAvail":"inAvail"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"c773b1c7-2ec2-11e6-aa4a-bb105ad87d18","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:338","type":"CtMethodImpl","sourcecode":"private static int[] desSetKey(final byte[] key) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final int[] int[] = new int[32];\n                    int int = org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(key, 0);\n                    int int = org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(key, 4);\n                    final int[] int[] = new int[2];\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 4, 252645135, results);\n                    d = results[0];\n                    c = results[1];\n                    c = org.apache.commons.codec.digest.UnixCrypt.hPermOp(c, (-2), -859045888);\n                    d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888);\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results);\n                    d = results[0];\n                    c = results[1];\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(c, d, 8, 16711935, results);\n                    c = results[0];\n                    d = results[1];\n                    org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results);\n                    d = results[0];\n                    c = results[1];\n                    d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4);\n                    c &= 268435455;\n                    int int = 0;\n                    for (int int = 0 ; i < 16 ; i++) {\n                        if (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.boolean[][i]) {\n                            c = (c >>> 2) | (c << 26);\n                            d = (d >>> 2) | (d << 26);\n                        } else {\n                            c = (c >>> 1) | (c << 27);\n                            d = (d >>> 1) | (d << 27);\n                        }\n                        c &= 268435455;\n                        d &= 268435455;\n                        int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(c & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(((c >>> 6) & 3) | ((c >>> 7) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][(((c >>> 13) & 15) | ((c >>> 14) & 48))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((((c >>> 20) & 1) | ((c >>> 21) & 6)) | ((c >>> 22) & 56))]);\n                        final int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][(d & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][(((d >>> 7) & 3) | ((d >>> 8) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((d >>> 15) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][(((d >>> 21) & 15) | ((d >>> 22) & 48))]);\n                        schedule[(j++)] = (t << 16) | (s & 65535);\n                        s = (s >>> 16) | (t & -65536);\n                        s = (s << 4) | (s >>> 28);\n                        schedule[(j++)] = s;\n                    }\n                    return schedule;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[65,66,67,68,69,70,71,72,73,74,75,76],"tindex":"c773ffe8-2ec2-11e6-aa4a-538410a1e076","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:92","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) throws org.apache.commons.codec.EncoderException {\n    if (source == null) {\n        {\n            if (source == null) {\n                return null;\n            } \n            return org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.encode(source);\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"c773ffe9-2ec2-11e6-aa4a-5d3b021ee3f6","method":{"position":"org.apache.commons.codec.digest.HmacUtils:581","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha384Hex(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"c773ffea-2ec2-11e6-aa4a-4b10fe4257b4","method":{"position":"org.apache.commons.codec.digest.HmacUtils:154","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getInitializedMac(final org.apache.commons.codec.digest.HmacAlgorithms algorithm, final byte[] key) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[175,176,177,178,179,180,181,182,183,184,185,186,187,188],"tindex":"c7744e0b-2ec2-11e6-aa4a-a7d735ffb011","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:179","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Crypt(final byte[] keyBytes, final java.lang.String salt, final java.lang.String prefix) {\n    if (prefix == null) {\n        {\n            final int int = keyBytes.int;\n            java.lang.String java.lang.String;\n            if (salt == null) {\n                saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n            } else {\n                final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n                final java.util.regex.Matcher java.util.regex.Matcher = p.matcher(salt);\n                if ((m == null) || (!(m.find()))) {\n                    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n                } \n                saltString = m.group(1);\n            }\n            final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n            final java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n            ctx.update(keyBytes);\n            ctx.update(prefix.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset));\n            ctx.update(saltBytes);\n            java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n            ctx1.update(keyBytes);\n            ctx1.update(saltBytes);\n            ctx1.update(keyBytes);\n            byte[] byte[] = ctx1.digest();\n            int int = keyLen;\n            while (ii > 0) {\n                ctx.update(finalb, 0, (ii > 16 ? 16 : ii));\n                ii -= 16;\n            }\n            java.util.Arrays.fill(finalb, ((byte)(0)));\n            ii = keyLen;\n            final int int = 0;\n            while (ii > 0) {\n                if ((ii & 1) == 1) {\n                    ctx.update(finalb[j]);\n                } else {\n                    ctx.update(keyBytes[j]);\n                }\n                ii >>= 1;\n            }\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(((prefix + saltString) + \"$\"));\n            finalb = ctx.digest();\n            for (int int = 0 ; i < (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int) ; i++) {\n                ctx1 = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n                if ((i & 1) != 0) {\n                    ctx1.update(keyBytes);\n                } else {\n                    ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n                }\n                if ((i % 3) != 0) {\n                    ctx1.update(saltBytes);\n                } \n                if ((i % 7) != 0) {\n                    ctx1.update(keyBytes);\n                } \n                if ((i & 1) != 0) {\n                    ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n                } else {\n                    ctx1.update(keyBytes);\n                }\n                finalb = ctx1.digest();\n            }\n            org.apache.commons.codec.digest.B64.b64from24bit(finalb[0], finalb[6], finalb[12], 4, passwd);\n            org.apache.commons.codec.digest.B64.b64from24bit(finalb[1], finalb[7], finalb[13], 4, passwd);\n            org.apache.commons.codec.digest.B64.b64from24bit(finalb[2], finalb[8], finalb[14], 4, passwd);\n            org.apache.commons.codec.digest.B64.b64from24bit(finalb[3], finalb[9], finalb[15], 4, passwd);\n            org.apache.commons.codec.digest.B64.b64from24bit(finalb[4], finalb[10], finalb[5], 4, passwd);\n            org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), finalb[11], 2, passwd);\n            ctx.reset();\n            ctx1.reset();\n            java.util.Arrays.fill(keyBytes, ((byte)(0)));\n            java.util.Arrays.fill(saltBytes, ((byte)(0)));\n            java.util.Arrays.fill(finalb, ((byte)(0)));\n            return passwd.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"prefix"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:447","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[189,190],"tindex":"c774751c-2ec2-11e6-aa4a-c98f531dfe2d","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:175","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n            if ((str.length()) == 0) {\n                return str;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            sBuf.append(str.charAt(0));\n            char char;\n            char char;\n            last = '*';\n            for (int int = 0 ; i < (str.length()) ; i++) {\n                current = getMappingCode(str.charAt(i));\n                if (current == last) {\n                    continue;\n                } else if (current != 0) {\n                    sBuf.append(current);\n                } \n                last = current;\n            }\n            return sBuf.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"c7749c2d-2ec2-11e6-aa4a-d55e6c84a21a","method":{"position":"org.apache.commons.codec.digest.HmacUtils:260","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacMd5Hex(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[191,192,193,194,195,196],"tindex":"c774c33e-2ec2-11e6-aa4a-6dd67d69423f","method":{"position":"org.apache.commons.codec.net.URLCodec:193","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            return org.apache.commons.codec.net.URLCodec.encodeUrl(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet, bytes);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"c774c33f-2ec2-11e6-aa4a-9b8a2e698b46","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:384","type":"CtMethodImpl","sourcecode":"private static int fourBytesToInt(final byte[] b, int offset) {\n    if (b == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)]);\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 8;\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 16;\n            value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 24;\n            return value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isWhitespace(ch)"},"failures":[0,1,4,8,9,10],"tindex":"c774c340-2ec2-11e6-aa4a-63502af19264","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:865","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final char ch) {\n    if (java.lang.Character.isWhitespace(ch)) {\n        {\n            return (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String.indexOf(ch)) != (-1);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:101","type":"CtBinaryOperatorImpl","sourcecode":"r > 0"},"failures":[197,198,199,200],"tindex":"c774ea51-2ec2-11e6-aa4a-d3087890496a","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:325","type":"CtMethodImpl","sourcecode":"private static int dEncrypt(int el, final int r, final int s, final int e0, final int e1, final int[] sArr) {\n    if (e0 > 0) {\n        {\n            if (e0 > 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (el > 0) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            int int = r ^ (r >>> 16);\n                            int int = v & e0;\n                            v &= e1;\n                            u = ((u ^ (u << 16)) ^ r) ^ (sArr[s]);\n                            int int = ((v ^ (v << 16)) ^ r) ^ (sArr[(s + 1)]);\n                            t = (t >>> 4) | (t << 28);\n                            el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((u >>> 24) & 63)]);\n                            return el;\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"r":"el"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[111],"tindex":"c774ea52-2ec2-11e6-aa4a-a7942e14db45","method":{"position":"org.apache.commons.codec.digest.HmacUtils:134","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha512(final byte[] key) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[181,182,183,184,185,186,187,188],"tindex":"c774ea53-2ec2-11e6-aa4a-2d44ee5b6fa6","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:87","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final byte[] keyBytes, java.lang.String salt) {\n    if (salt == null) {\n        {\n            if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n                salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt;\n            } \n            return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[],"tindex":"c7751164-2ec2-11e6-aa4a-372ea63a1b84","method":{"position":"org.apache.commons.codec.language.bm.Rule:612","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if ((str.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                str = str.substring(1);\n            } \n            if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                str = str.substring(0, ((str.length()) - 1));\n            } \n            return str;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:788","type":"CtUnaryOperatorImpl","sourcecode":"!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ACH\"))"},"failures":[0,1,4,8,9,10],"tindex":"c7751165-2ec2-11e6-aa4a-13d5e2391b94","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:781","type":"CtMethodImpl","sourcecode":"private boolean conditionC0(final java.lang.String value, final int index) {\n    if (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ACH\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHIA\")) {\n                return true;\n            } else if (index <= 1) {\n                return false;\n            } else if (isVowel(charAt(value, (index - 2)))) {\n                return false;\n            } else if (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ACH\"))) {\n                return false;\n            } else {\n                final char char = charAt(value, (index + 2));\n                return ((c != 'I') && (c != 'E')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"BACHER\", \"MACHER\"));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[201,103,202],"tindex":"c7753876-2ec2-11e6-aa4a-4f68ecdd68e4","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:75","type":"CtMethodImpl","sourcecode":"public java.lang.String doubleMetaphone(final java.lang.String value) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return doubleMetaphone(value, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:342","type":"CtBinaryOperatorImpl","sourcecode":"inAvail < 0"},"failures":[127,128,203,131,132,204,205,206,207,208,209,210,138,139,140,141,142,143,144,145,211,146,147,148,212,213,153,214,155,215,157,216,217,159,218,162,167,219,170,174],"tindex":"c7753877-2ec2-11e6-aa4a-8ba9748a8241","method":{"position":"org.apache.commons.codec.binary.Base64:331","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid encode(final byte[] in, int inPos, final int inAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (inAvail < 0) {\n        {\n            if (inAvail < 0) {\n                {\n                    if (context.boolean) {\n                        return ;\n                    } \n                    if (inAvail < 0) {\n                        context.boolean = true;\n                        if ((0 == (context.int)) && ((int) == 0)) {\n                            return ;\n                        } \n                        final byte[] byte[] = ensureBufferSize(int, context);\n                        final int int = context.int;\n                        switch (context.int) {\n                            case 0 :\n                                break;\n                            case 1 :\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][(((context.int) << 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n                                    buffer[((context.int)++)] = byte;\n                                    buffer[((context.int)++)] = byte;\n                                } \n                                break;\n                            case 2 :\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 10) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][(((context.int) << 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n                                    buffer[((context.int)++)] = byte;\n                                } \n                                break;\n                            default :\n                                throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n                        }\n                        context.int += (context.int) - savedPos;\n                        if (((int) > 0) && ((context.int) > 0)) {\n                            java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                            context.int += byte[].int;\n                        } \n                    } else {\n                        for (int int = 0 ; i < inAvail ; i++) {\n                            final byte[] byte[] = ensureBufferSize(int, context);\n                            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n                            int int = in[(inPos++)];\n                            if (b < 0) {\n                                b += 256;\n                            } \n                            context.int = ((context.int) << 8) + b;\n                            if (0 == (context.int)) {\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 12) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                context.int += org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n                                if (((int) > 0) && ((int) <= (context.int))) {\n                                    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                                    context.int += byte[].int;\n                                    context.int = 0;\n                                } \n                            } \n                        }\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inAvail":"inAvail"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:506","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.lang.String"},"failures":[],"tindex":"c7758698-2ec2-11e6-aa4a-cd56407bc2a4","method":{"position":"org.apache.commons.codec.language.Nysiis:210","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof java.lang.String) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj instanceof java.lang.String) {\n                {\n                    if (!(obj instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\");\n                    } \n                    return org.apache.commons.codec.language.Nysiis.this.nysiis(((java.lang.String)(obj)));\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,3,4,5,7,8,9,10,12,14],"tindex":"c775ada9-2ec2-11e6-aa4a-d7027d2b3950","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:915","type":"CtMethodImpl","sourcecode":"protected static boolean contains(final java.lang.String value, final int start, final int length, final java.lang.String... criteria) {\n    if (value == null) {\n        {\n            boolean boolean = false;\n            if ((start >= 0) && ((start + length) <= (value.length()))) {\n                final java.lang.String java.lang.String = value.substring(start, (start + length));\n                for (final java.lang.String java.lang.String : criteria) {\n                    if (target.equals(element)) {\n                        result = true;\n                        break;\n                    } \n                }\n            } \n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:180","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[220,221,222,223,224,225,226,227,228,229,230,231],"tindex":"c775d4ba-2ec2-11e6-aa4a-cf998c47d7f3","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:574","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.nio.charset.Charset charset) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((str.length()) == 0) {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str.getBytes(charset)));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:597","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"c775d4bb-2ec2-11e6-aa4a-439e6f814af4","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:91","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.CharSequence str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                {\n                    for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n                        ph.append(str);\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[65,66,67,70,71,72,73,76,77,80],"tindex":"c775d4bc-2ec2-11e6-aa4a-99d636021eda","method":{"position":"org.apache.commons.codec.language.bm.Rule:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if ((input.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:101","type":"CtBinaryOperatorImpl","sourcecode":"r > 0"},"failures":[],"tindex":"c775fbcd-2ec2-11e6-aa4a-ef82b9b52855","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:325","type":"CtMethodImpl","sourcecode":"private static int dEncrypt(int el, final int r, final int s, final int e0, final int e1, final int[] sArr) {\n    if (e0 > 0) {\n        {\n            if (e0 > 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (el > 0) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            int int = r ^ (r >>> 16);\n                            int int = v & e0;\n                            v &= e1;\n                            u = ((u ^ (u << 16)) ^ r) ^ (sArr[s]);\n                            int int = ((v ^ (v << 16)) ^ r) ^ (sArr[(s + 1)]);\n                            t = (t >>> 4) | (t << 28);\n                            el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((u >>> 24) & 63)]);\n                            return el;\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"r":"e0"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"c775fbce-2ec2-11e6-aa4a-f9c36c981f50","method":{"position":"org.apache.commons.codec.digest.HmacUtils:474","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha256Hex(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:176","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"c775fbcf-2ec2-11e6-aa4a-a3c23c4e55e1","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:574","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.nio.charset.Charset charset) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((str.length()) == 0) {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str.getBytes(charset)));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:276","type":"CtBinaryOperatorImpl","sourcecode":"(suffix.length()) > (input.length())"},"failures":[66,67,68,70,71,73],"tindex":"c77622e0-2ec2-11e6-aa4a-c34278ca88bc","method":{"position":"org.apache.commons.codec.language.bm.Rule:275","type":"CtMethodImpl","sourcecode":"private static boolean endsWith(final java.lang.CharSequence input, final java.lang.CharSequence suffix) {\n    if ((suffix.length()) > (input.length())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((suffix.length()) > (input.length())) {\n                return false;\n            } \n            for (int int = (input.length()) - 1, int int = (suffix.length()) - 1 ; j >= 0 ; i-- , j--) {\n                if ((input.charAt(i)) != (suffix.charAt(j))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input","suffix":"suffix"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[],"tindex":"c77622e1-2ec2-11e6-aa4a-310109d6a0ef","method":{"position":"org.apache.commons.codec.language.bm.Rule:600","type":"CtMethodImpl","sourcecode":"private static boolean startsWith(final java.lang.CharSequence input, final java.lang.CharSequence prefix) {\n    if ((prefix.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((prefix.length()) > (input.length())) {\n                return false;\n            } \n            for (int int = 0 ; i < (prefix.length()) ; i++) {\n                if ((input.charAt(i)) != (prefix.charAt(i))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"prefix"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:486","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"c77622e2-2ec2-11e6-aa4a-916d7044d794","method":{"position":"org.apache.commons.codec.language.Caverphone:57","type":"CtMethodImpl","sourcecode":"public java.lang.String caverphone(final java.lang.String source) {\n    if (source == null) {\n        {\n            return org.apache.commons.codec.language.Caverphone.this.org.apache.commons.codec.language.Caverphone2.encode(source);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:104","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"c77649f3-2ec2-11e6-aa4a-85077864165f","method":{"position":"org.apache.commons.codec.language.bm.Lang:202","type":"CtMethodImpl","sourcecode":"public java.lang.String guessLanguage(final java.lang.String text) {\n    if (text == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = guessLanguages(text);\n            return ls.isSingleton() ? ls.getAny() : org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.String;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"text"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:677","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"TION\")"},"failures":[0,1,3,4,7,8,9,10,11,12,14],"tindex":"c77649f4-2ec2-11e6-aa4a-af3d6449e481","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:904","type":"CtMethodImpl","sourcecode":"protected char charAt(final java.lang.String value, final int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"TION\")) {\n        {\n            if ((index < 0) || (index >= (value.length()))) {\n                return java.lang.Character.java.lang.Character.char;\n            } \n            return value.charAt(index);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtInvocationImpl","sourcecode":"charset.equals(\"\")"},"failures":[],"tindex":"c77649f5-2ec2-11e6-aa4a-2d8781a5cee2","method":{"position":"org.apache.commons.codec.binary.StringUtils:92","type":"CtMethodImpl","sourcecode":"private static byte[] getBytes(final java.lang.String string, final java.nio.charset.Charset charset) {\n    if (string.equals(\"\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (string == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (string == null) {\n                        return null;\n                    } \n                    return string.getBytes(charset);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"string"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:368","type":"CtBinaryOperatorImpl","sourcecode":"index > 0"},"failures":[0,1,3,8,9,10,12,14],"tindex":"c7767106-2ec2-11e6-aa4a-ddfcf7a4486a","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:384","type":"CtMethodImpl","sourcecode":"private int handleD(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (index > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n                    result.append('J');\n                    index += 3;\n                } else {\n                    result.append(\"TK\");\n                    index += 2;\n                }\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n                result.append('T');\n                index += 2;\n            } else {\n                result.append('T');\n                index++;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:85","type":"CtUnaryOperatorImpl","sourcecode":"!(source instanceof java.lang.String)"},"failures":[],"tindex":"c7769817-2ec2-11e6-aa4a-b14219e72ed0","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:84","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object source) throws org.apache.commons.codec.EncoderException {\n    if (!(source instanceof java.lang.String)) {\n        {\n            if (!(source instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (!(source instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\");\n                    } \n                    return encode(((java.lang.String)(source)));\n                }\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"c7769818-2ec2-11e6-aa4a-c70ee18eea34","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:409","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (bytes == null) {\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:440","type":"CtBinaryOperatorImpl","sourcecode":"inAvail < 0"},"failures":[],"tindex":"c7769819-2ec2-11e6-aa4a-57af8bb3018b","method":{"position":"org.apache.commons.codec.binary.Base64:331","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid encode(final byte[] in, int inPos, final int inAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (inAvail < 0) {\n        {\n            if (inAvail < 0) {\n                {\n                    if (context.boolean) {\n                        return ;\n                    } \n                    if (inAvail < 0) {\n                        context.boolean = true;\n                        if ((0 == (context.int)) && ((int) == 0)) {\n                            return ;\n                        } \n                        final byte[] byte[] = ensureBufferSize(int, context);\n                        final int int = context.int;\n                        switch (context.int) {\n                            case 0 :\n                                break;\n                            case 1 :\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][(((context.int) << 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n                                    buffer[((context.int)++)] = byte;\n                                    buffer[((context.int)++)] = byte;\n                                } \n                                break;\n                            case 2 :\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 10) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][(((context.int) << 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n                                    buffer[((context.int)++)] = byte;\n                                } \n                                break;\n                            default :\n                                throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n                        }\n                        context.int += (context.int) - savedPos;\n                        if (((int) > 0) && ((context.int) > 0)) {\n                            java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                            context.int += byte[].int;\n                        } \n                    } else {\n                        for (int int = 0 ; i < inAvail ; i++) {\n                            final byte[] byte[] = ensureBufferSize(int, context);\n                            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n                            int int = in[(inPos++)];\n                            if (b < 0) {\n                                b += 256;\n                            } \n                            context.int = ((context.int) << 8) + b;\n                            if (0 == (context.int)) {\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 12) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                                context.int += org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n                                if (((int) > 0) && ((int) <= (context.int))) {\n                                    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                                    context.int += byte[].int;\n                                    context.int = 0;\n                                } \n                            } \n                        }\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inAvail":"inAvail"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:468","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"c776e63a-2ec2-11e6-aa4a-5f3d1f529203","method":{"position":"org.apache.commons.codec.language.Caverphone:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (str == null) {\n        {\n            return org.apache.commons.codec.language.Caverphone.this.caverphone(str);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtBinaryOperatorImpl","sourcecode":"arrayOctet == null"},"failures":[140,147,232,233,158,123],"tindex":"c776e63b-2ec2-11e6-aa4a-e7543bbbcb19","method":{"position":"org.apache.commons.codec.binary.Base64:537","type":"CtMethodImpl","sourcecode":"public static boolean isBase64(final byte[] arrayOctet) {\n    if (arrayOctet == null) {\n        {\n            for (int int = 0 ; i < (arrayOctet.int) ; i++) {\n                if ((!(org.apache.commons.codec.binary.Base64.isBase64(arrayOctet[i]))) && (!(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(arrayOctet[i])))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayOctet":"arrayOctet"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:740","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[0,1,8,9,10],"tindex":"c776e63c-2ec2-11e6-aa4a-bbd101847f0e","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:827","type":"CtMethodImpl","sourcecode":"private boolean conditionL0(final java.lang.String value, final int index) {\n    if (index == 0) {\n        {\n            if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n                return true;\n            } else if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:220","type":"CtInvocationImpl","sourcecode":"name1.equalsIgnoreCase(name2)"},"failures":[234,16,235,236,17,237,19,20,238,21,22,23,24,239,25,26,240,27,28,29,30,31,32,34,241,35,36,242,37,38,39,40,41,243,42,43,44,244,245,45,46,47,48,49,50,246,51,247,52,248,53],"tindex":"c7770d4d-2ec2-11e6-aa4a-49a80d0edae8","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:212","type":"CtMethodImpl","sourcecode":"public boolean isEncodeEquals(java.lang.String name1, java.lang.String name2) {\n    if (name2.equalsIgnoreCase(name2)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) {\n                return false;\n            } else if (((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) {\n                return false;\n            } else if (((name1.length()) == 1) || ((name2.length()) == 1)) {\n                return false;\n            } else if (name1.equalsIgnoreCase(name2)) {\n                return true;\n            } \n            name1 = cleanName(name1);\n            name2 = cleanName(name2);\n            name1 = removeVowels(name1);\n            name2 = removeVowels(name2);\n            name1 = removeDoubleConsonants(name1);\n            name2 = removeDoubleConsonants(name2);\n            name1 = getFirst3Last3(name1);\n            name2 = getFirst3Last3(name2);\n            if ((java.lang.Math.abs(((name1.length()) - (name2.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                return false;\n            } \n            final int int = java.lang.Math.abs(((name1.length()) + (name2.length())));\n            int int = 0;\n            minRating = getMinRating(sumLength);\n            final int int = leftToRightThenRightToLeftProcessing(name1, name2);\n            return count >= minRating;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"name2","name1":"name2"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:110","type":"CtUnaryOperatorImpl","sourcecode":"!(pObject instanceof java.lang.String)"},"failures":[],"tindex":"c7770d4e-2ec2-11e6-aa4a-07145609121a","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:109","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final java.lang.Object encode(final java.lang.Object pObject) throws org.apache.commons.codec.EncoderException {\n    if (!(pObject instanceof java.lang.String)) {\n        {\n            if (!(pObject instanceof java.lang.String)) {\n                {\n                    if (!(pObject instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\");\n                    } \n                    return encode(((java.lang.String)(pObject)));\n                }\n            } else {\n                throw new org.apache.commons.codec.EncoderException();\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pObject":"pObject"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"c777345f-2ec2-11e6-aa4a-2d63348a6205","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:409","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (bytes == null) {\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"c7773460-2ec2-11e6-aa4a-bbafa1138799","method":{"position":"org.apache.commons.codec.digest.HmacUtils:688","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha512Hex(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"valueToDigest"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"c7773461-2ec2-11e6-aa4a-21daba5e6d8b","method":{"position":"org.apache.commons.codec.binary.StringUtils:350","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf16Be(final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:602","type":"CtBinaryOperatorImpl","sourcecode":"(index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 5, \"SUGAR\"))"},"failures":[0,1,4,8,9,10,12,14],"tindex":"c7773462-2ec2-11e6-aa4a-efdde1adc731","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:582","type":"CtMethodImpl","sourcecode":"private int handleR(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index, final boolean slavoGermanic) {\n    if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 5, \"SUGAR\"))) {\n        {\n            if ((((index == ((value.length()) - 1)) && (!slavoGermanic)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"IE\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 4), 2, \"ME\", \"MA\")))) {\n                result.appendAlternate('R');\n            } else {\n                result.append('R');\n            }\n            return (charAt(value, (index + 1))) == 'R' ? index + 2 : index + 1;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"ascii instanceof char[]"},"failures":[84],"tindex":"c7775b73-2ec2-11e6-aa4a-27bac4ae7bcb","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:115","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object ascii) throws org.apache.commons.codec.DecoderException {\n    if (ascii instanceof char[]) {\n        {\n            if (ascii == null) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            if (ascii instanceof byte[]) {\n                return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)));\n            } \n            if (ascii instanceof char[]) {\n                return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)));\n            } \n            if (ascii instanceof java.lang.String) {\n                return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n            } \n            throw new org.apache.commons.codec.DecoderException(\"argument not a byte array\");\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"ascii"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[111,249],"tindex":"c7775b74-2ec2-11e6-aa4a-496998a89844","method":{"position":"org.apache.commons.codec.digest.HmacUtils:633","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha512(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"valueToDigest"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")"},"failures":[],"tindex":"c7775b75-2ec2-11e6-aa4a-779f0825bd02","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:874","type":"CtMethodImpl","sourcecode":"private boolean isSilentStart(final java.lang.String value) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n                {\n                    if (value == null) {\n                        {\n                            boolean boolean = false;\n                            for (final java.lang.String java.lang.String : org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]) {\n                                if (value.startsWith(element)) {\n                                    result = true;\n                                    break;\n                                } \n                            }\n                            return result;\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:283","type":"CtBinaryOperatorImpl","sourcecode":"(index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 6, \"CAESAR\"))"},"failures":[],"tindex":"c7778286-2ec2-11e6-aa4a-a729f170330d","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:816","type":"CtMethodImpl","sourcecode":"private boolean conditionCH1(final java.lang.String value, final int index) {\n    if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 6, \"CAESAR\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"T\", \"S\"))) || (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"A\", \"O\", \"U\", \"E\")) || (index == 0)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])) || ((index + 1) == ((value.length()) - 1))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtBinaryOperatorImpl","sourcecode":"arrayOctet == null"},"failures":[250],"tindex":"c7778287-2ec2-11e6-aa4a-a3b868f99ed0","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:495","type":"CtMethodImpl","sourcecode":"protected boolean containsAlphabetOrPad(final byte[] arrayOctet) {\n    if (arrayOctet == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (arrayOctet == null) {\n                return false;\n            } \n            for (final byte byte : arrayOctet) {\n                if (((byte) == element) || (isInAlphabet(element))) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arrayOctet":"arrayOctet"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"c7778288-2ec2-11e6-aa4a-d31dce784299","method":{"position":"org.apache.commons.codec.digest.HmacUtils:280","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacMd5Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl","sourcecode":"((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))"},"failures":[],"tindex":"c7778289-2ec2-11e6-aa4a-d77b7e6a2bcc","method":{"position":"org.apache.commons.codec.language.bm.Rule:512","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        {\n            return (input.length()) == 0;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:259","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[189,251,252],"tindex":"c777a99a-2ec2-11e6-aa4a-bb7a3b0cc9c2","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:148","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (str == null) {\n        {\n            return soundex(str);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"c777a99b-2ec2-11e6-aa4a-81861d4d417e","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:201","type":"CtMethodImpl","sourcecode":"private static int getUnsignedOctet(final int index, final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = bytes[index];\n            if (b < 0) {\n                b = 256 + b;\n            } \n            return b;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:101","type":"CtBinaryOperatorImpl","sourcecode":"r > 0"},"failures":[],"tindex":"c777a99c-2ec2-11e6-aa4a-3110c1bd3412","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:325","type":"CtMethodImpl","sourcecode":"private static int dEncrypt(int el, final int r, final int s, final int e0, final int e1, final int[] sArr) {\n    if (e0 > 0) {\n        {\n            if (e0 > 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (el > 0) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            int int = r ^ (r >>> 16);\n                            int int = v & e0;\n                            v &= e1;\n                            u = ((u ^ (u << 16)) ^ r) ^ (sArr[s]);\n                            int int = ((v ^ (v << 16)) ^ r) ^ (sArr[(s + 1)]);\n                            t = (t >>> 4) | (t << 28);\n                            el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((u >>> 24) & 63)]);\n                            return el;\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"r":"e0"},"type":"special","returnInThen":true,"status":0}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
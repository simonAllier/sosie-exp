{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":14,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":212,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":263,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":7,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":268,"org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException":66,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":231,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":229,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":230,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":232,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":256,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":144,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":207,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameSameNames_ReturnsFalseSuccessfully":261,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":139,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":250,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":166,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":123,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":85,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":203,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":18,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":258,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NullValue_ReturnNullSuccessfully":173,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty":194,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":213,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":100,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":190,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":313,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":239,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":276,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":241,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":240,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":28,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":29,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":262,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":279,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":32,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":90,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":277,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":30,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":31,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":89,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent":140,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":202,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":81,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":180,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":245,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":57,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":64,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":189,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":244,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":302,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeWithNullArray":301,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":185,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":206,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":178,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":122,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":286,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":300,"org.apache.commons.codec.language.MetaphoneTest.testEncodeEmpty":172,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":71,"org.apache.commons.codec.language.SoundexTest.testB650":228,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":266,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8":311,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":8,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":184,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16":62,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":259,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":280,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":99,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":155,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":12,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":49,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":273,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":210,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":9,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":58,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":95,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":288,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":125,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":133,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":170,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Length":77,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":84,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":45,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":179,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":119,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":187,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":255,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":153,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":283,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":6,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":105,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":265,"org.apache.commons.codec.binary.Base64Test.testUUID":25,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":293,"org.apache.commons.codec.binary.Base64Test.testSingletons":39,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":4,"org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt":297,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":20,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":130,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":164,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":192,"org.apache.commons.codec.binary.Base64Test.testPairs":24,"org.apache.commons.codec.binary.Base64Test.testConstructors":316,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":19,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":102,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":5,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":252,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":211,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":135,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":236,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":129,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray":320,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":152,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":257,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":305,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":60,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":171,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse":269,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":69,"org.apache.commons.codec.language.SoundexTest.testEncodeNull":321,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":253,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":37,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectNull":160,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":38,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":116,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":174,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":209,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":199,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8":108,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":200,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":120,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":15,"org.apache.commons.codec.binary.HexTest.testEncodeEmpty":219,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":237,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":137,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":80,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":145,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":52,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le":112,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":27,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":91,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":118,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":291,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":196,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":270,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":72,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105":191,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnameCornerCase_Nulls_NoMatch":249,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":55,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString":126,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":271,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":278,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":156,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":243,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse":248,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":68,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":115,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":267,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":285,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":177,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":96,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":176,"org.apache.commons.codec.language.NysiisTest.testEncodeEmpty":161,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":289,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty":162,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length":74,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":67,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":148,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":147,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":217,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":93,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":61,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":56,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":53,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeStringWithNull":169,"org.apache.commons.codec.binary.Base64Test.testTriplets":183,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":106,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":246,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":308,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":306,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":309,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument":121,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":0,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":310,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":50,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":220,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":33,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":134,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":132,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse":251,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1":109,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":75,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":149,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":114,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":141,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":238,"org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence":168,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":65,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":70,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":82,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":124,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":292,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":78,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":97,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":98,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch":290,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":36,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":54,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":94,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":151,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameNullSpace_ReturnsFalseSuccessfully":272,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":13,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":175,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":319,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":44,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":307,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":233,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":284,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":92,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":295,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":16,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":298,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":224,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":158,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":48,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":157,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":216,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":254,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":247,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":117,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":274,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":150,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":128,"org.apache.commons.codec.language.MetaphoneTest.testWhy":198,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":113,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":182,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":275,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":88,"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence":242,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0":318,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":294,"org.apache.commons.codec.digest.HmacUtilsTest.testNullKey":223,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":76,"org.apache.commons.codec.language.MetaphoneTest.testTCH":197,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":299,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":42,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars":159,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":201,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":225,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":226,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":227,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":193,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":131,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":143,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":205,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":204,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":186,"org.apache.commons.codec.binary.Base64Test.testBase64":43,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":146,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":11,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":86,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":17,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":34,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":315,"org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence":163,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":79,"org.apache.commons.codec.net.BCodecTest.testNullInput":317,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":83,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":101,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":46,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":314,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":136,"org.apache.commons.codec.binary.Base64Test.testCodec112":188,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":287,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":303,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":138,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":3,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":208,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":22,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty":167,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay":218,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":181,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":282,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":59,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be":111,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":214,"org.apache.commons.codec.binary.Base64Test.testCodec68":40,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":234,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":195,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":322,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":127,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":51,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":154,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":47,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail":222,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":1,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":104,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":260,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":312,"org.apache.commons.codec.language.Caverphone2Test.testEncodeNull":221,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":304,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":296,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":21,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse":281,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":73,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":41,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":215,"org.apache.commons.codec.language.SoundexTest.testDifference":235,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1":63,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":87,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":165,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":103,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":2,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":142,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":10,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii":110,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":264,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":35,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":26,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16":107},"transformations":[{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:413","type":"CtUnaryOperatorImpl","sourcecode":"!(obj instanceof java.lang.String)"},"failures":[],"tindex":"b0e0d273-2eb9-11e6-97ea-0f2392ae179d","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:202","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (!(obj instanceof java.lang.String)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\");\n            } \n            return doubleMetaphone(((java.lang.String)(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[0],"tindex":"b0e16eb4-2eb9-11e6-97ea-8da90a8da431","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:140","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] ascii) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"ascii"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:104","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[1,2,3,4,5,6,7,8,9],"tindex":"b0e195c5-2eb9-11e6-97ea-5dd38cc2851b","method":{"position":"org.apache.commons.codec.net.RFC1522Codec:124","type":"CtMethodImpl","sourcecode":"protected java.lang.String decodeText(final java.lang.String text) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if (text == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (text == null) {\n                {\n                    if (text == null) {\n                        return null;\n                    } \n                    if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)))) {\n                        throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n                    } \n                    final int int = (text.length()) - 2;\n                    int int = 2;\n                    int int = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from);\n                    if (to == terminator) {\n                        throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n                    } \n                    final java.lang.String java.lang.String = text.substring(from, to);\n                    if (charset.equals(\"\")) {\n                        throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n                    } \n                    from = to + 1;\n                    to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from);\n                    if (to == terminator) {\n                        throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n                    } \n                    final java.lang.String java.lang.String = text.substring(from, to);\n                    if (!(getEncoding().equalsIgnoreCase(encoding))) {\n                        throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"));\n                    } \n                    from = to + 1;\n                    to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from);\n                    byte[] byte[] = org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(text.substring(from, to));\n                    data = doDecoding(data);\n                    return new java.lang.String(data , charset);\n                }\n            } else {\n                throw new java.io.UnsupportedEncodingException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"text"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b0e1e3e6-2eb9-11e6-97ea-1d9cc84dc40d","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:915","type":"CtMethodImpl","sourcecode":"protected static boolean contains(final java.lang.String value, final int start, final int length, final java.lang.String... criteria) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = false;\n                    if ((start >= 0) && ((start + length) <= (value.length()))) {\n                        final java.lang.String java.lang.String = value.substring(start, (start + length));\n                        for (final java.lang.String java.lang.String : criteria) {\n                            if (target.equals(element)) {\n                                result = true;\n                                break;\n                            } \n                        }\n                    } \n                    return result;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:286","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CH\")"},"failures":[10,11,12,13,14],"tindex":"b0e1e3e7-2eb9-11e6-97ea-3bff19b98ccd","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:331","type":"CtMethodImpl","sourcecode":"private int handleCC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CH\")) {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"H\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"HU\")))) {\n                if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n                    result.append(\"KS\");\n                } else {\n                    result.append('X');\n                }\n                index += 3;\n            } else {\n                result.append('K');\n                index += 2;\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:440","type":"CtBinaryOperatorImpl","sourcecode":"inAvail < 0"},"failures":[1,2,3,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"tindex":"b0e20af8-2eb9-11e6-97ea-b7bcc5ffccb7","method":{"position":"org.apache.commons.codec.binary.Base64:428","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid decode(final byte[] in, int inPos, final int inAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (inAvail < 0) {\n        {\n            if (inAvail < 0) {\n                {\n                    if (context.boolean) {\n                        return ;\n                    } \n                    if (inAvail < 0) {\n                        context.boolean = true;\n                    } \n                    for (int int = 0 ; i < inAvail ; i++) {\n                        final byte[] byte[] = ensureBufferSize(int, context);\n                        final byte byte = in[(inPos++)];\n                        if (b == (byte)) {\n                            context.boolean = true;\n                            break;\n                        } else {\n                            if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) {\n                                final int int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][b];\n                                if (result >= 0) {\n                                    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n                                    context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n                                    if ((context.int) == 0) {\n                                        buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                        buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                    } \n                                } \n                            } \n                        }\n                    }\n                    if ((context.boolean) && ((context.int) != 0)) {\n                        final byte[] byte[] = ensureBufferSize(int, context);\n                        switch (context.int) {\n                            case 1 :\n                                break;\n                            case 2 :\n                                context.int = (context.int) >> 4;\n                                buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                break;\n                            case 3 :\n                                context.int = (context.int) >> 2;\n                                buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                break;\n                            default :\n                                throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n                        }\n                    } \n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inAvail":"inAvail"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:138","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[10,11,61,12,13,14],"tindex":"b0e28029-2eb9-11e6-97ea-bd263895e466","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:279","type":"CtMethodImpl","sourcecode":"private int handleC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value == null) {\n        {\n            if (conditionC0(value, index)) {\n                result.append('K');\n                index += 2;\n            } else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 6, \"CAESAR\"))) {\n                result.append('S');\n                index += 2;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CH\")) {\n                index = handleCH(value, result, index);\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CZ\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 4, \"WICZ\")))) {\n                result.append('S', 'X');\n                index += 2;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"CIA\")) {\n                result.append('X');\n                index += 3;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CC\")) && (!((index == 1) && ((charAt(value, 0)) == 'M')))) {\n                return handleCC(value, result, index);\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) {\n                result.append('K');\n                index += 2;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n                    result.append('S', 'X');\n                } else {\n                    result.append('S');\n                }\n                index += 2;\n            } else {\n                result.append('K');\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n                    index += 3;\n                } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n                    index += 2;\n                } else {\n                    index++;\n                }\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl","sourcecode":"((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))"},"failures":[],"tindex":"b0e2a73a-2eb9-11e6-97ea-3308f9b42458","method":{"position":"org.apache.commons.codec.language.bm.Rule:519","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return input.equals(content);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[62],"tindex":"b0e2ce4b-2eb9-11e6-97ea-5781a3422bf4","method":{"position":"org.apache.commons.codec.binary.StringUtils:334","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf16(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[63],"tindex":"b0e2ce4c-2eb9-11e6-97ea-5bcf211b7d74","method":{"position":"org.apache.commons.codec.binary.StringUtils:302","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringIso8859_1(final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (bytes == null) {\n                        {\n                            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,1,2,3,87,88,89,90,91,92,93,94,4,5,6,7,8,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,15,16,17,127,128,129,22,25,41,130,43,131,46,47,132,133,48,49,50,51,52,134,53,135,54,136,137,55,56,138,57,58,59,60],"tindex":"b0e2f55d-2eb9-11e6-97ea-a1e4d945c14e","method":{"position":"org.apache.commons.codec.binary.StringUtils:92","type":"CtMethodImpl","sourcecode":"private static byte[] getBytes(final java.lang.String string, final java.nio.charset.Charset charset) {\n    if (string == null) {\n        {\n            if (string == null) {\n                return null;\n            } \n            return string.getBytes(charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:406","type":"CtUnaryOperatorImpl","sourcecode":"!(object instanceof java.lang.String)"},"failures":[139],"tindex":"b0e31c6e-2eb9-11e6-97ea-8144d8bf27a8","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:405","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object object) throws org.apache.commons.codec.EncoderException {\n    if (!(object instanceof java.lang.String)) {\n        {\n            if (!(object instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(((((\"This method's parameter was expected to be of the type \" + (java.lang.String.java.lang.String.java.lang.Class.getName())) + \". But actually it was of the type \") + (object.getClass().getName())) + \".\"));\n            } \n            return encode(((java.lang.String)(object)));\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[87,140,88,89,90,92,94],"tindex":"b0e3437f-2eb9-11e6-97ea-edb3f1149ba4","method":{"position":"org.apache.commons.codec.net.URLCodec:161","type":"CtMethodImpl","sourcecode":"public static final byte[] decodeUrl(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n            for (int int = 0 ; i < (bytes.int) ; i++) {\n                final int int = bytes[i];\n                if (b == '+') {\n                    buffer.write(' ');\n                } else if (b == (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)) {\n                    try {\n                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                        buffer.write(((char)((u << 4) + l)));\n                    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n                        throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n                    }\n                } else {\n                    buffer.write(b);\n                }\n            }\n            return buffer.toByteArray();\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[65,68],"tindex":"b0e36a90-2eb9-11e6-97ea-8d3ac29fca90","method":{"position":"org.apache.commons.codec.digest.HmacUtils:387","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha1Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtBinaryOperatorImpl","sourcecode":"input == null"},"failures":[],"tindex":"b0e36a91-2eb9-11e6-97ea-ff7fad622ce4","method":{"position":"org.apache.commons.codec.language.bm.Rule:198","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:342","type":"CtBinaryOperatorImpl","sourcecode":"inAvail < 0"},"failures":[],"tindex":"b0e391a2-2eb9-11e6-97ea-9d41b5f1592a","method":{"position":"org.apache.commons.codec.binary.Base64:428","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid decode(final byte[] in, int inPos, final int inAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (inAvail < 0) {\n        {\n            if (inAvail < 0) {\n                {\n                    if (context.boolean) {\n                        return ;\n                    } \n                    if (inAvail < 0) {\n                        context.boolean = true;\n                    } \n                    for (int int = 0 ; i < inAvail ; i++) {\n                        final byte[] byte[] = ensureBufferSize(int, context);\n                        final byte byte = in[(inPos++)];\n                        if (b == (byte)) {\n                            context.boolean = true;\n                            break;\n                        } else {\n                            if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) {\n                                final int int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][b];\n                                if (result >= 0) {\n                                    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n                                    context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n                                    if ((context.int) == 0) {\n                                        buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                        buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                    } \n                                } \n                            } \n                        }\n                    }\n                    if ((context.boolean) && ((context.int) != 0)) {\n                        final byte[] byte[] = ensureBufferSize(int, context);\n                        switch (context.int) {\n                            case 1 :\n                                break;\n                            case 2 :\n                                context.int = (context.int) >> 4;\n                                buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                break;\n                            case 3 :\n                                context.int = (context.int) >> 2;\n                                buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                                break;\n                            default :\n                                throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n                        }\n                    } \n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inAvail":"inAvail"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[141,142,143,144,145,146,147,148,149],"tindex":"b0e3dfc3-2eb9-11e6-97ea-dd9f2137a46f","method":{"position":"org.apache.commons.codec.language.bm.Rule:539","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((input.length()) == 0) {\n                {\n                    return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:222","type":"CtVariableReadImpl","sourcecode":"encode"},"failures":[100,102,150,151,152],"tindex":"b0e3dfc4-2eb9-11e6-97ea-653ef403f9cf","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:220","type":"CtMethodImpl","sourcecode":"private static int encodeByte(final int b, final boolean encode, final java.io.ByteArrayOutputStream buffer) {\n    if (b == ' ') {\n        {\n            if (encode) {\n                {\n                    if (encode) {\n                        return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n                    } else {\n                        buffer.write(b);\n                        return 1;\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encode":"encode"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.net.URLCodec:132","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[118,136],"tindex":"b0e406d5-2eb9-11e6-97ea-e931b7e56735","method":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:128","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(final byte[] b, final int offset, final int len) throws java.io.IOException {\n    if (len < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (b == null) {\n                throw new java.lang.NullPointerException();\n            } else if ((offset < 0) || (len < 0)) {\n                throw new java.lang.IndexOutOfBoundsException();\n            } else if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n                throw new java.lang.IndexOutOfBoundsException();\n            } else if (len == 0) {\n                return 0;\n            } else {\n                int int = 0;\n                while (readLen == 0) {\n                    if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n                        final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n                        final int int = java.io.InputStream.read(buf);\n                        if (boolean) {\n                            org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n                        } else {\n                            org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n                        }\n                    } \n                    readLen = org.apache.commons.codec.binary.BaseNCodec.readResults(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n                }\n                return readLen;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"len"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"b0e406d6-2eb9-11e6-97ea-49ac5f3806de","method":{"position":"org.apache.commons.codec.binary.StringUtils:302","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringIso8859_1(final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (bytes == null) {\n                        {\n                            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[73],"tindex":"b0e42de7-2eb9-11e6-97ea-15bdc2dfd76c","method":{"position":"org.apache.commons.codec.digest.HmacUtils:688","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha512Hex(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:470","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[10,11,153,61,154,155,12,13,14,156,157],"tindex":"b0e42de8-2eb9-11e6-97ea-c5f0cae88fe9","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:269","type":"CtMethodImpl","sourcecode":"private int handleAEIOUY(final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n    if (index == 0) {\n        {\n            if (index == 0) {\n                result.append('A');\n            } \n            return index + 1;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:450","type":"CtFieldReadImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.this.concat"},"failures":[158],"tindex":"b0e454f9-2eb9-11e6-97ea-bd78048f3a98","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:133","type":"CtMethodImpl","sourcecode":"public void setConcat(final boolean concat) {\n    if (concat) {\n        {\n            org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , concat , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"concat":"concat"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")"},"failures":[],"tindex":"b0e454fa-2eb9-11e6-97ea-971bee34108f","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:987","type":"CtMethodImpl","sourcecode":"public void appendAlternate(final java.lang.String value) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        {\n            if (value == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length());\n                            if ((value.length()) <= addChars) {\n                                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n                            } else {\n                                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:762","type":"CtBinaryOperatorImpl","sourcecode":"((bigInt.bitLength()) % 8) == 0"},"failures":[28,29],"tindex":"b0e47c0b-2eb9-11e6-97ea-c3754122bb1b","method":{"position":"org.apache.commons.codec.binary.Base64:748","type":"CtMethodImpl","sourcecode":"static byte[] toIntegerBytes(final java.math.BigInteger bigInt) {\n    if (((bigInt.bitLength()) % 8) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = bigInt.bitLength();\n            bitlen = ((bitlen + 7) >> 3) << 3;\n            final byte[] byte[] = bigInt.toByteArray();\n            if ((((bigInt.bitLength()) % 8) != 0) && ((((bigInt.bitLength()) / 8) + 1) == (bitlen / 8))) {\n                return bigBytes;\n            } \n            int int = 0;\n            int int = bigBytes.int;\n            if (((bigInt.bitLength()) % 8) == 0) {\n                startSrc = 1;\n                len--;\n            } \n            final int int = (bitlen / 8) - len;\n            final byte[] byte[] = new byte[bitlen / 8];\n            java.lang.System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n            return resizedBytes;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bigInt":"bigInt"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[159,160],"tindex":"b0e47c0c-2eb9-11e6-97ea-6d71308c6798","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:268","type":"CtMethodImpl","sourcecode":"public static char[] toAsciiChars(final byte[] raw) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.char[];\n            } \n            final char[] char[] = new char[(raw.int) << 3];\n            for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n                for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                    if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n                        l_ascii[(jj - bits)] = '0';\n                    } else {\n                        l_ascii[(jj - bits)] = '1';\n                    }\n                }\n            }\n            return l_ascii;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:203","type":"CtUnaryOperatorImpl","sourcecode":"!(obj instanceof java.lang.String)"},"failures":[161],"tindex":"b0e4a31d-2eb9-11e6-97ea-235673a0f666","method":{"position":"org.apache.commons.codec.language.Nysiis:210","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (!(obj instanceof java.lang.String)) {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\");\n            } \n            return org.apache.commons.codec.language.Nysiis.this.nysiis(((java.lang.String)(obj)));\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtBinaryOperatorImpl","sourcecode":"input == null"},"failures":[10,11,162,163,153,61,164,165,154,155,12,13,14,166,156,167,168,157],"tindex":"b0e4a31e-2eb9-11e6-97ea-ffad2b1f0e2e","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:888","type":"CtMethodImpl","sourcecode":"private java.lang.String cleanInput(java.lang.String input) {\n    if (input == null) {\n        {\n            if (input == null) {\n                return null;\n            } \n            input = input.trim();\n            if ((input.length()) == 0) {\n                return null;\n            } \n            return input.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl","sourcecode":"((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))"},"failures":[],"tindex":"b0e4a31f-2eb9-11e6-97ea-e755867b6ccc","method":{"position":"org.apache.commons.codec.language.bm.Rule:531","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:704","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WR\")"},"failures":[10,11,12,13],"tindex":"b0e4c930-2eb9-11e6-97ea-99d9b4397a5c","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:647","type":"CtMethodImpl","sourcecode":"private int handleSC(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WR\")) {\n        {\n            if ((charAt(value, (index + 2))) == 'H') {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n                        result.append(\"X\", \"SK\");\n                    } else {\n                        result.append(\"SK\");\n                    }\n                } else {\n                    if (((index == 0) && (!(isVowel(charAt(value, 3))))) && ((charAt(value, 3)) != 'W')) {\n                        result.append('X', 'S');\n                    } else {\n                        result.append('X');\n                    }\n                }\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n                result.append('S');\n            } else {\n                result.append(\"SK\");\n            }\n            return index + 3;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:176","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[169],"tindex":"b0e4c931-2eb9-11e6-97ea-5914e75dd48c","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:596","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException {\n    if (str == null) {\n        throw new java.io.UnsupportedEncodingException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:265","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[89,170,90,171,94],"tindex":"b0e4c932-2eb9-11e6-97ea-0982e0a09b86","method":{"position":"org.apache.commons.codec.net.URLCodec:243","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            try {\n                return encode(str, getDefaultCharset());\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:326","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[],"tindex":"b0e4f043-2eb9-11e6-97ea-1bf7561f2ce0","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:291","type":"CtMethodImpl","sourcecode":"int readResults(final byte[] b, final int bPos, final int bAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (bPos < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((context.byte[]) != null) {\n                final int int = java.lang.Math.min(available(context), bAvail);\n                java.lang.System.arraycopy(context.byte[], context.int, b, bPos, len);\n                context.int += len;\n                if ((context.int) >= (context.int)) {\n                    context.byte[] = null;\n                } \n                return len;\n            } \n            return context.boolean ? org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int : 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"bPos"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[107],"tindex":"b0e4f044-2eb9-11e6-97ea-778260948902","method":{"position":"org.apache.commons.codec.binary.StringUtils:180","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16(final java.lang.String string) {\n    if (string == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (string == null) {\n                {\n                    return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:138","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[10,11,61,12,13,14],"tindex":"b0e51755-2eb9-11e6-97ea-750ac3140c15","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:978","type":"CtMethodImpl","sourcecode":"public void appendPrimary(final java.lang.String value) {\n    if (value == null) {\n        {\n            final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length());\n            if ((value.length()) <= addChars) {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n            } else {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"b0e51756-2eb9-11e6-97ea-8f152de29e01","method":{"position":"org.apache.commons.codec.binary.StringUtils:302","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringIso8859_1(final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (bytes == null) {\n                        {\n                            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:528","type":"CtBinaryOperatorImpl","sourcecode":"obj == null"},"failures":[172],"tindex":"b0e51757-2eb9-11e6-97ea-b9bfec41163a","method":{"position":"org.apache.commons.codec.language.Metaphone:388","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj == null) {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n            } \n            return metaphone(((java.lang.String)(obj)));\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtBinaryOperatorImpl","sourcecode":"accentedWord == null"},"failures":[173],"tindex":"b0e53e68-2eb9-11e6-97ea-772901726e2d","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:351","type":"CtMethodImpl","sourcecode":"java.lang.String removeAccents(final java.lang.String accentedWord) {\n    if (accentedWord == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (accentedWord == null) {\n                return null;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            final int int = accentedWord.length();\n            for (int int = 0 ; i < n ; i++) {\n                final char char = accentedWord.charAt(i);\n                final int int = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.indexOf(c);\n                if (pos > (-1)) {\n                    sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(pos));\n                } else {\n                    sb.append(c);\n                }\n            }\n            return sb.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"accentedWord":"accentedWord"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:138","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1,2,3],"tindex":"b0e53e69-2eb9-11e6-97ea-1beceb4f9fd0","method":{"position":"org.apache.commons.codec.net.BCodec:176","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String value) throws org.apache.commons.codec.DecoderException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return null;\n            } \n            try {\n                return org.apache.commons.codec.net.BCodec.this.decodeText(value);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:413","type":"CtUnaryOperatorImpl","sourcecode":"!(obj instanceof java.lang.String)"},"failures":[18,27],"tindex":"b0e53e6a-2eb9-11e6-97ea-41bbff50e1e2","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:376","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object obj) throws org.apache.commons.codec.DecoderException {\n    if (!(obj instanceof java.lang.String)) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (obj instanceof byte[]) {\n                return decode(((byte[])(obj)));\n            } else if (obj instanceof java.lang.String) {\n                return decode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[],"tindex":"b0e5657b-2eb9-11e6-97ea-b572d7d3dcfb","method":{"position":"org.apache.commons.codec.binary.StringUtils:180","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16(final java.lang.String string) {\n    if (string == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (string == null) {\n                {\n                    return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:440","type":"CtBinaryOperatorImpl","sourcecode":"inAvail < 0"},"failures":[1,2,174,175,16,176,177,178,17,179,180,181,182,183,184,185,24,25,26,27,28,29,30,31,186,32,33,34,187,188,39,189,41,130,43,190,131,45,132,48,53,191,56,192,193,60],"tindex":"b0e5657c-2eb9-11e6-97ea-8f55138edc2f","method":{"position":"org.apache.commons.codec.binary.Base64:331","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid encode(final byte[] in, int inPos, final int inAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (inAvail < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (context.boolean) {\n                return ;\n            } \n            if (inAvail < 0) {\n                context.boolean = true;\n                if ((0 == (context.int)) && ((int) == 0)) {\n                    return ;\n                } \n                final byte[] byte[] = ensureBufferSize(int, context);\n                final int int = context.int;\n                switch (context.int) {\n                    case 0 :\n                        break;\n                    case 1 :\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][(((context.int) << 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n                            buffer[((context.int)++)] = byte;\n                            buffer[((context.int)++)] = byte;\n                        } \n                        break;\n                    case 2 :\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 10) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][(((context.int) << 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n                            buffer[((context.int)++)] = byte;\n                        } \n                        break;\n                    default :\n                        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n                }\n                context.int += (context.int) - savedPos;\n                if (((int) > 0) && ((context.int) > 0)) {\n                    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                    context.int += byte[].int;\n                } \n            } else {\n                for (int int = 0 ; i < inAvail ; i++) {\n                    final byte[] byte[] = ensureBufferSize(int, context);\n                    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n                    int int = in[(inPos++)];\n                    if (b < 0) {\n                        b += 256;\n                    } \n                    context.int = ((context.int) << 8) + b;\n                    if (0 == (context.int)) {\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 12) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n                        context.int += org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n                        if (((int) > 0) && ((int) <= (context.int))) {\n                            java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                            context.int += byte[].int;\n                            context.int = 0;\n                        } \n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inAvail":"inAvail"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[4,5,6,7,8],"tindex":"b0e5b39d-2eb9-11e6-97ea-c73420f198b0","method":{"position":"org.apache.commons.codec.net.QCodec:169","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doDecoding(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            boolean boolean = false;\n            for (final byte byte : bytes) {\n                if (b == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                    hasUnderscores = true;\n                    break;\n                } \n            }\n            if (hasUnderscores) {\n                final byte[] byte[] = new byte[bytes.int];\n                for (int int = 0 ; i < (bytes.int) ; i++) {\n                    final byte byte = bytes[i];\n                    if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                        tmp[i] = b;\n                    } else {\n                        tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n                    }\n                }\n                return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp);\n            } \n            return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[],"tindex":"b0e5b39e-2eb9-11e6-97ea-4d0a5ede2c27","method":{"position":"org.apache.commons.codec.binary.StringUtils:216","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16Le(final java.lang.String string) {\n    if (string == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b0e5b39f-2eb9-11e6-97ea-4b3c20ab14e2","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:987","type":"CtMethodImpl","sourcecode":"public void appendAlternate(final java.lang.String value) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        {\n            if (value == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length());\n                            if ((value.length()) <= addChars) {\n                                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n                            } else {\n                                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtUnaryOperatorImpl","sourcecode":"!(ph.endsWith(\")\"))"},"failures":[],"tindex":"b0e5dab0-2eb9-11e6-97ea-b960660e0eb8","method":{"position":"org.apache.commons.codec.language.bm.Rule:365","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.codec.language.bm.Rule.Phoneme parsePhoneme(final java.lang.String ph) {\n    if (!(ph.endsWith(\")\"))) {\n        {\n            final int int = ph.indexOf(\"[\");\n            if (open >= 0) {\n                if (!(ph.endsWith(\"]\"))) {\n                    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n                } \n                final java.lang.String java.lang.String = ph.substring(0, open);\n                final java.lang.String java.lang.String = ph.substring((open + 1), ((ph.length()) - 1));\n                final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(in.split(\"[+]\")));\n                return new org.apache.commons.codec.language.bm.Rule.Phoneme(before , org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs));\n            } else {\n                return new org.apache.commons.codec.language.bm.Rule.Phoneme(ph , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ph":"ph"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:379","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.lang.String"},"failures":[194],"tindex":"b0e601c1-2eb9-11e6-97ea-1f975cccae9d","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:133","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof java.lang.String) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj instanceof java.lang.String) {\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (!(obj instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n                    } \n                    return soundex(((java.lang.String)(obj)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:470","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[],"tindex":"b0e601c2-2eb9-11e6-97ea-dd2949e00a8a","method":{"position":"org.apache.commons.codec.language.Metaphone:338","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final java.lang.StringBuilder string, final int index) {\n    if (index == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(string.charAt(index))) >= 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:264","type":"CtBinaryOperatorImpl","sourcecode":"n > 0"},"failures":[195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218],"tindex":"b0e628d3-2eb9-11e6-97ea-27c2aa58ce89","method":{"position":"org.apache.commons.codec.language.Metaphone:370","type":"CtMethodImpl","sourcecode":"private boolean isLastChar(final int wdsz, final int n) {\n    if (n > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (n + 1) == wdsz;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"b0e628d4-2eb9-11e6-97ea-dbdf325d9e67","method":{"position":"org.apache.commons.codec.language.Caverphone:57","type":"CtMethodImpl","sourcecode":"public java.lang.String caverphone(final java.lang.String source) {\n    if (source == null) {\n        {\n            return org.apache.commons.codec.language.Caverphone.this.org.apache.commons.codec.language.Caverphone2.encode(source);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isWhitespace(ch)"},"failures":[],"tindex":"b0e628d5-2eb9-11e6-97ea-3d0d34bf746d","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:194","type":"CtMethodImpl","sourcecode":"private boolean isVowel(final char ch) {\n    if (java.lang.Character.isWhitespace(ch)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((((ch == 'a') || (ch == 'e')) || (ch == 'i')) || (ch == 'o')) || (ch == 'u');\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"b0e628d6-2eb9-11e6-97ea-a5a962c2a946","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:133","type":"CtMethodImpl","sourcecode":"private static java.lang.String sha2Crypt(final byte[] keyBytes, final java.lang.String salt, final java.lang.String saltPrefix, final int blocksize, final java.lang.String algorithm) {\n    if (algorithm == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = keyBytes.int;\n            int int = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int;\n            boolean boolean = false;\n            if (salt == null) {\n                throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n            } \n            final java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.util.regex.Pattern.matcher(salt);\n            if ((m == null) || (!(m.find()))) {\n                throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n            } \n            if ((m.group(3)) != null) {\n                rounds = java.lang.Integer.parseInt(m.group(3));\n                rounds = java.lang.Math.max(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, java.lang.Math.min(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, rounds));\n                roundsCustom = true;\n            } \n            final java.lang.String java.lang.String = m.group(4);\n            final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n            final int int = saltBytes.int;\n            java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n            ctx.update(keyBytes);\n            ctx.update(saltBytes);\n            java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n            altCtx.update(keyBytes);\n            altCtx.update(saltBytes);\n            altCtx.update(keyBytes);\n            byte[] byte[] = altCtx.digest();\n            int int = keyBytes.int;\n            while (cnt > blocksize) {\n                ctx.update(altResult, 0, blocksize);\n                cnt -= blocksize;\n            }\n            ctx.update(altResult, 0, cnt);\n            cnt = keyBytes.int;\n            while (cnt > 0) {\n                if ((cnt & 1) != 0) {\n                    ctx.update(altResult, 0, blocksize);\n                } else {\n                    ctx.update(keyBytes);\n                }\n                cnt >>= 1;\n            }\n            altResult = ctx.digest();\n            altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n            for (int int = 1 ; i <= keyLen ; i++) {\n                altCtx.update(keyBytes);\n            }\n            byte[] byte[] = altCtx.digest();\n            final byte[] byte[] = new byte[keyLen];\n            int int = 0;\n            while (cp < (keyLen - blocksize)) {\n                java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n                cp += blocksize;\n            }\n            java.lang.System.arraycopy(tempResult, 0, pBytes, cp, (keyLen - cp));\n            altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n            for (int int = 1 ; i <= (16 + ((altResult[0]) & 255)) ; i++) {\n                altCtx.update(saltBytes);\n            }\n            tempResult = altCtx.digest();\n            final byte[] byte[] = new byte[saltLen];\n            cp = 0;\n            while (cp < (saltLen - blocksize)) {\n                java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n                cp += blocksize;\n            }\n            java.lang.System.arraycopy(tempResult, 0, sBytes, cp, (saltLen - cp));\n            for (int int = 0 ; i <= (rounds - 1) ; i++) {\n                ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n                if ((i & 1) != 0) {\n                    ctx.update(pBytes, 0, keyLen);\n                } else {\n                    ctx.update(altResult, 0, blocksize);\n                }\n                if ((i % 3) != 0) {\n                    ctx.update(sBytes, 0, saltLen);\n                } \n                if ((i % 7) != 0) {\n                    ctx.update(pBytes, 0, keyLen);\n                } \n                if ((i & 1) != 0) {\n                    ctx.update(altResult, 0, blocksize);\n                } else {\n                    ctx.update(pBytes, 0, keyLen);\n                }\n                altResult = ctx.digest();\n            }\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(saltPrefix);\n            if (roundsCustom) {\n                buffer.append(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String);\n                buffer.append(rounds);\n                buffer.append(\"$\");\n            } \n            buffer.append(saltString);\n            buffer.append(\"$\");\n            if (blocksize == 32) {\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[13], altResult[23], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), altResult[31], altResult[30], 3, buffer);\n            } else {\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer);\n                org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), altResult[63], 2, buffer);\n            }\n            java.util.Arrays.fill(tempResult, ((byte)(0)));\n            java.util.Arrays.fill(pBytes, ((byte)(0)));\n            java.util.Arrays.fill(sBytes, ((byte)(0)));\n            ctx.reset();\n            altCtx.reset();\n            java.util.Arrays.fill(keyBytes, ((byte)(0)));\n            java.util.Arrays.fill(saltBytes, ((byte)(0)));\n            return buffer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"algorithm"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:782","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHIA\")"},"failures":[10,11,61,155,12,13,14],"tindex":"b0e69e07-2eb9-11e6-97ea-97f58ea84373","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:550","type":"CtMethodImpl","sourcecode":"private int handleL(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHIA\")) {\n        {\n            if ((charAt(value, (index + 1))) == 'L') {\n                if (conditionL0(value, index)) {\n                    result.appendPrimary('L');\n                } else {\n                    result.append('L');\n                }\n                index += 2;\n            } else {\n                index++;\n                result.append('L');\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[3],"tindex":"b0e69e08-2eb9-11e6-97ea-7bc42f869ba5","method":{"position":"org.apache.commons.codec.net.BCodec:221","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object value) throws org.apache.commons.codec.DecoderException {\n    if (value == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (value == null) {\n                return null;\n            } else if (value instanceof java.lang.String) {\n                return decode(((java.lang.String)(value)));\n            } else {\n                throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:406","type":"CtUnaryOperatorImpl","sourcecode":"!(object instanceof java.lang.String)"},"failures":[129,219],"tindex":"b0e6c519-2eb9-11e6-97ea-3190e02aab57","method":{"position":"org.apache.commons.codec.binary.Hex:295","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object object) throws org.apache.commons.codec.EncoderException {\n    if (!(object instanceof java.lang.String)) {\n        {\n            try {\n                final byte[] byte[] = object instanceof java.lang.String ? ((java.lang.String)(object)).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset()) : ((byte[])(object));\n                return org.apache.commons.codec.binary.Hex.encodeHex(byteArray);\n            } catch (final java.lang.ClassCastException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:506","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.lang.String"},"failures":[],"tindex":"b0e6c51a-2eb9-11e6-97ea-9d9d44a47f85","method":{"position":"org.apache.commons.codec.language.Caverphone:73","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof java.lang.String) {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n            } \n            return org.apache.commons.codec.language.Caverphone.this.caverphone(((java.lang.String)(obj)));\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:614","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"SIO\", \"SIA\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"SIAN\"))"},"failures":[],"tindex":"b0e6c51b-2eb9-11e6-97ea-2f3a72270bc8","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:355","type":"CtMethodImpl","sourcecode":"private int handleCH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n    if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"SIO\", \"SIA\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"SIAN\"))) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))) {\n                        result.append('K', 'X');\n                        return index + 2;\n                    } else if (conditionCH0(value, index)) {\n                        result.append('K');\n                        return index + 2;\n                    } else if (conditionCH1(value, index)) {\n                        result.append('K');\n                        return index + 2;\n                    } else {\n                        if (index > 0) {\n                            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n                                result.append('K');\n                            } else {\n                                result.append('X', 'K');\n                            }\n                        } else {\n                            result.append('X');\n                        }\n                        return index + 2;\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:332","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"H\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"HU\")))"},"failures":[10,11,61,12,13,14],"tindex":"b0e6ec2c-2eb9-11e6-97ea-d9daae51056a","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:703","type":"CtMethodImpl","sourcecode":"private int handleW(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"H\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"HU\")))) {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WR\")) {\n                result.append('R');\n                index += 2;\n            } else {\n                if ((index == 0) && ((isVowel(charAt(value, (index + 1)))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WH\")))) {\n                    if (isVowel(charAt(value, (index + 1)))) {\n                        result.append('A', 'F');\n                    } else {\n                        result.append('A');\n                    }\n                    index++;\n                } else if ((((index == ((value.length()) - 1)) && (isVowel(charAt(value, (index - 1))))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n                    result.appendAlternate('F');\n                    index++;\n                } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n                    result.append(\"TS\", \"FX\");\n                    index += 4;\n                } else {\n                    index++;\n                }\n            }\n            return index;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[220],"tindex":"b0e7133d-2eb9-11e6-97ea-a1b15158793d","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:82","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] raw) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n        {\n            return org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(raw);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"b0e7133e-2eb9-11e6-97ea-a3d5ded653d2","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:97","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object raw) throws org.apache.commons.codec.EncoderException {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(raw instanceof byte[])) {\n                throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\");\n            } \n            return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:136","type":"CtBinaryOperatorImpl","sourcecode":"b == ' '"},"failures":[],"tindex":"b0e7133f-2eb9-11e6-97ea-8b3971f1072c","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:220","type":"CtMethodImpl","sourcecode":"private static int encodeByte(final int b, final boolean encode, final java.io.ByteArrayOutputStream buffer) {\n    if (b == ' ') {\n        {\n            if (encode) {\n                {\n                    if (encode) {\n                        return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n                    } else {\n                        buffer.write(b);\n                        return 1;\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:486","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[221],"tindex":"b0e71340-2eb9-11e6-97ea-719c3bde6781","method":{"position":"org.apache.commons.codec.language.Caverphone2:45","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if (source == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.String java.lang.String = source;\n            if ((txt == null) || ((txt.length()) == 0)) {\n                return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n            } \n            txt = txt.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            txt = txt.replaceAll(\"[^a-z]\", \"\");\n            txt = txt.replaceAll(\"e$\", \"\");\n            txt = txt.replaceAll(\"^cough\", \"cou2f\");\n            txt = txt.replaceAll(\"^rough\", \"rou2f\");\n            txt = txt.replaceAll(\"^tough\", \"tou2f\");\n            txt = txt.replaceAll(\"^enough\", \"enou2f\");\n            txt = txt.replaceAll(\"^trough\", \"trou2f\");\n            txt = txt.replaceAll(\"^gn\", \"2n\");\n            txt = txt.replaceAll(\"mb$\", \"m2\");\n            txt = txt.replaceAll(\"cq\", \"2q\");\n            txt = txt.replaceAll(\"ci\", \"si\");\n            txt = txt.replaceAll(\"ce\", \"se\");\n            txt = txt.replaceAll(\"cy\", \"sy\");\n            txt = txt.replaceAll(\"tch\", \"2ch\");\n            txt = txt.replaceAll(\"c\", \"k\");\n            txt = txt.replaceAll(\"q\", \"k\");\n            txt = txt.replaceAll(\"x\", \"k\");\n            txt = txt.replaceAll(\"v\", \"f\");\n            txt = txt.replaceAll(\"dg\", \"2g\");\n            txt = txt.replaceAll(\"tio\", \"sio\");\n            txt = txt.replaceAll(\"tia\", \"sia\");\n            txt = txt.replaceAll(\"d\", \"t\");\n            txt = txt.replaceAll(\"ph\", \"fh\");\n            txt = txt.replaceAll(\"b\", \"p\");\n            txt = txt.replaceAll(\"sh\", \"s2\");\n            txt = txt.replaceAll(\"z\", \"s\");\n            txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n            txt = txt.replaceAll(\"[aeiou]\", \"3\");\n            txt = txt.replaceAll(\"j\", \"y\");\n            txt = txt.replaceAll(\"^y3\", \"Y3\");\n            txt = txt.replaceAll(\"^y\", \"A\");\n            txt = txt.replaceAll(\"y\", \"3\");\n            txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n            txt = txt.replaceAll(\"gh\", \"22\");\n            txt = txt.replaceAll(\"g\", \"k\");\n            txt = txt.replaceAll(\"s+\", \"S\");\n            txt = txt.replaceAll(\"t+\", \"T\");\n            txt = txt.replaceAll(\"p+\", \"P\");\n            txt = txt.replaceAll(\"k+\", \"K\");\n            txt = txt.replaceAll(\"f+\", \"F\");\n            txt = txt.replaceAll(\"m+\", \"M\");\n            txt = txt.replaceAll(\"n+\", \"N\");\n            txt = txt.replaceAll(\"w3\", \"W3\");\n            txt = txt.replaceAll(\"wh3\", \"Wh3\");\n            txt = txt.replaceAll(\"w$\", \"3\");\n            txt = txt.replaceAll(\"w\", \"2\");\n            txt = txt.replaceAll(\"^h\", \"A\");\n            txt = txt.replaceAll(\"h\", \"2\");\n            txt = txt.replaceAll(\"r3\", \"R3\");\n            txt = txt.replaceAll(\"r$\", \"3\");\n            txt = txt.replaceAll(\"r\", \"2\");\n            txt = txt.replaceAll(\"l3\", \"L3\");\n            txt = txt.replaceAll(\"l$\", \"3\");\n            txt = txt.replaceAll(\"l\", \"2\");\n            txt = txt.replaceAll(\"2\", \"\");\n            txt = txt.replaceAll(\"3$\", \"A\");\n            txt = txt.replaceAll(\"3\", \"\");\n            txt = txt + (org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String);\n            return txt.substring(0, org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String.length());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[222,223],"tindex":"b0e73a51-2eb9-11e6-97ea-5b9135b75e05","method":{"position":"org.apache.commons.codec.digest.HmacUtils:62","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacMd5(final byte[] key) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:225","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242],"tindex":"b0e76162-2eb9-11e6-97ea-f55fe9d0b4f0","method":{"position":"org.apache.commons.codec.language.Soundex:166","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (str == null) {\n        {\n            return soundex(str);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:69","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"b0e76163-2eb9-11e6-97ea-e7b59358ffbb","method":{"position":"org.apache.commons.codec.net.RFC1522Codec:124","type":"CtMethodImpl","sourcecode":"protected java.lang.String decodeText(final java.lang.String text) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if (text == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (text == null) {\n                {\n                    if (text == null) {\n                        return null;\n                    } \n                    if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)))) {\n                        throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n                    } \n                    final int int = (text.length()) - 2;\n                    int int = 2;\n                    int int = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from);\n                    if (to == terminator) {\n                        throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n                    } \n                    final java.lang.String java.lang.String = text.substring(from, to);\n                    if (charset.equals(\"\")) {\n                        throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n                    } \n                    from = to + 1;\n                    to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from);\n                    if (to == terminator) {\n                        throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n                    } \n                    final java.lang.String java.lang.String = text.substring(from, to);\n                    if (!(getEncoding().equalsIgnoreCase(encoding))) {\n                        throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"));\n                    } \n                    from = to + 1;\n                    to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from);\n                    byte[] byte[] = org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(text.substring(from, to));\n                    data = doDecoding(data);\n                    return new java.lang.String(data , charset);\n                }\n            } else {\n                throw new java.io.UnsupportedEncodingException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"text"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:803","type":"CtBinaryOperatorImpl","sourcecode":"(!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))"},"failures":[],"tindex":"b0e78874-2eb9-11e6-97ea-1def9b00313d","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:355","type":"CtMethodImpl","sourcecode":"private int handleCH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n    if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"SIO\", \"SIA\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"SIAN\"))) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))) {\n                        result.append('K', 'X');\n                        return index + 2;\n                    } else if (conditionCH0(value, index)) {\n                        result.append('K');\n                        return index + 2;\n                    } else if (conditionCH1(value, index)) {\n                        result.append('K');\n                        return index + 2;\n                    } else {\n                        if (index > 0) {\n                            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n                                result.append('K');\n                            } else {\n                                result.append('X', 'K');\n                            }\n                        } else {\n                            result.append('X');\n                        }\n                        return index + 2;\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl","sourcecode":"((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))"},"failures":[],"tindex":"b0e78875-2eb9-11e6-97ea-45345a4cdd66","method":{"position":"org.apache.commons.codec.language.bm.Rule:539","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((input.length()) == 0) {\n                {\n                    return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:264","type":"CtBinaryOperatorImpl","sourcecode":"n > 0"},"failures":[243,244,245,246],"tindex":"b0e78876-2eb9-11e6-97ea-6f0f6a7381ee","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:405","type":"CtMethodImpl","sourcecode":"private static void permOp(int a, int b, final int n, final int m, final int[] results) {\n    if (a > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = ((a >>> n) ^ b) & m;\n            a ^= t << n;\n            b ^= t;\n            results[0] = a;\n            results[1] = b;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"a"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:218","type":"CtBinaryOperatorImpl","sourcecode":"((name1.length()) == 1) || ((name2.length()) == 1)"},"failures":[247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291],"tindex":"b0e7af87-2eb9-11e6-97ea-9d6bae139452","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:212","type":"CtMethodImpl","sourcecode":"public boolean isEncodeEquals(java.lang.String name1, java.lang.String name2) {\n    if (((name1.length()) == 1) || ((name2.length()) == 1)) {\n        {\n            if (((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) {\n                return false;\n            } else if (((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) {\n                return false;\n            } else if (((name1.length()) == 1) || ((name2.length()) == 1)) {\n                return false;\n            } else if (name1.equalsIgnoreCase(name2)) {\n                return true;\n            } \n            name1 = cleanName(name1);\n            name2 = cleanName(name2);\n            name1 = removeVowels(name1);\n            name2 = removeVowels(name2);\n            name1 = removeDoubleConsonants(name1);\n            name2 = removeDoubleConsonants(name2);\n            name1 = getFirst3Last3(name1);\n            name2 = getFirst3Last3(name2);\n            if ((java.lang.Math.abs(((name1.length()) - (name2.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                return false;\n            } \n            final int int = java.lang.Math.abs(((name1.length()) + (name2.length())));\n            int int = 0;\n            minRating = getMinRating(sumLength);\n            final int int = leftToRightThenRightToLeftProcessing(name1, name2);\n            return count >= minRating;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"name2","name1":"name1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:192","type":"CtBinaryOperatorImpl","sourcecode":"n < 0"},"failures":[121,138],"tindex":"b0e7af88-2eb9-11e6-97ea-0775461b81af","method":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:191","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(final long n) throws java.io.IOException {\n    if (n < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (n < 0) {\n                throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n));\n            } \n            final byte[] byte[] = new byte[512];\n            long long = n;\n            while (todo > 0) {\n                int int = ((int)(java.lang.Math.min(b.int, todo)));\n                len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len);\n                if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n                    break;\n                } \n                todo -= len;\n            }\n            return n - todo;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.Soundex:259","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[88,89,90,92,94],"tindex":"b0e7d699-2eb9-11e6-97ea-8f2aad343950","method":{"position":"org.apache.commons.codec.net.URLCodec:288","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String str) throws org.apache.commons.codec.DecoderException {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            try {\n                return decode(str, getDefaultCharset());\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[292,293,294,295,296,297,298,243,246,299,300],"tindex":"b0e7d69a-2eb9-11e6-97ea-47f5e244e9a3","method":{"position":"org.apache.commons.codec.digest.Crypt:65","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final byte[] keyBytes, final java.lang.String salt) {\n    if (salt == null) {\n        {\n            if (salt == null) {\n                return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes);\n            } else if (salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)) {\n                return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes, salt);\n            } else if (salt.startsWith(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)) {\n                return org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(keyBytes, salt);\n            } else if (salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)) {\n                return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt);\n            } else {\n                return org.apache.commons.codec.digest.UnixCrypt.crypt(keyBytes, salt);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[243,244,245,246],"tindex":"b0e7fdab-2eb9-11e6-97ea-4f17b6794682","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:338","type":"CtMethodImpl","sourcecode":"private static int[] desSetKey(final byte[] key) {\n    if (key == null) {\n        {\n            final int[] int[] = new int[32];\n            int int = org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(key, 0);\n            int int = org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(key, 4);\n            final int[] int[] = new int[2];\n            org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 4, 252645135, results);\n            d = results[0];\n            c = results[1];\n            c = org.apache.commons.codec.digest.UnixCrypt.hPermOp(c, (-2), -859045888);\n            d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888);\n            org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results);\n            d = results[0];\n            c = results[1];\n            org.apache.commons.codec.digest.UnixCrypt.permOp(c, d, 8, 16711935, results);\n            c = results[0];\n            d = results[1];\n            org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results);\n            d = results[0];\n            c = results[1];\n            d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4);\n            c &= 268435455;\n            int int = 0;\n            for (int int = 0 ; i < 16 ; i++) {\n                if (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.boolean[][i]) {\n                    c = (c >>> 2) | (c << 26);\n                    d = (d >>> 2) | (d << 26);\n                } else {\n                    c = (c >>> 1) | (c << 27);\n                    d = (d >>> 1) | (d << 27);\n                }\n                c &= 268435455;\n                d &= 268435455;\n                int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(c & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(((c >>> 6) & 3) | ((c >>> 7) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][(((c >>> 13) & 15) | ((c >>> 14) & 48))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((((c >>> 20) & 1) | ((c >>> 21) & 6)) | ((c >>> 22) & 56))]);\n                final int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][(d & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][(((d >>> 7) & 3) | ((d >>> 8) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((d >>> 15) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][(((d >>> 21) & 15) | ((d >>> 22) & 48))]);\n                schedule[(j++)] = (t << 16) | (s & 65535);\n                s = (s >>> 16) | (t & -65536);\n                s = (s << 4) | (s >>> 28);\n                schedule[(j++)] = s;\n            }\n            return schedule;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:337","type":"CtBinaryOperatorImpl","sourcecode":"inAvail < 0"},"failures":[],"tindex":"b0e824bc-2eb9-11e6-97ea-d7e0e0535d2c","method":{"position":"org.apache.commons.codec.binary.Base32:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid encode(final byte[] in, int inPos, final int inAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (inPos < 0) {\n        {\n            if (inPos < 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (context.boolean) {\n                        return ;\n                    } \n                    if (inAvail < 0) {\n                        context.boolean = true;\n                        if ((0 == (context.int)) && ((int) == 0)) {\n                            return ;\n                        } \n                        final byte[] byte[] = ensureBufferSize(int, context);\n                        final int int = context.int;\n                        switch (context.int) {\n                            case 0 :\n                                break;\n                            case 1 :\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) << 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte;\n                                buffer[((context.int)++)] = byte;\n                                buffer[((context.int)++)] = byte;\n                                buffer[((context.int)++)] = byte;\n                                buffer[((context.int)++)] = byte;\n                                buffer[((context.int)++)] = byte;\n                                break;\n                            case 2 :\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 11))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 6))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) << 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte;\n                                buffer[((context.int)++)] = byte;\n                                buffer[((context.int)++)] = byte;\n                                buffer[((context.int)++)] = byte;\n                                break;\n                            case 3 :\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 19))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 14))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 9))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) << 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte;\n                                buffer[((context.int)++)] = byte;\n                                buffer[((context.int)++)] = byte;\n                                break;\n                            case 4 :\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 27))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 22))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 17))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 12))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 7))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) << 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte;\n                                break;\n                            default :\n                                throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n                        }\n                        context.int += (context.int) - savedPos;\n                        if (((int) > 0) && ((context.int) > 0)) {\n                            java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                            context.int += byte[].int;\n                        } \n                    } else {\n                        for (int int = 0 ; i < inAvail ; i++) {\n                            final byte[] byte[] = ensureBufferSize(int, context);\n                            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n                            int int = in[(inPos++)];\n                            if (b < 0) {\n                                b += 256;\n                            } \n                            context.long = ((context.long) << 8) + b;\n                            if (0 == (context.int)) {\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 30))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 25))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 20))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 15))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 5))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(context.long)) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                context.int += org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int;\n                                if (((int) > 0) && ((int) <= (context.int))) {\n                                    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                                    context.int += byte[].int;\n                                    context.int = 0;\n                                } \n                            } \n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inAvail":"inPos"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"b0e872dd-2eb9-11e6-97ea-894e1fa7c447","method":{"position":"org.apache.commons.codec.binary.StringUtils:366","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf16Le(final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[],"tindex":"b0e872de-2eb9-11e6-97ea-abcf71c3543d","method":{"position":"org.apache.commons.codec.digest.Crypt:148","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final java.lang.String key, final java.lang.String salt) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.Crypt.crypt(key.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"key"},"type":"special","returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[301],"tindex":"b0e872df-2eb9-11e6-97ea-5b1a2ae87308","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:352","type":"CtMethodImpl","sourcecode":"public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n            for (int int = 0 ; i < (bytes.int) ; i++) {\n                final int int = bytes[i];\n                if (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n                    try {\n                        if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n                            continue;\n                        } \n                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                        buffer.write(((char)((u << 4) + l)));\n                    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n                        throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n                    }\n                } else if ((b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n                    buffer.write(b);\n                } \n            }\n            return buffer.toByteArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[87,89,170,90,171,94],"tindex":"b0e899f0-2eb9-11e6-97ea-5d1755927ff4","method":{"position":"org.apache.commons.codec.net.URLCodec:193","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            return org.apache.commons.codec.net.URLCodec.encodeUrl(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet, bytes);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[69],"tindex":"b0e899f1-2eb9-11e6-97ea-87e47de7af04","method":{"position":"org.apache.commons.codec.digest.HmacUtils:601","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha384Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:153","type":"CtBinaryOperatorImpl","sourcecode":"ascii == null"},"failures":[302],"tindex":"b0e8c102-2eb9-11e6-97ea-afd0ed354de9","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:152","type":"CtMethodImpl","sourcecode":"public byte[] toByteArray(final java.lang.String ascii) {\n    if (ascii == null) {\n        {\n            if (ascii == null) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii.toCharArray());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"ascii"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[141,303,142,143,144,145,146,147,148,149,304,305,306,307,308,309],"tindex":"b0e8c103-2eb9-11e6-97ea-efd596f62ce7","method":{"position":"org.apache.commons.codec.language.bm.Lang:214","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Languages.LanguageSet guessLanguages(final java.lang.String input) {\n    if ((input.length()) == 0) {\n        {\n            final java.lang.String java.lang.String = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(org.apache.commons.codec.language.bm.Lang.this.org.apache.commons.codec.language.bm.Languages.getLanguages());\n            for (final org.apache.commons.codec.language.bm.Lang.LangRule org.apache.commons.codec.language.bm.Lang.LangRule : org.apache.commons.codec.language.bm.Lang.this.java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule>) {\n                if (rule.matches(text)) {\n                    if (rule.boolean) {\n                        langs.retainAll(rule.java.util.Set<java.lang.String>);\n                    } else {\n                        langs.removeAll(rule.java.util.Set<java.lang.String>);\n                    }\n                } \n            }\n            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs);\n            return ls.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : ls;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:244","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[4,5,6,310,8],"tindex":"b0e8e814-2eb9-11e6-97ea-8b1ca84a45c5","method":{"position":"org.apache.commons.codec.net.QCodec:207","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.nio.charset.Charset charset) throws org.apache.commons.codec.EncoderException {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            return encodeText(str, charset);\n        }\n    } else {\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[141,303,142,143,144,145,146,147,148,305,306,307,309],"tindex":"b0e8e815-2eb9-11e6-97ea-790571a11253","method":{"position":"org.apache.commons.codec.language.bm.Rule:512","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if ((input.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (input.length()) == 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[311,120,15,312,313,314,315,22,184,316,41,43,190,131,132,48,52,56],"tindex":"b0e8e816-2eb9-11e6-97ea-ddbec57faaf1","method":{"position":"org.apache.commons.codec.binary.StringUtils:256","type":"CtMethodImpl","sourcecode":"private static java.lang.String newString(final byte[] bytes, final java.nio.charset.Charset charset) {\n    if (bytes == null) {\n        {\n            return bytes == null ? null : new java.lang.String(bytes , charset);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b0e8e817-2eb9-11e6-97ea-1f002b94d567","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:915","type":"CtMethodImpl","sourcecode":"protected static boolean contains(final java.lang.String value, final int start, final int length, final java.lang.String... criteria) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = false;\n                    if ((start >= 0) && ((start + length) <= (value.length()))) {\n                        final java.lang.String java.lang.String = value.substring(start, (start + length));\n                        for (final java.lang.String java.lang.String : criteria) {\n                            if (target.equals(element)) {\n                                result = true;\n                                break;\n                            } \n                        }\n                    } \n                    return result;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[73],"tindex":"b0e90f28-2eb9-11e6-97ea-8fa079244798","method":{"position":"org.apache.commons.codec.digest.HmacUtils:658","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha512(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key), valueToDigest).doFinal();\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[317],"tindex":"b0e90f29-2eb9-11e6-97ea-dbe6b78b695c","method":{"position":"org.apache.commons.codec.net.BCodec:100","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doDecoding(final byte[] bytes) {\n    if (bytes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.Base64.decodeBase64(bytes);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:220","type":"CtInvocationImpl","sourcecode":"name1.equalsIgnoreCase(name2)"},"failures":[247,250,318,252,253,254,255,256,257,259,260,262,263,264,265,266,267,319,268,270,271,273,274,275,276,277,278,279,280,282,283,284,285,286,287,288,289,291],"tindex":"b0e90f2a-2eb9-11e6-97ea-790283332557","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:294","type":"CtMethodImpl","sourcecode":"int leftToRightThenRightToLeftProcessing(final java.lang.String name1, final java.lang.String name2) {\n    if (name1.equalsIgnoreCase(name1)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final char[] char[] = name1.toCharArray();\n            final char[] char[] = name2.toCharArray();\n            final int int = (name1.length()) - 1;\n            final int int = (name2.length()) - 1;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            for (int int = 0 ; i < (name1Char.int) ; i++) {\n                if (i > name2Size) {\n                    break;\n                } \n                name1LtRStart = name1.substring(i, (i + 1));\n                name1LtREnd = name1.substring((name1Size - i), ((name1Size - i) + 1));\n                name2RtLStart = name2.substring(i, (i + 1));\n                name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1));\n                if (name1LtRStart.equals(name2RtLStart)) {\n                    name1Char[i] = ' ';\n                    name2Char[i] = ' ';\n                } \n                if (name1LtREnd.equals(name2RtLEnd)) {\n                    name1Char[(name1Size - i)] = ' ';\n                    name2Char[(name2Size - i)] = ' ';\n                } \n            }\n            final java.lang.String java.lang.String = new java.lang.String(name1Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            final java.lang.String java.lang.String = new java.lang.String(name2Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            if ((strA.length()) > (strB.length())) {\n                return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strA.length())));\n            } else {\n                return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strB.length())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"name1","name1":"name1"},"type":"special","returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:125","type":"CtBinaryOperatorImpl","sourcecode":"ascii instanceof java.lang.String"},"failures":[0],"tindex":"b0e9363b-2eb9-11e6-97ea-651e432c5b69","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:115","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object ascii) throws org.apache.commons.codec.DecoderException {\n    if (ascii instanceof java.lang.String) {\n        {\n            if (ascii == null) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            if (ascii instanceof byte[]) {\n                return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)));\n            } \n            if (ascii instanceof char[]) {\n                return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)));\n            } \n            if (ascii instanceof java.lang.String) {\n                return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n            } \n            throw new org.apache.commons.codec.DecoderException(\"argument not a byte array\");\n        }\n    } else {\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"ascii"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:831","type":"CtBinaryOperatorImpl","sourcecode":"((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))"},"failures":[10,11,12,13,14],"tindex":"b0e9363c-2eb9-11e6-97ea-e5e570e91ee2","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:827","type":"CtMethodImpl","sourcecode":"private boolean conditionL0(final java.lang.String value, final int index) {\n    if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))) {\n        {\n            if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n                return true;\n            } else if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"b0e95d4d-2eb9-11e6-97ea-fbd509883aa6","method":{"position":"org.apache.commons.codec.net.URLCodec:269","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if (charset == null) {\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"charset"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:337","type":"CtBinaryOperatorImpl","sourcecode":"inAvail < 0"},"failures":[],"tindex":"b0e95d4e-2eb9-11e6-97ea-5bff2b3a866f","method":{"position":"org.apache.commons.codec.binary.Base32:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid encode(final byte[] in, int inPos, final int inAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (inPos < 0) {\n        {\n            if (inPos < 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (context.boolean) {\n                        return ;\n                    } \n                    if (inAvail < 0) {\n                        context.boolean = true;\n                        if ((0 == (context.int)) && ((int) == 0)) {\n                            return ;\n                        } \n                        final byte[] byte[] = ensureBufferSize(int, context);\n                        final int int = context.int;\n                        switch (context.int) {\n                            case 0 :\n                                break;\n                            case 1 :\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) << 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte;\n                                buffer[((context.int)++)] = byte;\n                                buffer[((context.int)++)] = byte;\n                                buffer[((context.int)++)] = byte;\n                                buffer[((context.int)++)] = byte;\n                                buffer[((context.int)++)] = byte;\n                                break;\n                            case 2 :\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 11))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 6))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) << 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte;\n                                buffer[((context.int)++)] = byte;\n                                buffer[((context.int)++)] = byte;\n                                buffer[((context.int)++)] = byte;\n                                break;\n                            case 3 :\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 19))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 14))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 9))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 4))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) << 1))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte;\n                                buffer[((context.int)++)] = byte;\n                                buffer[((context.int)++)] = byte;\n                                break;\n                            case 4 :\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 27))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 22))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 17))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 12))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 7))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 2))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) << 3))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte;\n                                break;\n                            default :\n                                throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n                        }\n                        context.int += (context.int) - savedPos;\n                        if (((int) > 0) && ((context.int) > 0)) {\n                            java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                            context.int += byte[].int;\n                        } \n                    } else {\n                        for (int int = 0 ; i < inAvail ; i++) {\n                            final byte[] byte[] = ensureBufferSize(int, context);\n                            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n                            int int = in[(inPos++)];\n                            if (b < 0) {\n                                b += 256;\n                            } \n                            context.long = ((context.long) << 8) + b;\n                            if (0 == (context.int)) {\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 30))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 25))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 20))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 15))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 5))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                buffer[((context.int)++)] = byte[][(((int)(context.long)) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n                                context.int += org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int;\n                                if (((int) > 0) && ((int) <= (context.int))) {\n                                    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n                                    context.int += byte[].int;\n                                    context.int = 0;\n                                } \n                            } \n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inAvail":"inPos"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[320,0],"tindex":"b0e9ab6f-2eb9-11e6-97ea-69dc686940c0","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:198","type":"CtMethodImpl","sourcecode":"public static byte[] fromAscii(final byte[] ascii) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            final byte[] byte[] = new byte[(ascii.int) >> 3];\n            for (int int = 0, int int = (ascii.int) - 1 ; ii < (l_raw.int) ; ii++ , jj -= 8) {\n                for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                    if ((ascii[(jj - bits)]) == '1') {\n                        l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n                    } \n                }\n            }\n            return l_raw;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"ascii"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:283","type":"CtBinaryOperatorImpl","sourcecode":"(index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 6, \"CAESAR\"))"},"failures":[10,11,12,13,14],"tindex":"b0e9ab70-2eb9-11e6-97ea-07f62e82d214","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:758","type":"CtMethodImpl","sourcecode":"private int handleZ(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 6, \"CAESAR\"))) {\n                {\n                    if ((charAt(value, (index + 1))) == 'H') {\n                        result.append('J');\n                        index += 2;\n                    } else {\n                        if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ZO\", \"ZI\", \"ZA\")) || (slavoGermanic && ((index > 0) && ((charAt(value, (index - 1))) != 'T')))) {\n                            result.append(\"S\", \"TS\");\n                        } else {\n                            result.append('S');\n                        }\n                        index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1;\n                    }\n                    return index;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b0e9ab71-2eb9-11e6-97ea-a7757976026e","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:758","type":"CtMethodImpl","sourcecode":"private int handleZ(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 6, \"CAESAR\"))) {\n                {\n                    if ((charAt(value, (index + 1))) == 'H') {\n                        result.append('J');\n                        index += 2;\n                    } else {\n                        if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ZO\", \"ZI\", \"ZA\")) || (slavoGermanic && ((index > 0) && ((charAt(value, (index - 1))) != 'T')))) {\n                            result.append(\"S\", \"TS\");\n                        } else {\n                            result.append('S');\n                        }\n                        index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1;\n                    }\n                    return index;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")"},"failures":[],"tindex":"b0e9d282-2eb9-11e6-97ea-653143ac83c3","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:987","type":"CtMethodImpl","sourcecode":"public void appendAlternate(final java.lang.String value) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        {\n            if (value == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length());\n                            if ((value.length()) <= addChars) {\n                                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n                            } else {\n                                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)"},"failures":[],"tindex":"b0e9d283-2eb9-11e6-97ea-8909b1e374af","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:140","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] ascii) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii);\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"ascii"},"type":"special","returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:339","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.lang.String"},"failures":[],"tindex":"b0e9f994-2eb9-11e6-97ea-159822b21739","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:133","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof java.lang.String) {\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj instanceof java.lang.String) {\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (!(obj instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n                    } \n                    return soundex(((java.lang.String)(obj)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")"},"failures":[10,11,163,153,61,165,154,155,12,13,14,166,156,168,157],"tindex":"b0e9f995-2eb9-11e6-97ea-dba1b1e45140","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:857","type":"CtMethodImpl","sourcecode":"private boolean isSlavoGermanic(final java.lang.String value) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        {\n            return ((((value.indexOf('W')) > (-1)) || ((value.indexOf('K')) > (-1))) || ((value.indexOf(\"CZ\")) > (-1))) || ((value.indexOf(\"WITZ\")) > (-1));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[235,321,322],"tindex":"b0e9f996-2eb9-11e6-97ea-2ffae96f2f6c","method":{"position":"org.apache.commons.codec.language.Soundex:258","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if ((str.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n            if ((str.length()) == 0) {\n                return str;\n            } \n            final char[] char[] = new char[]{ '0' , '0' , '0' , '0' };\n            char char;\n            char char;\n            int int = 1;\n            int int = 1;\n            out[0] = str.charAt(0);\n            last = getMappingCode(str, 0);\n            while ((incount < (str.length())) && (count < (out.int))) {\n                mapped = getMappingCode(str, (incount++));\n                if (mapped != 0) {\n                    if ((mapped != '0') && (mapped != last)) {\n                        out[(count++)] = mapped;\n                    } \n                    last = mapped;\n                } \n            }\n            return new java.lang.String(out);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":17,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":343,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":60,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":102,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":264,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":107,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":139,"org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException":295,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":190,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":157,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":95,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":179,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":334,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull":64,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameSameNames_ReturnsFalseSuccessfully":100,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":73,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":88,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":18,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse":121,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":265,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":41,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":292,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":330,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":340,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":97,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":271,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":251,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptWithEmptySalt":43,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":345,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":35,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":225,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":250,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":115,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":203,"org.apache.commons.codec.language.NysiisTest.testCap":158,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":204,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":101,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":119,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":208,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":28,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le":319,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":116,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":205,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":26,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":206,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":329,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":269,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":288,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":241,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii":317,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":294,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding":82,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":218,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":197,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":333,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":56,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithEmptySalt":5,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":263,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":46,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":127,"org.apache.commons.codec.language.MetaphoneTest.testEncodeEmpty":48,"org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull":75,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeNull":2,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":297,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull":63,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":105,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8":316,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":51,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":140,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":196,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16":320,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":98,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":120,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":141,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":14,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":15,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":112,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":232,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":338,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":31,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":244,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":130,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":267,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":27,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":300,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Length":284,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":291,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":227,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":268,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":94,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":212,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":312,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":10,"org.apache.commons.codec.language.MetaphoneTest.testEncodeNull":47,"org.apache.commons.codec.language.NysiisTest.testDropBy":171,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":124,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":55,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringBadEnc":321,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":138,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":247,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":104,"org.apache.commons.codec.binary.Base64Test.testUUID":200,"org.apache.commons.codec.net.QCodecTest.testNullInput":66,"org.apache.commons.codec.binary.Base64Test.testSingletons":217,"org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt":8,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":136,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":273,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":222,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":242,"org.apache.commons.codec.binary.Base64Test.testPairs":199,"org.apache.commons.codec.language.NysiisTest.testRule2":163,"org.apache.commons.codec.language.NysiisTest.testRule1":162,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":272,"org.apache.commons.codec.language.NysiisTest.testRule7":166,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":37,"org.apache.commons.codec.language.NysiisTest.testRule6":165,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":137,"org.apache.commons.codec.language.NysiisTest.testRule5":164,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":90,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":339,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":306,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":135,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":59,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":304,"org.apache.commons.codec.language.NysiisTest.testBran":167,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":174,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":191,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":96,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":182,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":246,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":29,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse":108,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":296,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":91,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":215,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":193,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":216,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":309,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":337,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":326,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8":151,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":253,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":327,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":262,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":276,"org.apache.commons.codec.language.RefinedSoundexTest.testGetMappingCodeNonLetter":149,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJust1Letter_ReturnsFalse":117,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":308,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":260,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":287,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":79,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert":335,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":45,"org.apache.commons.codec.language.NysiisTest.testDad":159,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le":154,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":235,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":145,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedBadName":155,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":202,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":44,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":311,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":134,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":156,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":323,"org.apache.commons.codec.language.NysiisTest.testDan":160,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":109,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":298,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105":239,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnameCornerCase_Nulls_NoMatch":87,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":238,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString":301,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail":1,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":110,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":118,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":4,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":19,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse":86,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":177,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":259,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":106,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":126,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":252,"org.apache.commons.codec.language.NysiisTest.testSnat":169,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":32,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameToSingleLetter_KARL_C_DoesNotMatch":129,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":53,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":132,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length":281,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":40,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":81,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":180,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":350,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":147,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":254,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":11,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":240,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":236,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeStringWithNull":83,"org.apache.commons.codec.binary.Base64Test.testTriplets":194,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":248,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":7,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse":84,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":185,"org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence":71,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":183,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":186,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument":62,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":187,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":68,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":233,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":209,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":305,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":230,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse":89,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1":152,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":67,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":282,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":181,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":198,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":258,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":178,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEqualsSecondNameJust1Letter_ReturnsFalse":131,"org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence":20,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":341,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":176,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":49,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull":0,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":266,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":289,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":33,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":34,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":285,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch":133,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":213,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":30,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameNullSpace_ReturnsFalseSuccessfully":111,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":189,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":237,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":16,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":224,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":184,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":52,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString":280,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":192,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":125,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":146,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":277,"org.apache.commons.codec.CharsetsTest.testToCharset":314,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":279,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":9,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":231,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":348,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":93,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":85,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":349,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":310,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":69,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":113,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":188,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":303,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero":344,"org.apache.commons.codec.language.MetaphoneTest.testWhy":325,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":257,"org.apache.commons.codec.language.NysiisTest.testTranan":173,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":275,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":114,"org.apache.commons.codec.language.NysiisTest.testFal":161,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":25,"org.apache.commons.codec.language.NysiisTest.testSnad":168,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithHalfSalt":6,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":283,"org.apache.commons.codec.language.MetaphoneTest.testTCH":324,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":261,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":42,"org.apache.commons.codec.language.NysiisTest.testLocaleIndependence":175,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":221,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":328,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":243,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":78,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":226,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":332,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":331,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":58,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":207,"org.apache.commons.codec.binary.Base64Test.testBase64":223,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch":92,"org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt":3,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":80,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":22,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":293,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":210,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":278,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":256,"org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence":23,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":286,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":290,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":36,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":228,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":255,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":342,"org.apache.commons.codec.binary.Base64Test.testCodec112":214,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":307,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":76,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":128,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":61,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":144,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":336,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":170,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":195,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay":351,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":123,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":270,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":245,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be":153,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":346,"org.apache.commons.codec.binary.Base64Test.testCodec68":219,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":70,"org.apache.commons.codec.net.BCodecTest.testDecodeStringWithNull":74,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":322,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":302,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":13,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":234,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be":318,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":229,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":142,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":39,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":99,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":50,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":249,"org.apache.commons.codec.language.Caverphone2Test.testEncodeNull":72,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":313,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse":122,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":274,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":299,"org.apache.commons.codec.language.NysiisTest.testOthers":172,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":220,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":347,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":57,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1":315,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":12,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":24,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":38,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":143,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":77,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":21,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii":148,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":103,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":211,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":65,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":201,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16":150},"transformations":[{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.Soundex:263","type":"CtBinaryOperatorImpl","sourcecode":"(str.length()) == 0"},"failures":[0],"tindex":"6ee06509-3e64-11e6-b9d4-07a4b68f6ee8","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:446","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.nio.charset.Charset charset) throws org.apache.commons.codec.DecoderException {\n    if ((str.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return new java.lang.String(org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[1],"tindex":"6ee14f6a-3e64-11e6-b9d4-9d4fa3b20e49","method":{"position":"org.apache.commons.codec.digest.HmacUtils:80","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha1(final byte[] key) {\n    if (key == null) {\n        {\n            if (key == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[2],"tindex":"6ee1767b-3e64-11e6-b9d4-d91b1267cd7b","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:391","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] bytes) {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet, bytes, boolean);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[3,4,5,6,7,8],"tindex":"6ee1767c-3e64-11e6-b9d4-4ba8a75c58d7","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:198","type":"CtMethodImpl","sourcecode":"public static java.lang.String crypt(final byte[] original, java.lang.String salt) {\n    if (salt == null) {\n        {\n            if (salt == null) {\n                final java.util.Random java.util.Random = new java.util.Random();\n                final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[].int;\n                salt = (\"\" + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)])) + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)]);\n            } else if (!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String)) + \"]{2,}$\")))) {\n                throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"             \");\n            final char char = salt.charAt(0);\n            final char char = salt.charAt(1);\n            buffer.setCharAt(0, charZero);\n            buffer.setCharAt(1, charOne);\n            final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][charZero];\n            final int int = (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][charOne]) << 4;\n            final byte[] byte[] = new byte[8];\n            for (int int = 0 ; i < (key.int) ; i++) {\n                key[i] = 0;\n            }\n            for (int int = 0 ; (i < (key.int)) && (i < (original.int)) ; i++) {\n                final int int = original[i];\n                key[i] = ((byte)(iChar << 1));\n            }\n            final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.desSetKey(key);\n            final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.body(schedule, eSwap0, eSwap1);\n            final byte[] byte[] = new byte[9];\n            org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(out[0], b, 0);\n            org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(out[1], b, 4);\n            b[8] = 0;\n            int int = 2;\n            int int = 0;\n            int int = 128;\n            for ( ; i < 13 ; i++) {\n                int int = 0;\n                int int = 0;\n                for ( ; j < 6 ; j++) {\n                    c <<= 1;\n                    if (((b[y]) & u) != 0) {\n                        c |= 1;\n                    } \n                    u >>>= 1;\n                    if (u == 0) {\n                        y++;\n                        u = 128;\n                    } \n                    buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][c])));\n                }\n            }\n            return buffer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:51","type":"CtBinaryOperatorImpl","sourcecode":"(cs instanceof java.lang.String) && (substring instanceof java.lang.String)"},"failures":[],"tindex":"6ee34b3d-3e64-11e6-b9d4-d376c078cf37","method":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:49","type":"CtMethodImpl","sourcecode":"static boolean regionMatches(final java.lang.CharSequence cs, final boolean ignoreCase, final int thisStart, final java.lang.CharSequence substring, final int start, final int length) {\n    if ((substring instanceof java.lang.String) && (substring instanceof java.lang.String)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((cs instanceof java.lang.String) && (substring instanceof java.lang.String)) {\n                return ((java.lang.String)(cs)).regionMatches(ignoreCase, thisStart, ((java.lang.String)(substring)), start, length);\n            } \n            int int = thisStart;\n            int int = start;\n            int int = length;\n            while ((tmpLen--) > 0) {\n                char char = cs.charAt((index1++));\n                char char = substring.charAt((index2++));\n                if (c1 == c2) {\n                    continue;\n                } \n                if (!ignoreCase) {\n                    return false;\n                } \n                if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"substring","substring":"substring"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")"},"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"tindex":"6ee3724e-3e64-11e6-b9d4-735de3ea2883","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:874","type":"CtMethodImpl","sourcecode":"private boolean isSilentStart(final java.lang.String value) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        {\n            boolean boolean = false;\n            for (final java.lang.String java.lang.String : org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]) {\n                if (value.startsWith(element)) {\n                    result = true;\n                    break;\n                } \n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"6ee3995f-3e64-11e6-b9d4-e317d3a1b7ab","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:391","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] encode(final byte[] bytes) {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet, bytes, boolean);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[24,25,26,27,28,29,30],"tindex":"6ee39960-3e64-11e6-b9d4-fb7f0824f614","method":{"position":"org.apache.commons.codec.net.URLCodec:121","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeUrl(java.util.BitSet urlsafe, final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (bytes == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (bytes == null) {\n                                {\n                                    if (bytes == null) {\n                                        return null;\n                                    } \n                                    if (urlsafe == null) {\n                                        urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet;\n                                    } \n                                    final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n                                    for (final byte byte : bytes) {\n                                        int int = c;\n                                        if (b < 0) {\n                                            b = 256 + b;\n                                        } \n                                        if (urlsafe.get(b)) {\n                                            if (b == ' ') {\n                                                b = '+';\n                                            } \n                                            buffer.write(b);\n                                        } else {\n                                            buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte);\n                                            final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n                                            final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n                                            buffer.write(hex1);\n                                            buffer.write(hex2);\n                                        }\n                                    }\n                                    return buffer.toByteArray();\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[31,32,33,34,35,36,37,38,39],"tindex":"6ee3e781-3e64-11e6-b9d4-47b97e1ecc09","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:409","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        {\n            return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[40],"tindex":"6ee3e782-3e64-11e6-b9d4-259cf8dd291f","method":{"position":"org.apache.commons.codec.digest.HmacUtils:474","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha256Hex(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        {\n            if (valueToDigest == null) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"valueToDigest"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[],"tindex":"6ee40e93-3e64-11e6-b9d4-27d1ec465296","method":{"position":"org.apache.commons.codec.binary.StringUtils:216","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16Le(final java.lang.String string) {\n    if (string == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:69","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[],"tindex":"6ee40e94-3e64-11e6-b9d4-9d90be99de6f","method":{"position":"org.apache.commons.codec.language.bm.Lang:202","type":"CtMethodImpl","sourcecode":"public java.lang.String guessLanguage(final java.lang.String text) {\n    if (text == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = guessLanguages(text);\n            return ls.isSingleton() ? ls.getAny() : org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.String;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"text"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:66","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[41,42,43,44,45,46],"tindex":"6ee435a5-3e64-11e6-b9d4-0bcbfd4469e6","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:101","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha256Crypt(final byte[] keyBytes, java.lang.String salt) {\n    if (salt == null) {\n        {\n            if (salt == null) {\n                salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n            } \n            return org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(keyBytes, salt, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[47,48],"tindex":"6ee435a6-3e64-11e6-b9d4-d7f59020cca8","method":{"position":"org.apache.commons.codec.language.Metaphone:92","type":"CtMethodImpl","sourcecode":"public java.lang.String metaphone(final java.lang.String txt) {\n    if ((txt == null) || ((txt.length()) == 0)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((txt == null) || ((txt.length()) == 0)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = false;\n                    int int;\n                    if ((txt == null) || ((txtLength = txt.length()) == 0)) {\n                        return \"\";\n                    } \n                    if (txtLength == 1) {\n                        return txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                    } \n                    final char[] char[] = txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale).toCharArray();\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40);\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10);\n                    switch (inwd[0]) {\n                        case 'K' :\n                        case 'G' :\n                        case 'P' :\n                            if ((inwd[1]) == 'N') {\n                                local.append(inwd, 1, ((inwd.int) - 1));\n                            } else {\n                                local.append(inwd);\n                            }\n                            break;\n                        case 'A' :\n                            if ((inwd[1]) == 'E') {\n                                local.append(inwd, 1, ((inwd.int) - 1));\n                            } else {\n                                local.append(inwd);\n                            }\n                            break;\n                        case 'W' :\n                            if ((inwd[1]) == 'R') {\n                                local.append(inwd, 1, ((inwd.int) - 1));\n                                break;\n                            } \n                            if ((inwd[1]) == 'H') {\n                                local.append(inwd, 1, ((inwd.int) - 1));\n                                local.setCharAt(0, 'W');\n                            } else {\n                                local.append(inwd);\n                            }\n                            break;\n                        case 'X' :\n                            inwd[0] = 'S';\n                            local.append(inwd);\n                            break;\n                        default :\n                            local.append(inwd);\n                    }\n                    final int int = local.length();\n                    int int = 0;\n                    while (((code.length()) < (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) && (n < wdsz)) {\n                        final char char = local.charAt(n);\n                        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n                            n++;\n                        } else {\n                            switch (symb) {\n                                case 'A' :\n                                case 'E' :\n                                case 'I' :\n                                case 'O' :\n                                case 'U' :\n                                    if (n == 0) {\n                                        code.append(symb);\n                                    } \n                                    break;\n                                case 'B' :\n                                    if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n                                        break;\n                                    } \n                                    code.append(symb);\n                                    break;\n                                case 'C' :\n                                    if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                        break;\n                                    } \n                                    if (regionMatch(local, n, \"CIA\")) {\n                                        code.append('X');\n                                        break;\n                                    } \n                                    if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                        code.append('S');\n                                        break;\n                                    } \n                                    if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n                                        code.append('K');\n                                        break;\n                                    } \n                                    if (isNextChar(local, n, 'H')) {\n                                        if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                                            code.append('K');\n                                        } else {\n                                            code.append('X');\n                                        }\n                                    } else {\n                                        code.append('K');\n                                    }\n                                    break;\n                                case 'D' :\n                                    if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n                                        code.append('J');\n                                        n += 2;\n                                    } else {\n                                        code.append('T');\n                                    }\n                                    break;\n                                case 'G' :\n                                    if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n                                        break;\n                                    } \n                                    if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n                                        break;\n                                    } \n                                    if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n                                        break;\n                                    } \n                                    if (isPreviousChar(local, n, 'G')) {\n                                        hard = true;\n                                    } else {\n                                        hard = false;\n                                    }\n                                    if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n                                        code.append('J');\n                                    } else {\n                                        code.append('K');\n                                    }\n                                    break;\n                                case 'H' :\n                                    if (isLastChar(wdsz, n)) {\n                                        break;\n                                    } \n                                    if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n                                        break;\n                                    } \n                                    if (isVowel(local, (n + 1))) {\n                                        code.append('H');\n                                    } \n                                    break;\n                                case 'F' :\n                                case 'J' :\n                                case 'L' :\n                                case 'M' :\n                                case 'N' :\n                                case 'R' :\n                                    code.append(symb);\n                                    break;\n                                case 'K' :\n                                    if (n > 0) {\n                                        if (!(isPreviousChar(local, n, 'C'))) {\n                                            code.append(symb);\n                                        } \n                                    } else {\n                                        code.append(symb);\n                                    }\n                                    break;\n                                case 'P' :\n                                    if (isNextChar(local, n, 'H')) {\n                                        code.append('F');\n                                    } else {\n                                        code.append(symb);\n                                    }\n                                    break;\n                                case 'Q' :\n                                    code.append('K');\n                                    break;\n                                case 'S' :\n                                    if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n                                        code.append('X');\n                                    } else {\n                                        code.append('S');\n                                    }\n                                    break;\n                                case 'T' :\n                                    if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n                                        code.append('X');\n                                        break;\n                                    } \n                                    if (regionMatch(local, n, \"TCH\")) {\n                                        break;\n                                    } \n                                    if (regionMatch(local, n, \"TH\")) {\n                                        code.append('0');\n                                    } else {\n                                        code.append('T');\n                                    }\n                                    break;\n                                case 'V' :\n                                    code.append('F');\n                                    break;\n                                case 'W' :\n                                case 'Y' :\n                                    if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n                                        code.append(symb);\n                                    } \n                                    break;\n                                case 'X' :\n                                    code.append('K');\n                                    code.append('S');\n                                    break;\n                                case 'Z' :\n                                    code.append('S');\n                                    break;\n                                default :\n                                    break;\n                            }\n                            n++;\n                        }\n                        if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n                            code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n                        } \n                    }\n                    return code.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"txt"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:335","type":"CtUnaryOperatorImpl","sourcecode":"!(obj instanceof byte[])"},"failures":[],"tindex":"6ee4aad7-3e64-11e6-b9d4-9f1ef589598e","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:202","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (!(obj instanceof byte[])) {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\");\n            } \n            return doubleMetaphone(((java.lang.String)(obj)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:138","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[11,15,16,17,21,22],"tindex":"6ee4aad8-3e64-11e6-b9d4-71d95ee7a445","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:978","type":"CtMethodImpl","sourcecode":"public void appendPrimary(final java.lang.String value) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length());\n                    if ((value.length()) <= addChars) {\n                        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n                    } else {\n                        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"6ee4d1e9-3e64-11e6-b9d4-312921bdd80f","method":{"position":"org.apache.commons.codec.net.URLCodec:121","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeUrl(java.util.BitSet urlsafe, final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (bytes == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (bytes == null) {\n                                {\n                                    if (bytes == null) {\n                                        return null;\n                                    } \n                                    if (urlsafe == null) {\n                                        urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet;\n                                    } \n                                    final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n                                    for (final byte byte : bytes) {\n                                        int int = c;\n                                        if (b < 0) {\n                                            b = 256 + b;\n                                        } \n                                        if (urlsafe.get(b)) {\n                                            if (b == ' ') {\n                                                b = '+';\n                                            } \n                                            buffer.write(b);\n                                        } else {\n                                            buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte);\n                                            final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n                                            final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n                                            buffer.write(hex1);\n                                            buffer.write(hex2);\n                                        }\n                                    }\n                                    return buffer.toByteArray();\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[49],"tindex":"6ee4d1ea-3e64-11e6-b9d4-b18f1440a082","method":{"position":"org.apache.commons.codec.digest.HmacUtils:260","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacMd5Hex(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:486","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[50,51,52,53,54,55,56,57,58,59,60],"tindex":"6ee4f8fb-3e64-11e6-b9d4-e5563415906b","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:485","type":"CtMethodImpl","sourcecode":"private java.lang.String[] soundex(final java.lang.String source, final boolean branching) {\n    if (branching) {\n        {\n            if (source == null) {\n                {\n                    if (source == null) {\n                        return null;\n                    } \n                    final java.lang.String java.lang.String = cleanup(source);\n                    final java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = new java.util.LinkedHashSet<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>();\n                    currentBranches.add(new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch());\n                    char char = '\u0000';\n                    for (int int = 0 ; index < (input.length()) ; index++) {\n                        final char char = input.charAt(index);\n                        if (java.lang.Character.isWhitespace(ch)) {\n                            continue;\n                        } \n                        final java.lang.String java.lang.String = input.substring(index);\n                        final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(ch);\n                        if (rules == null) {\n                            continue;\n                        } \n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = branching ? new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>() : java.util.Collections.java.util.Collections.java.util.List;\n                        for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule : rules) {\n                            if (rule.matches(inputContext)) {\n                                if (branching) {\n                                    nextBranches.clear();\n                                } \n                                final java.lang.String[] java.lang.String[] = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n                                final boolean boolean = ((replacements.int) > 1) && branching;\n                                for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n                                    for (final java.lang.String java.lang.String : replacements) {\n                                        final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch;\n                                        final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                                        nextBranch.processNextReplacement(nextReplacement, force);\n                                        if (branching) {\n                                            nextBranches.add(nextBranch);\n                                        } else {\n                                            break;\n                                        }\n                                    }\n                                }\n                                if (branching) {\n                                    currentBranches.clear();\n                                    currentBranches.addAll(nextBranches);\n                                } \n                                index += (rule.getPatternLength()) - 1;\n                                break;\n                            } \n                        }\n                        lastChar = ch;\n                    }\n                    final java.lang.String[] java.lang.String[] = new java.lang.String[currentBranches.size()];\n                    int int = 0;\n                    for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n                        branch.finish();\n                        result[(index++)] = branch.toString();\n                    }\n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:192","type":"CtBinaryOperatorImpl","sourcecode":"n < 0"},"failures":[61,62],"tindex":"6ee5200c-3e64-11e6-b9d4-350a1f2d38bc","method":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:191","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(final long n) throws java.io.IOException {\n    if (n < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (n < 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (n < 0) {\n                        throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n));\n                    } \n                    final byte[] byte[] = new byte[512];\n                    long long = n;\n                    while (todo > 0) {\n                        int int = ((int)(java.lang.Math.min(b.int, todo)));\n                        len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len);\n                        if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n                            break;\n                        } \n                        todo -= len;\n                    }\n                    return n - todo;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:138","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[63,64],"tindex":"6ee6cdbd-3e64-11e6-b9d4-cd95f91acbf6","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:216","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return doubleMetaphone(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"6ee6cdbe-3e64-11e6-b9d4-ab52752e909c","method":{"position":"org.apache.commons.codec.net.URLCodec:121","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeUrl(java.util.BitSet urlsafe, final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (bytes == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (bytes == null) {\n                                {\n                                    if (bytes == null) {\n                                        return null;\n                                    } \n                                    if (urlsafe == null) {\n                                        urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet;\n                                    } \n                                    final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n                                    for (final byte byte : bytes) {\n                                        int int = c;\n                                        if (b < 0) {\n                                            b = 256 + b;\n                                        } \n                                        if (urlsafe.get(b)) {\n                                            if (b == ' ') {\n                                                b = '+';\n                                            } \n                                            buffer.write(b);\n                                        } else {\n                                            buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte);\n                                            final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n                                            final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n                                            buffer.write(hex1);\n                                            buffer.write(hex2);\n                                        }\n                                    }\n                                    return buffer.toByteArray();\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"6ee6f4cf-3e64-11e6-b9d4-2124127a5eb8","method":{"position":"org.apache.commons.codec.digest.HmacUtils:367","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha1Hex(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"valueToDigest"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"6ee6f4d0-3e64-11e6-b9d4-dd4f7b26b374","method":{"position":"org.apache.commons.codec.net.URLCodec:121","type":"CtMethodImpl","sourcecode":"public static final byte[] encodeUrl(java.util.BitSet urlsafe, final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (bytes == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (bytes == null) {\n                                {\n                                    if (bytes == null) {\n                                        return null;\n                                    } \n                                    if (urlsafe == null) {\n                                        urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet;\n                                    } \n                                    final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n                                    for (final byte byte : bytes) {\n                                        int int = c;\n                                        if (b < 0) {\n                                            b = 256 + b;\n                                        } \n                                        if (urlsafe.get(b)) {\n                                            if (b == ' ') {\n                                                b = '+';\n                                            } \n                                            buffer.write(b);\n                                        } else {\n                                            buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte);\n                                            final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n                                            final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n                                            buffer.write(hex1);\n                                            buffer.write(hex2);\n                                        }\n                                    }\n                                    return buffer.toByteArray();\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:540","type":"CtVariableReadImpl","sourcecode":"branching"},"failures":[],"tindex":"6ee71be1-3e64-11e6-b9d4-8f2fb3cfc817","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:485","type":"CtMethodImpl","sourcecode":"private java.lang.String[] soundex(final java.lang.String source, final boolean branching) {\n    if (branching) {\n        {\n            if (source == null) {\n                {\n                    if (source == null) {\n                        return null;\n                    } \n                    final java.lang.String java.lang.String = cleanup(source);\n                    final java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = new java.util.LinkedHashSet<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>();\n                    currentBranches.add(new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch());\n                    char char = '\u0000';\n                    for (int int = 0 ; index < (input.length()) ; index++) {\n                        final char char = input.charAt(index);\n                        if (java.lang.Character.isWhitespace(ch)) {\n                            continue;\n                        } \n                        final java.lang.String java.lang.String = input.substring(index);\n                        final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(ch);\n                        if (rules == null) {\n                            continue;\n                        } \n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = branching ? new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>() : java.util.Collections.java.util.Collections.java.util.List;\n                        for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule : rules) {\n                            if (rule.matches(inputContext)) {\n                                if (branching) {\n                                    nextBranches.clear();\n                                } \n                                final java.lang.String[] java.lang.String[] = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n                                final boolean boolean = ((replacements.int) > 1) && branching;\n                                for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n                                    for (final java.lang.String java.lang.String : replacements) {\n                                        final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch;\n                                        final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                                        nextBranch.processNextReplacement(nextReplacement, force);\n                                        if (branching) {\n                                            nextBranches.add(nextBranch);\n                                        } else {\n                                            break;\n                                        }\n                                    }\n                                }\n                                if (branching) {\n                                    currentBranches.clear();\n                                    currentBranches.addAll(nextBranches);\n                                } \n                                index += (rule.getPatternLength()) - 1;\n                                break;\n                            } \n                        }\n                        lastChar = ch;\n                    }\n                    final java.lang.String[] java.lang.String[] = new java.lang.String[currentBranches.size()];\n                    int int = 0;\n                    for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n                        branch.finish();\n                        result[(index++)] = branch.toString();\n                    }\n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"branching":"branching"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:450","type":"CtFieldReadImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.this.concat"},"failures":[],"tindex":"6ee76a02-3e64-11e6-b9d4-178e9aac3be2","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:133","type":"CtMethodImpl","sourcecode":"public void setConcat(final boolean concat) {\n    if (concat) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , concat , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"concat":"concat"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:486","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[65],"tindex":"6ee76a03-3e64-11e6-b9d4-07cee516b8ff","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if (source == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (source == null) {\n                return null;\n            } \n            return soundex(source, false)[0];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[66],"tindex":"6ee8a284-3e64-11e6-b9d4-71e4ee84a8b6","method":{"position":"org.apache.commons.codec.net.QCodec:169","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doDecoding(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    if (bytes == null) {\n                        return null;\n                    } \n                    boolean boolean = false;\n                    for (final byte byte : bytes) {\n                        if (b == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                            hasUnderscores = true;\n                            break;\n                        } \n                    }\n                    if (hasUnderscores) {\n                        final byte[] byte[] = new byte[bytes.int];\n                        for (int int = 0 ; i < (bytes.int) ; i++) {\n                            final byte byte = bytes[i];\n                            if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                                tmp[i] = b;\n                            } else {\n                                tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n                            }\n                        }\n                        return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp);\n                    } \n                    return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[67,68],"tindex":"6ee8a285-3e64-11e6-b9d4-9bf3993e84f3","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:238","type":"CtMethodImpl","sourcecode":"public static byte[] toAsciiBytes(final byte[] raw) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n                {\n                    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n                        return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n                    } \n                    final byte[] byte[] = new byte[(raw.int) << 3];\n                    for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n                        for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                            if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n                                l_ascii[(jj - bits)] = '0';\n                            } else {\n                                l_ascii[(jj - bits)] = '1';\n                            }\n                        }\n                    }\n                    return l_ascii;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[],"tindex":"6ee8c996-3e64-11e6-b9d4-2f61f0ccf647","method":{"position":"org.apache.commons.codec.binary.StringUtils:180","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16(final java.lang.String string) {\n    if (string == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[69,70,71],"tindex":"6ee8c997-3e64-11e6-b9d4-f33f528e4924","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:148","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (str == null) {\n        {\n            return soundex(str);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:486","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[72],"tindex":"6ee8c998-3e64-11e6-b9d4-83f7bbf1d670","method":{"position":"org.apache.commons.codec.language.Caverphone2:45","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String source) {\n    if (source == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.String java.lang.String = source;\n            if ((txt == null) || ((txt.length()) == 0)) {\n                return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n            } \n            txt = txt.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            txt = txt.replaceAll(\"[^a-z]\", \"\");\n            txt = txt.replaceAll(\"e$\", \"\");\n            txt = txt.replaceAll(\"^cough\", \"cou2f\");\n            txt = txt.replaceAll(\"^rough\", \"rou2f\");\n            txt = txt.replaceAll(\"^tough\", \"tou2f\");\n            txt = txt.replaceAll(\"^enough\", \"enou2f\");\n            txt = txt.replaceAll(\"^trough\", \"trou2f\");\n            txt = txt.replaceAll(\"^gn\", \"2n\");\n            txt = txt.replaceAll(\"mb$\", \"m2\");\n            txt = txt.replaceAll(\"cq\", \"2q\");\n            txt = txt.replaceAll(\"ci\", \"si\");\n            txt = txt.replaceAll(\"ce\", \"se\");\n            txt = txt.replaceAll(\"cy\", \"sy\");\n            txt = txt.replaceAll(\"tch\", \"2ch\");\n            txt = txt.replaceAll(\"c\", \"k\");\n            txt = txt.replaceAll(\"q\", \"k\");\n            txt = txt.replaceAll(\"x\", \"k\");\n            txt = txt.replaceAll(\"v\", \"f\");\n            txt = txt.replaceAll(\"dg\", \"2g\");\n            txt = txt.replaceAll(\"tio\", \"sio\");\n            txt = txt.replaceAll(\"tia\", \"sia\");\n            txt = txt.replaceAll(\"d\", \"t\");\n            txt = txt.replaceAll(\"ph\", \"fh\");\n            txt = txt.replaceAll(\"b\", \"p\");\n            txt = txt.replaceAll(\"sh\", \"s2\");\n            txt = txt.replaceAll(\"z\", \"s\");\n            txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n            txt = txt.replaceAll(\"[aeiou]\", \"3\");\n            txt = txt.replaceAll(\"j\", \"y\");\n            txt = txt.replaceAll(\"^y3\", \"Y3\");\n            txt = txt.replaceAll(\"^y\", \"A\");\n            txt = txt.replaceAll(\"y\", \"3\");\n            txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n            txt = txt.replaceAll(\"gh\", \"22\");\n            txt = txt.replaceAll(\"g\", \"k\");\n            txt = txt.replaceAll(\"s+\", \"S\");\n            txt = txt.replaceAll(\"t+\", \"T\");\n            txt = txt.replaceAll(\"p+\", \"P\");\n            txt = txt.replaceAll(\"k+\", \"K\");\n            txt = txt.replaceAll(\"f+\", \"F\");\n            txt = txt.replaceAll(\"m+\", \"M\");\n            txt = txt.replaceAll(\"n+\", \"N\");\n            txt = txt.replaceAll(\"w3\", \"W3\");\n            txt = txt.replaceAll(\"wh3\", \"Wh3\");\n            txt = txt.replaceAll(\"w$\", \"3\");\n            txt = txt.replaceAll(\"w\", \"2\");\n            txt = txt.replaceAll(\"^h\", \"A\");\n            txt = txt.replaceAll(\"h\", \"2\");\n            txt = txt.replaceAll(\"r3\", \"R3\");\n            txt = txt.replaceAll(\"r$\", \"3\");\n            txt = txt.replaceAll(\"r\", \"2\");\n            txt = txt.replaceAll(\"l3\", \"L3\");\n            txt = txt.replaceAll(\"l$\", \"3\");\n            txt = txt.replaceAll(\"l\", \"2\");\n            txt = txt.replaceAll(\"2\", \"\");\n            txt = txt.replaceAll(\"3$\", \"A\");\n            txt = txt.replaceAll(\"3\", \"\");\n            txt = txt + (org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String);\n            return txt.substring(0, org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String.length());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:406","type":"CtUnaryOperatorImpl","sourcecode":"!(object instanceof java.lang.String)"},"failures":[73],"tindex":"6ee8f0a9-3e64-11e6-b9d4-1f1f1ece2d2c","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:405","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object object) throws org.apache.commons.codec.EncoderException {\n    if (!(object instanceof java.lang.String)) {\n        {\n            if (!(object instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(((((\"This method's parameter was expected to be of the type \" + (java.lang.String.java.lang.String.java.lang.Class.getName())) + \". But actually it was of the type \") + (object.getClass().getName())) + \".\"));\n            } \n            return encode(((java.lang.String)(object)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[74,75],"tindex":"6ee917ba-3e64-11e6-b9d4-770bbad2cc5d","method":{"position":"org.apache.commons.codec.net.BCodec:176","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String value) throws org.apache.commons.codec.DecoderException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (value == null) {\n                return null;\n            } \n            try {\n                return org.apache.commons.codec.net.BCodec.this.decodeText(value);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"6ee917bb-3e64-11e6-b9d4-b9dff00d2a58","method":{"position":"org.apache.commons.codec.binary.StringUtils:366","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf16Le(final byte[] bytes) {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"6ee917bc-3e64-11e6-b9d4-9ba7015d2588","method":{"position":"org.apache.commons.codec.digest.HmacUtils:474","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha256Hex(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        {\n            if (valueToDigest == null) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[76,77,78,79,80,81],"tindex":"6ee93ecd-3e64-11e6-b9d4-8b9c03597fa7","method":{"position":"org.apache.commons.codec.language.bm.Rule:539","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if ((input.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:168","type":"CtBinaryOperatorImpl","sourcecode":"b == '+'"},"failures":[],"tindex":"6ee93ece-3e64-11e6-b9d4-491d15744544","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:237","type":"CtMethodImpl","sourcecode":"private static boolean isWhitespace(final int b) {\n    if (b == '+') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) || (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"6ee93ecf-3e64-11e6-b9d4-81e13ed2855b","method":{"position":"org.apache.commons.codec.digest.HmacUtils:80","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha1(final byte[] key) {\n    if (key == null) {\n        {\n            if (key == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.codec.net.QCodec:247","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[31,82,83],"tindex":"6ee93ed0-3e64-11e6-b9d4-b5a6ee3e7460","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:596","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException {\n    if (charset == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.UnsupportedEncodingException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"charset"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")"},"failures":[],"tindex":"6ee964e1-3e64-11e6-b9d4-3d6ef00806b3","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:978","type":"CtMethodImpl","sourcecode":"public void appendPrimary(final java.lang.String value) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length());\n                    if ((value.length()) <= addChars) {\n                        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n                    } else {\n                        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"6ee964e2-3e64-11e6-b9d4-cdf97addc323","method":{"position":"org.apache.commons.codec.language.Caverphone:57","type":"CtMethodImpl","sourcecode":"public java.lang.String caverphone(final java.lang.String source) {\n    if (source == null) {\n        {\n            return org.apache.commons.codec.language.Caverphone.this.org.apache.commons.codec.language.Caverphone2.encode(source);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:447","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")"},"failures":[21,22],"tindex":"6ee98bf3-3e64-11e6-b9d4-7f5e14f30f89","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:676","type":"CtMethodImpl","sourcecode":"private int handleT(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"TION\")) {\n                result.append('X');\n                index += 3;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TIA\", \"TCH\")) {\n                result.append('X');\n                index += 3;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"TH\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TTH\"))) {\n                if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n                    result.append('T');\n                } else {\n                    result.append('0', 'T');\n                }\n                index += 2;\n            } else {\n                result.append('T');\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"T\", \"D\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:740","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[15,16,21,22],"tindex":"6ee98bf4-3e64-11e6-b9d4-73f31c4dc88d","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:355","type":"CtMethodImpl","sourcecode":"private int handleCH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n    if (index == 0) {\n        {\n            if ((index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))) {\n                result.append('K', 'X');\n                return index + 2;\n            } else if (conditionCH0(value, index)) {\n                result.append('K');\n                return index + 2;\n            } else if (conditionCH1(value, index)) {\n                result.append('K');\n                return index + 2;\n            } else {\n                if (index > 0) {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n                        result.append('K');\n                    } else {\n                        result.append('X', 'K');\n                    }\n                } else {\n                    result.append('X');\n                }\n                return index + 2;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:203","type":"CtUnaryOperatorImpl","sourcecode":"!(obj instanceof java.lang.String)"},"failures":[],"tindex":"6ee9b305-3e64-11e6-b9d4-2b3eaa04f29f","method":{"position":"org.apache.commons.codec.language.Nysiis:210","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (!(obj instanceof java.lang.String)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\");\n            } \n            return org.apache.commons.codec.language.Nysiis.this.nysiis(((java.lang.String)(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[],"tindex":"6ee9b306-3e64-11e6-b9d4-f3f675026259","method":{"position":"org.apache.commons.codec.language.Metaphone:92","type":"CtMethodImpl","sourcecode":"public java.lang.String metaphone(final java.lang.String txt) {\n    if ((txt == null) || ((txt.length()) == 0)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((txt == null) || ((txt.length()) == 0)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = false;\n                    int int;\n                    if ((txt == null) || ((txtLength = txt.length()) == 0)) {\n                        return \"\";\n                    } \n                    if (txtLength == 1) {\n                        return txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                    } \n                    final char[] char[] = txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale).toCharArray();\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40);\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10);\n                    switch (inwd[0]) {\n                        case 'K' :\n                        case 'G' :\n                        case 'P' :\n                            if ((inwd[1]) == 'N') {\n                                local.append(inwd, 1, ((inwd.int) - 1));\n                            } else {\n                                local.append(inwd);\n                            }\n                            break;\n                        case 'A' :\n                            if ((inwd[1]) == 'E') {\n                                local.append(inwd, 1, ((inwd.int) - 1));\n                            } else {\n                                local.append(inwd);\n                            }\n                            break;\n                        case 'W' :\n                            if ((inwd[1]) == 'R') {\n                                local.append(inwd, 1, ((inwd.int) - 1));\n                                break;\n                            } \n                            if ((inwd[1]) == 'H') {\n                                local.append(inwd, 1, ((inwd.int) - 1));\n                                local.setCharAt(0, 'W');\n                            } else {\n                                local.append(inwd);\n                            }\n                            break;\n                        case 'X' :\n                            inwd[0] = 'S';\n                            local.append(inwd);\n                            break;\n                        default :\n                            local.append(inwd);\n                    }\n                    final int int = local.length();\n                    int int = 0;\n                    while (((code.length()) < (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) && (n < wdsz)) {\n                        final char char = local.charAt(n);\n                        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n                            n++;\n                        } else {\n                            switch (symb) {\n                                case 'A' :\n                                case 'E' :\n                                case 'I' :\n                                case 'O' :\n                                case 'U' :\n                                    if (n == 0) {\n                                        code.append(symb);\n                                    } \n                                    break;\n                                case 'B' :\n                                    if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n                                        break;\n                                    } \n                                    code.append(symb);\n                                    break;\n                                case 'C' :\n                                    if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                        break;\n                                    } \n                                    if (regionMatch(local, n, \"CIA\")) {\n                                        code.append('X');\n                                        break;\n                                    } \n                                    if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                                        code.append('S');\n                                        break;\n                                    } \n                                    if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n                                        code.append('K');\n                                        break;\n                                    } \n                                    if (isNextChar(local, n, 'H')) {\n                                        if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                                            code.append('K');\n                                        } else {\n                                            code.append('X');\n                                        }\n                                    } else {\n                                        code.append('K');\n                                    }\n                                    break;\n                                case 'D' :\n                                    if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n                                        code.append('J');\n                                        n += 2;\n                                    } else {\n                                        code.append('T');\n                                    }\n                                    break;\n                                case 'G' :\n                                    if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n                                        break;\n                                    } \n                                    if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n                                        break;\n                                    } \n                                    if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n                                        break;\n                                    } \n                                    if (isPreviousChar(local, n, 'G')) {\n                                        hard = true;\n                                    } else {\n                                        hard = false;\n                                    }\n                                    if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n                                        code.append('J');\n                                    } else {\n                                        code.append('K');\n                                    }\n                                    break;\n                                case 'H' :\n                                    if (isLastChar(wdsz, n)) {\n                                        break;\n                                    } \n                                    if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n                                        break;\n                                    } \n                                    if (isVowel(local, (n + 1))) {\n                                        code.append('H');\n                                    } \n                                    break;\n                                case 'F' :\n                                case 'J' :\n                                case 'L' :\n                                case 'M' :\n                                case 'N' :\n                                case 'R' :\n                                    code.append(symb);\n                                    break;\n                                case 'K' :\n                                    if (n > 0) {\n                                        if (!(isPreviousChar(local, n, 'C'))) {\n                                            code.append(symb);\n                                        } \n                                    } else {\n                                        code.append(symb);\n                                    }\n                                    break;\n                                case 'P' :\n                                    if (isNextChar(local, n, 'H')) {\n                                        code.append('F');\n                                    } else {\n                                        code.append(symb);\n                                    }\n                                    break;\n                                case 'Q' :\n                                    code.append('K');\n                                    break;\n                                case 'S' :\n                                    if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n                                        code.append('X');\n                                    } else {\n                                        code.append('S');\n                                    }\n                                    break;\n                                case 'T' :\n                                    if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n                                        code.append('X');\n                                        break;\n                                    } \n                                    if (regionMatch(local, n, \"TCH\")) {\n                                        break;\n                                    } \n                                    if (regionMatch(local, n, \"TH\")) {\n                                        code.append('0');\n                                    } else {\n                                        code.append('T');\n                                    }\n                                    break;\n                                case 'V' :\n                                    code.append('F');\n                                    break;\n                                case 'W' :\n                                case 'Y' :\n                                    if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n                                        code.append(symb);\n                                    } \n                                    break;\n                                case 'X' :\n                                    code.append('K');\n                                    code.append('S');\n                                    break;\n                                case 'Z' :\n                                    code.append('S');\n                                    break;\n                                default :\n                                    break;\n                            }\n                            n++;\n                        }\n                        if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n                            code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n                        } \n                    }\n                    return code.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"txt"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:138","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[15,16,17,21,22],"tindex":"6eea2837-3e64-11e6-b9d4-db4e7fa5ed33","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:968","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.String value) {\n    if (value == null) {\n        {\n            appendPrimary(value);\n            appendAlternate(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:220","type":"CtInvocationImpl","sourcecode":"name1.equalsIgnoreCase(name2)"},"failures":[84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134],"tindex":"6eea2838-3e64-11e6-b9d4-773efc0e5dd0","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:212","type":"CtMethodImpl","sourcecode":"public boolean isEncodeEquals(java.lang.String name1, java.lang.String name2) {\n    if (name2.equalsIgnoreCase(name2)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) {\n                return false;\n            } else if (((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) {\n                return false;\n            } else if (((name1.length()) == 1) || ((name2.length()) == 1)) {\n                return false;\n            } else if (name1.equalsIgnoreCase(name2)) {\n                return true;\n            } \n            name1 = cleanName(name1);\n            name2 = cleanName(name2);\n            name1 = removeVowels(name1);\n            name2 = removeVowels(name2);\n            name1 = removeDoubleConsonants(name1);\n            name2 = removeDoubleConsonants(name2);\n            name1 = getFirst3Last3(name1);\n            name2 = getFirst3Last3(name2);\n            if ((java.lang.Math.abs(((name1.length()) - (name2.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n                return false;\n            } \n            final int int = java.lang.Math.abs(((name1.length()) + (name2.length())));\n            int int = 0;\n            minRating = getMinRating(sumLength);\n            final int int = leftToRightThenRightToLeftProcessing(name1, name2);\n            return count >= minRating;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"name2","name1":"name2"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:470","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[15,16,21,22],"tindex":"6eea4f49-3e64-11e6-b9d4-33ae35cdd987","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:408","type":"CtMethodImpl","sourcecode":"private int handleG(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (index == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((charAt(value, (index + 1))) == 'H') {\n                index = handleGH(value, result, index);\n            } else if ((charAt(value, (index + 1))) == 'N') {\n                if (((index == 1) && (isVowel(charAt(value, 0)))) && (!slavoGermanic)) {\n                    result.append(\"KN\", \"N\");\n                } else if (((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"EY\"))) && ((charAt(value, (index + 1))) != 'Y')) && (!slavoGermanic)) {\n                    result.append(\"N\", \"KN\");\n                } else {\n                    result.append(\"KN\");\n                }\n                index = index + 2;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"LI\")) && (!slavoGermanic)) {\n                result.append(\"KL\", \"L\");\n                index += 2;\n            } else if ((index == 0) && (((charAt(value, (index + 1))) == 'Y') || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])))) {\n                result.append('K', 'J');\n                index += 2;\n            } else if (((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ER\")) || ((charAt(value, (index + 1))) == 'Y')) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\")))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"E\", \"I\")))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"RGY\", \"OGY\")))) {\n                result.append('K', 'J');\n                index += 2;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"E\", \"I\", \"Y\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"AGGI\", \"OGGI\"))) {\n                if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ET\"))) {\n                    result.append('K');\n                } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")) {\n                    result.append('J');\n                } else {\n                    result.append('J', 'K');\n                }\n                index += 2;\n            } else if ((charAt(value, (index + 1))) == 'G') {\n                index += 2;\n                result.append('K');\n            } else {\n                index++;\n                result.append('K');\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:606","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SH\")"},"failures":[],"tindex":"6eea4f4a-3e64-11e6-b9d4-db63c6519807","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:514","type":"CtMethodImpl","sourcecode":"private int handleJ(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SH\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n                if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n                    result.append('H');\n                } else {\n                    result.append('J', 'H');\n                }\n                index++;\n            } else {\n                if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n                    result.append('J', 'A');\n                } else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n                    result.append('J', 'H');\n                } else if (index == ((value.length()) - 1)) {\n                    result.append('J', ' ');\n                } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n                    result.append('J');\n                } \n                if ((charAt(value, (index + 1))) == 'J') {\n                    index += 2;\n                } else {\n                    index++;\n                }\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:406","type":"CtUnaryOperatorImpl","sourcecode":"!(object instanceof java.lang.String)"},"failures":[],"tindex":"6eea765b-3e64-11e6-b9d4-13dda4bd07aa","method":{"position":"org.apache.commons.codec.binary.Hex:295","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object object) throws org.apache.commons.codec.EncoderException {\n    if (!(object instanceof java.lang.String)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            try {\n                final byte[] byte[] = object instanceof java.lang.String ? ((java.lang.String)(object)).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset()) : ((byte[])(object));\n                return org.apache.commons.codec.binary.Hex.encodeHex(byteArray);\n            } catch (final java.lang.ClassCastException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:270","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[50,51,52,53,54,55,56,57,58,135,65,59,60],"tindex":"6eea9d6c-3e64-11e6-b9d4-ade4b5287509","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:331","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                {\n                    if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                        str = str.substring(1);\n                    } \n                    if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                        str = str.substring(0, ((str.length()) - 1));\n                    } \n                    return str;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[136,137,138,139,140,31,32,33,34,141,35,36,37,38,39,142,143,144,24,25,26,28,145,146,147,30,148],"tindex":"6eea9d6d-3e64-11e6-b9d4-d145caa4db78","method":{"position":"org.apache.commons.codec.binary.StringUtils:162","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUsAscii(final java.lang.String string) {\n    if (string == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:192","type":"CtBinaryOperatorImpl","sourcecode":"n < 0"},"failures":[],"tindex":"6eea9d6e-3e64-11e6-b9d4-1351773fcf79","method":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:191","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(final long n) throws java.io.IOException {\n    if (n < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (n < 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (n < 0) {\n                        throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n));\n                    } \n                    final byte[] byte[] = new byte[512];\n                    long long = n;\n                    while (todo > 0) {\n                        int int = ((int)(java.lang.Math.min(b.int, todo)));\n                        len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len);\n                        if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n                            break;\n                        } \n                        todo -= len;\n                    }\n                    return n - todo;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Soundex:259","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"6eeac47f-3e64-11e6-b9d4-15235623ffb3","method":{"position":"org.apache.commons.codec.language.Caverphone:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.Caverphone.this.caverphone(str);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[],"tindex":"6eeac480-3e64-11e6-b9d4-0157b2bca7a6","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:238","type":"CtMethodImpl","sourcecode":"public static byte[] toAsciiBytes(final byte[] raw) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n                {\n                    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n                        return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n                    } \n                    final byte[] byte[] = new byte[(raw.int) << 3];\n                    for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n                        for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                            if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n                                l_ascii[(jj - bits)] = '0';\n                            } else {\n                                l_ascii[(jj - bits)] = '1';\n                            }\n                        }\n                    }\n                    return l_ascii;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:447","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"6eeaeb91-3e64-11e6-b9d4-c16f4d1f60c2","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:467","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if (charset == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"charset"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:530","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof byte[]"},"failures":[29],"tindex":"6eeaeb92-3e64-11e6-b9d4-13b6b5acddac","method":{"position":"org.apache.commons.codec.net.URLCodec:309","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof byte[]) {\n        {\n            if (obj == null) {\n                return null;\n            } else if (obj instanceof byte[]) {\n                return encode(((byte[])(obj)));\n            } else if (obj instanceof java.lang.String) {\n                return encode(((java.lang.String)(obj)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:162","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isLetter(c))"},"failures":[149],"tindex":"6eeaeb93-3e64-11e6-b9d4-7d7a940b3823","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:161","type":"CtMethodImpl","sourcecode":"char getMappingCode(final char c) {\n    if (!(java.lang.Character.isLetter(c))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(java.lang.Character.isLetter(c))) {\n                return 0;\n            } \n            return org.apache.commons.codec.language.RefinedSoundex.this.char[][((java.lang.Character.toUpperCase(c)) - 'A')];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:270","type":"CtBinaryOperatorImpl","sourcecode":"index == 0"},"failures":[9,10,11,13,14,15,16,17,19,21,22],"tindex":"6eeb12a4-3e64-11e6-b9d4-570613749c50","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:269","type":"CtMethodImpl","sourcecode":"private int handleAEIOUY(final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n    if (index == 0) {\n        {\n            if (index == 0) {\n                result.append('A');\n            } \n            return index + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[150,151,152,148,153,154,155],"tindex":"6eeb12a5-3e64-11e6-b9d4-a1d8e67a0582","method":{"position":"org.apache.commons.codec.binary.StringUtils:137","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUnchecked(final java.lang.String string, final java.lang.String charsetName) {\n    if (charsetName == null) {\n        {\n            if (string == null) {\n                {\n                    if (string == null) {\n                        return null;\n                    } \n                    try {\n                        return string.getBytes(charsetName);\n                    } catch (final java.io.UnsupportedEncodingException e) {\n                        throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:208","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175],"tindex":"6eeb12a6-3e64-11e6-b9d4-05330a8fda50","method":{"position":"org.apache.commons.codec.language.Nysiis:227","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (str == null) {\n        {\n            return org.apache.commons.codec.language.Nysiis.this.nysiis(str);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:110","type":"CtUnaryOperatorImpl","sourcecode":"!(pObject instanceof java.lang.String)"},"failures":[],"tindex":"6eeb39b7-3e64-11e6-b9d4-03501a397f01","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:109","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final java.lang.Object encode(final java.lang.Object pObject) throws org.apache.commons.codec.EncoderException {\n    if (!(pObject instanceof java.lang.String)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(pObject instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\");\n            } \n            return encode(((java.lang.String)(pObject)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pObject":"pObject"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[176,177],"tindex":"6eeb39b8-3e64-11e6-b9d4-83c1fa071bba","method":{"position":"org.apache.commons.codec.digest.HmacUtils:337","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha1(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        {\n            if (key == null) {\n                {\n                    return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key), valueToDigest).doFinal();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[178,76,77,78,179,79,80,180,81,181,182,183,184,185,186],"tindex":"6eeb39b9-3e64-11e6-b9d4-15ad1e6b7c7c","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:91","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.CharSequence str) {\n    if (str == null) {\n        {\n            for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n                ph.append(str);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl","sourcecode":"(input.length()) == 0"},"failures":[178,76,77,78,179,79,80,180,81,181,183,184,185,186],"tindex":"6eeb60ca-3e64-11e6-b9d4-a52e9a1a084a","method":{"position":"org.apache.commons.codec.language.bm.Rule:531","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((input.length()) == 0) {\n                {\n                    return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[9,10,11,12,14,15,16,17,19,21,22],"tindex":"6eeb60cb-3e64-11e6-b9d4-39b584ea24f8","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:915","type":"CtMethodImpl","sourcecode":"protected static boolean contains(final java.lang.String value, final int start, final int length, final java.lang.String... criteria) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    boolean boolean = false;\n                    if ((start >= 0) && ((start + length) <= (value.length()))) {\n                        final java.lang.String java.lang.String = value.substring(start, (start + length));\n                        for (final java.lang.String java.lang.String : criteria) {\n                            if (target.equals(element)) {\n                                result = true;\n                                break;\n                            } \n                        }\n                    } \n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[15,16,17,21,22],"tindex":"6eeb60cc-3e64-11e6-b9d4-c1573d47e967","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:758","type":"CtMethodImpl","sourcecode":"private int handleZ(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (value == null) {\n        {\n            if ((charAt(value, (index + 1))) == 'H') {\n                result.append('J');\n                index += 2;\n            } else {\n                if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ZO\", \"ZI\", \"ZA\")) || (slavoGermanic && ((index > 0) && ((charAt(value, (index - 1))) != 'T')))) {\n                    result.append(\"S\", \"TS\");\n                } else {\n                    result.append('S');\n                }\n                index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:168","type":"CtBinaryOperatorImpl","sourcecode":"b == '+'"},"failures":[136,138,187,140,31,32,33,82,36,37,188,189,190,39,191],"tindex":"6eeb87dd-3e64-11e6-b9d4-497e683514aa","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:182","type":"CtMethodImpl","sourcecode":"private static final int encodeQuotedPrintable(final int b, final java.io.ByteArrayOutputStream buffer) {\n    if (b == '+') {\n        {\n            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n            final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), 16));\n            final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), 16));\n            buffer.write(hex1);\n            buffer.write(hex2);\n            return 3;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[192],"tindex":"6eeb87de-3e64-11e6-b9d4-f12b26d8cdd2","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:87","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final byte[] keyBytes, java.lang.String salt) {\n    if (salt == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n                salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt;\n            } \n            return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[142,143,144],"tindex":"6eebaeef-3e64-11e6-b9d4-9b593b1495a1","method":{"position":"org.apache.commons.codec.net.BCodec:100","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doDecoding(final byte[] bytes) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            return org.apache.commons.codec.binary.Base64.decodeBase64(bytes);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[],"tindex":"6eebaef0-3e64-11e6-b9d4-9d91e0586e2e","method":{"position":"org.apache.commons.codec.binary.StringUtils:137","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUnchecked(final java.lang.String string, final java.lang.String charsetName) {\n    if (charsetName == null) {\n        {\n            if (string == null) {\n                {\n                    if (string == null) {\n                        return null;\n                    } \n                    try {\n                        return string.getBytes(charsetName);\n                    } catch (final java.io.UnsupportedEncodingException e) {\n                        throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"charsetName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:395","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")"},"failures":[],"tindex":"6eebaef1-3e64-11e6-b9d4-e5a1c56fc5f2","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:466","type":"CtMethodImpl","sourcecode":"private int handleGH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((index > 0) && (!(isVowel(charAt(value, (index - 1)))))) {\n                result.append('K');\n                index += 2;\n            } else if (index == 0) {\n                if ((charAt(value, (index + 2))) == 'I') {\n                    result.append('J');\n                } else {\n                    result.append('K');\n                }\n                index += 2;\n            } else if ((((index > 1) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 1, \"B\", \"H\", \"D\"))) || ((index > 2) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"B\", \"H\", \"D\")))) || ((index > 3) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 4), 1, \"B\", \"H\")))) {\n                index += 2;\n            } else {\n                if (((index > 2) && ((charAt(value, (index - 1))) == 'U')) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 1, \"C\", \"G\", \"L\", \"R\", \"T\"))) {\n                    result.append('F');\n                } else if ((index > 0) && ((charAt(value, (index - 1))) != 'I')) {\n                    result.append('K');\n                } \n                index += 2;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:531","type":"CtBinaryOperatorImpl","sourcecode":"index == ((value.length()) - 1)"},"failures":[15,16],"tindex":"6eebd602-3e64-11e6-b9d4-59c42ac82fee","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:498","type":"CtMethodImpl","sourcecode":"private int handleH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (index == ((value.length()) - 1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((index == 0) || (isVowel(charAt(value, (index - 1))))) && (isVowel(charAt(value, (index + 1))))) {\n                result.append('H');\n                index += 2;\n            } else {\n                index++;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[153],"tindex":"6eebd603-3e64-11e6-b9d4-2b437adbe9c7","method":{"position":"org.apache.commons.codec.binary.StringUtils:198","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16Be(final java.lang.String string) {\n    if (string == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:104","type":"CtBinaryOperatorImpl","sourcecode":"text == null"},"failures":[136,137,138,139,140,142,143,144],"tindex":"6eebd604-3e64-11e6-b9d4-8f11b69e71a3","method":{"position":"org.apache.commons.codec.net.RFC1522Codec:124","type":"CtMethodImpl","sourcecode":"protected java.lang.String decodeText(final java.lang.String text) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if (text == null) {\n        {\n            if (text == null) {\n                return null;\n            } \n            if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)))) {\n                throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n            } \n            final int int = (text.length()) - 2;\n            int int = 2;\n            int int = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from);\n            if (to == terminator) {\n                throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n            } \n            final java.lang.String java.lang.String = text.substring(from, to);\n            if (charset.equals(\"\")) {\n                throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n            } \n            from = to + 1;\n            to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from);\n            if (to == terminator) {\n                throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n            } \n            final java.lang.String java.lang.String = text.substring(from, to);\n            if (!(getEncoding().equalsIgnoreCase(encoding))) {\n                throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"));\n            } \n            from = to + 1;\n            to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from);\n            byte[] byte[] = org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(text.substring(from, to));\n            data = doDecoding(data);\n            return new java.lang.String(data , charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"text"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:382","type":"CtBinaryOperatorImpl","sourcecode":"b < 0"},"failures":[142,143,144,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278],"tindex":"6eebfd15-3e64-11e6-b9d4-2fe685dfd071","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:291","type":"CtMethodImpl","sourcecode":"int readResults(final byte[] b, final int bPos, final int bAvail, final org.apache.commons.codec.binary.BaseNCodec.Context context) {\n    if (bPos < 0) {\n        {\n            if ((context.byte[]) != null) {\n                final int int = java.lang.Math.min(available(context), bAvail);\n                java.lang.System.arraycopy(context.byte[], context.int, b, bPos, len);\n                context.int += len;\n                if ((context.int) >= (context.int)) {\n                    context.byte[] = null;\n                } \n                return len;\n            } \n            return context.boolean ? org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int : 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"bPos"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Crypt:66","type":"CtBinaryOperatorImpl","sourcecode":"salt == null"},"failures":[279],"tindex":"6eec2426-3e64-11e6-b9d4-dd061b8f3e8a","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:160","type":"CtMethodImpl","sourcecode":"public static java.lang.String md5Crypt(final byte[] keyBytes, final java.lang.String salt) {\n    if (salt == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6eec2427-3e64-11e6-b9d4-8f7ccb063409","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:915","type":"CtMethodImpl","sourcecode":"protected static boolean contains(final java.lang.String value, final int start, final int length, final java.lang.String... criteria) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    boolean boolean = false;\n                    if ((start >= 0) && ((start + length) <= (value.length()))) {\n                        final java.lang.String java.lang.String = value.substring(start, (start + length));\n                        for (final java.lang.String java.lang.String : criteria) {\n                            if (target.equals(element)) {\n                                result = true;\n                                break;\n                            } \n                        }\n                    } \n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[193],"tindex":"6eec2428-3e64-11e6-b9d4-4944c250d489","method":{"position":"org.apache.commons.codec.net.BCodec:197","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object value) throws org.apache.commons.codec.EncoderException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (value == null) {\n                return null;\n            } else if (value instanceof java.lang.String) {\n                return encode(((java.lang.String)(value)));\n            } else {\n                throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl","sourcecode":"((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))"},"failures":[],"tindex":"6eec4b39-3e64-11e6-b9d4-f13ef2b4ea19","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:398","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(java.lang.String input, final org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet) {\n    if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType, languageSet);\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType, \"common\");\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType, languageSet);\n            input = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale).replace('-', ' ').trim();\n            if ((org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType) == (org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType)) {\n                if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n                    final java.lang.String java.lang.String = input.substring(2);\n                    final java.lang.String java.lang.String = \"d\" + remainder;\n                    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n                } \n                for (final java.lang.String java.lang.String : org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType)) {\n                    if (input.startsWith((l + \" \"))) {\n                        final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n                        final java.lang.String java.lang.String = l + remainder;\n                        return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n                    } \n                }\n            } \n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = java.util.Arrays.asList(input.split(\"\\\\s+\"));\n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n            switch (org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType) {\n                case SEPHARDIC :\n                    for (final java.lang.String java.lang.String : words) {\n                        final java.lang.String[] java.lang.String[] = aWord.split(\"'\");\n                        final java.lang.String java.lang.String = parts[((parts.int) - 1)];\n                        words2.add(lastPart);\n                    }\n                    words2.removeAll(org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType));\n                    break;\n                case ASHKENAZI :\n                    words2.addAll(words);\n                    words2.removeAll(org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType));\n                    break;\n                case GENERIC :\n                    words2.addAll(words);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException((\"Unreachable case: \" + (org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType)));\n            }\n            if (org.apache.commons.codec.language.bm.PhoneticEngine.this.boolean) {\n                input = org.apache.commons.codec.language.bm.PhoneticEngine.join(words2, \" \");\n            } else if ((words2.size()) == 1) {\n                input = words.iterator().next();\n            } else {\n                final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                for (final java.lang.String java.lang.String : words2) {\n                    result.append(\"-\").append(encode(word));\n                }\n                return result.substring(1);\n            }\n            org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.empty(languageSet);\n            for (int int = 0 ; i < (input.length()) ; ) {\n                final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(rules , input , phonemeBuilder , i , int).invoke();\n                i = rulesApplication.getI();\n                phonemeBuilder = rulesApplication.getPhonemeBuilder();\n            }\n            phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules1);\n            phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules2);\n            return phonemeBuilder.makeString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)"},"failures":[280],"tindex":"6eec995a-3e64-11e6-b9d4-85665a2fd59d","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:298","type":"CtMethodImpl","sourcecode":"public static java.lang.String toAsciiString(final byte[] raw) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n        {\n            return new java.lang.String(org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(raw));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"6eec995b-3e64-11e6-b9d4-ed037d1e13bf","method":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:331","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                {\n                    if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                        str = str.substring(1);\n                    } \n                    if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n                        str = str.substring(0, ((str.length()) - 1));\n                    } \n                    return str;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:138","type":"CtBinaryOperatorImpl","sourcecode":"string == null"},"failures":[281,282,283,284,285,286,287,288,289,290,291,292,293,294,176,295,40,177,296,49,297,298,299,195,200,220,222,223,226,228,229,230,300,231,232,301,302,303,304,151,235,305,236,306,237,307,308,238,240,246,247,248,257,309,310,311,312,262,267,276,277,278],"tindex":"6eec995c-3e64-11e6-b9d4-71c96005aedc","method":{"position":"org.apache.commons.codec.binary.StringUtils:234","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf8(final java.lang.String string) {\n    if (string == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtBinaryOperatorImpl","sourcecode":"(txt == null) || ((txt.length()) == 0)"},"failures":[178,76,77,78,179,79,80,180,81,181,313,182,183,184,185,186],"tindex":"6eecc06d-3e64-11e6-b9d4-a923322baf32","method":{"position":"org.apache.commons.codec.language.bm.Lang:91","type":"CtMethodImpl","sourcecode":"public boolean matches(final java.lang.String txt) {\n    if ((txt == null) || ((txt.length()) == 0)) {\n        {\n            return org.apache.commons.codec.language.bm.Lang.LangRule.this.java.util.regex.Pattern.matcher(txt).find();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"txt":"txt"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"6eecc06e-3e64-11e6-b9d4-3b586d4b2648","method":{"position":"org.apache.commons.codec.net.QCodec:169","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doDecoding(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    if (bytes == null) {\n                        return null;\n                    } \n                    boolean boolean = false;\n                    for (final byte byte : bytes) {\n                        if (b == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                            hasUnderscores = true;\n                            break;\n                        } \n                    }\n                    if (hasUnderscores) {\n                        final byte[] byte[] = new byte[bytes.int];\n                        for (int int = 0 ; i < (bytes.int) ; i++) {\n                            final byte byte = bytes[i];\n                            if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                                tmp[i] = b;\n                            } else {\n                                tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n                            }\n                        }\n                        return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp);\n                    } \n                    return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6eece77f-3e64-11e6-b9d4-3983045d6e35","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:703","type":"CtMethodImpl","sourcecode":"private int handleW(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WR\")) {\n                result.append('R');\n                index += 2;\n            } else {\n                if ((index == 0) && ((isVowel(charAt(value, (index + 1)))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WH\")))) {\n                    if (isVowel(charAt(value, (index + 1)))) {\n                        result.append('A', 'F');\n                    } else {\n                        result.append('A');\n                    }\n                    index++;\n                } else if ((((index == ((value.length()) - 1)) && (isVowel(charAt(value, (index - 1))))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n                    result.appendAlternate('F');\n                    index++;\n                } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n                    result.append(\"TS\", \"FX\");\n                    index += 4;\n                } else {\n                    index++;\n                }\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:77","type":"CtBinaryOperatorImpl","sourcecode":"(cs1 instanceof java.lang.String) && (cs2 instanceof java.lang.String)"},"failures":[11,13],"tindex":"6eece780-3e64-11e6-b9d4-3b66cef34ae3","method":{"position":"org.apache.commons.codec.binary.StringUtils:70","type":"CtMethodImpl","sourcecode":"public static boolean equals(final java.lang.CharSequence cs1, final java.lang.CharSequence cs2) {\n    if (cs2 == cs2) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((cs1 instanceof java.lang.String) && (cs1 instanceof java.lang.String)) {\n                {\n                    if (cs1 == cs2) {\n                        return true;\n                    } \n                    if ((cs1 == null) || (cs2 == null)) {\n                        return false;\n                    } \n                    if ((cs1 instanceof java.lang.String) && (cs2 instanceof java.lang.String)) {\n                        return cs1.equals(cs2);\n                    } \n                    return org.apache.commons.codec.binary.CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, java.lang.Math.max(cs1.length(), cs2.length()));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs1":"cs1","cs2":"cs1"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtInvocationImpl","sourcecode":"charset.equals(\"\")"},"failures":[314],"tindex":"6eece781-3e64-11e6-b9d4-d946605eaf15","method":{"position":"org.apache.commons.codec.Charsets:86","type":"CtMethodImpl","sourcecode":"public static java.nio.charset.Charset toCharset(final java.lang.String charset) {\n    if (charset.equals(\"\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return charset == null ? java.nio.charset.Charset.defaultCharset() : java.nio.charset.Charset.forName(charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"charset"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:162","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[],"tindex":"6eed0e92-3e64-11e6-b9d4-3d938f5e7d9d","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:201","type":"CtMethodImpl","sourcecode":"private static int getUnsignedOctet(final int index, final byte[] bytes) {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = bytes[index];\n            if (b < 0) {\n                b = 256 + b;\n            } \n            return b;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"6eed0e93-3e64-11e6-b9d4-7b8123d42c47","method":{"position":"org.apache.commons.codec.digest.HmacUtils:633","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha512(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"valueToDigest"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:395","type":"CtBinaryOperatorImpl","sourcecode":"(i & 1) != 0"},"failures":[248,277],"tindex":"6eed0e94-3e64-11e6-b9d4-e716697d50e7","method":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(final int i) throws java.io.IOException {\n    if ((i & 1) != 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            byte[][0] = ((byte)(i));\n            write(byte[], 0, 1);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"i":"i"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl","sourcecode":"bytes == null"},"failures":[315,316,317,318,319,320,321],"tindex":"6eed0e95-3e64-11e6-b9d4-5592a0a5dda2","method":{"position":"org.apache.commons.codec.binary.StringUtils:279","type":"CtMethodImpl","sourcecode":"public static java.lang.String newString(final byte[] bytes, final java.lang.String charsetName) {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            try {\n                return new java.lang.String(bytes , charsetName);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"6eed35a6-3e64-11e6-b9d4-e1dce6539dd7","method":{"position":"org.apache.commons.codec.digest.HmacUtils:551","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha384(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key), valueToDigest).doFinal();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl","sourcecode":"((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))"},"failures":[],"tindex":"6eed35a7-3e64-11e6-b9d4-f189d38d6b1f","method":{"position":"org.apache.commons.codec.language.bm.Rule:531","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((input.length()) == 0) {\n                {\n                    return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:801","type":"CtBinaryOperatorImpl","sourcecode":"index != 0"},"failures":[322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351],"tindex":"6eed35a8-3e64-11e6-b9d4-b979397005bc","method":{"position":"org.apache.commons.codec.language.Metaphone:342","type":"CtMethodImpl","sourcecode":"private boolean isPreviousChar(final java.lang.StringBuilder string, final int index, final char c) {\n    if (index != 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            if ((index > 0) && (index < (string.length()))) {\n                matches = (string.charAt((index - 1))) == c;\n            } \n            return matches;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6eed35a9-3e64-11e6-b9d4-35c62135b97e","method":{"position":"org.apache.commons.codec.net.BCodec:119","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String value, final java.nio.charset.Charset charset) throws org.apache.commons.codec.EncoderException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (value == null) {\n                return null;\n            } \n            return encodeText(value, charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:71","type":"CtBinaryOperatorImpl","sourcecode":"cs1 == cs2"},"failures":[],"tindex":"6eed5cba-3e64-11e6-b9d4-81db8c6c1a08","method":{"position":"org.apache.commons.codec.binary.StringUtils:70","type":"CtMethodImpl","sourcecode":"public static boolean equals(final java.lang.CharSequence cs1, final java.lang.CharSequence cs2) {\n    if (cs2 == cs2) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((cs1 instanceof java.lang.String) && (cs1 instanceof java.lang.String)) {\n                {\n                    if (cs1 == cs2) {\n                        return true;\n                    } \n                    if ((cs1 == null) || (cs2 == null)) {\n                        return false;\n                    } \n                    if ((cs1 instanceof java.lang.String) && (cs2 instanceof java.lang.String)) {\n                        return cs1.equals(cs2);\n                    } \n                    return org.apache.commons.codec.binary.CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, java.lang.Math.max(cs1.length(), cs2.length()));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs1":"cs2","cs2":"cs2"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[296],"tindex":"6eed5cbb-3e64-11e6-b9d4-974859e1bec2","method":{"position":"org.apache.commons.codec.digest.HmacUtils:526","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha384(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[],"tindex":"6eed5cbc-3e64-11e6-b9d4-6df3be1cdc40","method":{"position":"org.apache.commons.codec.digest.HmacUtils:337","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha1(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        {\n            if (key == null) {\n                {\n                    return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key), valueToDigest).doFinal();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248007270/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
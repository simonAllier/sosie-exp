{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":12,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":127,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":150,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":202,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":156,"org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException":57,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":237,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":235,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":236,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":83,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":254,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":239,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":145,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":71,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":118,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull":45,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":98,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":139,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":203,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":114,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":124,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData":37,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty":228,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithEmptySalt":1,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":129,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":24,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":30,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":162,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":248,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":250,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":91,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":249,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":90,"org.apache.commons.codec.language.NysiisTest.testCap":255,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":149,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":165,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":184,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le":190,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":89,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":163,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":39,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":85,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":86,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":113,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent":181,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":183,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":93,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii":188,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":215,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":54,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":103,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":104,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":16,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":97,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail":51,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":117,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":201,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":171,"org.apache.commons.codec.language.MetaphoneTest.testEncodeEmpty":179,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":62,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull":43,"org.apache.commons.codec.language.SoundexTest.testB650":234,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8":34,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":153,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":20,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":279,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16":191,"org.apache.commons.codec.language.SoundexTest.testNewInstance":242,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":147,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":166,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":10,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":159,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":122,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":218,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":280,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":173,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":205,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":144,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":199,"org.apache.commons.codec.language.NysiisTest.testDropBy":268,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":168,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":95,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringBadEnc":192,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":277,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":152,"org.apache.commons.codec.net.QCodecTest.testNullInput":84,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":275,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":41,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":216,"org.apache.commons.codec.binary.Base64Test.testConstructors":21,"org.apache.commons.codec.language.NysiisTest.testRule2":260,"org.apache.commons.codec.language.NysiisTest.testRule1":259,"org.apache.commons.codec.language.NysiisTest.testRule7":263,"org.apache.commons.codec.language.NysiisTest.testRule6":262,"org.apache.commons.codec.language.NysiisTest.testRule5":261,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":276,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":141,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":123,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":243,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":223,"org.apache.commons.codec.language.NysiisTest.testBran":264,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":271,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":146,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":78,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":220,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":92,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":47,"org.apache.commons.codec.language.SoundexTest.testEncodeNull":88,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":142,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":4,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectNull":18,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":238,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":121,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":196,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":94,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":110,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":111,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":33,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":28,"org.apache.commons.codec.binary.HexTest.testEncodeEmpty":224,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":244,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":230,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":212,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":197,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":72,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert":119,"org.apache.commons.codec.language.NysiisTest.testDad":256,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":35,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":56,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":198,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":175,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":253,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":107,"org.apache.commons.codec.language.NysiisTest.testDan":257,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":157,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":63,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105":214,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":213,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":158,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":164,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":13,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":59,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":195,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":154,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":170,"org.apache.commons.codec.language.NysiisTest.testSnat":266,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":174,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeNull":225,"org.apache.commons.codec.language.NysiisTest.testEncodeEmpty":272,"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty":46,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":53,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":64,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":75,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":74,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":134,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":9,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":36,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":209,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":81,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":79,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":82,"org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence":105,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument":48,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":278,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":137,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":206,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":274,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":208,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":26,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex":227,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithInvalidSalt":6,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1":226,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":136,"org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac":58,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":76,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":194,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":67,"org.apache.commons.codec.digest.HmacUtilsTest.testEmptyKey":65,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":247,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":245,"org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence":221,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":125,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":246,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":55,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":61,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":204,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":96,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":186,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":210,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":11,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":155,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":80,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":240,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":5,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":169,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":185,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":40,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":229,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":8,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":27,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":132,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":3,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":143,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":133,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":138,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":7,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":100,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":160,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero":128,"org.apache.commons.codec.language.MetaphoneTest.testWhy":109,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":193,"org.apache.commons.codec.language.NysiisTest.testTranan":270,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":161,"org.apache.commons.codec.language.NysiisTest.testFal":258,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":182,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0":140,"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence":252,"org.apache.commons.codec.language.NysiisTest.testSnad":265,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":99,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":38,"org.apache.commons.codec.language.MetaphoneTest.testTCH":108,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":200,"org.apache.commons.codec.language.NysiisTest.testLocaleIndependence":273,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars":17,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":112,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":231,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":232,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":233,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":217,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":25,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":70,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":116,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":115,"org.apache.commons.codec.binary.Base64Test.testBase64":23,"org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull":50,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":73,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":15,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":32,"org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence":222,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData":2,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":31,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":126,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":211,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":68,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":172,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":49,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":120,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":178,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":19,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty":44,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay":135,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":267,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":167,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":219,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":130,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":102,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":0,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":241,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":106,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":251,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":42,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":101,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be":189,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":207,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":176,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":148,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":29,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":77,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":66,"org.apache.commons.codec.language.NysiisTest.testOthers":269,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":22,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":131,"org.apache.commons.codec.language.SoundexTest.testDifference":87,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1":187,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":180,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":177,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":69,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":14,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":151,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullAlgo":60,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16":52},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7],"tindex":"317d5789-3f20-11e6-9c7e-dbd5c9590f8a","method":{"position":"org.apache.commons.codec.digest.Md5Crypt:87","type":"CtMethodImpl","sourcecode":"public static java.lang.String apr1Crypt(final byte[] keyBytes, java.lang.String salt) {\n    if (salt == null) {\n        {\n            if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n                salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt;\n            } \n            return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:614","type":"CtBinaryOperatorImpl"},"failures":[8,9,10,11,12,13,14,15],"tindex":"317dccba-3f20-11e6-9c7e-9b697da42016","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:582","type":"CtMethodImpl","sourcecode":"private int handleR(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index, final boolean slavoGermanic) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"SIO\", \"SIA\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"SIAN\"))) {\n                {\n                    if ((((index == ((value.length()) - 1)) && (!slavoGermanic)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"IE\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 4), 2, \"ME\", \"MA\")))) {\n                        result.appendAlternate('R');\n                    } else {\n                        result.append('R');\n                    }\n                    return (charAt(value, (index + 1))) == 'R' ? index + 2 : index + 1;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:244","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"317df3cb-3f20-11e6-9c7e-29e08dcb7f05","method":{"position":"org.apache.commons.codec.language.Caverphone:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) {\n    if (str == null) {\n        {\n            return org.apache.commons.codec.language.Caverphone.this.caverphone(str);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodec:335","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"317df3cc-3f20-11e6-9c7e-87aad51b7994","method":{"position":"org.apache.commons.codec.language.Caverphone:73","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (!(obj instanceof byte[])) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n            } \n            return org.apache.commons.codec.language.Caverphone.this.caverphone(((java.lang.String)(obj)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:153","type":"CtBinaryOperatorImpl"},"failures":[16],"tindex":"317e1add-3f20-11e6-9c7e-83d63cb9961a","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:152","type":"CtMethodImpl","sourcecode":"public byte[] toByteArray(final java.lang.String ascii) {\n    if (ascii == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (ascii == null) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii.toCharArray());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ascii":"ascii"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtInvocationImpl"},"failures":[17,18],"tindex":"317e1ade-3f20-11e6-9c7e-35e14a481c2d","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:268","type":"CtMethodImpl","sourcecode":"public static char[] toAsciiChars(final byte[] raw) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.char[];\n            } \n            final char[] char[] = new char[(raw.int) << 3];\n            for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n                for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                    if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n                        l_ascii[(jj - bits)] = '0';\n                    } else {\n                        l_ascii[(jj - bits)] = '1';\n                    }\n                }\n            }\n            return l_ascii;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtBinaryOperatorImpl"},"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"tindex":"317e41ef-3f20-11e6-9c7e-c70b8e4138ea","method":{"position":"org.apache.commons.codec.binary.StringUtils:256","type":"CtMethodImpl","sourcecode":"private static java.lang.String newString(final byte[] bytes, final java.nio.charset.Charset charset) {\n    if (bytes == null) {\n        {\n            return bytes == null ? null : new java.lang.String(bytes , charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtBinaryOperatorImpl"},"failures":[37,38,39,40],"tindex":"317e41f0-3f20-11e6-9c7e-57863f5c723e","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:539","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Crypt(final byte[] keyBytes, java.lang.String salt) {\n    if (salt == null) {\n        {\n            if (salt == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (salt == null) {\n                        salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n                    } \n                    return org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(keyBytes, salt, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl"},"failures":[9,41,42,43,44,45,46],"tindex":"317e6901-3f20-11e6-9c7e-8f9bb93702bc","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:888","type":"CtMethodImpl","sourcecode":"private java.lang.String cleanInput(java.lang.String input) {\n    if (input == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (input == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((input.length()) == 0) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (input == null) {\n                                return null;\n                            } \n                            input = input.trim();\n                            if ((input.length()) == 0) {\n                                return null;\n                            } \n                            return input.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl"},"failures":[47],"tindex":"317e6902-3f20-11e6-9c7e-a9d8a523fd36","method":{"position":"org.apache.commons.codec.digest.HmacUtils:601","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha384Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (key == null) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:530","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"317e9013-3f20-11e6-9c7e-49de35211acd","method":{"position":"org.apache.commons.codec.language.Soundex:149","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj instanceof byte[]) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (!(obj instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n                    } \n                    return soundex(((java.lang.String)(obj)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:192","type":"CtBinaryOperatorImpl"},"failures":[48,49],"tindex":"317e9014-3f20-11e6-9c7e-c1ac93409501","method":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:191","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(final long n) throws java.io.IOException {\n    if (n < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (n < 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (n < 0) {\n                        throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n));\n                    } \n                    final byte[] byte[] = new byte[512];\n                    long long = n;\n                    while (todo > 0) {\n                        int int = ((int)(java.lang.Math.min(b.int, todo)));\n                        len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len);\n                        if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n                            break;\n                        } \n                        todo -= len;\n                    }\n                    return n - todo;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:575","type":"CtBinaryOperatorImpl"},"failures":[50],"tindex":"317eb725-3f20-11e6-9c7e-d9c703960441","method":{"position":"org.apache.commons.codec.net.URLCodec:243","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if (str == null) {\n        {\n            if (str == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    try {\n                        return encode(str, getDefaultCharset());\n                    } catch (final java.io.UnsupportedEncodingException e) {\n                        throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtInvocationImpl"},"failures":[],"tindex":"317ede36-3f20-11e6-9c7e-51ab58d34711","method":{"position":"org.apache.commons.codec.net.BCodec:158","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String value) throws org.apache.commons.codec.EncoderException {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n        {\n            if (value == null) {\n                return null;\n            } \n            return encode(value, org.apache.commons.codec.net.BCodec.this.getCharset());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"317ede37-3f20-11e6-9c7e-7330769ad604","method":{"position":"org.apache.commons.codec.binary.StringUtils:198","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16Be(final java.lang.String string) {\n    if (string == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"317ede38-3f20-11e6-9c7e-358667c16f88","method":{"position":"org.apache.commons.codec.binary.StringUtils:366","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf16Le(final byte[] bytes) {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:575","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"317f0549-3f20-11e6-9c7e-cfcf34cec669","method":{"position":"org.apache.commons.codec.language.bm.Rule:124","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Rule.Phoneme append(final java.lang.CharSequence str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.append(str);\n            return org.apache.commons.codec.language.bm.Rule.Phoneme.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:500","type":"CtInvocationImpl"},"failures":[],"tindex":"317f054a-3f20-11e6-9c7e-6f892997e6de","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:253","type":"CtMethodImpl","sourcecode":"public void addLeft(final char ch) {\n    if (java.lang.Character.isWhitespace(ch)) {\n        {\n            if (java.lang.Character.isWhitespace(ch)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (java.lang.Character.isWhitespace(ch)) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            (int)++;\n                            char[][getNextPos()] = ch;\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:138","type":"CtBinaryOperatorImpl"},"failures":[10,11,14,15],"tindex":"317f054b-3f20-11e6-9c7e-bd530f40b073","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:800","type":"CtMethodImpl","sourcecode":"private boolean conditionCH0(final java.lang.String value, final int index) {\n    if (value == null) {\n        {\n            if (index != 0) {\n                return false;\n            } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n                return false;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base32:355","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"317f2c5c-3f20-11e6-9c7e-2b734a416bac","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:355","type":"CtMethodImpl","sourcecode":"private int handleCH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n    if (index >= 0) {\n        {\n            if ((index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))) {\n                result.append('K', 'X');\n                return index + 2;\n            } else if (conditionCH0(value, index)) {\n                result.append('K');\n                return index + 2;\n            } else if (conditionCH1(value, index)) {\n                result.append('K');\n                return index + 2;\n            } else {\n                if (index > 0) {\n                    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n                        result.append('K');\n                    } else {\n                        result.append('X', 'K');\n                    }\n                } else {\n                    result.append('X');\n                }\n                return index + 2;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl"},"failures":[51],"tindex":"317f2c5d-3f20-11e6-9c7e-b5852d31d12b","method":{"position":"org.apache.commons.codec.digest.HmacUtils:98","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha256(final byte[] key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtBinaryOperatorImpl"},"failures":[52],"tindex":"317f2c5e-3f20-11e6-9c7e-31d50527899f","method":{"position":"org.apache.commons.codec.binary.StringUtils:180","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesUtf16(final java.lang.String string) {\n    if (string == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl"},"failures":[53],"tindex":"317f536f-3f20-11e6-9c7e-231f4bd6abf5","method":{"position":"org.apache.commons.codec.digest.HmacUtils:474","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha256Hex(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"317f5370-3f20-11e6-9c7e-b31479a22c61","method":{"position":"org.apache.commons.codec.language.Caverphone:57","type":"CtMethodImpl","sourcecode":"public java.lang.String caverphone(final java.lang.String source) {\n    if (source == null) {\n        {\n            return org.apache.commons.codec.language.Caverphone.this.org.apache.commons.codec.language.Caverphone2.encode(source);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl"},"failures":[54,55,56,57,53,58,59,60,47,61,62,63,64,65,66],"tindex":"317f5371-3f20-11e6-9c7e-1f853562b6b2","method":{"position":"org.apache.commons.codec.digest.HmacUtils:174","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getInitializedMac(final java.lang.String algorithm, final byte[] key) {\n    if (key == null) {\n        {\n            if (key == null) {\n                throw new java.lang.IllegalArgumentException(\"Null key\");\n            } \n            try {\n                final javax.crypto.spec.SecretKeySpec javax.crypto.spec.SecretKeySpec = new javax.crypto.spec.SecretKeySpec(key , algorithm);\n                final javax.crypto.Mac javax.crypto.Mac = javax.crypto.Mac.getInstance(algorithm);\n                mac.init(keySpec);\n                return mac;\n            } catch (final java.security.NoSuchAlgorithmException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            } catch (final java.security.InvalidKeyException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl"},"failures":[67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"tindex":"317f5372-3f20-11e6-9c7e-8545235c3063","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:383","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String input) {\n    if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        {\n            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.Lang.guessLanguages(input);\n            return encode(input, languageSet);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtInvocationImpl"},"failures":[9,10,11,12,14,15],"tindex":"317f7a83-3f20-11e6-9c7e-cd981dfcb453","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:978","type":"CtMethodImpl","sourcecode":"public void appendPrimary(final java.lang.String value) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n        {\n            final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length());\n            if ((value.length()) <= addChars) {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n            } else {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:264","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"317f7a84-3f20-11e6-9c7e-e7f006e3c00d","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:392","type":"CtMethodImpl","sourcecode":"private static int hPermOp(int a, final int n, final int m) {\n    if (m == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (n > 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final int int = ((a << (16 - n)) ^ a) & m;\n                    a = (a ^ t) ^ (t >>> (16 - n));\n                    return a;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtBinaryOperatorImpl"},"failures":[77],"tindex":"317fa195-3f20-11e6-9c7e-c19e7308888b","method":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:398","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(java.lang.String input, final org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet) {\n    if ((input.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType, languageSet);\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType, \"common\");\n            final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType, languageSet);\n            input = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale).replace('-', ' ').trim();\n            if ((org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType) == (org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType)) {\n                if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n                    final java.lang.String java.lang.String = input.substring(2);\n                    final java.lang.String java.lang.String = \"d\" + remainder;\n                    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n                } \n                for (final java.lang.String java.lang.String : org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType)) {\n                    if (input.startsWith((l + \" \"))) {\n                        final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n                        final java.lang.String java.lang.String = l + remainder;\n                        return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n                    } \n                }\n            } \n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = java.util.Arrays.asList(input.split(\"\\\\s+\"));\n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n            switch (org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType) {\n                case SEPHARDIC :\n                    for (final java.lang.String java.lang.String : words) {\n                        final java.lang.String[] java.lang.String[] = aWord.split(\"'\");\n                        final java.lang.String java.lang.String = parts[((parts.int) - 1)];\n                        words2.add(lastPart);\n                    }\n                    words2.removeAll(org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType));\n                    break;\n                case ASHKENAZI :\n                    words2.addAll(words);\n                    words2.removeAll(org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.get(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType));\n                    break;\n                case GENERIC :\n                    words2.addAll(words);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException((\"Unreachable case: \" + (org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType)));\n            }\n            if (org.apache.commons.codec.language.bm.PhoneticEngine.this.boolean) {\n                input = org.apache.commons.codec.language.bm.PhoneticEngine.join(words2, \" \");\n            } else if ((words2.size()) == 1) {\n                input = words.iterator().next();\n            } else {\n                final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                for (final java.lang.String java.lang.String : words2) {\n                    result.append(\"-\").append(encode(word));\n                }\n                return result.substring(1);\n            }\n            org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.empty(languageSet);\n            for (int int = 0 ; i < (input.length()) ; ) {\n                final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(rules , input , phonemeBuilder , i , int).invoke();\n                i = rulesApplication.getI();\n                phonemeBuilder = rulesApplication.getPhonemeBuilder();\n            }\n            phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules1);\n            phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules2);\n            return phonemeBuilder.makeString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:161","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"317fc8a6-3f20-11e6-9c7e-4dd328cc5377","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:392","type":"CtMethodImpl","sourcecode":"private static int hPermOp(int a, final int n, final int m) {\n    if (m == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (n > 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final int int = ((a << (16 - n)) ^ a) & m;\n                    a = (a ^ t) ^ (t >>> (16 - n));\n                    return a;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"m"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:528","type":"CtBinaryOperatorImpl"},"failures":[83],"tindex":"317fc8a7-3f20-11e6-9c7e-dd86a8437005","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof byte[]) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (obj == null) {\n                        return null;\n                    } else if (obj instanceof byte[]) {\n                        return encode(((byte[])(obj)));\n                    } else if (obj instanceof java.lang.String) {\n                        return encode(((java.lang.String)(obj)));\n                    } else {\n                        throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl"},"failures":[84],"tindex":"317fefb8-3f20-11e6-9c7e-9d5be6b10c5c","method":{"position":"org.apache.commons.codec.net.QCodec:153","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected byte[] doEncoding(final byte[] bytes) {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            final byte[] byte[] = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet, bytes);\n            if (org.apache.commons.codec.net.QCodec.this.boolean) {\n                for (int int = 0 ; i < (data.int) ; i++) {\n                    if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n                        data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n                    } \n                }\n            } \n            return data;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:762","type":"CtBinaryOperatorImpl"},"failures":[85,86],"tindex":"317fefb9-3f20-11e6-9c7e-bfab9c79e2c1","method":{"position":"org.apache.commons.codec.binary.Base64:734","type":"CtMethodImpl","sourcecode":"public static byte[] encodeInteger(final java.math.BigInteger bigInt) {\n    if (((bigInt.bitLength()) % 8) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((bigInt.bitLength()) % 8) == 0) {\n                {\n                    if (bigInt == null) {\n                        throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\");\n                    } \n                    return org.apache.commons.codec.binary.Base64.encodeBase64(org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInt), false);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bigInt":"bigInt"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl"},"failures":[87,88],"tindex":"318016ca-3f20-11e6-9c7e-7792f479c182","method":{"position":"org.apache.commons.codec.language.Soundex:258","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n            if ((str.length()) == 0) {\n                return str;\n            } \n            final char[] char[] = new char[]{ '0' , '0' , '0' , '0' };\n            char char;\n            char char;\n            int int = 1;\n            int int = 1;\n            out[0] = str.charAt(0);\n            last = getMappingCode(str, 0);\n            while ((incount < (str.length())) && (count < (out.int))) {\n                mapped = getMappingCode(str, (incount++));\n                if (mapped != 0) {\n                    if ((mapped != '0') && (mapped != last)) {\n                        out[(count++)] = mapped;\n                    } \n                    last = mapped;\n                } \n            }\n            return new java.lang.String(out);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:104","type":"CtBinaryOperatorImpl"},"failures":[89,90,91,92,93,94,95,96,97,98,99],"tindex":"318016cb-3f20-11e6-9c7e-1930fa9e1f3c","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:319","type":"CtMethodImpl","sourcecode":"public java.lang.String colognePhonetic(java.lang.String text) {\n    if (text == null) {\n        {\n            if (text == null) {\n                return null;\n            } \n            text = preprocess(text);\n            final org.apache.commons.codec.language.ColognePhonetic.CologneOutputBuffer org.apache.commons.codec.language.ColognePhonetic.CologneOutputBuffer = new org.apache.commons.codec.language.ColognePhonetic.CologneOutputBuffer(((text.length()) * 2));\n            final org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer = new org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer(text.toCharArray());\n            char char;\n            char char = '-';\n            char char = '/';\n            char char;\n            char char;\n            int int = input.length();\n            while (rightLength > 0) {\n                chr = input.removeNext();\n                if ((rightLength = input.length()) > 0) {\n                    nextChar = input.getNextChar();\n                } else {\n                    nextChar = '-';\n                }\n                if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n                    code = '0';\n                } else if (((chr == 'H') || (chr < 'A')) || (chr > 'Z')) {\n                    if (lastCode == '/') {\n                        continue;\n                    } \n                    code = '-';\n                } else if ((chr == 'B') || ((chr == 'P') && (nextChar != 'H'))) {\n                    code = '1';\n                } else if (((chr == 'D') || (chr == 'T')) && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n                    code = '2';\n                } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n                    code = '3';\n                } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n                    code = '4';\n                } else if ((chr == 'X') && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)))) {\n                    code = '4';\n                    input.addLeft('S');\n                    rightLength++;\n                } else if ((chr == 'S') || (chr == 'Z')) {\n                    code = '8';\n                } else if (chr == 'C') {\n                    if (lastCode == '/') {\n                        if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)) {\n                            code = '4';\n                        } else {\n                            code = '8';\n                        }\n                    } else {\n                        if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n                            code = '8';\n                        } else {\n                            code = '4';\n                        }\n                    }\n                } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n                    code = '8';\n                } else if (chr == 'R') {\n                    code = '7';\n                } else if (chr == 'L') {\n                    code = '5';\n                } else if ((chr == 'M') || (chr == 'N')) {\n                    code = '6';\n                } else {\n                    code = chr;\n                }\n                if ((code != '-') && ((((lastCode != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))) {\n                    output.addRight(code);\n                } \n                lastChar = chr;\n                lastCode = code;\n            }\n            return output.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"text"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:162","type":"CtUnaryOperatorImpl"},"failures":[100,101,102,103,104,105],"tindex":"31803ddc-3f20-11e6-9c7e-0115ba539052","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:161","type":"CtMethodImpl","sourcecode":"char getMappingCode(final char c) {\n    if (!(java.lang.Character.isLetter(c))) {\n        {\n            if (!(java.lang.Character.isLetter(c))) {\n                return 0;\n            } \n            return org.apache.commons.codec.language.RefinedSoundex.this.char[][((java.lang.Character.toUpperCase(c)) - 'A')];\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Metaphone:344","type":"CtBinaryOperatorImpl"},"failures":[106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135],"tindex":"31803ddd-3f20-11e6-9c7e-3544d668814e","method":{"position":"org.apache.commons.codec.language.Metaphone:342","type":"CtMethodImpl","sourcecode":"private boolean isPreviousChar(final java.lang.StringBuilder string, final int index, final char c) {\n    if (index <= 1) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((index > 0) && (index < (string.length()))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = false;\n                    if ((index > 0) && (index < (string.length()))) {\n                        matches = (string.charAt((index - 1))) == c;\n                    } \n                    return matches;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string","index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"318064ee-3f20-11e6-9c7e-e51d81379c51","method":{"position":"org.apache.commons.codec.digest.UnixCrypt:338","type":"CtMethodImpl","sourcecode":"private static int[] desSetKey(final byte[] key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int[] int[] = new int[32];\n            int int = org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(key, 0);\n            int int = org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(key, 4);\n            final int[] int[] = new int[2];\n            org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 4, 252645135, results);\n            d = results[0];\n            c = results[1];\n            c = org.apache.commons.codec.digest.UnixCrypt.hPermOp(c, (-2), -859045888);\n            d = org.apache.commons.codec.digest.UnixCrypt.hPermOp(d, (-2), -859045888);\n            org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results);\n            d = results[0];\n            c = results[1];\n            org.apache.commons.codec.digest.UnixCrypt.permOp(c, d, 8, 16711935, results);\n            c = results[0];\n            d = results[1];\n            org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results);\n            d = results[0];\n            c = results[1];\n            d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4);\n            c &= 268435455;\n            int int = 0;\n            for (int int = 0 ; i < 16 ; i++) {\n                if (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.boolean[][i]) {\n                    c = (c >>> 2) | (c << 26);\n                    d = (d >>> 2) | (d << 26);\n                } else {\n                    c = (c >>> 1) | (c << 27);\n                    d = (d >>> 1) | (d << 27);\n                }\n                c &= 268435455;\n                d &= 268435455;\n                int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(c & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(((c >>> 6) & 3) | ((c >>> 7) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][(((c >>> 13) & 15) | ((c >>> 14) & 48))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((((c >>> 20) & 1) | ((c >>> 21) & 6)) | ((c >>> 22) & 56))]);\n                final int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][(d & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][(((d >>> 7) & 3) | ((d >>> 8) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((d >>> 15) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][(((d >>> 21) & 15) | ((d >>> 22) & 48))]);\n                schedule[(j++)] = (t << 16) | (s & 65535);\n                s = (s >>> 16) | (t & -65536);\n                s = (s << 4) | (s >>> 28);\n                schedule[(j++)] = s;\n            }\n            return schedule;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:192","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"318064ef-3f20-11e6-9c7e-4bccaed53217","method":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:191","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(final long n) throws java.io.IOException {\n    if (n < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (n < 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (n < 0) {\n                        throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n));\n                    } \n                    final byte[] byte[] = new byte[512];\n                    long long = n;\n                    while (todo > 0) {\n                        int int = ((int)(java.lang.Math.min(b.int, todo)));\n                        len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len);\n                        if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n                            break;\n                        } \n                        todo -= len;\n                    }\n                    return n - todo;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:312","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31808c00-3f20-11e6-9c7e-13d04dc8ce27","method":{"position":"org.apache.commons.codec.language.Soundex:149","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj instanceof byte[]) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (!(obj instanceof java.lang.String)) {\n                        throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n                    } \n                    return soundex(((java.lang.String)(obj)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31808c01-3f20-11e6-9c7e-0d166f59de33","method":{"position":"org.apache.commons.codec.digest.Sha2Crypt:539","type":"CtMethodImpl","sourcecode":"public static java.lang.String sha512Crypt(final byte[] keyBytes, java.lang.String salt) {\n    if (salt == null) {\n        {\n            if (salt == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (salt == null) {\n                        salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n                    } \n                    return org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(keyBytes, salt, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"salt":"salt"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.BinaryCodec:269","type":"CtInvocationImpl"},"failures":[136,137],"tindex":"3180b312-3f20-11e6-9c7e-f7004b07dbfa","method":{"position":"org.apache.commons.codec.binary.BinaryCodec:238","type":"CtMethodImpl","sourcecode":"public static byte[] toAsciiBytes(final byte[] raw) {\n    if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n        {\n            if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n                return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n            } \n            final byte[] byte[] = new byte[(raw.int) << 3];\n            for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n                for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n                    if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n                        l_ascii[(jj - bits)] = '0';\n                    } else {\n                        l_ascii[(jj - bits)] = '1';\n                    }\n                }\n            }\n            return l_ascii;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:220","type":"CtInvocationImpl"},"failures":[138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175],"tindex":"3180b313-3f20-11e6-9c7e-51c9fba064eb","method":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:294","type":"CtMethodImpl","sourcecode":"int leftToRightThenRightToLeftProcessing(final java.lang.String name1, final java.lang.String name2) {\n    if (name1.equalsIgnoreCase(name1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final char[] char[] = name1.toCharArray();\n            final char[] char[] = name2.toCharArray();\n            final int int = (name1.length()) - 1;\n            final int int = (name2.length()) - 1;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n            for (int int = 0 ; i < (name1Char.int) ; i++) {\n                if (i > name2Size) {\n                    break;\n                } \n                name1LtRStart = name1.substring(i, (i + 1));\n                name1LtREnd = name1.substring((name1Size - i), ((name1Size - i) + 1));\n                name2RtLStart = name2.substring(i, (i + 1));\n                name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1));\n                if (name1LtRStart.equals(name2RtLStart)) {\n                    name1Char[i] = ' ';\n                    name2Char[i] = ' ';\n                } \n                if (name1LtREnd.equals(name2RtLEnd)) {\n                    name1Char[(name1Size - i)] = ' ';\n                    name2Char[(name2Size - i)] = ' ';\n                } \n            }\n            final java.lang.String java.lang.String = new java.lang.String(name1Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            final java.lang.String java.lang.String = new java.lang.String(name2Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n            if ((strA.length()) > (strB.length())) {\n                return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strA.length())));\n            } else {\n                return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strB.length())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name2":"name1","name1":"name1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3180da24-3f20-11e6-9c7e-5df57dce4f55","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:888","type":"CtMethodImpl","sourcecode":"private java.lang.String cleanInput(java.lang.String input) {\n    if (input == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (input == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((input.length()) == 0) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (input == null) {\n                                return null;\n                            } \n                            input = input.trim();\n                            if ((input.length()) == 0) {\n                                return null;\n                            } \n                            return input.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl"},"failures":[43,45],"tindex":"3180da25-3f20-11e6-9c7e-61714b5caed8","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:216","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String value) {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return doubleMetaphone(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl"},"failures":[55,56,58,59,63,64],"tindex":"31810136-3f20-11e6-9c7e-c981032b5323","method":{"position":"org.apache.commons.codec.digest.HmacUtils:80","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha1(final byte[] key) {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtInvocationImpl"},"failures":[],"tindex":"31810137-3f20-11e6-9c7e-694f6e023db5","method":{"position":"org.apache.commons.codec.net.BCodec:119","type":"CtMethodImpl","sourcecode":"public java.lang.String encode(final java.lang.String value, final java.nio.charset.Charset charset) throws org.apache.commons.codec.EncoderException {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (value == null) {\n                return null;\n            } \n            return encodeText(value, charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31810138-3f20-11e6-9c7e-ebb00c13031a","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:216","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String value) {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return doubleMetaphone(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:304","type":"CtInvocationImpl"},"failures":[],"tindex":"31810139-3f20-11e6-9c7e-4d2bf63e13b9","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:582","type":"CtMethodImpl","sourcecode":"private int handleR(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, final int index, final boolean slavoGermanic) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"SIO\", \"SIA\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"SIAN\"))) {\n                {\n                    if ((((index == ((value.length()) - 1)) && (!slavoGermanic)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"IE\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 4), 2, \"ME\", \"MA\")))) {\n                        result.appendAlternate('R');\n                    } else {\n                        result.append('R');\n                    }\n                    return (charAt(value, (index + 1))) == 'R' ? index + 2 : index + 1;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:126","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3181284a-3f20-11e6-9c7e-97967504cb8d","method":{"position":"org.apache.commons.codec.language.bm.Lang:202","type":"CtMethodImpl","sourcecode":"public java.lang.String guessLanguage(final java.lang.String text) {\n    if (text == null) {\n        {\n            final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = guessLanguages(text);\n            return ls.isSingleton() ? ls.getAny() : org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.String;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"text"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtBinaryOperatorImpl"},"failures":[176,177,178],"tindex":"3181284b-3f20-11e6-9c7e-19fe983bb8ec","method":{"position":"org.apache.commons.codec.net.BCodec:176","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String decode(final java.lang.String value) throws org.apache.commons.codec.DecoderException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return null;\n            } \n            try {\n                return org.apache.commons.codec.net.BCodec.this.decodeText(value);\n            } catch (final java.io.UnsupportedEncodingException e) {\n                throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.RefinedSoundex:134","type":"CtUnaryOperatorImpl"},"failures":[179],"tindex":"3181284c-3f20-11e6-9c7e-090a395d5ebb","method":{"position":"org.apache.commons.codec.language.Metaphone:388","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (!(obj instanceof java.lang.String)) {\n        {\n            if (!(obj instanceof java.lang.String)) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n            } \n            return metaphone(((java.lang.String)(obj)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl"},"failures":[180,181,182,183,184,185,186],"tindex":"31814f5d-3f20-11e6-9c7e-2fb79756c769","method":{"position":"org.apache.commons.codec.net.URLCodec:161","type":"CtMethodImpl","sourcecode":"public static final byte[] decodeUrl(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        {\n            if (bytes == null) {\n                return null;\n            } \n            final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream();\n            for (int int = 0 ; i < (bytes.int) ; i++) {\n                final int int = bytes[i];\n                if (b == '+') {\n                    buffer.write(' ');\n                } else if (b == (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)) {\n                    try {\n                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n                        buffer.write(((char)((u << 4) + l)));\n                    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n                        throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n                    }\n                } else {\n                    buffer.write(b);\n                }\n            }\n            return buffer.toByteArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:762","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31814f5e-3f20-11e6-9c7e-8b8a78879e8e","method":{"position":"org.apache.commons.codec.binary.Base64:734","type":"CtMethodImpl","sourcecode":"public static byte[] encodeInteger(final java.math.BigInteger bigInt) {\n    if (((bigInt.bitLength()) % 8) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((bigInt.bitLength()) % 8) == 0) {\n                {\n                    if (bigInt == null) {\n                        throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\");\n                    } \n                    return org.apache.commons.codec.binary.Base64.encodeBase64(org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInt), false);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bigInt":"bigInt"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:353","type":"CtBinaryOperatorImpl"},"failures":[187,34,188,189,190,191,192],"tindex":"31814f5f-3f20-11e6-9c7e-c34c7e8e5c30","method":{"position":"org.apache.commons.codec.binary.StringUtils:279","type":"CtMethodImpl","sourcecode":"public static java.lang.String newString(final byte[] bytes, final java.lang.String charsetName) {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                {\n                    if (bytes == null) {\n                        return null;\n                    } \n                    try {\n                        return new java.lang.String(bytes , charsetName);\n                    } catch (final java.io.UnsupportedEncodingException e) {\n                        throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl"},"failures":[54,55,56,53,58,59,47,61,62,63,64,65,66],"tindex":"31817670-3f20-11e6-9c7e-b97d7350df56","method":{"position":"org.apache.commons.codec.digest.HmacUtils:154","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getInitializedMac(final org.apache.commons.codec.digest.HmacAlgorithms algorithm, final byte[] key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key == null) {\n                {\n                    return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtInvocationImpl"},"failures":[],"tindex":"31817671-3f20-11e6-9c7e-a7f9c80114e9","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:253","type":"CtMethodImpl","sourcecode":"public void addLeft(final char ch) {\n    if (java.lang.Character.isWhitespace(ch)) {\n        {\n            if (java.lang.Character.isWhitespace(ch)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (java.lang.Character.isWhitespace(ch)) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            (int)++;\n                            char[][getNextPos()] = ch;\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:504","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31817672-3f20-11e6-9c7e-87dded29d8d6","method":{"position":"org.apache.commons.codec.binary.BaseNCodec:334","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof byte[]) {\n        {\n            if (!(obj instanceof byte[])) {\n                throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\");\n            } \n            return encode(((byte[])(obj)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl"},"failures":[55,59],"tindex":"31819d83-3f20-11e6-9c7e-9b2fb447c459","method":{"position":"org.apache.commons.codec.digest.HmacUtils:312","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha1(final byte[] key, final byte[] valueToDigest) {\n    if (key == null) {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.binary.Base32:504","type":"CtBinaryOperatorImpl"},"failures":[193,194,195,196,197,198,199,200,33,201,202,203,204,205,206,207,35,208,209,210,211,212,213,214,36,215,216,217,218,219,220],"tindex":"31819d84-3f20-11e6-9c7e-fb8d329e65cc","method":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:128","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(final byte[] b, final int offset, final int len) throws java.io.IOException {\n    if (offset == ' ') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (len < 0) {\n                {\n                    if (b == null) {\n                        throw new java.lang.NullPointerException();\n                    } else if ((offset < 0) || (len < 0)) {\n                        throw new java.lang.IndexOutOfBoundsException();\n                    } else if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n                        throw new java.lang.IndexOutOfBoundsException();\n                    } else if (len == 0) {\n                        return 0;\n                    } else {\n                        int int = 0;\n                        while (readLen == 0) {\n                            if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n                                final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n                                final int int = java.io.InputStream.read(buf);\n                                if (boolean) {\n                                    org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n                                } else {\n                                    org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n                                }\n                            } \n                            readLen = org.apache.commons.codec.binary.BaseNCodec.readResults(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n                        }\n                        return readLen;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"len"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3181c495-3f20-11e6-9c7e-1591238ed304","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:888","type":"CtMethodImpl","sourcecode":"private java.lang.String cleanInput(java.lang.String input) {\n    if (input == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (input == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((input.length()) == 0) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (input == null) {\n                                return null;\n                            } \n                            input = input.trim();\n                            if ((input.length()) == 0) {\n                                return null;\n                            } \n                            return input.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.net.URLCodec:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3181c496-3f20-11e6-9c7e-edf0a5980829","method":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:128","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(final byte[] b, final int offset, final int len) throws java.io.IOException {\n    if (offset == ' ') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (len < 0) {\n                {\n                    if (b == null) {\n                        throw new java.lang.NullPointerException();\n                    } else if ((offset < 0) || (len < 0)) {\n                        throw new java.lang.IndexOutOfBoundsException();\n                    } else if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n                        throw new java.lang.IndexOutOfBoundsException();\n                    } else if (len == 0) {\n                        return 0;\n                    } else {\n                        int int = 0;\n                        while (readLen == 0) {\n                            if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n                                final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n                                final int int = java.io.InputStream.read(buf);\n                                if (boolean) {\n                                    org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n                                } else {\n                                    org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n                                }\n                            } \n                            readLen = org.apache.commons.codec.binary.BaseNCodec.readResults(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n                        }\n                        return readLen;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3181c497-3f20-11e6-9c7e-fb485e7a67de","method":{"position":"org.apache.commons.codec.digest.HmacUtils:154","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getInitializedMac(final org.apache.commons.codec.digest.HmacAlgorithms algorithm, final byte[] key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key == null) {\n                {\n                    return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3181eba8-3f20-11e6-9c7e-d14f242577ee","method":{"position":"org.apache.commons.codec.digest.HmacUtils:658","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha512(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key), valueToDigest).doFinal();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3181eba9-3f20-11e6-9c7e-1f6a8663946a","method":{"position":"org.apache.commons.codec.digest.HmacUtils:280","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacMd5Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (key == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:652","type":"CtInvocationImpl"},"failures":[10,11,14,15],"tindex":"3181ebaa-3f20-11e6-9c7e-47a58bbabe41","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:597","type":"CtMethodImpl","sourcecode":"private int handleS(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ISL\", \"YSL\")) {\n                index++;\n            } else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 5, \"SUGAR\"))) {\n                result.append('X', 'S');\n                index++;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SH\")) {\n                if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n                    result.append('S');\n                } else {\n                    result.append('X');\n                }\n                index += 2;\n            } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"SIO\", \"SIA\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"SIAN\"))) {\n                if (slavoGermanic) {\n                    result.append('S');\n                } else {\n                    result.append('S', 'X');\n                }\n                index += 3;\n            } else if (((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\"))) {\n                result.append('S', 'X');\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\") ? index + 2 : index + 1;\n            } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SC\")) {\n                index = handleSC(value, result, index);\n            } else {\n                if ((index == ((value.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AI\", \"OI\"))) {\n                    result.appendAlternate('S');\n                } else {\n                    result.append('S');\n                }\n                index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"S\", \"Z\") ? index + 2 : index + 1;\n            }\n            return index;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index","value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:138","type":"CtBinaryOperatorImpl"},"failures":[8,41,12,44,221,46,222],"tindex":"318212bb-3f20-11e6-9c7e-977d6d058e44","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:75","type":"CtMethodImpl","sourcecode":"public java.lang.String doubleMetaphone(final java.lang.String value) {\n    if (value == null) {\n        {\n            return doubleMetaphone(value, false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"318212bc-3f20-11e6-9c7e-911b3d3bcee2","method":{"position":"org.apache.commons.codec.language.bm.Rule:531","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        {\n            return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:406","type":"CtUnaryOperatorImpl"},"failures":[223,224],"tindex":"318212bd-3f20-11e6-9c7e-f1238768eeed","method":{"position":"org.apache.commons.codec.binary.Hex:295","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object object) throws org.apache.commons.codec.EncoderException {\n    if (!(object instanceof java.lang.String)) {\n        {\n            try {\n                final byte[] byte[] = object instanceof java.lang.String ? ((java.lang.String)(object)).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset()) : ((byte[])(object));\n                return org.apache.commons.codec.binary.Hex.encodeHex(byteArray);\n            } catch (final java.lang.ClassCastException e) {\n                throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:170","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"318239ce-3f20-11e6-9c7e-ff2bebf7f17b","method":{"position":"org.apache.commons.codec.binary.StringUtils:334","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUtf16(final byte[] bytes) {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:274","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"318239cf-3f20-11e6-9c7e-f52a30f0c59e","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:409","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (bytes == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:225","type":"CtBinaryOperatorImpl"},"failures":[100,225],"tindex":"318239d0-3f20-11e6-9c7e-1ba52573df0f","method":{"position":"org.apache.commons.codec.language.RefinedSoundex:175","type":"CtMethodImpl","sourcecode":"public java.lang.String soundex(java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            str = org.apache.commons.codec.language.SoundexUtils.clean(str);\n            if ((str.length()) == 0) {\n                return str;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            sBuf.append(str.charAt(0));\n            char char;\n            char char;\n            last = '*';\n            for (int int = 0 ; i < (str.length()) ; i++) {\n                current = getMappingCode(str.charAt(i));\n                if (current == last) {\n                    continue;\n                } else if (current != 0) {\n                    sBuf.append(current);\n                } \n                last = current;\n            }\n            return sBuf.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.StringUtils:138","type":"CtBinaryOperatorImpl"},"failures":[194,195,48,201,203,204,226,206,207,49,215,218,219],"tindex":"318260e1-3f20-11e6-9c7e-fd53bc29e6e0","method":{"position":"org.apache.commons.codec.binary.StringUtils:113","type":"CtMethodImpl","sourcecode":"public static byte[] getBytesIso8859_1(final java.lang.String string) {\n    if (string == null) {\n        {\n            return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"string"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"318260e2-3f20-11e6-9c7e-b109645bacc1","method":{"position":"org.apache.commons.codec.binary.StringUtils:318","type":"CtMethodImpl","sourcecode":"public static java.lang.String newStringUsAscii(final byte[] bytes) {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:784","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"318260e3-3f20-11e6-9c7e-235390d3e8e5","method":{"position":"org.apache.commons.codec.language.Metaphone:342","type":"CtMethodImpl","sourcecode":"private boolean isPreviousChar(final java.lang.StringBuilder string, final int index, final char c) {\n    if (index <= 1) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((index > 0) && (index < (string.length()))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = false;\n                    if ((index > 0) && (index < (string.length()))) {\n                        matches = (string.charAt((index - 1))) == c;\n                    } \n                    return matches;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtInvocationImpl"},"failures":[],"tindex":"318260e4-3f20-11e6-9c7e-b7c824078a49","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:253","type":"CtMethodImpl","sourcecode":"public void addLeft(final char ch) {\n    if (java.lang.Character.isWhitespace(ch)) {\n        {\n            if (java.lang.Character.isWhitespace(ch)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (java.lang.Character.isWhitespace(ch)) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            (int)++;\n                            char[][getNextPos()] = ch;\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtBinaryOperatorImpl"},"failures":[227,100,101,102,103,104,228,105,229,230,231,232,233,234,235,236,237,238,239,240,241,87,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273],"tindex":"318287f5-3f20-11e6-9c7e-85e33f082a2d","method":{"position":"org.apache.commons.codec.language.SoundexUtils:41","type":"CtMethodImpl","sourcecode":"static java.lang.String clean(final java.lang.String str) {\n    if (str == null) {\n        {\n            if ((str == null) || ((str.length()) == 0)) {\n                return str;\n            } \n            final int int = str.length();\n            final char[] char[] = new char[len];\n            int int = 0;\n            for (int int = 0 ; i < len ; i++) {\n                if (java.lang.Character.isLetter(str.charAt(i))) {\n                    chars[(count++)] = str.charAt(i);\n                } \n            }\n            if (count == len) {\n                return str.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            } \n            return new java.lang.String(chars , 0 , count).toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"318287f6-3f20-11e6-9c7e-0d65bc9a9952","method":{"position":"org.apache.commons.codec.language.bm.Lang:214","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Languages.LanguageSet guessLanguages(final java.lang.String input) {\n    if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (input == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final java.lang.String java.lang.String = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                    final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(org.apache.commons.codec.language.bm.Lang.this.org.apache.commons.codec.language.bm.Languages.getLanguages());\n                    for (final org.apache.commons.codec.language.bm.Lang.LangRule org.apache.commons.codec.language.bm.Lang.LangRule : org.apache.commons.codec.language.bm.Lang.this.java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule>) {\n                        if (rule.matches(text)) {\n                            if (rule.boolean) {\n                                langs.retainAll(rule.java.util.Set<java.lang.String>);\n                            } else {\n                                langs.removeAll(rule.java.util.Set<java.lang.String>);\n                            }\n                        } \n                    }\n                    final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs);\n                    return ls.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : ls;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3182af07-3f20-11e6-9c7e-4dd4fa9f65fb","method":{"position":"org.apache.commons.codec.binary.StringUtils:279","type":"CtMethodImpl","sourcecode":"public static java.lang.String newString(final byte[] bytes, final java.lang.String charsetName) {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bytes == null) {\n                {\n                    if (bytes == null) {\n                        return null;\n                    } \n                    try {\n                        return new java.lang.String(bytes , charsetName);\n                    } catch (final java.io.UnsupportedEncodingException e) {\n                        throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.RFC1522Codec:104","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3182af08-3f20-11e6-9c7e-0951d5baa5ba","method":{"position":"org.apache.commons.codec.language.ColognePhonetic:428","type":"CtMethodImpl","sourcecode":"private java.lang.String preprocess(java.lang.String text) {\n    if (text == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            text = text.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n            final char[] char[] = text.toCharArray();\n            for (int int = 0 ; index < (chrs.int) ; index++) {\n                if ((chrs[index]) > 'Z') {\n                    for (final char[] char[] : org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[][]) {\n                        if ((chrs[index]) == (element[0])) {\n                            chrs[index] = element[1];\n                            break;\n                        } \n                    }\n                } \n            }\n            return new java.lang.String(chrs);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"text"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:450","type":"CtFieldReadImpl"},"failures":[],"tindex":"3182af09-3f20-11e6-9c7e-d9b6814c8c66","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:133","type":"CtMethodImpl","sourcecode":"public void setConcat(final boolean concat) {\n    if (concat) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (concat) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , concat , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"concat":"concat"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3182d61a-3f20-11e6-9c7e-d91d00b9b987","method":{"position":"org.apache.commons.codec.digest.HmacUtils:419","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha256(final byte[] key, final byte[] valueToDigest) {\n    if (valueToDigest == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key).doFinal(valueToDigest);\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalArgumentException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"valueToDigest"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3182d61b-3f20-11e6-9c7e-c1cdde649e88","method":{"position":"org.apache.commons.codec.digest.HmacUtils:601","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacSha384Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (key == null) {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.URLCodec:337","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3182d61c-3f20-11e6-9c7e-79ecb3afaa45","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object encode(final java.lang.Object obj) throws org.apache.commons.codec.EncoderException {\n    if (obj instanceof byte[]) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    } else {\n        {\n            if (obj == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (obj == null) {\n                        return null;\n                    } else if (obj instanceof byte[]) {\n                        return encode(((byte[])(obj)));\n                    } else if (obj instanceof java.lang.String) {\n                        return encode(((java.lang.String)(obj)));\n                    } else {\n                        throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl"},"failures":[274],"tindex":"3182d61d-3f20-11e6-9c7e-c1d55fb00bfd","method":{"position":"org.apache.commons.codec.digest.HmacUtils:116","type":"CtMethodImpl","sourcecode":"public static javax.crypto.Mac getHmacSha384(final byte[] key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3182d61e-3f20-11e6-9c7e-812d4c06b219","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:987","type":"CtMethodImpl","sourcecode":"public void appendAlternate(final java.lang.String value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length());\n            if ((value.length()) <= addChars) {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n            } else {\n                org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:270","type":"CtBinaryOperatorImpl"},"failures":[106,107,108,110,111,112,113,114,115,116,117,120,121,122,123,125,132,134],"tindex":"3182fd2f-3f20-11e6-9c7e-77a306a65595","method":{"position":"org.apache.commons.codec.language.Metaphone:360","type":"CtMethodImpl","sourcecode":"private boolean regionMatch(final java.lang.StringBuilder string, final int index, final java.lang.String test) {\n    if (index == 0) {\n        {\n            boolean boolean = false;\n            if ((index >= 0) && (((index + (test.length())) - 1) < (string.length()))) {\n                final java.lang.String java.lang.String = string.substring(index, (index + (test.length())));\n                matches = substring.equals(test);\n            } \n            return matches;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3182fd30-3f20-11e6-9c7e-c587a75060f8","method":{"position":"org.apache.commons.codec.language.bm.Rule:612","type":"CtMethodImpl","sourcecode":"private static java.lang.String stripQuotes(java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                str = str.substring(1);\n            } \n            if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n                str = str.substring(0, ((str.length()) - 1));\n            } \n            return str;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.BCodec:120","type":"CtBinaryOperatorImpl"},"failures":[178],"tindex":"3182fd31-3f20-11e6-9c7e-cba7e595834a","method":{"position":"org.apache.commons.codec.net.BCodec:221","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object value) throws org.apache.commons.codec.DecoderException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return null;\n            } else if (value instanceof java.lang.String) {\n                return decode(((java.lang.String)(value)));\n            } else {\n                throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtBinaryOperatorImpl"},"failures":[275,276,277,278,279],"tindex":"31832342-3f20-11e6-9c7e-fba1dce278ae","method":{"position":"org.apache.commons.codec.net.QCodec:246","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            return encode(str, getCharset());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31832343-3f20-11e6-9c7e-61389bb5a8c6","method":{"position":"org.apache.commons.codec.language.bm.Rule:539","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean isMatch(final java.lang.CharSequence input) {\n    if (input == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31832344-3f20-11e6-9c7e-73050edf5f61","method":{"position":"org.apache.commons.codec.digest.HmacUtils:280","type":"CtMethodImpl","sourcecode":"public static java.lang.String hmacMd5Hex(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (key == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31832345-3f20-11e6-9c7e-8f0a26b3b4d4","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:409","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic byte[] decode(final byte[] bytes) throws org.apache.commons.codec.DecoderException {\n    if (bytes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            if (bytes == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.DecoderException();\n            } else {\n                {\n                    return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bytes":"bytes"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"org.apache.commons.codec.EncoderException","condition":{"position":"org.apache.commons.codec.net.QCodec:265","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31832346-3f20-11e6-9c7e-ddb68897757c","method":{"position":"org.apache.commons.codec.net.URLCodec:243","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String encode(final java.lang.String str) throws org.apache.commons.codec.EncoderException {\n    if (str == null) {\n        {\n            if (str == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new org.apache.commons.codec.EncoderException();\n            } else {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    try {\n                        return encode(str, getDefaultCharset());\n                    } catch (final java.io.UnsupportedEncodingException e) {\n                        throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.EncoderException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtBinaryOperatorImpl"},"failures":[47],"tindex":"31834a57-3f20-11e6-9c7e-7df563b2d463","method":{"position":"org.apache.commons.codec.digest.HmacUtils:551","type":"CtMethodImpl","sourcecode":"public static byte[] hmacSha384(final byte[] key, final java.io.InputStream valueToDigest) throws java.io.IOException {\n    if (key == null) {\n        {\n            return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key), valueToDigest).doFinal();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:450","type":"CtFieldReadImpl"},"failures":[],"tindex":"31834a58-3f20-11e6-9c7e-2bedc0773ddb","method":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:133","type":"CtMethodImpl","sourcecode":"public void setConcat(final boolean concat) {\n    if (concat) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (concat) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , concat , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"concat":"concat"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.UnsupportedEncodingException","condition":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:468","type":"CtBinaryOperatorImpl"},"failures":[280],"tindex":"31834a59-3f20-11e6-9c7e-6dab71b1c5cf","method":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:467","type":"CtMethodImpl","sourcecode":"public java.lang.String decode(final java.lang.String str, final java.lang.String charset) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.UnsupportedEncodingException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.codec.DecoderException","condition":{"position":"org.apache.commons.codec.language.ColognePhonetic:406","type":"CtUnaryOperatorImpl"},"failures":[223],"tindex":"3183716a-3f20-11e6-9c7e-a927c1fb043a","method":{"position":"org.apache.commons.codec.binary.Hex:249","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object decode(final java.lang.Object object) throws org.apache.commons.codec.DecoderException {\n    if (!(object instanceof java.lang.String)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.codec.DecoderException();\n    } else {\n        {\n            try {\n                final char[] char[] = object instanceof java.lang.String ? ((java.lang.String)(object)).toCharArray() : ((char[])(object));\n                return org.apache.commons.codec.binary.Hex.decodeHex(charArray);\n            } catch (final java.lang.ClassCastException e) {\n                throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3183716b-3f20-11e6-9c7e-e3175fde1e61","method":{"position":"org.apache.commons.codec.language.bm.Lang:214","type":"CtMethodImpl","sourcecode":"public org.apache.commons.codec.language.bm.Languages.LanguageSet guessLanguages(final java.lang.String input) {\n    if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (input == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final java.lang.String java.lang.String = input.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale);\n                    final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(org.apache.commons.codec.language.bm.Lang.this.org.apache.commons.codec.language.bm.Languages.getLanguages());\n                    for (final org.apache.commons.codec.language.bm.Lang.LangRule org.apache.commons.codec.language.bm.Lang.LangRule : org.apache.commons.codec.language.bm.Lang.this.java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule>) {\n                        if (rule.matches(text)) {\n                            if (rule.boolean) {\n                                langs.retainAll(rule.java.util.Set<java.lang.String>);\n                            } else {\n                                langs.removeAll(rule.java.util.Set<java.lang.String>);\n                            }\n                        } \n                    }\n                    final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs);\n                    return ls.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : ls;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.codec.binary.Base64:445","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3183987c-3f20-11e6-9c7e-61cd9b4addf4","method":{"position":"org.apache.commons.codec.language.DoubleMetaphone:498","type":"CtMethodImpl","sourcecode":"private int handleH(final java.lang.String value, final org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n    if (index >= 0) {\n        {\n            if (((index == 0) || (isVowel(charAt(value, (index - 1))))) && (isVowel(charAt(value, (index + 1))))) {\n                result.append('H');\n                index += 2;\n            } else {\n                index++;\n            }\n            return index;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329395350/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":5,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":191,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":126,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":178,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":167,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":132,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":227,"org.apache.commons.codec.language.Caverphone1Test.testEncodeEmpty":224,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":253,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":251,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":252,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":130,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":254,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":120,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":98,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":187,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":115,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":217,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":83,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":184,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":36,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":122,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":12,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty":206,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":192,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":11,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":67,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":232,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":138,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":263,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":265,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":210,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":264,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":209,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":50,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":51,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":125,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":141,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":53,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":208,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":139,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":6,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":7,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":239,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":34,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":212,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":200,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":29,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":62,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":199,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":216,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":44,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":186,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":158,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":174,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":82,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":148,"org.apache.commons.codec.language.SoundexTest.testB650":250,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":129,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":169,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":43,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":228,"org.apache.commons.codec.language.SoundexTest.testNewInstance":257,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":123,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":142,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":197,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":3,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":74,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":135,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":190,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":30,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":229,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":150,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":85,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":69,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":33,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray":196,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":56,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":119,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":109,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":145,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":173,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":179,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":214,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":226,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":75,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":128,"org.apache.commons.codec.binary.Base64Test.testUUID":47,"org.apache.commons.codec.binary.Base64Test.testSingletons":61,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":225,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":38,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":65,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":159,"org.apache.commons.codec.binary.Base64Test.testPairs":46,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":37,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":234,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":242,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":116,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":258,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":181,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":177,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":221,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray":111,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":121,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":107,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":32,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":165,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":211,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":117,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":59,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":204,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":60,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":89,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":189,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":183,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":213,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":14,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":81,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":18,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":259,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":246,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":166,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":101,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":143,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":23,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":49,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":154,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":133,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105":27,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":26,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":134,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":140,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":110,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":198,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":79,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":131,"org.apache.commons.codec.binary.HexTest.testCustomCharset":220,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":147,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":13,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":157,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":156,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":172,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":230,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":153,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":171,"org.apache.commons.codec.language.NysiisTest.testEncodeEmpty":207,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":104,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":103,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":195,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":15,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":2,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":28,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":24,"org.apache.commons.codec.binary.Base64Test.testTriplets":41,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":76,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":201,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":92,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":90,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":93,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":112,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":243,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":9,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":21,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":54,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":72,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex":244,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":8,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":45,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":105,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":78,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":94,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":262,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":260,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":261,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":84,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":215,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":231,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":57,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":222,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":25,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":241,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":4,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":155,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":163,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":91,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":255,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":170,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":146,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":240,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":19,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":245,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":180,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":73,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":108,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":118,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":114,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":136,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":203,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":77,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":40,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":137,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":238,"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence":266,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":218,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":80,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":162,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":247,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":248,"org.apache.commons.codec.binary.HexTest.testDencodeEmpty":219,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":249,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":160,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":68,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":97,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":185,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":52,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":176,"org.apache.commons.codec.binary.Base64Test.testBase64":66,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":102,"org.apache.commons.codec.language.Caverphone1Test.testEncodeNull":223,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":20,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":55,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":100,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":99,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":233,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":16,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":70,"org.apache.commons.codec.binary.Base64Test.testCodec112":58,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray":113,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":95,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":149,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":88,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":188,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":42,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":35,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":144,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":31,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":193,"org.apache.commons.codec.binary.Base64Test.testCodec68":63,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":256,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":182,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":205,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":22,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":71,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":86,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":236,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":124,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":168,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":10,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":106,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":39,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":64,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":194,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":175,"org.apache.commons.codec.language.SoundexTest.testDifference":202,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":237,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":164,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":235,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":87,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":96,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":127,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":152,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":161,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":48,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":151},"transformations":[{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b7edb2d-27af-11e6-af64-2bdb70d679e4","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b7f294e-27af-11e6-af64-8534d7722c97","series":0,"name":"checkReturn","transplant":{"toString":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE;\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"index","minRating":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:576","type":"CtReturnImpl","sourcecode":"return index"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[0,1,2,3,4,5],"tindex":"7b7f505f-27af-11e6-af64-07af6e24ee2f","series":0,"name":"checkReturn","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:733","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[6,7],"tindex":"7b7f7770-27af-11e6-af64-9bb1c1f99079","series":0,"name":"checkReturn","transplant":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"bigBytes"},"type":"special","transplantationPoint":{"toString":"return bigBytes","position":"org.apache.commons.codec.binary.Base64:755","type":"CtReturnImpl","sourcecode":"return bigBytes"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[8,9],"tindex":"7b7f7771-27af-11e6-af64-3955ee4c98ca","series":0,"name":"checkReturn","transplant":{"toString":"if (arrayOctet == null) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (arrayOctet == null) {\n    return false;\n} "},"variableMap":{"arrayOctet":"l_ascii"},"type":"special","transplantationPoint":{"toString":"return l_ascii","position":"org.apache.commons.codec.binary.BinaryCodec:257","type":"CtReturnImpl","sourcecode":"return l_ascii"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,6,7,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],"tindex":"7b7f7772-27af-11e6-af64-fbb91b60dbf0","series":0,"name":"checkReturn","transplant":{"toString":"if (u == 0) {\n    y++;\n    u = 128;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"len","y":"len"},"type":"special","transplantationPoint":{"toString":"return len","position":"org.apache.commons.codec.binary.BaseNCodec:299","type":"CtReturnImpl","sourcecode":"return len"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],"tindex":"7b7f9e83-27af-11e6-af64-3dd4354950c3","series":0,"name":"checkReturn","transplant":{"toString":"if ((es1 == null) || (es2 == null)) {\n    return 0;\n} ","position":"org.apache.commons.codec.language.SoundexUtils:111","type":"CtIfImpl","sourcecode":"if ((es1 == null) || (es2 == null)) {\n    return 0;\n} "},"variableMap":{"es1":"str","es2":"str"},"type":"special","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.bm.Rule:621","type":"CtReturnImpl","sourcecode":"return str"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[0,1,3,4,5],"tindex":"7b7f9e84-27af-11e6-af64-c90da1d7850a","series":0,"name":"checkReturn","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:508","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[108,0,1,109,3,4,5,110],"tindex":"7b7fc595-27af-11e6-af64-ad1354f9fede","series":0,"name":"checkReturn","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:402","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[111,112,113],"tindex":"7b7fc596-27af-11e6-af64-e7eb0e742f62","series":0,"name":"checkReturn","transplant":{"toString":"if (bytes == null) {\n    return null;\n} ","position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"variableMap":{"bytes":"l_raw"},"type":"special","transplantationPoint":{"toString":"return l_raw","position":"org.apache.commons.codec.binary.BinaryCodec:215","type":"CtReturnImpl","sourcecode":"return l_raw"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b7fc597-27af-11e6-af64-9b25d9292c14","series":0,"name":"checkReturn","transplant":{"toString":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.PREFIX))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.POSTFIX)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:129","type":"CtIfImpl","sourcecode":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} "},"variableMap":{"org.apache.commons.codec.net.RFC1522Codec.POSTFIX":"name","org.apache.commons.codec.net.RFC1522Codec.PREFIX":"name","text":"name"},"type":"special","transplantationPoint":{"toString":"return name","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:167","type":"CtReturnImpl","sourcecode":"return name"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b7feca8-27af-11e6-af64-73a06610bb5b","series":0,"name":"checkReturn","transplant":{"toString":"if ((curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))) {\n    return new char[]{ prev };\n} ","position":"org.apache.commons.codec.language.Nysiis:163","type":"CtIfImpl","sourcecode":"if ((curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))) {\n    return new char[]{ prev };\n} "},"variableMap":{"prev":"java.lang.Character.MIN_VALUE","curr":"java.lang.Character.MIN_VALUE"},"type":"special","transplantationPoint":{"toString":"return java.lang.Character.MIN_VALUE","position":"org.apache.commons.codec.language.DoubleMetaphone:906","type":"CtReturnImpl","sourcecode":"return java.lang.Character.java.lang.Character.char"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[111,112],"tindex":"7b7feca9-27af-11e6-af64-95b5efeaedc0","series":0,"name":"checkReturn","transplant":{"toString":"if (bytes == null) {\n    return null;\n} ","position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"variableMap":{"bytes":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:200","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154],"tindex":"7b8013ba-27af-11e6-af64-e56021e0fe9d","series":0,"name":"checkReturn","transplant":{"toString":"if ((line.length()) == 0) {\n    continue;\n} ","position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"variableMap":{"line":"upperName"},"type":"special","transplantationPoint":{"toString":"return upperName","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:94","type":"CtReturnImpl","sourcecode":"return upperName"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b8013bb-27af-11e6-af64-2105b123127e","series":0,"name":"checkReturn","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"index","to":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:460","type":"CtReturnImpl","sourcecode":"return index"},"status":0},{"exception":"java.lang.RuntimeException","failures":[10,11,12,13,14,15,16,17,18,155,19,156,157,158,20,21,22,23,24,25,26,27,28,29,159,160,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,6,7,52,53,54,55,161,56,57,58,59,60,61,62,63,64,162,65,66,163,67,68,69,70,71,72,73,74,164,165,75,76,77,78,79,166,80,81,82,167,83,84,85,86,87,88,89],"tindex":"7b803acc-27af-11e6-af64-03c0eaad7544","series":0,"name":"checkReturn","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE","position":"org.apache.commons.codec.binary.BaseNCodec:241","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b803acd-27af-11e6-af64-61e80d0051f6","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"buf"},"type":"special","transplantationPoint":{"toString":"return buf","position":"org.apache.commons.codec.binary.BaseNCodec:434","type":"CtReturnImpl","sourcecode":"return buf"},"status":0},{"exception":"java.lang.RuntimeException","failures":[168,169,170,171,172,173,174,175,176,177,178],"tindex":"7b8061de-27af-11e6-af64-a734195f8e1a","series":0,"name":"checkReturn","transplant":{"toString":"if (accentedWord == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtIfImpl","sourcecode":"if (accentedWord == null) {\n    return null;\n} "},"variableMap":{"accentedWord":"cachedString"},"type":"special","transplantationPoint":{"toString":"return cachedString","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:155","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b8061df-27af-11e6-af64-2b3a7cc37009","series":0,"name":"checkReturn","transplant":{"toString":"if (c != 0) {\n    return c;\n} ","position":"org.apache.commons.codec.language.bm.Rule:93","type":"CtIfImpl","sourcecode":"if (c != 0) {\n    return c;\n} "},"variableMap":{"c":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:460","type":"CtReturnImpl","sourcecode":"return index"},"status":0},{"exception":"java.lang.RuntimeException","failures":[94,95,179,96,97,98,101,102,180,103,104,181,105],"tindex":"7b8061e0-27af-11e6-af64-dd47596382db","series":0,"name":"checkReturn","transplant":{"toString":"if (!ignoreCase) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"concat"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.concat","position":"org.apache.commons.codec.language.bm.PhoneticEngine:517","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.boolean"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[0,1,3,4,5],"tindex":"7b8088f1-27af-11e6-af64-4fcc04befdef","series":0,"name":"checkReturn","transplant":{"toString":"if (i > name2Size) {\n    break;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"index","name2Size":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:349","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b8088f2-27af-11e6-af64-9f5fca4a43f9","series":0,"name":"checkReturn","transplant":{"toString":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.RULES)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.RULES)));\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:311","type":"CtIfImpl","sourcecode":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)));\n} "},"variableMap":{"org.apache.commons.codec.language.bm.RuleType.RULES":"ruleType","ruleType":"ruleType"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.ruleType","position":"org.apache.commons.codec.language.bm.PhoneticEngine:508","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[0,1,3,4],"tindex":"7b8088f3-27af-11e6-af64-571af259e293","series":0,"name":"checkReturn","transplant":{"toString":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} ","position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:752","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[182,183,184,185,186,187,188,189,190,191,192,193,194,195],"tindex":"7b8088f4-27af-11e6-af64-ff44a4b12b62","series":0,"name":"checkReturn","transplant":{"toString":"if (!ignoreCase) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"matches"},"type":"special","transplantationPoint":{"toString":"return matches","position":"org.apache.commons.codec.language.Metaphone:348","type":"CtReturnImpl","sourcecode":"return matches"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b80b005-27af-11e6-af64-2d857368005c","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"l_raw"},"type":"special","transplantationPoint":{"toString":"return l_raw","position":"org.apache.commons.codec.binary.BinaryCodec:188","type":"CtReturnImpl","sourcecode":"return l_raw"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b80b006-27af-11e6-af64-d510834d6a64","series":0,"name":"checkReturn","transplant":{"toString":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} "},"variableMap":{"ph":"str"},"type":"special","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.Nysiis:256","type":"CtReturnImpl","sourcecode":"return str"},"status":0},{"exception":"java.lang.RuntimeException","failures":[6,7],"tindex":"7b80b007-27af-11e6-af64-7db5d1a4a20f","series":0,"name":"checkReturn","transplant":{"toString":"if (bytes == null) {\n    return null;\n} ","position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"variableMap":{"bytes":"bigBytes"},"type":"special","transplantationPoint":{"toString":"return bigBytes","position":"org.apache.commons.codec.binary.Base64:755","type":"CtReturnImpl","sourcecode":"return bigBytes"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b80b008-27af-11e6-af64-0384d6b71094","series":0,"name":"checkReturn","transplant":{"toString":"if (arrayOctet == null) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (arrayOctet == null) {\n    return false;\n} "},"variableMap":{"arrayOctet":"buffer"},"type":"special","transplantationPoint":{"toString":"return context.buffer","position":"org.apache.commons.codec.binary.BaseNCodec:272","type":"CtReturnImpl","sourcecode":"return context.byte[]"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[196],"tindex":"7b80b009-27af-11e6-af64-237cc7d9aaf6","series":0,"name":"checkReturn","transplant":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[8,9],"tindex":"7b80d71a-27af-11e6-af64-adc6e6b81584","series":0,"name":"checkReturn","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"l_ascii","ascii":"l_ascii"},"type":"special","transplantationPoint":{"toString":"return l_ascii","position":"org.apache.commons.codec.binary.BinaryCodec:257","type":"CtReturnImpl","sourcecode":"return l_ascii"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[196],"tindex":"7b80d71b-27af-11e6-af64-8304668aec54","series":0,"name":"checkReturn","transplant":{"toString":"if (arrayOctet == null) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (arrayOctet == null) {\n    return false;\n} "},"variableMap":{"arrayOctet":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b80d71c-27af-11e6-af64-8583aaa486b5","series":0,"name":"checkReturn","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"pArray","ascii":"pArray"},"type":"special","transplantationPoint":{"toString":"return pArray","position":"org.apache.commons.codec.binary.BaseNCodec:427","type":"CtReturnImpl","sourcecode":"return pArray"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b80d71d-27af-11e6-af64-09e577939219","series":0,"name":"checkReturn","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"index","to":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:773","type":"CtReturnImpl","sourcecode":"return index"},"status":0},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b80fe2e-27af-11e6-af64-776e5f615e74","series":0,"name":"checkReturn","transplant":{"toString":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.RULES)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.RULES)));\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:311","type":"CtIfImpl","sourcecode":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)));\n} "},"variableMap":{"org.apache.commons.codec.language.bm.RuleType.RULES":"ruleType","ruleType":"ruleType"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.ruleType","position":"org.apache.commons.codec.language.bm.PhoneticEngine:508","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b80fe2f-27af-11e6-af64-8f0b5c33c05e","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"resizedBytes"},"type":"special","transplantationPoint":{"toString":"return resizedBytes","position":"org.apache.commons.codec.binary.Base64:769","type":"CtReturnImpl","sourcecode":"return resizedBytes"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[130,151,152],"tindex":"7b80fe30-27af-11e6-af64-8d3d8c20a522","series":0,"name":"checkReturn","transplant":{"toString":"if (value == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} "},"variableMap":{"value":"name"},"type":"special","transplantationPoint":{"toString":"return name","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:144","type":"CtReturnImpl","sourcecode":"return name"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[130,151,152],"tindex":"7b80fe31-27af-11e6-af64-7135d068ce63","series":0,"name":"checkReturn","transplant":{"toString":"if (value == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} "},"variableMap":{"value":"name"},"type":"special","transplantationPoint":{"toString":"return name","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:144","type":"CtReturnImpl","sourcecode":"return name"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b812542-27af-11e6-af64-334200fb8007","series":0,"name":"checkReturn","transplant":{"toString":"if (salt == null) {\n    saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern p = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher m = p.matcher(salt);\n    if ((m == null) || (!(m.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n    } \n    saltString = m.group(1);\n}","position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher java.util.regex.Matcher = p.matcher(salt);\n    if ((m == null) || (!(m.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n    } \n    saltString = m.group(1);\n}"},"variableMap":{"saltString":"str","salt":"str","prefix":"str"},"type":"special","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.RefinedSoundex:181","type":"CtReturnImpl","sourcecode":"return str"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[0,1,2,3,4,5],"tindex":"7b812543-27af-11e6-af64-f1b2307bdeaa","series":0,"name":"checkReturn","transplant":{"toString":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} ","position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:697","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[0,1,3,4,5],"tindex":"7b812544-27af-11e6-af64-2534446e3277","series":0,"name":"checkReturn","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:508","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[0,1,2,197,3,4,5],"tindex":"7b812545-27af-11e6-af64-9382799116a5","series":0,"name":"checkReturn","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:562","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[111,112,113],"tindex":"7b814c56-27af-11e6-af64-67d6113eabdc","series":0,"name":"checkReturn","transplant":{"toString":"if (bytes == null) {\n    return null;\n} ","position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"variableMap":{"bytes":"l_raw"},"type":"special","transplantationPoint":{"toString":"return l_raw","position":"org.apache.commons.codec.binary.BinaryCodec:215","type":"CtReturnImpl","sourcecode":"return l_raw"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b814c57-27af-11e6-af64-0f175c55a975","series":0,"name":"checkReturn","transplant":{"toString":"if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX)))) {\n    salt = (org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX) + salt;\n} ","position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtIfImpl","sourcecode":"if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n    salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt;\n} "},"variableMap":{"salt":"charset","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"charset"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.net.URLCodec.this.charset","position":"org.apache.commons.codec.net.URLCodec:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.this.java.lang.String"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b814c58-27af-11e6-af64-b937acd42834","series":0,"name":"checkReturn","transplant":{"toString":"if (salt == null) {\n    saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern p = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher m = p.matcher(salt);\n    if ((m == null) || (!(m.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n    } \n    saltString = m.group(1);\n}","position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher java.util.regex.Matcher = p.matcher(salt);\n    if ((m == null) || (!(m.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n    } \n    saltString = m.group(1);\n}"},"variableMap":{"saltString":"org.apache.commons.codec.language.Caverphone1.SIX_1","salt":"org.apache.commons.codec.language.Caverphone1.SIX_1","prefix":"org.apache.commons.codec.language.Caverphone1.SIX_1"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Caverphone1.SIX_1","position":"org.apache.commons.codec.language.Caverphone1:48","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b814c59-27af-11e6-af64-b5b394611462","series":0,"name":"checkReturn","transplant":{"toString":"if (c != 0) {\n    return c;\n} ","position":"org.apache.commons.codec.language.bm.Rule:93","type":"CtIfImpl","sourcecode":"if (c != 0) {\n    return c;\n} "},"variableMap":{"c":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:325","type":"CtReturnImpl","sourcecode":"return index"},"status":0},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b81736a-27af-11e6-af64-010fd236db9c","series":0,"name":"checkReturn","transplant":{"toString":"if (str.endsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)) {\n    str = str.substring(0, ((str.length()) - 1));\n} ","position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"variableMap":{"str":"str","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"str"},"type":"special","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:340","type":"CtReturnImpl","sourcecode":"return str"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[36,37,38,39,46,48,53,161,61,63,162,163,70],"tindex":"7b81736b-27af-11e6-af64-3fa0696e2b10","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"result"},"type":"special","transplantationPoint":{"toString":"return result","position":"org.apache.commons.codec.binary.BaseNCodec:414","type":"CtReturnImpl","sourcecode":"return result"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],"tindex":"7b81736c-27af-11e6-af64-e7a51f4791f6","series":0,"name":"checkReturn","transplant":{"toString":"if ((input.length()) == 0) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((input.length()) == 0) {\n    return null;\n} "},"variableMap":{"input":"str"},"type":"special","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.bm.Rule:621","type":"CtReturnImpl","sourcecode":"return str"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b81736d-27af-11e6-af64-7f640a19b00a","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[198,199,200,201],"tindex":"7b819a7e-27af-11e6-af64-b75e7330ee8d","series":0,"name":"checkReturn","transplant":{"toString":"if (i > name2Size) {\n    break;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"a","name2Size":"a"},"type":"special","transplantationPoint":{"toString":"return a","position":"org.apache.commons.codec.digest.UnixCrypt:395","type":"CtReturnImpl","sourcecode":"return a"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[202,203],"tindex":"7b819a7f-27af-11e6-af64-dd5f29e7708e","series":0,"name":"checkReturn","transplant":{"toString":"if (b == ' ') {\n    b = '+';\n} ","position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"variableMap":{"b":"diff"},"type":"special","transplantationPoint":{"toString":"return diff","position":"org.apache.commons.codec.language.SoundexUtils:121","type":"CtReturnImpl","sourcecode":"return diff"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[90,91,92,93,94,95,96,97,98,101,102,103,104,105,107],"tindex":"7b819a80-27af-11e6-af64-6727100456c1","series":0,"name":"checkReturn","transplant":{"toString":"if (!ignoreCase) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"found"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.found","position":"org.apache.commons.codec.language.bm.PhoneticEngine:231","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[204,202,205,203,206,207],"tindex":"7b819a81-27af-11e6-af64-e384d0646e96","series":0,"name":"checkReturn","transplant":{"toString":"if ((es1 == null) || (es2 == null)) {\n    return 0;\n} ","position":"org.apache.commons.codec.language.SoundexUtils:111","type":"CtIfImpl","sourcecode":"if ((es1 == null) || (es2 == null)) {\n    return 0;\n} "},"variableMap":{"es1":"str","es2":"str"},"type":"special","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.SoundexUtils:43","type":"CtReturnImpl","sourcecode":"return str"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b81c192-27af-11e6-af64-f1d0d02788c7","series":0,"name":"checkReturn","transplant":{"toString":"if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)) {\n    str = str.substring(0, ((str.length()) - 1));\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"variableMap":{"str":"upperName","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"upperName"},"type":"special","transplantationPoint":{"toString":"return upperName","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:94","type":"CtReturnImpl","sourcecode":"return upperName"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b81c193-27af-11e6-af64-7fee2d9dbe65","series":0,"name":"checkReturn","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","ascii":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:240","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":0},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b81c194-27af-11e6-af64-1fa0d9a240e2","series":0,"name":"checkReturn","transplant":{"toString":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.RULES)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.RULES)));\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:311","type":"CtIfImpl","sourcecode":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)));\n} "},"variableMap":{"org.apache.commons.codec.language.bm.RuleType.RULES":"ruleType","ruleType":"ruleType"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.ruleType","position":"org.apache.commons.codec.language.bm.PhoneticEngine:508","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154],"tindex":"7b81c195-27af-11e6-af64-55e318f912af","series":0,"name":"checkReturn","transplant":{"toString":"if ((input.length()) == 0) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((input.length()) == 0) {\n    return null;\n} "},"variableMap":{"input":"upperName"},"type":"special","transplantationPoint":{"toString":"return upperName","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:94","type":"CtReturnImpl","sourcecode":"return upperName"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[50,51],"tindex":"7b81e8a6-27af-11e6-af64-d33fd54f5e4f","series":0,"name":"checkReturn","transplant":{"toString":"if (arrayOctet == null) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (arrayOctet == null) {\n    return false;\n} "},"variableMap":{"arrayOctet":"resizedBytes"},"type":"special","transplantationPoint":{"toString":"return resizedBytes","position":"org.apache.commons.codec.binary.Base64:769","type":"CtReturnImpl","sourcecode":"return resizedBytes"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b81e8a7-27af-11e6-af64-cd82f0117bd5","series":0,"name":"checkReturn","transplant":{"toString":"if (c != 0) {\n    return c;\n} ","position":"org.apache.commons.codec.language.bm.Rule:93","type":"CtIfImpl","sourcecode":"if (c != 0) {\n    return c;\n} "},"variableMap":{"c":"maxCodeLen"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.DoubleMetaphone.this.maxCodeLen","position":"org.apache.commons.codec.language.DoubleMetaphone:253","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.DoubleMetaphone.this.int"},"status":0},{"exception":"java.lang.RuntimeException","failures":[94,95,179,96,97,98,101,102,180,103,104,181,105],"tindex":"7b81e8a8-27af-11e6-af64-572c861b6cab","series":0,"name":"checkReturn","transplant":{"toString":"if (!ignoreCase) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"concat"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.concat","position":"org.apache.commons.codec.language.bm.PhoneticEngine:517","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.boolean"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[208,209,210,211,212,213,214,215,216,217,218],"tindex":"7b820fb9-27af-11e6-af64-3d458e67f165","series":0,"name":"checkReturn","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"length"},"type":"special","transplantationPoint":{"toString":"return length","position":"org.apache.commons.codec.language.ColognePhonetic:219","type":"CtReturnImpl","sourcecode":"return int"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[6,7],"tindex":"7b820fba-27af-11e6-af64-19147cca8ad3","series":0,"name":"checkReturn","transplant":{"toString":"if (arrayOctet == null) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (arrayOctet == null) {\n    return false;\n} "},"variableMap":{"arrayOctet":"bigBytes"},"type":"special","transplantationPoint":{"toString":"return bigBytes","position":"org.apache.commons.codec.binary.Base64:755","type":"CtReturnImpl","sourcecode":"return bigBytes"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b820fbb-27af-11e6-af64-2df5678b4eef","series":0,"name":"checkReturn","transplant":{"toString":"if (str.startsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)) {\n    str = str.substring(1);\n} ","position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(1);\n} "},"variableMap":{"str":"str","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"str"},"type":"special","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.bm.Rule:621","type":"CtReturnImpl","sourcecode":"return str"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b820fbc-27af-11e6-af64-5b61f2aa1dbe","series":0,"name":"checkReturn","transplant":{"toString":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} "},"variableMap":{"ph":"replacedName"},"type":"special","transplantationPoint":{"toString":"return replacedName","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:392","type":"CtReturnImpl","sourcecode":"return replacedName"},"status":0},{"exception":"java.lang.RuntimeException","failures":[198,199,200,201],"tindex":"7b820fbd-27af-11e6-af64-553b767babb9","series":0,"name":"checkReturn","transplant":{"toString":"if (b < 0) {\n    b = 256 + b;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"a"},"type":"special","transplantationPoint":{"toString":"return a","position":"org.apache.commons.codec.digest.UnixCrypt:395","type":"CtReturnImpl","sourcecode":"return a"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b8236ce-27af-11e6-af64-7f05630ecba1","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"buffer"},"type":"special","transplantationPoint":{"toString":"return context.buffer","position":"org.apache.commons.codec.binary.BaseNCodec:258","type":"CtReturnImpl","sourcecode":"return context.byte[]"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b8236cf-27af-11e6-af64-ed79b2ada3df","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"data"},"type":"special","transplantationPoint":{"toString":"return data","position":"org.apache.commons.codec.net.QCodec:165","type":"CtReturnImpl","sourcecode":"return data"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[90,91,92,93,94,95,96,97,98,101,102,103,104,105,106,107],"tindex":"7b8236d0-27af-11e6-af64-c1cc6cee9784","series":0,"name":"checkReturn","transplant":{"toString":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"finalRules can not be null\");\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:331","type":"CtIfImpl","sourcecode":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"finalRules can not be null\");\n} "},"variableMap":{"finalRules":"rules"},"type":"special","transplantationPoint":{"toString":"return rules","position":"org.apache.commons.codec.language.bm.Rule:362","type":"CtReturnImpl","sourcecode":"return rules"},"status":-1},{"exception":"org.apache.commons.codec.DecoderException","failures":[219,220,221,222,42,47,68],"tindex":"7b8236d1-27af-11e6-af64-f15e8717527b","series":0,"name":"checkReturn","transplant":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"out"},"type":"special","transplantationPoint":{"toString":"return out","position":"org.apache.commons.codec.binary.Hex:96","type":"CtReturnImpl","sourcecode":"return out"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[90,91,92,93,94,95,96,97,98,101,102,103,104,105,107],"tindex":"7b8236d2-27af-11e6-af64-dff952b34de3","series":0,"name":"checkReturn","transplant":{"toString":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtIfImpl","sourcecode":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} "},"variableMap":{"charset":"pattern"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.Rule.this.pattern","position":"org.apache.commons.codec.language.bm.Rule:666","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.this.java.lang.String"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b825de3-27af-11e6-af64-0135e85fa965","series":0,"name":"checkReturn","transplant":{"toString":"if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX)))) {\n    salt = (org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX) + salt;\n} ","position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtIfImpl","sourcecode":"if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n    salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt;\n} "},"variableMap":{"salt":"org.apache.commons.codec.language.Caverphone1.SIX_1","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"org.apache.commons.codec.language.Caverphone1.SIX_1"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Caverphone1.SIX_1","position":"org.apache.commons.codec.language.Caverphone1:48","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b825de4-27af-11e6-af64-cb1267d841da","series":0,"name":"checkReturn","transplant":{"toString":"if (salt == null) {\n    saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern p = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher m = p.matcher(salt);\n    if ((m == null) || (!(m.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n    } \n    saltString = m.group(1);\n}","position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher java.util.regex.Matcher = p.matcher(salt);\n    if ((m == null) || (!(m.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n    } \n    saltString = m.group(1);\n}"},"variableMap":{"saltString":"pattern","salt":"pattern","prefix":"pattern"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.Rule.this.pattern","position":"org.apache.commons.codec.language.bm.Rule:666","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.this.java.lang.String"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b825de5-27af-11e6-af64-3d07f513aef9","series":0,"name":"checkReturn","transplant":{"toString":"if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:71","type":"CtIfImpl","sourcecode":"if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n    return false;\n} "},"variableMap":{"c1":"mappedChar","c2":"mappedChar"},"type":"special","transplantationPoint":{"toString":"return mappedChar","position":"org.apache.commons.codec.language.Soundex:197","type":"CtReturnImpl","sourcecode":"return mappedChar"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b8284f6-27af-11e6-af64-1f3c30cbde3f","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:240","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[0,1,2,3,4,5],"tindex":"7b8284f7-27af-11e6-af64-b342a5397e38","series":0,"name":"checkReturn","transplant":{"toString":"if (b == ' ') {\n    b = '+';\n} ","position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"variableMap":{"b":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:697","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"org.apache.commons.codec.DecoderException","failures":[220,221,222,42,47,68],"tindex":"7b8284f8-27af-11e6-af64-137257e29eef","series":0,"name":"checkReturn","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"digit"},"type":"special","transplantationPoint":{"toString":"return digit","position":"org.apache.commons.codec.binary.Hex:180","type":"CtReturnImpl","sourcecode":"return digit"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b8284f9-27af-11e6-af64-836f99255113","series":0,"name":"checkReturn","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","raw":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:154","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":0},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b82ac0a-27af-11e6-af64-2b0226eaa295","series":0,"name":"checkReturn","transplant":{"toString":"if (c != 0) {\n    return c;\n} ","position":"org.apache.commons.codec.language.bm.Rule:93","type":"CtIfImpl","sourcecode":"if (c != 0) {\n    return c;\n} "},"variableMap":{"c":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:562","type":"CtReturnImpl","sourcecode":"return index"},"status":0},{"exception":"java.lang.RuntimeException","failures":[202,205],"tindex":"7b82ac0b-27af-11e6-af64-690b377102f3","series":0,"name":"checkReturn","transplant":{"toString":"if (text == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"variableMap":{"text":"str"},"type":"special","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.Soundex:264","type":"CtReturnImpl","sourcecode":"return str"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b82ac0c-27af-11e6-af64-316bf78dc830","series":0,"name":"checkReturn","transplant":{"toString":"if (len == (org.apache.commons.codec.binary.BaseNCodec.EOF)) {\n    break;\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"index","len":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:752","type":"CtReturnImpl","sourcecode":"return index"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b82ac0d-27af-11e6-af64-931e010e1588","series":0,"name":"checkReturn","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"b","to":"b"},"type":"special","transplantationPoint":{"toString":"return b","position":"org.apache.commons.codec.net.QuotedPrintableCodec:206","type":"CtReturnImpl","sourcecode":"return b"},"status":0},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b82d31e-27af-11e6-af64-fd6b847c3721","series":0,"name":"checkReturn","transplant":{"toString":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.TEN_1;\n} ","position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n} "},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"algorithm","txt":"algorithm"},"type":"special","transplantationPoint":{"toString":"return algorithm","position":"org.apache.commons.codec.digest.HmacAlgorithms:91","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"status":-2},{"exception":"org.apache.commons.codec.DecoderException","failures":[],"tindex":"7b82d31f-27af-11e6-af64-0f02ae667f9d","series":0,"name":"checkReturn","transplant":{"toString":"if (len == (org.apache.commons.codec.binary.BaseNCodec.EOF)) {\n    break;\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"i","len":"i"},"type":"special","transplantationPoint":{"toString":"return i","position":"org.apache.commons.codec.net.Utils:47","type":"CtReturnImpl","sourcecode":"return i"},"status":-2},{"exception":"org.apache.commons.codec.DecoderException","failures":[],"tindex":"7b82d320-27af-11e6-af64-2b3adfaf5448","series":0,"name":"checkReturn","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"out","ascii":"out"},"type":"special","transplantationPoint":{"toString":"return out","position":"org.apache.commons.codec.binary.Hex:96","type":"CtReturnImpl","sourcecode":"return out"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b82d321-27af-11e6-af64-431abec5517e","series":0,"name":"checkReturn","transplant":{"toString":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.RULES)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.RULES)));\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:311","type":"CtIfImpl","sourcecode":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)));\n} "},"variableMap":{"org.apache.commons.codec.language.bm.RuleType.RULES":"ruleType","ruleType":"ruleType"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.ruleType","position":"org.apache.commons.codec.language.bm.PhoneticEngine:508","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[90,91,92,93,94,95,96,97,98,101,102,103,104,105,107],"tindex":"7b82d322-27af-11e6-af64-3bb983f7a3df","series":0,"name":"checkReturn","transplant":{"toString":"if (b < 0) {\n    b = 256 + b;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"i"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.i","position":"org.apache.commons.codec.language.bm.PhoneticEngine:192","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[223,224],"tindex":"7b82fa33-27af-11e6-af64-275fe470d072","series":0,"name":"checkReturn","transplant":{"toString":"if (string == null) {\n    return null;\n} ","position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtIfImpl","sourcecode":"if (string == null) {\n    return null;\n} "},"variableMap":{"string":"org.apache.commons.codec.language.Caverphone1.SIX_1"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Caverphone1.SIX_1","position":"org.apache.commons.codec.language.Caverphone1:48","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b82fa34-27af-11e6-af64-edc47dd526f5","series":0,"name":"checkReturn","transplant":{"toString":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} "},"variableMap":{"ph":"algorithm"},"type":"special","transplantationPoint":{"toString":"return algorithm","position":"org.apache.commons.codec.digest.HmacAlgorithms:91","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"status":0},{"exception":"org.apache.commons.codec.DecoderException","failures":[225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241],"tindex":"7b82fa35-27af-11e6-af64-dfa836b36b3f","series":0,"name":"checkReturn","transplant":{"toString":"if (u == 0) {\n    y++;\n    u = 128;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"i","y":"i"},"type":"special","transplantationPoint":{"toString":"return i","position":"org.apache.commons.codec.net.Utils:47","type":"CtReturnImpl","sourcecode":"return i"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[94,95,179,96,97,98,101,102,180,103,104,181,105],"tindex":"7b82fa36-27af-11e6-af64-a76d13a2902e","series":0,"name":"checkReturn","transplant":{"toString":"if (!ignoreCase) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"concat"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.concat","position":"org.apache.commons.codec.language.bm.PhoneticEngine:517","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.boolean"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[225,242,226,243,228],"tindex":"7b832147-27af-11e6-af64-3fd61be6a9a7","series":0,"name":"checkReturn","transplant":{"toString":"if (arrayOctet == null) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (arrayOctet == null) {\n    return false;\n} "},"variableMap":{"arrayOctet":"data"},"type":"special","transplantationPoint":{"toString":"return data","position":"org.apache.commons.codec.net.QCodec:165","type":"CtReturnImpl","sourcecode":"return data"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[90,91,92,93,94,95,96,97,98,101,102,103,104,105],"tindex":"7b832148-27af-11e6-af64-1b45389e3363","series":0,"name":"checkReturn","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"c"},"type":"special","transplantationPoint":{"toString":"return c","position":"org.apache.commons.codec.language.bm.Rule:94","type":"CtReturnImpl","sourcecode":"return c"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b832149-27af-11e6-af64-a3f240d339b1","series":0,"name":"checkReturn","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"index","to":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:349","type":"CtReturnImpl","sourcecode":"return index"},"status":0},{"exception":"java.lang.RuntimeException","failures":[10,11,12,13,14,15,16,17,18,155,19,156,157,158,20,21,22,23,24,25,26,27,28,29,159,160,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,6,7,52,53,54,55,161,56,57,58,59,60,61,62,63,64,162,65,66,163,67,68,69,70,71,72,73,74,164,165,75,76,77,78,79,166,80,81,82,167,83,84,85,86,87,88,89],"tindex":"7b83214a-27af-11e6-af64-dbf9027cc7af","series":0,"name":"checkReturn","transplant":{"toString":"if (i > name2Size) {\n    break;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE","name2Size":"org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE","position":"org.apache.commons.codec.binary.BaseNCodec:241","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],"tindex":"7b83485b-27af-11e6-af64-770c06fa6301","series":0,"name":"checkReturn","transplant":{"toString":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"The finalRules argument must not be null\");\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:181","type":"CtIfImpl","sourcecode":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"The finalRules argument must not be null\");\n} "},"variableMap":{"finalRules":"lines"},"type":"special","transplantationPoint":{"toString":"return lines","position":"org.apache.commons.codec.language.bm.Rule:489","type":"CtReturnImpl","sourcecode":"return lines"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b83485c-27af-11e6-af64-29658e04ab48","series":0,"name":"checkReturn","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"data","raw":"data"},"type":"special","transplantationPoint":{"toString":"return data","position":"org.apache.commons.codec.net.QCodec:165","type":"CtReturnImpl","sourcecode":"return data"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"7b83485d-27af-11e6-af64-e9e7abae9e1e","series":0,"name":"checkReturn","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE","to":"org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE","position":"org.apache.commons.codec.binary.BaseNCodec:241","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int"},"status":0},{"exception":"java.lang.RuntimeException","failures":[244,245,246,247,248,249,250,251,252,253,254,255,256,202,257,258,259,260,261,262,263,264,265,266],"tindex":"7b83485e-27af-11e6-af64-afd17aea2584","series":0,"name":"checkReturn","transplant":{"toString":"if (java.lang.Character.isWhitespace(ch)) {\n    continue;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtIfImpl","sourcecode":"if (java.lang.Character.isWhitespace(ch)) {\n    continue;\n} "},"variableMap":{"ch":"mappedChar"},"type":"special","transplantationPoint":{"toString":"return mappedChar","position":"org.apache.commons.codec.language.Soundex:197","type":"CtReturnImpl","sourcecode":"return mappedChar"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[108,0,1,109,197,3,4,5],"tindex":"7b836f6f-27af-11e6-af64-8b53a891de1c","series":0,"name":"checkReturn","transplant":{"toString":"if (b < 0) {\n    b = 256 + b;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:544","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[0,1,2,197,3,4,5],"tindex":"7b836f70-27af-11e6-af64-0b13afda571e","series":0,"name":"checkReturn","transplant":{"toString":"if (b == ' ') {\n    b = '+';\n} ","position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"variableMap":{"b":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:562","type":"CtReturnImpl","sourcecode":"return index"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
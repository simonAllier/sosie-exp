{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":2,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":238,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":123,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":57,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":129,"org.apache.commons.codec.language.Caverphone1Test.testEncodeEmpty":271,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_1_Returns5_Successfully":156,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_11_Returns_3_Successfully":161,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":127,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":115,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":181,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":229,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":107,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":110,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":58,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":225,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":235,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":89,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":117,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":63,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_8_Returns3_Successfully":164,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty":97,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":240,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":42,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":62,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":135,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":100,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":99,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":20,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":21,"org.apache.commons.codec.language.NysiisTest.testCap":252,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":122,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":139,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":25,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":211,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":98,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":136,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":22,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":23,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":209,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":224,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":87,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":102,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":268,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":77,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":272,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":35,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":106,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":190,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":267,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail":275,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":14,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":228,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_One_Letter_to_Nothing":201,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":171,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":56,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":145,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":285,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":126,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_10_Returns3_Successfully":166,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":13,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":251,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":118,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":140,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":95,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully":121,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":0,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":49,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":132,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":233,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":80,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":147,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_6_Returns4_Successfully":158,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleDoubleVowel_BEETLE_NotRemoved":138,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":60,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":210,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":44,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":86,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray":172,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":29,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":114,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":286,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":142,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":104,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":178,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":249,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":9,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":125,"org.apache.commons.codec.binary.Base64Test.testUUID":17,"org.apache.commons.codec.binary.Base64Test.testSingletons":34,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":247,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":91,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":39,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":78,"org.apache.commons.codec.binary.Base64Test.testPairs":16,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":90,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":248,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":111,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":234,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":188,"org.apache.commons.codec.language.NysiisTest.testBran":256,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":261,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray":153,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully2":162,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":116,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":194,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":82,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":101,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":215,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":282,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":112,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":32,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":264,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":8,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":33,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":232,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":103,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":221,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":65,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":222,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":55,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":83,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":53,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullKey":277,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":182,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert":230,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":170,"org.apache.commons.codec.language.NysiisTest.testDad":253,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":71,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":274,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":19,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":212,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_7_Returns4_Successfully":160,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":151,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":218,"org.apache.commons.codec.language.NysiisTest.testDan":254,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":130,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":287,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105":75,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":74,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":131,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":137,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail":279,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":266,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":52,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":280,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":128,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":144,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":64,"org.apache.commons.codec.language.NysiisTest.testSnat":258,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":150,"org.apache.commons.codec.language.NysiisTest.testEncodeEmpty":263,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":187,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":276,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":288,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":186,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":245,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":66,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":214,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":94,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":76,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":72,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_2_Returns5_Successfully":159,"org.apache.commons.codec.binary.Base64Test.testTriplets":11,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":10,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":269,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":197,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":195,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":198,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":154,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":250,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":69,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":169,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":281,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":26,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":47,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeNull":203,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":168,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":15,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":189,"org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac":278,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":51,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":176,"org.apache.commons.codec.digest.HmacUtilsTest.testEmptyKey":290,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":236,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testLocaleIndependence":205,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":273,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":283,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":59,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":105,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":30,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":73,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":216,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":1,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":41,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":173,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":196,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":143,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":213,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":84,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":184,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":185,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":48,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":174,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":243,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":113,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_13_Returns_1_Successfully":163,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":109,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":244,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":96,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":133,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero":239,"org.apache.commons.codec.language.MetaphoneTest.testWhy":220,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":50,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":93,"org.apache.commons.codec.language.NysiisTest.testTranan":260,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":134,"org.apache.commons.codec.language.NysiisTest.testFal":255,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":208,"org.apache.commons.codec.language.NysiisTest.testSnad":257,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":108,"org.apache.commons.codec.digest.HmacUtilsTest.testNullKey":289,"org.apache.commons.codec.language.MetaphoneTest.testTCH":219,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":54,"org.apache.commons.codec.language.NysiisTest.testLocaleIndependence":262,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":38,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Space_to_Nothing":202,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":223,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":79,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":43,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":180,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":227,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_NoSpace_to_Nothing":200,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":226,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":24,"org.apache.commons.codec.binary.Base64Test.testBase64":40,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":183,"org.apache.commons.codec.language.Caverphone1Test.testEncodeNull":270,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":4,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":27,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":85,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":68,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":192,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":191,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeEmpty":204,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully":120,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":45,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":67,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":237,"org.apache.commons.codec.binary.Base64Test.testCodec112":31,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray":155,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":146,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":177,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":7,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":231,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":12,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay":246,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":259,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":88,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":141,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":81,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":241,"org.apache.commons.codec.binary.Base64Test.testCodec68":36,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":217,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":265,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":70,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":46,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail":284,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":5,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Null_to_Nothing":199,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":119,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":61,"org.apache.commons.codec.language.Caverphone2Test.testEncodeNull":206,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":193,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":92,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":291,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":37,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":242,"org.apache.commons.codec.language.SoundexTest.testDifference":167,"org.apache.commons.codec.language.Caverphone2Test.testEncodeEmpty":207,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":175,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":6,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":179,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":3,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully":165,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":124,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":28,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":149,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_7_Return4_Successfully":157,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":18,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":148,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__DECLAN_Returns_DCLN":152},"transformations":[{"exception":"java.lang.RuntimeException","failures":[0,1,2,3,4],"tindex":"36d8cbd1-2c42-11e6-82e4-69fb303f3384","series":0,"name":"checkReturn","transplant":{"toString":"if (b < 0) {\n    b = 256 + b;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:773","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93],"tindex":"36d919f2-2c42-11e6-82e4-130e8267d863","series":0,"name":"checkReturn","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"len"},"type":"special","transplantationPoint":{"toString":"return len","position":"org.apache.commons.codec.binary.BaseNCodec:299","type":"CtReturnImpl","sourcecode":"return len"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36d919f3-2c42-11e6-82e4-1f381a9136a3","series":0,"name":"checkReturn","transplant":{"toString":"if (c != 0) {\n    return c;\n} ","position":"org.apache.commons.codec.language.bm.Rule:93","type":"CtIfImpl","sourcecode":"if (c != 0) {\n    return c;\n} "},"variableMap":{"c":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:325","type":"CtReturnImpl","sourcecode":"return index"},"status":0},{"exception":"java.lang.RuntimeException","failures":[94,95,0,1,2,3,4],"tindex":"36d94104-2c42-11e6-82e4-3f830c7a2026","series":0,"name":"checkReturn","transplant":{"toString":"if (u == 0) {\n    y++;\n    u = 128;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"index","y":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:562","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[96,97],"tindex":"36da7985-2c42-11e6-82e4-fb854e895182","series":0,"name":"checkReturn","transplant":{"toString":"if (input.startsWith((l + \" \"))) {\n    final java.lang.String remainder = input.substring(((l.length()) + 1));\n    final java.lang.String combined = l + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:417","type":"CtIfImpl","sourcecode":"if (input.startsWith((l + \" \"))) {\n    final java.lang.String java.lang.String = input.substring(((l.length()) + 1));\n    final java.lang.String java.lang.String = l + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"variableMap":{"input":"str","l":"str"},"type":"special","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.RefinedSoundex:181","type":"CtReturnImpl","sourcecode":"return str"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36daa096-2c42-11e6-82e4-d5bbbc8e6558","series":0,"name":"checkReturn","transplant":{"toString":"if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n    final java.lang.String remainder = input.substring(2);\n    final java.lang.String combined = \"d\" + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtIfImpl","sourcecode":"if (((input.length()) >= 2) && (input.substring(0, 2).equals(\"d'\"))) {\n    final java.lang.String java.lang.String = input.substring(2);\n    final java.lang.String java.lang.String = \"d\" + remainder;\n    return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\";\n} "},"variableMap":{"input":"charset"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.net.URLCodec.this.charset","position":"org.apache.commons.codec.net.URLCodec:365","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.this.java.lang.String"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36daa097-2c42-11e6-82e4-fb4b1893d1ba","series":0,"name":"checkReturn","transplant":{"toString":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE;\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"maxCodeLen","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"maxCodeLen","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"maxCodeLen","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"maxCodeLen","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"maxCodeLen","minRating":"maxCodeLen","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"maxCodeLen","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"maxCodeLen","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"maxCodeLen","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"maxCodeLen","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"maxCodeLen"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Metaphone.this.maxCodeLen","position":"org.apache.commons.codec.language.Metaphone:422","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Metaphone.this.int"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[98,99,100,101,102,103,104,105,106,107,108],"tindex":"36dac7a8-2c42-11e6-82e4-b932175d6794","series":0,"name":"checkReturn","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"length"},"type":"special","transplantationPoint":{"toString":"return length","position":"org.apache.commons.codec.language.ColognePhonetic:219","type":"CtReturnImpl","sourcecode":"return int"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151],"tindex":"36dac7a9-2c42-11e6-82e4-e9c3a381f71d","series":0,"name":"checkReturn","transplant":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.Nysiis:248","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"variableMap":{"str":"replacedName"},"type":"special","transplantationPoint":{"toString":"return replacedName","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:392","type":"CtReturnImpl","sourcecode":"return replacedName"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[127,148,149],"tindex":"36dac7aa-2c42-11e6-82e4-b17dcb2090cd","series":0,"name":"checkReturn","transplant":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.Nysiis:248","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"variableMap":{"str":"name"},"type":"special","transplantationPoint":{"toString":"return name","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:144","type":"CtReturnImpl","sourcecode":"return name"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[109,110,111,112,114,115,116,117,118,119,122,123,124,126,127,128,129,130,131,132,133,134,135,140,141,142,143,145,146,147,148,152,149,150,151],"tindex":"36daeebb-2c42-11e6-82e4-e34b779d5d1f","series":0,"name":"checkReturn","transplant":{"toString":"if (accentedWord == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtIfImpl","sourcecode":"if (accentedWord == null) {\n    return null;\n} "},"variableMap":{"accentedWord":"name"},"type":"special","transplantationPoint":{"toString":"return name","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:423","type":"CtReturnImpl","sourcecode":"return name"},"status":-1},{"exception":"java.io.IOException","failures":[50,55,60,69,70,71,72,73,74,76,77,80,81,82],"tindex":"36daeebc-2c42-11e6-82e4-ab653816f666","series":0,"name":"checkReturn","transplant":{"toString":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} ","position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"readLen"},"type":"special","transplantationPoint":{"toString":"return readLen","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:167","type":"CtReturnImpl","sourcecode":"return readLen"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[153,154,155],"tindex":"36daeebd-2c42-11e6-82e4-67c3dd9f2ddb","series":0,"name":"checkReturn","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"l_raw","ascii":"l_raw"},"type":"special","transplantationPoint":{"toString":"return l_raw","position":"org.apache.commons.codec.binary.BinaryCodec:215","type":"CtReturnImpl","sourcecode":"return l_raw"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[109,156,157,110,158,111,112,113,114,115,116,118,119,159,122,123,124,125,160,126,128,129,161,162,130,131,163,132,133,134,135,136,137,139,140,141,142,143,144,145,146,147,164,165,166,150,151],"tindex":"36daeebe-2c42-11e6-82e4-51ade6d8acda","series":0,"name":"checkReturn","transplant":{"toString":"if (b < 0) {\n    b = 256 + b;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"minRating"},"type":"special","transplantationPoint":{"toString":"return minRating","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:199","type":"CtReturnImpl","sourcecode":"return minRating"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[96,167],"tindex":"36db15cf-2c42-11e6-82e4-4725df2aaf5a","series":0,"name":"checkReturn","transplant":{"toString":"if (i > name2Size) {\n    break;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"diff","name2Size":"diff"},"type":"special","transplantationPoint":{"toString":"return diff","position":"org.apache.commons.codec.language.SoundexUtils:121","type":"CtReturnImpl","sourcecode":"return diff"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36db15d0-2c42-11e6-82e4-13c9e80b7f83","series":0,"name":"checkReturn","transplant":{"toString":"if (!(getEncoding().equalsIgnoreCase(encoding))) {\n    throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"));\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:148","type":"CtIfImpl","sourcecode":"if (!(getEncoding().equalsIgnoreCase(encoding))) {\n    throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"));\n} "},"variableMap":{"encoding":"name"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.RuleType.this.name","position":"org.apache.commons.codec.language.bm.RuleType:47","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.RuleType.this.java.lang.String"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[168,169],"tindex":"36db15d1-2c42-11e6-82e4-39d500999a36","series":0,"name":"checkReturn","transplant":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"l_ascii"},"type":"special","transplantationPoint":{"toString":"return l_ascii","position":"org.apache.commons.codec.binary.BinaryCodec:257","type":"CtReturnImpl","sourcecode":"return l_ascii"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,139,140,170,141,142,143,144,145,146,147,148,149,150,151],"tindex":"36db3ce2-2c42-11e6-82e4-6d8f8d0cc175","series":0,"name":"checkReturn","transplant":{"toString":"if ((es1 == null) || (es2 == null)) {\n    return 0;\n} ","position":"org.apache.commons.codec.language.SoundexUtils:111","type":"CtIfImpl","sourcecode":"if ((es1 == null) || (es2 == null)) {\n    return 0;\n} "},"variableMap":{"es1":"upperName","es2":"upperName"},"type":"special","transplantationPoint":{"toString":"return upperName","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:94","type":"CtReturnImpl","sourcecode":"return upperName"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36db3ce3-2c42-11e6-82e4-959d8935258c","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"l_ascii"},"type":"special","transplantationPoint":{"toString":"return l_ascii","position":"org.apache.commons.codec.binary.BinaryCodec:257","type":"CtReturnImpl","sourcecode":"return l_ascii"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[12,18,25,171,37,38,46,48,89,90,91,92],"tindex":"36db3ce4-2c42-11e6-82e4-718befa6e810","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"pArray"},"type":"special","transplantationPoint":{"toString":"return pArray","position":"org.apache.commons.codec.binary.BaseNCodec:407","type":"CtReturnImpl","sourcecode":"return pArray"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36db3ce5-2c42-11e6-82e4-bd6d3f310f31","series":0,"name":"checkReturn","transplant":{"toString":"if (len == (org.apache.commons.codec.binary.BaseNCodec.EOF)) {\n    break;\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"maxPhonemes","len":"maxPhonemes"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.maxPhonemes","position":"org.apache.commons.codec.language.bm.PhoneticEngine:527","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.int"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[172],"tindex":"36db63f6-2c42-11e6-82e4-c51cda2a1773","series":0,"name":"checkReturn","transplant":{"toString":"if (bytes == null) {\n    return null;\n} ","position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"variableMap":{"bytes":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36db63f7-2c42-11e6-82e4-d93f0107be51","series":0,"name":"checkReturn","transplant":{"toString":"if (c != 0) {\n    return c;\n} ","position":"org.apache.commons.codec.language.bm.Rule:93","type":"CtIfImpl","sourcecode":"if (c != 0) {\n    return c;\n} "},"variableMap":{"c":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:697","type":"CtReturnImpl","sourcecode":"return index"},"status":0},{"exception":"java.lang.RuntimeException","failures":[12,18,25,171,37,38,46,48,89,90,91,92],"tindex":"36db63f8-2c42-11e6-82e4-636257522bea","series":0,"name":"checkReturn","transplant":{"toString":"if (arrayOctet == null) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (arrayOctet == null) {\n    return false;\n} "},"variableMap":{"arrayOctet":"pArray"},"type":"special","transplantationPoint":{"toString":"return pArray","position":"org.apache.commons.codec.binary.BaseNCodec:407","type":"CtReturnImpl","sourcecode":"return pArray"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36db63f9-2c42-11e6-82e4-53d3ef91b45d","series":0,"name":"checkReturn","transplant":{"toString":"if ((input.length()) == 0) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((input.length()) == 0) {\n    return null;\n} "},"variableMap":{"input":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:128","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":0},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36db63fa-2c42-11e6-82e4-318855e6ddc2","series":0,"name":"checkReturn","transplant":{"toString":"if ((str == null) || ((str.length()) == 0)) {\n    return str;\n} ","position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtIfImpl","sourcecode":"if ((str == null) || ((str.length()) == 0)) {\n    return str;\n} "},"variableMap":{"str":"charset"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.net.URLCodec.this.charset","position":"org.apache.commons.codec.net.URLCodec:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.this.java.lang.String"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[5,6,8,11,14,16,17,18,19,20,21,22,23,25,26,27,29,31,173,34,35,37,39,40,43,47,48,63,64,66,72,82,84,85,88,93],"tindex":"36dc003b-2c42-11e6-82e4-2530fcd058d1","series":0,"name":"checkReturn","transplant":{"toString":"if (n < 0) {\n    throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n));\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:192","type":"CtIfImpl","sourcecode":"if (n < 0) {\n    throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n));\n} "},"variableMap":{"n":"len"},"type":"special","transplantationPoint":{"toString":"return len","position":"org.apache.commons.codec.binary.BaseNCodec:523","type":"CtReturnImpl","sourcecode":"return len"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36dc003c-2c42-11e6-82e4-9d9b6c689891","series":0,"name":"checkReturn","transplant":{"toString":"if ((curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))) {\n    return new char[]{ prev };\n} ","position":"org.apache.commons.codec.language.Nysiis:163","type":"CtIfImpl","sourcecode":"if ((curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))) {\n    return new char[]{ prev };\n} "},"variableMap":{"prev":"mappedChar","curr":"mappedChar"},"type":"special","transplantationPoint":{"toString":"return mappedChar","position":"org.apache.commons.codec.language.Soundex:197","type":"CtReturnImpl","sourcecode":"return mappedChar"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36dc274d-2c42-11e6-82e4-41da5c6e680d","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"l_raw"},"type":"special","transplantationPoint":{"toString":"return l_raw","position":"org.apache.commons.codec.binary.BinaryCodec:215","type":"CtReturnImpl","sourcecode":"return l_raw"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[174,94,175,0,1,2,3,4],"tindex":"36dc274e-2c42-11e6-82e4-c9ca67245446","series":0,"name":"checkReturn","transplant":{"toString":"if (i > name2Size) {\n    break;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"index","name2Size":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:641","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36dc274f-2c42-11e6-82e4-93975ed1dcc1","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:240","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[176,177,178,179,180,181,182,183,184,185,186,187,188,189],"tindex":"36dc2750-2c42-11e6-82e4-6bfbbd2f6ded","series":0,"name":"checkReturn","transplant":{"toString":"if (u == 0) {\n    y++;\n    u = 128;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"maxPhonemes","y":"maxPhonemes"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.maxPhonemes","position":"org.apache.commons.codec.language.bm.PhoneticEngine:527","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.int"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[190],"tindex":"36dc4e61-2c42-11e6-82e4-a9ae1fc3b370","series":0,"name":"checkReturn","transplant":{"toString":"if (bytes == null) {\n    return null;\n} ","position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"variableMap":{"bytes":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:154","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-1},{"exception":"java.io.IOException","failures":[],"tindex":"36dc4e62-2c42-11e6-82e4-a91e654ec95f","series":0,"name":"checkReturn","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"readLen","to":"readLen"},"type":"special","transplantationPoint":{"toString":"return readLen","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:167","type":"CtReturnImpl","sourcecode":"return readLen"},"status":0},{"exception":"java.lang.RuntimeException","failures":[98,99,100,101,102,103,104,105,106,107,108],"tindex":"36dc4e63-2c42-11e6-82e4-f3c048670f6b","series":0,"name":"checkReturn","transplant":{"toString":"if (b < 0) {\n    b = 256 + b;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"length"},"type":"special","transplantationPoint":{"toString":"return length","position":"org.apache.commons.codec.language.ColognePhonetic:219","type":"CtReturnImpl","sourcecode":"return int"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36dcc394-2c42-11e6-82e4-6911f177ef97","series":0,"name":"checkReturn","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"c","to":"c"},"type":"special","transplantationPoint":{"toString":"return c","position":"org.apache.commons.codec.language.bm.Rule:94","type":"CtReturnImpl","sourcecode":"return c"},"status":0},{"exception":"java.lang.RuntimeException","failures":[176,177,179,180,181,191,192,182,183,186,187,189,193,194,195,196,197,198],"tindex":"36dceaa5-2c42-11e6-82e4-cfa81c27696c","series":0,"name":"checkReturn","transplant":{"toString":"if ((str.length()) == 0) {\n    return str;\n} ","position":"org.apache.commons.codec.language.Nysiis:255","type":"CtIfImpl","sourcecode":"if ((str.length()) == 0) {\n    return str;\n} "},"variableMap":{"str":"name"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.RuleType.this.name","position":"org.apache.commons.codec.language.bm.RuleType:47","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.RuleType.this.java.lang.String"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36dceaa6-2c42-11e6-82e4-3b053228d9d2","series":0,"name":"checkReturn","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"resizedBytes","raw":"resizedBytes"},"type":"special","transplantationPoint":{"toString":"return resizedBytes","position":"org.apache.commons.codec.binary.Base64:769","type":"CtReturnImpl","sourcecode":"return resizedBytes"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36dceaa7-2c42-11e6-82e4-a1c49382189e","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:154","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[199,200,201,202,203,204,205],"tindex":"36dceaa8-2c42-11e6-82e4-511625f1d791","series":0,"name":"checkReturn","transplant":{"toString":"if (source == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtIfImpl","sourcecode":"if (source == null) {\n    return null;\n} "},"variableMap":{"source":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:128","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[206,207],"tindex":"36dd11b9-2c42-11e6-82e4-3995d87154ac","series":0,"name":"checkReturn","transplant":{"toString":"if (source == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtIfImpl","sourcecode":"if (source == null) {\n    return null;\n} "},"variableMap":{"source":"org.apache.commons.codec.language.Caverphone2.TEN_1"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Caverphone2.TEN_1","position":"org.apache.commons.codec.language.Caverphone2:48","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[153,154],"tindex":"36dd11ba-2c42-11e6-82e4-29cb1b674e47","series":0,"name":"checkReturn","transplant":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:200","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[208,209,210,211,212,213,214,215,216],"tindex":"36dd11bb-2c42-11e6-82e4-0b89f2fdb516","series":0,"name":"checkReturn","transplant":{"toString":"if (input == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtIfImpl","sourcecode":"if (input == null) {\n    return null;\n} "},"variableMap":{"input":"charset"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.net.URLCodec.this.charset","position":"org.apache.commons.codec.net.URLCodec:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.this.java.lang.String"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36dd11bc-2c42-11e6-82e4-41c5e13da669","series":0,"name":"checkReturn","transplant":{"toString":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtIfImpl","sourcecode":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n} "},"variableMap":{"name":"cachedString","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"cachedString","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"cachedString"},"type":"special","transplantationPoint":{"toString":"return cachedString","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:155","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[153,154],"tindex":"36dd11bd-2c42-11e6-82e4-5b6cb235b618","series":0,"name":"checkReturn","transplant":{"toString":"if (bytes == null) {\n    return null;\n} ","position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"variableMap":{"bytes":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:200","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36dd38ce-2c42-11e6-82e4-bd1b069889cb","series":0,"name":"checkReturn","transplant":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"buffer"},"type":"special","transplantationPoint":{"toString":"return context.buffer","position":"org.apache.commons.codec.binary.BaseNCodec:258","type":"CtReturnImpl","sourcecode":"return context.byte[]"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246],"tindex":"36dd38cf-2c42-11e6-82e4-4fce3df02260","series":0,"name":"checkReturn","transplant":{"toString":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} ","position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"maxCodeLen"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Metaphone.this.maxCodeLen","position":"org.apache.commons.codec.language.Metaphone:422","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Metaphone.this.int"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[247,248,249,250,251],"tindex":"36dd38d0-2c42-11e6-82e4-0b1a4ff5b396","series":0,"name":"checkReturn","transplant":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"data"},"type":"special","transplantationPoint":{"toString":"return data","position":"org.apache.commons.codec.net.QCodec:165","type":"CtReturnImpl","sourcecode":"return data"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[252,253,254,255,256,257,258,259,260,261,262],"tindex":"36dd38d1-2c42-11e6-82e4-2734d5664eb2","series":0,"name":"checkReturn","transplant":{"toString":"if (!ignoreCase) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"strict"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.this.strict","position":"org.apache.commons.codec.language.Nysiis:237","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.this.boolean"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36dd5fe2-2c42-11e6-82e4-53169ef8c754","series":0,"name":"checkReturn","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","raw":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":0},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36dd5fe3-2c42-11e6-82e4-51f95317a444","series":0,"name":"checkReturn","transplant":{"toString":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE;\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"index","minRating":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:349","type":"CtReturnImpl","sourcecode":"return index"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[176,177,179,180,181,182,183,186,187,189,194,195,196,197,198],"tindex":"36dd5fe4-2c42-11e6-82e4-1b85ee6b21d0","series":0,"name":"checkReturn","transplant":{"toString":"if (!ignoreCase) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"found"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.found","position":"org.apache.commons.codec.language.bm.PhoneticEngine:231","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[176,177,179,180,181,182,183,186,187,189,193,194,195,196,197,198],"tindex":"36dd86f5-2c42-11e6-82e4-27d0ca15d801","series":0,"name":"checkReturn","transplant":{"toString":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"finalRules can not be null\");\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:331","type":"CtIfImpl","sourcecode":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"finalRules can not be null\");\n} "},"variableMap":{"finalRules":"rules"},"type":"special","transplantationPoint":{"toString":"return rules","position":"org.apache.commons.codec.language.bm.Rule:362","type":"CtReturnImpl","sourcecode":"return rules"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[263,96,97,264,167,265],"tindex":"36dd86f6-2c42-11e6-82e4-ed013444a6ce","series":0,"name":"checkReturn","transplant":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.Nysiis:248","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"variableMap":{"str":"str"},"type":"special","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.SoundexUtils:43","type":"CtReturnImpl","sourcecode":"return str"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[12,18,25,171,37,38,46,48,89,90,91,92],"tindex":"36dd86f7-2c42-11e6-82e4-e1981cd315e5","series":0,"name":"checkReturn","transplant":{"toString":"if (arrayOctet == null) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (arrayOctet == null) {\n    return false;\n} "},"variableMap":{"arrayOctet":"pArray"},"type":"special","transplantationPoint":{"toString":"return pArray","position":"org.apache.commons.codec.binary.BaseNCodec:407","type":"CtReturnImpl","sourcecode":"return pArray"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36dd86f8-2c42-11e6-82e4-59fc7c4418b4","series":0,"name":"checkReturn","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"value","to":"value"},"type":"special","transplantationPoint":{"toString":"return value","position":"org.apache.commons.codec.digest.UnixCrypt:389","type":"CtReturnImpl","sourcecode":"return value"},"status":0},{"exception":"java.lang.RuntimeException","failures":[0,1,2,3,4],"tindex":"36dd86f9-2c42-11e6-82e4-8d1b11235bcb","series":0,"name":"checkReturn","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:349","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36ddae0a-2c42-11e6-82e4-ef3c9f96b430","series":0,"name":"checkReturn","transplant":{"toString":"if (!(getEncoding().equalsIgnoreCase(encoding))) {\n    throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"));\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:148","type":"CtIfImpl","sourcecode":"if (!(getEncoding().equalsIgnoreCase(encoding))) {\n    throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"));\n} "},"variableMap":{"encoding":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:128","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36ddae0b-2c42-11e6-82e4-198a65b88829","series":0,"name":"checkReturn","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"index","to":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:544","type":"CtReturnImpl","sourcecode":"return index"},"status":0},{"exception":"java.lang.RuntimeException","failures":[217,218,219,223,231,233,243],"tindex":"36ddae0c-2c42-11e6-82e4-cf04cb4e457a","series":0,"name":"checkReturn","transplant":{"toString":"if (!ignoreCase) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"matches"},"type":"special","transplantationPoint":{"toString":"return matches","position":"org.apache.commons.codec.language.Metaphone:357","type":"CtReturnImpl","sourcecode":"return matches"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[176,177,179,180,181,191,192,182,183,186,187,189,193,194,195,196,197,198],"tindex":"36ddae0d-2c42-11e6-82e4-99ebd1d22dd4","series":0,"name":"checkReturn","transplant":{"toString":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"variableMap":{"salt":"name"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.RuleType.this.name","position":"org.apache.commons.codec.language.bm.RuleType:47","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.RuleType.this.java.lang.String"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36ddae0e-2c42-11e6-82e4-256f48fe6f02","series":0,"name":"checkReturn","transplant":{"toString":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"str","leftCharacter":"str","rightCharacter":"str","location":"str"},"type":"special","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.Nysiis:256","type":"CtReturnImpl","sourcecode":"return str"},"status":0},{"exception":"java.lang.RuntimeException","failures":[96,167],"tindex":"36ddd51f-2c42-11e6-82e4-d1affae2c969","series":0,"name":"checkReturn","transplant":{"toString":"if (c != 0) {\n    return c;\n} ","position":"org.apache.commons.codec.language.bm.Rule:93","type":"CtIfImpl","sourcecode":"if (c != 0) {\n    return c;\n} "},"variableMap":{"c":"diff"},"type":"special","transplantationPoint":{"toString":"return diff","position":"org.apache.commons.codec.language.SoundexUtils:121","type":"CtReturnImpl","sourcecode":"return diff"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[266,267,268,269],"tindex":"36ddd520-2c42-11e6-82e4-3f3ff0c558da","series":0,"name":"checkReturn","transplant":{"toString":"if (b < 0) {\n    b = 256 + b;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"a"},"type":"special","transplantationPoint":{"toString":"return a","position":"org.apache.commons.codec.digest.UnixCrypt:395","type":"CtReturnImpl","sourcecode":"return a"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[174],"tindex":"36ddd521-2c42-11e6-82e4-f54bc0af555f","series":0,"name":"checkReturn","transplant":{"toString":"if (u == 0) {\n    y++;\n    u = 128;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"compareCode","y":"compareCode"},"type":"special","transplantationPoint":{"toString":"return compareCode","position":"org.apache.commons.codec.StringEncoderComparator:88","type":"CtReturnImpl","sourcecode":"return compareCode"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36ddd522-2c42-11e6-82e4-c91b49ad6f27","series":0,"name":"checkReturn","transplant":{"toString":"if (salt == null) {\n    saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern p = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher m = p.matcher(salt);\n    if ((m == null) || (!(m.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n    } \n    saltString = m.group(1);\n}","position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher java.util.regex.Matcher = p.matcher(salt);\n    if ((m == null) || (!(m.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n    } \n    saltString = m.group(1);\n}"},"variableMap":{"saltString":"str","salt":"str","prefix":"str"},"type":"special","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.RefinedSoundex:181","type":"CtReturnImpl","sourcecode":"return str"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[176,177,178,179,180,181,182,183,184,185,186,187,188,189],"tindex":"36ddd523-2c42-11e6-82e4-3f4af449eaaf","series":0,"name":"checkReturn","transplant":{"toString":"if (b == ' ') {\n    b = '+';\n} ","position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"variableMap":{"b":"maxPhonemes"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.maxPhonemes","position":"org.apache.commons.codec.language.bm.PhoneticEngine:527","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.int"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[22,23],"tindex":"36ddfc34-2c42-11e6-82e4-87d977ed54c7","series":0,"name":"checkReturn","transplant":{"toString":"if (bytes == null) {\n    return null;\n} ","position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"variableMap":{"bytes":"bigBytes"},"type":"special","transplantationPoint":{"toString":"return bigBytes","position":"org.apache.commons.codec.binary.Base64:755","type":"CtReturnImpl","sourcecode":"return bigBytes"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[217,218,219,223,231,233,243],"tindex":"36ddfc35-2c42-11e6-82e4-cb17911b2b18","series":0,"name":"checkReturn","transplant":{"toString":"if (!ignoreCase) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"matches"},"type":"special","transplantationPoint":{"toString":"return matches","position":"org.apache.commons.codec.language.Metaphone:357","type":"CtReturnImpl","sourcecode":"return matches"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36de9876-2c42-11e6-82e4-b90e6a6c3da6","series":0,"name":"checkReturn","transplant":{"toString":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtIfImpl","sourcecode":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n} "},"variableMap":{"name":"charset","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"charset","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"charset"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.net.URLCodec.this.charset","position":"org.apache.commons.codec.net.URLCodec:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.this.java.lang.String"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[176,177,178,179,180,181,182,183,184,186,187,188,189],"tindex":"36debf87-2c42-11e6-82e4-517032ed6f08","series":0,"name":"checkReturn","transplant":{"toString":"if (!ignoreCase) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"concat"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.concat","position":"org.apache.commons.codec.language.bm.PhoneticEngine:517","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.boolean"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[0,1,2,3,4],"tindex":"36debf88-2c42-11e6-82e4-c50efbac361a","series":0,"name":"checkReturn","transplant":{"toString":"if (u == 0) {\n    y++;\n    u = 128;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"index","y":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:349","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[252,253,254,255,256,257,258,259,260,261,262],"tindex":"36debf89-2c42-11e6-82e4-21908371f5d7","series":0,"name":"checkReturn","transplant":{"toString":"if (!ignoreCase) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"strict"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.this.strict","position":"org.apache.commons.codec.language.Nysiis:237","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.this.boolean"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36debf8a-2c42-11e6-82e4-5fee45ee5900","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"buffer"},"type":"special","transplantationPoint":{"toString":"return context.buffer","position":"org.apache.commons.codec.binary.BaseNCodec:272","type":"CtReturnImpl","sourcecode":"return context.byte[]"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36debf8b-2c42-11e6-82e4-6bb0a81086d0","series":0,"name":"checkReturn","transplant":{"toString":"if ((curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))) {\n    return new char[]{ prev };\n} ","position":"org.apache.commons.codec.language.Nysiis:158","type":"CtIfImpl","sourcecode":"if ((curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))) {\n    return new char[]{ prev };\n} "},"variableMap":{"next":"java.lang.Character.MIN_VALUE","prev":"java.lang.Character.MIN_VALUE","curr":"java.lang.Character.MIN_VALUE"},"type":"special","transplantationPoint":{"toString":"return java.lang.Character.MIN_VALUE","position":"org.apache.commons.codec.language.DoubleMetaphone:906","type":"CtReturnImpl","sourcecode":"return java.lang.Character.java.lang.Character.char"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36dee69c-2c42-11e6-82e4-d39ad5a9a0c2","series":0,"name":"checkReturn","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"el","to":"el"},"type":"special","transplantationPoint":{"toString":"return el","position":"org.apache.commons.codec.digest.UnixCrypt:335","type":"CtReturnImpl","sourcecode":"return el"},"status":0},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36dee69d-2c42-11e6-82e4-c5f70984f806","series":0,"name":"checkReturn","transplant":{"toString":"if (!(java.lang.Character.isLetter(c))) {\n    return 0;\n} ","position":"org.apache.commons.codec.language.RefinedSoundex:162","type":"CtIfImpl","sourcecode":"if (!(java.lang.Character.isLetter(c))) {\n    return 0;\n} "},"variableMap":{"c":"java.lang.Character.MIN_VALUE"},"type":"special","transplantationPoint":{"toString":"return java.lang.Character.MIN_VALUE","position":"org.apache.commons.codec.language.DoubleMetaphone:906","type":"CtReturnImpl","sourcecode":"return java.lang.Character.java.lang.Character.char"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36dfa9ee-2c42-11e6-82e4-d9ed6a99d982","series":0,"name":"checkReturn","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","raw":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":0},{"exception":"java.lang.RuntimeException","failures":[270,271],"tindex":"36dfd0ff-2c42-11e6-82e4-9596ad9dd3a9","series":0,"name":"checkReturn","transplant":{"toString":"if (text == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"variableMap":{"text":"org.apache.commons.codec.language.Caverphone1.SIX_1"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Caverphone1.SIX_1","position":"org.apache.commons.codec.language.Caverphone1:48","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36dfd100-2c42-11e6-82e4-6bc46ee78334","series":0,"name":"checkReturn","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"index","to":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:460","type":"CtReturnImpl","sourcecode":"return index"},"status":0},{"exception":"java.lang.RuntimeException","failures":[176,177,179,180,181,191,192,182,183,186,187,189,193,194,195,196,197,198],"tindex":"36dfd101-2c42-11e6-82e4-b70ea34782d3","series":0,"name":"checkReturn","transplant":{"toString":"if (string == null) {\n    return null;\n} ","position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtIfImpl","sourcecode":"if (string == null) {\n    return null;\n} "},"variableMap":{"string":"str"},"type":"special","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.bm.Rule:621","type":"CtReturnImpl","sourcecode":"return str"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36dfd102-2c42-11e6-82e4-f7001b15789d","series":0,"name":"checkReturn","transplant":{"toString":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.TEN_1;\n} ","position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n} "},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"charset","txt":"charset"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.net.URLCodec.this.charset","position":"org.apache.commons.codec.net.URLCodec:365","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.this.java.lang.String"},"status":-2},{"exception":"org.apache.commons.codec.DecoderException","failures":[],"tindex":"36dff813-2c42-11e6-82e4-a51bfac106fc","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"out"},"type":"special","transplantationPoint":{"toString":"return out","position":"org.apache.commons.codec.binary.Hex:96","type":"CtReturnImpl","sourcecode":"return out"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36dff814-2c42-11e6-82e4-91d589d2a5a9","series":0,"name":"checkReturn","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"len","to":"len"},"type":"special","transplantationPoint":{"toString":"return len","position":"org.apache.commons.codec.binary.BaseNCodec:299","type":"CtReturnImpl","sourcecode":"return len"},"status":0},{"exception":"java.lang.RuntimeException","failures":[208,209,210,211,212,213,214,215,216],"tindex":"36dff815-2c42-11e6-82e4-8d0f912fa3c1","series":0,"name":"checkReturn","transplant":{"toString":"if ((str.length()) == 0) {\n    return str;\n} ","position":"org.apache.commons.codec.language.Nysiis:255","type":"CtIfImpl","sourcecode":"if ((str.length()) == 0) {\n    return str;\n} "},"variableMap":{"str":"charset"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.net.URLCodec.this.charset","position":"org.apache.commons.codec.net.URLCodec:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.this.java.lang.String"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[176,177,179,180,181,191,192,182,183,186,187,189,193,194,195,196,197,198],"tindex":"36dff816-2c42-11e6-82e4-6b98fb518552","series":0,"name":"checkReturn","transplant":{"toString":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"variableMap":{"salt":"name"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.RuleType.this.name","position":"org.apache.commons.codec.language.bm.RuleType:47","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.RuleType.this.java.lang.String"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36e01f27-2c42-11e6-82e4-4922e5fdd7a9","series":0,"name":"checkReturn","transplant":{"toString":"if (isVowel(firstLetter)) {\n    return firstLetter + name;\n} else {\n    return name;\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:420","type":"CtIfImpl","sourcecode":"if (isVowel(firstLetter)) {\n    return firstLetter + name;\n} else {\n    return name;\n}"},"variableMap":{"name":"charset","firstLetter":"charset"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.net.URLCodec.this.charset","position":"org.apache.commons.codec.net.URLCodec:365","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.this.java.lang.String"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36e01f28-2c42-11e6-82e4-61103a0ee627","series":0,"name":"checkReturn","transplant":{"toString":"if (len == (org.apache.commons.codec.binary.BaseNCodec.EOF)) {\n    break;\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"minRating","len":"minRating"},"type":"special","transplantationPoint":{"toString":"return minRating","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:199","type":"CtReturnImpl","sourcecode":"return minRating"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36e01f29-2c42-11e6-82e4-c9ba8a8b4670","series":0,"name":"checkReturn","transplant":{"toString":"if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n    return 0;\n} ","position":"org.apache.commons.codec.language.Soundex:192","type":"CtIfImpl","sourcecode":"if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n    return 0;\n} "},"variableMap":{"mappedChar":"java.lang.Character.MIN_VALUE","preHWChar":"java.lang.Character.MIN_VALUE","firstCode":"java.lang.Character.MIN_VALUE"},"type":"special","transplantationPoint":{"toString":"return java.lang.Character.MIN_VALUE","position":"org.apache.commons.codec.language.DoubleMetaphone:906","type":"CtReturnImpl","sourcecode":"return java.lang.Character.java.lang.Character.char"},"status":-2},{"exception":"org.apache.commons.codec.DecoderException","failures":[],"tindex":"36e01f2a-2c42-11e6-82e4-790094680f45","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:117","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36e01f2b-2c42-11e6-82e4-a7c1c08258bd","series":0,"name":"checkReturn","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE","to":"org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE","position":"org.apache.commons.codec.binary.BaseNCodec:241","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int"},"status":0},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36e01f2c-2c42-11e6-82e4-c7b6b9d2e70d","series":0,"name":"checkReturn","transplant":{"toString":"if ((line.length()) == 0) {\n    continue;\n} ","position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"variableMap":{"line":"charset"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.net.URLCodec.this.charset","position":"org.apache.commons.codec.net.URLCodec:365","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.this.java.lang.String"},"status":0},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36e0463d-2c42-11e6-82e4-c1493d1aa80b","series":0,"name":"checkReturn","transplant":{"toString":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE;\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"c","minRating":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"c"},"type":"special","transplantationPoint":{"toString":"return c","position":"org.apache.commons.codec.language.bm.Rule:94","type":"CtReturnImpl","sourcecode":"return c"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36e0463e-2c42-11e6-82e4-097da6c2cade","series":0,"name":"checkReturn","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","ascii":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:240","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":0},{"exception":"java.lang.RuntimeException","failures":[217,221,225,227,228,229,231,232,233,238,240,241,242,245],"tindex":"36e0463f-2c42-11e6-82e4-87af47668e1a","series":0,"name":"checkReturn","transplant":{"toString":"if (!ignoreCase) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"matches"},"type":"special","transplantationPoint":{"toString":"return matches","position":"org.apache.commons.codec.language.Metaphone:348","type":"CtReturnImpl","sourcecode":"return matches"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36e04640-2c42-11e6-82e4-a1f254e9ed26","series":0,"name":"checkReturn","transplant":{"toString":"if (len == (org.apache.commons.codec.binary.BaseNCodec.EOF)) {\n    break;\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"maxCodeLen","len":"maxCodeLen"},"type":"special","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Metaphone.this.maxCodeLen","position":"org.apache.commons.codec.language.Metaphone:422","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Metaphone.this.int"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[266,267,268,269],"tindex":"36e06d51-2c42-11e6-82e4-59dfbe14efda","series":0,"name":"checkReturn","transplant":{"toString":"if (b < 0) {\n    b = 256 + b;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"a"},"type":"special","transplantationPoint":{"toString":"return a","position":"org.apache.commons.codec.digest.UnixCrypt:395","type":"CtReturnImpl","sourcecode":"return a"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291],"tindex":"36e06d52-2c42-11e6-82e4-998a8d71c2ea","series":0,"name":"checkReturn","transplant":{"toString":"if (string == null) {\n    return null;\n} ","position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtIfImpl","sourcecode":"if (string == null) {\n    return null;\n} "},"variableMap":{"string":"algorithm"},"type":"special","transplantationPoint":{"toString":"return algorithm","position":"org.apache.commons.codec.digest.HmacAlgorithms:91","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"36e06d53-2c42-11e6-82e4-7d4f0488b129","series":0,"name":"checkReturn","transplant":{"toString":"if (c1 == c2) {\n    continue;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:62","type":"CtIfImpl","sourcecode":"if (c1 == c2) {\n    continue;\n} "},"variableMap":{"c1":"java.lang.Character.MIN_VALUE","c2":"java.lang.Character.MIN_VALUE"},"type":"special","transplantationPoint":{"toString":"return java.lang.Character.MIN_VALUE","position":"org.apache.commons.codec.language.DoubleMetaphone:906","type":"CtReturnImpl","sourcecode":"return java.lang.Character.java.lang.Character.char"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[94,95,0,1,2,3,4],"tindex":"36e06d54-2c42-11e6-82e4-731c08a0b281","series":0,"name":"checkReturn","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"index"},"type":"special","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:562","type":"CtReturnImpl","sourcecode":"return index"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
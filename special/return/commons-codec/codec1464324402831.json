{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":5,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":80,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":224,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":142,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":26,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":229,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":227,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":218,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":37,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":71,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":213,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":266,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":143,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":67,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":77,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":126,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":220,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":117,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty":207,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":82,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":19,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":116,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":177,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":234,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":259,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":258,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":155,"org.apache.commons.codec.language.NysiisTest.testCap":89,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":156,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":223,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":236,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":160,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":105,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":257,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":235,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":157,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":30,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":66,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":158,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":124,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":261,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":102,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":200,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":170,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":101,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":265,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":149,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":70,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_One_Letter_to_Nothing":11,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":190,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":141,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":242,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":226,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":27,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":148,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":221,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":237,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":52,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":3,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":184,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":231,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":75,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":16,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":203,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":244,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":145,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":104,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":179,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":123,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":164,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":217,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":6,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":239,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":254,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":263,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":25,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":133,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":225,"org.apache.commons.codec.binary.Base64Test.testUUID":152,"org.apache.commons.codec.binary.Base64Test.testSingletons":169,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":24,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3_PETE_Returns_PETE":246,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":128,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":174,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":201,"org.apache.commons.codec.binary.Base64Test.testPairs":151,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":127,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":21,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":250,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":214,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":76,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":256,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":210,"org.apache.commons.codec.language.NysiisTest.testBran":93,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":98,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray":48,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput":57,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":219,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":43,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":205,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":132,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":108,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":260,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":215,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":167,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":51,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":74,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":114,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":168,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":63,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":262,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":64,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":119,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":140,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":185,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":138,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":38,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert":72,"org.apache.commons.codec.language.NysiisTest.testDad":90,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":194,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":106,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":154,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":249,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":60,"org.apache.commons.codec.language.NysiisTest.testDan":91,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":230,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105":198,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":197,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":7,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":100,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":137,"org.apache.commons.codec.binary.HexTest.testCustomCharset":209,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":228,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":241,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":118,"org.apache.commons.codec.language.NysiisTest.testSnat":95,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":189,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":17,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":188,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":248,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":41,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":40,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":87,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":107,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":120,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":2,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":199,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":195,"org.apache.commons.codec.binary.Base64Test.testTriplets":146,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":134,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":103,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":46,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":44,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":47,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":49,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":251,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":110,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":192,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":161,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":182,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeNull":13,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex":58,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":109,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":42,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":150,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":136,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":33,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":78,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testLocaleIndependence":15,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":144,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":18,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":264,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":165,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":211,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":32,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":196,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":4,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":186,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":176,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":45,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":240,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":31,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":187,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":255,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":8,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":85,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":183,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":216,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":86,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":212,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":206,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":232,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero":81,"org.apache.commons.codec.language.MetaphoneTest.testWhy":62,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":135,"org.apache.commons.codec.language.NysiisTest.testTranan":97,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":130,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":233,"org.apache.commons.codec.language.NysiisTest.testFal":92,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":29,"org.apache.commons.codec.language.NysiisTest.testSnad":94,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":267,"org.apache.commons.codec.language.MetaphoneTest.testTCH":61,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":139,"org.apache.commons.codec.language.NysiisTest.testLocaleIndependence":99,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":173,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Space_to_Nothing":12,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":65,"org.apache.commons.codec.binary.HexTest.testDencodeEmpty":208,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":202,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":36,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":69,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":178,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_NoSpace_to_Nothing":10,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":68,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":159,"org.apache.commons.codec.binary.Base64Test.testBase64":175,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":39,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":162,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":191,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":122,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":55,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeEmpty":14,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":20,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":79,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":121,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":180,"org.apache.commons.codec.binary.Base64Test.testCodec112":166,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray":50,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":34,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":243,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":73,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":113,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay":88,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":96,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":147,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":125,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":238,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":204,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":83,"org.apache.commons.codec.binary.Base64Test.testCodec68":171,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":59,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":253,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":193,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":181,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":111,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Null_to_Nothing":9,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":23,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":222,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":115,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":56,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":129,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":172,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":84,"org.apache.commons.codec.language.SoundexTest.testDifference":252,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":28,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":53,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":131,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":22,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":112,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":35,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":163,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":247,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":153,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":245},"transformations":[{"exception":"java.lang.RuntimeException","failures":[0,1,2,3,4,5],"tindex":"022eb150-23c6-11e6-865f-1361cadc91dc","series":0,"name":"checkReturn","transplant":{"toString":"if (i > name2Size) {\n    break;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"index","name2Size":"index"},"type":"insertion","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:325","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[0,1,6,3,4,5,7,8],"tindex":"022ed861-23c6-11e6-865f-d1ef7518e98d","series":0,"name":"checkReturn","transplant":{"toString":"if (b < 0) {\n    b = 256 + b;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"index"},"type":"insertion","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:402","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[9,10,11,12,13,14,15],"tindex":"022ed862-23c6-11e6-865f-d11e4c9dc40b","series":0,"name":"checkReturn","transplant":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.Nysiis:248","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"variableMap":{"str":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:128","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"022ed863-23c6-11e6-865f-455e4136b2b3","series":0,"name":"checkReturn","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"buffer","ascii":"buffer"},"type":"insertion","transplantationPoint":{"toString":"return context.buffer","position":"org.apache.commons.codec.binary.BaseNCodec:272","type":"CtReturnImpl","sourcecode":"return context.byte[]"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[0,1,2,3,4,5],"tindex":"022eff74-23c6-11e6-865f-c9e70729588e","series":0,"name":"checkReturn","transplant":{"toString":"if (!ignoreCase) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"result"},"type":"insertion","transplantationPoint":{"toString":"return result","position":"org.apache.commons.codec.language.DoubleMetaphone:928","type":"CtReturnImpl","sourcecode":"return result"},"status":-1},{"exception":"org.apache.commons.codec.DecoderException","failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"tindex":"022eff75-23c6-11e6-865f-ab612d8e8c05","series":0,"name":"checkReturn","transplant":{"toString":"if (i > name2Size) {\n    break;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"i","name2Size":"i"},"type":"insertion","transplantationPoint":{"toString":"return i","position":"org.apache.commons.codec.net.Utils:47","type":"CtReturnImpl","sourcecode":"return i"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"tindex":"022eff76-23c6-11e6-865f-e94ef2244738","series":0,"name":"checkReturn","transplant":{"toString":"if (b < 0) {\n    b = 256 + b;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"i"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.i","position":"org.apache.commons.codec.language.bm.PhoneticEngine:192","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"022eff77-23c6-11e6-865f-59c2b2453d97","series":0,"name":"checkReturn","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"minRating","to":"minRating"},"type":"insertion","transplantationPoint":{"toString":"return minRating","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:199","type":"CtReturnImpl","sourcecode":"return minRating"},"status":0},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"022eff78-23c6-11e6-865f-db4cc8e512b8","series":0,"name":"checkReturn","transplant":{"toString":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE;\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"el","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"el","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"el","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"el","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"el","minRating":"el","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"el","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"el","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"el","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"el","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"el"},"type":"insertion","transplantationPoint":{"toString":"return el","position":"org.apache.commons.codec.digest.UnixCrypt:335","type":"CtReturnImpl","sourcecode":"return el"},"status":-2},{"exception":"java.io.IOException","failures":[],"tindex":"022f2689-23c6-11e6-865f-a95afcfdb379","series":0,"name":"checkReturn","transplant":{"toString":"if (u == 0) {\n    y++;\n    u = 128;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"org.apache.commons.codec.binary.BaseNCodec.EOF","y":"org.apache.commons.codec.binary.BaseNCodec.EOF"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BaseNCodec.EOF","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:105","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[48,49,50],"tindex":"022f268a-23c6-11e6-865f-430c52518adf","series":0,"name":"checkReturn","transplant":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"l_raw"},"type":"insertion","transplantationPoint":{"toString":"return l_raw","position":"org.apache.commons.codec.binary.BinaryCodec:215","type":"CtReturnImpl","sourcecode":"return l_raw"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[51],"tindex":"022f268b-23c6-11e6-865f-71d128f50d57","series":0,"name":"checkReturn","transplant":{"toString":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} "},"variableMap":{"ph":"str"},"type":"insertion","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.SoundexUtils:43","type":"CtReturnImpl","sourcecode":"return str"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"022f4d9c-23c6-11e6-865f-cb0b5d40e964","series":0,"name":"checkReturn","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"index","to":"index"},"type":"insertion","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:733","type":"CtReturnImpl","sourcecode":"return index"},"status":0},{"exception":"java.lang.RuntimeException","failures":[0,1,3,4,5],"tindex":"022f4d9d-23c6-11e6-865f-af184e7b1ba7","series":0,"name":"checkReturn","transplant":{"toString":"if (u == 0) {\n    y++;\n    u = 128;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"index","y":"index"},"type":"insertion","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:349","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[0,1,2,52,3,4,5],"tindex":"022f4d9e-23c6-11e6-865f-7d6ec7f2e4f9","series":0,"name":"checkReturn","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"index"},"type":"insertion","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:562","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"022f4d9f-23c6-11e6-865f-556d76d0c46a","series":0,"name":"checkReturn","transplant":{"toString":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.PREFIX))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.POSTFIX)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:129","type":"CtIfImpl","sourcecode":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} "},"variableMap":{"org.apache.commons.codec.net.RFC1522Codec.POSTFIX":"pattern","org.apache.commons.codec.net.RFC1522Codec.PREFIX":"pattern","text":"pattern"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.Rule.this.pattern","position":"org.apache.commons.codec.language.bm.Rule:666","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.this.java.lang.String"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[0,1,3,4],"tindex":"022f74b0-23c6-11e6-865f-839531652462","series":0,"name":"checkReturn","transplant":{"toString":"if (!ignoreCase) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"result"},"type":"insertion","transplantationPoint":{"toString":"return result","position":"org.apache.commons.codec.language.DoubleMetaphone:882","type":"CtReturnImpl","sourcecode":"return result"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"022f74b1-23c6-11e6-865f-616db6963e6a","series":0,"name":"checkReturn","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"buffer","ascii":"buffer"},"type":"insertion","transplantationPoint":{"toString":"return context.buffer","position":"org.apache.commons.codec.binary.BaseNCodec:258","type":"CtReturnImpl","sourcecode":"return context.byte[]"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"022f74b2-23c6-11e6-865f-2b7034d2e4e3","series":0,"name":"checkReturn","transplant":{"toString":"if (len == (org.apache.commons.codec.binary.BaseNCodec.EOF)) {\n    break;\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"index","len":"index"},"type":"insertion","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:576","type":"CtReturnImpl","sourcecode":"return index"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[0,1,2,53,3,4,5,8],"tindex":"022f74b3-23c6-11e6-865f-edcdc19cc869","series":0,"name":"checkReturn","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"index"},"type":"insertion","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:641","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"022f74b4-23c6-11e6-865f-d91684ea4970","series":0,"name":"checkReturn","transplant":{"toString":"if (isVowel(firstLetter)) {\n    return firstLetter + name;\n} else {\n    return name;\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:420","type":"CtIfImpl","sourcecode":"if (isVowel(firstLetter)) {\n    return firstLetter + name;\n} else {\n    return name;\n}"},"variableMap":{"name":"name","firstLetter":"name"},"type":"insertion","transplantationPoint":{"toString":"return name","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:167","type":"CtReturnImpl","sourcecode":"return name"},"status":0},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"022f9bc5-23c6-11e6-865f-1b5f39495899","series":0,"name":"checkReturn","transplant":{"toString":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} "},"variableMap":{"ph":"algorithm"},"type":"insertion","transplantationPoint":{"toString":"return algorithm","position":"org.apache.commons.codec.digest.HmacAlgorithms:91","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"status":0},{"exception":"java.lang.RuntimeException","failures":[33,34,35,36,37,54,55,38,39,40,41,42,56,43,44,45,46,47],"tindex":"022f9bc6-23c6-11e6-865f-7d5f28f5005a","series":0,"name":"checkReturn","transplant":{"toString":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"The finalRules argument must not be null\");\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:181","type":"CtIfImpl","sourcecode":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"The finalRules argument must not be null\");\n} "},"variableMap":{"finalRules":"lines"},"type":"insertion","transplantationPoint":{"toString":"return lines","position":"org.apache.commons.codec.language.bm.Rule:489","type":"CtReturnImpl","sourcecode":"return lines"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[0,1,6,2,3,4,5,8],"tindex":"022f9bc7-23c6-11e6-865f-dba0bb3d88d3","series":0,"name":"checkReturn","transplant":{"toString":"if (u == 0) {\n    y++;\n    u = 128;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"index","y":"index"},"type":"insertion","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:576","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"org.apache.commons.codec.DecoderException","failures":[],"tindex":"022f9bc8-23c6-11e6-865f-f1e33192df8a","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:117","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[0,1,6,3,4,5,7,8],"tindex":"022f9bc9-23c6-11e6-865f-9143784a9d36","series":0,"name":"checkReturn","transplant":{"toString":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} ","position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"index"},"type":"insertion","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:402","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"022f9bca-23c6-11e6-865f-53f502d2ab06","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"l_raw"},"type":"insertion","transplantationPoint":{"toString":"return l_raw","position":"org.apache.commons.codec.binary.BinaryCodec:215","type":"CtReturnImpl","sourcecode":"return l_raw"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"022fc2db-23c6-11e6-865f-bb868ffd406b","series":0,"name":"checkReturn","transplant":{"toString":"if ((curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))) {\n    return new char[]{ prev };\n} ","position":"org.apache.commons.codec.language.Nysiis:163","type":"CtIfImpl","sourcecode":"if ((curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))) {\n    return new char[]{ prev };\n} "},"variableMap":{"prev":"java.lang.Character.MIN_VALUE","curr":"java.lang.Character.MIN_VALUE"},"type":"insertion","transplantationPoint":{"toString":"return java.lang.Character.MIN_VALUE","position":"org.apache.commons.codec.language.DoubleMetaphone:906","type":"CtReturnImpl","sourcecode":"return java.lang.Character.java.lang.Character.char"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[33,34,35,36,37,54,55,38,39,40,41,42,56,43,44,45,46,47],"tindex":"022fc2dc-23c6-11e6-865f-ed76ae8975fa","series":0,"name":"checkReturn","transplant":{"toString":"if (source == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtIfImpl","sourcecode":"if (source == null) {\n    return null;\n} "},"variableMap":{"source":"name"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.RuleType.this.name","position":"org.apache.commons.codec.language.bm.RuleType:47","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.RuleType.this.java.lang.String"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[8,57,58],"tindex":"022fc2dd-23c6-11e6-865f-d582efe6f76c","series":0,"name":"checkReturn","transplant":{"toString":"if (i > name2Size) {\n    break;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"compareCode","name2Size":"compareCode"},"type":"insertion","transplantationPoint":{"toString":"return compareCode","position":"org.apache.commons.codec.StringEncoderComparator:88","type":"CtReturnImpl","sourcecode":"return compareCode"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"022fc2de-23c6-11e6-865f-4f61f35f07f1","series":0,"name":"checkReturn","transplant":{"toString":"if (len == (org.apache.commons.codec.binary.BaseNCodec.EOF)) {\n    break;\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"index","len":"index"},"type":"insertion","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:508","type":"CtReturnImpl","sourcecode":"return index"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"022fc2df-23c6-11e6-865f-d9fb58fbc56e","series":0,"name":"checkReturn","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"index","to":"index"},"type":"insertion","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:733","type":"CtReturnImpl","sourcecode":"return index"},"status":0},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"022fc2e0-23c6-11e6-865f-b39a7ee40aad","series":0,"name":"checkReturn","transplant":{"toString":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtIfImpl","sourcecode":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} "},"variableMap":{"charset":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:128","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":0},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"022fc2e1-23c6-11e6-865f-8beb6306bec1","series":0,"name":"checkReturn","transplant":{"toString":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE;\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"c","minRating":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"c"},"type":"insertion","transplantationPoint":{"toString":"return c","position":"org.apache.commons.codec.language.bm.Rule:94","type":"CtReturnImpl","sourcecode":"return c"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"022fe9f2-23c6-11e6-865f-cb0a7d0326dd","series":0,"name":"checkReturn","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"index","to":"index"},"type":"insertion","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:402","type":"CtReturnImpl","sourcecode":"return index"},"status":0},{"exception":"java.lang.RuntimeException","failures":[59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"tindex":"022fe9f3-23c6-11e6-865f-5383df50fb7b","series":0,"name":"checkReturn","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"maxCodeLen"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Metaphone.this.maxCodeLen","position":"org.apache.commons.codec.language.Metaphone:422","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Metaphone.this.int"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[89,90,91,92,93,94,95,96,97,98,99],"tindex":"022fe9f4-23c6-11e6-865f-591a5d347922","series":0,"name":"checkReturn","transplant":{"toString":"if (!ignoreCase) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"strict"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.this.strict","position":"org.apache.commons.codec.language.Nysiis:237","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.this.boolean"},"status":-1},{"exception":"org.apache.commons.codec.DecoderException","failures":[],"tindex":"022fe9f5-23c6-11e6-865f-a18b366efd8e","series":0,"name":"checkReturn","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","ascii":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:117","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":0},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"022fe9f6-23c6-11e6-865f-35a6f0ed0f89","series":0,"name":"checkReturn","transplant":{"toString":"if (salt == null) {\n    saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern p = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher m = p.matcher(salt);\n    if ((m == null) || (!(m.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n    } \n    saltString = m.group(1);\n}","position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher java.util.regex.Matcher = p.matcher(salt);\n    if ((m == null) || (!(m.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n    } \n    saltString = m.group(1);\n}"},"variableMap":{"saltString":"org.apache.commons.codec.language.Caverphone1.SIX_1","salt":"org.apache.commons.codec.language.Caverphone1.SIX_1","prefix":"org.apache.commons.codec.language.Caverphone1.SIX_1"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Caverphone1.SIX_1","position":"org.apache.commons.codec.language.Caverphone1:48","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"022fe9f7-23c6-11e6-865f-e57aee9ab259","series":0,"name":"checkReturn","transplant":{"toString":"if (arrayOctet == null) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (arrayOctet == null) {\n    return false;\n} "},"variableMap":{"arrayOctet":"buffer"},"type":"insertion","transplantationPoint":{"toString":"return context.buffer","position":"org.apache.commons.codec.binary.BaseNCodec:258","type":"CtReturnImpl","sourcecode":"return context.byte[]"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"02301108-23c6-11e6-865f-45129c30e670","series":0,"name":"checkReturn","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"result","raw":"result"},"type":"insertion","transplantationPoint":{"toString":"return result","position":"org.apache.commons.codec.binary.BaseNCodec:414","type":"CtReturnImpl","sourcecode":"return result"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[100,101,102,103],"tindex":"02301109-23c6-11e6-865f-35aeefa6e246","series":0,"name":"checkReturn","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"el"},"type":"insertion","transplantationPoint":{"toString":"return el","position":"org.apache.commons.codec.digest.UnixCrypt:335","type":"CtReturnImpl","sourcecode":"return el"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"0230110a-23c6-11e6-865f-758674d6017d","series":0,"name":"checkReturn","transplant":{"toString":"if (str.endsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)) {\n    str = str.substring(0, ((str.length()) - 1));\n} ","position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"variableMap":{"str":"str","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"str"},"type":"insertion","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.SoundexUtils:43","type":"CtReturnImpl","sourcecode":"return str"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[29,30,104,105,106,31,107,108,32],"tindex":"0230110b-23c6-11e6-865f-258940efd4de","series":0,"name":"checkReturn","transplant":{"toString":"if ((line.length()) == 0) {\n    continue;\n} ","position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"variableMap":{"line":"charset"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.net.URLCodec.this.charset","position":"org.apache.commons.codec.net.URLCodec:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.this.java.lang.String"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"0230110c-23c6-11e6-865f-b17b2ca13d06","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[0,1,3,4,5],"tindex":"0230110d-23c6-11e6-865f-5d9538076366","series":0,"name":"checkReturn","transplant":{"toString":"if (b == ' ') {\n    b = '+';\n} ","position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"variableMap":{"b":"index"},"type":"insertion","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:752","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[109,110],"tindex":"0230381e-23c6-11e6-865f-0b6afdefe1b3","series":0,"name":"checkReturn","transplant":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"l_ascii"},"type":"insertion","transplantationPoint":{"toString":"return l_ascii","position":"org.apache.commons.codec.binary.BinaryCodec:257","type":"CtReturnImpl","sourcecode":"return l_ascii"},"status":-1},{"exception":"java.io.IOException","failures":[],"tindex":"0230381f-23c6-11e6-865f-391aa3d67074","series":0,"name":"checkReturn","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"org.apache.commons.codec.binary.BaseNCodec.EOF"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BaseNCodec.EOF","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:105","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"02303820-23c6-11e6-865f-e1e7d7a84c28","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"buffer"},"type":"insertion","transplantationPoint":{"toString":"return context.buffer","position":"org.apache.commons.codec.binary.BaseNCodec:258","type":"CtReturnImpl","sourcecode":"return context.byte[]"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"02303821-23c6-11e6-865f-8b4d40336ba2","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"l_ascii"},"type":"insertion","transplantationPoint":{"toString":"return l_ascii","position":"org.apache.commons.codec.binary.BinaryCodec:257","type":"CtReturnImpl","sourcecode":"return l_ascii"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"02303822-23c6-11e6-865f-03b157e093ad","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"binaryData"},"type":"insertion","transplantationPoint":{"toString":"return binaryData","position":"org.apache.commons.codec.binary.Base64:663","type":"CtReturnImpl","sourcecode":"return binaryData"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"02303823-23c6-11e6-865f-738f52f46f57","series":0,"name":"checkReturn","transplant":{"toString":"if (len == (org.apache.commons.codec.binary.BaseNCodec.EOF)) {\n    break;\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE","len":"org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE","position":"org.apache.commons.codec.binary.BaseNCodec:241","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int"},"status":0},{"exception":"java.lang.RuntimeException","failures":[89,90,91,92,93,94,95,96,97,98,99],"tindex":"02303824-23c6-11e6-865f-3d8e8aab9404","series":0,"name":"checkReturn","transplant":{"toString":"if (!ignoreCase) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"strict"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.this.strict","position":"org.apache.commons.codec.language.Nysiis:237","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.this.boolean"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205],"tindex":"02303825-23c6-11e6-865f-7d59e1cb1fdc","series":0,"name":"checkReturn","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE","position":"org.apache.commons.codec.binary.BaseNCodec:241","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[0,1,2,53,3,4,5,8],"tindex":"02305f36-23c6-11e6-865f-6f49c3ac039a","series":0,"name":"checkReturn","transplant":{"toString":"if (b == ' ') {\n    b = '+';\n} ","position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"variableMap":{"b":"index"},"type":"insertion","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:641","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[59,60,61,65,73,75,85],"tindex":"02305f37-23c6-11e6-865f-3572918a5cff","series":0,"name":"checkReturn","transplant":{"toString":"if (!ignoreCase) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"matches"},"type":"insertion","transplantationPoint":{"toString":"return matches","position":"org.apache.commons.codec.language.Metaphone:357","type":"CtReturnImpl","sourcecode":"return matches"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"02305f38-23c6-11e6-865f-29bcc4ee6028","series":0,"name":"checkReturn","transplant":{"toString":"if (isVowel(firstLetter)) {\n    return firstLetter + name;\n} else {\n    return name;\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:420","type":"CtIfImpl","sourcecode":"if (isVowel(firstLetter)) {\n    return firstLetter + name;\n} else {\n    return name;\n}"},"variableMap":{"name":"str","firstLetter":"str"},"type":"insertion","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.RefinedSoundex:181","type":"CtReturnImpl","sourcecode":"return str"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[157,158],"tindex":"02305f39-23c6-11e6-865f-a100585559fc","series":0,"name":"checkReturn","transplant":{"toString":"if (bytes == null) {\n    return null;\n} ","position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"variableMap":{"bytes":"bigBytes"},"type":"insertion","transplantationPoint":{"toString":"return bigBytes","position":"org.apache.commons.codec.binary.Base64:755","type":"CtReturnImpl","sourcecode":"return bigBytes"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[0,1,3,4,5],"tindex":"02305f3a-23c6-11e6-865f-07c2f540ce84","series":0,"name":"checkReturn","transplant":{"toString":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} ","position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"index"},"type":"insertion","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:508","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"org.apache.commons.codec.DecoderException","failures":[16,18,19,20,23,24,25,27,28,32],"tindex":"02305f3b-23c6-11e6-865f-db172aa058bf","series":0,"name":"checkReturn","transplant":{"toString":"if (c != 0) {\n    return c;\n} ","position":"org.apache.commons.codec.language.bm.Rule:93","type":"CtIfImpl","sourcecode":"if (c != 0) {\n    return c;\n} "},"variableMap":{"c":"i"},"type":"insertion","transplantationPoint":{"toString":"return i","position":"org.apache.commons.codec.net.Utils:47","type":"CtReturnImpl","sourcecode":"return i"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"02305f3c-23c6-11e6-865f-bd89a20b0093","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"buffer"},"type":"insertion","transplantationPoint":{"toString":"return context.buffer","position":"org.apache.commons.codec.binary.BaseNCodec:258","type":"CtReturnImpl","sourcecode":"return context.byte[]"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[61,65,66,74,76,78,86],"tindex":"0230864d-23c6-11e6-865f-e5a6957011fb","series":0,"name":"checkReturn","transplant":{"toString":"if (!ignoreCase) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"matches"},"type":"insertion","transplantationPoint":{"toString":"return matches","position":"org.apache.commons.codec.language.Metaphone:367","type":"CtReturnImpl","sourcecode":"return matches"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"0230864e-23c6-11e6-865f-8f4fd7201342","series":0,"name":"checkReturn","transplant":{"toString":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtIfImpl","sourcecode":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n} "},"variableMap":{"name":"algorithm","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"algorithm","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"algorithm"},"type":"insertion","transplantationPoint":{"toString":"return algorithm","position":"org.apache.commons.codec.digest.HmacAlgorithms:91","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[206,207],"tindex":"0230864f-23c6-11e6-865f-a7fe9eaf950e","series":0,"name":"checkReturn","transplant":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.Nysiis:248","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"variableMap":{"str":"str"},"type":"insertion","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.RefinedSoundex:181","type":"CtReturnImpl","sourcecode":"return str"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[0,1,6,2,3,4,5],"tindex":"02308650-23c6-11e6-865f-45cd8f2f162c","series":0,"name":"checkReturn","transplant":{"toString":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} ","position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"index"},"type":"insertion","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:576","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"02308651-23c6-11e6-865f-21c7836cd063","series":0,"name":"checkReturn","transplant":{"toString":"if (c1 == c2) {\n    continue;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:62","type":"CtIfImpl","sourcecode":"if (c1 == c2) {\n    continue;\n} "},"variableMap":{"c1":"mappedChar","c2":"mappedChar"},"type":"insertion","transplantationPoint":{"toString":"return mappedChar","position":"org.apache.commons.codec.language.Soundex:197","type":"CtReturnImpl","sourcecode":"return mappedChar"},"status":0},{"exception":"java.lang.RuntimeException","failures":[111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205],"tindex":"02308652-23c6-11e6-865f-9f507f0f7f58","series":0,"name":"checkReturn","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"len"},"type":"insertion","transplantationPoint":{"toString":"return len","position":"org.apache.commons.codec.binary.BaseNCodec:299","type":"CtReturnImpl","sourcecode":"return len"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"02308653-23c6-11e6-865f-7187a4fd2aa4","series":0,"name":"checkReturn","transplant":{"toString":"if ((input.length()) == 0) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((input.length()) == 0) {\n    return null;\n} "},"variableMap":{"input":"str"},"type":"insertion","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.Soundex:264","type":"CtReturnImpl","sourcecode":"return str"},"status":0},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"02308654-23c6-11e6-865f-755b8c8f53ea","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"buf"},"type":"insertion","transplantationPoint":{"toString":"return buf","position":"org.apache.commons.codec.binary.BaseNCodec:434","type":"CtReturnImpl","sourcecode":"return buf"},"status":0},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"0230ad65-23c6-11e6-865f-113640b44374","series":0,"name":"checkReturn","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"bigBytes","raw":"bigBytes"},"type":"insertion","transplantationPoint":{"toString":"return bigBytes","position":"org.apache.commons.codec.binary.Base64:755","type":"CtReturnImpl","sourcecode":"return bigBytes"},"status":-2},{"exception":"org.apache.commons.codec.DecoderException","failures":[49],"tindex":"0230ad66-23c6-11e6-865f-cb5854f7960d","series":0,"name":"checkReturn","transplant":{"toString":"if (bytes == null) {\n    return null;\n} ","position":"org.apache.commons.codec.binary.StringUtils:280","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"variableMap":{"bytes":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:117","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"0230ad67-23c6-11e6-865f-d1656035172b","series":0,"name":"checkReturn","transplant":{"toString":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} "},"variableMap":{"ph":"pattern"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.Rule.this.pattern","position":"org.apache.commons.codec.language.bm.Rule:666","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.this.java.lang.String"},"status":0},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"0230ad68-23c6-11e6-865f-db2e62f132df","series":0,"name":"checkReturn","transplant":{"toString":"if ((curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))) {\n    return new char[]{ prev };\n} ","position":"org.apache.commons.codec.language.Nysiis:158","type":"CtIfImpl","sourcecode":"if ((curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))) {\n    return new char[]{ prev };\n} "},"variableMap":{"next":"ch","prev":"ch","curr":"ch"},"type":"insertion","transplantationPoint":{"toString":"return ch","position":"org.apache.commons.codec.language.ColognePhonetic:276","type":"CtReturnImpl","sourcecode":"return ch"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"0230ad69-23c6-11e6-865f-e150781ce988","series":0,"name":"checkReturn","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","raw":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:154","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":0},{"exception":"org.apache.commons.codec.DecoderException","failures":[208,209,210,211,147,152,178],"tindex":"0230ad6a-23c6-11e6-865f-8b03c5ed45e5","series":0,"name":"checkReturn","transplant":{"toString":"if (arrayOctet == null) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (arrayOctet == null) {\n    return false;\n} "},"variableMap":{"arrayOctet":"out"},"type":"insertion","transplantationPoint":{"toString":"return out","position":"org.apache.commons.codec.binary.Hex:96","type":"CtReturnImpl","sourcecode":"return out"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"0230ad6b-23c6-11e6-865f-7b4f942ce817","series":0,"name":"checkReturn","transplant":{"toString":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.RULES)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.RULES)));\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:311","type":"CtIfImpl","sourcecode":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)));\n} "},"variableMap":{"org.apache.commons.codec.language.bm.RuleType.RULES":"ruleType","ruleType":"ruleType"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.ruleType","position":"org.apache.commons.codec.language.bm.PhoneticEngine:508","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249],"tindex":"0230ad6c-23c6-11e6-865f-b9f13a628b02","series":0,"name":"checkReturn","transplant":{"toString":"if ((line.length()) == 0) {\n    continue;\n} ","position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"variableMap":{"line":"name"},"type":"insertion","transplantationPoint":{"toString":"return name","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:167","type":"CtReturnImpl","sourcecode":"return name"},"status":-1},{"exception":"org.apache.commons.codec.DecoderException","failures":[49],"tindex":"0230d47d-23c6-11e6-865f-d15a886a6df9","series":0,"name":"checkReturn","transplant":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:117","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"0230d47e-23c6-11e6-865f-05b39ca5cb54","series":0,"name":"checkReturn","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"index","to":"index"},"type":"insertion","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:562","type":"CtReturnImpl","sourcecode":"return index"},"status":0},{"exception":"java.lang.RuntimeException","failures":[24,250,25,251,27],"tindex":"0230d47f-23c6-11e6-865f-a9136763a760","series":0,"name":"checkReturn","transplant":{"toString":"if (arrayOctet == null) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (arrayOctet == null) {\n    return false;\n} "},"variableMap":{"arrayOctet":"data"},"type":"insertion","transplantationPoint":{"toString":"return data","position":"org.apache.commons.codec.net.QCodec:165","type":"CtReturnImpl","sourcecode":"return data"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"0230d480-23c6-11e6-865f-93b4b4b9b9c2","series":0,"name":"checkReturn","transplant":{"toString":"if (element == key) {\n    return true;\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:301","type":"CtIfImpl","sourcecode":"if (element == key) {\n    return true;\n} "},"variableMap":{"key":"ch","element":"ch"},"type":"insertion","transplantationPoint":{"toString":"return ch","position":"org.apache.commons.codec.language.ColognePhonetic:276","type":"CtReturnImpl","sourcecode":"return ch"},"status":0},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"0230d481-23c6-11e6-865f-c16cf259a79e","series":0,"name":"checkReturn","transplant":{"toString":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtIfImpl","sourcecode":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n} "},"variableMap":{"name":"name","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"name","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"name"},"type":"insertion","transplantationPoint":{"toString":"return name","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:167","type":"CtReturnImpl","sourcecode":"return name"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[252,253],"tindex":"0230d482-23c6-11e6-865f-478acce11177","series":0,"name":"checkReturn","transplant":{"toString":"if (accentedWord == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtIfImpl","sourcecode":"if (accentedWord == null) {\n    return null;\n} "},"variableMap":{"accentedWord":"str"},"type":"insertion","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.Soundex:264","type":"CtReturnImpl","sourcecode":"return str"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[33,34,254,35,36,37,38,39,255,40,41,256,42],"tindex":"0230d483-23c6-11e6-865f-09df2ebc0da3","series":0,"name":"checkReturn","transplant":{"toString":"if (!ignoreCase) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"concat"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.concat","position":"org.apache.commons.codec.language.bm.PhoneticEngine:517","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.boolean"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[29,30,104,105,106,31,107,108,32],"tindex":"0230d484-23c6-11e6-865f-532076e68d96","series":0,"name":"checkReturn","transplant":{"toString":"if ((line.length()) == 0) {\n    continue;\n} ","position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"variableMap":{"line":"charset"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.net.URLCodec.this.charset","position":"org.apache.commons.codec.net.URLCodec:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.this.java.lang.String"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[0,1,3,4,5],"tindex":"0230d485-23c6-11e6-865f-29f19cebc6eb","series":0,"name":"checkReturn","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"index"},"type":"insertion","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:349","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"0230fb96-23c6-11e6-865f-455f6952310e","series":0,"name":"checkReturn","transplant":{"toString":"if (!(getEncoding().equalsIgnoreCase(encoding))) {\n    throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"));\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:148","type":"CtIfImpl","sourcecode":"if (!(getEncoding().equalsIgnoreCase(encoding))) {\n    throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"));\n} "},"variableMap":{"encoding":"str"},"type":"insertion","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.SoundexUtils:43","type":"CtReturnImpl","sourcecode":"return str"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[100,101,102,103],"tindex":"0230fb97-23c6-11e6-865f-1d1e90889e2e","series":0,"name":"checkReturn","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"el"},"type":"insertion","transplantationPoint":{"toString":"return el","position":"org.apache.commons.codec.digest.UnixCrypt:335","type":"CtReturnImpl","sourcecode":"return el"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[33,34,35,36,37,38,39,40,41,42,44,45,46,47],"tindex":"0230fb98-23c6-11e6-865f-5d6b3006d6c0","series":0,"name":"checkReturn","transplant":{"toString":"if (b < 0) {\n    b = 256 + b;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"c"},"type":"insertion","transplantationPoint":{"toString":"return c","position":"org.apache.commons.codec.language.bm.Rule:94","type":"CtReturnImpl","sourcecode":"return c"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[0,1,3,4,5],"tindex":"0230fb99-23c6-11e6-865f-fb429a140d0d","series":0,"name":"checkReturn","transplant":{"toString":"if (u == 0) {\n    y++;\n    u = 128;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"index","y":"index"},"type":"insertion","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:773","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[257,258,259,260,261,262,263,264,265,266,267],"tindex":"0230fb9a-23c6-11e6-865f-a7174947aadf","series":0,"name":"checkReturn","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"length"},"type":"insertion","transplantationPoint":{"toString":"return length","position":"org.apache.commons.codec.language.ColognePhonetic:219","type":"CtReturnImpl","sourcecode":"return int"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[115,116,117,118,119,120,121,122,123,124,133,134,135,145,178],"tindex":"0230fb9b-23c6-11e6-865f-2d4bff532b76","series":0,"name":"checkReturn","transplant":{"toString":"if (arrayOctet == null) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (arrayOctet == null) {\n    return false;\n} "},"variableMap":{"arrayOctet":"pArray"},"type":"insertion","transplantationPoint":{"toString":"return pArray","position":"org.apache.commons.codec.binary.BaseNCodec:427","type":"CtReturnImpl","sourcecode":"return pArray"},"status":-1},{"exception":"java.io.IOException","failures":[],"tindex":"0230fb9c-23c6-11e6-865f-ff445984ffef","series":0,"name":"checkReturn","transplant":{"toString":"if (len == (org.apache.commons.codec.binary.BaseNCodec.EOF)) {\n    break;\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"org.apache.commons.codec.binary.BaseNCodec.EOF","len":"org.apache.commons.codec.binary.BaseNCodec.EOF"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BaseNCodec.EOF","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:105","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"0230fb9d-23c6-11e6-865f-69d8c260c2ba","series":0,"name":"checkReturn","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"resizedBytes"},"type":"insertion","transplantationPoint":{"toString":"return resizedBytes","position":"org.apache.commons.codec.binary.Base64:769","type":"CtReturnImpl","sourcecode":"return resizedBytes"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[33,34,35,36,37,38,39,40,41,42,44,45,46,47],"tindex":"0230fb9e-23c6-11e6-865f-b92fe0075ef0","series":0,"name":"checkReturn","transplant":{"toString":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} ","position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"i"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.i","position":"org.apache.commons.codec.language.bm.PhoneticEngine:192","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[48,49,50],"tindex":"023122af-23c6-11e6-865f-5f75966ebe63","series":0,"name":"checkReturn","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"l_raw","ascii":"l_raw"},"type":"insertion","transplantationPoint":{"toString":"return l_raw","position":"org.apache.commons.codec.binary.BinaryCodec:215","type":"CtReturnImpl","sourcecode":"return l_raw"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"tindex":"023122b0-23c6-11e6-865f-a35c48074207","series":0,"name":"checkReturn","transplant":{"toString":"if (b < 0) {\n    b += 256;\n} ","position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"maxCodeLen"},"type":"insertion","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Metaphone.this.maxCodeLen","position":"org.apache.commons.codec.language.Metaphone:422","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Metaphone.this.int"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"023122b1-23c6-11e6-865f-cfb3ba20a9c1","series":0,"name":"checkReturn","transplant":{"toString":"if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n    return 0;\n} ","position":"org.apache.commons.codec.language.Soundex:192","type":"CtIfImpl","sourcecode":"if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n    return 0;\n} "},"variableMap":{"mappedChar":"mappedChar","preHWChar":"mappedChar","firstCode":"mappedChar"},"type":"insertion","transplantationPoint":{"toString":"return mappedChar","position":"org.apache.commons.codec.language.Soundex:197","type":"CtReturnImpl","sourcecode":"return mappedChar"},"status":-2},{"exception":"java.lang.RuntimeException","failures":[0,1,3,4,5],"tindex":"023122b2-23c6-11e6-865f-932a7df3cd16","series":0,"name":"checkReturn","transplant":{"toString":"if (u == 0) {\n    y++;\n    u = 128;\n} ","position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"index","y":"index"},"type":"insertion","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:773","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"exception":"java.lang.RuntimeException","failures":[],"tindex":"023122b3-23c6-11e6-865f-95a0578335f2","series":0,"name":"checkReturn","transplant":{"toString":"if ((curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))) {\n    return new char[]{ prev };\n} ","position":"org.apache.commons.codec.language.Nysiis:158","type":"CtIfImpl","sourcecode":"if ((curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))) {\n    return new char[]{ prev };\n} "},"variableMap":{"next":"java.lang.Character.MIN_VALUE","prev":"java.lang.Character.MIN_VALUE","curr":"java.lang.Character.MIN_VALUE"},"type":"insertion","transplantationPoint":{"toString":"return java.lang.Character.MIN_VALUE","position":"org.apache.commons.codec.language.DoubleMetaphone:906","type":"CtReturnImpl","sourcecode":"return java.lang.Character.java.lang.Character.char"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionRemove":52,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListGetByIndex":39,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastEntrySet":57,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll4":0,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetClearChangesMap":70,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetRemoveAll":78,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetClearChangesMap":5,"org.apache.commons.collections4.map.CompositeMapTest.testMapClear":82,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemoveChangesMap":64,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemoveAll":72,"org.apache.commons.collections4.map.CompositeMapTest.testMapIsEmpty":87,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionRemove":30,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionToArray2":34,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapClear":2,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testKeySetClearChangesMap":4,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove1":67,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove3":69,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove2":68,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListEquals":13,"org.apache.commons.collections4.map.CompositeMapTest.testMapPutNullValue":75,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListSetByIndex":42,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionAdd":44,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListHashCode":38,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListRemoveByIndex":19,"org.apache.commons.collections4.map.CompositeMapTest.testMakeMap":79,"org.apache.commons.collections4.map.CompositeMapTest.testFullMapCompatibility":83,"org.apache.commons.collections4.map.LRUMapTest.testInternalState_Buckets":7,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionContains":25,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionIteratorRemove":29,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListLastIndexOf":41,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetRemoveChangesMap":76,"org.apache.commons.collections4.map.CompositeMapTest.testMapPutNullKey":81,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListIndexOf":16,"org.apache.commons.collections4.map.CompositeMapTest.testValuesRemoveAll":88,"org.apache.commons.collections4.map.CompositeMapTest.testMapRemove":93,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetIteratorRemoveChangesMap":73,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListGetByIndex":15,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListSetByIndex":18,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListRemoveByIndex":43,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionToArray2":56,"org.apache.commons.collections4.map.CompositeMapTest.testMapContainsValue":94,"org.apache.commons.collections4.map.CompositeMapTest.testMapPutAll":89,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionContainsAll":48,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testValuesClearChangesMap":3,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListEquals":37,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListHashCode":14,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains3":62,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionContainsAll":26,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionRemoveAll":53,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListIndexOf":40,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionRetainAll":32,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionClear":46,"org.apache.commons.collections4.map.LRUMapTest.testSynchronizedRemoveFromEntrySet":8,"org.apache.commons.collections4.map.CompositeMapTest.testMapSize":80,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains1":60,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains2":61,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListAddByIndex":36,"org.apache.commons.collections4.map.CompositeMapTest.testMapToString":84,"org.apache.commons.collections4.map.CompositeMapTest.testValuesClearChangesMap":96,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastKeySet":58,"org.apache.commons.collections4.map.LRUMapTest.testLRU":11,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionClear":24,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionIsEmpty":27,"org.apache.commons.collections4.map.CompositeMapTest.testMapHashCode":66,"org.apache.commons.collections4.map.CompositeMapTest.testMapContainsKey":77,"org.apache.commons.collections4.map.CompositeMapTest.testMapGet":91,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListIteratorAdd":20,"org.apache.commons.collections4.map.CompositeMapTest.testMapEquals":85,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionContains":47,"org.apache.commons.collections4.list.CursorableLinkedListTest.testToArray":35,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionRetainAll":54,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetClearChangesMap":74,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionAdd":22,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRetainAll":86,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetIteratorRemoveChangesMap":90,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiClear":1,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionRemoveAll":31,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionToArray":55,"org.apache.commons.collections4.map.LRUMapTest.testSynchronizedRemoveFromValues":10,"org.apache.commons.collections4.map.CompositeMapTest.testValuesIteratorRemoveChangesMap":63,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionIterator":28,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastValues":59,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListAddByIndex":12,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionIteratorRemove":51,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionIterator":50,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetRetainAll":95,"org.apache.commons.collections4.map.MultiKeyMapTest.testLRUMultiKeyMap":6,"org.apache.commons.collections4.map.LRUMapTest.testSynchronizedRemoveFromKeySet":9,"org.apache.commons.collections4.map.CompositeMapTest.testMapPut":92,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListLastIndexOf":17,"org.apache.commons.collections4.map.CompositeMapTest.testValuesRemoveChangesMap":71,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionToArray":33,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListIteratorSet":21,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionAddAll":45,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionAddAll":23,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionIsEmpty":49,"org.apache.commons.collections4.map.CompositeMapTest.testValuesRetainAll":65},"transformations":[{"failures":[0],"tindex":"06be8cd3-416d-11e5-9943-196ecca051c7","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.map.MultiKeyMap:721","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.MapIterator<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.remove()"},"variableMap":{"it":"it"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.MultiKeyMap:795","type":"CtWhileImpl","sourcecode":"while (org.apache.commons.collections4.MapIterator<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.hasNext()) {\n    final org.apache.commons.collections4.keyvalue.MultiKey<? extends K> org.apache.commons.collections4.keyvalue.MultiKey<? extends K> = org.apache.commons.collections4.MapIterator<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.next();\n    if ((((((org.apache.commons.collections4.keyvalue.MultiKey<? extends K>.size()) >= 4) && (java.lang.Object == null ? (org.apache.commons.collections4.keyvalue.MultiKey<? extends K>.getKey(0)) == null : java.lang.Object.equals(org.apache.commons.collections4.keyvalue.MultiKey<? extends K>.getKey(0)))) && (java.lang.Object == null ? (org.apache.commons.collections4.keyvalue.MultiKey<? extends K>.getKey(1)) == null : java.lang.Object.equals(org.apache.commons.collections4.keyvalue.MultiKey<? extends K>.getKey(1)))) && (java.lang.Object == null ? (org.apache.commons.collections4.keyvalue.MultiKey<? extends K>.getKey(2)) == null : java.lang.Object.equals(org.apache.commons.collections4.keyvalue.MultiKey<? extends K>.getKey(2)))) && (java.lang.Object == null ? (org.apache.commons.collections4.keyvalue.MultiKey<? extends K>.getKey(3)) == null : java.lang.Object.equals(org.apache.commons.collections4.keyvalue.MultiKey<? extends K>.getKey(3)))) {\n        org.apache.commons.collections4.MapIterator<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.remove();\n        boolean = true;\n    } \n}"},"status":-1},{"failures":[],"tindex":"06beb3e4-416d-11e5-9943-c7975c78013b","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.collection.CompositeCollection:391","type":"CtReturnImpl","sourcecode":"return new java.util.ArrayList<E>(this)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.CollectionUtils:341","type":"CtReturnImpl","sourcecode":"return java.util.ArrayList<O>"},"status":-2},{"failures":[],"tindex":"06beb3e5-416d-11e5-9943-d9f96253a453","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.ListOrderedMap:292","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.collections4.map.ListOrderedMap.KeySetView<K>(this)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.SingletonMap:308","type":"CtReturnImpl","sourcecode":"return java.util.Collections.singleton(java.util.Map.Entry<K, V>)"},"status":-2},{"failures":[],"tindex":"06bedaf6-416d-11e5-9943-a5c50733bd2a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:598","type":"CtLocalVariableImpl","sourcecode":"org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:285","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.lookupValue(java.lang.Object)"},"status":-2},{"failures":[],"tindex":"06bedaf7-416d-11e5-9943-b58dddd0e073","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.TransformedMap:106","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.map.TransformedMap<K, V>.decorated()"},"variableMap":{"decorated":"map"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.splitmap.TransformedSplitMap:146","type":"CtAssignmentImpl","sourcecode":"java.util.Map<K, V> = ((java.util.Map<K, V>)(java.io.ObjectInputStream.readObject()))"},"status":-2},{"failures":[],"tindex":"06bedaf8-416d-11e5-9943-7bebc154220a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.list.TreeList:724","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.FilterListIterator:150","type":"CtUnaryOperatorImpl","sourcecode":"(int)--"},"status":-2},{"failures":[],"tindex":"06bedaf9-416d-11e5-9943-d5262527540d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.StaticBucketMap:321","type":"CtLocalVariableImpl","sourcecode":"org.apache.commons.collections4.map.StaticBucketMap.Node<K, V> org.apache.commons.collections4.map.StaticBucketMap.Node<K, V> = null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.StaticBucketMap:275","type":"CtLocalVariableImpl","sourcecode":"org.apache.commons.collections4.map.StaticBucketMap.Node<K, V> org.apache.commons.collections4.map.StaticBucketMap.Node<K, V> = org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>[][int]"},"status":-2},{"failures":[1,2,3,4,5],"tindex":"06bedafa-416d-11e5-9943-2f9ed7cb6e6c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.comparators.FixedOrderComparator:261","type":"CtAssignmentImpl","sourcecode":"int = (int * 37) + (int)"},"variableMap":{"total":"nodeCount","counter":"nodeCount"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:265","type":"CtAssignmentImpl","sourcecode":"int = 0"},"status":-1},{"failures":[],"tindex":"06bedafb-416d-11e5-9943-1b4f7b30dacf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.AbstractLinkedMap:399","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.iterators.EmptyOrderedIterator.<java.util.Map.Entry<K, V>>emptyOrderedIterator()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractReferenceMap:492","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceKeySetIterator<K>(this)"},"status":-2},{"failures":[6,7,8,9,10,11],"tindex":"06bedafc-416d-11e5-9943-6d28da7a7df0","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.map.LRUMap:180","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.map.LRUMap<K, V>.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)"},"variableMap":{"entry":"header","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.LRUMap:301","type":"CtTryImpl","sourcecode":"try {\n    final int int = org.apache.commons.collections4.map.AbstractHashedMap<K, V>.hashIndex(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.int, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[].int);\n    final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[] org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[] = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[];\n    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[][int];\n    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = null;\n    while ((org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> != org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>) && (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> != null)) {\n        org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>;\n        org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>;\n    }\n    if (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> == null) {\n        throw new java.lang.IllegalStateException((((((((((((((\"Entry.next=null, data[removeIndex]=\" + (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[][int])) + \" previous=\") + org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>) + \" key=\") + K) + \" value=\") + V) + \" size=\") + (int)) + \" maxSize=\") + (int)) + \" Please check that your keys are immutable, and that you have used synchronization properly.\") + \" If so, then please report this to dev@commons.apache.org as a bug.\"));\n    } \n    (int)++;\n    org.apache.commons.collections4.map.AbstractLinkedMap<K, V>.removeEntry(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>, int, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>);\n    org.apache.commons.collections4.map.AbstractHashedMap<K, V>.reuseEntry(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>, int, int, K, V);\n    org.apache.commons.collections4.map.AbstractLinkedMap<K, V>.addEntry(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>, int);\n} catch (final java.lang.NullPointerException ex) {\n    throw new java.lang.IllegalStateException((((((((((((((\"NPE, entry=\" + org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>) + \" entryIsHeader=\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> == (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>))) + \" key=\") + K) + \" value=\") + V) + \" size=\") + (int)) + \" maxSize=\") + (int)) + \" Please check that your keys are immutable, and that you have used synchronization properly.\") + \" If so, then please report this to dev@commons.apache.org as a bug.\"));\n}"},"status":-1},{"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"tindex":"06bf020d-416d-11e5-9943-e70697747dac","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.ListUtils:686","type":"CtIfImpl","sourcecode":"if (int >= int) {\n    throw new java.lang.IndexOutOfBoundsException((((\"Index \" + int) + \" must be less than size \") + int));\n} "},"variableMap":{"index":"i","listSize":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:182","type":"CtForImpl","sourcecode":"for (org.apache.commons.collections4.list.AbstractLinkedList.Node<E> org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = org.apache.commons.collections4.list.AbstractLinkedList.Node<E>.org.apache.commons.collections4.list.AbstractLinkedList.Node<E> ; org.apache.commons.collections4.list.AbstractLinkedList.Node<E> != (org.apache.commons.collections4.list.AbstractLinkedList.Node<E>) ; org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = org.apache.commons.collections4.list.AbstractLinkedList.Node<E>.org.apache.commons.collections4.list.AbstractLinkedList.Node<E> , int++) {\n    T[][int] = ((T)(org.apache.commons.collections4.list.AbstractLinkedList.Node<E>.getValue()));\n}"},"status":-1},{"failures":[],"tindex":"06bf020e-416d-11e5-9943-8f3396a02c92","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:757","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.bidimap.TreeBidiMap.Node<?, ?>.setRed(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)"},"variableMap":{"node":"node","dataElement":"dataElement"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:768","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<?, ?> != null) {\n    org.apache.commons.collections4.bidimap.TreeBidiMap.Node<?, ?>.setBlack(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n} "},"status":-2},{"failures":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],"tindex":"06bf020f-416d-11e5-9943-556d7771f8ae","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.CompositeMap:431","type":"CtForImpl","sourcecode":"for (int int = (this.java.util.Map<K, V>[].int) - 1 ; int >= 0 ; --int) {\n    int += this.java.util.Map<K, V>[][int].size();\n}"},"status":-1},{"failures":[],"tindex":"06bf2920-416d-11e5-9943-f178a37c4826","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.Flat3Map:733","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.collections4.map.Flat3Map.EntrySet<K, V>(this)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.UnmodifiableMap:144","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.map.UnmodifiableEntrySet.unmodifiableEntrySet(java.util.Set<java.util.Map.Entry<K, V>>)"},"status":-2},{"failures":[],"tindex":"06bf2921-416d-11e5-9943-4fd358f042ec","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.LRUMap:247","type":"CtLocalVariableImpl","sourcecode":"org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>"},"variableMap":{"header":"entry","after":"entry"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractLinkedMap:299","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = ((org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>))"},"status":-2},{"failures":[],"tindex":"06bf2922-416d-11e5-9943-e15f8a23d268","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:200","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>(this , int , int)"},"variableMap":{"fromIndexInclusive":"totalSize","toIndexExclusive":"totalSize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.CollectionUtils:1603","type":"CtIfImpl","sourcecode":"if (boolean) {\n    return org.apache.commons.collections4.IteratorUtils.toList(java.util.Iterator<O>, int);\n} else {\n    final java.util.ArrayList<O> java.util.ArrayList<O> = new java.util.ArrayList<O>(int);\n    O O = null;\n    while (java.util.Iterator<O>.hasNext()) {\n        final O O = java.util.Iterator<O>.next();\n        if ((O == null) || (!(O.equals(O)))) {\n            java.util.ArrayList<O>.add(O);\n        } \n        O = O;\n    }\n    java.util.ArrayList<O>.trimToSize();\n    return java.util.ArrayList<O>;\n}"},"status":-2},{"failures":[],"tindex":"06bf2923-416d-11e5-9943-03747c290324","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.map.MultiKeyMap:203","type":"CtLocalVariableImpl","sourcecode":"org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.MultiKeyMap:556","type":"CtLocalVariableImpl","sourcecode":"org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = org.apache.commons.collections4.map.MultiKeyMap<K, V>.decorated().org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>[][org.apache.commons.collections4.map.MultiKeyMap<K, V>.decorated().hashIndex(int, org.apache.commons.collections4.map.MultiKeyMap<K, V>.decorated().org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>[].int)]"},"status":-2},{"failures":[],"tindex":"06bf2924-416d-11e5-9943-b9f7788297f2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.MultiKeyMap:636","type":"CtIfImpl","sourcecode":"if (((org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.int) == int) && org.apache.commons.collections4.map.MultiKeyMap<K, V>.(isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object))) {\n    final V V = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.getValue();\n    org.apache.commons.collections4.map.MultiKeyMap<K, V>.decorated().removeMapping(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>, int, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>);\n    return V;\n} "},"variableMap":{"key1":"key1","entry":"next","key2":"key2","key5":"key2","previous":"next","hashCode":"hashCode","key3":"key1","key4":"key2","this":"this","index":"hashCode"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.MultiKeyMap:138","type":"CtWhileImpl","sourcecode":"while (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> != null) {\n    if (((org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.int) == int) && org.apache.commons.collections4.map.MultiKeyMap<K, V>.(isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>, java.lang.Object, java.lang.Object))) {\n        return org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.getValue();\n    } \n    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>;\n}"},"status":-2},{"failures":[],"tindex":"06bf5035-416d-11e5-9943-6f4e98e2577f","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.keyvalue.AbstractMapEntry:70","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1349","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[],"tindex":"06bf5036-416d-11e5-9943-ffb7db4faff6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.CompositeMap:415","type":"CtIfImpl","sourcecode":"if (this.java.util.Map<K, V>[][int].containsKey(java.lang.Object)) {\n    return this.java.util.Map<K, V>[][int].remove(java.lang.Object);\n} "},"variableMap":{"composite":"key4","i":"hashCode","key":"key2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.MultiKeyMap:480","type":"CtWhileImpl","sourcecode":"while (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> != null) {\n    if (((org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.int) == int) && org.apache.commons.collections4.map.MultiKeyMap<K, V>.(isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object))) {\n        final V V = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.getValue();\n        org.apache.commons.collections4.map.MultiKeyMap<K, V>.decorated().removeMapping(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>, int, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>);\n        return V;\n    } \n    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>;\n    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>;\n}"},"status":-2}],"header":{"groupId":"org.apache.commons","transformationCount":20,"projectType":"maven","artifactId":"commons-collections4","generatorVersion":"1.0","version":"4.0"}}
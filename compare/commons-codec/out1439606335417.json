{"failureDictionary":{"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":20,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":41,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":28,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":24,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":38,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":3,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":15,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":36,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":13,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":42,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":27,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":30,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":4,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":43,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":8,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":11,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":35,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":10,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":23,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":29,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":0,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":22,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":39,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument":21,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":6,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":33,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":2,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":12,"org.apache.commons.codec.binary.Base64Test.testConstructors":25,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":44,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":37,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":1,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":5,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":7,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":34,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1":18,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":16,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":14,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":19,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":31,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":32,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":40,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":9,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":17,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":26},"transformations":[{"failures":[],"tindex":"c5e78377-42f6-11e5-9be5-8b6fca5afdb4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:882","type":"CtReturnImpl","sourcecode":"return boolean"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11],"tindex":"c5e7aa88-42f6-11e5-9be5-7d9c3d8e4916","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:514","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.int))]"},"status":-1},{"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24],"tindex":"c5e7aa89-42f6-11e5-9be5-1fc1ff9539dd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:94","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:114","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.org.apache.commons.codec.binary.StringUtils.getBytes(java.lang.String, org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-1},{"failures":[],"tindex":"c5e7aa8a-42f6-11e5-9be5-8f172b067498","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:212","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\")"},"status":0},{"failures":[],"tindex":"c5e7aa8b-42f6-11e5-9be5-5b78f9c84439","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:478","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[25],"tindex":"c5e7aa8c-42f6-11e5-9be5-4dd12677c489","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:132","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:281","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + java.lang.String) + \"]\"))"},"status":-1},{"failures":[],"tindex":"c5e7aa8d-42f6-11e5-9be5-2b39c1bbe586","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"ibitWorkArea","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"ibitWorkArea","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"pos","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"pos","minRating":"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"ibitWorkArea","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"modulus","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"modulus"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:438","type":"CtIfImpl","sourcecode":"if (byte == (byte)) {\n    org.apache.commons.codec.binary.BaseNCodec.Context.boolean = true;\n    break;\n} else {\n    if ((byte >= 0) && (byte < (org.apache.commons.codec.binary.Base64.byte[].int))) {\n        final int int = org.apache.commons.codec.binary.Base64.byte[][byte];\n        if (int >= 0) {\n            org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) + 1) % (org.apache.commons.codec.binary.Base64.int);\n            org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) << (org.apache.commons.codec.binary.Base64.int)) + int;\n            if ((org.apache.commons.codec.binary.BaseNCodec.Context.int) == 0) {\n                byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n                byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n                byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.int) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            } \n        } \n    } \n}"},"status":-2},{"failures":[26,27,28,29],"tindex":"c5e7d19e-42f6-11e5-9be5-d7f23382d062","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.RefinedSoundex:195","type":"CtIfImpl","sourcecode":"if (char != 0) {\n    java.lang.StringBuilder.append(char);\n} "},"variableMap":{"current":"charZero","sBuf":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:211","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.setCharAt(0, char)"},"status":-1},{"failures":[],"tindex":"c5e7d19f-42f6-11e5-9be5-a59889c6addb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:68","type":"CtReturnImpl","sourcecode":"return java.security.MessageDigest.getInstance(java.lang.String)"},"status":-2},{"failures":[],"tindex":"c5e7d1a0-42f6-11e5-9be5-595731d44525","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:261","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"variableMap":{"maxCodeLen":"right"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:300","type":"CtAssignmentImpl","sourcecode":"int = int[][0]"},"status":1},{"failures":[],"tindex":"c5e7d1a1-42f6-11e5-9be5-e5c5d0f4befa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:154","type":"CtIfImpl","sourcecode":"if (int >= 0) {\n    java.lang.String = java.lang.String.substring(0, int);\n} "},"variableMap":{"cmtI":"index","line":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:533","type":"CtIfImpl","sourcecode":"if ((!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 1, \"S\", \"K\", \"L\")))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n} "},"status":-2},{"failures":[],"tindex":"c5e7f8b2-42f6-11e5-9be5-b12121454165","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:94","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:394","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.decode(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String))"},"status":-2},{"failures":[],"tindex":"c5e7f8b3-42f6-11e5-9be5-9bbc92ca6188","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:295","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = java.lang.String.toCharArray()"},"status":-2},{"failures":[],"tindex":"c5e7f8b4-42f6-11e5-9be5-07683cc619ef","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:504","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.substring(int)"},"status":-2},{"failures":[30,31,32,33,34,35,36,37],"tindex":"c5e7f8b5-42f6-11e5-9be5-83d2f78944e8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:327","type":"CtAssignmentImpl","sourcecode":"int = 256 + int"},"variableMap":{"b":"to"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:151","type":"CtAssignmentImpl","sourcecode":"int = int + 1"},"status":-1},{"failures":[38,39,40,41,42,43,44],"tindex":"c5e7f8b6-42f6-11e5-9be5-216df5344e0d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(byte[], ((byte)(0)))"},"variableMap":{"finalb":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:237","type":"CtWhileImpl","sourcecode":"while (int > 0) {\n    if ((int & 1) == 1) {\n        java.security.MessageDigest.update(byte[][int]);\n    } else {\n        java.security.MessageDigest.update(byte[][int]);\n    }\n    int >>= 1;\n}"},"status":-1},{"failures":[],"tindex":"c5e7f8b7-42f6-11e5-9be5-c1ddfc45f3cb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    java.lang.String = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (java.lang.String.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern.matcher(java.lang.String);\n    if ((java.util.regex.Matcher == null) || (!(java.util.regex.Matcher.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + java.lang.String));\n    } \n    java.lang.String = java.util.regex.Matcher.group(1);\n}"},"variableMap":{"saltString":"org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END","salt":"line","prefix":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:261","type":"CtIfImpl","sourcecode":"if (java.lang.String.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    boolean = false;\n} "},"status":-2},{"failures":[],"tindex":"c5e7f8b8-42f6-11e5-9be5-9359a6b615f4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:393","type":"CtLocalVariableImpl","sourcecode":"final int int = ((int << (16 - int)) ^ int) & int"},"variableMap":{"a":"r","m":"r","n":"r"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:326","type":"CtLocalVariableImpl","sourcecode":"int int = int ^ (int >>> 16)"},"status":-2},{"failures":[26,29],"tindex":"c5e81fc9-42f6-11e5-9be5-b1999d861950","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:189","type":"CtIfImpl","sourcecode":"if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"i","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"i","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"c","minRating":"i","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"d","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"d","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"d"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:361","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.digest.UnixCrypt.boolean[][int]) {\n    int = (int >>> 2) | (int << 26);\n    int = (int >>> 2) | (int << 26);\n} else {\n    int = (int >>> 1) | (int << 27);\n    int = (int >>> 1) | (int << 27);\n}"},"status":-1},{"failures":[],"tindex":"c5e81fca-42f6-11e5-9be5-a7a3e0b3efa3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:451","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"},"diffs":[{"transformation":"c5e7aa8a-42f6-11e5-9be5-8f172b067498","diffs":[{"branches":{"org.apache.commons.codec.language.NysiisTest.testEncodeWithInvalidObject":["org.apache.commons.codec.EncoderException_org.apache.commons.codec.EncoderException(java.lang.String).b"]},"type":"branch"},{"nodes":{"org.apache.commons.codec.language.NysiisTest.testEncodeWithInvalidObject":["org.apache.commons.codec.EncoderException.org.apache.commons.codec.EncoderException(java.lang.String)"]},"edges":{"org.apache.commons.codec.language.NysiisTest.testEncodeWithInvalidObject":["org.apache.commons.codec.language.Nysiis.java.lang.Object encode(java.lang.Object) -> org.apache.commons.codec.EncoderException.org.apache.commons.codec.EncoderException(java.lang.String)"]},"type":"graph"},{"catchs":{},"throws":{"org.apache.commons.codec.language.NysiisTest.testEncodeWithInvalidObject":["org.apache.commons.codec.language.Nysiis.java.lang.Object encode(java.lang.Object)"]},"type":"exception"}]}]}
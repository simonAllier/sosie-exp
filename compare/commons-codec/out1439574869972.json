{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":2,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":3,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":20,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":42,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":37,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":11,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":12,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":29,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":31,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":10,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":17,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":41,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":18,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":40,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":23,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":22,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":19,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":6,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":27,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":34,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":21,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":4,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":7,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":38,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":24,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":39,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__AIDAN_Returns_ADN":25,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":8,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":14,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":16,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":13,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":36,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":0,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":15,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":5,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":33,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":9,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":30,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":1,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":43,"org.apache.commons.codec.language.MetaphoneTest.testTCH":28,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel_ALESSANDRA_Returns_ALSSNDR":26,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":35,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":32},"transformations":[{"failures":[],"tindex":"830cd5b7-42ad-11e5-8aaf-3950520e3cc0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:521","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int = 0"},"variableMap":{"currentLinePos":"pos","context":"context"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:360","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-2},{"failures":[],"tindex":"830d23d8-42ad-11e5-8aaf-c103a30b1e49","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:62","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^enough\", \"enou2f\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:88","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(java.lang.String, org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-2},{"failures":[0,1],"tindex":"830d23d9-42ad-11e5-8aaf-7df11a76bddf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:78","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"dg\", \"2g\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:109","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"l3\", \"L3\")"},"status":-1},{"failures":[],"tindex":"830d4aea-42ad-11e5-8aaf-bb1a6dbee5bf","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:70","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"ci\", \"si\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:62","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^enough\", \"enou2f\")"},"status":1},{"failures":[],"tindex":"830d4aeb-42ad-11e5-8aaf-7f179da08495","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:284","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(char[], 0, char[], int, char[].int)"},"variableMap":{"length":"length","i":"length","transcoded":"chrs","chars":"chrs"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:433","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (char[].int) ; int++) {\n    if ((char[][int]) > 'Z') {\n        for (final char[] char[] : org.apache.commons.codec.language.ColognePhonetic.char[][]) {\n            if ((char[][int]) == (char[][0])) {\n                char[][int] = char[][1];\n                break;\n            } \n        }\n    } \n}"},"status":-2},{"failures":[2,3],"tindex":"830d4aec-42ad-11e5-8aaf-650f66fb6e1b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:128","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:403","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.hmacSha1(java.lang.String, java.lang.String))"},"status":-1},{"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"tindex":"830d71fd-42ad-11e5-8aaf-7f3158c6a105","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:76","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(int)"},"variableMap":{"i":"org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH","org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"printable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:282","type":"CtIfImpl","sourcecode":"if (boolean) {\n    int int = 1;\n    for (int int = 0 ; int < ((byte[].int) - 3) ; int++) {\n        int int = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(int, byte[]);\n        if (int < (org.apache.commons.codec.net.QuotedPrintableCodec.int)) {\n            int += org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int, !(java.util.BitSet.get(int)), java.io.ByteArrayOutputStream);\n        } else {\n            org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int, ((!(java.util.BitSet.get(int))) || org.apache.commons.codec.net.QuotedPrintableCodec.(org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(int))), java.io.ByteArrayOutputStream);\n            java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n            java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n            java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n            int = 1;\n        }\n    }\n    int int = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(((byte[].int) - 3), byte[]);\n    boolean boolean = (!(java.util.BitSet.get(int))) || (org.apache.commons.codec.net.QuotedPrintableCodec.(org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(int)) && (int > ((org.apache.commons.codec.net.QuotedPrintableCodec.int) - 5)));\n    int += org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int, boolean, java.io.ByteArrayOutputStream);\n    if (int > ((org.apache.commons.codec.net.QuotedPrintableCodec.int) - 2)) {\n        java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n    } \n    for (int int = (byte[].int) - 2 ; int < (byte[].int) ; int++) {\n        int = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(int, byte[]);\n        boolean = (!(java.util.BitSet.get(int))) || ((int > ((byte[].int) - 2)) && org.apache.commons.codec.net.QuotedPrintableCodec.(org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(int)));\n        org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int, boolean, java.io.ByteArrayOutputStream);\n    }\n} else {\n    for (final byte byte : byte[]) {\n        int int = byte;\n        if (int < 0) {\n            int = 256 + int;\n        } \n        if (java.util.BitSet.get(int)) {\n            java.io.ByteArrayOutputStream.write(int);\n        } else {\n            org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(int, java.io.ByteArrayOutputStream);\n        }\n    }\n}"},"status":-1},{"failures":[21],"tindex":"830d990e-42ad-11e5-8aaf-f3a57ae0b685","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:635","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:587","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('R')"},"status":-1},{"failures":[22,23],"tindex":"830d990f-42ad-11e5-8aaf-8b51654e7e33","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:963","type":"CtIfImpl","sourcecode":"if ((this.java.lang.StringBuilder.length()) < (this.int)) {\n    this.java.lang.StringBuilder.append(char);\n} "},"variableMap":{"alternate":"code","value":"symb","maxLength":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:265","type":"CtIfImpl","sourcecode":"if (!org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'C'))) {\n    java.lang.StringBuilder.append(char);\n} "},"status":-1},{"failures":[24,25,26,27],"tindex":"830d9910-42ad-11e5-8aaf-4f63054543ff","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:412","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = \"d\" + java.lang.String"},"variableMap":{"remainder":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:409","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.substring(0, 1)"},"status":-1},{"failures":[28],"tindex":"830dc021-42ad-11e5-8aaf-252d6b939429","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:293","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"TIA\")) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"TIO\"))) {\n    java.lang.StringBuilder.append('X');\n    break;\n} "},"variableMap":{"code":"local","this":"this","local":"local","n":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:298","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder, int, \"TCH\")) {\n    break;\n} "},"status":-1},{"failures":[],"tindex":"830dc022-42ad-11e5-8aaf-3df19076b2bc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:329","type":"CtLocalVariableImpl","sourcecode":"char char"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:495","type":"CtLocalVariableImpl","sourcecode":"char char = '\u0000'"},"status":-2},{"failures":[],"tindex":"830dc023-42ad-11e5-8aaf-27faa568e100","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:401","type":"CtAssignmentImpl","sourcecode":"byte[][int++] = ((byte)((int >>> 16) & 255))"},"variableMap":{"b":"buffer","offset":"pos","iValue":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:392","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2},{"failures":[],"tindex":"830de734-42ad-11e5-8aaf-0b623b148f9c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:312","type":"CtSwitchImpl","sourcecode":"switch (byte) {\n    case ' ' :\n    case '\\n' :\n    case '\\r' :\n    case '\\t' :\n        return true;\n    default :\n        return false;\n}"},"variableMap":{"byteToCheck":"pad"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:499","type":"CtForEachImpl","sourcecode":"for (final byte byte : byte[]) {\n    if (((byte) == byte) || org.apache.commons.codec.binary.BaseNCodec.(isInAlphabet(byte))) {\n        return true;\n    } \n}"},"status":-2},{"failures":[29,30,28,31,32,23,33,34,35,36,37,38,39,40],"tindex":"830de735-42ad-11e5-8aaf-19fb1196beae","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:206","type":"CtIfImpl","sourcecode":"if (((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1)))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'G'))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 2)))) >= 0)) {\n    java.lang.StringBuilder.append('J');\n    int += 2;\n} else {\n    java.lang.StringBuilder.append('T');\n}"},"variableMap":{"wdsz":"wdsz","code":"local","this":"this","n":"n","local":"local","org.apache.commons.codec.language.Metaphone.FRONTV":"org.apache.commons.codec.language.Metaphone.VARSON"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:155","type":"CtSwitchImpl","sourcecode":"switch (char) {\n    case 'A' :\n    case 'E' :\n    case 'I' :\n    case 'O' :\n    case 'U' :\n        if (int == 0) {\n            java.lang.StringBuilder.append(char);\n        } \n        break;\n    case 'B' :\n        if (org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'M')) && org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) {\n            break;\n        } \n        java.lang.StringBuilder.append(char);\n        break;\n    case 'C' :\n        if ((org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'S')) && (!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int)))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 1)))) >= 0)) {\n            break;\n        } \n        if (org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder, int, \"CIA\")) {\n            java.lang.StringBuilder.append('X');\n            break;\n        } \n        if ((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 1)))) >= 0)) {\n            java.lang.StringBuilder.append('S');\n            break;\n        } \n        if (org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'S')) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'H'))) {\n            java.lang.StringBuilder.append('K');\n            break;\n        } \n        if (org.apache.commons.codec.language.Metaphone.isNextChar(java.lang.StringBuilder, int, 'H')) {\n            if (((int == 0) && (int >= 3)) && org.apache.commons.codec.language.Metaphone.(isVowel(java.lang.StringBuilder, 2))) {\n                java.lang.StringBuilder.append('K');\n            } else {\n                java.lang.StringBuilder.append('X');\n            }\n        } else {\n            java.lang.StringBuilder.append('K');\n        }\n        break;\n    case 'D' :\n        if (((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1)))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'G'))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 2)))) >= 0)) {\n            java.lang.StringBuilder.append('J');\n            int += 2;\n        } else {\n            java.lang.StringBuilder.append('T');\n        }\n        break;\n    case 'G' :\n        if (org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'H'))) {\n            break;\n        } \n        if (((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1)))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'H'))) && (!org.apache.commons.codec.language.Metaphone.(isVowel(java.lang.StringBuilder, (int + 2))))) {\n            break;\n        } \n        if ((int > 0) && (org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"GN\")) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"GNED\")))) {\n            break;\n        } \n        if (org.apache.commons.codec.language.Metaphone.isPreviousChar(java.lang.StringBuilder, int, 'G')) {\n            boolean = true;\n        } else {\n            boolean = false;\n        }\n        if (((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 1)))) >= 0)) && (!boolean)) {\n            java.lang.StringBuilder.append('J');\n        } else {\n            java.lang.StringBuilder.append('K');\n        }\n        break;\n    case 'H' :\n        if (org.apache.commons.codec.language.Metaphone.isLastChar(int, int)) {\n            break;\n        } \n        if ((int > 0) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int - 1)))) >= 0)) {\n            break;\n        } \n        if (org.apache.commons.codec.language.Metaphone.isVowel(java.lang.StringBuilder, (int + 1))) {\n            java.lang.StringBuilder.append('H');\n        } \n        break;\n    case 'F' :\n    case 'J' :\n    case 'L' :\n    case 'M' :\n    case 'N' :\n    case 'R' :\n        java.lang.StringBuilder.append(char);\n        break;\n    case 'K' :\n        if (int > 0) {\n            if (!org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'C'))) {\n                java.lang.StringBuilder.append(char);\n            } \n        } else {\n            java.lang.StringBuilder.append(char);\n        }\n        break;\n    case 'P' :\n        if (org.apache.commons.codec.language.Metaphone.isNextChar(java.lang.StringBuilder, int, 'H')) {\n            java.lang.StringBuilder.append('F');\n        } else {\n            java.lang.StringBuilder.append(char);\n        }\n        break;\n    case 'Q' :\n        java.lang.StringBuilder.append('K');\n        break;\n    case 'S' :\n        if ((org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SH\")) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SIO\"))) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SIA\"))) {\n            java.lang.StringBuilder.append('X');\n        } else {\n            java.lang.StringBuilder.append('S');\n        }\n        break;\n    case 'T' :\n        if (org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"TIA\")) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"TIO\"))) {\n            java.lang.StringBuilder.append('X');\n            break;\n        } \n        if (org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder, int, \"TCH\")) {\n            break;\n        } \n        if (org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder, int, \"TH\")) {\n            java.lang.StringBuilder.append('0');\n        } else {\n            java.lang.StringBuilder.append('T');\n        }\n        break;\n    case 'V' :\n        java.lang.StringBuilder.append('F');\n        break;\n    case 'W' :\n    case 'Y' :\n        if ((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) && org.apache.commons.codec.language.Metaphone.(isVowel(java.lang.StringBuilder, (int + 1)))) {\n            java.lang.StringBuilder.append(char);\n        } \n        break;\n    case 'X' :\n        java.lang.StringBuilder.append('K');\n        java.lang.StringBuilder.append('S');\n        break;\n    case 'Z' :\n        java.lang.StringBuilder.append('S');\n        break;\n    default :\n        break;\n}"},"status":-1},{"failures":[],"tindex":"830e3556-42ad-11e5-8aaf-9977545c6915","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:189","type":"CtIfImpl","sourcecode":"if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"blocksize","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"blocksize","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"blocksize","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"blocksize","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"blocksize","minRating":"blocksize","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"blocksize","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"blocksize","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"blocksize","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"blocksize","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"blocksize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:224","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[], 0, int)"},"status":-2},{"failures":[41,42,43,21],"tindex":"830e3557-42ad-11e5-8aaf-1773f3e4f605","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:357","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K', 'X')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:108","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('P')"},"status":-1},{"failures":[],"tindex":"830e3558-42ad-11e5-8aaf-8b3912efec4f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:250","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.Math.abs(((java.lang.String.length()) + (java.lang.String.length())))"},"variableMap":{"name2":"str","name1":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:45","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.String.length()"},"status":-2},{"failures":[],"tindex":"830e5c69-42ad-11e5-8aaf-33858df114a4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:138","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"830e5c6a-42ad-11e5-8aaf-c9c560d4b96a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (int == int) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"index","to":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:435","type":"CtForEachImpl","sourcecode":"for (final char[] char[] : org.apache.commons.codec.language.ColognePhonetic.char[][]) {\n    if ((char[][int]) == (char[][0])) {\n        char[][int] = char[][1];\n        break;\n    } \n}"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
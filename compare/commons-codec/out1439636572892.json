{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":13,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":14,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":19,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":31,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":12,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":20,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":7,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":6,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":11,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":18,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":8,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":37,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":27,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":5,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":23,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":25,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":3,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":9,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":0,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":2,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":16,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":35,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":36,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":4,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":33,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero":32,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":1,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":17,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":28,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":29,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":10,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":21,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":26,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":15,"org.apache.commons.codec.language.MetaphoneTest.testTCH":22,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":30,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":24,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":34},"transformations":[{"failures":[],"tindex":"2cd8319e-433d-11e5-81a4-8dcabf629c98","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:304","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"variableMap":{"lineSeparator":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:256","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.byte[] = byte[]"},"status":-2},{"failures":[],"tindex":"2cd858af-433d-11e5-81a4-155475e0b130","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:315","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.StringBuilder.toString()"},"status":-2},{"failures":[],"tindex":"2cd858b0-433d-11e5-81a4-596a4bcf57c6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:103","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"w\", \"2\")"},"status":0},{"failures":[],"tindex":"2cd858b1-433d-11e5-81a4-719673737a5a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:357","type":"CtReturnImpl","sourcecode":"return boolean"},"status":-2},{"failures":[0],"tindex":"2cd858b2-433d-11e5-81a4-63f433094e4e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:436","type":"CtIfImpl","sourcecode":"if (java.lang.String.contains(\" \")) {\n    throw new java.lang.IllegalArgumentException((((\"Malformed import statement \\'\" + java.lang.String) + \"\\' in \") + java.lang.String));\n} else {\n    java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>.putAll(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.createScanner(java.lang.String), ((java.lang.String + \"->\") + java.lang.String)));\n}"},"status":-1},{"failures":[1,2],"tindex":"2cd858b3-433d-11e5-81a4-d50f3c270e3a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:425","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)"},"status":-1},{"failures":[],"tindex":"2cd858b4-433d-11e5-81a4-630c9f62ab45","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.toString(), byte[])"},"variableMap":{"this":"this","key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_512"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:135","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, byte[])"},"status":-2},{"failures":[],"tindex":"2cd87fc5-433d-11e5-81a4-358cf9ed9818","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtIfImpl","sourcecode":"if ((java.lang.String.length()) == 0) {\n    return java.lang.String;\n} "},"variableMap":{"str":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:321","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.md5(java.lang.String))"},"status":-2},{"failures":[],"tindex":"2cd87fc6-433d-11e5-81a4-23d3ce27f71e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:111","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\")"},"status":0},{"failures":[3,4,5,6,7,8,9,10,11,12],"tindex":"2cd87fc7-433d-11e5-81a4-b75296399453","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:541","type":"CtInvocationImpl","sourcecode":"java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.clear()"},"variableMap":{"currentBranches":"currentBranches"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:540","type":"CtIfImpl","sourcecode":"if (boolean) {\n    java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.clear();\n    java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.addAll(java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>);\n} "},"status":-1},{"failures":[8,9,10],"tindex":"2cd8a6d8-433d-11e5-81a4-dd7d666a751f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtIfImpl","sourcecode":"if ((((java.lang.String == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(java.lang.String))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(java.lang.String))) || ((java.lang.String.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n} "},"variableMap":{"name":"source","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"source","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"source"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"status":-1},{"failures":[13,14],"tindex":"2cd8cde9-433d-11e5-81a4-176894700341","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:165","type":"CtReturnImpl","sourcecode":"return java.lang.String + java.lang.String"},"variableMap":{"firstThree":"valueToDigest","lastThree":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:403","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.hmacSha1(java.lang.String, java.lang.String))"},"status":-1},{"failures":[15],"tindex":"2cd8cdea-433d-11e5-81a4-932396de7854","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:209","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.String.charAt(0)"},"variableMap":{"salt":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:791","type":"CtLocalVariableImpl","sourcecode":"final char char = org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int + 2))"},"status":-1},{"failures":[15,16],"tindex":"2cd8cdeb-433d-11e5-81a4-f7de3dc1c6fd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:372","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'K')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:656","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"SK\")"},"status":-1},{"failures":[15,16,17,18,19],"tindex":"2cd8cdec-433d-11e5-81a4-c3e1c1b0119b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with \\'(\\' so must end with \\')\\'\");\n} "},"variableMap":{"ph":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:760","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'H') {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n    int += 2;\n} else {\n    if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"ZO\", \"ZI\", \"ZA\")) || (boolean && ((int > 0) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int - 1))) != 'T')))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"S\", \"TS\");\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    }\n    int = org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'Z' ? int + 2 : int + 1;\n}"},"status":-1},{"failures":[],"tindex":"2cd8cded-433d-11e5-81a4-55cc9988c584","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:189","type":"CtIfImpl","sourcecode":"if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"length","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"length","minRating":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"length","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:468","type":"CtIfImpl","sourcecode":"if ((++int) < (java.lang.String[].int)) {\n    java.lang.StringBuilder.append('|');\n} "},"status":-2},{"failures":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"tindex":"2cd8f4fe-433d-11e5-81a4-1f16f08e9959","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:275","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('F')"},"variableMap":{"code":"local"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:142","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(char[])"},"status":-1},{"failures":[],"tindex":"2cd8f4ff-433d-11e5-81a4-e5f8a3986c27","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:313","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.encode(((byte[])(java.lang.Object)))"},"variableMap":{"obj":"obj","this":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:137","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.RefinedSoundex.soundex(((java.lang.String)(java.lang.Object)))"},"status":-2},{"failures":[20,22,27,31,35],"tindex":"2cd8f500-433d-11e5-81a4-5988c9ac718c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:371","type":"CtReturnImpl","sourcecode":"return (int + 1) == int"},"variableMap":{"wdsz":"index","n":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:339","type":"CtReturnImpl","sourcecode":"return (org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt(int))) >= 0"},"status":-1},{"failures":[],"tindex":"2cd8f501-433d-11e5-81a4-fdf19022d22f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Soundex:266","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[]{ '0' , '0' , '0' , '0' }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:273","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[(byte[].int) << 3]"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
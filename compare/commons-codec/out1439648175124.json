{"failureDictionary":{"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":27,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":37,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":4,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":18,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":19,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":3,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":12,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":20,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":24,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":15,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":22,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":23,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":36,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":25,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":26,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":9,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":11,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":38,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":17,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":10,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":16,"org.apache.commons.codec.language.SoundexTest.testB650":21,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":14,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":6,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":13,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":5,"org.apache.commons.codec.language.SoundexTest.testNewInstance":29,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":33,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":7,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":35,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":34,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":2,"org.apache.commons.codec.language.SoundexTest.testDifference":28,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":8,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":30,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":31,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":32},"transformations":[{"failures":[],"tindex":"3053f6dc-4358-11e5-a587-37c3da358a57","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:397","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.long = (org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 6"},"variableMap":{"context":"context","lbitWorkArea":"lbitWorkArea"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:358","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.long = ((org.apache.commons.codec.binary.BaseNCodec.Context.long) << (org.apache.commons.codec.binary.Base32.int)) + int"},"status":-2},{"failures":[0,1],"tindex":"30541ded-4358-11e5-a587-9d51d8d17023","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:372","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'K')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:767","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"S\", \"TS\")"},"status":-1},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13],"tindex":"30541dee-4358-11e5-a587-259c397434a6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:298","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, byte[], int, int)"},"variableMap":{"blocksize":"i","tempResult":"bytes","pBytes":"bytes","cp":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:360","type":"CtTryImpl","sourcecode":"try {\n    if ((byte[][++int]) == (org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n        continue;\n    } \n    final int int = org.apache.commons.codec.net.Utils.digit16(byte[][int]);\n    final int int = org.apache.commons.codec.net.Utils.digit16(byte[][++int]);\n    java.io.ByteArrayOutputStream.write(((char)((int << 4) + int)));\n} catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n    throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , java.lang.ArrayIndexOutOfBoundsException);\n}"},"status":-1},{"failures":[0],"tindex":"305444ff-4358-11e5-a587-9f822b1e8fac","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:969","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendPrimary(java.lang.String)"},"variableMap":{"this":"result","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:552","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.conditionL0(java.lang.String, int)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendPrimary('L');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('L');\n}"},"status":-1},{"failures":[],"tindex":"30544500-4358-11e5-a587-818b9eed372a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:142","type":"CtAssignmentImpl","sourcecode":"int = int + 1"},"variableMap":{"from":"modulus","to":"modulus"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:502","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) + 1) % (org.apache.commons.codec.binary.Base32.int)"},"status":-2},{"failures":[14,15],"tindex":"30544501-4358-11e5-a587-e70dd1f9b8d7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:104","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.decodeBase64(byte[])"},"variableMap":{"bytes":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:528","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byte[]).doFinal(byte[])"},"status":-1},{"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"tindex":"30546b12-4358-11e5-a587-4b42921abf87","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:436","type":"CtIfImpl","sourcecode":"if ((char[][int]) == (char[][0])) {\n    char[][int] = char[][1];\n    break;\n} "},"variableMap":{"chrs":"out","index":"count","element":"out"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:274","type":"CtIfImpl","sourcecode":"if (char != 0) {\n    if ((char != '0') && (char != char)) {\n        char[][int++] = char;\n    } \n    char = char;\n} "},"status":-1},{"failures":[],"tindex":"30546b13-4358-11e5-a587-bf32be576c9f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (int == (org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"length","len":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:130","type":"CtIfImpl","sourcecode":"if ((char[][1]) == 'H') {\n    java.lang.StringBuilder.append(char[], 1, ((char[].int) - 1));\n    java.lang.StringBuilder.setCharAt(0, 'W');\n} else {\n    java.lang.StringBuilder.append(char[]);\n}"},"status":-2},{"failures":[0,1,36,37,38],"tindex":"30546b14-4358-11e5-a587-35310297fb0f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:242","type":"CtOperatorAssignmentImpl","sourcecode":"int >>>= 1"},"variableMap":{"u":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:148","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'N' ? int + 2 : int + 1"},"status":-1},{"failures":[],"tindex":"30549225-4358-11e5-a587-95e7439d18db","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:182","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.util.Scanner.nextLine().trim()"},"status":-2},{"failures":[],"tindex":"30549226-4358-11e5-a587-431b55ad9541","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:235","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.org.apache.commons.codec.binary.StringUtils.getBytes(java.lang.String, org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-2},{"failures":[],"tindex":"30549227-4358-11e5-a587-39f7851bdfb4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:257","type":"CtReturnImpl","sourcecode":"return byte[] == null ? null : new java.lang.String(byte[] , java.nio.charset.Charset)"},"variableMap":{"charset":"org.apache.commons.codec.Charsets.UTF_16LE","bytes":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:367","type":"CtReturnImpl","sourcecode":"return new java.lang.String(byte[] , org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-2},{"failures":[],"tindex":"30549228-4358-11e5-a587-cf238f5216d0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:78","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"dg\", \"2g\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:102","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"why\", \"Why\")"},"status":1},{"failures":[],"tindex":"30549229-4358-11e5-a587-add4e5a6f3e1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtIfImpl","sourcecode":"if ((java.lang.String != null) && (!(java.lang.String.startsWith(org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n    java.lang.String = (org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + java.lang.String;\n} "},"variableMap":{"salt":"line","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:184","type":"CtIfImpl","sourcecode":"if (java.lang.String.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    boolean = false;\n} "},"status":-2},{"failures":[],"tindex":"3054b93a-4358-11e5-a587-9d777ed62126","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:777","type":"CtReturnImpl","sourcecode":"return java.security.MessageDigest"},"status":-2},{"failures":[],"tindex":"3054b93b-4358-11e5-a587-0109db7cf9ad","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtIfImpl","sourcecode":"if (java.lang.Character.isWhitespace(char)) {\n    continue;\n} "},"variableMap":{"ch":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:386","type":"CtIfImpl","sourcecode":"if (char == 'L') {\n    char = '5';\n} else if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"status":-2},{"failures":[],"tindex":"3054b93c-4358-11e5-a587-e721372e0c0b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:751","type":"CtAssignmentImpl","sourcecode":"int = ((int + 7) >> 3) << 3"},"variableMap":{"bitlen":"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.int"},"status":-2},{"failures":[],"tindex":"3054e04d-4358-11e5-a587-a36975fee622","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:512","type":"CtLocalVariableImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nfinal java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = boolean ? new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>() : java.util.Collections.java.util.List"},"status":-2},{"failures":[],"tindex":"3054e04e-4358-11e5-a587-b97249588010","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:277","type":"CtReturnImpl","sourcecode":"return ((((java.lang.String.equalsIgnoreCase(\"E\")) || (java.lang.String.equalsIgnoreCase(\"A\"))) || (java.lang.String.equalsIgnoreCase(\"O\"))) || (java.lang.String.equalsIgnoreCase(\"I\"))) || (java.lang.String.equalsIgnoreCase(\"U\"))"},"variableMap":{"letter":"text2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:422","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(java.lang.String).equals(org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(java.lang.String))"},"status":1},{"failures":[],"tindex":"3054e04f-4358-11e5-a587-6f1edb5f7396","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:474","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 4))) & (org.apache.commons.codec.binary.Base32.int))]"},"variableMap":{"encodeTable":"buffer","pos":"pos","org.apache.commons.codec.binary.Base32.MASK_5BITS":"pos","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:404","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"},"diffs":[{"transformation":"3054e04e-4358-11e5-a587-b97249588010","diffs":[{"branches":{"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":["org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).t11","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).t17","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_preprocess(java.lang.String).b","org.apache.commons.codec.language.ColognePhonetic$CologneBuffer_java.lang.String_toString().b","org.apache.commons.codec.language.ColognePhonetic$CologneBuffer_int_length().b","org.apache.commons.codec.language.ColognePhonetic$CologneBuffer_org.apache.commons.codec.language.ColognePhonetic$CologneBuffer(char[]).b","org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer_char[]_copyData(int,int).b","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).t18","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).t19","org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer_char_removeNext().b","org.apache.commons.codec.language.ColognePhonetic_boolean_arrayContains(char[],char).e1","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).b","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).t5","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).l21","org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer_org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer(char[]).b","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).t2","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).t20","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).t3","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).t4","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).e11","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).e12","org.apache.commons.codec.language.ColognePhonetic_boolean_arrayContains(char[],char).b","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).e10","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).t9","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).e16","org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer_int_getNextPos().b","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_preprocess(java.lang.String).e1","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_preprocess(java.lang.String).e2","org.apache.commons.codec.language.ColognePhonetic_boolean_arrayContains(char[],char).l2","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).e17","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).e18","org.apache.commons.codec.language.ColognePhonetic_boolean_arrayContains(char[],char).t1","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).e20","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).e1","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_preprocess(java.lang.String).l4","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_preprocess(java.lang.String).l3","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).e6","org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer_org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer(int).b","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).e7","org.apache.commons.codec.language.ColognePhonetic$CologneBuffer_org.apache.commons.codec.language.ColognePhonetic$CologneBuffer(int).b","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).e8","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).e9","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).e2","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).e3","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).e4","org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer_void_addRight(char).b","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_preprocess(java.lang.String).t1","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_preprocess(java.lang.String).t2","org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer_char_getNextChar().b"]},"type":"branch"},{"nodes":{"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":["org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer.void addRight(char)","org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.org.apache.commons.codec.language.ColognePhonetic$CologneBuffer(char[])","org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.int length()","org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.int getNextPos()","org.apache.commons.codec.language.ColognePhonetic.java.lang.String preprocess(java.lang.String)","org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer.org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer(int)","org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.org.apache.commons.codec.language.ColognePhonetic$CologneBuffer(int)","org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer.char[] copyData(int,int)","org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.char removeNext()","org.apache.commons.codec.language.ColognePhonetic.boolean arrayContains(char[],char)","org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer(char[])","org.apache.commons.codec.language.ColognePhonetic.java.lang.String colognePhonetic(java.lang.String)","org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.char getNextChar()","org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.java.lang.String toString()"]},"edges":{"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":["org.apache.commons.codec.language.ColognePhonetic.java.lang.String colognePhonetic(java.lang.String) -> org.apache.commons.codec.language.ColognePhonetic.boolean arrayContains(char[],char)","org.apache.commons.codec.language.ColognePhonetic.java.lang.String colognePhonetic(java.lang.String) -> org.apache.commons.codec.language.ColognePhonetic.java.lang.String preprocess(java.lang.String)","org.apache.commons.codec.language.ColognePhonetic.boolean isEncodeEqual(java.lang.String,java.lang.String) -> org.apache.commons.codec.language.ColognePhonetic.java.lang.String colognePhonetic(java.lang.String)","org.apache.commons.codec.language.ColognePhonetic.java.lang.String colognePhonetic(java.lang.String) -> org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.char removeNext()","org.apache.commons.codec.language.ColognePhonetic.java.lang.String colognePhonetic(java.lang.String) -> org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.java.lang.String toString()","org.apache.commons.codec.language.ColognePhonetic.java.lang.String colognePhonetic(java.lang.String) -> org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer.void addRight(char)","org.apache.commons.codec.language.ColognePhonetic.java.lang.String colognePhonetic(java.lang.String) -> org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer.org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer(int)","org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.java.lang.String toString() -> org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer.char[] copyData(int,int)","org.apache.commons.codec.language.ColognePhonetic.java.lang.String colognePhonetic(java.lang.String) -> org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.org.apache.commons.codec.language.ColognePhonetic$CologneBuffer(char[])","org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.char removeNext() -> org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.char getNextChar()","org.apache.commons.codec.language.ColognePhonetic.java.lang.String colognePhonetic(java.lang.String) -> org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.org.apache.commons.codec.language.ColognePhonetic$CologneBuffer(int)","org.apache.commons.codec.language.ColognePhonetic.java.lang.String colognePhonetic(java.lang.String) -> org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.int length()","org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.char getNextChar() -> org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.int getNextPos()","org.apache.commons.codec.language.ColognePhonetic.java.lang.String colognePhonetic(java.lang.String) -> org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer(char[])","org.apache.commons.codec.language.ColognePhonetic.java.lang.String colognePhonetic(java.lang.String) -> org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.char getNextChar()"]},"type":"graph"}]}]}
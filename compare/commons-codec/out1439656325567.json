{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":63,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":30,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":0,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars":24,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":59,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":31,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":52,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":41,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":57,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":46,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":45,"org.apache.commons.codec.binary.Base64Test.testBase64":62,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":66,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":20,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":42,"org.apache.commons.codec.binary.Base64Test.testTriplets":55,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":44,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":51,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":36,"org.apache.commons.codec.binary.Base64Test.testUUID":6,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":28,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":34,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":37,"org.apache.commons.codec.binary.Base64Test.testSingletons":14,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":19,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":58,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":54,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":15,"org.apache.commons.codec.binary.Base64Test.testPairs":5,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":13,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":16,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":64,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":39,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":8,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":9,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":47,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":12,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":38,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject":26,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":2,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":10,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":11,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":1,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":49,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":21,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":60,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":29,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":22,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":35,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":68,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString":25,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":32,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":18,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":48,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":43,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":33,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":65,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":4,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":56,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":61,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":53,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":3,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":67,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":40,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":27,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":7,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":50},"transformations":[{"failures":[],"tindex":"2a5c947e-436b-11e5-8a07-458cfd95813c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:94","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:525","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = boolean ? org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.createBranch() : org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"tindex":"2a5ce29f-436b-11e5-8a07-0b36f46d694b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:382","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    int += 256;\n} "},"status":-1},{"failures":[],"tindex":"2a5ce2a0-436b-11e5-8a07-b757df6d1bb4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:641","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[23],"tindex":"2a5ce2a1-436b-11e5-8a07-d16d8dce858a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:375","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getSha1Digest()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:453","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getSha256Digest()"},"status":-1},{"failures":[],"tindex":"2a5ce2a2-436b-11e5-8a07-81b308a15ad5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (int == int) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"blocksize","to":"keyLen"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:297","type":"CtWhileImpl","sourcecode":"while (int < (int - int)) {\n    java.lang.System.arraycopy(byte[], 0, byte[], int, int);\n    int += int;\n}"},"status":-2},{"failures":[],"tindex":"2a5d09b3-436b-11e5-8a07-c57dab7243a0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:359","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.conditionCH0(java.lang.String, int)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    return int + 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.conditionCH1(java.lang.String, int)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    return int + 2;\n} else {\n    if (int > 0) {\n        if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 2, \"MC\")) {\n            org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n        } else {\n            org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'K');\n        }\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n    }\n    return int + 2;\n}"},"variableMap":{"result":"result","this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:356","type":"CtIfImpl","sourcecode":"if ((int > 0) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 4, \"CHAE\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K', 'X');\n    return int + 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.conditionCH0(java.lang.String, int)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    return int + 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.conditionCH1(java.lang.String, int)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    return int + 2;\n} else {\n    if (int > 0) {\n        if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 2, \"MC\")) {\n            org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n        } else {\n            org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'K');\n        }\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n    }\n    return int + 2;\n}"},"status":0},{"failures":[24,25,26],"tindex":"2a5d09b4-436b-11e5-8a07-fd432cce1f72","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:281","type":"CtAssignmentImpl","sourcecode":"char[][(int - int)] = '0'"},"status":-1},{"failures":[27,28,29,30],"tindex":"2a5d09b5-436b-11e5-8a07-f3f5f434e39d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:690","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('0', 'T')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:748","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"KS\")"},"status":-1},{"failures":[31,32,33],"tindex":"2a5d30c6-436b-11e5-8a07-fbece9835eaa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:463","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][6], byte[][16], byte[][26], 4, java.lang.StringBuilder)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:484","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][15], byte[][36], byte[][57], 4, java.lang.StringBuilder)"},"status":-1},{"failures":[],"tindex":"2a5d30c7-436b-11e5-8a07-11bb529916fc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:310","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null) {\n    return null;\n} else if (java.lang.Object instanceof byte[]) {\n    return org.apache.commons.codec.net.URLCodec.encode(((byte[])(java.lang.Object)));\n} else if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.URLCodec.encode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be URL encoded\"));\n}"},"variableMap":{"obj":"ascii","this":"ascii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:119","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof byte[]) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(java.lang.Object)));\n} "},"status":-2},{"failures":[34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"tindex":"2a5d30c8-436b-11e5-8a07-09f0bd4a94b1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:188","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    boolean = true;\n} else if ((java.lang.String.length()) > 0) {\n    java.util.Set<java.lang.String>.add(java.lang.String);\n} "},"status":-1},{"failures":[50,51],"tindex":"2a5d57d9-436b-11e5-8a07-578fc1ddfd32","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:230","type":"CtAssignmentImpl","sourcecode":"byte[][8] = 0"},"variableMap":{"b":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:399","type":"CtAssignmentImpl","sourcecode":"byte[][int++] = ((byte)(int & 255))"},"status":-1},{"failures":[27,28,52,53,30],"tindex":"2a5d57da-436b-11e5-8a07-4938d2bc5b7c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:245","type":"CtAssignmentImpl","sourcecode":"int = 128"},"variableMap":{"u":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:133","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.handleJ(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int, boolean)"},"status":-1},{"failures":[],"tindex":"2a5d57db-436b-11e5-8a07-c50fc3b2d221","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:472","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[],"tindex":"2a5d57dc-436b-11e5-8a07-6f22a11f1eff","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:192","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.Base64.this(org.apache.commons.codec.binary.BaseNCodec.int, org.apache.commons.codec.binary.Base64.byte[], boolean)"},"status":-2},{"failures":[],"tindex":"2a5d57dd-436b-11e5-8a07-a105b932ffa1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:376","type":"CtAssignmentImpl","sourcecode":"int = (int >>> 16) | (int & -65536)"},"variableMap":{"s":"pos","t":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:477","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-2},{"failures":[],"tindex":"2a5d7eee-436b-11e5-8a07-b9ae479e399a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:130","type":"CtIfImpl","sourcecode":"if (char == 'Q') {\n    return org.apache.commons.codec.language.Nysiis.char[];\n} else if (char == 'Z') {\n    return org.apache.commons.codec.language.Nysiis.char[];\n} else if (char == 'M') {\n    return org.apache.commons.codec.language.Nysiis.char[];\n} "},"variableMap":{"org.apache.commons.codec.language.Nysiis.CHARS_S":"org.apache.commons.codec.language.Nysiis.CHARS_AF","org.apache.commons.codec.language.Nysiis.CHARS_G":"org.apache.commons.codec.language.Nysiis.CHARS_AF","org.apache.commons.codec.language.Nysiis.CHARS_N":"org.apache.commons.codec.language.Nysiis.CHARS_AF","curr":"next"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:120","type":"CtIfImpl","sourcecode":"if ((char == 'E') && (char == 'V')) {\n    return org.apache.commons.codec.language.Nysiis.char[];\n} "},"status":-2},{"failures":[],"tindex":"2a5d7eef-436b-11e5-8a07-452dfa467e37","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:332","type":"CtLocalVariableImpl","sourcecode":"char char = '/'"},"status":-2},{"failures":[54],"tindex":"2a5d7ef0-436b-11e5-8a07-d7533fb71a65","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:81","type":"CtForImpl","sourcecode":"for (int int = '0' ; int <= '9' ; int++) {\n    org.apache.commons.codec.net.QCodec.java.util.BitSet.set(int);\n}"},"status":-1},{"failures":[0,1,2,3,55,4,6,7,56,8,9,10,11,57,12,13,58,59,60,61,15,62,16,17,63,64,65,18,19,20,66,21,22,67,68],"tindex":"2a5d7ef1-436b-11e5-8a07-1f0f6a37d902","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:387","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 18) & (org.apache.commons.codec.binary.Base64.int))]"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
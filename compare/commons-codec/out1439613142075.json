{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter":72,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":98,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":7,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":37,"org.apache.commons.codec.language.NysiisTest.testSnat":112,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":6,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":39,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":100,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":20,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":14,"org.apache.commons.codec.binary.Base64Test.testTriplets":41,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":30,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":122,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":88,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":125,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":66,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":10,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":58,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":13,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":77,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":82,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":51,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":45,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":52,"org.apache.commons.codec.language.NysiisTest.testCap":101,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":56,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":1,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":53,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":54,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":86,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":21,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":62,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding":119,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":16,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":69,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":4,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":76,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":44,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":8,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":67,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":5,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":83,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":34,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":43,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":126,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":31,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":92,"org.apache.commons.codec.language.NysiisTest.testTranan":116,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":84,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":24,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":118,"org.apache.commons.codec.language.NysiisTest.testFal":104,"org.apache.commons.codec.language.NysiisTest.testSnad":111,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":38,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":79,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":73,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":85,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":0,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":36,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":61,"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad":2,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":23,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":78,"org.apache.commons.codec.language.NysiisTest.testDropBy":114,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":55,"org.apache.commons.codec.binary.Base64Test.testBase64":75,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":124,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":29,"org.apache.commons.codec.binary.Base64Test.testUUID":47,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":9,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":59,"org.apache.commons.codec.binary.Base64Test.testSingletons":68,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":40,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":120,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":90,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":74,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":22,"org.apache.commons.codec.binary.Base64Test.testPairs":46,"org.apache.commons.codec.binary.Base64Test.testConstructors":49,"org.apache.commons.codec.language.NysiisTest.testRule2":106,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":89,"org.apache.commons.codec.language.NysiisTest.testRule1":105,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":80,"org.apache.commons.codec.language.NysiisTest.testRule7":109,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":17,"org.apache.commons.codec.binary.Base64Test.testCodec112":63,"org.apache.commons.codec.language.NysiisTest.testRule6":108,"org.apache.commons.codec.language.NysiisTest.testRule5":107,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":123,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":15,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":95,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":42,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":113,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":87,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":25,"org.apache.commons.codec.language.NysiisTest.testBran":110,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":117,"org.apache.commons.codec.binary.Base64Test.testCodec68":70,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":26,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":28,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":11,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":64,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":81,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":93,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":32,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":65,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":96,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":3,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":18,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":33,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":91,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":97,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter":57,"org.apache.commons.codec.language.NysiisTest.testDad":102,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":12,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":50,"org.apache.commons.codec.language.NysiisTest.testOthers":115,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":71,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":35,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":99,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":27,"org.apache.commons.codec.language.NysiisTest.testDan":103,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":94,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":60,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":19,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":48,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":121},"transformations":[{"failures":[0,1],"tindex":"9efd1995-4306-11e5-8318-21542fc0c46c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:313","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring((int - int), ((int - int) + 1))"},"status":-1},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],"tindex":"9efd40a6-4306-11e5-8318-47221943c6f8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:224","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:504","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"9efd40a7-4306-11e5-8318-bb417ba2f4a8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:764","type":"CtUnaryOperatorImpl","sourcecode":"int--"},"variableMap":{"len":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:411","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.handleGH(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int)"},"status":-2},{"failures":[],"tindex":"9efd40a8-4306-11e5-8318-c9bda197699d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (int == int) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE","to":"sumLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:193","type":"CtIfImpl","sourcecode":"if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"status":-2},{"failures":[97,98],"tindex":"9efd40a9-4306-11e5-8318-2bc176b88054","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:91","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.removeAccents(java.lang.String)"},"status":-1},{"failures":[],"tindex":"9efd40aa-4306-11e5-8318-d17b4e59fa60","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:65","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^trough\", \"trou2f\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:79","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"q\", \"k\")"},"status":1},{"failures":[99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117],"tindex":"9efd67bb-4306-11e5-8318-0522e86d5efb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:260","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[int]"},"variableMap":{"length":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:283","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.transcodeRemaining(char[][(int - 1)], char[][int], char, char)"},"status":-1},{"failures":[],"tindex":"9efd67bc-4306-11e5-8318-95223747580a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:78","type":"CtForImpl","sourcecode":"for (int int = 'A' ; int <= 'Z' ; int++) {\n    org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(int);\n}"},"variableMap":{"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:78","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('-')"},"status":-2},{"failures":[],"tindex":"9efd67bd-4306-11e5-8318-310af13b3fda","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    return null;\n} "},"status":0},{"failures":[],"tindex":"9efd67be-4306-11e5-8318-959d150c1b5d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:190","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byte[])"},"variableMap":{"tmp":"l_raw"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:215","type":"CtReturnImpl","sourcecode":"return byte[]"},"status":-2},{"failures":[118,119,120],"tindex":"9efd67bf-4306-11e5-8318-ef060d1a92e2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:191","type":"CtIfImpl","sourcecode":"if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"b","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"b","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"b","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"b","minRating":"b","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"b","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"b","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:326","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    int = 256 + int;\n} "},"status":-1},{"failures":[121,122],"tindex":"9efd67c0-4306-11e5-8318-3d7cc11a9c28","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:308","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.permOp(int, int, 16, 65535, int[])"},"variableMap":{"left":"c","this":"this","right":"d","results":"results"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:348","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.permOp(int, int, 1, 1431655765, int[])"},"status":-1},{"failures":[],"tindex":"9efd8ed1-4306-11e5-8318-a3ae5fa318cd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    return null;\n} "},"status":0},{"failures":[],"tindex":"9efd8ed2-4306-11e5-8318-6d84317c6cbe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:505","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.encode(((byte[])(java.lang.Object)))"},"variableMap":{"obj":"ascii","this":"ascii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:126","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(java.lang.Object)).toCharArray())"},"status":-2},{"failures":[],"tindex":"9efd8ed3-4306-11e5-8318-4bf00deed9c3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:359","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.conditionCH0(java.lang.String, int)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    return int + 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.conditionCH1(java.lang.String, int)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    return int + 2;\n} else {\n    if (int > 0) {\n        if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 2, \"MC\")) {\n            org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n        } else {\n            org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'K');\n        }\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n    }\n    return int + 2;\n}"},"variableMap":{"result":"result","this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:280","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.conditionC0(java.lang.String, int)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    int += 2;\n} else if ((int == 0) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 6, \"CAESAR\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CH\")) {\n    int = org.apache.commons.codec.language.DoubleMetaphone.handleCH(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int);\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CZ\")) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 4, \"WICZ\")))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 3, \"CIA\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n    int += 3;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CC\")) && (!((int == 1) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, 0)) == 'M')))) {\n    return org.apache.commons.codec.language.DoubleMetaphone.handleCC(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int);\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CK\", \"CG\", \"CQ\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CI\", \"CE\", \"CY\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 3, \"CIO\", \"CIE\", \"CIA\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    }\n    int += 2;\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \" C\", \" Q\", \" G\")) {\n        int += 3;\n    } else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"C\", \"K\", \"Q\")) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"CE\", \"CI\")))) {\n        int += 2;\n    } else {\n        int++;\n    }\n}"},"status":-2},{"failures":[],"tindex":"9efdb5e4-4306-11e5-8318-772eb8e6bff8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:484","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 12))) & (org.apache.commons.codec.binary.Base32.int))]"},"variableMap":{"encodeTable":"buffer","pos":"pos","org.apache.commons.codec.binary.Base32.MASK_5BITS":"pos","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:387","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2},{"failures":[93,94,96,120,123,124,125,126],"tindex":"9efdb5e5-4306-11e5-8318-4ff60ffb2dba","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:117","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('0')"},"variableMap":{"builder":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:76","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(org.apache.commons.codec.net.RFC1522Codec.getEncoding())"},"status":-1},{"failures":[],"tindex":"9efdb5e6-4306-11e5-8318-79a2ec4c9583","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:224","type":"CtOperatorAssignmentImpl","sourcecode":"int -= 16"},"variableMap":{"ii":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:488","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-2},{"failures":[],"tindex":"9efdb5e7-4306-11e5-8318-b56a4ac9a4c3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:225","type":"CtOperatorAssignmentImpl","sourcecode":"int -= int"},"variableMap":{"blocksize":"eSwap0","cnt":"eSwap1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:287","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.dEncrypt(int, int, int, int, int, int[])"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":19,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
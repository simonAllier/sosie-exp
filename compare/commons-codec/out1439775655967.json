{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":0,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":36,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":49,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":5,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":6,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":64,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":10,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":54,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":8,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":46,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":9,"org.apache.commons.codec.binary.Base64Test.testBase64":52,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":11,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":34,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":33,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":63,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":25,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":2,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":32,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":61,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":51,"org.apache.commons.codec.binary.Base64Test.testPairs":41,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":48,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":53,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":55,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":19,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":18,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":62,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":23,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":43,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":44,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":47,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":60,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":15,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":16,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":38,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":17,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":45,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":37,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":26,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":35,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":30,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":27,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":57,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":59,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":12,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":28,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":4,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":31,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":24,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":3,"org.apache.commons.codec.language.SoundexTest.testB650":7,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":56,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":22,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":29,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":40,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":65,"org.apache.commons.codec.language.SoundexTest.testNewInstance":14,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":50,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":21,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":39,"org.apache.commons.codec.language.SoundexTest.testDifference":13,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":58,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":1,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":42,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":20},"transformations":[{"failures":[],"tindex":"00d2e7e3-4481-11e5-ae9f-1b17de582d3a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:232","type":"CtReturnImpl","sourcecode":"return (org.apache.commons.codec.binary.BaseNCodec.Context.byte[]) != null ? (org.apache.commons.codec.binary.BaseNCodec.Context.int) - (org.apache.commons.codec.binary.BaseNCodec.Context.int) : 0"},"variableMap":{"pos":"offset","context":"context","buffer":"b","readPos":"offset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.NullPointerException();\n} else if ((int < 0) || (int < 0)) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if ((int > (byte[].int)) || ((int + int) > (byte[].int))) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if (int == 0) {\n    return 0;\n} else {\n    int int = 0;\n    while (int == 0) {\n        if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n            final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n            final int int = java.io.InputStream.read(byte[]);\n            if (boolean) {\n                org.apache.commons.codec.binary.BaseNCodec.encode(byte[], 0, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n            } else {\n                org.apache.commons.codec.binary.BaseNCodec.decode(byte[], 0, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n            }\n        } \n        int = org.apache.commons.codec.binary.BaseNCodec.readResults(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n    }\n    return int;\n}"},"status":-2},{"failures":[],"tindex":"00d30ef4-4481-11e5-ae9f-c1fddbc42fcc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:215","type":"CtReturnImpl","sourcecode":"return byte[]"},"status":-2},{"failures":[],"tindex":"00d30ef5-4481-11e5-ae9f-ef93b3f9b00a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtIfImpl","sourcecode":"if (java.lang.String.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    java.lang.String = java.lang.String.substring(0, ((java.lang.String.length()) - 1));\n} "},"variableMap":{"str":"value","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:684","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 2), 2, \"OM\", \"AM\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 4, \"VAN \", \"VON \"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 3, \"SCH\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('0', 'T');\n}"},"status":-2},{"failures":[0,1,2],"tindex":"00d33606-4481-11e5-ae9f-37ab0719a9a1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:338","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"KS\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:520","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('H')"},"status":-1},{"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"tindex":"00d33607-4481-11e5-ae9f-c17663246fd9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:357","type":"CtAssignmentImpl","sourcecode":"char = '2'"},"variableMap":{"code":"last"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:278","type":"CtAssignmentImpl","sourcecode":"char = char"},"status":-1},{"failures":[],"tindex":"00d33608-4481-11e5-ae9f-235b195a460d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} "},"variableMap":{"charset":"lang"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:357","type":"CtIfImpl","sourcecode":"if (java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> == null) {\n    throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", org.apache.commons.codec.language.bm.NameType.getName(), org.apache.commons.codec.language.bm.RuleType.getName(), java.lang.String));\n} "},"status":-2},{"failures":[],"tindex":"00d35d19-4481-11e5-ae9f-57a4c1703618","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:431","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = java.lang.String.toCharArray()"},"variableMap":{"text":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:103","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = java.lang.String.toUpperCase(java.util.Locale.java.util.Locale).toCharArray()"},"status":-2},{"failures":[],"tindex":"00d35d1a-4481-11e5-ae9f-9b741c76af62","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.toString(), byte[])"},"variableMap":{"this":"this","key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_256"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:99","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, byte[])"},"status":-2},{"failures":[],"tindex":"00d35d1b-4481-11e5-ae9f-996bf24a4be5","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:62","type":"CtIfImpl","sourcecode":"if (char == char) {\n    continue;\n} "},"variableMap":{"c1":"chr","c2":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:382","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '8';\n} else if (char == 'R') {\n    char = '7';\n} else if (char == 'L') {\n    char = '5';\n} else if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"status":0},{"failures":[20,21,22,23,24,25],"tindex":"00d3842c-4481-11e5-ae9f-4dd40e5dca5d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:482","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][34], byte[][55], byte[][13], 4, java.lang.StringBuilder)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:457","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][0], byte[][10], byte[][20], 4, java.lang.StringBuilder)"},"status":-1},{"failures":[],"tindex":"00d3842d-4481-11e5-ae9f-8fee92313444","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:162","type":"CtIfImpl","sourcecode":"if (int > (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    final java.lang.String java.lang.String = java.lang.String.substring(0, org.apache.commons.codec.language.MatchRatingApproachEncoder.int);\n    final java.lang.String java.lang.String = java.lang.String.substring((int - (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)), int);\n    return java.lang.String + java.lang.String;\n} else {\n    return java.lang.String;\n}"},"variableMap":{"nameLength":"txtLength","name":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"txtLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX":"txtLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:95","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || ((int = java.lang.String.length()) == 0)) {\n    return \"\";\n} "},"status":-2},{"failures":[],"tindex":"00d3842e-4481-11e5-ae9f-fbcb08f1011c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:94","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set(']')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:73","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('(')"},"status":-2},{"failures":[26,27,28,29],"tindex":"00d3842f-4481-11e5-ae9f-21af11588651","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:621","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"variableMap":{"str":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:126","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(java.lang.String.getBytes(org.apache.commons.codec.Charsets.java.nio.charset.Charset), java.lang.String)"},"status":-1},{"failures":[30,1,2],"tindex":"00d3ab40-4481-11e5-ae9f-0324bfaef089","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(java.lang.String)) {\n    boolean = true;\n    break;\n} "},"status":-1},{"failures":[31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"tindex":"00d3ab41-4481-11e5-ae9f-17ca6786c7e5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:69","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:360","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-1},{"failures":[],"tindex":"00d3ab42-4481-11e5-ae9f-7b5a83be6ae9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:133","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:47","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[30,0,1,2],"tindex":"00d3ab43-4481-11e5-ae9f-efdbe3a49e95","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:670","type":"CtReturnImpl","sourcecode":"return int + 3"},"variableMap":{"index":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:300","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.DoubleMetaphone.handleCC(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int)"},"status":-1},{"failures":[],"tindex":"00d3d254-4481-11e5-ae9f-6ff5891bcaf6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:94","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:611","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha384(java.io.InputStream))"},"status":-2},{"failures":[57,58,60,61,62,63,64,65],"tindex":"00d3d255-4481-11e5-ae9f-3757e84db58d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:420","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String + java.lang.String"},"variableMap":{"l":"text","remainder":"text"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:147","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.substring(int, int)"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":19,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
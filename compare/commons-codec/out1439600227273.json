{"failureDictionary":{"org.apache.commons.codec.binary.HexTest.testCustomCharset":2,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":36,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":12,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":50,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":29,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":43,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":14,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":30,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":18,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":17,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":22,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":16,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":11,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":55,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":38,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":10,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":15,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":34,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":54,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":31,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay":44,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":45,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":3,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":35,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":28,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":39,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":47,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":21,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":23,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":48,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":4,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":46,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":56,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":20,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":49,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":53,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":32,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":26,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":13,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":27,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":7,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":51,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":9,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":52,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":41,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":42,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero":37,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":6,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":40,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":33,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":24,"org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull":5,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.language.MetaphoneTest.testTCH":25,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":8,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":19},"transformations":[{"failures":[],"tindex":"8d2cb01c-42e8-11e5-995b-6f10a6678edb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:768","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], int, byte[], int, int)"},"variableMap":{"resizedBytes":"buffer","bigBytes":"buffer","len":"modulus","startSrc":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","startDst":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:359","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.binary.BaseNCodec.Context.int) == 0) {\n    byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n    byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n    byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n    byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n    byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.long) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n} "},"status":-2},{"failures":[],"tindex":"8d2cfe3d-42e8-11e5-995b-118153886424","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtIfImpl","sourcecode":"if ((java.lang.String.length()) == 0) {\n    return java.lang.String;\n} "},"variableMap":{"str":"source"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"status":0},{"failures":[0,1],"tindex":"8d2cfe3e-42e8-11e5-995b-a949baccec8c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:707","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"status":-1},{"failures":[],"tindex":"8d2cfe3f-42e8-11e5-995b-3567781549af","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:361","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 4) & (org.apache.commons.codec.binary.Base64.int))]"},"variableMap":{"encodeTable":"encodeTable","ibitWorkArea":"org.apache.commons.codec.binary.Base32.MASK_5BITS","pos":"pos","context":"context","org.apache.commons.codec.binary.Base64.MASK_6BITS":"org.apache.commons.codec.binary.Base32.MASK_5BITS","buffer":"encodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:461","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 11))) & (org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[2,3,4],"tindex":"8d2d2550-42e8-11e5-995b-1ba4d2d6123a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:200","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.byte[]"},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"array"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:275","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.encodeHexString(byte[]).getBytes(org.apache.commons.codec.binary.Hex.getCharset())"},"status":-1},{"failures":[5],"tindex":"8d2d2551-42e8-11e5-995b-b18e453d9b49","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((java.lang.String.length()) == 0) {\n    return null;\n} "},"variableMap":{"input":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:138","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"status":-1},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18],"tindex":"8d2d2552-42e8-11e5-995b-79626c649638","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (int == (org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"lineLength","len":"lineLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:518","type":"CtIfImpl","sourcecode":"if (((int) > 0) && ((int) <= (org.apache.commons.codec.binary.BaseNCodec.Context.int))) {\n    java.lang.System.arraycopy(byte[], 0, byte[], org.apache.commons.codec.binary.BaseNCodec.Context.int, byte[].int);\n    org.apache.commons.codec.binary.BaseNCodec.Context.int += byte[].int;\n    org.apache.commons.codec.binary.BaseNCodec.Context.int = 0;\n} "},"status":-1},{"failures":[],"tindex":"8d2d4c63-42e8-11e5-995b-2f03a6cb144c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:388","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[],"tindex":"8d2d4c64-42e8-11e5-995b-25e5be1221f6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:473","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 9))) & (org.apache.commons.codec.binary.Base32.int))]"},"variableMap":{"encodeTable":"buffer","pos":"pos","org.apache.commons.codec.binary.Base32.MASK_5BITS":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:380","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 2) & (org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2},{"failures":[19,20,21,22],"tindex":"8d2d4c65-42e8-11e5-995b-fb389720cccb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:234","type":"CtForImpl","sourcecode":"for ( ; int < 13 ; int++) {\n    int int = 0;\n    int int = 0;\n    for ( ; int < 6 ; int++) {\n        int <<= 1;\n        if (((byte[][int]) & int) != 0) {\n            int |= 1;\n        } \n        int >>>= 1;\n        if (int == 0) {\n            int++;\n            int = 128;\n        } \n        java.lang.StringBuilder.setCharAt(int, ((char)(org.apache.commons.codec.digest.UnixCrypt.int[][int])));\n    }\n}"},"status":-1},{"failures":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"tindex":"8d2d7376-42e8-11e5-995b-250b9b42d8c3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:297","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1))"},"variableMap":{"key":"local"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:142","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(char[])"},"status":-1},{"failures":[45,46,47,48,49],"tindex":"8d2d7377-42e8-11e5-995b-67353d2a3c93","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:386","type":"CtIfImpl","sourcecode":"if (char == 'L') {\n    char = '5';\n} else if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"variableMap":{"code":"code","chr":"lastChar"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:376","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) || (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n    char = '8';\n} else {\n    char = '4';\n}"},"status":-1},{"failures":[],"tindex":"8d2d7378-42e8-11e5-995b-831d1b7dd48f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:299","type":"CtLocalVariableImpl","sourcecode":"final int int = (java.lang.String.length()) - 1"},"status":-2},{"failures":[],"tindex":"8d2d7379-42e8-11e5-995b-ed45607b8283","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:93","type":"CtAssignmentImpl","sourcecode":"byte[][int] = ((byte)(int & 255))"},"variableMap":{"f":"pos","i":"pos","out":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:390","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][((org.apache.commons.codec.binary.BaseNCodec.Context.int) & (org.apache.commons.codec.binary.Base64.int))]"},"status":-2},{"failures":[],"tindex":"8d2d9a8a-42e8-11e5-995b-9fd268638969","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    java.lang.String = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (java.lang.String.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern.matcher(java.lang.String);\n    if ((java.util.regex.Matcher == null) || (!(java.util.regex.Matcher.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + java.lang.String));\n    } \n    java.lang.String = java.util.regex.Matcher.group(1);\n}"},"variableMap":{"saltString":"org.apache.commons.codec.net.RFC1522Codec.POSTFIX","salt":"org.apache.commons.codec.net.RFC1522Codec.PREFIX","prefix":"text"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:129","type":"CtIfImpl","sourcecode":"if ((!(java.lang.String.startsWith(org.apache.commons.codec.net.RFC1522Codec.java.lang.String))) || (!(java.lang.String.endsWith(org.apache.commons.codec.net.RFC1522Codec.java.lang.String)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} "},"status":-2},{"failures":[50,51,52],"tindex":"8d2d9a8b-42e8-11e5-995b-e3a79bd9ace6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:466","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][9], byte[][19], byte[][29], 4, java.lang.StringBuilder)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:474","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][47], byte[][5], byte[][26], 4, java.lang.StringBuilder)"},"status":-1},{"failures":[53],"tindex":"8d2d9a8c-42e8-11e5-995b-fd1e2ff40ff5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:128","type":"CtReturnImpl","sourcecode":"return java.lang.String.substring(0, org.apache.commons.codec.language.Caverphone2.java.lang.String.length())"},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"str","txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:43","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"status":-1},{"failures":[],"tindex":"8d2dc19d-42e8-11e5-995b-d1f6d8be1615","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:95","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"k+\", \"K\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:102","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"why\", \"Why\")"},"status":1},{"failures":[54,55],"tindex":"8d2dc19e-42e8-11e5-995b-338ecbe6cd97","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:251","type":"CtAssignmentImpl","sourcecode":"byte[][(int - int)] = '0'"},"status":-1},{"failures":[0,1,56],"tindex":"8d2dc19f-42e8-11e5-995b-bf1657a63e70","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:146","type":"CtAssignmentImpl","sourcecode":"boolean = false"},"variableMap":{"inExtendedComment":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:878","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
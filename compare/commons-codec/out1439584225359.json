{"failureDictionary":{"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":82,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":1,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":8,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":36,"org.apache.commons.codec.language.NysiisTest.testSnat":51,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":35,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":28,"org.apache.commons.codec.language.NysiisTest.testDropBy":53,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":64,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":40,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":24,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":18,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":70,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":3,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":38,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":68,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":71,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":9,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":12,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":14,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":27,"org.apache.commons.codec.binary.Base64Test.testConstructors":7,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":17,"org.apache.commons.codec.language.NysiisTest.testRule2":45,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":13,"org.apache.commons.codec.language.NysiisTest.testRule1":44,"org.apache.commons.codec.language.NysiisTest.testRule7":48,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":21,"org.apache.commons.codec.language.NysiisTest.testRule6":47,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":78,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":80,"org.apache.commons.codec.language.NysiisTest.testRule5":46,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":61,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":69,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":60,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":19,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":25,"org.apache.commons.codec.language.NysiisTest.testCap":41,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":77,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":52,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":59,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":4,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":30,"org.apache.commons.codec.language.NysiisTest.testBran":49,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":56,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":76,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":63,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":26,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":31,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":65,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":62,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":15,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":20,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":11,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":0,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":33,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":10,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":66,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":73,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":75,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":6,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":37,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":32,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":34,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":22,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":79,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":58,"org.apache.commons.codec.language.NysiisTest.testDad":42,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":5,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":72,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":16,"org.apache.commons.codec.language.NysiisTest.testOthers":54,"org.apache.commons.codec.language.NysiisTest.testTranan":55,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":29,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":39,"org.apache.commons.codec.language.NysiisTest.testDan":43,"org.apache.commons.codec.language.NysiisTest.testFal":67,"org.apache.commons.codec.language.NysiisTest.testSnad":50,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":74,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":2,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":81,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":23,"org.apache.commons.codec.language.NysiisTest.testLocaleIndependence":57},"transformations":[{"failures":[0,1,2,3],"tindex":"4b483f68-42c3-11e5-92bf-e3ec866d4a43","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:728","type":"CtOperatorAssignmentImpl","sourcecode":"int += 4"},"variableMap":{"index":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:166","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.handleS(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int, boolean)"},"status":-1},{"failures":[],"tindex":"4b486679-42c3-11e5-92bf-e3ce3bde0e34","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:78","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('-')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:67","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('\\\"')"},"status":-2},{"failures":[],"tindex":"4b48667a-42c3-11e5-92bf-6f37e17fe690","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (int > int) {\n    break;\n} "},"variableMap":{"i":"org.apache.commons.codec.digest.HmacUtils.STREAM_BUFFER_LENGTH","name2Size":"read"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:769","type":"CtWhileImpl","sourcecode":"while (int > (-1)) {\n    javax.crypto.Mac.update(byte[], 0, int);\n    int = java.io.InputStream.read(byte[], 0, org.apache.commons.codec.digest.HmacUtils.int);\n}"},"status":-2},{"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38],"tindex":"4b48667b-42c3-11e5-92bf-31c6639ddda7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:284","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.byte[]"},"variableMap":{"encodeTable":"lineSeparator","org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:285","type":"CtAssignmentImpl","sourcecode":"this.byte[] = new byte[byte[].int]"},"status":-1},{"failures":[],"tindex":"4b48667c-42c3-11e5-92bf-abcc02a5c8fe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!boolean) {\n    return false;\n} "},"variableMap":{"ignoreCase":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:882","type":"CtReturnImpl","sourcecode":"return boolean"},"status":-2},{"failures":[],"tindex":"4b48667d-42c3-11e5-92bf-4df527a5ea42","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:282","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"variableMap":{"index":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:477","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"tindex":"4b48667e-42c3-11e5-92bf-f143d7a7273f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:614","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(1)"},"variableMap":{"str":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:270","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(java.lang.String).replaceFirst(\"D\")"},"status":-1},{"failures":[],"tindex":"4b488d8f-42c3-11e5-92bf-5bebaf828af1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((java.lang.String.length()) == 0) {\n    return null;\n} "},"variableMap":{"input":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:256","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"status":-2},{"failures":[],"tindex":"4b488d90-42c3-11e5-92bf-45cb19e3f91c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:193","type":"CtIfImpl","sourcecode":"if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"org.apache.commons.codec.binary.BaseNCodec.EOF","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"org.apache.commons.codec.binary.BaseNCodec.EOF","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"org.apache.commons.codec.binary.BaseNCodec.EOF","minRating":"org.apache.commons.codec.binary.BaseNCodec.EOF","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"org.apache.commons.codec.binary.BaseNCodec.EOF"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:147","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.decode(byte[], 0, org.apache.commons.codec.binary.BaseNCodec.int, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-2},{"failures":[58],"tindex":"4b488d91-42c3-11e5-92bf-5d2313e73d78","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:427","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"$\")"},"variableMap":{"buffer":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:180","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('X')"},"status":-1},{"failures":[],"tindex":"4b488d92-42c3-11e5-92bf-955d143e7264","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:493","type":"CtOperatorAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int += (org.apache.commons.codec.binary.BaseNCodec.Context.int) - int"},"variableMap":{"currentLinePos":"pos","savedPos":"pos","pos":"pos","context":"context"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:407","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-2},{"failures":[],"tindex":"4b488d93-42c3-11e5-92bf-a9416a99a206","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:844","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'M') {\n    return true;\n} "},"variableMap":{"this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:831","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, ((java.lang.String.length()) - 2), 2, \"AS\", \"OS\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, ((java.lang.String.length()) - 1), 1, \"A\", \"O\"))) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 4, \"ALLE\"))) {\n    return true;\n} else {\n    return false;\n}"},"status":-2},{"failures":[],"tindex":"4b48b4a4-42c3-11e5-92bf-a95dcb8ee615","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:376","type":"CtAssignmentImpl","sourcecode":"int = (int >>> 16) | (int & -65536)"},"variableMap":{"s":"pos","t":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:251","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int = 0"},"status":-2},{"failures":[59,60,61,62,63,64,65,66],"tindex":"4b48b4a5-42c3-11e5-92bf-31671b1b266a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:301","type":"CtIfImpl","sourcecode":"if (char == char) {\n    return true;\n} "},"variableMap":{"key":"key","element":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:300","type":"CtForEachImpl","sourcecode":"for (final char char : char[]) {\n    if (char == char) {\n        return true;\n    } \n}"},"status":-1},{"failures":[39,40,41,42,43,67,44,45,47,49,50,51,52,53,54,55,56],"tindex":"4b48b4a6-42c3-11e5-92bf-2b1e926b4b17","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:288","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(char[][int])"},"status":-1},{"failures":[68,69,70,71,72,73,74,75],"tindex":"4b48b4a7-42c3-11e5-92bf-fb59e1546e8b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:297","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1))"},"variableMap":{"key":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:74","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(java.nio.charset.Charset)"},"status":-1},{"failures":[76,77],"tindex":"4b48b4a8-42c3-11e5-92bf-cd39e95431de","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:297","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1))"},"variableMap":{"key":"local"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:113","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(char[], 1, ((char[].int) - 1))"},"status":-1},{"failures":[0,2,3],"tindex":"4b48b4a9-42c3-11e5-92bf-6399efde8c2d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:659","type":"CtIfImpl","sourcecode":"if (((int == 0) && (!org.apache.commons.codec.language.DoubleMetaphone.(isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, 3))))) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, 3)) != 'W')) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'S');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n}"},"variableMap":{"result":"result","this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:471","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 2))) == 'I') {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n}"},"status":-1},{"failures":[],"tindex":"4b48dbba-42c3-11e5-92bf-fdec9142cae2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:335","type":"CtReturnImpl","sourcecode":"return int"},"variableMap":{"el":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:131","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int < 0)) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if ((int > (byte[].int)) || ((int + int) > (byte[].int))) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if (int == 0) {\n    return 0;\n} else {\n    int int = 0;\n    while (int == 0) {\n        if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n            final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n            final int int = java.io.InputStream.read(byte[]);\n            if (boolean) {\n                org.apache.commons.codec.binary.BaseNCodec.encode(byte[], 0, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n            } else {\n                org.apache.commons.codec.binary.BaseNCodec.decode(byte[], 0, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n            }\n        } \n        int = org.apache.commons.codec.binary.BaseNCodec.readResults(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n    }\n    return int;\n}"},"status":-2},{"failures":[78,79,80,81,82],"tindex":"4b48dbbb-42c3-11e5-92bf-ebb24dc905ad","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:253","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.apache.commons.codec.language.SoundexUtils.clean(java.lang.String)"},"variableMap":{"str":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:60","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^rough\", \"rou2f\")"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"},"diffs":[{"transformation":"4b48667d-42c3-11e5-92bf-4df527a5ea42","diffs":[{"branches":{"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":["org.apache.commons.codec.binary.Base64_void_encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).s11","org.apache.commons.codec.binary.Base64_void_encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).t4","org.apache.commons.codec.binary.BaseNCodec_byte[]_resizeBuffer(org.apache.commons.codec.binary.BaseNCodec$Context).e1","org.apache.commons.codec.binary.Base64_void_decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).s9"]},"type":"branch"}]}]}
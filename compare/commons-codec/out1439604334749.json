{"failureDictionary":{"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":4,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":37,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":39,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":11,"org.apache.commons.codec.binary.HexTest.testCustomCharset":12,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":18,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":14,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":35,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":27,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":26,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":13,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":10,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":31,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":20,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":28,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":25,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":21,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":23,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":29,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":6,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":15,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":16,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":36,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":1,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":19,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":22,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":24,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":9,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":7,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":0,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":2,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":8,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":30,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":32,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":17,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":3,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":34,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":40,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":33,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail":38,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":41,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":5},"transformations":[{"failures":[],"tindex":"1d6b7b7f-42f2-11e5-be12-c1225496e905","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:339","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[32]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:342","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[2]"},"status":-2},{"failures":[0,1,2,3,4],"tindex":"1d6bc9a0-42f2-11e5-be12-217368a80f20","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:253","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.apache.commons.codec.language.SoundexUtils.clean(java.lang.String)"},"variableMap":{"str":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:61","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^tough\", \"tou2f\")"},"status":-1},{"failures":[],"tindex":"1d6bc9a1-42f2-11e5-be12-39e9f60162d5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:531","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.decode(((byte[])(java.lang.Object)))"},"status":-2},{"failures":[5,6],"tindex":"1d6bc9a2-42f2-11e5-be12-e77be9c5d7a0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:763","type":"CtAssignmentImpl","sourcecode":"int = 1"},"variableMap":{"startSrc":"u"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:329","type":"CtAssignmentImpl","sourcecode":"int = ((int ^ (int << 16)) ^ int) ^ (int[][int])"},"status":-1},{"failures":[],"tindex":"1d6bf0b3-42f2-11e5-be12-bba8495ca4b3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:173","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.Base64.this(0)"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:242","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.Base64.this(int, byte[], false)"},"status":-2},{"failures":[7,8,9,10,11],"tindex":"1d6bf0b4-42f2-11e5-be12-ab2f7ab1a85e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:225","type":"CtInvocationImpl","sourcecode":"java.io.ByteArrayOutputStream.write(int)"},"status":-1},{"failures":[],"tindex":"1d6bf0b5-42f2-11e5-be12-b9c9c173b1d7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:329","type":"CtLocalVariableImpl","sourcecode":"char char"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:282","type":"CtLocalVariableImpl","sourcecode":"final char char = int < (int - 2) ? char[][(int + 2)] : org.apache.commons.codec.language.Nysiis.char"},"status":-2},{"failures":[],"tindex":"1d6bf0b6-42f2-11e5-be12-e781ec5ad71c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:240","type":"CtReturnImpl","sourcecode":"return new java.lang.IllegalStateException(((java.lang.String + \": \") + java.io.UnsupportedEncodingException))"},"status":-2},{"failures":[12,13],"tindex":"1d6bf0b7-42f2-11e5-be12-01b7ddd6774d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.Charsets:87","type":"CtInvocationImpl","sourcecode":"java.nio.charset.Charset.defaultCharset()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:232","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.Hex.getCharset()"},"status":-1},{"failures":[],"tindex":"1d6c17c8-42f2-11e5-be12-fdc2be9881e2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:386","type":"CtIfImpl","sourcecode":"if (char == 'L') {\n    char = '5';\n} else if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"variableMap":{"code":"ch","chr":"ch"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:522","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>) {\n    for (final java.lang.String java.lang.String : java.lang.String[]) {\n        final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = boolean ? org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.createBranch() : org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch;\n        final boolean boolean = ((char == 'm') && (char == 'n')) || ((char == 'n') && (char == 'm'));\n        org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.processNextReplacement(java.lang.String, boolean);\n        if (boolean) {\n            java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.add(org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch);\n        } else {\n            break;\n        }\n    }\n}"},"status":-2},{"failures":[14,15,16,17,18,19,20,21,22],"tindex":"1d6c17c9-42f2-11e5-be12-69117f4bd701","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:465","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][18], byte[][28], byte[][8], 4, java.lang.StringBuilder)"},"variableMap":{"altResult":"finalb","buffer":"passwd"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:285","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][2], byte[][8], byte[][14], 4, java.lang.StringBuilder)"},"status":-1},{"failures":[],"tindex":"1d6c17ca-42f2-11e5-be12-a1e1510cc46a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:599","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 3, \"ISL\", \"YSL\")) {\n    int++;\n} else if ((int == 0) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 5, \"SUGAR\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'S');\n    int++;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"SH\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n    }\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 3, \"SIO\", \"SIA\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 4, \"SIAN\"))) {\n    if (boolean) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    }\n    int += 3;\n} else if (((int == 0) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"Z\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"Z\") ? int + 2 : int + 1;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"SC\")) {\n    int = org.apache.commons.codec.language.DoubleMetaphone.handleSC(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int);\n} else {\n    if ((int == ((java.lang.String.length()) - 1)) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 2, \"AI\", \"OI\"))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('S');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    }\n    int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"S\", \"Z\") ? int + 2 : int + 1;\n}"},"status":-2},{"failures":[23,24,25,26,27,28,29,30,31,32,33,34,35],"tindex":"1d6c3edb-42f2-11e5-be12-13b2cae14afc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:280","type":"CtContinueImpl","sourcecode":"continue"},"status":-1},{"failures":[36],"tindex":"1d6c65ec-42f2-11e5-be12-d367eba764d4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:894","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[],"tindex":"1d6c65ed-42f2-11e5-be12-b9fadd2a8fa1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:193","type":"CtIfImpl","sourcecode":"if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"pos","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"pos","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"length","minRating":"length","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:393","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, byte[], org.apache.commons.codec.binary.BaseNCodec.Context.int, byte[].int)"},"status":-2},{"failures":[],"tindex":"1d6c65ee-42f2-11e5-be12-9539c57936f4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:472","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int = (org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 4"},"variableMap":{"ibitWorkArea":"len","context":"context"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:295","type":"CtOperatorAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int += int"},"status":-2},{"failures":[2,3],"tindex":"1d6c65ef-42f2-11e5-be12-d918a6098d93","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:88","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(java.lang.String, org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"str":"txt","upperName":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:52","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.toLowerCase(java.util.Locale.java.util.Locale)"},"status":-1},{"failures":[],"tindex":"1d6c8c00-42f2-11e5-be12-2f5eacf2c01e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:371","type":"CtReturnImpl","sourcecode":"return (int + 1) == int"},"variableMap":{"wdsz":"index","n":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:782","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 4, \"CHIA\")) {\n    return true;\n} else if (int <= 1) {\n    return false;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int - 2)))) {\n    return false;\n} else if (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 3, \"ACH\"))) {\n    return false;\n} else {\n    final char char = org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int + 2));\n    return ((char != 'I') && (char != 'E')) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 6, \"BACHER\", \"MACHER\"));\n}"},"status":1},{"failures":[37,38,39],"tindex":"1d6c8c01-42f2-11e5-be12-f7847051f055","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:706","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.binary.Base64().decode(byte[])"},"variableMap":{"base64Data":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:314","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byte[]).doFinal(byte[])"},"status":-1},{"failures":[40,41],"tindex":"1d6c8c02-42f2-11e5-be12-3d2cc7d0ca3b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:350","type":"CtIfImpl","sourcecode":"if (char == '/') {\n    continue;\n} "},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"},"diffs":[{"transformation":"1d6c8c00-42f2-11e5-be12-2f5eacf2c01e","diffs":[{"nodes":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":["org.apache.commons.codec.language.DoubleMetaphone.boolean isVowel(char)"]},"edges":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":["org.apache.commons.codec.language.DoubleMetaphone.boolean conditionC0(java.lang.String,int) -> org.apache.commons.codec.language.DoubleMetaphone.char charAt(java.lang.String,int)","org.apache.commons.codec.language.DoubleMetaphone.boolean conditionC0(java.lang.String,int) -> org.apache.commons.codec.language.DoubleMetaphone.boolean contains(java.lang.String,int,int,java.lang.String[])","org.apache.commons.codec.language.DoubleMetaphone.boolean conditionC0(java.lang.String,int) -> org.apache.commons.codec.language.DoubleMetaphone.boolean isVowel(char)"],"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":["org.apache.commons.codec.language.DoubleMetaphone.boolean conditionC0(java.lang.String,int) -> org.apache.commons.codec.language.DoubleMetaphone.char charAt(java.lang.String,int)","org.apache.commons.codec.language.DoubleMetaphone.boolean conditionC0(java.lang.String,int) -> org.apache.commons.codec.language.DoubleMetaphone.boolean contains(java.lang.String,int,int,java.lang.String[])","org.apache.commons.codec.language.DoubleMetaphone.boolean conditionC0(java.lang.String,int) -> org.apache.commons.codec.language.DoubleMetaphone.boolean isVowel(char)"]},"type":"graph"},{"branches":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":["org.apache.commons.codec.language.DoubleMetaphone_boolean_isVowel(char).b"],"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":["org.apache.commons.codec.language.DoubleMetaphone_int_handleC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int).t1"]},"type":"branch"}]}]}
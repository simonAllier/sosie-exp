{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":40,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":2,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":19,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":7,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":67,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":50,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":66,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":49,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":55,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":63,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":81,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":39,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":31,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":54,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":51,"org.apache.commons.codec.net.URLCodecTest.testEncodeNull":58,"org.apache.commons.codec.binary.Base64Test.testBase64":37,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":0,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":17,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":16,"org.apache.commons.codec.binary.Base64Test.testTriplets":22,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":61,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":4,"org.apache.commons.codec.binary.Base64Test.testUUID":24,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":59,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":62,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":15,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":34,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":36,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":85,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":69,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":80,"org.apache.commons.codec.binary.Base64Test.testConstructors":84,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":87,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":33,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":72,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":38,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":41,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":75,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":73,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":27,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":78,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":28,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":32,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":5,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":29,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":83,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":30,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":20,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":11,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":18,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":79,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":10,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":70,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":74,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":8,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":1,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":65,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":12,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":13,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":43,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":86,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":45,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":60,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":6,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":48,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":46,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":68,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":52,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":56,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":64,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":14,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":76,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":57,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":42,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":9,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":47,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":23,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":71,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":26,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":35,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":21,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":53,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":82,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":44,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":3,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":25,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":77},"transformations":[{"failures":[0,1,2,3,4],"tindex":"1409ddba-43c4-11e5-87ab-8f5a5c818f27","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:922","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(java.lang.String)) {\n    boolean = true;\n    break;\n} "},"status":-1},{"failures":[],"tindex":"140a2bdb-43c4-11e5-87ab-05fcc6ebd8f7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:662","type":"CtIfImpl","sourcecode":"if ((byte[] == null) || ((byte[].int) == 0)) {\n    return byte[];\n} "},"variableMap":{"binaryData":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","length":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:172","type":"CtIfImpl","sourcecode":"if ((char[] == null) || ((char[].int) == 0)) {\n    return org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"status":-2},{"failures":[],"tindex":"140a52ec-43c4-11e5-87ab-53562e49eb75","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:783","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[5,6,7,8],"tindex":"140a79fd-43c4-11e5-87ab-4b9648b3d77b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:165","type":"CtReturnImpl","sourcecode":"return byte[]"},"variableMap":{"data":"binaryData"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:606","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.encodeBase64(byte[], true)"},"status":-1},{"failures":[9,10,11,12,13],"tindex":"140a79fe-43c4-11e5-87ab-910859e5ffee","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:388","type":"CtIfImpl","sourcecode":"if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"variableMap":{"code":"current","chr":"current"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:195","type":"CtIfImpl","sourcecode":"if (char != 0) {\n    java.lang.StringBuilder.append(char);\n} "},"status":-1},{"failures":[14,15,16,17,18,19,20,5,21,22,23,24,25,26,27,28,29,30,31,32,33,34,7,8,35,36,37,38,39,40,41,42,43,44,45],"tindex":"140aa10f-43c4-11e5-87ab-69bbead168d3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:389","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 6) & (org.apache.commons.codec.binary.Base64.int))]"},"status":-1},{"failures":[],"tindex":"140ac820-43c4-11e5-87ab-756072da0fc2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (int == ' ') {\n    int = '+';\n} "},"variableMap":{"b":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:453","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'G') {\n    int += 2;\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n} else {\n    int++;\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n}"},"status":0},{"failures":[46,47,48,49,50,51,52,53,54],"tindex":"140ac821-43c4-11e5-87ab-89e5ec4f5997","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:303","type":"CtIfImpl","sourcecode":"if ((java.lang.String[].int) != 4) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (java.lang.String[].int)) + \" parts: \") + java.lang.String) + \" in \") + java.lang.String));\n} else {\n    try {\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][0]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][1]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][2]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][3]);\n        final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(java.lang.String , java.lang.String , java.lang.String , java.lang.String);\n        final char char = org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.java.lang.String.charAt(0);\n        java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(char);\n        if (java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> == null) {\n            java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n            java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.put(char, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>);\n        } \n        java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>.add(org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule);\n    } catch (final java.lang.IllegalArgumentException e) {\n        throw new java.lang.IllegalStateException((((\"Problem parsing line \\'\" + int) + \"\\' in \") + java.lang.String) , java.lang.IllegalArgumentException);\n    }\n}"},"status":-1},{"failures":[55,56,57],"tindex":"140b1642-43c4-11e5-87ab-49c4c3d18650","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"altResult"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:481","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][12], byte[][33], byte[][54], 4, java.lang.StringBuilder)"},"status":-1},{"failures":[],"tindex":"140b3d53-43c4-11e5-87ab-15bd555b5ba9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:134","type":"CtLocalVariableImpl","sourcecode":"int int = java.lang.String.indexOf(org.apache.commons.codec.net.RFC1522Codec.char, int)"},"status":-2},{"failures":[58],"tindex":"140b6464-43c4-11e5-87ab-6bf39f4e91e3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:123","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[],"tindex":"140b6465-43c4-11e5-87ab-3372e0668a20","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:85","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"z\", \"s\")"},"status":0},{"failures":[],"tindex":"140b6466-43c4-11e5-87ab-8935c322aa7b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:621","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"variableMap":{"str":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:250","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QCodec.encode(java.lang.String, org.apache.commons.codec.net.QCodec.getCharset())"},"status":-2},{"failures":[59,60,61,62],"tindex":"140b8b77-43c4-11e5-87ab-13cfa015c553","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:224","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:245","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[63,1,2,3,4],"tindex":"140b8b78-43c4-11e5-87ab-9fd7d3b6c091","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:719","type":"CtIfImpl","sourcecode":"if ((((int == ((java.lang.String.length()) - 1)) && org.apache.commons.codec.language.DoubleMetaphone.(isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int - 1))))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 3, \"SCH\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('F');\n    int++;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 4, \"WICZ\", \"WITZ\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"TS\", \"FX\");\n    int += 4;\n} else {\n    int++;\n}"},"variableMap":{"result":"result","this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:385","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"DG\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 2), 1, \"I\", \"E\", \"Y\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n        int += 3;\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"TK\");\n        int += 2;\n    }\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"DT\", \"DD\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T');\n    int += 2;\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T');\n    int++;\n}"},"status":-1},{"failures":[],"tindex":"140bd999-43c4-11e5-87ab-89cbffc591b0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:321","type":"CtReturnImpl","sourcecode":"return null"},"status":0},{"failures":[],"tindex":"140c00aa-43c4-11e5-87ab-1f1f2522c170","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:304","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"variableMap":{"lineSeparator":"org.apache.commons.codec.binary.Base32.DECODE_TABLE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:288","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.byte[]"},"status":-2},{"failures":[9,10,11,12,13],"tindex":"140c00ab-43c4-11e5-87ab-25e009592cba","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:297","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1))"},"variableMap":{"key":"sBuf"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:196","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(char)"},"status":-1},{"failures":[64,65,14,66,67,68,15,69,70,71,72,16,73,74,75,76,77,17,78,79,80,81,82,83,18,5,23,6,84,7,85,86,8,36,38],"tindex":"140c27bc-43c4-11e5-87ab-27f2a99bd5f9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:304","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"variableMap":{"lineSeparator":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:285","type":"CtAssignmentImpl","sourcecode":"this.byte[] = new byte[byte[].int]"},"status":-1},{"failures":[87],"tindex":"140c4ecd-43c4-11e5-87ab-fd704e51af64","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:165","type":"CtReturnImpl","sourcecode":"return byte[]"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:547","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getSha384Digest().digest(byte[])"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
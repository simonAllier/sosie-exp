{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":56,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":30,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":9,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":42,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":36,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":35,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":69,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":5,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":12,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":40,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":37,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":21,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":20,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":6,"org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt":52,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":19,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":44,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":2,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":11,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":68,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":0,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":3,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":58,"org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt":51,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":49,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":63,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":66,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":14,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":29,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":47,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":48,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":4,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":22,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":46,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":13,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":61,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":17,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":41,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":10,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":15,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":24,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":43,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":65,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":25,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":45,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":62,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":55,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":59,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":1,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":27,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":26,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":34,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":8,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":32,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":38,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithEmptySalt":53,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":23,"org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull":31,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":64,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":7,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":16,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":71,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":50,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":33,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":28,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":39,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":60,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":18,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":57,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithHalfSalt":54,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":67,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":70},"transformations":[{"failures":[],"tindex":"ee8a89b0-4396-11e5-b03a-27efb1f545c6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:193","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.Base32.this(0, null, boolean, byte)"},"variableMap":{"pad":"org.apache.commons.codec.binary.BaseNCodec.PAD_DEFAULT","this":"this","useHex":"useHex"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:181","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.Base32.this(0, null, boolean, org.apache.commons.codec.binary.BaseNCodec.byte)"},"status":0},{"failures":[0,1,2,3,4,5,6,7],"tindex":"ee8ad7d1-4396-11e5-b03a-3763776418a4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:244","type":"CtIfImpl","sourcecode":"if ((java.lang.Math.abs(((java.lang.String.length()) - (java.lang.String.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    return false;\n} "},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"i","name2":"pattern","name1":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:713","type":"CtIfImpl","sourcecode":"if (!(java.lang.CharSequence.subSequence(int, int).equals(this.java.lang.String))) {\n    return false;\n} else if (!(this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(java.lang.CharSequence.subSequence(int, java.lang.CharSequence.length())))) {\n    return false;\n} "},"status":-1},{"failures":[8,9,10,11,12,13,14,15,16],"tindex":"ee8ad7d2-4396-11e5-b03a-85a8b67d02d8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:117","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[0,1,2,3,17,4,18,5,6,7,19,20,21,22,23,24],"tindex":"ee8ad7d3-4396-11e5-b03a-0de9c2a33ca3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:183","type":"CtIfImpl","sourcecode":"if (boolean) {\n    if (java.lang.String.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        boolean = false;\n    } \n} else {\n    if (java.lang.String.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        boolean = true;\n    } else if ((java.lang.String.length()) > 0) {\n        java.util.Set<java.lang.String>.add(java.lang.String);\n    } \n}"},"status":-1},{"failures":[25,12,26,13,27,28,29,30,16],"tindex":"ee8afee4-4396-11e5-b03a-9df63ea1ed1d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:190","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('K')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:306","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('T')"},"status":-1},{"failures":[31],"tindex":"ee8afee5-4396-11e5-b03a-9b2921b5c868","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:160","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[],"tindex":"ee8afee6-4396-11e5-b03a-170c10fe1944","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:133","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:268","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"status":-2},{"failures":[32,33,34,35,36,37,38,39,40,41,42],"tindex":"ee8afee7-4396-11e5-b03a-7ba06aaa851e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:419","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.substring(((java.lang.String.length()) + 1))"},"variableMap":{"input":"source","l":"source"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:490","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.cleanup(java.lang.String)"},"status":-1},{"failures":[],"tindex":"ee8b25f8-4396-11e5-b03a-4f2516616df7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:382","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(\"(\")) {\n    if (!(java.lang.String.endsWith(\")\"))) {\n        throw new java.lang.IllegalArgumentException(\"Phoneme starts with \\'(\\' so must end with \\')\\'\");\n    } \n    final java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme>();\n    final java.lang.String java.lang.String = java.lang.String.substring(1, ((java.lang.String.length()) - 1));\n    for (final java.lang.String java.lang.String : java.lang.String.split(\"[|]\")) {\n        java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme>.add(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.parsePhoneme(java.lang.String));\n    }\n    if ((java.lang.String.startsWith(\"|\")) || (java.lang.String.endsWith(\"|\"))) {\n        java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme>.add(new org.apache.commons.codec.language.bm.Rule.Phoneme(\"\" , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet));\n    } \n    return new org.apache.commons.codec.language.bm.Rule.PhonemeList(java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme>);\n} else {\n    return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.parsePhoneme(java.lang.String);\n}"},"status":-2},{"failures":[43,44,45,46,47,48,49,50],"tindex":"ee8b25f9-4396-11e5-b03a-27bda1b2df67","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:666","type":"CtReturnImpl","sourcecode":"return this.java.lang.String"},"variableMap":{"pattern":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:128","type":"CtReturnImpl","sourcecode":"return java.lang.String.substring(0, org.apache.commons.codec.language.Caverphone2.java.lang.String.length())"},"status":-1},{"failures":[51,52,53,54],"tindex":"ee8b25fa-4396-11e5-b03a-398b123c08e1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:700","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:205","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + java.lang.String))"},"status":-1},{"failures":[],"tindex":"ee8b4d0b-4396-11e5-b03a-1fa363202b15","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:94","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:525","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = boolean ? org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.createBranch() : org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch"},"status":-2},{"failures":[55,56,57,58],"tindex":"ee8b4d0c-4396-11e5-b03a-536bcad1190f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:273","type":"CtReturnImpl","sourcecode":"return int + 1"},"variableMap":{"index":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:460","type":"CtReturnImpl","sourcecode":"return int"},"status":-1},{"failures":[59,60,61],"tindex":"ee8b4d0d-4396-11e5-b03a-7b960087c3a9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:180","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.net.RFC1522Codec.decodeText(java.lang.String);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(java.io.UnsupportedEncodingException.getMessage() , java.io.UnsupportedEncodingException);\n}"},"status":-1},{"failures":[],"tindex":"ee8b4d0e-4396-11e5-b03a-75cd6edee10b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || ((java.lang.String.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.java.lang.String;\n} "},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"data","txt":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:249","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.md2(java.lang.String))"},"status":-2},{"failures":[62,63,64,65,66,67,68],"tindex":"ee8b741f-4396-11e5-b03a-61b795221d09","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:94","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:50","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest, java.io.InputStream).digest()"},"status":-1},{"failures":[],"tindex":"ee8b7420-4396-11e5-b03a-31e75bf3a3c2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:275","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.encodeHexString(byte[]).getBytes(org.apache.commons.codec.binary.Hex.getCharset())"},"status":-2},{"failures":[1,2],"tindex":"ee8b7421-4396-11e5-b03a-e3c6afca75d7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:242","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[],"tindex":"ee8b7422-4396-11e5-b03a-df73722ce8f7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:270","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.char[]"},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY":"org.apache.commons.codec.language.Nysiis.CHARS_C"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:143","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[69,56,70,57,58,71],"tindex":"ee8b9b33-4396-11e5-b03a-0bf32f4d7326","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:190","type":"CtReturnImpl","sourcecode":"return boolean ? org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.getAlternate() : org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.getPrimary()"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
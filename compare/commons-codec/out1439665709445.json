{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":23,"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":73,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":49,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":45,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":60,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray":70,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":71,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":67,"org.apache.commons.codec.binary.Base64Test.testBase64":22,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":31,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":30,"org.apache.commons.codec.binary.Base64Test.testUUID":7,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":47,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":55,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":16,"org.apache.commons.codec.binary.Base64Test.testSingletons":20,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":35,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":0,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":69,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":2,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":65,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":59,"org.apache.commons.codec.binary.Base64Test.testPairs":6,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":15,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":1,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":66,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":24,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":39,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":10,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":5,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":11,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":14,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":38,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":4,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":62,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":12,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":13,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":61,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":76,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":50,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":41,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":54,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":32,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":17,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":28,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":75,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":48,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":18,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":25,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":51,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":77,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":78,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":36,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":68,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":19,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":44,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":52,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":33,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":34,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":3,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":26,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":72,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":40,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":53,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":74,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":64,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":29,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":9,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":21,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":63,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":27,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":42,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":37,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":56,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":46,"org.apache.commons.codec.language.MetaphoneTest.testTCH":43,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":57,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":8,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Length":58},"transformations":[{"failures":[],"tindex":"0395cfbe-4381-11e5-86d0-8bedde40ef3a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:193","type":"CtIfImpl","sourcecode":"if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"length","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"length","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"length","minRating":"length","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:126","type":"CtIfImpl","sourcecode":"if ((char[][1]) == 'R') {\n    java.lang.StringBuilder.append(char[], 1, ((char[].int) - 1));\n    break;\n} "},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38],"tindex":"0395f6cf-4381-11e5-86d0-b745b82f6d4d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.B64:57","type":"CtLocalVariableImpl","sourcecode":"int int = (((byte << 16) & 16777215) | ((byte << 8) & 65535)) | (byte & 255)"},"variableMap":{"b2":"b","b0":"b","b1":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:444","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.binary.Base64.byte[][byte]"},"status":-1},{"failures":[],"tindex":"0395f6d0-4381-11e5-86d0-a32f3ffdf691","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodecOutputStream.flush(true)"},"variableMap":{"this":"out"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:150","type":"CtInvocationImpl","sourcecode":"java.io.OutputStream.close()"},"status":-2},{"failures":[39],"tindex":"0395f6d1-4381-11e5-86d0-15696ee1e82a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:187","type":"CtAssignmentImpl","sourcecode":"byte[][int] = org.apache.commons.codec.net.QCodec.byte"},"status":-1},{"failures":[40,41,42],"tindex":"03961de2-4381-11e5-86d0-ad16e16fca14","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:188","type":"CtReturnImpl","sourcecode":"return 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:337","type":"CtReturnImpl","sourcecode":"return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (java.lang.String.length())))"},"status":-1},{"failures":[43,44,45],"tindex":"03961de3-4381-11e5-86d0-812b4a5263da","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:252","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('H')"},"variableMap":{"code":"local"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:134","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(char[])"},"status":-1},{"failures":[],"tindex":"03961de4-4381-11e5-86d0-738f69e671a6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:322","type":"CtReturnImpl","sourcecode":"return int < 0 ? int + 256 : int"},"variableMap":{"value":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:402","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[46,47,48,49],"tindex":"03961de5-4381-11e5-86d0-73ae1dbd62c4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:471","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 2))) == 'I') {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n}"},"variableMap":{"result":"result","this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:683","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"TH\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 3, \"TTH\"))) {\n    if ((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 2), 2, \"OM\", \"AM\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 4, \"VAN \", \"VON \"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 3, \"SCH\"))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('0', 'T');\n    }\n    int += 2;\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T');\n    int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"T\", \"D\") ? int + 2 : int + 1;\n}"},"status":-1},{"failures":[50,51,52,53,54,55,56,57,58,59],"tindex":"03961de6-4381-11e5-86d0-fdcb2428ca65","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getSha1Digest()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:98","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-1},{"failures":[46,47],"tindex":"039644f7-4381-11e5-86d0-57c0cde48379","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:706","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('R')"},"status":-1},{"failures":[60,61,62,63,64,6,7,8,10,11,12,13,14,15,20,65,66,67,30,32,34,35,36],"tindex":"039644f8-4381-11e5-86d0-d7aec46bae5d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:376","type":"CtAssignmentImpl","sourcecode":"int = (int >>> 16) | (int & -65536)"},"variableMap":{"s":"b","t":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:383","type":"CtOperatorAssignmentImpl","sourcecode":"int += 256"},"status":-1},{"failures":[68,69,70],"tindex":"039644f9-4381-11e5-86d0-b33c54acdb7d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:182","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++int) {\n    if ((char[][(int - int)]) == '1') {\n        byte[][int] |= org.apache.commons.codec.binary.BinaryCodec.int[][int];\n    } \n}"},"status":-1},{"failures":[],"tindex":"039644fa-4381-11e5-86d0-c70eb5a580aa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:207","type":"CtAssignmentImpl","sourcecode":"this.boolean = false"},"variableMap":{"found":"eof"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:433","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.boolean = true"},"status":-2},{"failures":[46,47,71,49],"tindex":"039644fb-4381-11e5-86d0-65732a4ebfce","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:690","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('0', 'T')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:143","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('M')"},"status":-1},{"failures":[],"tindex":"039644fc-4381-11e5-86d0-fd788acd5ee6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:314","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.URLCodec.encode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be URL encoded\"));\n}"},"status":-2},{"failures":[72,73],"tindex":"03966c0d-4381-11e5-86d0-c9a8340e207b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:93","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^y3\", \"Y3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:108","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"r\", \"2\")"},"status":-1},{"failures":[46,47,48,49],"tindex":"0397f2ae-4381-11e5-86d0-a91116616bee","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:573","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('P')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:500","type":"CtIfImpl","sourcecode":"if (((int == 0) || org.apache.commons.codec.language.DoubleMetaphone.(isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int - 1))))) && org.apache.commons.codec.language.DoubleMetaphone.(isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int + 1))))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('H');\n    int += 2;\n} else {\n    int++;\n}"},"status":-1},{"failures":[74,75,76,77,78],"tindex":"039819bf-4381-11e5-86d0-41ebb601c122","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:192","type":"CtIfImpl","sourcecode":"if (((char == char) || ('H' == char)) || ('W' == char)) {\n    return 0;\n} "},"variableMap":{"mappedChar":"c","preHWChar":"c","firstCode":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:162","type":"CtIfImpl","sourcecode":"if (!(java.lang.Character.isLetter(char))) {\n    return 0;\n} "},"status":-1},{"failures":[],"tindex":"039819c0-4381-11e5-86d0-e97f8d223d2d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodecOutputStream.flush(true)"},"variableMap":{"this":"out"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:112","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    final byte[] byte[] = new byte[int];\n    final int int = org.apache.commons.codec.binary.BaseNCodec.readResults(byte[], 0, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n    if (int > 0) {\n        java.io.OutputStream.write(byte[], 0, int);\n    } \n} "},"status":-2},{"failures":[33],"tindex":"039819c1-4381-11e5-86d0-adc50eb130e2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:147","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.decode(byte[], 0, org.apache.commons.codec.binary.BaseNCodec.int, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
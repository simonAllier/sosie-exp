{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":69,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":19,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":55,"org.apache.commons.codec.binary.HexTest.testCustomCharset":60,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":38,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":13,"org.apache.commons.codec.language.NysiisTest.testSnat":92,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":20,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":46,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":68,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":73,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":18,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":52,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":6,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":1,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":58,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":83,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":81,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":8,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved":21,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":28,"org.apache.commons.codec.language.NysiisTest.testCap":86,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":12,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":31,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved":16,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":29,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":66,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":71,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":78,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":75,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":65,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":64,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant":45,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":37,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":39,"org.apache.commons.codec.language.SoundexTest.testB650":56,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":4,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":17,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":0,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":26,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":61,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":9,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":32,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":53,"org.apache.commons.codec.language.NysiisTest.testTranan":96,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":24,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":27,"org.apache.commons.codec.language.NysiisTest.testFal":89,"org.apache.commons.codec.language.NysiisTest.testSnad":91,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":41,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3__ALEXANDER_Returns_Aleder":49,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":80,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":5,"org.apache.commons.codec.language.NysiisTest.testDropBy":94,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":36,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":84,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":15,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_AllLower_SuccessfullyRemoved":43,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":51,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":76,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":63,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":79,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":2,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":40,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":57,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":93,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":35,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":62,"org.apache.commons.codec.language.NysiisTest.testBran":90,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":97,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":7,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":59,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":70,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":3,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":10,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant":11,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant":33,"org.apache.commons.codec.language.Caverphone2Test.testEncodeNull":48,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":77,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":34,"org.apache.commons.codec.language.NysiisTest.testDad":87,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":67,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":74,"org.apache.commons.codec.language.NysiisTest.testOthers":95,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":47,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":85,"org.apache.commons.codec.language.NysiisTest.testDan":88,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":22,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemovalNormalString_NoChange":25,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":72,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":50,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":14,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":44,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":42,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":23,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":30,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":82},"transformations":[{"failures":[],"tindex":"f82be854-43a5-11e5-88a6-afaab2859103","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:326","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    int = 256 + int;\n} "},"variableMap":{"b":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:79","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(int)"},"status":0},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"tindex":"f82c5d85-43a5-11e5-88a6-2dbb50aa85da","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:362","type":"CtIfImpl","sourcecode":"if (int > (-1)) {\n    java.lang.StringBuilder.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(int));\n} else {\n    java.lang.StringBuilder.append(char);\n}"},"status":-1},{"failures":[],"tindex":"f82cf9c6-43a5-11e5-88a6-7b987e15c985","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:379","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-2},{"failures":[],"tindex":"f82d20d7-43a5-11e5-88a6-452807848e05","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:239","type":"CtIfImpl","sourcecode":"if (((byte[][int]) & int) != 0) {\n    int |= 1;\n} "},"variableMap":{"b":"raw","c":"length","u":"length","y":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:278","type":"CtForImpl","sourcecode":"for (int int = 0, int int = (char[].int) - 1 ; int < (byte[].int) ; int++ , int -= 8) {\n    for (int int = 0 ; int < (org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++int) {\n        if (((byte[][int]) & (org.apache.commons.codec.binary.BinaryCodec.int[][int])) == 0) {\n            char[][(int - int)] = '0';\n        } else {\n            char[][(int - int)] = '1';\n        }\n    }\n}"},"status":-2},{"failures":[48],"tindex":"f82d47e8-43a5-11e5-88a6-b11b1b12def9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtIfImpl","sourcecode":"if ((java.lang.String.length()) == 0) {\n    return java.lang.String;\n} "},"variableMap":{"str":"org.apache.commons.codec.language.Caverphone2.TEN_1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:48","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone2.java.lang.String"},"status":-1},{"failures":[49,22,23,28,41],"tindex":"f82d47e9-43a5-11e5-88a6-edb9cf4ba0d7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:142","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = java.lang.String"},"variableMap":{"rawLine":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:163","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.substring(0, org.apache.commons.codec.language.MatchRatingApproachEncoder.int)"},"status":-1},{"failures":[50,51,52,53,54,55],"tindex":"f82d6efa-43a5-11e5-88a6-b3c05b5f2421","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:231","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String, java.lang.String, false)"},"variableMap":{"value2":"value","value1":"value","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:782","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 4, \"CHIA\")) {\n    return true;\n} else if (int <= 1) {\n    return false;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int - 2)))) {\n    return false;\n} else if (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 3, \"ACH\"))) {\n    return false;\n} else {\n    final char char = org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int + 2));\n    return ((char != 'I') && (char != 'E')) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 6, \"BACHER\", \"MACHER\"));\n}"},"status":-1},{"failures":[56,57],"tindex":"f82d960b-43a5-11e5-88a6-038d0f4d49d0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:192","type":"CtIfImpl","sourcecode":"if (((char == char) || ('H' == char)) || ('W' == char)) {\n    return 0;\n} "},"variableMap":{"mappedChar":"hwChar","preHWChar":"hwChar","firstCode":"mappedChar"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:189","type":"CtIfImpl","sourcecode":"if (('H' == char) || ('W' == char)) {\n    final char char = java.lang.String.charAt((int - 2));\n    final char char = org.apache.commons.codec.language.Soundex.map(char);\n    if (((char == char) || ('H' == char)) || ('W' == char)) {\n        return 0;\n    } \n} "},"status":-1},{"failures":[],"tindex":"f82dbd1c-43a5-11e5-88a6-b9e7fb50ea24","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:216","type":"CtIfImpl","sourcecode":"if (((java.lang.String == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(java.lang.String))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(java.lang.String))) {\n    return false;\n} else if (((java.lang.String.length()) == 1) || ((java.lang.String.length()) == 1)) {\n    return false;\n} else if (java.lang.String.equalsIgnoreCase(java.lang.String)) {\n    return true;\n} "},"status":-2},{"failures":[50,51,54],"tindex":"f82de42d-43a5-11e5-88a6-d52252992275","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:656","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"SK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:455","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K')"},"status":-1},{"failures":[58],"tindex":"f82e0b3e-43a5-11e5-88a6-11d00e9ba178","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:376","type":"CtAssignmentImpl","sourcecode":"int = (int >>> 16) | (int & -65536)"},"variableMap":{"s":"index","t":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:153","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[],"tindex":"f82e0b3f-43a5-11e5-88a6-53b8d9267073","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:329","type":"CtLocalVariableImpl","sourcecode":"char char"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:185","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((int & 15), 16))"},"status":-2},{"failures":[59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"tindex":"f82e3250-43a5-11e5-88a6-8b328546fd20","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.IllegalArgumentException(((\"lineLength \" + int) + \" > 0, but lineSeparator is null\"));\n} "},"variableMap":{"lineSeparator":"data","lineLength":"l"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:144","type":"CtForImpl","sourcecode":"for (int int = 0, int int = 0 ; int < int ; int++) {\n    char[][int++] = char[][((240 & (byte[][int])) >>> 4)];\n    char[][int++] = char[][(15 & (byte[][int]))];\n}"},"status":-1},{"failures":[],"tindex":"f82e5961-43a5-11e5-88a6-83970b9db9aa","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:284","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.byte[]"},"variableMap":{"encodeTable":"tempResult","org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE":"tempResult"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:324","type":"CtAssignmentImpl","sourcecode":"byte[] = java.security.MessageDigest.digest()"},"status":1},{"failures":[],"tindex":"f82e8072-43a5-11e5-88a6-2558cde0ceba","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:225","type":"CtOperatorAssignmentImpl","sourcecode":"int -= int"},"variableMap":{"blocksize":"pos","cnt":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:514","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[82,83],"tindex":"f82e8073-43a5-11e5-88a6-7ba57e44e60c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:356","type":"CtAssignmentImpl","sourcecode":"int = int[][1]"},"status":-1},{"failures":[],"tindex":"f82ea784-43a5-11e5-88a6-8d31137f4a33","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:239","type":"CtIfImpl","sourcecode":"if (((byte[][int]) & int) != 0) {\n    int |= 1;\n} "},"variableMap":{"b":"buffer","c":"pos","u":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","y":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:378","type":"CtSwitchImpl","sourcecode":"switch (org.apache.commons.codec.binary.BaseNCodec.Context.int) {\n    case 2 :\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 2) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 3 :\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 7) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 4 :\n        org.apache.commons.codec.binary.BaseNCodec.Context.long = (org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 4;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.long) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 5 :\n        org.apache.commons.codec.binary.BaseNCodec.Context.long = (org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 1;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.long) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 6 :\n        org.apache.commons.codec.binary.BaseNCodec.Context.long = (org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 6;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.long) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 7 :\n        org.apache.commons.codec.binary.BaseNCodec.Context.long = (org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 3;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.long) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (org.apache.commons.codec.binary.BaseNCodec.Context.int)));\n}"},"status":-2},{"failures":[],"tindex":"f82ef5a5-43a5-11e5-88a6-4b65841307f3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:236","type":"CtLocalVariableImpl","sourcecode":"final int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"status":-2},{"failures":[84],"tindex":"f82f1cb6-43a5-11e5-88a6-29b4b36cc61e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:385","type":"CtAssignmentImpl","sourcecode":"char = '7'"},"variableMap":{"code":"ch"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:386","type":"CtAssignmentImpl","sourcecode":"char = org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.get(char)"},"status":-1},{"failures":[85,86,87,88,89,90,91,92,93,94,95,96,97],"tindex":"f82f1cb7-43a5-11e5-88a6-edb673c8945c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:101","type":"CtReturnImpl","sourcecode":"return ((((char == 'A') || (char == 'E')) || (char == 'I')) || (char == 'O')) || (char == 'U')"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
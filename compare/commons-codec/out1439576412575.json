{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":18,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":11,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":19,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":1,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":4,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":27,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":17,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":14,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":24,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":6,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":30,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":20,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":23,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":8,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":16,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":28,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":31,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":21,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":12,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":13,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":0,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":32,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":10,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":29,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":7,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":2,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":25,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":26,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":15,"org.apache.commons.codec.language.MetaphoneTest.testTCH":3,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":9,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":5,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":22},"transformations":[{"failures":[],"tindex":"1a8226d7-42b1-11e5-b227-eb2fcb104baf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:498","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(byte[], ((byte)(0)))"},"status":0},{"failures":[0],"tindex":"1a824de8-42b1-11e5-b227-91fb29fb8e1e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:350","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha1(java.io.InputStream)"},"variableMap":{"data":"data","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:564","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getSha384Digest(), java.io.InputStream)"},"status":-1},{"failures":[],"tindex":"1a824de9-42b1-11e5-b227-03eb69984f43","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:111","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || (java.lang.String == null)) {\n    return 0;\n} "},"variableMap":{"es1":"value","es2":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:293","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 3, \"CIA\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n    int += 3;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CC\")) && (!((int == 1) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, 0)) == 'M')))) {\n    return org.apache.commons.codec.language.DoubleMetaphone.handleCC(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int);\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CK\", \"CG\", \"CQ\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CI\", \"CE\", \"CY\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 3, \"CIO\", \"CIE\", \"CIA\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    }\n    int += 2;\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \" C\", \" Q\", \" G\")) {\n        int += 3;\n    } else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"C\", \"K\", \"Q\")) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"CE\", \"CI\")))) {\n        int += 2;\n    } else {\n        int++;\n    }\n}"},"status":-2},{"failures":[],"tindex":"1a8274fa-42b1-11e5-b227-875c54add588","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (int > int) {\n    break;\n} "},"variableMap":{"i":"minRating","name2Size":"org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"status":-2},{"failures":[],"tindex":"1a8274fb-42b1-11e5-b227-65ee53706a85","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:193","type":"CtIfImpl","sourcecode":"if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"index","minRating":"index","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:650","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 3), 2, \"ER\", \"EN\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"X\", \"SK\");\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"SK\");\n    }\n} else {\n    if (((int == 0) && (!org.apache.commons.codec.language.DoubleMetaphone.(isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, 3))))) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, 3)) != 'W')) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'S');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n    }\n}"},"status":-2},{"failures":[],"tindex":"1a829c0c-42b1-11e5-b227-d3735d079061","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:183","type":"CtInvocationImpl","sourcecode":"javax.crypto.Mac.init(javax.crypto.spec.SecretKeySpec)"},"status":-2},{"failures":[],"tindex":"1a829c0d-42b1-11e5-b227-1f3494ff573e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    java.lang.String = (org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} "},"variableMap":{"salt":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:179","type":"CtTryImpl","sourcecode":"try {\n    boolean boolean = false;\n    while (java.util.Scanner.hasNextLine()) {\n        final java.lang.String java.lang.String = java.util.Scanner.nextLine().trim();\n        if (boolean) {\n            if (java.lang.String.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                boolean = false;\n            } \n        } else {\n            if (java.lang.String.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                boolean = true;\n            } else if ((java.lang.String.length()) > 0) {\n                java.util.Set<java.lang.String>.add(java.lang.String);\n            } \n        }\n    }\n} finally {\n    java.util.Scanner.close();\n}"},"status":-2},{"failures":[],"tindex":"1a82c31e-42b1-11e5-b227-d9b104fa0e1c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || ((java.lang.String.length()) == 0)) {\n    return java.lang.String;\n} "},"variableMap":{"str":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:289","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"status":0},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14],"tindex":"1a82c31f-42b1-11e5-b227-255a7a6f4b78","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:155","type":"CtSwitchImpl","sourcecode":"switch (char) {\n    case 'A' :\n    case 'E' :\n    case 'I' :\n    case 'O' :\n    case 'U' :\n        if (int == 0) {\n            java.lang.StringBuilder.append(char);\n        } \n        break;\n    case 'B' :\n        if (org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'M')) && org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) {\n            break;\n        } \n        java.lang.StringBuilder.append(char);\n        break;\n    case 'C' :\n        if ((org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'S')) && (!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int)))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 1)))) >= 0)) {\n            break;\n        } \n        if (org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder, int, \"CIA\")) {\n            java.lang.StringBuilder.append('X');\n            break;\n        } \n        if ((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 1)))) >= 0)) {\n            java.lang.StringBuilder.append('S');\n            break;\n        } \n        if (org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'S')) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'H'))) {\n            java.lang.StringBuilder.append('K');\n            break;\n        } \n        if (org.apache.commons.codec.language.Metaphone.isNextChar(java.lang.StringBuilder, int, 'H')) {\n            if (((int == 0) && (int >= 3)) && org.apache.commons.codec.language.Metaphone.(isVowel(java.lang.StringBuilder, 2))) {\n                java.lang.StringBuilder.append('K');\n            } else {\n                java.lang.StringBuilder.append('X');\n            }\n        } else {\n            java.lang.StringBuilder.append('K');\n        }\n        break;\n    case 'D' :\n        if (((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1)))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'G'))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 2)))) >= 0)) {\n            java.lang.StringBuilder.append('J');\n            int += 2;\n        } else {\n            java.lang.StringBuilder.append('T');\n        }\n        break;\n    case 'G' :\n        if (org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'H'))) {\n            break;\n        } \n        if (((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1)))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'H'))) && (!org.apache.commons.codec.language.Metaphone.(isVowel(java.lang.StringBuilder, (int + 2))))) {\n            break;\n        } \n        if ((int > 0) && (org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"GN\")) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"GNED\")))) {\n            break;\n        } \n        if (org.apache.commons.codec.language.Metaphone.isPreviousChar(java.lang.StringBuilder, int, 'G')) {\n            boolean = true;\n        } else {\n            boolean = false;\n        }\n        if (((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 1)))) >= 0)) && (!boolean)) {\n            java.lang.StringBuilder.append('J');\n        } else {\n            java.lang.StringBuilder.append('K');\n        }\n        break;\n    case 'H' :\n        if (org.apache.commons.codec.language.Metaphone.isLastChar(int, int)) {\n            break;\n        } \n        if ((int > 0) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int - 1)))) >= 0)) {\n            break;\n        } \n        if (org.apache.commons.codec.language.Metaphone.isVowel(java.lang.StringBuilder, (int + 1))) {\n            java.lang.StringBuilder.append('H');\n        } \n        break;\n    case 'F' :\n    case 'J' :\n    case 'L' :\n    case 'M' :\n    case 'N' :\n    case 'R' :\n        java.lang.StringBuilder.append(char);\n        break;\n    case 'K' :\n        if (int > 0) {\n            if (!org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'C'))) {\n                java.lang.StringBuilder.append(char);\n            } \n        } else {\n            java.lang.StringBuilder.append(char);\n        }\n        break;\n    case 'P' :\n        if (org.apache.commons.codec.language.Metaphone.isNextChar(java.lang.StringBuilder, int, 'H')) {\n            java.lang.StringBuilder.append('F');\n        } else {\n            java.lang.StringBuilder.append(char);\n        }\n        break;\n    case 'Q' :\n        java.lang.StringBuilder.append('K');\n        break;\n    case 'S' :\n        if ((org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SH\")) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SIO\"))) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SIA\"))) {\n            java.lang.StringBuilder.append('X');\n        } else {\n            java.lang.StringBuilder.append('S');\n        }\n        break;\n    case 'T' :\n        if (org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"TIA\")) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"TIO\"))) {\n            java.lang.StringBuilder.append('X');\n            break;\n        } \n        if (org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder, int, \"TCH\")) {\n            break;\n        } \n        if (org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder, int, \"TH\")) {\n            java.lang.StringBuilder.append('0');\n        } else {\n            java.lang.StringBuilder.append('T');\n        }\n        break;\n    case 'V' :\n        java.lang.StringBuilder.append('F');\n        break;\n    case 'W' :\n    case 'Y' :\n        if ((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) && org.apache.commons.codec.language.Metaphone.(isVowel(java.lang.StringBuilder, (int + 1)))) {\n            java.lang.StringBuilder.append(char);\n        } \n        break;\n    case 'X' :\n        java.lang.StringBuilder.append('K');\n        java.lang.StringBuilder.append('S');\n        break;\n    case 'Z' :\n        java.lang.StringBuilder.append('S');\n        break;\n    default :\n        break;\n}"},"status":-1},{"failures":[15,16,17,18],"tindex":"1a831140-42b1-11e5-b227-f1acc07c5dd5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:226","type":"CtOperatorAssignmentImpl","sourcecode":"this.int += int"},"variableMap":{"patternLength":"index","i":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:185","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[19,20,21],"tindex":"1a831141-42b1-11e5-b227-8165aa6a8b55","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:109","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"w\", \"2\")"},"status":-1},{"failures":[22,23],"tindex":"1a831142-42b1-11e5-b227-b56939f7081b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:137","type":"CtAssignmentImpl","sourcecode":"int = '+'"},"variableMap":{"b":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:358","type":"CtOperatorAssignmentImpl","sourcecode":"int &= 268435455"},"status":-1},{"failures":[],"tindex":"1a831143-42b1-11e5-b227-095be67bc541","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    java.lang.String = (org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} "},"variableMap":{"salt":"salt","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"salt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:189","type":"CtIfImpl","sourcecode":"if ((java.util.regex.Matcher == null) || (!(java.util.regex.Matcher.find()))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + java.lang.String));\n} "},"status":-2},{"failures":[],"tindex":"1a833854-42b1-11e5-b227-31476c2d1d8a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:226","type":"CtOperatorAssignmentImpl","sourcecode":"this.int += int"},"variableMap":{"patternLength":"a","i":"t"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:394","type":"CtAssignmentImpl","sourcecode":"int = (int ^ int) ^ (int >>> (16 - int))"},"status":-2},{"failures":[],"tindex":"1a833855-42b1-11e5-b227-5368eac77846","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:165","type":"CtLocalVariableImpl","sourcecode":"final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream()"},"status":-2},{"failures":[15,16],"tindex":"1a833856-42b1-11e5-b227-6dde4e0de503","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:327","type":"CtAssignmentImpl","sourcecode":"int = 256 + int"},"variableMap":{"b":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:282","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"status":-1},{"failures":[24,25,26],"tindex":"1a833857-42b1-11e5-b227-6dee829f8083","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:96","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(byte[])"},"variableMap":{"bytes":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:104","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.decodeBase64(byte[])"},"status":-1},{"failures":[],"tindex":"1a835f68-42b1-11e5-b227-49e4bfa53654","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:296","type":"CtOperatorAssignmentImpl","sourcecode":"int += 3"},"variableMap":{"index":"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:284","type":"CtAssignmentImpl","sourcecode":"this.int = (org.apache.commons.codec.binary.Base64.int) + (byte[].int)"},"status":-2},{"failures":[],"tindex":"1a835f69-42b1-11e5-b227-37d7d4e53e21","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:754","type":"CtIfImpl","sourcecode":"if ((((java.math.BigInteger.bitLength()) % 8) != 0) && ((((java.math.BigInteger.bitLength()) / 8) + 1) == (int / 8))) {\n    return byte[];\n} "},"status":0},{"failures":[27,28,29,30,31,32],"tindex":"1a835f6a-42b1-11e5-b227-43794d7a66f8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:104","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.decodeBase64(byte[])"},"variableMap":{"bytes":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:254","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(java.util.BitSet, byte[], false)"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.binary.HexTest.testCustomCharset":52,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":20,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":48,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":27,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":33,"org.apache.commons.codec.binary.Base64Test.testBase64":26,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":4,"org.apache.commons.codec.binary.Base64Test.testTriplets":8,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.binary.Base64Test.testUUID":11,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":41,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":3,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":19,"org.apache.commons.codec.binary.Base64Test.testSingletons":22,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":25,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":55,"org.apache.commons.codec.binary.Base64Test.testPairs":10,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":18,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":28,"org.apache.commons.codec.binary.Base64Test.testCodec112":21,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":43,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":14,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":15,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":49,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":6,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":53,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":16,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":17,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":35,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":40,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":5,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":45,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":54,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":57,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":23,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":34,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":37,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":30,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":32,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":9,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":38,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":2,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":29,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":51,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":36,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":56,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":39,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":44,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":13,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":24,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":7,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":50,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":46,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":31,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":42,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.language.MetaphoneTest.testTCH":47,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":12},"transformations":[{"failures":[0,1],"tindex":"166d3a7e-4306-11e5-8fee-67419bbc2aac","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:392","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"TK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:635","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('S')"},"status":-1},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"tindex":"166d618f-4306-11e5-8fee-75f7e12c432e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:706","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.binary.Base64().decode(byte[])"},"variableMap":{"base64Data":"binaryData"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:621","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.encodeBase64(byte[], boolean, false)"},"status":-1},{"failures":[33],"tindex":"166d6190-4306-11e5-8fee-c9f398d9ae46","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:385","type":"CtIfImpl","sourcecode":"if ((boolean) && (org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.containsKey(char))) {\n    char = org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.get(char);\n} "},"status":-1},{"failures":[],"tindex":"166d6191-4306-11e5-8fee-015fd6dbd841","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((int & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"left"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:305","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.permOp(int, int, 2, 858993459, int[])"},"status":-2},{"failures":[],"tindex":"166d88a2-4306-11e5-8fee-c71c0fbb58ba","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:65","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^trough\", \"trou2f\")"},"variableMap":{"txt":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:417","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"\\\\s{2,}\\\\b\", org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":1},{"failures":[0,1,34],"tindex":"166d88a3-4306-11e5-8fee-2b936d64d5b1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:396","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:365","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K')"},"status":-1},{"failures":[0,1],"tindex":"166d88a4-4306-11e5-8fee-c91f4db373c7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:365","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"variableMap":{"rightLength":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:707","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"status":-1},{"failures":[35,36,37,38,39,40,41,42],"tindex":"166d88a5-4306-11e5-8fee-2749840440a6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:148","type":"CtIfImpl","sourcecode":"if ((java.lang.StringBuilder.length()) > 0) {\n    java.lang.StringBuilder.append(\"|\");\n} "},"variableMap":{"sb":"passwd"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:288","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), byte[][11], 2, java.lang.StringBuilder)"},"status":-1},{"failures":[43,44],"tindex":"166d88a6-4306-11e5-8fee-cb99956bf66d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:102","type":"CtReturnImpl","sourcecode":"return 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:188","type":"CtReturnImpl","sourcecode":"return 3"},"status":-1},{"failures":[45,46,47,48,49,50,51],"tindex":"166d88a7-4306-11e5-8fee-8b99276bf0ca","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:355","type":"CtAssignmentImpl","sourcecode":"boolean = (java.lang.StringBuilder.charAt((int + 1))) == char"},"status":-1},{"failures":[],"tindex":"166d88a8-4306-11e5-8fee-c7472c00a2f1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:305","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[52,53,54],"tindex":"166dafb9-4306-11e5-8fee-f187fe87e925","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:706","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.binary.Base64().decode(byte[])"},"variableMap":{"base64Data":"array"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:275","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.encodeHexString(byte[]).getBytes(org.apache.commons.codec.binary.Hex.getCharset())"},"status":-1},{"failures":[],"tindex":"166dafba-4306-11e5-8fee-ff7a9ddbe946","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:154","type":"CtIfImpl","sourcecode":"if (int >= 0) {\n    java.lang.String = java.lang.String.substring(0, int);\n} "},"variableMap":{"cmtI":"index","line":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:395","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"DT\", \"DD\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T');\n    int += 2;\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T');\n    int++;\n}"},"status":-2},{"failures":[55,56],"tindex":"166dafbb-4306-11e5-8fee-f59873fdf703","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:74","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"ci\", \"si\")"},"status":-1},{"failures":[],"tindex":"166dafbc-4306-11e5-8fee-f5e9b20988b3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:503","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(byte[], ((byte)(0)))"},"status":0},{"failures":[],"tindex":"166dafbd-4306-11e5-8fee-09096daf4938","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:92","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('[')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:89","type":"CtForImpl","sourcecode":"for (int int = 'A' ; int <= 'Z' ; int++) {\n    org.apache.commons.codec.net.QCodec.java.util.BitSet.set(int);\n}"},"status":-2},{"failures":[],"tindex":"166dafbe-4306-11e5-8fee-b7f70d0c51a3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:141","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.util.Scanner.nextLine()"},"variableMap":{"scanner":"lsScanner"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:182","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.util.Scanner.nextLine().trim()"},"status":1},{"failures":[],"tindex":"166dafbf-4306-11e5-8fee-e7c8971cb291","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:148","type":"CtIfImpl","sourcecode":"if ((java.lang.StringBuilder.length()) > 0) {\n    java.lang.StringBuilder.append(\"|\");\n} "},"variableMap":{"sb":"local"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:126","type":"CtIfImpl","sourcecode":"if ((char[][1]) == 'R') {\n    java.lang.StringBuilder.append(char[], 1, ((char[].int) - 1));\n    break;\n} "},"status":0},{"failures":[57],"tindex":"166dd6d0-4306-11e5-8fee-995c5258a5fe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:231","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacMd5(byte[]), java.io.InputStream)"},"variableMap":{"valueToDigest":"valueToDigest","this":"this","key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:552","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byte[]), java.io.InputStream)"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":19,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
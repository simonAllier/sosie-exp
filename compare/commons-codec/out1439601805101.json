{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":48,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":64,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":35,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":10,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":4,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":3,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":59,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":58,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":8,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":17,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":5,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":66,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":23,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":11,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":25,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":24,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":40,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":57,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_AllLower_SuccessfullyRemoved":37,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":50,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":22,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":45,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved":30,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":65,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":16,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":43,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":44,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":36,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":26,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":27,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":32,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":42,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":61,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved":29,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":56,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":12,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":39,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":41,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":51,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant":38,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":62,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":2,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":54,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":60,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":55,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":13,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant":28,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":0,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":19,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":6,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":20,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":21,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant":33,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":34,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":9,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":46,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":1,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":14,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":63,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":7,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":47,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":15,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":52,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":18,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":49,"org.apache.commons.codec.language.MetaphoneTest.testTCH":53,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":31},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8],"tindex":"39a1d473-42ec-11e5-8bcb-05f3d1235ab9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:530","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.processNextReplacement(java.lang.String, boolean)"},"status":-1},{"failures":[9,10,11,12,13,14,15,16,17,18],"tindex":"39a1fb84-42ec-11e5-8bcb-1f4a5fb69a61","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:113","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"y3\", \"Y3\")"},"variableMap":{"txt":"name1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:225","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.cleanName(java.lang.String)"},"status":-1},{"failures":[19,20,21,22,23,24,25],"tindex":"39a22295-42ec-11e5-8bcb-8f49e6e12505","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:112","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    final byte[] byte[] = new byte[int];\n    final int int = org.apache.commons.codec.binary.BaseNCodec.readResults(byte[], 0, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n    if (int > 0) {\n        java.io.OutputStream.write(byte[], 0, int);\n    } \n} "},"status":-1},{"failures":[26,27],"tindex":"39a22296-42ec-11e5-8bcb-21db4f7daf95","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:421","type":"CtAssignmentImpl","sourcecode":"int = int + 2"},"variableMap":{"index":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:764","type":"CtUnaryOperatorImpl","sourcecode":"int--"},"status":-1},{"failures":[],"tindex":"39a22297-42ec-11e5-8bcb-71e5174b24f0","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:388","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.substring(1, ((java.lang.String.length()) - 1))"},"variableMap":{"ph":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:305","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":-2},{"failures":[28,29,30,31,32,33,34,17,35,36,37,38],"tindex":"39a22298-42ec-11e5-8bcb-8b5d97395c97","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:247","type":"CtIfImpl","sourcecode":"if ((int > 0) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int - 1)))) >= 0)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.language.Metaphone.VARSON":"org.apache.commons.codec.language.MatchRatingApproachEncoder.PLAIN_ASCII","n":"pos","local":"sb"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:362","type":"CtIfImpl","sourcecode":"if (int > (-1)) {\n    java.lang.StringBuilder.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(int));\n} else {\n    java.lang.StringBuilder.append(char);\n}"},"status":-1},{"failures":[39,40,41,42,43,44,45,46],"tindex":"39a249a9-42ec-11e5-8bcb-435595a16573","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:666","type":"CtReturnImpl","sourcecode":"return this.java.lang.String"},"variableMap":{"pattern":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:128","type":"CtReturnImpl","sourcecode":"return java.lang.String.substring(0, org.apache.commons.codec.language.Caverphone2.java.lang.String.length())"},"status":-1},{"failures":[],"tindex":"39a249aa-42ec-11e5-8bcb-75dce97c82cb","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || ((java.lang.String.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.java.lang.String;\n} "},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"str","txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:259","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"status":0},{"failures":[],"tindex":"39a249ab-42ec-11e5-8bcb-6f21e1c9fce6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:611","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha384(java.io.InputStream))"},"variableMap":{"data":"data","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:237","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.md2(java.io.InputStream))"},"status":-2},{"failures":[],"tindex":"39a270bc-42ec-11e5-8bcb-6395532a8054","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:504","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof byte[]) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.encode(((byte[])(java.lang.Object)));\n} else if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.encode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n}"},"status":-2},{"failures":[],"tindex":"39a270bd-42ec-11e5-8bcb-59c0c124379c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:389","type":"CtIfImpl","sourcecode":"if (!(java.lang.Object instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n} "},"status":0},{"failures":[47],"tindex":"39a270be-42ec-11e5-8bcb-f5bf2f1b1242","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:193","type":"CtIfImpl","sourcecode":"if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"terminator","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"to","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"to","minRating":"to","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"to"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (int == int) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"status":-1},{"failures":[48,49,50],"tindex":"39a270bf-42ec-11e5-8bcb-97cbd80c632d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:407","type":"CtOperatorAssignmentImpl","sourcecode":"int ^= int << int"},"variableMap":{"a":"index","t":"index","n":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:503","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"status":-1},{"failures":[41],"tindex":"39a297d0-42ec-11e5-8bcb-7fcd2f9d5f7f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:90","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"gh\", \"22\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:98","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"g\", \"k\")"},"status":-1},{"failures":[51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"tindex":"39a297d1-42ec-11e5-8bcb-41bd7b529585","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:150","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"variableMap":{"inExtendedComment":"matches"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:365","type":"CtAssignmentImpl","sourcecode":"boolean = java.lang.String.equals(java.lang.String)"},"status":-1},{"failures":[],"tindex":"39a297d2-42ec-11e5-8bcb-b5e805e50d4b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:245","type":"CtAssignmentImpl","sourcecode":"int = 128"},"variableMap":{"u":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:451","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[49,50],"tindex":"39a297d3-42ec-11e5-8bcb-eb62ab0d10ec","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:533","type":"CtIfImpl","sourcecode":"if ((!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 1, \"S\", \"K\", \"L\")))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n} "},"status":-1},{"failures":[],"tindex":"39a2bee4-42ec-11e5-8bcb-4db91316794d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:407","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(((((\"This method\\'s parameter was expected to be of the type \" + (java.lang.String.java.lang.String.getName())) + \". But actually it was of the type \") + (java.lang.Object.getClass().getName())) + \".\"))"},"status":0},{"failures":[],"tindex":"39a2bee5-42ec-11e5-8bcb-a938788c60bf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:94","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^y\", \"A\")"},"variableMap":{"txt":"saltString"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:185","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.apache.commons.codec.digest.B64.getRandomSalt(8)"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":19,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"},"diffs":[{"transformation":"39a2bee4-42ec-11e5-8bcb-4db91316794d","diffs":[{"branches":{"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeWithInvalidObject":["org.apache.commons.codec.EncoderException_org.apache.commons.codec.EncoderException(java.lang.String).b"]},"type":"branch"},{"catchs":{},"throws":{"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeWithInvalidObject":["org.apache.commons.codec.language.ColognePhonetic.java.lang.Object encode(java.lang.Object)"]},"type":"exception"},{"nodes":{"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeWithInvalidObject":["org.apache.commons.codec.EncoderException.org.apache.commons.codec.EncoderException(java.lang.String)"]},"edges":{"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeWithInvalidObject":["org.apache.commons.codec.language.ColognePhonetic.java.lang.Object encode(java.lang.Object) -> org.apache.commons.codec.EncoderException.org.apache.commons.codec.EncoderException(java.lang.String)"]},"type":"graph"}]}]}
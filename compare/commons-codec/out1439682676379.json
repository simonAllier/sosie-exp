{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":48,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length":50,"org.apache.commons.codec.binary.Base64Test.testBase64":27,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":36,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":33,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":38,"org.apache.commons.codec.language.Caverphone1Test.testEncodeNull":43,"org.apache.commons.codec.binary.Base64Test.testUUID":13,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":46,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":9,"org.apache.commons.codec.binary.Base64Test.testSingletons":24,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":3,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":5,"org.apache.commons.codec.binary.Base64Test.testPairs":12,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":20,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":4,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":28,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":44,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":15,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":11,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":16,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":2,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":19,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":10,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":17,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":18,"org.apache.commons.codec.binary.Base64Test.testCodec68":25,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":52,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":37,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":51,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":21,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":34,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":47,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":22,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":29,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":0,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":23,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":7,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":8,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":42,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":6,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":30,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":41,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":32,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":26,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":40,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":31,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":49,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":1,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":45,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":14,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":35,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":39},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"tindex":"84aec0d2-43a8-11e5-9a7c-d73c049f9c3e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:767","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[int / 8]"},"variableMap":{"bitlen":"decodeSize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:462","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-1},{"failures":[38,39,40,41,42],"tindex":"84aee7e3-43a8-11e5-9a7c-8b306a0b434b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:466","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][9], byte[][19], byte[][29], 4, java.lang.StringBuilder)"},"status":-1},{"failures":[43],"tindex":"84aee7e4-43a8-11e5-9a7c-a7ef5a74d022","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((java.lang.String.length()) == 0) {\n    return null;\n} "},"variableMap":{"input":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || ((java.lang.String.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone1.java.lang.String;\n} "},"status":-1},{"failures":[],"tindex":"84af0ef5-43a8-11e5-9a7c-d9fb114cc5dc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    java.lang.String = (org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} "},"variableMap":{"salt":"line","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:413","type":"CtIfImpl","sourcecode":"if (java.lang.String.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    boolean = false;\n} "},"status":-2},{"failures":[],"tindex":"84af0ef6-43a8-11e5-9a7c-354c9b395a6e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:252","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.decodeHex(char[])"},"status":-2},{"failures":[],"tindex":"84af0ef7-43a8-11e5-9a7c-3f9e15929502","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:92","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"upperName":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:90","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"gh\", \"22\")"},"status":1},{"failures":[],"tindex":"84af3608-43a8-11e5-9a7c-3d74072b5450","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:339","type":"CtReturnImpl","sourcecode":"return (org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt(int))) >= 0"},"status":-2},{"failures":[44],"tindex":"84af3609-43a8-11e5-9a7c-df70bbd673e4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:107","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"ry\", \"Ry\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:81","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"v\", \"f\")"},"status":-1},{"failures":[],"tindex":"84af360a-43a8-11e5-9a7c-b93ab42eecf8","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:237","type":"CtReturnImpl","sourcecode":"return this.boolean"},"status":-2},{"failures":[45,46,47],"tindex":"84af360b-43a8-11e5-9a7c-2d646b3cc113","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:719","type":"CtIfImpl","sourcecode":"if ((((int == ((java.lang.String.length()) - 1)) && org.apache.commons.codec.language.DoubleMetaphone.(isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int - 1))))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 3, \"SCH\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('F');\n    int++;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 4, \"WICZ\", \"WITZ\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"TS\", \"FX\");\n    int += 4;\n} else {\n    int++;\n}"},"variableMap":{"result":"result","this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:477","type":"CtIfImpl","sourcecode":"if ((((int > 1) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 1, \"B\", \"H\", \"D\"))) || ((int > 2) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 3), 1, \"B\", \"H\", \"D\")))) || ((int > 3) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 4), 1, \"B\", \"H\")))) {\n    int += 2;\n} else {\n    if (((int > 2) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int - 1))) == 'U')) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 3), 1, \"C\", \"G\", \"L\", \"R\", \"T\"))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('F');\n    } else if ((int > 0) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int - 1))) != 'I')) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    } \n    int += 2;\n}"},"status":-1},{"failures":[45,46,47,48],"tindex":"84af5d1c-43a8-11e5-9a7c-792d6724f2bd","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:486","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:560","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('L')"},"status":-1},{"failures":[45,46,49,47,48],"tindex":"84af5d1d-43a8-11e5-9a7c-09c8e6801b83","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:486","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:599","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 3, \"ISL\", \"YSL\")) {\n    int++;\n} else if ((int == 0) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 5, \"SUGAR\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'S');\n    int++;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"SH\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n    }\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 3, \"SIO\", \"SIA\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 4, \"SIAN\"))) {\n    if (boolean) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    }\n    int += 3;\n} else if (((int == 0) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"Z\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"Z\") ? int + 2 : int + 1;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"SC\")) {\n    int = org.apache.commons.codec.language.DoubleMetaphone.handleSC(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int);\n} else {\n    if ((int == ((java.lang.String.length()) - 1)) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 2, \"AI\", \"OI\"))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('S');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    }\n    int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"S\", \"Z\") ? int + 2 : int + 1;\n}"},"status":-1},{"failures":[],"tindex":"84af842e-43a8-11e5-9a7c-9b130c3b5001","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:410","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byte[])"},"status":-2},{"failures":[],"tindex":"84af842f-43a8-11e5-9a7c-75a39efc42dd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:62","type":"CtIfImpl","sourcecode":"if (char == char) {\n    continue;\n} "},"variableMap":{"c1":"chr","c2":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:388","type":"CtIfImpl","sourcecode":"if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"status":-2},{"failures":[],"tindex":"84afab40-43a8-11e5-9a7c-4904b5e1c73c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:94","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set(']')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:78","type":"CtForImpl","sourcecode":"for (int int = 'A' ; int <= 'Z' ; int++) {\n    org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(int);\n}"},"status":-2},{"failures":[],"tindex":"84afab41-43a8-11e5-9a7c-5f959d702226","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:94","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:133","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"status":-2},{"failures":[],"tindex":"84afab42-43a8-11e5-9a7c-d1bbfd0ddf5d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:78","type":"CtForImpl","sourcecode":"for (int int = 'A' ; int <= 'Z' ; int++) {\n    org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(int);\n}"},"variableMap":{"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:75","type":"CtForImpl","sourcecode":"for (int int = 'a' ; int <= 'z' ; int++) {\n    org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(int);\n}"},"status":-2},{"failures":[50,51,52],"tindex":"84afab43-43a8-11e5-9a7c-d7ce33939fe7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getSha1Digest()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:85","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-1},{"failures":[],"tindex":"84afd254-43a8-11e5-9a7c-f11ef3e4dd40","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:594","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha384(byte[]))"},"variableMap":{"data":"data","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:412","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha1(byte[]))"},"status":-2},{"failures":[],"tindex":"84afd255-43a8-11e5-9a7c-39716195840b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:77","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"v\", \"f\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:120","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"2\", \"\")"},"status":1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
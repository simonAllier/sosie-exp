{"failureDictionary":{"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":12,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":25,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":26,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":24,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":35,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":1,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray":21,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":16,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":18,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":40,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":0,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":32,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":23,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":36,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":2,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":19,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":37,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":4,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":9,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":13,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":8,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":33,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":15,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":31,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":7,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":14,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":41,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":30,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":20,"org.apache.commons.codec.digest.B64Test.testB64from24bit":39,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":34,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":29,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":38,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":43,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":10,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":22,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":28,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":11,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":42,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":5,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":6,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":3,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":17,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":27},"transformations":[{"failures":[],"tindex":"429d28c9-433d-11e5-991a-011c790eb958","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:324","type":"CtForEachImpl","sourcecode":"for (final byte byte : byte[]) {\n    int int = byte;\n    if (int < 0) {\n        int = 256 + int;\n    } \n    if (java.util.BitSet.get(int)) {\n        java.io.ByteArrayOutputStream.write(int);\n    } else {\n        org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(int, java.io.ByteArrayOutputStream);\n    }\n}"},"variableMap":{"bytes":"obj","this":"obj","buffer":"obj","printable":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:413","type":"CtIfImpl","sourcecode":"if (!(java.lang.Object instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\");\n} "},"status":-2},{"failures":[0,1,2,3,4],"tindex":"429d4fda-433d-11e5-991a-cd68626f8bac","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:132","type":"CtLocalVariableImpl","sourcecode":"final int int = (java.lang.String.length()) - 2"},"variableMap":{"text":"name2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:299","type":"CtLocalVariableImpl","sourcecode":"final int int = (java.lang.String.length()) - 1"},"status":-1},{"failures":[5],"tindex":"429d4fdb-433d-11e5-991a-bfbe1e481b01","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:77","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"v\", \"f\")"},"status":-1},{"failures":[6,7],"tindex":"429d4fdc-433d-11e5-991a-e779fdf6e0e0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:723","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:656","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"SK\")"},"status":-1},{"failures":[8,9,10,11,12,13,14,15,16,17],"tindex":"429d4fdd-433d-11e5-991a-ad2755362fe5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:355","type":"CtIfImpl","sourcecode":"if (int >= 0) {\n    org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) + 1) % (org.apache.commons.codec.binary.Base32.int);\n    org.apache.commons.codec.binary.BaseNCodec.Context.long = ((org.apache.commons.codec.binary.BaseNCodec.Context.long) << (org.apache.commons.codec.binary.Base32.int)) + int;\n    if ((org.apache.commons.codec.binary.BaseNCodec.Context.int) == 0) {\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.long) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n    } \n} "},"status":-1},{"failures":[18],"tindex":"429d4fde-433d-11e5-991a-65d13931bcc8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:91","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"g\", \"k\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:82","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"dg\", \"2g\")"},"status":-1},{"failures":[],"tindex":"429d4fdf-433d-11e5-991a-791dc37b8a9e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:266","type":"CtAssignmentImpl","sourcecode":"java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(java.lang.String)"},"status":0},{"failures":[6,7],"tindex":"429d76f0-433d-11e5-991a-5b1a4e97334c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:271","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('A')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:650","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 3), 2, \"ER\", \"EN\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"X\", \"SK\");\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"SK\");\n    }\n} else {\n    if (((int == 0) && (!org.apache.commons.codec.language.DoubleMetaphone.(isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, 3))))) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, 3)) != 'W')) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'S');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n    }\n}"},"status":-1},{"failures":[19,20,21],"tindex":"429d76f1-433d-11e5-991a-11cd78f07559","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:401","type":"CtAssignmentImpl","sourcecode":"byte[][int++] = ((byte)((int >>> 16) & 255))"},"variableMap":{"b":"l_raw","offset":"bits","iValue":"ii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:184","type":"CtOperatorAssignmentImpl","sourcecode":"byte[][int] |= org.apache.commons.codec.binary.BinaryCodec.int[][int]"},"status":-1},{"failures":[6,7,22,23,24],"tindex":"429d76f2-433d-11e5-991a-15b33664de8a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:270","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('A');\n} "},"status":-1},{"failures":[],"tindex":"429d76f3-433d-11e5-991a-03862714d1f8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (int == int) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"index","to":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:528","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.(isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int - 1)))) && (!boolean)) && ((org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'A') || (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'O'))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'H');\n} else if (int == ((java.lang.String.length()) - 1)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', ' ');\n} else if ((!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 1, \"S\", \"K\", \"L\")))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n} "},"status":-2},{"failures":[],"tindex":"429d76f4-433d-11e5-991a-c17a31b78bfe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:287","type":"CtReturnImpl","sourcecode":"return char[]"},"variableMap":{"l_ascii":"org.apache.commons.codec.language.Nysiis.CHARS_SSS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:149","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.char[]"},"status":0},{"failures":[],"tindex":"429d9e05-433d-11e5-991a-0fcefa23c8f8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:217","type":"CtReturnImpl","sourcecode":"return this.char[]"},"variableMap":{"soundexMapping":"org.apache.commons.codec.language.Nysiis.CHARS_N"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:135","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[25,26],"tindex":"429d9e06-433d-11e5-991a-b7afc52f83c3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:635","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha512(byte[])"},"variableMap":{"this":"this","key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:314","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byte[])"},"status":-1},{"failures":[],"tindex":"429d9e07-433d-11e5-991a-1dd6d25b8082","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    java.lang.String = (org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} "},"variableMap":{"salt":"value","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:442","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 4, \"VAN \", \"VON \")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 3, \"SCH\"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"ET\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 3, \"IER\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'K');\n}"},"status":-2},{"failures":[27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"tindex":"429d9e08-433d-11e5-991a-1513548e378a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:188","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"w","minRating":"w"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.B64:62","type":"CtOperatorAssignmentImpl","sourcecode":"int >>= 6"},"status":-1},{"failures":[6,7,23],"tindex":"429d9e09-433d-11e5-991a-8b6206d156c7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:486","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('F')"},"status":-1},{"failures":[],"tindex":"429d9e0a-433d-11e5-991a-b146d66183f9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:296","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(byte[], ((byte)(0)))"},"status":0},{"failures":[],"tindex":"429dc51b-433d-11e5-991a-b9e6ecab93cf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:266","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[]{ '0' , '0' , '0' , '0' }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:103","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = java.lang.String.toUpperCase(java.util.Locale.java.util.Locale).toCharArray()"},"status":-2},{"failures":[43],"tindex":"429dc51c-433d-11e5-991a-1130348de94d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:528","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byte[])"},"variableMap":{"this":"this","key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:635","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha512(byte[])"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
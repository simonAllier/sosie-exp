{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":42,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":76,"org.apache.commons.codec.language.NysiisTest.testSnat":63,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":77,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":78,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":82,"org.apache.commons.codec.language.NysiisTest.testDropBy":65,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":80,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":81,"org.apache.commons.codec.binary.Base64Test.testBase64":41,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":51,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":83,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":15,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":12,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":1,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":3,"org.apache.commons.codec.binary.Base64Test.testUUID":26,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":22,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":35,"org.apache.commons.codec.binary.Base64Test.testSingletons":39,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":5,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":7,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":9,"org.apache.commons.codec.binary.Base64Test.testPairs":25,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":34,"org.apache.commons.codec.language.NysiisTest.testRule2":57,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":6,"org.apache.commons.codec.language.NysiisTest.testRule1":56,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":93,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":43,"org.apache.commons.codec.language.NysiisTest.testRule7":60,"org.apache.commons.codec.language.NysiisTest.testRule6":59,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":95,"org.apache.commons.codec.language.NysiisTest.testRule5":58,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":94,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":29,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":24,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":30,"org.apache.commons.codec.language.NysiisTest.testCap":52,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":33,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":49,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":88,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":23,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":64,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":92,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":90,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":18,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":31,"org.apache.commons.codec.language.NysiisTest.testBran":61,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":68,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":32,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":91,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":71,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":85,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":16,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":19,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":36,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":10,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":13,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":70,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":37,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":44,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":72,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":73,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":47,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":38,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":84,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":20,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":89,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":75,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":21,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":74,"org.apache.commons.codec.language.SoundexTest.testB650":79,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":8,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":45,"org.apache.commons.codec.language.NysiisTest.testDad":53,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":69,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":11,"org.apache.commons.codec.language.SoundexTest.testNewInstance":87,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":28,"org.apache.commons.codec.language.NysiisTest.testOthers":66,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":40,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":0,"org.apache.commons.codec.language.NysiisTest.testTranan":67,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":46,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":4,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":17,"org.apache.commons.codec.language.SoundexTest.testDifference":86,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":50,"org.apache.commons.codec.language.NysiisTest.testDan":54,"org.apache.commons.codec.language.NysiisTest.testFal":55,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":48,"org.apache.commons.codec.language.NysiisTest.testSnad":62,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":2,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":14,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":27},"transformations":[{"failures":[],"tindex":"e87b692b-4398-11e5-bbc6-312acbff1bed","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:415","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.Metaphone.metaphone(java.lang.String)"},"status":0},{"failures":[],"tindex":"e87b903c-4398-11e5-bbc6-05762bf7c45d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:68","type":"CtReturnImpl","sourcecode":"return java.security.MessageDigest.getInstance(java.lang.String)"},"status":-2},{"failures":[],"tindex":"e87b903d-4398-11e5-bbc6-d15e41f7a028","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:441","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.boolean = true"},"status":-2},{"failures":[],"tindex":"e87bb74e-4398-11e5-bbc6-27a5ddd6e9ad","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:94","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:525","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = boolean ? org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.createBranch() : org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch"},"status":-2},{"failures":[0,1],"tindex":"e87bb74f-4398-11e5-bbc6-532f6e33e8be","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:240","type":"CtOperatorAssignmentImpl","sourcecode":"int |= 1"},"variableMap":{"c":"rounds"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:150","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Integer.parseInt(java.util.regex.Matcher.group(3))"},"status":-1},{"failures":[2,3],"tindex":"e87bb750-4398-11e5-bbc6-136a14f1b732","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:727","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"TS\", \"FX\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:609","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S')"},"status":-1},{"failures":[4],"tindex":"e87bde61-4398-11e5-bbc6-253666ec9916","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:369","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a \\'[\\' but does not end in \\']\\'\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:136","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\")"},"status":-1},{"failures":[],"tindex":"e87bde62-4398-11e5-bbc6-578beeaa0d3d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:96","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"f+\", \"F\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:76","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"cy\", \"sy\")"},"status":1},{"failures":[],"tindex":"e87bde63-4398-11e5-bbc6-f5fd18b5cbfb","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:353","type":"CtReturnImpl","sourcecode":"return this.java.lang.String"},"variableMap":{"charset":"source"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:96","type":"CtReturnImpl","sourcecode":"return this.org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String)"},"status":-2},{"failures":[],"tindex":"e87bde64-4398-11e5-bbc6-4be8e462cd80","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:387","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 18) & (org.apache.commons.codec.binary.Base64.int))]"},"variableMap":{"encodeTable":"buffer","ibitWorkArea":"pos","pos":"pos","context":"context","org.apache.commons.codec.binary.Base64.MASK_6BITS":"pos","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:455","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte"},"status":-2},{"failures":[],"tindex":"e87c0575-4398-11e5-bbc6-adaa6d896c9b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:284","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.byte[]"},"variableMap":{"encodeTable":"lineSeparator","org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:293","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"status":1},{"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"tindex":"e87c0576-4398-11e5-bbc6-671128153c5d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:445","type":"CtIfImpl","sourcecode":"if (int >= 0) {\n    org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) + 1) % (org.apache.commons.codec.binary.Base64.int);\n    org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) << (org.apache.commons.codec.binary.Base64.int)) + int;\n    if ((org.apache.commons.codec.binary.BaseNCodec.Context.int) == 0) {\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.int) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n    } \n} "},"status":-1},{"failures":[50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95],"tindex":"e87c0577-4398-11e5-bbc6-bf9346fa000c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:189","type":"CtIfImpl","sourcecode":"if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"len","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"len","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"len","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"count","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"count","minRating":"count","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"count","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"count","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"len","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"count","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:48","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    if (java.lang.Character.isLetter(java.lang.String.charAt(int))) {\n        char[][int++] = java.lang.String.charAt(int);\n    } \n}"},"status":-1},{"failures":[2,3],"tindex":"e87c2c88-4398-11e5-bbc6-f3779ae9e8de","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:414","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"KN\", \"N\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:604","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'S')"},"status":-1},{"failures":[],"tindex":"e87c2c89-4398-11e5-bbc6-9b933b582d65","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.RefinedSoundex:162","type":"CtIfImpl","sourcecode":"if (!(java.lang.Character.isLetter(char))) {\n    return 0;\n} "},"variableMap":{"c":"java.lang.Character.MIN_VALUE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:906","type":"CtReturnImpl","sourcecode":"return java.lang.Character.char"},"status":-2},{"failures":[56,65],"tindex":"e87c539a-4398-11e5-bbc6-456a5b2b0bdc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:103","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"w\", \"2\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:261","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(java.lang.String).replaceFirst(\"MCC\")"},"status":-1},{"failures":[],"tindex":"e87c539b-4398-11e5-bbc6-633649e173e2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:124","type":"CtReturnImpl","sourcecode":"return java.lang.String.substring(0, org.apache.commons.codec.language.Caverphone1.java.lang.String.length())"},"variableMap":{"txt":"firstThree","org.apache.commons.codec.language.Caverphone1.SIX_1":"firstThree"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:165","type":"CtReturnImpl","sourcecode":"return java.lang.String + java.lang.String"},"status":-2},{"failures":[],"tindex":"e87c539c-4398-11e5-bbc6-a961de0c704d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.BCodec:102","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:420","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha256(byte[]).doFinal(byte[]);\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalArgumentException(java.lang.IllegalStateException);\n}"},"status":-2},{"failures":[],"tindex":"e87c539d-4398-11e5-bbc6-0ba30786ee60","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:62","type":"CtIfImpl","sourcecode":"if (char == char) {\n    continue;\n} "},"variableMap":{"c1":"chr","c2":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:382","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '8';\n} else if (char == 'R') {\n    char = '7';\n} else if (char == 'L') {\n    char = '5';\n} else if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":19,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
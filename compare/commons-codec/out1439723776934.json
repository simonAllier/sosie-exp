{"failureDictionary":{"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":30,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":6,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":26,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":20,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":5,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":9,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":23,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":33,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":12,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":10,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":4,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":21,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":19,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":27,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":18,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":24,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":22,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":31,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":17,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":32,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":3,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":29,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":16,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":13,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":14,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":0,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":7,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":1,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":11,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":35,"org.apache.commons.codec.language.MetaphoneTest.testTCH":25,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":28,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":2,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":8,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent":34,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":15},"transformations":[{"failures":[],"tindex":"3682b174-4408-11e5-8f31-5b2bd8c09f99","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:69","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:357","type":"CtAssignmentImpl","sourcecode":"int = ((((int & 255) << 16) | (int & 65280)) | ((int & 16711680) >>> 16)) | ((int & -268435456) >>> 4)"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"3682ff95-4408-11e5-8f31-cf889c80d282","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:54","type":"CtLocalVariableImpl","sourcecode":"int int = int"},"variableMap":{"thisStart":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:173","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.net.Utils.digit16(byte[][++int])"},"status":-1},{"failures":[],"tindex":"3682ff96-4408-11e5-8f31-c1910fff7317","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.IllegalArgumentException(((\"lineLength \" + int) + \" > 0, but lineSeparator is null\"));\n} "},"variableMap":{"lineSeparator":"data","lineLength":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:158","type":"CtIfImpl","sourcecode":"if (this.boolean) {\n    for (int int = 0 ; int < (byte[].int) ; int++) {\n        if ((byte[][int]) == (org.apache.commons.codec.net.QCodec.byte)) {\n            byte[][int] = org.apache.commons.codec.net.QCodec.byte;\n        } \n    }\n} "},"status":-2},{"failures":[6,7,8,9,10,11,12,13,14],"tindex":"3682ff97-4408-11e5-8f31-6b0f4d9fba6a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:297","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1))"},"variableMap":{"key":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:211","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('T')"},"status":-1},{"failures":[],"tindex":"3682ff98-4408-11e5-8f31-69d5808f04a9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:358","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '3';\n} else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '4';\n} else if ((char == 'X') && (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n    char = '4';\n    org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.addLeft('S');\n    int++;\n} else if ((char == 'S') || (char == 'Z')) {\n    char = '8';\n} else if (char == 'C') {\n    if (char == '/') {\n        if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n            char = '4';\n        } else {\n            char = '8';\n        }\n    } else {\n        if (org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) || (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n            char = '8';\n        } else {\n            char = '4';\n        }\n    }\n} else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '8';\n} else if (char == 'R') {\n    char = '7';\n} else if (char == 'L') {\n    char = '5';\n} else if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"status":-2},{"failures":[],"tindex":"368326a9-4408-11e5-8f31-adff0d5a9b44","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:191","type":"CtIfImpl","sourcecode":"if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"rightLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"rightLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"rightLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"rightLength","minRating":"rightLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"rightLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"rightLength","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"rightLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:362","type":"CtIfImpl","sourcecode":"if ((char == 'X') && (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n    char = '4';\n    org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.addLeft('S');\n    int++;\n} else if ((char == 'S') || (char == 'Z')) {\n    char = '8';\n} else if (char == 'C') {\n    if (char == '/') {\n        if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n            char = '4';\n        } else {\n            char = '8';\n        }\n    } else {\n        if (org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) || (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n            char = '8';\n        } else {\n            char = '4';\n        }\n    }\n} else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '8';\n} else if (char == 'R') {\n    char = '7';\n} else if (char == 'L') {\n    char = '5';\n} else if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"status":-2},{"failures":[15,16,17,18,19,20,21,22],"tindex":"36834dba-4408-11e5-8f31-5d4824e676b5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.IllegalArgumentException(((\"lineLength \" + int) + \" > 0, but lineSeparator is null\"));\n} "},"variableMap":{"lineSeparator":"pBytes","lineLength":"keyLen"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:387","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[], 0, int)"},"status":-1},{"failures":[15,16,17,18,19,20,21,22],"tindex":"36834dbb-4408-11e5-8f31-a31d9774fe43","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:316","type":"CtForImpl","sourcecode":"for (int int = 1 ; int <= (16 + ((byte[][0]) & 255)) ; int++) {\n    java.security.MessageDigest.update(byte[]);\n}"},"variableMap":{"altCtx":"altCtx","altResult":"keyBytes","saltBytes":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:206","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[])"},"status":-1},{"failures":[],"tindex":"36834dbc-4408-11e5-8f31-b55696de667e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    java.lang.String = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (java.lang.String.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern.matcher(java.lang.String);\n    if ((java.util.regex.Matcher == null) || (!(java.util.regex.Matcher.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + java.lang.String));\n    } \n    java.lang.String = java.util.regex.Matcher.group(1);\n}"},"variableMap":{"saltString":"org.apache.commons.codec.language.Metaphone.FRONTV","salt":"org.apache.commons.codec.language.Metaphone.FRONTV","prefix":"org.apache.commons.codec.language.Metaphone.FRONTV"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:206","type":"CtIfImpl","sourcecode":"if (((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1)))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'G'))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 2)))) >= 0)) {\n    java.lang.StringBuilder.append('J');\n    int += 2;\n} else {\n    java.lang.StringBuilder.append('T');\n}"},"status":-2},{"failures":[23,24],"tindex":"368374cd-4408-11e5-8f31-cff4ccfdff63","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:369","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a \\'[\\' but does not end in \\']\\'\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:88","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-1},{"failures":[15,16,17,18,19,20,21,22],"tindex":"368374ce-4408-11e5-8f31-b3b9975bd678","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:776","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[])"},"variableMap":{"messageDigest":"altCtx","valueToDigest":"saltBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:316","type":"CtForImpl","sourcecode":"for (int int = 1 ; int <= (16 + ((byte[][0]) & 255)) ; int++) {\n    java.security.MessageDigest.update(byte[]);\n}"},"status":-1},{"failures":[6,7,25,26,8,12,14,27,28,29,30,31,32,33],"tindex":"368374cf-4408-11e5-8f31-879455fbd798","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:90","type":"CtReturnImpl","sourcecode":"return +1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:422","type":"CtReturnImpl","sourcecode":"return this.int"},"status":-1},{"failures":[],"tindex":"36839be0-4408-11e5-8f31-b53dd762b699","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:288","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.QCodec.encode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be encoded using Q codec\"));\n}"},"variableMap":{"obj":"value","this":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:200","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.BCodec.encode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be encoded using BCodec\"));\n}"},"status":-2},{"failures":[],"tindex":"36839be1-4408-11e5-8f31-ff59e56e576f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:142","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[int << 1]"},"variableMap":{"l":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:273","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[(byte[].int) << 3]"},"status":-2},{"failures":[],"tindex":"36839be2-4408-11e5-8f31-2da4ee4633df","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:764","type":"CtUnaryOperatorImpl","sourcecode":"int--"},"variableMap":{"len":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:371","type":"CtOperatorAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int += (org.apache.commons.codec.binary.BaseNCodec.Context.int) - int"},"status":-2},{"failures":[],"tindex":"36839be3-4408-11e5-8f31-6fbb0c8e9ec8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:385","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(byte[][int++])"},"status":-2},{"failures":[],"tindex":"3683c2f4-4408-11e5-8f31-1977402326dd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.B64:62","type":"CtOperatorAssignmentImpl","sourcecode":"int >>= 6"},"variableMap":{"w":"maxCodeLen"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:261","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"status":-2},{"failures":[0,34,1,2,35,3,4,5],"tindex":"3683c2f5-4408-11e5-8f31-85969cd8d3e3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:169","type":"CtInvocationImpl","sourcecode":"java.io.ByteArrayOutputStream.write(' ')"},"variableMap":{"buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:166","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (byte[].int) ; int++) {\n    final int int = byte[][int];\n    if (int == '+') {\n        java.io.ByteArrayOutputStream.write(' ');\n    } else if (int == (org.apache.commons.codec.net.URLCodec.byte)) {\n        try {\n            final int int = org.apache.commons.codec.net.Utils.digit16(byte[][++int]);\n            final int int = org.apache.commons.codec.net.Utils.digit16(byte[][++int]);\n            java.io.ByteArrayOutputStream.write(((char)((int << 4) + int)));\n        } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n            throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , java.lang.ArrayIndexOutOfBoundsException);\n        }\n    } else {\n        java.io.ByteArrayOutputStream.write(int);\n    }\n}"},"status":-1},{"failures":[],"tindex":"3683c2f6-4408-11e5-8f31-fd42194c1eff","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:339","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.URLCodec.decode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be URL decoded\"));\n}"},"variableMap":{"obj":"obj","this":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:506","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.encode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n}"},"status":-2},{"failures":[],"tindex":"3683ea07-4408-11e5-8f31-4b9ac6286677","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:164","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.substring((int - (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)), int)"},"variableMap":{"nameLength":"open","name":"ph","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"open"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:371","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.substring(0, int)"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
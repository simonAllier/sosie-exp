{"failureDictionary":{"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray":55,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":2,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":42,"org.apache.commons.codec.language.NysiisTest.testDropBy":10,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":49,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":48,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":43,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":47,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":1,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":37,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":6,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":25,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":35,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":38,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":54,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":45,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":44,"org.apache.commons.codec.language.NysiisTest.testRule2":8,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":33,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":14,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":13,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":40,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":50,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":39,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":12,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":56,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":29,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":16,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":20,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":24,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":52,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":18,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":15,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":32,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":34,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":21,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":19,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":53,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":36,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":22,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":3,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":31,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":51,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":46,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":4,"org.apache.commons.codec.language.NysiisTest.testDad":7,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":23,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":30,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":27,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":28,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":11,"org.apache.commons.codec.language.NysiisTest.testSnad":9,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":26,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":41,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":5,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":0},"transformations":[{"failures":[0,1],"tindex":"a0228fe9-4312-11e5-a9ee-9b5053df28fc","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:296","type":"CtOperatorAssignmentImpl","sourcecode":"int += 3"},"variableMap":{"index":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:388","type":"CtOperatorAssignmentImpl","sourcecode":"int |= org.apache.commons.codec.digest.UnixCrypt.(org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(byte[][int++])) << 24"},"status":-1},{"failures":[],"tindex":"a022b6fa-4312-11e5-a9ee-f1557b48edbd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:412","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha1(byte[]))"},"variableMap":{"data":"data","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:733","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha1Hex(byte[])"},"status":1},{"failures":[],"tindex":"a022b6fb-4312-11e5-a9ee-5d6a66cfda74","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:117","type":"CtIfImpl","sourcecode":"if ((java.lang.String.charAt(int)) == (java.lang.String.charAt(int))) {\n    int++;\n} "},"variableMap":{"es1":"org.apache.commons.codec.language.Metaphone.FRONTV","es2":"org.apache.commons.codec.language.Metaphone.FRONTV","i":"wdsz","diff":"wdsz"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:183","type":"CtIfImpl","sourcecode":"if ((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 1)))) >= 0)) {\n    java.lang.StringBuilder.append('S');\n    break;\n} "},"status":-2},{"failures":[2,3,4],"tindex":"a022b6fc-4312-11e5-a9ee-7f3449876139","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"altResult"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:488","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][40], byte[][61], byte[][19], 4, java.lang.StringBuilder)"},"status":-1},{"failures":[5,6],"tindex":"a022b6fd-4312-11e5-a9ee-b1b02cd44e86","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:284","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:767","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"S\", \"TS\")"},"status":-1},{"failures":[7,8,9,10],"tindex":"a022b6fe-4312-11e5-a9ee-7d8627e452f2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:94","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^y\", \"A\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:270","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(java.lang.String).replaceFirst(\"D\")"},"status":-1},{"failures":[],"tindex":"a022b6ff-4312-11e5-a9ee-a7838d0ee8f3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:206","type":"CtOperatorAssignmentImpl","sourcecode":"long -= int"},"variableMap":{"todo":"lbitWorkArea","len":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:507","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.long = ((org.apache.commons.codec.binary.BaseNCodec.Context.long) << 8) + int"},"status":-2},{"failures":[],"tindex":"a022de10-4312-11e5-a9ee-33e61de7a278","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:740","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    int++;\n} else {\n    if (!((int == ((java.lang.String.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 3), 3, \"IAU\", \"EAU\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 2, \"AU\", \"OU\"))))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"KS\");\n    } \n    int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"C\", \"X\") ? int + 2 : int + 1;\n}"},"status":-2},{"failures":[11],"tindex":"a022de11-4312-11e5-a9ee-a983781019d5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:437","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((((\"Malformed import statement \\'\" + java.lang.String) + \"\\' in \") + java.lang.String))"},"variableMap":{"rawLine":"obj","location":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:535","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be quoted-printable decoded\"))"},"status":-1},{"failures":[],"tindex":"a022de12-4312-11e5-a9ee-31cfec27d0a1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:203","type":"CtReturnImpl","sourcecode":"return java.lang.String.format(\"org/apache/commons/codec/language/bm/%s_languages.txt\", org.apache.commons.codec.language.bm.NameType.getName())"},"status":-2},{"failures":[],"tindex":"a022de13-4312-11e5-a9ee-e30758ebc49d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:191","type":"CtIfImpl","sourcecode":"if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"i","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"i","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"i","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"i","minRating":"i","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"i","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"i","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"status":-2},{"failures":[],"tindex":"a022de14-4312-11e5-a9ee-1f2598623c2f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:113","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"r$\", \"3\")"},"variableMap":{"txt":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:411","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"A\", org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":1},{"failures":[12,13,14,15,16,17,18,19],"tindex":"a022de15-4312-11e5-a9ee-8f3297b5e50a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:93","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"t+\", \"T\")"},"variableMap":{"txt":"text"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:429","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.toUpperCase(java.util.Locale.java.util.Locale)"},"status":-1},{"failures":[20,21,22,23,24,25,26],"tindex":"a0230526-4312-11e5-a9ee-df120c350b6a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:284","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.byte[]"},"variableMap":{"encodeTable":"finalb","org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE":"finalb"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:277","type":"CtAssignmentImpl","sourcecode":"byte[] = java.security.MessageDigest.digest()"},"status":-1},{"failures":[27,28,29,30,31,32],"tindex":"a0230527-4312-11e5-a9ee-71209073288d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:200","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.byte[]"},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:210","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.decodeUrl(byte[])"},"status":-1},{"failures":[33,34],"tindex":"a0230528-4312-11e5-a9ee-d5431a51dbde","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:226","type":"CtOperatorAssignmentImpl","sourcecode":"this.int += int"},"variableMap":{"patternLength":"pos","i":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:299","type":"CtAssignmentImpl","sourcecode":"int = 1"},"status":-1},{"failures":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"tindex":"a0230529-4312-11e5-a9ee-bf79da01e893","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:412","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = \"d\" + java.lang.String"},"variableMap":{"remainder":"org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:435","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.substring(org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim()"},"status":-1},{"failures":[5,6],"tindex":"a023052a-4312-11e5-a9ee-973b813566ad","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:327","type":"CtAssignmentImpl","sourcecode":"int = 256 + int"},"variableMap":{"b":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:316","type":"CtOperatorAssignmentImpl","sourcecode":"int += 3"},"status":-1},{"failures":[53,54,55],"tindex":"a023052b-4312-11e5-a9ee-c76bc513c9bf","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:217","type":"CtAssignmentImpl","sourcecode":"byte[][int] = 0"},"variableMap":{"i":"ii","key":"l_raw"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:184","type":"CtOperatorAssignmentImpl","sourcecode":"byte[][int] |= org.apache.commons.codec.binary.BinaryCodec.int[][int]"},"status":-1},{"failures":[56],"tindex":"a023052c-4312-11e5-a9ee-736fb42b8475","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:295","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('X')"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"},"diffs":[{"transformation":"a022b6fa-4312-11e5-a9ee-f1557b48edbd","diffs":[{"branches":{"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":["org.apache.commons.codec.digest.DigestUtils_java.lang.String_sha1Hex(byte[]).b"]},"type":"branch"},{"nodes":{"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":["org.apache.commons.codec.digest.DigestUtils.java.lang.String sha1Hex(byte[])"]},"edges":{"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":["org.apache.commons.codec.digest.DigestUtils.java.lang.String sha1Hex(byte[]) -> org.apache.commons.codec.digest.DigestUtils.byte[] sha1(byte[])","org.apache.commons.codec.digest.DigestUtils.java.lang.String shaHex(byte[]) -> org.apache.commons.codec.digest.DigestUtils.java.lang.String sha1Hex(byte[])","org.apache.commons.codec.digest.DigestUtils.java.lang.String shaHex(byte[]) -> org.apache.commons.codec.binary.Hex.java.lang.String encodeHexString(byte[])","org.apache.commons.codec.digest.DigestUtils.java.lang.String shaHex(byte[]) -> org.apache.commons.codec.digest.DigestUtils.byte[] sha1(byte[])","org.apache.commons.codec.digest.DigestUtils.java.lang.String sha1Hex(byte[]) -> org.apache.commons.codec.binary.Hex.java.lang.String encodeHexString(byte[])"]},"type":"graph"}]}]}
{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":33,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":40,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":16,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":59,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":17,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":31,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":38,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":24,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":23,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":3,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.binary.Base64Test.testUUID":48,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":45,"org.apache.commons.codec.binary.Base64Test.testSingletons":56,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":19,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":15,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":57,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":9,"org.apache.commons.codec.binary.Base64Test.testPairs":47,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":55,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":14,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":58,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":18,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":7,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":8,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":6,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":50,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":51,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":5,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":54,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":34,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":42,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":52,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":27,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":53,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":35,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":41,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":2,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":4,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":39,"org.apache.commons.codec.language.Caverphone2Test.testLocaleIndependence":12,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":30,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":32,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":37,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":21,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":29,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":13,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":44,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":10,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":46,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":28,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":20,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":43,"org.apache.commons.codec.language.Caverphone2Test.testEncodeEmpty":11,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":25,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":36,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":26,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":22,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":49},"transformations":[{"failures":[0,1],"tindex":"d65ff02d-430f-11e5-a64d-070538b6fc05","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:429","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K', 'J')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:522","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'H')"},"status":-1},{"failures":[],"tindex":"d660173e-430f-11e5-a64d-ed1dd85b77f5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:188","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"pos","minRating":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:456","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-2},{"failures":[2,3,4,5,6,7,8,9,10,11,12],"tindex":"d660173f-430f-11e5-a64d-4dae3db5aac7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:125","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String + (org.apache.commons.codec.language.Caverphone2.java.lang.String)"},"status":-1},{"failures":[],"tindex":"d6601740-430f-11e5-a64d-47f37eb9182f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:357","type":"CtAssignmentImpl","sourcecode":"char = '2'"},"variableMap":{"code":"lastChar"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:549","type":"CtAssignmentImpl","sourcecode":"char = char"},"status":1},{"failures":[],"tindex":"d6601741-430f-11e5-a64d-3b7b2b50142c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:59","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^cough\", \"cou2f\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:107","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"wh3\", \"Wh3\")"},"status":1},{"failures":[],"tindex":"d6601742-430f-11e5-a64d-a56f9bceea25","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:238","type":"CtOperatorAssignmentImpl","sourcecode":"int <<= 1"},"variableMap":{"c":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:473","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-2},{"failures":[],"tindex":"d6601743-430f-11e5-a64d-b33a650768e1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:284","type":"CtReturnImpl","sourcecode":"return new java.lang.String(byte[] , java.lang.String)"},"variableMap":{"bytes":"keyBytes","charsetName":"org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:161","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[], java.lang.String, org.apache.commons.codec.digest.Md5Crypt.java.lang.String)"},"status":-2},{"failures":[13,14,15,16,17,18,19,20,21,22,23,24],"tindex":"d6603e54-430f-11e5-a64d-6d3a34914873","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:500","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    final byte[] byte[] = org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int, org.apache.commons.codec.binary.BaseNCodec.Context);\n    org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) + 1) % (org.apache.commons.codec.binary.Base32.int);\n    int int = byte[][int++];\n    if (int < 0) {\n        int += 256;\n    } \n    org.apache.commons.codec.binary.BaseNCodec.Context.long = ((org.apache.commons.codec.binary.BaseNCodec.Context.long) << 8) + int;\n    if (0 == (org.apache.commons.codec.binary.BaseNCodec.Context.int)) {\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 30))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 25))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 20))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 15))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 5))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(org.apache.commons.codec.binary.BaseNCodec.Context.long)) & (org.apache.commons.codec.binary.Base32.int))];\n        org.apache.commons.codec.binary.BaseNCodec.Context.int += org.apache.commons.codec.binary.Base32.int;\n        if (((int) > 0) && ((int) <= (org.apache.commons.codec.binary.BaseNCodec.Context.int))) {\n            java.lang.System.arraycopy(byte[], 0, byte[], org.apache.commons.codec.binary.BaseNCodec.Context.int, byte[].int);\n            org.apache.commons.codec.binary.BaseNCodec.Context.int += byte[].int;\n            org.apache.commons.codec.binary.BaseNCodec.Context.int = 0;\n        } \n    } \n}"},"status":-1},{"failures":[25,26,27,28,29,30],"tindex":"d6603e55-430f-11e5-a64d-5d03feb8c294","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:663","type":"CtReturnImpl","sourcecode":"return byte[]"},"variableMap":{"binaryData":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:210","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.decodeUrl(byte[])"},"status":-1},{"failures":[],"tindex":"d6603e56-430f-11e5-a64d-47acd779e287","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Crypt:67","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[])"},"status":-2},{"failures":[],"tindex":"d6603e57-430f-11e5-a64d-47ecdd4bc050","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:139","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.digest.Sha2Crypt.int"},"status":-2},{"failures":[],"tindex":"d6603e58-430f-11e5-a64d-95cd4ef3665e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:493","type":"CtOperatorAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int += (org.apache.commons.codec.binary.BaseNCodec.Context.int) - int"},"variableMap":{"currentLinePos":"pos","savedPos":"pos","pos":"pos","context":"context"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:486","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[0,1,31,32,33],"tindex":"d6606569-430f-11e5-a64d-3957f24fb3b6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:356","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"variableMap":{"b":"result","encodeBlanks":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:923","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":-1},{"failures":[34,35],"tindex":"d660656a-430f-11e5-a64d-3739d90d5868","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:367","type":"CtAssignmentImpl","sourcecode":"char = '8'"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:363","type":"CtAssignmentImpl","sourcecode":"char = '4'"},"status":-1},{"failures":[36],"tindex":"d660656b-430f-11e5-a64d-f5b4d40853d0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:573","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('P')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:113","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S')"},"status":-1},{"failures":[0,1],"tindex":"d660656c-430f-11e5-a64d-8729c15c8949","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:589","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:688","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T')"},"status":-1},{"failures":[],"tindex":"d660656d-430f-11e5-a64d-318dfa7019b2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:704","type":"CtLocalVariableImpl","sourcecode":"final int int = int + int"},"variableMap":{"patternLength":"i","i":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:366","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.net.Utils.digit16(byte[][++int])"},"status":-2},{"failures":[37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"tindex":"d660656e-430f-11e5-a64d-7fd76edecae6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:238","type":"CtOperatorAssignmentImpl","sourcecode":"int <<= 1"},"variableMap":{"c":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:383","type":"CtOperatorAssignmentImpl","sourcecode":"int += 256"},"status":-1},{"failures":[8],"tindex":"d660656f-430f-11e5-a64d-0be63fc82aed","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:99","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"w3\", \"W3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:81","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"v\", \"f\")"},"status":-1},{"failures":[],"tindex":"d6608c80-430f-11e5-a64d-cf972021bebe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:389","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replace(java.lang.String, java.lang.String)"},"variableMap":{"singleLetter":"boxContent","replacedName":"boxContent","dc":"boxContent"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:554","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(1)"},"status":1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
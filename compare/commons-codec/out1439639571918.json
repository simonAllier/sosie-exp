{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":53,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray":62,"org.apache.commons.codec.language.NysiisTest.testSnat":31,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":13,"org.apache.commons.codec.language.NysiisTest.testDropBy":33,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":66,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":51,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":58,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":21,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch":2,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":45,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse":0,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":12,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":6,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":43,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":46,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":61,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":39,"org.apache.commons.codec.language.NysiisTest.testRule2":27,"org.apache.commons.codec.language.NysiisTest.testRule1":26,"org.apache.commons.codec.language.NysiisTest.testRule6":28,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":44,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":71,"org.apache.commons.codec.language.NysiisTest.testCap":22,"org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac":52,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":68,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":32,"org.apache.commons.codec.language.NysiisTest.testBran":29,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":36,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":65,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":49,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":55,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":63,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch":4,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":48,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse":3,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding":9,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":54,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":7,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":40,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":60,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":42,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":69,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":67,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":14,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":19,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":56,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":15,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":18,"org.apache.commons.codec.language.NysiisTest.testDad":23,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":47,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":50,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":59,"org.apache.commons.codec.language.NysiisTest.testOthers":34,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":17,"org.apache.commons.codec.language.NysiisTest.testTranan":35,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":70,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":8,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":20,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":64,"org.apache.commons.codec.language.NysiisTest.testDan":24,"org.apache.commons.codec.language.NysiisTest.testFal":25,"org.apache.commons.codec.language.NysiisTest.testSnad":30,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":41,"org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1":11,"org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0":10,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":57,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":5,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":37,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":16,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse":1,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Length":38},"transformations":[{"failures":[0,1,2,3,4],"tindex":"2866f0cf-4344-11e5-8c7a-c15d59533a67","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:217","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"286717e0-4344-11e5-8c7a-13adfdcaa8ef","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:767","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[int / 8]"},"variableMap":{"bitlen":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:203","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(byte[].int) >> 3]"},"status":-2},{"failures":[5,6,7],"tindex":"286717e1-4344-11e5-8c7a-0bb13076fbcf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:555","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('L')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:368","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 2, \"MC\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'K');\n    }\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n}"},"status":-1},{"failures":[8,9],"tindex":"286717e2-4344-11e5-8c7a-652b54c1c783","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:600","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(org.apache.commons.codec.net.QuotedPrintableCodec.encode(java.lang.String.getBytes(java.lang.String)))"},"status":-1},{"failures":[],"tindex":"286717e3-4344-11e5-8c7a-6d9aa321d91c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:68","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('#')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:97","type":"CtForImpl","sourcecode":"for (int int = 'a' ; int <= 'z' ; int++) {\n    org.apache.commons.codec.net.QCodec.java.util.BitSet.set(int);\n}"},"status":-2},{"failures":[10,11],"tindex":"28673ef4-4344-11e5-8c7a-c396a1bf36e0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:178","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException((((\"Illegal hexadecimal character \" + char) + \" at index \") + int))"},"status":-1},{"failures":[],"tindex":"28673ef5-4344-11e5-8c7a-877e2bff0baf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    java.lang.String = java.lang.String.substring(1);\n} "},"variableMap":{"str":"value","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:487","type":"CtIfImpl","sourcecode":"if ((int > 0) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int - 1))) != 'I')) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n} "},"status":-2},{"failures":[],"tindex":"28673ef6-4344-11e5-8c7a-9fe8b539a29c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:208","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"             \")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:184","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[],"tindex":"28673ef7-4344-11e5-8c7a-75dbf97592e1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtIfImpl","sourcecode":"if ((java.lang.String != null) && (!(java.lang.String.startsWith(org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n    java.lang.String = (org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + java.lang.String;\n} "},"variableMap":{"salt":"org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtIfImpl","sourcecode":"if (java.lang.String.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    java.lang.String = java.lang.String.substring(0, ((java.lang.String.length()) - 1));\n} "},"status":-2},{"failures":[12,13,14,15,16,17,18,19],"tindex":"28673ef8-4344-11e5-8c7a-7771ae7aee60","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:294","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.reset()"},"variableMap":{"ctx":"ctx"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:251","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[])"},"status":-1},{"failures":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"tindex":"28673ef9-4344-11e5-8c7a-87a95c4f42ea","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:292","type":"CtIfImpl","sourcecode":"if ((java.lang.StringBuilder.length()) > 1) {\n    char char = java.lang.StringBuilder.charAt(((java.lang.StringBuilder.length()) - 1));\n    if (char == 'S') {\n        java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1));\n        char = java.lang.StringBuilder.charAt(((java.lang.StringBuilder.length()) - 1));\n    } \n    if ((java.lang.StringBuilder.length()) > 2) {\n        final char char = java.lang.StringBuilder.charAt(((java.lang.StringBuilder.length()) - 2));\n        if ((char == 'A') && (char == 'Y')) {\n            java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 2));\n        } \n    } \n    if (char == 'A') {\n        java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1));\n    } \n} "},"variableMap":{"key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:287","type":"CtIfImpl","sourcecode":"if ((char[][int]) != (char[][(int - 1)])) {\n    java.lang.StringBuilder.append(char[][int]);\n} "},"status":-1},{"failures":[37,38,39],"tindex":"2867660a-4344-11e5-8c7a-11577a514a63","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:706","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.binary.Base64().decode(byte[])"},"variableMap":{"base64Data":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:260","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getMd5Digest().digest(byte[])"},"status":-1},{"failures":[40,41,42,43,44,45,46,47],"tindex":"2867660b-4344-11e5-8c7a-f53de1e4c159","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:427","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"$\")"},"variableMap":{"buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:77","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(org.apache.commons.codec.net.RFC1522Codec.char)"},"status":-1},{"failures":[48,49,50,51,52,53,54,55,56,57,58,59],"tindex":"2867660c-4344-11e5-8c7a-13fec6b3694c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacAlgorithms:91","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"status":-1},{"failures":[59],"tindex":"2867660d-4344-11e5-8c7a-6f9db6900082","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:460","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.hmacSha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String))"},"variableMap":{"valueToDigest":"key","this":"this","key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:674","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.hmacSha512(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String))"},"status":-1},{"failures":[60,61,62],"tindex":"2867660e-4344-11e5-8c7a-0d069d3f1e04","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:61","type":"CtAssignmentImpl","sourcecode":"byte[][0] = ((byte)(int))"},"variableMap":{"i":"ii","singleByte":"l_raw"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:184","type":"CtOperatorAssignmentImpl","sourcecode":"byte[][int] |= org.apache.commons.codec.binary.BinaryCodec.int[][int]"},"status":-1},{"failures":[],"tindex":"2867660f-4344-11e5-8c7a-41f4be9ed0c7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Soundex:217","type":"CtReturnImpl","sourcecode":"return this.char[]"},"variableMap":{"soundexMapping":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:270","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.char[]"},"status":-2},{"failures":[63,64,65,66,67,68,69,70,71],"tindex":"28678c20-4344-11e5-8c7a-db43fc03e129","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:206","type":"CtIfImpl","sourcecode":"if (((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1)))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'G'))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 2)))) >= 0)) {\n    java.lang.StringBuilder.append('J');\n    int += 2;\n} else {\n    java.lang.StringBuilder.append('T');\n}"},"status":-1},{"failures":[],"tindex":"28678c21-4344-11e5-8c7a-a9643efb34f1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:764","type":"CtUnaryOperatorImpl","sourcecode":"int--"},"variableMap":{"len":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:321","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int, boolean, java.io.ByteArrayOutputStream)"},"status":0},{"failures":[],"tindex":"28678c22-4344-11e5-8c7a-4585831aad15","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:363","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"pos":"pos","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"org.apache.commons.codec.binary.Base32.MASK_5BITS","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:509","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.int))]"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
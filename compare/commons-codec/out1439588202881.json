{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":28,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":14,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":6,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":5,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":34,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":16,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":10,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":27,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":7,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":18,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":19,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":23,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":26,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":4,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":2,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":8,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":35,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":1,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":33,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":24,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":21,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":32,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":36,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":31,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":3,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":15,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":25,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":30,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":22,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeStringWithNull":37,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":9,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":11,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":13,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":20,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":12,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":29,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":0,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":17},"transformations":[{"failures":[0,1],"tindex":"8e1265d0-42cc-11e5-a9a7-69a2094f8057","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:326","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    int = 256 + int;\n} "},"variableMap":{"b":"y"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    int++;\n    int = 128;\n} "},"status":-1},{"failures":[],"tindex":"8e128ce1-42cc-11e5-a9a7-915642b32be4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:287","type":"CtReturnImpl","sourcecode":"return char[]"},"variableMap":{"l_ascii":"org.apache.commons.codec.language.Nysiis.CHARS_G"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:131","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.char[]"},"status":0},{"failures":[],"tindex":"8e128ce2-42cc-11e5-a9a7-55d1b7405cf3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (int == int) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"pos","to":"modulus"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:447","type":"CtSwitchImpl","sourcecode":"switch (org.apache.commons.codec.binary.BaseNCodec.Context.int) {\n    case 0 :\n        break;\n    case 1 :\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 3))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) << 2))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        break;\n    case 2 :\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 11))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 6))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 1))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) << 4))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        break;\n    case 3 :\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 19))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 14))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 9))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 4))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) << 1))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        break;\n    case 4 :\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 27))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 22))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 17))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 12))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 7))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 2))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) << 3))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (org.apache.commons.codec.binary.BaseNCodec.Context.int)));\n}"},"status":-2},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14],"tindex":"8e12b3f3-42cc-11e5-a9a7-fd04efcb88fe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a \\'[\\' but does not end in \\']\\'\");\n} "},"variableMap":{"ph":"location"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:267","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    boolean = true;\n} else {\n    final int int = java.lang.String.indexOf(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String);\n    if (int >= 0) {\n        java.lang.String = java.lang.String.substring(0, int);\n    } \n    java.lang.String = java.lang.String.trim();\n    if ((java.lang.String.length()) == 0) {\n        continue;\n    } \n    if (java.lang.String.contains(\"=\")) {\n        final java.lang.String[] java.lang.String[] = java.lang.String.split(\"=\");\n        if ((java.lang.String[].int) != 2) {\n            throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (java.lang.String[].int)) + \" parts: \") + java.lang.String) + \" in \") + java.lang.String));\n        } else {\n            final java.lang.String java.lang.String = java.lang.String[][0];\n            final java.lang.String java.lang.String = java.lang.String[][1];\n            if (((java.lang.String.length()) != 1) || ((java.lang.String.length()) != 1)) {\n                throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + java.lang.String) + \" in \") + java.lang.String));\n            } \n            java.util.Map<java.lang.Character, java.lang.Character>.put(java.lang.String.charAt(0), java.lang.String.charAt(0));\n        }\n    } else {\n        final java.lang.String[] java.lang.String[] = java.lang.String.split(\"\\\\s+\");\n        if ((java.lang.String[].int) != 4) {\n            throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (java.lang.String[].int)) + \" parts: \") + java.lang.String) + \" in \") + java.lang.String));\n        } else {\n            try {\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][0]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][1]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][2]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][3]);\n                final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(java.lang.String , java.lang.String , java.lang.String , java.lang.String);\n                final char char = org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.java.lang.String.charAt(0);\n                java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(char);\n                if (java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> == null) {\n                    java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                    java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.put(char, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>);\n                } \n                java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>.add(org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule);\n            } catch (final java.lang.IllegalArgumentException e) {\n                throw new java.lang.IllegalStateException((((\"Problem parsing line \\'\" + int) + \"\\' in \") + java.lang.String) , java.lang.IllegalArgumentException);\n            }\n        }\n    }\n}"},"status":-1},{"failures":[15,16,17,18,19],"tindex":"8e12b3f4-42cc-11e5-a9a7-29ca533436fb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtIfImpl","sourcecode":"if ((((java.lang.String == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(java.lang.String))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(java.lang.String))) || ((java.lang.String.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n} "},"variableMap":{"name":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:176","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"status":-1},{"failures":[],"tindex":"8e12db05-42cc-11e5-a9a7-d720774b2146","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (int == ' ') {\n    int = '+';\n} "},"variableMap":{"b":"j"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:239","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[][int])"},"status":-2},{"failures":[20,21,22],"tindex":"8e12db06-42cc-11e5-a9a7-137cdb7b05c3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:275","type":"CtUnaryOperatorImpl","sourcecode":"(int)--"},"variableMap":{"length":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:613","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"status":-1},{"failures":[0,1],"tindex":"8e12db07-42cc-11e5-a9a7-a13f363fe9c4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:751","type":"CtAssignmentImpl","sourcecode":"int = ((int + 7) >> 3) << 3"},"variableMap":{"bitlen":"u"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:242","type":"CtOperatorAssignmentImpl","sourcecode":"int >>>= 1"},"status":-1},{"failures":[],"tindex":"8e12db08-42cc-11e5-a9a7-85dad6f72cb2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:111","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"l\", \"2\")"},"variableMap":{"txt":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:88","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(java.lang.String, org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-2},{"failures":[],"tindex":"8e12db09-42cc-11e5-a9a7-a51e9cca1bc1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:93","type":"CtIfImpl","sourcecode":"if (int != 0) {\n    return int;\n} "},"variableMap":{"c":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:223","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(int, java.io.ByteArrayOutputStream)"},"status":-2},{"failures":[23,24,25],"tindex":"8e13021a-42cc-11e5-a9a7-23753621d107","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:319","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('K')"},"status":-1},{"failures":[],"tindex":"8e13021b-42cc-11e5-a9a7-a7421578e3b2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:113","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[int]"},"variableMap":{"avail":"bitlen"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:767","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[int / 8]"},"status":-2},{"failures":[20,21,26,27,28],"tindex":"8e13021c-42cc-11e5-a9a7-ad7024ff0058","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:532","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', ' ')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:123","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('F')"},"status":-1},{"failures":[29,30,31,32,33,34,35,36],"tindex":"8e13021d-42cc-11e5-a9a7-15c306db0fbd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:316","type":"CtForImpl","sourcecode":"for (int int = 1 ; int <= (16 + ((byte[][0]) & 255)) ; int++) {\n    java.security.MessageDigest.update(byte[]);\n}"},"status":-1},{"failures":[37],"tindex":"8e13021e-42cc-11e5-a9a7-6d47f47e640c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:469","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[],"tindex":"8e13021f-42cc-11e5-a9a7-ed62c59c9090","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:73","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('(')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:103","type":"CtForImpl","sourcecode":"for (int int = 62 ; int <= 126 ; int++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(int);\n}"},"status":-2},{"failures":[],"tindex":"8e132930-42cc-11e5-a9a7-89d210583f8f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    java.lang.String = (org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} "},"variableMap":{"salt":"org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"org.apache.commons.codec.language.DaitchMokotoffSoundex.COMMENT"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:255","type":"CtWhileImpl","sourcecode":"while (java.util.Scanner.hasNextLine()) {\n    int++;\n    final java.lang.String java.lang.String = java.util.Scanner.nextLine();\n    java.lang.String java.lang.String = java.lang.String;\n    if (boolean) {\n        if (java.lang.String.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n            boolean = false;\n        } \n        continue;\n    } \n    if (java.lang.String.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n        boolean = true;\n    } else {\n        final int int = java.lang.String.indexOf(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String);\n        if (int >= 0) {\n            java.lang.String = java.lang.String.substring(0, int);\n        } \n        java.lang.String = java.lang.String.trim();\n        if ((java.lang.String.length()) == 0) {\n            continue;\n        } \n        if (java.lang.String.contains(\"=\")) {\n            final java.lang.String[] java.lang.String[] = java.lang.String.split(\"=\");\n            if ((java.lang.String[].int) != 2) {\n                throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (java.lang.String[].int)) + \" parts: \") + java.lang.String) + \" in \") + java.lang.String));\n            } else {\n                final java.lang.String java.lang.String = java.lang.String[][0];\n                final java.lang.String java.lang.String = java.lang.String[][1];\n                if (((java.lang.String.length()) != 1) || ((java.lang.String.length()) != 1)) {\n                    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + java.lang.String) + \" in \") + java.lang.String));\n                } \n                java.util.Map<java.lang.Character, java.lang.Character>.put(java.lang.String.charAt(0), java.lang.String.charAt(0));\n            }\n        } else {\n            final java.lang.String[] java.lang.String[] = java.lang.String.split(\"\\\\s+\");\n            if ((java.lang.String[].int) != 4) {\n                throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (java.lang.String[].int)) + \" parts: \") + java.lang.String) + \" in \") + java.lang.String));\n            } else {\n                try {\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][0]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][1]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][2]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][3]);\n                    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(java.lang.String , java.lang.String , java.lang.String , java.lang.String);\n                    final char char = org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.java.lang.String.charAt(0);\n                    java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(char);\n                    if (java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> == null) {\n                        java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                        java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.put(char, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>);\n                    } \n                    java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>.add(org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule);\n                } catch (final java.lang.IllegalArgumentException e) {\n                    throw new java.lang.IllegalStateException((((\"Problem parsing line \\'\" + int) + \"\\' in \") + java.lang.String) , java.lang.IllegalArgumentException);\n                }\n            }\n        }\n    }\n}"},"status":-2},{"failures":[],"tindex":"8e132931-42cc-11e5-a9a7-3f519a26a515","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:432","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(org.apache.commons.codec.binary.BaseNCodec.Context.int) - (org.apache.commons.codec.binary.BaseNCodec.Context.int)]"},"variableMap":{"pos":"pos","context":"context","readPos":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:412","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[org.apache.commons.codec.binary.BaseNCodec.Context.int]"},"status":-2},{"failures":[20,21,27,28],"tindex":"8e135042-42cc-11e5-a9a7-d7d799d79459","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:654","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"X\", \"SK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:399","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T')"},"status":-1},{"failures":[],"tindex":"8e135043-42cc-11e5-a9a7-0f62e2bec50b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:569","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.encodeBase64(byte[], false))"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":32,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":3,"org.apache.commons.codec.language.NysiisTest.testDropBy":52,"org.apache.commons.codec.binary.Base64Test.testBase64":31,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":43,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":40,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":5,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.binary.Base64Test.testUUID":16,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":12,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":25,"org.apache.commons.codec.binary.Base64Test.testSingletons":29,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":6,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":8,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":51,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":37,"org.apache.commons.codec.binary.Base64Test.testPairs":15,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":24,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":7,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":33,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":19,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":14,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":20,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":23,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":50,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":13,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":21,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":46,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":22,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":44,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":47,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":26,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":38,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":41,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":2,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":27,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":34,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":48,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":28,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":10,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":11,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":9,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":35,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":39,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":18,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":30,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":36,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":45,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":49,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":17,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":42,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":4},"transformations":[{"failures":[],"tindex":"bdd7896b-42ae-11e5-bb09-b112b8a8b8ea","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:226","type":"CtOperatorAssignmentImpl","sourcecode":"this.int += int"},"variableMap":{"patternLength":"n","i":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:329","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-2},{"failures":[],"tindex":"bdd7b07c-42ae-11e5-bb09-d525bf7fbb38","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:133","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:336","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.length()"},"status":-2},{"failures":[],"tindex":"bdd7b07d-42ae-11e5-bb09-d55ea2f08620","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:365","type":"CtAssignmentImpl","sourcecode":"int = (int >>> 1) | (int << 27)"},"variableMap":{"c":"cp"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:299","type":"CtOperatorAssignmentImpl","sourcecode":"int += int"},"status":-2},{"failures":[],"tindex":"bdd7b07e-42ae-11e5-bb09-d7e28103a490","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:191","type":"CtIfImpl","sourcecode":"if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"length","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"length","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"length","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"length","minRating":"length","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"length","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"length","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:181","type":"CtForImpl","sourcecode":"for (int int = 0, int int = (char[].int) - 1 ; int < (byte[].int) ; int++ , int -= 8) {\n    for (int int = 0 ; int < (org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++int) {\n        if ((char[][(int - int)]) == '1') {\n            byte[][int] |= org.apache.commons.codec.binary.BinaryCodec.int[][int];\n        } \n    }\n}"},"status":-2},{"failures":[],"tindex":"bdd7b07f-42ae-11e5-bb09-6d19411c954f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} "},"variableMap":{"charset":"prefix"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:206","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(java.lang.String.getBytes(org.apache.commons.codec.Charsets.java.nio.charset.Charset))"},"status":-2},{"failures":[],"tindex":"bdd7d790-42ae-11e5-bb09-3b4ee91b13b6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:99","type":"CtIfImpl","sourcecode":"if (int == 1) {\n    return java.lang.String.toUpperCase(java.util.Locale.java.util.Locale);\n} "},"status":0},{"failures":[],"tindex":"bdd7d791-42ae-11e5-bb09-57e82a3baa5e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:834","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[0,1,2,3],"tindex":"bdd7d792-42ae-11e5-bb09-3528f4a30e02","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:238","type":"CtOperatorAssignmentImpl","sourcecode":"int <<= 1"},"variableMap":{"c":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:692","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"status":-1},{"failures":[],"tindex":"bdd7d793-42ae-11e5-bb09-cd13d3e16b7d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:817","type":"CtReturnImpl","sourcecode":"return (((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 4, \"VAN \", \"VON \")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 3, \"SCH\"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 2), 1, \"T\", \"S\"))) || ((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 1, \"A\", \"O\", \"U\", \"E\")) || (int == 0)) && (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 2), 1, org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])) || ((int + 1) == ((java.lang.String.length()) - 1))))"},"status":-2},{"failures":[0,1,2],"tindex":"bdd7d794-42ae-11e5-bb09-234b6cabfab2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:173","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'V' ? int + 2 : int + 1"},"variableMap":{"this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:574","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"P\", \"B\") ? int + 2 : int + 1"},"status":-1},{"failures":[],"tindex":"bdd7d795-42ae-11e5-bb09-8f1e96c241c3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:138","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"status":0},{"failures":[4,5],"tindex":"bdd7d796-42ae-11e5-bb09-2b1755b81420","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:363","type":"CtAssignmentImpl","sourcecode":"int = (int >>> 2) | (int << 26)"},"status":-1},{"failures":[],"tindex":"bdd7fea7-42ae-11e5-bb09-db59f420e450","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:363","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"pos":"pos","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:362","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2},{"failures":[0,1],"tindex":"bdd7fea8-42ae-11e5-bb09-4f10ab815b4b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:147","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('N')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:295","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X')"},"status":-1},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"tindex":"bdd7fea9-42ae-11e5-bb09-a7fd1013d6c9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:438","type":"CtIfImpl","sourcecode":"if (byte == (byte)) {\n    org.apache.commons.codec.binary.BaseNCodec.Context.boolean = true;\n    break;\n} else {\n    if ((byte >= 0) && (byte < (org.apache.commons.codec.binary.Base64.byte[].int))) {\n        final int int = org.apache.commons.codec.binary.Base64.byte[][byte];\n        if (int >= 0) {\n            org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) + 1) % (org.apache.commons.codec.binary.Base64.int);\n            org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) << (org.apache.commons.codec.binary.Base64.int)) + int;\n            if ((org.apache.commons.codec.binary.BaseNCodec.Context.int) == 0) {\n                byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n                byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n                byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.int) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            } \n        } \n    } \n}"},"status":-1},{"failures":[],"tindex":"bdd7feaa-42ae-11e5-bb09-7bc9a9a0c5b2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:188","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"pos","minRating":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:487","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-2},{"failures":[],"tindex":"bdd825bb-42ae-11e5-bb09-a912d9be060a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((java.lang.String.length()) == 0) {\n    continue;\n} "},"variableMap":{"line":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtIfImpl","sourcecode":"if (java.lang.String.endsWith(org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    java.lang.String = java.lang.String.substring(0, ((java.lang.String.length()) - 1));\n} "},"status":-2},{"failures":[51],"tindex":"bdd825bc-42ae-11e5-bb09-2d1cb5b767fc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:310","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.md5(java.io.InputStream))"},"status":-1},{"failures":[0,1,2,3],"tindex":"bdd825bd-42ae-11e5-bb09-7dc767ee61ff","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:552","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.conditionL0(java.lang.String, int)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendPrimary('L');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('L');\n}"},"variableMap":{"result":"result","this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:453","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'G') {\n    int += 2;\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n} else {\n    int++;\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n}"},"status":-1},{"failures":[52],"tindex":"bdd825be-42ae-11e5-bb09-a96e1bac03b1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:148","type":"CtIfImpl","sourcecode":"if (((char == 'S') && (char == 'C')) && (char == 'H')) {\n    return org.apache.commons.codec.language.Nysiis.char[];\n} "},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"},"diffs":[{"transformation":"bdd7d795-42ae-11e5-bb09-8f1e96c241c3","diffs":[{"branches":{"org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull":["org.apache.commons.codec.net.RFC1522Codec_java.lang.String_encodeText(java.lang.String,java.lang.String).b","org.apache.commons.codec.net.RFC1522Codec_java.lang.String_encodeText(java.lang.String,java.lang.String).t1"]},"type":"branch"},{"nodes":{"org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull":["org.apache.commons.codec.net.RFC1522Codec.java.lang.String encodeText(java.lang.String,java.lang.String)"]},"edges":{"org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull":["org.apache.commons.codec.net.BCodec.java.lang.String encode(java.lang.String,java.lang.String) -> org.apache.commons.codec.net.RFC1522Codec.java.lang.String encodeText(java.lang.String,java.lang.String)"]},"type":"graph"}]}]}
{"failureDictionary":{"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":0,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":13,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":22,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":3,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":6,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":5,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":18,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":10,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":17,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":7,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":21,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":12,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":16,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":23,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":9,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":4,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":20,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":2,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":1,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":8,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":14,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":15,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":19,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":11},"transformations":[{"failures":[0],"tindex":"be1d235c-4449-11e5-9586-9fc88c689159","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:193","type":"CtIfImpl","sourcecode":"if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"n","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"n","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"n","minRating":"n","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:166","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'M')) && org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) {\n    break;\n} "},"status":-1},{"failures":[],"tindex":"be1d717d-4449-11e5-9586-9f6ad701b671","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:92","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"s+\", \"S\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:77","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"v\", \"f\")"},"status":1},{"failures":[1],"tindex":"be1d717e-4449-11e5-9586-bd5b44004ea1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:432","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    org.apache.commons.codec.binary.BaseNCodec.Context.boolean = true;\n} "},"status":-2},{"failures":[],"tindex":"be1d717f-4449-11e5-9586-3d90262d18cf","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:271","type":"CtReturnImpl","sourcecode":"return null"},"status":-2},{"failures":[],"tindex":"be1d7180-4449-11e5-9586-6de63eb98eab","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:96","type":"CtReturnImpl","sourcecode":"return java.lang.String.getBytes(java.nio.charset.Charset)"},"variableMap":{"charset":"org.apache.commons.codec.Charsets.ISO_8859_1","string":"string"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:114","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.org.apache.commons.codec.binary.StringUtils.getBytes(java.lang.String, org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-2},{"failures":[],"tindex":"be1d9891-4449-11e5-9586-9dd3dfc19e58","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:214","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[],"tindex":"be1d9892-4449-11e5-9586-417ca62e5c5c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:298","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[2]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:225","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.desSetKey(byte[])"},"status":-2},{"failures":[],"tindex":"be1d9893-4449-11e5-9586-0d395b6e0e39","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:191","type":"CtIfImpl","sourcecode":"if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"pos","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"pos","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"pos","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"pos","minRating":"pos","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"pos","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"pos","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:362","type":"CtIfImpl","sourcecode":"if (int > (-1)) {\n    java.lang.StringBuilder.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(int));\n} else {\n    java.lang.StringBuilder.append(char);\n}"},"status":-2},{"failures":[],"tindex":"be1dbfa4-4449-11e5-9586-6d89f414fd57","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:670","type":"CtIfImpl","sourcecode":"if (long > int) {\n    throw new java.lang.IllegalArgumentException((((\"Input array too big, the output array would be bigger (\" + long) + \") than the specified maximum size of \") + int));\n} "},"variableMap":{"len":"todo","maxResultSize":"org.apache.commons.codec.binary.BaseNCodec.EOF"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:200","type":"CtWhileImpl","sourcecode":"while (long > 0) {\n    int int = ((int)(java.lang.Math.min(byte[].int, long)));\n    int = org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[], 0, int);\n    if (int == (org.apache.commons.codec.binary.BaseNCodec.int)) {\n        break;\n    } \n    long -= int;\n}"},"status":-2},{"failures":[2,3,4,5,6,7,8,9,10],"tindex":"be1dbfa5-4449-11e5-9586-55df4e66e753","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:326","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    int = 256 + int;\n} "},"variableMap":{"b":"currentLine"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:307","type":"CtTryImpl","sourcecode":"try {\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][0]);\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][1]);\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][2]);\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][3]);\n    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(java.lang.String , java.lang.String , java.lang.String , java.lang.String);\n    final char char = org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.java.lang.String.charAt(0);\n    java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(char);\n    if (java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> == null) {\n        java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n        java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.put(char, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>);\n    } \n    java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>.add(org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule);\n} catch (final java.lang.IllegalArgumentException e) {\n    throw new java.lang.IllegalStateException((((\"Problem parsing line \\'\" + int) + \"\\' in \") + java.lang.String) , java.lang.IllegalArgumentException);\n}"},"status":-1},{"failures":[],"tindex":"be1de6b6-4449-11e5-9586-5d2d38cde0fe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:356","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) + 1) % (org.apache.commons.codec.binary.Base32.int)"},"variableMap":{"org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK":"pos","context":"context","modulus":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:511","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-2},{"failures":[],"tindex":"be1de6b7-4449-11e5-9586-bb6fc5531781","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (int > int) {\n    break;\n} "},"variableMap":{"i":"length","name2Size":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:231","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int >= (org.apache.commons.codec.language.Soundex.getSoundexMapping().int))) {\n    throw new java.lang.IllegalArgumentException((\"The character is not mapped: \" + char));\n} "},"status":-2},{"failures":[],"tindex":"be1de6b8-4449-11e5-9586-fd09e0a9b142","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.Charsets:74","type":"CtReturnImpl","sourcecode":"return java.nio.charset.Charset == null ? java.nio.charset.Charset.defaultCharset() : java.nio.charset.Charset"},"variableMap":{"charset":"charset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:240","type":"CtReturnImpl","sourcecode":"return this.java.nio.charset.Charset"},"status":0},{"failures":[],"tindex":"be1e0dc9-4449-11e5-9586-5f821f203035","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:379","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-2},{"failures":[11,12,13,14],"tindex":"be1e0dca-4449-11e5-9586-7d2ca7fad4df","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:478","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][9], byte[][30], byte[][51], 4, java.lang.StringBuilder)"},"variableMap":{"altResult":"b","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:237","type":"CtForImpl","sourcecode":"for ( ; int < 6 ; int++) {\n    int <<= 1;\n    if (((byte[][int]) & int) != 0) {\n        int |= 1;\n    } \n    int >>>= 1;\n    if (int == 0) {\n        int++;\n        int = 128;\n    } \n    java.lang.StringBuilder.setCharAt(int, ((char)(org.apache.commons.codec.digest.UnixCrypt.int[][int])));\n}"},"status":-1},{"failures":[],"tindex":"be1e0dcb-4449-11e5-9586-4d991a7b3dfa","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:118","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"3\", \"\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:89","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"z\", \"s\")"},"status":1},{"failures":[15,16,17,18,19,20,21,22,23],"tindex":"be1e0dcc-4449-11e5-9586-8b1858e4e867","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:284","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(char[], 0, char[], int, char[].int)"},"variableMap":{"length":"rightLength","i":"rightLength","transcoded":"org.apache.commons.codec.language.ColognePhonetic.AHKLOQRUX","chars":"org.apache.commons.codec.language.ColognePhonetic.SZ"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:338","type":"CtWhileImpl","sourcecode":"while (int > 0) {\n    char = org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.removeNext();\n    if ((int = org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.length()) > 0) {\n        char = org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.getNextChar();\n    } else {\n        char = '-';\n    }\n    if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n        char = '0';\n    } else if (((char == 'H') || (char < 'A')) || (char > 'Z')) {\n        if (char == '/') {\n            continue;\n        } \n        char = '-';\n    } else if ((char == 'B') || ((char == 'P') && (char != 'H'))) {\n        char = '1';\n    } else if (((char == 'D') || (char == 'T')) && (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n        char = '2';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n        char = '3';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n        char = '4';\n    } else if ((char == 'X') && (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n        char = '4';\n        org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.addLeft('S');\n        int++;\n    } else if ((char == 'S') || (char == 'Z')) {\n        char = '8';\n    } else if (char == 'C') {\n        if (char == '/') {\n            if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n                char = '4';\n            } else {\n                char = '8';\n            }\n        } else {\n            if (org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) || (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n                char = '8';\n            } else {\n                char = '4';\n            }\n        }\n    } else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n        char = '8';\n    } else if (char == 'R') {\n        char = '7';\n    } else if (char == 'L') {\n        char = '5';\n    } else if ((char == 'M') || (char == 'N')) {\n        char = '6';\n    } else {\n        char = char;\n    }\n    if ((char != '-') && ((((char != char) && ((char != '0') || (char == '/'))) || (char < '0')) || (char > '8'))) {\n        org.apache.commons.codec.language.ColognePhonetic.CologneOutputBuffer.addRight(char);\n    } \n    char = char;\n    char = char;\n}"},"status":-1},{"failures":[],"tindex":"be1e34dd-4449-11e5-9586-e3ad1a8e86ae","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    int += 256;\n} "},"variableMap":{"b":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:85","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.NullPointerException();\n} else if ((int < 0) || (int < 0)) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if ((int > (byte[].int)) || ((int + int) > (byte[].int))) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if (int > 0) {\n    if (boolean) {\n        org.apache.commons.codec.binary.BaseNCodec.encode(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n    } else {\n        org.apache.commons.codec.binary.BaseNCodec.decode(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n    }\n    org.apache.commons.codec.binary.BaseNCodecOutputStream.flush(false);\n} "},"status":-2},{"failures":[],"tindex":"be1e5bee-4449-11e5-9586-53c2589ce719","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || ((java.lang.String.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone1.java.lang.String;\n} "},"variableMap":{"txt":"salt","org.apache.commons.codec.language.Caverphone1.SIX_1":"org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Crypt:72","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(org.apache.commons.codec.digest.Md5Crypt.java.lang.String)) {\n    return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[], java.lang.String);\n} else {\n    return org.apache.commons.codec.digest.UnixCrypt.crypt(byte[], java.lang.String);\n}"},"status":-2},{"failures":[],"tindex":"be1e5bef-4449-11e5-9586-3d0a3e414e60","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:188","type":"CtReturnImpl","sourcecode":"return 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:363","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.conditionCH1(java.lang.String, int)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    return int + 2;\n} else {\n    if (int > 0) {\n        if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 2, \"MC\")) {\n            org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n        } else {\n            org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'K');\n        }\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n    }\n    return int + 2;\n}"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
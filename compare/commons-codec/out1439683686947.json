{"failureDictionary":{"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":2,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":39,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":63,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":5,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":6,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":7,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":27,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":8,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":9,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":10,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":48,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":55,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":26,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":36,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":46,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":49,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":60,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":20,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":0,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":22,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":21,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":47,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex":25,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":58,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":59,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":57,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":15,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":19,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":17,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":18,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":43,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":12,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":54,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":56,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":23,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":45,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":38,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":51,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":53,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":11,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":28,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":44,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":16,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":4,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":30,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":34,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":3,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":29,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":40,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":62,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":33,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":61,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":50,"org.apache.commons.codec.language.SoundexTest.testNewInstance":14,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":32,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeStringWithNull":64,"org.apache.commons.codec.language.SoundexTest.testDifference":13,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":37,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":41,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":42,"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence":24,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":52,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":1,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":35,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":31},"transformations":[{"failures":[],"tindex":"df081c47-43aa-11e5-989c-251ebd1fe729","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:517","type":"CtOperatorAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int += org.apache.commons.codec.binary.Base32.int"},"variableMap":{"currentLinePos":"pos","org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK":"pos","context":"context"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:405","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-2},{"failures":[],"tindex":"df089178-43aa-11e5-989c-1d75a245e848","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    java.lang.String = (org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} "},"variableMap":{"salt":"line","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"rawLine"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:283","type":"CtIfImpl","sourcecode":"if (java.lang.String.contains(\"=\")) {\n    final java.lang.String[] java.lang.String[] = java.lang.String.split(\"=\");\n    if ((java.lang.String[].int) != 2) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (java.lang.String[].int)) + \" parts: \") + java.lang.String) + \" in \") + java.lang.String));\n    } else {\n        final java.lang.String java.lang.String = java.lang.String[][0];\n        final java.lang.String java.lang.String = java.lang.String[][1];\n        if (((java.lang.String.length()) != 1) || ((java.lang.String.length()) != 1)) {\n            throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + java.lang.String) + \" in \") + java.lang.String));\n        } \n        java.util.Map<java.lang.Character, java.lang.Character>.put(java.lang.String.charAt(0), java.lang.String.charAt(0));\n    }\n} else {\n    final java.lang.String[] java.lang.String[] = java.lang.String.split(\"\\\\s+\");\n    if ((java.lang.String[].int) != 4) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (java.lang.String[].int)) + \" parts: \") + java.lang.String) + \" in \") + java.lang.String));\n    } else {\n        try {\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][0]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][1]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][2]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][3]);\n            final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(java.lang.String , java.lang.String , java.lang.String , java.lang.String);\n            final char char = org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.java.lang.String.charAt(0);\n            java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(char);\n            if (java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> == null) {\n                java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.put(char, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>);\n            } \n            java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>.add(org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule);\n        } catch (final java.lang.IllegalArgumentException e) {\n            throw new java.lang.IllegalStateException((((\"Problem parsing line \\'\" + int) + \"\\' in \") + java.lang.String) , java.lang.IllegalArgumentException);\n        }\n    }\n}"},"status":-2},{"failures":[0,1,2],"tindex":"df0906a9-43aa-11e5-989c-cfdb460e5104","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:102","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"why\", \"Why\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:93","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"t+\", \"T\")"},"status":-1},{"failures":[],"tindex":"df0906aa-43aa-11e5-989c-2794369f4d10","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:224","type":"CtOperatorAssignmentImpl","sourcecode":"int -= 16"},"variableMap":{"ii":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:512","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-2},{"failures":[],"tindex":"df092dbb-43aa-11e5-989c-b54bea1c7273","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:377","type":"CtAssignmentImpl","sourcecode":"int = (int << 4) | (int >>> 28)"},"variableMap":{"s":"t"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:408","type":"CtOperatorAssignmentImpl","sourcecode":"int ^= int"},"status":-2},{"failures":[],"tindex":"df092dbc-43aa-11e5-989c-bd6bf2965806","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:738","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.encodeBase64(org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.toIntegerBytes(java.math.BigInteger), false)"},"status":-2},{"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"tindex":"df0954cd-43aa-11e5-989c-41ef38cbcf81","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:147","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String"},"variableMap":{"lastReplacement":"str","replacement":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:262","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.apache.commons.codec.language.SoundexUtils.clean(java.lang.String)"},"status":-1},{"failures":[26,27,28,29,30,31,32,33,34],"tindex":"df097bde-43aa-11e5-989c-c158c79a8718","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:429","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(java.lang.String)"},"status":-1},{"failures":[],"tindex":"df097bdf-43aa-11e5-989c-5dcef9d5f96b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:445","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha256(byte[]), java.io.InputStream)"},"status":0},{"failures":[35,36,37,38,39,40],"tindex":"df09a2f0-43aa-11e5-989c-b5b95c10b818","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:711","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int + 1)))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('A', 'F');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('A');\n}"},"variableMap":{"result":"result","this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:622","type":"CtIfImpl","sourcecode":"if (((int == 0) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"Z\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"Z\") ? int + 2 : int + 1;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"SC\")) {\n    int = org.apache.commons.codec.language.DoubleMetaphone.handleSC(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int);\n} else {\n    if ((int == ((java.lang.String.length()) - 1)) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 2, \"AI\", \"OI\"))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('S');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    }\n    int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"S\", \"Z\") ? int + 2 : int + 1;\n}"},"status":-1},{"failures":[41,42,43,44,45],"tindex":"df09f111-43aa-11e5-989c-e36a7ce23793","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:169","type":"CtInvocationImpl","sourcecode":"java.io.ByteArrayOutputStream.write(' ')"},"variableMap":{"buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:174","type":"CtInvocationImpl","sourcecode":"java.io.ByteArrayOutputStream.write(((char)((int << 4) + int)))"},"status":-1},{"failures":[35,36],"tindex":"df09f112-43aa-11e5-989c-9780b04ff677","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:723","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:281","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K')"},"status":-1},{"failures":[46,47,48,49,50,51,52,53],"tindex":"df0a1823-43aa-11e5-989c-33d131ef1ea9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:149","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"|\")"},"variableMap":{"sb":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:74","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(java.nio.charset.Charset)"},"status":-1},{"failures":[],"tindex":"df0a3f34-43aa-11e5-989c-07f60e9d8f8c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:504","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof byte[]) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.encode(((byte[])(java.lang.Object)));\n} else if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.encode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n}"},"variableMap":{"obj":"ascii","this":"ascii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:126","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(java.lang.Object)).toCharArray())"},"status":-2},{"failures":[54,55,56,57,58,59,60,61],"tindex":"df0a3f35-43aa-11e5-989c-23d0eed9b767","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:90","type":"CtAssignmentImpl","sourcecode":"java.lang.String = (org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + java.lang.String"},"variableMap":{"salt":"txt","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:65","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^trough\", \"trou2f\")"},"status":-1},{"failures":[62,63],"tindex":"df0a6646-43aa-11e5-989c-ff944e144702","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:91","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"g\", \"k\")"},"variableMap":{"txt":"upperName"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:91","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.removeAccents(java.lang.String)"},"status":-1},{"failures":[],"tindex":"df0a8d57-43aa-11e5-989c-bd1536818562","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:179","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder, int, \"CIA\")) {\n    java.lang.StringBuilder.append('X');\n    break;\n} "},"variableMap":{"code":"code","this":"this","local":"local","n":"wdsz"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:206","type":"CtIfImpl","sourcecode":"if (((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1)))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'G'))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 2)))) >= 0)) {\n    java.lang.StringBuilder.append('J');\n    int += 2;\n} else {\n    java.lang.StringBuilder.append('T');\n}"},"status":0},{"failures":[64],"tindex":"df0ab468-43aa-11e5-989c-81cc49d2b80e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:469","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[],"tindex":"df0ab469-43aa-11e5-989c-3976d8ad8683","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:493","type":"CtOperatorAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int += (org.apache.commons.codec.binary.BaseNCodec.Context.int) - int"},"variableMap":{"currentLinePos":"pos","savedPos":"pos","pos":"pos","context":"context"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:456","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":19,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":50,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":77,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":21,"org.apache.commons.codec.binary.HexTest.testCustomCharset":41,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":93,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":86,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":24,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":8,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":49,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":54,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":7,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":95,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":19,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":4,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":74,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":87,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":14,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":32,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":62,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":12,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":15,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":39,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":92,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData":65,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":91,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":9,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":76,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":0,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage":71,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptWrongSalt":63,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":67,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":47,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":52,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":35,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":59,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":88,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":56,"org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64":98,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":46,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":45,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":20,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":99,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":13,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":27,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":33,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":68,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":85,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":31,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":69,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":101,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":80,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":28,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":42,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":75,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":37,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":66,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":89,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":83,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":100,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":29,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":61,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":82,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":18,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":3,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":6,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":73,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":17,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":36,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":97,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":57,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":44,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":60,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":96,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":1,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt":64,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":43,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":25,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":11,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":40,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":72,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":51,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":26,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":78,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":94,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":84,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":90,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":79,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":10,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":58,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":5,"org.apache.commons.codec.digest.B64Test.testB64from24bit":38,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":34,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":23,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":48,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":55,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":30,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":81,"org.apache.commons.codec.language.SoundexTest.testDifference":22,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":70,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":53,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":2,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":16},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"tindex":"26b4f987-42b0-11e5-9c3c-37e7aba67b88","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:223","type":"CtInvocationImpl","sourcecode":"java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>.put(java.lang.String, org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.createScanner(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String), org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.createResourceName(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String)))"},"status":-1},{"failures":[16,17,18,19,20,21],"tindex":"26b52098-42b0-11e5-9c3c-9dfdc0e00408","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:106","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[22],"tindex":"26b547a9-42b0-11e5-9c3c-73abb4380d30","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:260","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[],"tindex":"26b547aa-42b0-11e5-9c3c-c1c964420a35","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    int++;\n    int = 128;\n} "},"variableMap":{"u":"b","y":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:225","type":"CtInvocationImpl","sourcecode":"java.io.ByteArrayOutputStream.write(int)"},"status":-2},{"failures":[],"tindex":"26b547ab-42b0-11e5-9c3c-33416f9ad8d0","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:332","type":"CtLocalVariableImpl","sourcecode":"char char = '/'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:184","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((int >> 4) & 15), 16))"},"status":-2},{"failures":[],"tindex":"26b6320c-42b0-11e5-9c3c-7bf0dcbeff2e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:190","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byte[])"},"variableMap":{"tmp":"binaryData"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:621","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.encodeBase64(byte[], boolean, false)"},"status":-2},{"failures":[],"tindex":"26b6591d-42b0-11e5-9c3c-3f94688c4698","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:291","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String[][1]"},"status":-2},{"failures":[],"tindex":"26b6591e-42b0-11e5-9c3c-3f99137a3cb7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:226","type":"CtReturnImpl","sourcecode":"return 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:508","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[23,24],"tindex":"26b6591f-42b0-11e5-9c3c-c924e912bd2c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:223","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[], 0, (int > 16 ? 16 : int))"},"variableMap":{"ii":"keyLen","finalb":"pBytes","ctx":"ctx"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:387","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[], 0, int)"},"status":-1},{"failures":[25,26,27,28,29,30,23,31,32,24,33,34,35,36,37,38],"tindex":"26b65920-42b0-11e5-9c3c-4fed8f531bfe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:190","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('K')"},"variableMap":{"code":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.B64:61","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(org.apache.commons.codec.digest.B64.java.lang.String.charAt((int & 63)))"},"status":-1},{"failures":[],"tindex":"26b68031-42b0-11e5-9c3c-2bc385d2bc3c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || ((java.lang.String.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone1.java.lang.String;\n} "},"variableMap":{"txt":"key","org.apache.commons.codec.language.Caverphone1.SIX_1":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Crypt:92","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Crypt.org.apache.commons.codec.digest.Crypt.crypt(java.lang.String, null)"},"status":-2},{"failures":[],"tindex":"26b68032-42b0-11e5-9c3c-23da9612016c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:400","type":"CtAssignmentImpl","sourcecode":"byte[][int++] = ((byte)((int >>> 8) & 255))"},"variableMap":{"b":"buffer","offset":"pos","iValue":"org.apache.commons.codec.binary.Base32.MASK_5BITS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:511","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 25))) & (org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[],"tindex":"26b68033-42b0-11e5-9c3c-f10a920ca04c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:83","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"b\", \"p\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:100","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"wy\", \"Wy\")"},"status":1},{"failures":[39],"tindex":"26b68034-42b0-11e5-9c3c-3b113c0e7bf7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:123","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(java.lang.Object)))"},"variableMap":{"this":"obj","ascii":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:286","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null) {\n    return null;\n} else if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.QCodec.encode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be encoded using Q codec\"));\n}"},"status":-1},{"failures":[16,17],"tindex":"26b68035-42b0-11e5-9c3c-592c1a2aa345","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:502","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('H')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:370","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K')"},"status":-1},{"failures":[40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"tindex":"26b6a746-42b0-11e5-9c3c-21f88c8bb529","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:261","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"variableMap":{"maxCodeLen":"j"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:145","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[63,24,64,33,34,65,66,67,68],"tindex":"26b6a747-42b0-11e5-9c3c-459ffc464d66","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:521","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[], null)"},"variableMap":{"keyBytes":"keyBytes","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:543","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(byte[], java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.int, org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-1},{"failures":[69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],"tindex":"26b6a748-42b0-11e5-9c3c-4919b8c6717a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:224","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:319","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[101,53],"tindex":"26b6a749-42b0-11e5-9c3c-dfa413c8d579","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:791","type":"CtInvocationImpl","sourcecode":"javax.crypto.Mac.update(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String))"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":19,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
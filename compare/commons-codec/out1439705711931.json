{"failureDictionary":{"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":52,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":65,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":31,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":4,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":47,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":39,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":38,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":20,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":43,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":40,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":25,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":24,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":5,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":21,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":11,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":10,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":23,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":54,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":68,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":15,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":13,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":16,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":33,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":7,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":3,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":60,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":2,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":6,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":48,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":50,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":58,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":59,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":57,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":18,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":44,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":26,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":56,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":64,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":17,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":46,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":28,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":53,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":69,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":55,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":29,"org.apache.commons.codec.language.Caverphone2Test.testLocaleIndependence":63,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":30,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":0,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":14,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":37,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":35,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":66,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":41,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":1,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":67,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":27,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":22,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":34,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":49,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":61,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":36,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":8,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":42,"org.apache.commons.codec.language.Caverphone2Test.testEncodeEmpty":62,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":19,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":32,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":51,"org.apache.commons.codec.language.MetaphoneTest.testTCH":12,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":9,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":45},"transformations":[{"failures":[0],"tindex":"26ec0235-43de-11e5-aecd-95319dbd0764","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:310","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('F')"},"status":-1},{"failures":[],"tindex":"26ec0236-43de-11e5-aecd-b77ddffeaf00","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:299","type":"CtAssignmentImpl","sourcecode":"int = 1"},"variableMap":{"pos":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:483","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-2},{"failures":[1,2,3,4,5,6,7,8,9,10,11],"tindex":"26ec2947-43de-11e5-aecd-0b1242cf8746","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:472","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 14))) & (org.apache.commons.codec.binary.Base32.int))]"},"status":-1},{"failures":[12],"tindex":"26ec2948-43de-11e5-aecd-29e7eda7f598","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:215","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'H'))) {\n    break;\n} "},"variableMap":{"wdsz":"n","this":"this","n":"n","local":"local"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:298","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder, int, \"TCH\")) {\n    break;\n} "},"status":-1},{"failures":[],"tindex":"26ec2949-43de-11e5-aecd-532f8e5173ff","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:71","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('&')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:335","type":"CtIfImpl","sourcecode":"if (!(java.lang.Object instanceof byte[])) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\");\n} "},"status":-2},{"failures":[],"tindex":"26ec294a-43de-11e5-aecd-b76b15565689","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:368","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[], byte[]))"},"variableMap":{"valueToDigest":"key","this":"this","key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:388","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[], java.io.InputStream))"},"status":-2},{"failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],"tindex":"26ec294b-43de-11e5-aecd-072f63fbd261","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:183","type":"CtIfImpl","sourcecode":"if (boolean) {\n    if (java.lang.String.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        boolean = false;\n    } \n} else {\n    if (java.lang.String.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        boolean = true;\n    } else if ((java.lang.String.length()) > 0) {\n        java.util.Set<java.lang.String>.add(java.lang.String);\n    } \n}"},"status":-1},{"failures":[],"tindex":"26ec294c-43de-11e5-aecd-e16cd733c94a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:704","type":"CtLocalVariableImpl","sourcecode":"final int int = int + int"},"variableMap":{"patternLength":"outLen","i":"outLen"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.B64:59","type":"CtLocalVariableImpl","sourcecode":"int int = int"},"status":-2},{"failures":[29],"tindex":"26ec505d-43de-11e5-aecd-bb825b3a37e7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:120","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(java.lang.Object)))"},"variableMap":{"this":"obj","ascii":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:314","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.URLCodec.encode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be URL encoded\"));\n}"},"status":-1},{"failures":[],"tindex":"26ec505e-43de-11e5-aecd-d7a51278d1a3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:85","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[int >> 1]"},"variableMap":{"len":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:176","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(char[].int) >> 3]"},"status":-2},{"failures":[30,31,32,33],"tindex":"26ec505f-43de-11e5-aecd-ebfca9fdcabb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:656","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"SK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:560","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('L')"},"status":-1},{"failures":[34],"tindex":"26ec5060-43de-11e5-aecd-61e245dd7f9d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:72","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"cy\", \"sy\")"},"variableMap":{"txt":"upperName"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:88","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(java.lang.String, org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-1},{"failures":[],"tindex":"26ec5061-43de-11e5-aecd-fdcc66eb663f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:384","type":"CtIfImpl","sourcecode":"if (char == 'R') {\n    char = '7';\n} else if (char == 'L') {\n    char = '5';\n} else if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"variableMap":{"code":"lastChar","chr":"lastCode"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:356","type":"CtIfImpl","sourcecode":"if (((char == 'D') || (char == 'T')) && (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n    char = '2';\n} else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '3';\n} else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '4';\n} else if ((char == 'X') && (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n    char = '4';\n    org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.addLeft('S');\n    int++;\n} else if ((char == 'S') || (char == 'Z')) {\n    char = '8';\n} else if (char == 'C') {\n    if (char == '/') {\n        if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n            char = '4';\n        } else {\n            char = '8';\n        }\n    } else {\n        if (org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) || (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n            char = '8';\n        } else {\n            char = '4';\n        }\n    }\n} else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '8';\n} else if (char == 'R') {\n    char = '7';\n} else if (char == 'L') {\n    char = '5';\n} else if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"status":-2},{"failures":[35,36,37,38,39,40,41,42,43,44,45,46,47],"tindex":"26ec7772-43de-11e5-aecd-f7885ccf31f4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"variableMap":{"salt":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:279","type":"CtIfImpl","sourcecode":"if ((java.lang.String.length()) == 0) {\n    continue;\n} "},"status":-1},{"failures":[],"tindex":"26ec7773-43de-11e5-aecd-ad85fc6d8f38","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((int & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:191","type":"CtIfImpl","sourcecode":"if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"status":-2},{"failures":[48,49,50,51,52],"tindex":"26ec7774-43de-11e5-aecd-95375f07f2d9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:121","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String + (org.apache.commons.codec.language.Caverphone1.java.lang.String)"},"variableMap":{"txt":"txt","org.apache.commons.codec.language.Caverphone1.SIX_1":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:81","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"d\", \"t\")"},"status":-1},{"failures":[53,54,55,56,57,58,59,60,61,62,63],"tindex":"26ec7775-43de-11e5-aecd-af2720c4e94d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:118","type":"CtAssignmentImpl","sourcecode":"java.lang.String = null"},"variableMap":{"cachedString":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:86","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"ph\", \"fh\")"},"status":-1},{"failures":[8,64,65,66,67,68,69,9,10,11],"tindex":"26ec9e86-43de-11e5-aecd-3368a309a72f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:345","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    final byte byte = byte[][int++];\n    if (byte == (byte)) {\n        org.apache.commons.codec.binary.BaseNCodec.Context.boolean = true;\n        break;\n    } else {\n        final byte[] byte[] = org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int, org.apache.commons.codec.binary.BaseNCodec.Context);\n        if ((byte >= 0) && (byte < (this.byte[].int))) {\n            final int int = this.byte[][byte];\n            if (int >= 0) {\n                org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) + 1) % (org.apache.commons.codec.binary.Base32.int);\n                org.apache.commons.codec.binary.BaseNCodec.Context.long = ((org.apache.commons.codec.binary.BaseNCodec.Context.long) << (org.apache.commons.codec.binary.Base32.int)) + int;\n                if ((org.apache.commons.codec.binary.BaseNCodec.Context.int) == 0) {\n                    byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n                    byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n                    byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n                    byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n                    byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.long) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n                } \n            } \n        } \n    }\n}"},"status":-1},{"failures":[],"tindex":"26ec9e87-43de-11e5-aecd-a9793c42caf1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:303","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base32.int"},"variableMap":{"encodeSize":"pos","org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:485","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":19,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
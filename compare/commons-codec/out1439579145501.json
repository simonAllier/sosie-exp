{"failureDictionary":{"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":23,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":47,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":3,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":18,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":51,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":54,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":9,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":8,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":12,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":41,"org.apache.commons.codec.language.NysiisTest.testDropBy":16,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":11,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":38,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":33,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":25,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":55,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":27,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":29,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":40,"org.apache.commons.codec.language.NysiisTest.testRule2":15,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":32,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":21,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":35,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":17,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":46,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":22,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":43,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":24,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":56,"org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64":4,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":26,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":39,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":44,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":30,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":34,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":2,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":19,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":5,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":48,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":7,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":52,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":10,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":13,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":36,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":53,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":49,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":14,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":28,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":31,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":45,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":50,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":42,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":57,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":6,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":37,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":20},"transformations":[{"failures":[],"tindex":"7774317b-42b7-11e5-99c1-5baae8a229cf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:299","type":"CtReturnImpl","sourcecode":"return int"},"variableMap":{"len":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:293","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 3, \"CIA\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n    int += 3;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CC\")) && (!((int == 1) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, 0)) == 'M')))) {\n    return org.apache.commons.codec.language.DoubleMetaphone.handleCC(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int);\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CK\", \"CG\", \"CQ\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CI\", \"CE\", \"CY\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 3, \"CIO\", \"CIE\", \"CIA\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    }\n    int += 2;\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \" C\", \" Q\", \" G\")) {\n        int += 3;\n    } else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"C\", \"K\", \"Q\")) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"CE\", \"CI\")))) {\n        int += 2;\n    } else {\n        int++;\n    }\n}"},"status":-2},{"failures":[],"tindex":"7774588c-42b7-11e5-99c1-13026e66fee9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:519","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, byte[], org.apache.commons.codec.binary.BaseNCodec.Context.int, byte[].int)"},"status":-2},{"failures":[],"tindex":"7774588d-42b7-11e5-99c1-e31d69052733","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:360","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 10) & (org.apache.commons.codec.binary.Base64.int))]"},"variableMap":{"encodeTable":"encodeTable","ibitWorkArea":"pos","pos":"pos","context":"context","org.apache.commons.codec.binary.Base64.MASK_6BITS":"org.apache.commons.codec.binary.Base32.MASK_5BITS","buffer":"encodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:486","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 2))) & (org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[],"tindex":"7774588e-42b7-11e5-99c1-579091a94cfd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:362","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) << 2) & (org.apache.commons.codec.binary.Base64.int))]"},"variableMap":{"encodeTable":"encodeTable","ibitWorkArea":"pos","pos":"pos","context":"context","org.apache.commons.codec.binary.Base64.MASK_6BITS":"pos","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:484","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 12))) & (org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[0,1,2,3],"tindex":"77747f9f-42b7-11e5-99c1-7b483b497e1e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:502","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('H')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:694","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T')"},"status":-1},{"failures":[4,5,6],"tindex":"77747fa0-42b7-11e5-99c1-1707faaf3a15","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    return false;\n} "},"variableMap":{"arrayOctet":"arrayOctet"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:538","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (byte[].int) ; int++) {\n    if ((!org.apache.commons.codec.binary.Base64.(org.apache.commons.codec.binary.Base64.isBase64(byte[][int]))) && (!org.apache.commons.codec.binary.BaseNCodec.(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte[][int])))) {\n        return false;\n    } \n}"},"status":-1},{"failures":[],"tindex":"77747fa1-42b7-11e5-99c1-470b5efffd79","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:358","type":"CtOperatorAssignmentImpl","sourcecode":"int &= 268435455"},"variableMap":{"c":"j"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:378","type":"CtAssignmentImpl","sourcecode":"int[][int++] = int"},"status":1},{"failures":[],"tindex":"77747fa2-42b7-11e5-99c1-85cd241e004f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:340","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.decode(((java.lang.String)(java.lang.Object)))"},"variableMap":{"obj":"obj","this":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:528","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null) {\n    return null;\n} else if (java.lang.Object instanceof byte[]) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.decode(((byte[])(java.lang.Object)));\n} else if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.decode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be quoted-printable decoded\"));\n}"},"status":-2},{"failures":[],"tindex":"77747fa3-42b7-11e5-99c1-1f205af3e988","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:326","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.ColognePhonetic.CologneOutputBuffer org.apache.commons.codec.language.ColognePhonetic.CologneOutputBuffer = new org.apache.commons.codec.language.ColognePhonetic.CologneOutputBuffer(((java.lang.String.length()) * 2))"},"status":-2},{"failures":[7,8,9,10,11],"tindex":"7774a6b4-42b7-11e5-99c1-b5c83320d032","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:544","type":"CtOperatorAssignmentImpl","sourcecode":"int += (org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.getPatternLength()) - 1"},"status":-1},{"failures":[12,13,14],"tindex":"7774a6b5-42b7-11e5-99c1-1f31e8790a83","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:463","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][6], byte[][16], byte[][26], 4, java.lang.StringBuilder)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:478","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][9], byte[][30], byte[][51], 4, java.lang.StringBuilder)"},"status":-1},{"failures":[15,16],"tindex":"7774a6b6-42b7-11e5-99c1-43481b810a7a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:59","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^cough\", \"cou2f\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:269","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(java.lang.String).replaceFirst(\"Y\")"},"status":-1},{"failures":[17,18,19,20,21,22],"tindex":"7774a6b7-42b7-11e5-99c1-ad054d3dca38","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:138","type":"CtAssignmentImpl","sourcecode":"char[][0] = 'S'"},"variableMap":{"inwd":"name1Char"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:326","type":"CtAssignmentImpl","sourcecode":"char[][(int - int)] = ' '"},"status":-1},{"failures":[],"tindex":"7774a6b8-42b7-11e5-99c1-d9e57e0b83dc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!boolean) {\n    return false;\n} "},"variableMap":{"ignoreCase":"encodeBlanks"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:346","type":"CtReturnImpl","sourcecode":"return this.boolean"},"status":-2},{"failures":[16],"tindex":"7774a6b9-42b7-11e5-99c1-d3a8d6ed26ec","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:141","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.char[]"},"status":-1},{"failures":[23],"tindex":"7774cdca-42b7-11e5-99c1-4b8c1a877271","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:412","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"E\", org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:104","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^h\", \"A\")"},"status":-1},{"failures":[24,25,26,27,28],"tindex":"7774cdcb-42b7-11e5-99c1-ffcb7108362e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:95","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"y\", \"3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:58","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"e$\", \"\")"},"status":-1},{"failures":[29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"tindex":"7774cdcc-42b7-11e5-99c1-3f68ea475fd9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:670","type":"CtReturnImpl","sourcecode":"return int + 3"},"variableMap":{"index":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.NullPointerException();\n} else if ((int < 0) || (int < 0)) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if ((int > (byte[].int)) || ((int + int) > (byte[].int))) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if (int == 0) {\n    return 0;\n} else {\n    int int = 0;\n    while (int == 0) {\n        if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n            final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n            final int int = java.io.InputStream.read(byte[]);\n            if (boolean) {\n                org.apache.commons.codec.binary.BaseNCodec.encode(byte[], 0, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n            } else {\n                org.apache.commons.codec.binary.BaseNCodec.decode(byte[], 0, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n            }\n        } \n        int = org.apache.commons.codec.binary.BaseNCodec.readResults(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n    }\n    return int;\n}"},"status":-1},{"failures":[],"tindex":"7774cdcd-42b7-11e5-99c1-837ff009dc7d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:102","type":"CtReturnImpl","sourcecode":"return null"},"status":0},{"failures":[],"tindex":"7774cdce-42b7-11e5-99c1-4bca0436c4c1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (int == int) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"org.apache.commons.codec.binary.BaseNCodec.EOF","to":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:200","type":"CtWhileImpl","sourcecode":"while (long > 0) {\n    int int = ((int)(java.lang.Math.min(byte[].int, long)));\n    int = org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[], 0, int);\n    if (int == (org.apache.commons.codec.binary.BaseNCodec.int)) {\n        break;\n    } \n    long -= int;\n}"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
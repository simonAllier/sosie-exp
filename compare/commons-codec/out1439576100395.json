{"failureDictionary":{"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":29,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":14,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":40,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":13,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":47,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":32,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":46,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":4,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":41,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":45,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":12,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":2,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":18,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":35,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":8,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":33,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":36,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":43,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":42,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":5,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":17,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":27,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":38,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":48,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":37,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":28,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":25,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":30,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":11,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":50,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":23,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":6,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":10,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":26,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":34,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":1,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":3,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":15,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":22,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":49,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":44,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":16,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":31,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":21,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":20,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":24,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":39,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":7,"org.apache.commons.codec.language.MetaphoneTest.testTCH":0,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":19,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":9},"transformations":[{"failures":[],"tindex":"606d2181-42b0-11e5-bb75-07126045e59d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:296","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.hmacMd5(java.lang.String, java.lang.String))"},"status":-2},{"failures":[],"tindex":"606d4892-42b0-11e5-bb75-ebc19e8893d9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:704","type":"CtLocalVariableImpl","sourcecode":"final int int = int + int"},"status":-2},{"failures":[0],"tindex":"606d4893-42b0-11e5-bb75-d53e2013ca46","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:244","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Metaphone.isLastChar(int, int)) {\n    break;\n} "},"variableMap":{"wdsz":"n","this":"this","n":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:298","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder, int, \"TCH\")) {\n    break;\n} "},"status":-1},{"failures":[1,2,3,4],"tindex":"606d4894-42b0-11e5-bb75-bf617951916b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:365","type":"CtAssignmentImpl","sourcecode":"int = (int >>> 1) | (int << 27)"},"variableMap":{"c":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:153","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[5],"tindex":"606d4895-42b0-11e5-bb75-c5683618359d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:285","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.md5(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String))"},"variableMap":{"data":"data","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:579","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String))"},"status":-1},{"failures":[6,7,8],"tindex":"606d4896-42b0-11e5-bb75-a32075f26ba7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:417","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"N\", \"KN\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:309","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S')"},"status":-1},{"failures":[],"tindex":"606d4897-42b0-11e5-bb75-e13f1b140748","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:209","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++int) {\n    if ((byte[][(int - int)]) == '1') {\n        byte[][int] |= org.apache.commons.codec.binary.BinaryCodec.int[][int];\n    } \n}"},"variableMap":{"jj":"length","ii":"ii","length":"jj","l_raw":"l_ascii","ascii":"raw","org.apache.commons.codec.binary.BinaryCodec.BITS":"org.apache.commons.codec.binary.BinaryCodec.BITS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:249","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++int) {\n    if (((byte[][int]) & (org.apache.commons.codec.binary.BinaryCodec.int[][int])) == 0) {\n        byte[][(int - int)] = '0';\n    } else {\n        byte[][(int - int)] = '1';\n    }\n}"},"status":-2},{"failures":[9,10,11,12],"tindex":"606d6fa8-42b0-11e5-bb75-c117861f4636","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:250","type":"CtReturnImpl","sourcecode":"return java.lang.StringBuilder.toString()"},"status":-1},{"failures":[13],"tindex":"606d6fa9-42b0-11e5-bb75-47861253c0a5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:528","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byte[])"},"variableMap":{"this":"this","key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:421","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha256(byte[])"},"status":-1},{"failures":[],"tindex":"606d6faa-42b0-11e5-bb75-d7f79c633d00","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || ((java.lang.String.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.java.lang.String;\n} "},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"str","txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:53","type":"CtIfImpl","sourcecode":"if (int == int) {\n    return java.lang.String.toUpperCase(java.util.Locale.java.util.Locale);\n} "},"status":0},{"failures":[],"tindex":"606d6fab-42b0-11e5-bb75-d9f44a0399fb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:387","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 18) & (org.apache.commons.codec.binary.Base64.int))]"},"variableMap":{"encodeTable":"encodeTable","ibitWorkArea":"org.apache.commons.codec.binary.Base32.MASK_5BITS","pos":"pos","context":"context","org.apache.commons.codec.binary.Base64.MASK_6BITS":"org.apache.commons.codec.binary.Base32.MASK_5BITS","buffer":"encodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:484","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 12))) & (org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[],"tindex":"606d6fac-42b0-11e5-bb75-ef18efea5794","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:410","type":"CtIfImpl","sourcecode":"if (((java.lang.String.length()) >= 2) && (java.lang.String.substring(0, 2).equals(\"d\\'\"))) {\n    final java.lang.String java.lang.String = java.lang.String.substring(2);\n    final java.lang.String java.lang.String = \"d\" + java.lang.String;\n    return (((\"(\" + org.apache.commons.codec.language.bm.PhoneticEngine.(encode(java.lang.String))) + \")-(\") + org.apache.commons.codec.language.bm.PhoneticEngine.(encode(java.lang.String))) + \")\";\n} "},"variableMap":{"input":"source","this":"engine"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:96","type":"CtReturnImpl","sourcecode":"return this.org.apache.commons.codec.language.bm.PhoneticEngine.encode(java.lang.String)"},"status":-2},{"failures":[14,15,16],"tindex":"606d6fad-42b0-11e5-bb75-457c64ca917e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:463","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][6], byte[][16], byte[][26], 4, java.lang.StringBuilder)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:482","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][34], byte[][55], byte[][13], 4, java.lang.StringBuilder)"},"status":-1},{"failures":[17],"tindex":"606d96be-42b0-11e5-bb75-8f79a7ce2e71","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:207","type":"CtAssignmentImpl","sourcecode":"this.boolean = false"},"variableMap":{"found":"hasUnderscores"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:176","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":-1},{"failures":[],"tindex":"606d96bf-42b0-11e5-bb75-f3e232f2fdf0","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:415","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"U\", org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:74","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"ci\", \"si\")"},"status":1},{"failures":[18,19,20,21,22],"tindex":"606d96c0-42b0-11e5-bb75-a1eccd35ecba","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:292","type":"CtIfImpl","sourcecode":"if ((java.lang.StringBuilder.length()) > 1) {\n    char char = java.lang.StringBuilder.charAt(((java.lang.StringBuilder.length()) - 1));\n    if (char == 'S') {\n        java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1));\n        char = java.lang.StringBuilder.charAt(((java.lang.StringBuilder.length()) - 1));\n    } \n    if ((java.lang.StringBuilder.length()) > 2) {\n        final char char = java.lang.StringBuilder.charAt(((java.lang.StringBuilder.length()) - 2));\n        if ((char == 'A') && (char == 'Y')) {\n            java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 2));\n        } \n    } \n    if (char == 'A') {\n        java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1));\n    } \n} "},"variableMap":{"key":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:460","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][3], byte[][13], byte[][23], 4, java.lang.StringBuilder)"},"status":-1},{"failures":[23,24,0,25,26,27,28,29,30,31,32],"tindex":"606d96c1-42b0-11e5-bb75-6925f68ae14f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:427","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"$\")"},"variableMap":{"buffer":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:261","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(char)"},"status":-1},{"failures":[9,12],"tindex":"606d96c2-42b0-11e5-bb75-df703779ea28","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:238","type":"CtOperatorAssignmentImpl","sourcecode":"int <<= 1"},"variableMap":{"c":"left"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:307","type":"CtAssignmentImpl","sourcecode":"int = int[][1]"},"status":-1},{"failures":[33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"tindex":"606d96c3-42b0-11e5-bb75-89f50de3ae73","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:338","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, org.apache.commons.codec.language.bm.Languages.java.lang.String)"},"variableMap":{"nameType":"s","rt":"rt","this":"this","org.apache.commons.codec.language.bm.Languages.ANY":"l"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:223","type":"CtInvocationImpl","sourcecode":"java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>.put(java.lang.String, org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.createScanner(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String), org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.createResourceName(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String)))"},"status":-1},{"failures":[],"tindex":"606dbdd4-42b0-11e5-bb75-5798887edeb8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:293","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.decode(java.lang.String, org.apache.commons.codec.net.URLCodec.getDefaultCharset())"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"},"diffs":[{"transformation":"606d6faa-42b0-11e5-bb75-d7f79c633d00","diffs":[{"branches":{"org.apache.commons.codec.language.NysiisTest.testDad":["org.apache.commons.codec.language.SoundexUtils_java.lang.String_clean(java.lang.String).e3","org.apache.commons.codec.language.SoundexUtils_java.lang.String_clean(java.lang.String).t3"],"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":["org.apache.commons.codec.language.SoundexUtils_java.lang.String_clean(java.lang.String).e3","org.apache.commons.codec.language.SoundexUtils_java.lang.String_clean(java.lang.String).t3"],"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":["org.apache.commons.codec.language.SoundexUtils_java.lang.String_clean(java.lang.String).e3","org.apache.commons.codec.language.SoundexUtils_java.lang.String_clean(java.lang.String).t3"]},"type":"branch"}]}]}
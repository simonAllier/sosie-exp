{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":44,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":9,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":31,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":19,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":30,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":41,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":35,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":43,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":32,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":13,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail":40,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":10,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail":36,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":29,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":27,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":3,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":24,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":2,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":20,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":33,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":45,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":18,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":6,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":5,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":17,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":12,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":22,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":25,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":8,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullKey":37,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":21,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":16,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":39,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":28,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":26,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":7,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":11,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":0,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":15,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":23,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":34,"org.apache.commons.codec.digest.HmacUtilsTest.testNullKey":42,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":4,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":1,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":14,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail":38},"transformations":[{"failures":[0,1,2,3],"tindex":"2a4a5253-447e-11e5-81fe-4dcc8a2059c5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    int += 256;\n} "},"status":-1},{"failures":[4,5],"tindex":"2a4a7964-447e-11e5-81fe-e90893b1bd7f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:522","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'H')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:392","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"TK\")"},"status":-1},{"failures":[4,5],"tindex":"2a4aa075-447e-11e5-81fe-f1ffb2c40719","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:654","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"X\", \"SK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:533","type":"CtIfImpl","sourcecode":"if ((!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 1, \"S\", \"K\", \"L\")))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n} "},"status":-1},{"failures":[6,7,8,9,10,11,12],"tindex":"2a4aa076-447e-11e5-81fe-8bacc26a8a9d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:488","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte"},"status":-1},{"failures":[4,5],"tindex":"2a4aa077-447e-11e5-81fe-57df23ba7b17","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:847","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 3, \"UMB\")) && (((int + 1) == ((java.lang.String.length()) - 1)) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 2), 2, \"ER\")))"},"variableMap":{"this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:817","type":"CtReturnImpl","sourcecode":"return (((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 4, \"VAN \", \"VON \")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 3, \"SCH\"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 2), 1, \"T\", \"S\"))) || ((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 1, \"A\", \"O\", \"U\", \"E\")) || (int == 0)) && (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 2), 1, org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])) || ((int + 1) == ((java.lang.String.length()) - 1))))"},"status":-1},{"failures":[4,5],"tindex":"2a4ac788-447e-11e5-81fe-75db1f9ba01e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:392","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"TK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:587","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('R')"},"status":-1},{"failures":[13],"tindex":"2a4ac789-447e-11e5-81fe-a5782cfb8a5c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:388","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[], java.io.InputStream))"},"variableMap":{"valueToDigest":"valueToDigest","this":"this","key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:495","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.hmacSha256(byte[], java.io.InputStream))"},"status":-1},{"failures":[14,15,16,17,18,19,20,21],"tindex":"2a4ac78a-447e-11e5-81fe-6d1c46dedade","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(byte[], ((byte)(0)))"},"variableMap":{"finalb":"saltBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:200","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[])"},"status":-1},{"failures":[],"tindex":"2a4aee9b-447e-11e5-81fe-6dad669b4842","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:160","type":"CtReturnImpl","sourcecode":"return null"},"status":-2},{"failures":[],"tindex":"2a4aee9c-447e-11e5-81fe-778cdb375dd2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.int"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"readPos","encodeSize":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:295","type":"CtOperatorAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int += int"},"status":-2},{"failures":[],"tindex":"2a4aee9d-447e-11e5-81fe-d7b54ce35fcf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"wdsz","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"n","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"wdsz","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"n","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"n","minRating":"wdsz","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"n","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"wdsz","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"wdsz","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"n","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"wdsz"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:183","type":"CtIfImpl","sourcecode":"if ((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 1)))) >= 0)) {\n    java.lang.StringBuilder.append('S');\n    break;\n} "},"status":-2},{"failures":[],"tindex":"2a4b15ae-447e-11e5-81fe-5fd9e1ef1c69","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"cp","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"cp","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"cp","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"cp","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"blocksize","minRating":"cp","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"cp","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"cp","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"blocksize","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"blocksize","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"blocksize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:298","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, byte[], int, int)"},"status":-2},{"failures":[],"tindex":"2a4b15af-447e-11e5-81fe-99f020dc0073","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:231","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacMd5(byte[]), java.io.InputStream)"},"status":0},{"failures":[22,23,24,25,26],"tindex":"2a4b3cc0-447e-11e5-81fe-c9b51956a129","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:706","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.binary.Base64().decode(byte[])"},"variableMap":{"base64Data":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:165","type":"CtReturnImpl","sourcecode":"return byte[]"},"status":-1},{"failures":[],"tindex":"2a4b3cc1-447e-11e5-81fe-5962019f76a8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:521","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int = 0"},"variableMap":{"currentLinePos":"pos","context":"context"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:452","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-2},{"failures":[27,28,29,30,31,32,33,34,35],"tindex":"2a4b3cc2-447e-11e5-81fe-bb4c26cbe7e9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:522","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>) {\n    for (final java.lang.String java.lang.String : java.lang.String[]) {\n        final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = boolean ? org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.createBranch() : org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch;\n        final boolean boolean = ((char == 'm') && (char == 'n')) || ((char == 'n') && (char == 'm'));\n        org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.processNextReplacement(java.lang.String, boolean);\n        if (boolean) {\n            java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.add(org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch);\n        } else {\n            break;\n        }\n    }\n}"},"status":-1},{"failures":[],"tindex":"2a4b3cc3-447e-11e5-81fe-7b7253d93ea6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Hex:93","type":"CtAssignmentImpl","sourcecode":"byte[][int] = ((byte)(int & 255))"},"variableMap":{"f":"ibitWorkArea","i":"org.apache.commons.codec.binary.Base64.MASK_6BITS","out":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:351","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) << 4) & (org.apache.commons.codec.binary.Base64.int))]"},"status":-2},{"failures":[36,37,38,39,40,41,42],"tindex":"2a4b63d4-447e-11e5-81fe-9dcb7d901686","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:259","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException(\"Can\\'t fetch any language from the any language set.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:177","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Null key\")"},"status":-1},{"failures":[],"tindex":"2a4b63d5-447e-11e5-81fe-dd6d3419235f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || ((java.lang.String.length()) == 0)) {\n    return java.lang.String;\n} "},"variableMap":{"str":"pattern"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:666","type":"CtReturnImpl","sourcecode":"return this.java.lang.String"},"status":-2},{"failures":[43,44,45,4],"tindex":"2a4b63d6-447e-11e5-81fe-e1bef3ca4545","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:414","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"KN\", \"N\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:147","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('N')"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":33,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":53,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":7,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":38,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":43,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":8,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":1,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":0,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":13,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":18,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":44,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":48,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":26,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":50,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument":41,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":10,"org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt":23,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":6,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":15,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":5,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":9,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":32,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage":30,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":55,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":12,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":25,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":45,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":14,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":31,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":51,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":34,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":46,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":40,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":21,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":4,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":24,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":42,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":20,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":28,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":35,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":47,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":22,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":16,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":36,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":54,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":2,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":37,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":29,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":27,"org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1":57,"org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0":56,"org.apache.commons.codec.net.RFC1522CodecTest.testNullInput":11,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":49,"org.apache.commons.codec.language.MetaphoneTest.testTCH":52,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":3,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":39,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":19,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":17},"transformations":[{"failures":[],"tindex":"81a04a2b-4348-11e5-8457-bf51fc575390","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:181","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[byte[].int]"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10],"tindex":"81a0713c-4348-11e5-8457-af5d4f4978b3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:475","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) << 1))) & (org.apache.commons.codec.binary.Base32.int))]"},"status":-1},{"failures":[11],"tindex":"81a0713d-4348-11e5-8457-6758bc657e9c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:127","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[12,13,14,15,16],"tindex":"81a0713e-4348-11e5-8457-cfc19112bcfa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:147","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String"},"variableMap":{"lastReplacement":"txt","replacement":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:58","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"e$\", \"\")"},"status":-1},{"failures":[17,18],"tindex":"81a0984f-4348-11e5-8457-3b638011759b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:299","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.permOp(int, int, 1, 1431655765, int[])"},"variableMap":{"left":"c","this":"this","right":"d","results":"results"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:343","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.permOp(int, int, 4, 252645135, int[])"},"status":-1},{"failures":[19,20,21,22,17,18,23,24,25,26,27],"tindex":"81a09850-4348-11e5-8457-a3f6579951ab","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Crypt:67","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[])"},"variableMap":{"keyBytes":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Crypt:68","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)) {\n    return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[], java.lang.String);\n} else if (java.lang.String.startsWith(org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)) {\n    return org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[], java.lang.String);\n} else if (java.lang.String.startsWith(org.apache.commons.codec.digest.Md5Crypt.java.lang.String)) {\n    return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[], java.lang.String);\n} else {\n    return org.apache.commons.codec.digest.UnixCrypt.crypt(byte[], java.lang.String);\n}"},"status":-1},{"failures":[0,1,2,3,4,5,6,7,8,9,10],"tindex":"81a09851-4348-11e5-8457-b19dc8503bd7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:475","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) << 1))) & (org.apache.commons.codec.binary.Base32.int))]"},"status":-1},{"failures":[28,29,30,31,0,1,2,32,33,34,35,36,37,38,39,40,41,42,43,44,45,3,4,5,6,46,8,10],"tindex":"81a09852-4348-11e5-8457-bf9ef9cae470","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:304","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"variableMap":{"lineSeparator":"decodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:288","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.byte[]"},"status":-1},{"failures":[],"tindex":"81a09853-4348-11e5-8457-adf72a59fa98","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:310","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null) {\n    return null;\n} else if (java.lang.Object instanceof byte[]) {\n    return org.apache.commons.codec.net.URLCodec.encode(((byte[])(java.lang.Object)));\n} else if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.URLCodec.encode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be URL encoded\"));\n}"},"variableMap":{"obj":"value","this":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:225","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.BCodec.decode(((java.lang.String)(java.lang.Object)))"},"status":-2},{"failures":[],"tindex":"81a0bf64-4348-11e5-8457-599dd145eb17","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:314","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byte[]).doFinal(byte[])"},"status":-2},{"failures":[47,48],"tindex":"81a0bf65-4348-11e5-8457-cb26c558ded2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:334","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha1(byte[])"},"variableMap":{"data":"data","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:375","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getSha1Digest().digest(byte[])"},"status":-1},{"failures":[],"tindex":"81a0bf66-4348-11e5-8457-2f3a12da3449","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:141","type":"CtInvocationImpl","sourcecode":"java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.URLCodec.byte)"},"variableMap":{"buffer":"buffer","org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR":"org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:313","type":"CtInvocationImpl","sourcecode":"java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-2},{"failures":[49,50,51],"tindex":"81a0bf67-4348-11e5-8457-2536092b73ce","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:557","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"status":-1},{"failures":[],"tindex":"81a0bf68-4348-11e5-8457-f173aa73af22","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodecOutputStream.flush(true)"},"variableMap":{"this":"out"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:150","type":"CtInvocationImpl","sourcecode":"java.io.OutputStream.close()"},"status":-2},{"failures":[52,53],"tindex":"81a0bf69-4348-11e5-8457-95aee2c23d9f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:313","type":"CtIfImpl","sourcecode":"if ((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) && org.apache.commons.codec.language.Metaphone.(isVowel(java.lang.StringBuilder, (int + 1)))) {\n    java.lang.StringBuilder.append(char);\n} "},"status":-1},{"failures":[49,50],"tindex":"81a0bf6a-4348-11e5-8457-576a34832a08","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:635","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:530","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'H')"},"status":-1},{"failures":[],"tindex":"81a0e67b-4348-11e5-8457-237bc1554672","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:200","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.byte[]"},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:313","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byte[]).doFinal(byte[]);\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalArgumentException(java.lang.IllegalStateException);\n}"},"status":-2},{"failures":[54,55],"tindex":"81a0e67c-4348-11e5-8457-2788c2e739ec","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:355","type":"CtAssignmentImpl","sourcecode":"char = '1'"},"variableMap":{"code":"current"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:199","type":"CtAssignmentImpl","sourcecode":"char = char"},"status":-1},{"failures":[49,50],"tindex":"81a0e67d-4348-11e5-8457-432f3606152d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:782","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 4, \"CHIA\")) {\n    return true;\n} else if (int <= 1) {\n    return false;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int - 2)))) {\n    return false;\n} else if (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 3, \"ACH\"))) {\n    return false;\n} else {\n    final char char = org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int + 2));\n    return ((char != 'I') && (char != 'E')) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 6, \"BACHER\", \"MACHER\"));\n}"},"variableMap":{"this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:803","type":"CtIfImpl","sourcecode":"if ((!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 5, \"HARAC\", \"HARIS\"))) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n    return false;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 5, \"CHORE\")) {\n    return false;\n} else {\n    return true;\n}"},"status":-1},{"failures":[56,57],"tindex":"81a0e67e-4348-11e5-8457-a74c17406e4a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"digit"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:177","type":"CtIfImpl","sourcecode":"if (int == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Illegal hexadecimal character \" + char) + \" at index \") + int));\n} "},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
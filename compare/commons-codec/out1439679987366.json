{"failureDictionary":{"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":8,"org.apache.commons.codec.language.NysiisTest.testSnat":23,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":38,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":48,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":58,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":1,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":37,"org.apache.commons.codec.language.NysiisTest.testDropBy":24,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":39,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":11,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":57,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":30,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":45,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":0,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":28,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":41,"org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt":43,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":56,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":32,"org.apache.commons.codec.language.NysiisTest.testRule2":17,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":52,"org.apache.commons.codec.language.NysiisTest.testRule1":16,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":51,"org.apache.commons.codec.language.NysiisTest.testRule7":20,"org.apache.commons.codec.language.NysiisTest.testRule6":19,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":53,"org.apache.commons.codec.language.NysiisTest.testRule5":18,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":9,"org.apache.commons.codec.language.NysiisTest.testCap":12,"org.apache.commons.codec.language.NysiisTest.testBran":21,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":26,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":29,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":40,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":31,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":49,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":46,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":36,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":55,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":34,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":2,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":7,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":3,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":6,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":33,"org.apache.commons.codec.language.NysiisTest.testDad":13,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":35,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":59,"org.apache.commons.codec.language.NysiisTest.testOthers":25,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":50,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":5,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":47,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":10,"org.apache.commons.codec.language.NysiisTest.testDan":14,"org.apache.commons.codec.language.NysiisTest.testFal":15,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":54,"org.apache.commons.codec.language.NysiisTest.testSnad":22,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":42,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":27,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":4,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":44},"transformations":[{"failures":[0,1,2,3,4,5,6,7],"tindex":"41e90046-43a2-11e5-9b91-138e281d826a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:751","type":"CtAssignmentImpl","sourcecode":"int = ((int + 7) >> 3) << 3"},"variableMap":{"bitlen":"cnt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:246","type":"CtAssignmentImpl","sourcecode":"int = byte[].int"},"status":-1},{"failures":[],"tindex":"41e97577-43a2-11e5-9b91-ab5b6db5823f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:197","type":"CtReturnImpl","sourcecode":"return char"},"status":-2},{"failures":[],"tindex":"41e97578-43a2-11e5-9b91-89108c836a18","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:86","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:552","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = new java.lang.String[java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.size()]"},"status":-2},{"failures":[],"tindex":"41e99c89-43a2-11e5-9b91-113aebe284ab","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || ((java.lang.String.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone1.java.lang.String;\n} "},"variableMap":{"txt":"txt","org.apache.commons.codec.language.Caverphone1.SIX_1":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:99","type":"CtIfImpl","sourcecode":"if (int == 1) {\n    return java.lang.String.toUpperCase(java.util.Locale.java.util.Locale);\n} "},"status":0},{"failures":[],"tindex":"41e9c39a-43a2-11e5-9b91-4558f8c62f31","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:350","type":"CtIfImpl","sourcecode":"if (char == '/') {\n    continue;\n} "},"variableMap":{"lastCode":"current"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:193","type":"CtIfImpl","sourcecode":"if (char == char) {\n    continue;\n} else if (char != 0) {\n    java.lang.StringBuilder.append(char);\n} "},"status":0},{"failures":[],"tindex":"41e9c39b-43a2-11e5-9b91-05f79fc7aa91","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (int > int) {\n    break;\n} "},"variableMap":{"i":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT","name2Size":"sumLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:191","type":"CtIfImpl","sourcecode":"if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"status":-2},{"failures":[],"tindex":"41e9eaac-43a2-11e5-9b91-bd014d707255","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:244","type":"CtIfImpl","sourcecode":"if ((java.lang.Math.abs(((java.lang.String.length()) - (java.lang.String.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    return false;\n} "},"status":0},{"failures":[],"tindex":"41ea11bd-43a2-11e5-9b91-13a42b4d17e0","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Hex:82","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:147","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + java.lang.String))"},"status":-2},{"failures":[8],"tindex":"41ea11be-43a2-11e5-9b91-c5536338622b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:111","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"l\", \"2\")"},"status":-1},{"failures":[],"tindex":"41ea38cf-43a2-11e5-9b91-719ed770cc9a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:421","type":"CtAssignmentImpl","sourcecode":"int = int + 2"},"variableMap":{"index":"ibitWorkArea"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:472","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int = (org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 4"},"status":-2},{"failures":[0,4,5,6,9,7],"tindex":"41ea5fe0-43a2-11e5-9b91-530c1550d919","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:490","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), byte[][63], 2, java.lang.StringBuilder)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:457","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][0], byte[][10], byte[][20], 4, java.lang.StringBuilder)"},"status":-1},{"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"tindex":"41ea5fe1-43a2-11e5-9b91-b5e9b55e7601","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:148","type":"CtIfImpl","sourcecode":"if ((java.lang.StringBuilder.length()) > 0) {\n    java.lang.StringBuilder.append(\"|\");\n} "},"variableMap":{"sb":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:292","type":"CtIfImpl","sourcecode":"if ((java.lang.StringBuilder.length()) > 1) {\n    char char = java.lang.StringBuilder.charAt(((java.lang.StringBuilder.length()) - 1));\n    if (char == 'S') {\n        java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1));\n        char = java.lang.StringBuilder.charAt(((java.lang.StringBuilder.length()) - 1));\n    } \n    if ((java.lang.StringBuilder.length()) > 2) {\n        final char char = java.lang.StringBuilder.charAt(((java.lang.StringBuilder.length()) - 2));\n        if ((char == 'A') && (char == 'Y')) {\n            java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 2));\n        } \n    } \n    if (char == 'A') {\n        java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1));\n    } \n} "},"status":-1},{"failures":[27,28],"tindex":"41ea86f2-43a2-11e5-9b91-a95175e686bb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:533","type":"CtIfImpl","sourcecode":"if ((!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 1, \"S\", \"K\", \"L\")))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n} "},"status":-1},{"failures":[29,30,31,32,33],"tindex":"41eaae03-43a2-11e5-9b91-33ccc32fed34","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:99","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"w3\", \"W3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:58","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"e$\", \"\")"},"status":-1},{"failures":[34,35,36,37,38,39],"tindex":"41ead514-43a2-11e5-9b91-8bb847b1795c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:493","type":"CtInvocationImpl","sourcecode":"java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.add(new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch())"},"variableMap":{"currentBranches":"currentBranches"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:542","type":"CtInvocationImpl","sourcecode":"java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.addAll(java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>)"},"status":-1},{"failures":[40,41,42,43,44,45,4,7],"tindex":"41ead515-43a2-11e5-9b91-232f46aa9f4a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:48","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone1.java.lang.String"},"variableMap":{"org.apache.commons.codec.language.Caverphone1.SIX_1":"salt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Crypt:70","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)) {\n    return org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[], java.lang.String);\n} else if (java.lang.String.startsWith(org.apache.commons.codec.digest.Md5Crypt.java.lang.String)) {\n    return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[], java.lang.String);\n} else {\n    return org.apache.commons.codec.digest.UnixCrypt.crypt(byte[], java.lang.String);\n}"},"status":-1},{"failures":[27,28,46],"tindex":"41eafc26-43a2-11e5-9b91-6958a964d307","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:142","type":"CtAssignmentImpl","sourcecode":"int = int + 1"},"variableMap":{"from":"index","to":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:287","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.handleCH(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int)"},"status":-1},{"failures":[47,48,49,50,51,52,53,54,55,56,57,58,59],"tindex":"41eb2337-43a2-11e5-9b91-9bb7db33f6a0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    int++;\n    int = 128;\n} "},"variableMap":{"u":"i","y":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:360","type":"CtTryImpl","sourcecode":"try {\n    if ((byte[][++int]) == (org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n        continue;\n    } \n    final int int = org.apache.commons.codec.net.Utils.digit16(byte[][int]);\n    final int int = org.apache.commons.codec.net.Utils.digit16(byte[][++int]);\n    java.io.ByteArrayOutputStream.write(((char)((int << 4) + int)));\n} catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n    throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , java.lang.ArrayIndexOutOfBoundsException);\n}"},"status":-1},{"failures":[],"tindex":"41eb4a48-43a2-11e5-9b91-b93510609765","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:179","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder, int, \"CIA\")) {\n    java.lang.StringBuilder.append('X');\n    break;\n} "},"variableMap":{"code":"local","this":"this","local":"local","n":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:229","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Metaphone.isPreviousChar(java.lang.StringBuilder, int, 'G')) {\n    boolean = true;\n} else {\n    boolean = false;\n}"},"status":0},{"failures":[],"tindex":"41eb7159-43a2-11e5-9b91-b32064311454","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((int & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:374","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, byte[], org.apache.commons.codec.binary.BaseNCodec.Context.int, byte[].int)"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":11,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":29,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":14,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":17,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":27,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":24,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":9,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":16,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":26,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":28,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":8,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":13,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":12,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":15,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":7,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":23,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1":20,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":22,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":18,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":2,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":4,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":10,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":6,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":21,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":19,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent":3,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":5,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":25},"transformations":[{"failures":[0,1],"tindex":"71ea15e8-42dd-11e5-8207-b7a29ca0bc7b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:235","type":"CtAssignmentImpl","sourcecode":"int = int"},"variableMap":{"ii":"index","keyLen":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:707","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"status":-1},{"failures":[],"tindex":"71ea15e9-42dd-11e5-8207-9d55af992651","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.java.lang.String)) + \"]{2,}$\")))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + java.lang.String));\n} "},"variableMap":{"salt":"value","org.apache.commons.codec.digest.B64.B64T":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:602","type":"CtIfImpl","sourcecode":"if ((int == 0) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 5, \"SUGAR\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'S');\n    int++;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"SH\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n    }\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 3, \"SIO\", \"SIA\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 4, \"SIAN\"))) {\n    if (boolean) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    }\n    int += 3;\n} else if (((int == 0) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"Z\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"Z\") ? int + 2 : int + 1;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"SC\")) {\n    int = org.apache.commons.codec.language.DoubleMetaphone.handleSC(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int);\n} else {\n    if ((int == ((java.lang.String.length()) - 1)) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 2, \"AI\", \"OI\"))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('S');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    }\n    int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"S\", \"Z\") ? int + 2 : int + 1;\n}"},"status":-2},{"failures":[],"tindex":"71ea3cfa-42dd-11e5-8207-57c14ee6d938","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:336","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:295","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(java.io.UnsupportedEncodingException.getMessage() , java.io.UnsupportedEncodingException)"},"status":-2},{"failures":[],"tindex":"71ea3cfb-42dd-11e5-8207-b98c9e4259a5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || ((java.lang.String.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.java.lang.String;\n} "},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"str","txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:53","type":"CtIfImpl","sourcecode":"if (int == int) {\n    return java.lang.String.toUpperCase(java.util.Locale.java.util.Locale);\n} "},"status":0},{"failures":[2,3,4,5,6,7,8,9],"tindex":"71ea3cfc-42dd-11e5-8207-d9d04d277b6a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:766","type":"CtLocalVariableImpl","sourcecode":"final int int = (int / 8) - int"},"variableMap":{"bitlen":"i","len":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:167","type":"CtLocalVariableImpl","sourcecode":"final int int = byte[][int]"},"status":-1},{"failures":[],"tindex":"71ea3cfd-42dd-11e5-8207-dbf2d266beeb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:217","type":"CtAssignmentImpl","sourcecode":"byte[][int] = 0"},"variableMap":{"i":"pos","key":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:453","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte"},"status":-2},{"failures":[],"tindex":"71ea640e-42dd-11e5-8207-4fa801157650","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:137","type":"CtAssignmentImpl","sourcecode":"int = '+'"},"variableMap":{"b":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:394","type":"CtOperatorAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int += byte[].int"},"status":-2},{"failures":[],"tindex":"71ea640f-42dd-11e5-8207-6fe0e1e1b7b2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:293","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.Math.min(org.apache.commons.codec.binary.BaseNCodec.available(org.apache.commons.codec.binary.BaseNCodec.Context), int)"},"status":-2},{"failures":[10,11,12,13,14,15,16,17,18,19,20],"tindex":"71ea6410-42dd-11e5-8207-e384eccffe37","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:692","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.binary.Base64().decode(java.lang.String)"},"variableMap":{"base64String":"string"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:114","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.org.apache.commons.codec.binary.StringUtils.getBytes(java.lang.String, org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-1},{"failures":[],"tindex":"71ea6411-42dd-11e5-8207-5d7f2337893a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:239","type":"CtIfImpl","sourcecode":"if (((byte[][int]) & int) != 0) {\n    int |= 1;\n} "},"variableMap":{"b":"b","c":"readPos","u":"bPos","y":"bPos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:294","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(org.apache.commons.codec.binary.BaseNCodec.Context.byte[], org.apache.commons.codec.binary.BaseNCodec.Context.int, byte[], int, int)"},"status":-2},{"failures":[],"tindex":"71ea6412-42dd-11e5-8207-d9d7811bf61c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:771","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'Z' ? int + 2 : int + 1"},"variableMap":{"this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:133","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.handleJ(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int, boolean)"},"status":0},{"failures":[],"tindex":"71ea6413-42dd-11e5-8207-5d89a48971a7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:89","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"3gh3\", \"3kh3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:76","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"cy\", \"sy\")"},"status":1},{"failures":[],"tindex":"71ea6414-42dd-11e5-8207-17bb1309b240","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:95","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"k+\", \"K\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:69","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"cq\", \"2q\")"},"status":1},{"failures":[21,22,23,24,25,26,27,28],"tindex":"71ea8b25-42dd-11e5-8207-97f446ac314e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:301","type":"CtIfImpl","sourcecode":"if (char == char) {\n    return true;\n} "},"variableMap":{"key":"key","element":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:300","type":"CtForEachImpl","sourcecode":"for (final char char : char[]) {\n    if (char == char) {\n        return true;\n    } \n}"},"status":-1},{"failures":[21,24,28],"tindex":"71ea8b26-42dd-11e5-8207-3d688f8c1283","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:389","type":"CtAssignmentImpl","sourcecode":"char = '6'"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:379","type":"CtAssignmentImpl","sourcecode":"char = '4'"},"status":-1},{"failures":[29,0,1],"tindex":"71ea8b27-42dd-11e5-8207-0dea55a78fd4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:291","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:502","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('H')"},"status":-1},{"failures":[],"tindex":"71ea8b28-42dd-11e5-8207-a151addd7e3c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:866","type":"CtReturnImpl","sourcecode":"return (org.apache.commons.codec.language.DoubleMetaphone.java.lang.String.indexOf(char)) != (-1)"},"status":-2},{"failures":[],"tindex":"71ea8b29-42dd-11e5-8207-b5f882274209","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:138","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.substring(int, int)"},"status":-2},{"failures":[],"tindex":"71ea8b2a-42dd-11e5-8207-7bcc94a46f0b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:69","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:476","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int = (org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 2"},"status":-2},{"failures":[],"tindex":"71ea8b2b-42dd-11e5-8207-336e42f0158c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:102","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('}')"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"},"diffs":[{"transformation":"71ea3cfb-42dd-11e5-8207-b98c9e4259a5","diffs":[{"branches":{"org.apache.commons.codec.language.NysiisTest.testDad":["org.apache.commons.codec.language.SoundexUtils_java.lang.String_clean(java.lang.String).e3","org.apache.commons.codec.language.SoundexUtils_java.lang.String_clean(java.lang.String).t3"],"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":["org.apache.commons.codec.language.SoundexUtils_java.lang.String_clean(java.lang.String).e3","org.apache.commons.codec.language.SoundexUtils_java.lang.String_clean(java.lang.String).t3"],"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":["org.apache.commons.codec.language.SoundexUtils_java.lang.String_clean(java.lang.String).e3","org.apache.commons.codec.language.SoundexUtils_java.lang.String_clean(java.lang.String).t3"]},"type":"branch"}]}]}
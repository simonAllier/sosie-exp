{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":39,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData":0,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":22,"org.apache.commons.codec.language.NysiisTest.testSnat":60,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":21,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":34,"org.apache.commons.codec.language.NysiisTest.testDropBy":62,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":36,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":50,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":10,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":16,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":15,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":43,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":7,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":9,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":30,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":24,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptWithEmptySalt":2,"org.apache.commons.codec.language.NysiisTest.testRule2":56,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":44,"org.apache.commons.codec.language.NysiisTest.testRule1":55,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":45,"org.apache.commons.codec.language.NysiisTest.testRule6":57,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":5,"org.apache.commons.codec.language.NysiisTest.testCap":51,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage":13,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":61,"org.apache.commons.codec.language.NysiisTest.testBran":58,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":65,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":25,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":48,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":42,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":29,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":14,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":47,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":19,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":38,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":26,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":41,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":27,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":32,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":17,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":23,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":18,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":20,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":6,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":11,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":4,"org.apache.commons.codec.language.NysiisTest.testDad":52,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":28,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":33,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":46,"org.apache.commons.codec.language.NysiisTest.testOthers":63,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":3,"org.apache.commons.codec.language.NysiisTest.testTranan":64,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":35,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":49,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":12,"org.apache.commons.codec.language.NysiisTest.testDan":53,"org.apache.commons.codec.language.NysiisTest.testFal":54,"org.apache.commons.codec.language.NysiisTest.testSnad":59,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":31,"org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull":37,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":8,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":1,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":40},"transformations":[{"failures":[0,1,2,3,4,5,6,7],"tindex":"8dbf4a70-42ac-11e5-b6b8-e13a408a7f9c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:105","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(byte[], java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.int, org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-1},{"failures":[],"tindex":"8dbf7181-42ac-11e5-b6b8-012c0dc0e661","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.RefinedSoundex:135","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:205","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + java.lang.String))"},"status":-2},{"failures":[8,9],"tindex":"8dbf7182-42ac-11e5-b6b8-c11b2a7502b3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:613","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"status":-1},{"failures":[],"tindex":"8dbf7183-42ac-11e5-b6b8-4dbda15b5d0e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:261","type":"CtReturnImpl","sourcecode":"return new java.util.Scanner(java.io.InputStream , org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)"},"status":-2},{"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"tindex":"8dbf7184-42ac-11e5-b6b8-a78a51170959","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodecOutputStream.flush()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodecOutputStream.flush(true)"},"status":-1},{"failures":[25,26,27,28,29,30,31],"tindex":"8dbf7185-42ac-11e5-b6b8-a9f8a5eecb2b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(byte[], ((byte)(0)))"},"variableMap":{"finalb":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:219","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[])"},"status":-1},{"failures":[],"tindex":"8dbf7186-42ac-11e5-b6b8-8d403d24f1da","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:139","type":"CtIfImpl","sourcecode":"if (char == 'K') {\n    if (char == 'N') {\n        return org.apache.commons.codec.language.Nysiis.char[];\n    } else {\n        return org.apache.commons.codec.language.Nysiis.char[];\n    }\n} "},"variableMap":{"next":"curr","org.apache.commons.codec.language.Nysiis.CHARS_NN":"org.apache.commons.codec.language.Nysiis.CHARS_S","org.apache.commons.codec.language.Nysiis.CHARS_C":"org.apache.commons.codec.language.Nysiis.CHARS_G","curr":"curr"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:130","type":"CtIfImpl","sourcecode":"if (char == 'Q') {\n    return org.apache.commons.codec.language.Nysiis.char[];\n} else if (char == 'Z') {\n    return org.apache.commons.codec.language.Nysiis.char[];\n} else if (char == 'M') {\n    return org.apache.commons.codec.language.Nysiis.char[];\n} "},"status":-2},{"failures":[32,33,34,35,36],"tindex":"8dbf9897-42ac-11e5-b6b8-03aee0228bd9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:310","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][2])"},"variableMap":{"parts":"parts","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:309","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][1])"},"status":-1},{"failures":[37],"tindex":"8dbf9898-42ac-11e5-b6b8-5bbb4f6ade9f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((java.lang.String.length()) == 0) {\n    return null;\n} "},"variableMap":{"input":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:138","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"status":-1},{"failures":[8,9,38,39],"tindex":"8dbf9899-42ac-11e5-b6b8-51d6ed253ed9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:690","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('0', 'T')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:345","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K')"},"status":-1},{"failures":[8,9,38],"tindex":"8dbf989a-42ac-11e5-b6b8-7515b0dd9393","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:648","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 2))) == 'H') {\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n        if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 3), 2, \"ER\", \"EN\")) {\n            org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"X\", \"SK\");\n        } else {\n            org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"SK\");\n        }\n    } else {\n        if (((int == 0) && (!org.apache.commons.codec.language.DoubleMetaphone.(isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, 3))))) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, 3)) != 'W')) {\n            org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'S');\n        } else {\n            org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n        }\n    }\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 2), 1, \"I\", \"E\", \"Y\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"SK\");\n}"},"variableMap":{"result":"result","this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:477","type":"CtIfImpl","sourcecode":"if ((((int > 1) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 1, \"B\", \"H\", \"D\"))) || ((int > 2) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 3), 1, \"B\", \"H\", \"D\")))) || ((int > 3) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 4), 1, \"B\", \"H\")))) {\n    int += 2;\n} else {\n    if (((int > 2) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int - 1))) == 'U')) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 3), 1, \"C\", \"G\", \"L\", \"R\", \"T\"))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('F');\n    } else if ((int > 0) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int - 1))) != 'I')) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    } \n    int += 2;\n}"},"status":-1},{"failures":[],"tindex":"8dbfbfab-42ac-11e5-b6b8-c70ab9a95ace","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:266","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[]{ '0' , '0' , '0' , '0' }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:296","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = java.lang.String.toCharArray()"},"status":-2},{"failures":[40,41,42,43],"tindex":"8dbfbfac-42ac-11e5-b6b8-35a70ebfc77e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:254","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"variableMap":{"length":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:287","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.dEncrypt(int, int, int, int, int, int[])"},"status":-1},{"failures":[],"tindex":"8dbfbfad-42ac-11e5-b6b8-1d19d4dc5a17","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:85","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[int >> 1]"},"variableMap":{"len":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:176","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(char[].int) >> 3]"},"status":-2},{"failures":[],"tindex":"8dbfbfae-42ac-11e5-b6b8-8de8873965d1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtIfImpl","sourcecode":"if (java.lang.String.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    java.lang.String = java.lang.String.substring(0, ((java.lang.String.length()) - 1));\n} "},"variableMap":{"str":"obj","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:134","type":"CtIfImpl","sourcecode":"if (!(java.lang.Object instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n} "},"status":-2},{"failures":[],"tindex":"8dbfbfaf-42ac-11e5-b6b8-e92f95392d23","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:224","type":"CtIfImpl","sourcecode":"if ((int > 0) && (org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"GN\")) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"GNED\")))) {\n    break;\n} "},"variableMap":{"this":"this","n":"n","local":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:293","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"TIA\")) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"TIO\"))) {\n    java.lang.StringBuilder.append('X');\n    break;\n} "},"status":0},{"failures":[44,45,46,47,48],"tindex":"8dbfbfb0-42ac-11e5-b6b8-d10f96af746a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:226","type":"CtOperatorAssignmentImpl","sourcecode":"this.int += int"},"variableMap":{"patternLength":"b","i":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:321","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int, boolean, java.io.ByteArrayOutputStream)"},"status":-1},{"failures":[],"tindex":"8dbfbfb1-42ac-11e5-b6b8-1df9a109bb28","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:65","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^trough\", \"trou2f\")"},"variableMap":{"txt":"org.apache.commons.codec.language.Caverphone2.TEN_1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:125","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String + (org.apache.commons.codec.language.Caverphone2.java.lang.String)"},"status":-2},{"failures":[49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"tindex":"8dbfe6c2-42ac-11e5-b6b8-61dfac095708","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (int == (org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"i","len":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:287","type":"CtIfImpl","sourcecode":"if ((char[][int]) != (char[][(int - 1)])) {\n    java.lang.StringBuilder.append(char[][int]);\n} "},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":19,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
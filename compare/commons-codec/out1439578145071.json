{"failureDictionary":{"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":16,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_1_Returns5_Successfully":35,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_11_Returns_3_Successfully":41,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":28,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_2_Returns5_Successfully":38,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":32,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":30,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":31,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":1,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":22,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":15,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":39,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":7,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_8_Returns3_Successfully":48,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":51,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":52,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":13,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":44,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":45,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":5,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":8,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":25,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully2":42,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":56,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":2,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":53,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":3,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":26,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":27,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":20,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":57,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":58,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":46,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":17,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":0,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":9,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":14,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":47,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":18,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":12,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_13_Returns_1_Successfully":43,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_10_Returns3_Successfully":50,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":59,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":11,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":33,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_7_Returns4_Successfully":40,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":4,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":23,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":29,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":24,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":55,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":19,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_6_Returns4_Successfully":37,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":6,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully":49,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":34,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_7_Return4_Successfully":36,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":10,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":21},"transformations":[{"failures":[0,1,2,3,4,5],"tindex":"2325eded-42b5-11e5-989b-a70874e38abe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:523","type":"CtReturnImpl","sourcecode":"return long"},"variableMap":{"len":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:209","type":"CtReturnImpl","sourcecode":"return long - long"},"status":-1},{"failures":[6,7],"tindex":"2325edee-42b5-11e5-989b-f1583400da78","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:393","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"status":-1},{"failures":[6],"tindex":"2325edef-42b5-11e5-989b-a9bdf083b99c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:142","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((int >> 4) & 15), org.apache.commons.codec.net.URLCodec.int))"},"variableMap":{"b":"index","org.apache.commons.codec.net.URLCodec.RADIX":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:791","type":"CtLocalVariableImpl","sourcecode":"final char char = org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int + 2))"},"status":-1},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19],"tindex":"23261400-42b5-11e5-989b-dbe0f59b2c58","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with \\'(\\' so must end with \\')\\'\");\n} "},"variableMap":{"ph":"salt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:146","type":"CtIfImpl","sourcecode":"if ((java.util.regex.Matcher == null) || (!(java.util.regex.Matcher.find()))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + java.lang.String));\n} "},"status":-1},{"failures":[6,7,20],"tindex":"23261401-42b5-11e5-989b-8522d0f5ba08","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:192","type":"CtReturnImpl","sourcecode":"return this.int"},"variableMap":{"i":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:377","type":"CtReturnImpl","sourcecode":"return int + 2"},"status":-1},{"failures":[],"tindex":"23261402-42b5-11e5-989b-05b5029cc32d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:71","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"ce\", \"se\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:70","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"ci\", \"si\")"},"status":1},{"failures":[6,7,20],"tindex":"23261403-42b5-11e5-989b-a1bea2c8f465","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:587","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:396","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T')"},"status":-1},{"failures":[21,22],"tindex":"23261404-42b5-11e5-989b-7da0353fd86e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:191","type":"CtIfImpl","sourcecode":"if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"right","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"left","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"left","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"right","minRating":"right","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"right","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"left","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"right"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:308","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.permOp(int, int, 16, 65535, int[])"},"status":-1},{"failures":[],"tindex":"23263b15-42b5-11e5-989b-378663a97739","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"sBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:500","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(byte[], ((byte)(0)))"},"status":0},{"failures":[23,24,25,26,27],"tindex":"23263b16-42b5-11e5-989b-911184adf46d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:144","type":"CtInvocationImpl","sourcecode":"java.io.ByteArrayOutputStream.write(char)"},"status":-1},{"failures":[28,29,30],"tindex":"23263b17-42b5-11e5-989b-a398977e6b67","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:858","type":"CtReturnImpl","sourcecode":"return ((((java.lang.String.indexOf('W')) > (-1)) || ((java.lang.String.indexOf('K')) > (-1))) || ((java.lang.String.indexOf(\"CZ\")) > (-1))) || ((java.lang.String.indexOf(\"WITZ\")) > (-1))"},"variableMap":{"value":"value2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:231","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String, java.lang.String, false)"},"status":-1},{"failures":[],"tindex":"23263b18-42b5-11e5-989b-7565fea14595","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:220","type":"CtForImpl","sourcecode":"for (int int = 0 ; (int < (byte[].int)) && (int < (byte[].int)) ; int++) {\n    final int int = byte[][int];\n    byte[][int] = ((byte)(int << 1));\n}"},"variableMap":{"original":"lineSeparator","length":"length","key":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:374","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, byte[], org.apache.commons.codec.binary.BaseNCodec.Context.int, byte[].int)"},"status":-2},{"failures":[31,32,33,34],"tindex":"23263b19-42b5-11e5-989b-c7401cf481db","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:224","type":"CtOperatorAssignmentImpl","sourcecode":"int -= 16"},"variableMap":{"ii":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:505","type":"CtOperatorAssignmentImpl","sourcecode":"int += 256"},"status":-1},{"failures":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"tindex":"23263b1a-42b5-11e5-989b-236d46c4e401","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"status":-1},{"failures":[],"tindex":"23263b1b-42b5-11e5-989b-5f448a925ea0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:349","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 2) & (org.apache.commons.codec.binary.Base64.int))]"},"variableMap":{"encodeTable":"buffer","ibitWorkArea":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","pos":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","context":"context","org.apache.commons.codec.binary.Base64.MASK_6BITS":"pos","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:388","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.long) & (org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2},{"failures":[],"tindex":"2326622c-42b5-11e5-989b-870cf0c52f1b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:809","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[],"tindex":"2326622d-42b5-11e5-989b-49c9b353fc86","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:505","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.encode(((byte[])(java.lang.Object)))"},"variableMap":{"obj":"obj","this":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:532","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.decode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be quoted-printable decoded\"));\n}"},"status":-2},{"failures":[],"tindex":"2326622e-42b5-11e5-989b-03e58ccf5102","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:422","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(java.lang.String)"},"status":0},{"failures":[51,52],"tindex":"2326622f-42b5-11e5-989b-8167f36098ac","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:84","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"sh\", \"s2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:94","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"p+\", \"P\")"},"status":-1},{"failures":[53,54,55,56,57,58,59],"tindex":"23266230-42b5-11e5-989b-9f2a658a2d88","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:284","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.byte[]"},"variableMap":{"encodeTable":"finalb","org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE":"finalb"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:250","type":"CtAssignmentImpl","sourcecode":"byte[] = java.security.MessageDigest.digest()"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
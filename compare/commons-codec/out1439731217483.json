{"failureDictionary":{"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":64,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":34,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":76,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":20,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":61,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":65,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":79,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":8,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":29,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":75,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":42,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":36,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":55,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":9,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":31,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameSameNames_ReturnsFalseSuccessfully":59,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":50,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":12,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":5,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":28,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":48,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":1,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":3,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":6,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":46,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":17,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":23,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":71,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":2,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":39,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":51,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":15,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":16,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":21,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":38,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":14,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":7,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":77,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":60,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":32,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":37,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":72,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":22,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":24,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":41,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":56,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":11,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":13,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":26,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":43,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":40,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":52,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":44,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":0,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":4,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":27,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":30,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":19,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":58,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":47,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":10,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":25,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":53,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":63,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":18,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":49,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":69,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":57,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":74,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":35,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":80,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":68,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":33,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":70,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":66,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":78,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":45,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":62,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":67,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":73},"transformations":[{"failures":[],"tindex":"896a3bc8-4419-11e5-b187-6f49ddcbf716","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:461","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 11))) & (org.apache.commons.codec.binary.Base32.int))]"},"variableMap":{"encodeTable":"buffer","pos":"pos","org.apache.commons.codec.binary.Base32.MASK_5BITS":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:364","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.long) & (org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2},{"failures":[],"tindex":"896a62d9-4419-11e5-b187-352e8e2130c5","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:227","type":"CtReturnImpl","sourcecode":"return null"},"status":-2},{"failures":[0,1,2],"tindex":"896a62da-4419-11e5-b187-83fe4decf074","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:321","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[],"tindex":"896a62db-4419-11e5-b187-632787530d1c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodecOutputStream.flush()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodecOutputStream.flush(false)"},"status":0},{"failures":[3,4,5,6,7,8,9,10],"tindex":"896a62dc-4419-11e5-b187-5dd33fc70402","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:216","type":"CtAssignmentImpl","sourcecode":"this.boolean = true"},"variableMap":{"found":"inMultilineComment"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:414","type":"CtAssignmentImpl","sourcecode":"boolean = false"},"status":-1},{"failures":[],"tindex":"896a62dd-4419-11e5-b187-1bf6646cd87d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodecOutputStream.flush(false)"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodecOutputStream.flush()"},"status":0},{"failures":[11,12,13,14,15,16,17,18],"tindex":"896a89ee-4419-11e5-b187-f92b27b6cf67","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:105","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"h\", \"2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:91","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"[aeiou]\", \"3\")"},"status":-1},{"failures":[],"tindex":"896a89ef-4419-11e5-b187-c365f62087a9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:70","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('%')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:277","type":"CtIfImpl","sourcecode":"if (java.util.BitSet == null) {\n    java.util.BitSet = org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet;\n} "},"status":-2},{"failures":[],"tindex":"896a89f0-4419-11e5-b187-6728c9b534c5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:139","type":"CtReturnImpl","sourcecode":"return null"},"status":0},{"failures":[19,20,21,22,23,24,25],"tindex":"896a89f1-4419-11e5-b187-65e652ad76d7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:115","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(char[])"},"status":-1},{"failures":[26,27,28,29,30,31,32,0,33,34,23,24,35,36],"tindex":"896a89f2-4419-11e5-b187-235c840f989f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:344","type":"CtIfImpl","sourcecode":"if ((int > 0) && (int < (java.lang.StringBuilder.length()))) {\n    boolean = (java.lang.StringBuilder.charAt((int - 1))) == char;\n} "},"status":-1},{"failures":[],"tindex":"896a89f3-4419-11e5-b187-1b478b0b096b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:212","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:145","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\")"},"status":-2},{"failures":[37,38,39,40,41,42,43,44],"tindex":"896a89f4-4419-11e5-b187-8f82ac1320a1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:386","type":"CtIfImpl","sourcecode":"if (char == 'L') {\n    char = '5';\n} else if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"variableMap":{"code":"code","chr":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:395","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.ColognePhonetic.CologneOutputBuffer.addRight(char)"},"status":-1},{"failures":[],"tindex":"896a89f5-4419-11e5-b187-7561ba7d4afd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtIfImpl","sourcecode":"if (java.lang.String.endsWith(org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    java.lang.String = java.lang.String.substring(0, ((java.lang.String.length()) - 1));\n} "},"variableMap":{"str":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:179","type":"CtTryImpl","sourcecode":"try {\n    boolean boolean = false;\n    while (java.util.Scanner.hasNextLine()) {\n        final java.lang.String java.lang.String = java.util.Scanner.nextLine().trim();\n        if (boolean) {\n            if (java.lang.String.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                boolean = false;\n            } \n        } else {\n            if (java.lang.String.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                boolean = true;\n            } else if ((java.lang.String.length()) > 0) {\n                java.util.Set<java.lang.String>.add(java.lang.String);\n            } \n        }\n    }\n} finally {\n    java.util.Scanner.close();\n}"},"status":-2},{"failures":[],"tindex":"896ab106-4419-11e5-b187-8f2e3e6a4899","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:370","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '4';\n} else {\n    char = '8';\n}"},"status":-2},{"failures":[45,46],"tindex":"896ab107-4419-11e5-b187-2bafa000e9e6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:357","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K', 'X')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:688","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T')"},"status":-1},{"failures":[47,48],"tindex":"896ab108-4419-11e5-b187-ddc6fefcf532","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:688","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha512(byte[]))"},"variableMap":{"data":"data","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:412","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha1(byte[]))"},"status":-1},{"failures":[],"tindex":"896ab109-4419-11e5-b187-ff1573ce13c6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:136","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.this(java.nio.charset.Charset, false)"},"variableMap":{"charset":"org.apache.commons.codec.Charsets.UTF_8","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:114","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.this(org.apache.commons.codec.Charsets.java.nio.charset.Charset, false)"},"status":-2},{"failures":[],"tindex":"896ab10a-4419-11e5-b187-a59a7297780d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"variableMap":{"string":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:673","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha512(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String))"},"status":-2},{"failures":[49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"tindex":"896ab10b-4419-11e5-b187-2912a250d5e3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:218","type":"CtIfImpl","sourcecode":"if (((java.lang.String.length()) == 1) || ((java.lang.String.length()) == 1)) {\n    return false;\n} else if (java.lang.String.equalsIgnoreCase(java.lang.String)) {\n    return true;\n} "},"variableMap":{"name2":"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE","name1":"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:214","type":"CtIfImpl","sourcecode":"if (((java.lang.String == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(java.lang.String))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(java.lang.String))) {\n    return false;\n} else if (((java.lang.String == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(java.lang.String))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(java.lang.String))) {\n    return false;\n} else if (((java.lang.String.length()) == 1) || ((java.lang.String.length()) == 1)) {\n    return false;\n} else if (java.lang.String.equalsIgnoreCase(java.lang.String)) {\n    return true;\n} "},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"},"diffs":[{"transformation":"896a89f0-4419-11e5-b187-6728c9b534c5","diffs":[{"nodes":{"org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull":["org.apache.commons.codec.net.RFC1522Codec.java.lang.String encodeText(java.lang.String,java.lang.String)"]},"edges":{"org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull":["org.apache.commons.codec.net.BCodec.java.lang.String encode(java.lang.String,java.lang.String) -> org.apache.commons.codec.net.RFC1522Codec.java.lang.String encodeText(java.lang.String,java.lang.String)"]},"type":"graph"}]},{"transformation":"896a62db-4419-11e5-b187-632787530d1c","diffs":[{"branches":{"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":["org.apache.commons.codec.binary.BaseNCodecOutputStream_void_flush(boolean).e3"],"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":["org.apache.commons.codec.binary.BaseNCodecOutputStream_void_flush(boolean).e3"],"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":["org.apache.commons.codec.binary.BaseNCodecOutputStream_void_flush(boolean).e3"],"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":["org.apache.commons.codec.binary.BaseNCodecOutputStream_void_flush(boolean).e3"]},"type":"branch"},{"nodes":{},"edges":{"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":["org.apache.commons.codec.binary.BaseNCodecOutputStream.void write(byte[],int,int) -> org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush()","org.apache.commons.codec.binary.BaseNCodecOutputStream.void write(byte[],int,int) -> org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush(boolean)"],"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":["org.apache.commons.codec.binary.BaseNCodecOutputStream.void write(byte[],int,int) -> org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush()","org.apache.commons.codec.binary.BaseNCodecOutputStream.void write(byte[],int,int) -> org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush(boolean)"],"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":["org.apache.commons.codec.binary.BaseNCodecOutputStream.void write(byte[],int,int) -> org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush()","org.apache.commons.codec.binary.BaseNCodecOutputStream.void write(byte[],int,int) -> org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush(boolean)"],"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":["org.apache.commons.codec.binary.BaseNCodecOutputStream.void write(byte[],int,int) -> org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush()","org.apache.commons.codec.binary.BaseNCodecOutputStream.void write(byte[],int,int) -> org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush(boolean)"]},"type":"graph"}]},{"transformation":"896a62dd-4419-11e5-b187-1bf6646cd87d","diffs":[{"branches":{"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":["org.apache.commons.codec.binary.BaseNCodecOutputStream_void_flush(boolean).t3","org.apache.commons.codec.binary.BaseNCodecOutputStream_void_flush().b"],"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":["org.apache.commons.codec.binary.BaseNCodecOutputStream_void_flush(boolean).t3","org.apache.commons.codec.binary.BaseNCodecOutputStream_void_flush().b"],"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":["org.apache.commons.codec.binary.BaseNCodecOutputStream_void_flush(boolean).t3","org.apache.commons.codec.binary.BaseNCodecOutputStream_void_flush().b"],"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":["org.apache.commons.codec.binary.BaseNCodecOutputStream_void_flush(boolean).t3","org.apache.commons.codec.binary.BaseNCodecOutputStream_void_flush().b"]},"type":"branch"},{"nodes":{"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":["org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush()"],"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":["org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush()"],"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":["org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush()"],"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":["org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush()"]},"edges":{"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":["org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush() -> org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush(boolean)","org.apache.commons.codec.binary.BaseNCodecOutputStream.void close() -> org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush()","org.apache.commons.codec.binary.BaseNCodecOutputStream.void close() -> org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush(boolean)"],"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":["org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush() -> org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush(boolean)","org.apache.commons.codec.binary.BaseNCodecOutputStream.void close() -> org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush()","org.apache.commons.codec.binary.BaseNCodecOutputStream.void close() -> org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush(boolean)"],"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":["org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush(boolean) -> org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush()","org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush() -> org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush(boolean)","org.apache.commons.codec.binary.BaseNCodecOutputStream.void close() -> org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush()","org.apache.commons.codec.binary.BaseNCodecOutputStream.void close() -> org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush(boolean)"],"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":["org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush(boolean) -> org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush()","org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush() -> org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush(boolean)","org.apache.commons.codec.binary.BaseNCodecOutputStream.void close() -> org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush()","org.apache.commons.codec.binary.BaseNCodecOutputStream.void close() -> org.apache.commons.codec.binary.BaseNCodecOutputStream.void flush(boolean)"]},"type":"graph"}]}]}
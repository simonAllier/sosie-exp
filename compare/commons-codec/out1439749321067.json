{"failureDictionary":{"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":13,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":2,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":26,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":33,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":32,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":14,"org.apache.commons.codec.binary.Base64Test.testBase64":68,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":45,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":27,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":42,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":31,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":1,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":39,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":0,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":37,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":40,"org.apache.commons.codec.binary.Base64Test.testUUID":57,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":49,"org.apache.commons.codec.binary.Base64Test.testSingletons":66,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":50,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":12,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":52,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":16,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":29,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":28,"org.apache.commons.codec.binary.Base64Test.testPairs":56,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":62,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":51,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":69,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":24,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":59,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":34,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":55,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":60,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":61,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":75,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":23,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":20,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":54,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":10,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":11,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":19,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":36,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":46,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":21,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":63,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":22,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":43,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":64,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":70,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":15,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":73,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":38,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":65,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":3,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":47,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":48,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":5,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":9,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":35,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":30,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":4,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":53,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":71,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":8,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":41,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":67,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":7,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":72,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":17,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":18,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":74,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":25,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":44,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":58,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":6},"transformations":[{"failures":[],"tindex":"b00408d2-4443-11e5-ab71-c1b4f307cc41","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:210","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.String.charAt(1)"},"variableMap":{"salt":"accentedWord"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:360","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.String.charAt(int)"},"status":-2},{"failures":[0],"tindex":"b0047e03-4443-11e5-ab71-137551d0c59e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:219","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException(\"Can\\'t fetch any language from the empty language set.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:175","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Unable to resolve required resource: \" + java.lang.String))"},"status":-1},{"failures":[],"tindex":"b004a514-4443-11e5-ab71-c979e6266a2b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:298","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, byte[], int, int)"},"variableMap":{"blocksize":"pos","tempResult":"encodeTable","pBytes":"buffer","cp":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:364","type":"CtIfImpl","sourcecode":"if ((byte[]) == (org.apache.commons.codec.binary.Base64.byte[])) {\n    byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n} "},"status":-2},{"failures":[],"tindex":"b004cc25-4443-11e5-ab71-b92431765094","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:258","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = java.lang.String"},"status":-2},{"failures":[],"tindex":"b004cc26-4443-11e5-ab71-2f9902b3599d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:249","type":"CtReturnImpl","sourcecode":"return java.lang.String.format(\"org/apache/commons/codec/language/bm/%s_%s_%s.txt\", org.apache.commons.codec.language.bm.NameType.getName(), org.apache.commons.codec.language.bm.RuleType.getName(), java.lang.String)"},"status":-2},{"failures":[1,2,3,4,5,6,7,8,9],"tindex":"b004f337-4443-11e5-ab71-35929e31c1cc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:117","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('0')"},"variableMap":{"builder":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:429","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(java.lang.String)"},"status":-1},{"failures":[],"tindex":"b0051a48-4443-11e5-ab71-19e7ac3d2348","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:438","type":"CtBreakImpl","sourcecode":"break"},"status":0},{"failures":[10,11],"tindex":"b0051a49-4443-11e5-ab71-bb3f359471fa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:104","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.decodeBase64(byte[])"},"variableMap":{"bytes":"bigBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:755","type":"CtReturnImpl","sourcecode":"return byte[]"},"status":-1},{"failures":[],"tindex":"b005415a-4443-11e5-ab71-eddae5f08637","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"variableMap":{"salt":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:683","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"TH\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 3, \"TTH\"))) {\n    if ((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 2), 2, \"OM\", \"AM\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 4, \"VAN \", \"VON \"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 3, \"SCH\"))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('0', 'T');\n    }\n    int += 2;\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T');\n    int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"T\", \"D\") ? int + 2 : int + 1;\n}"},"status":-2},{"failures":[12,13,14,15],"tindex":"b005686b-4443-11e5-ab71-5721729ce29f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:209","type":"CtReturnImpl","sourcecode":"return long - long"},"variableMap":{"todo":"len","n":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:523","type":"CtReturnImpl","sourcecode":"return long"},"status":-1},{"failures":[],"tindex":"b0058f7c-4443-11e5-ab71-af7acee8319f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:218","type":"CtIfImpl","sourcecode":"if (((java.lang.String.length()) == 1) || ((java.lang.String.length()) == 1)) {\n    return false;\n} else if (java.lang.String.equalsIgnoreCase(java.lang.String)) {\n    return true;\n} "},"variableMap":{"name2":"value","name1":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:858","type":"CtReturnImpl","sourcecode":"return ((((java.lang.String.indexOf('W')) > (-1)) || ((java.lang.String.indexOf('K')) > (-1))) || ((java.lang.String.indexOf(\"CZ\")) > (-1))) || ((java.lang.String.indexOf(\"WITZ\")) > (-1))"},"status":-2},{"failures":[16],"tindex":"b0058f7d-4443-11e5-ab71-c7a7966bf5c0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"variableMap":{"value":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((java.lang.String.length()) == 0) {\n    return null;\n} "},"status":-1},{"failures":[14],"tindex":"b005b68e-4443-11e5-ab71-d1810ace4d58","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:206","type":"CtOperatorAssignmentImpl","sourcecode":"long -= int"},"variableMap":{"todo":"len","len":"chunkSeparatorLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:521","type":"CtOperatorAssignmentImpl","sourcecode":"long += (((long + (int)) - 1) / (int)) * (int)"},"status":-1},{"failures":[17,18,19,20,21,22],"tindex":"b005dd9f-4443-11e5-ab71-130170926c84","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:70","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('%')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"urlsafe"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:130","type":"CtForEachImpl","sourcecode":"for (final byte byte : byte[]) {\n    int int = byte;\n    if (int < 0) {\n        int = 256 + int;\n    } \n    if (java.util.BitSet.get(int)) {\n        if (int == ' ') {\n            int = '+';\n        } \n        java.io.ByteArrayOutputStream.write(int);\n    } else {\n        java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.URLCodec.byte);\n        final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((int >> 4) & 15), org.apache.commons.codec.net.URLCodec.int));\n        final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((int & 15), org.apache.commons.codec.net.URLCodec.int));\n        java.io.ByteArrayOutputStream.write(char);\n        java.io.ByteArrayOutputStream.write(char);\n    }\n}"},"status":-1},{"failures":[],"tindex":"b00604b0-4443-11e5-ab71-b99d5218435b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:121","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.char[]"},"variableMap":{"org.apache.commons.codec.language.Nysiis.CHARS_AF":"org.apache.commons.codec.language.Nysiis.CHARS_C"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:140","type":"CtIfImpl","sourcecode":"if (char == 'N') {\n    return org.apache.commons.codec.language.Nysiis.char[];\n} else {\n    return org.apache.commons.codec.language.Nysiis.char[];\n}"},"status":-2},{"failures":[],"tindex":"b00604b1-4443-11e5-ab71-57738ed6b48a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:414","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"O\", org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:75","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"ce\", \"se\")"},"status":1},{"failures":[],"tindex":"b0062bc2-4443-11e5-ab71-5d56a332fcc0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"status":0},{"failures":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"tindex":"b0062bc3-4443-11e5-ab71-b371e89949b6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with \\'(\\' so must end with \\')\\'\");\n} "},"variableMap":{"ph":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    java.lang.String = java.lang.String.substring(1);\n} "},"status":-1},{"failures":[],"tindex":"b00652d4-4443-11e5-ab71-c7b1c3f8963f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:299","type":"CtOperatorAssignmentImpl","sourcecode":"int += int"},"variableMap":{"blocksize":"pos","cp":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:375","type":"CtOperatorAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int += byte[].int"},"status":-2},{"failures":[41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,10,11,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"tindex":"b00652d5-4443-11e5-ab71-d709fcb9b5e7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:461","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.binary.BaseNCodec.Context.boolean) && ((org.apache.commons.codec.binary.BaseNCodec.Context.int) != 0)) {\n    final byte[] byte[] = org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int, org.apache.commons.codec.binary.BaseNCodec.Context);\n    switch (org.apache.commons.codec.binary.BaseNCodec.Context.int) {\n        case 1 :\n            break;\n        case 2 :\n            org.apache.commons.codec.binary.BaseNCodec.Context.int = (org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 4;\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.int) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 3 :\n            org.apache.commons.codec.binary.BaseNCodec.Context.int = (org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 2;\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.int) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        default :\n            throw new java.lang.IllegalStateException((\"Impossible modulus \" + (org.apache.commons.codec.binary.BaseNCodec.Context.int)));\n    }\n} "},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
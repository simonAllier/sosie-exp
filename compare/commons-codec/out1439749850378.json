{"failureDictionary":{"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":78,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":94,"org.apache.commons.codec.language.NysiisTest.testSnat":34,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":79,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":89,"org.apache.commons.codec.language.NysiisTest.testEncodeEmpty":40,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":88,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":50,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":48,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":49,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeNull":0,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":18,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":22,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":51,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":95,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":17,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeStringWithNull":7,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":84,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":15,"org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence":70,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty":69,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":9,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":60,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":81,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":62,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":61,"org.apache.commons.codec.language.NysiisTest.testCap":23,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":59,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":57,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":5,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":14,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":58,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":12,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":67,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":68,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":52,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":87,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":91,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":42,"org.apache.commons.codec.language.SoundexTest.testB650":47,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":73,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":6,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":71,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":20,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":86,"org.apache.commons.codec.language.SoundexTest.testNewInstance":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":76,"org.apache.commons.codec.language.NysiisTest.testTranan":38,"org.apache.commons.codec.language.NysiisTest.testFal":26,"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence":64,"org.apache.commons.codec.language.NysiisTest.testSnad":33,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":82,"org.apache.commons.codec.language.NysiisTest.testLocaleIndependence":41,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":44,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":74,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":45,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":46,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":16,"org.apache.commons.codec.language.NysiisTest.testDropBy":36,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":93,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":90,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":2,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":11,"org.apache.commons.codec.language.NysiisTest.testRule2":28,"org.apache.commons.codec.language.NysiisTest.testRule1":27,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":10,"org.apache.commons.codec.language.NysiisTest.testRule7":31,"org.apache.commons.codec.language.NysiisTest.testRule6":30,"org.apache.commons.codec.language.NysiisTest.testRule5":29,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":72,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":4,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":55,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":35,"org.apache.commons.codec.language.NysiisTest.testBran":32,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":39,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":66,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":53,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":75,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":13,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":63,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":65,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":3,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":85,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":56,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":43,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":8,"org.apache.commons.codec.language.NysiisTest.testDad":24,"org.apache.commons.codec.language.NysiisTest.testOthers":37,"org.apache.commons.codec.language.SoundexTest.testDifference":19,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":92,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":21,"org.apache.commons.codec.language.NysiisTest.testDan":25,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":1,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":77,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":97,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":96,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":80,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":83},"transformations":[{"failures":[0],"tindex":"eb827bca-4444-11e5-8d47-67de2d053a38","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:321","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[],"tindex":"eb82f0fb-4444-11e5-8d47-9126bfefadc8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:341","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(byte[], 4)"},"status":-2},{"failures":[1,2],"tindex":"eb82f0fc-4444-11e5-8d47-5ff37bdc74ef","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.int"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"index","encodeSize":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:316","type":"CtOperatorAssignmentImpl","sourcecode":"int += 3"},"status":-1},{"failures":[3,4,5,6],"tindex":"eb83180d-4444-11e5-8d47-1161ceba656b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:252","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('H')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:277","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(char)"},"status":-1},{"failures":[7],"tindex":"eb833f1e-4444-11e5-8d47-fb765bd5c179","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:598","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[8,9,10,11],"tindex":"eb833f1f-4444-11e5-8d47-1be72c31d002","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:361","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.BaseNCodec.encode(byte[]))"},"status":-1},{"failures":[],"tindex":"eb836630-4444-11e5-8d47-c5b9449934b4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:342","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be URL decoded\"))"},"status":-2},{"failures":[2,12],"tindex":"eb836631-4444-11e5-8d47-a7c83b6ac287","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:654","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"X\", \"SK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:372","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'K')"},"status":-1},{"failures":[],"tindex":"eb838d42-4444-11e5-8d47-650fb8cfd2c1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:201","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.digest.UnixCrypt.char[].int"},"status":-2},{"failures":[13,14,15,16,17,3,18],"tindex":"eb838d43-4444-11e5-8d47-033229f24e73","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:289","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('S')"},"status":-1},{"failures":[19,20],"tindex":"eb83b454-4444-11e5-8d47-7bc1893a4ec9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:99","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:121","type":"CtReturnImpl","sourcecode":"return int"},"status":-1},{"failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,19,54,55,56,57,58,59,60,61,62,63,64,20,65,66,67,68,69,70],"tindex":"eb83db65-4444-11e5-8d47-536387c1c167","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.java.lang.String)) + \"]{2,}$\")))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + java.lang.String));\n} "},"variableMap":{"salt":"str","org.apache.commons.codec.digest.B64.B64T":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:48","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    if (java.lang.Character.isLetter(java.lang.String.charAt(int))) {\n        char[][int++] = java.lang.String.charAt(int);\n    } \n}"},"status":-1},{"failures":[],"tindex":"eb840276-4444-11e5-8d47-97e229e32f84","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:190","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byte[])"},"variableMap":{"tmp":"ascii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:141","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.fromAscii(byte[])"},"status":-2},{"failures":[71,72,73,74,75,76,77,78,79,80,81,82],"tindex":"eb840277-4444-11e5-8d47-6d6c8a80826c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:114","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.Math.min(java.lang.String.length(), java.lang.String.length())"},"variableMap":{"es1":"name1","es2":"name2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:250","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.Math.abs(((java.lang.String.length()) + (java.lang.String.length())))"},"status":-1},{"failures":[],"tindex":"eb842988-4444-11e5-8d47-0744b99d36c9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:77","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"tch\", \"2ch\")"},"status":0},{"failures":[83,84],"tindex":"eb842989-4444-11e5-8d47-71bf0145ceee","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:421","type":"CtAssignmentImpl","sourcecode":"int = int + 2"},"variableMap":{"index":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:288","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.dEncrypt(int, int, (int + 2), int, int, int[])"},"status":-1},{"failures":[],"tindex":"eb84509a-4444-11e5-8d47-6d72e8ca0466","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtIfImpl","sourcecode":"if (java.lang.String.contains(java.lang.String)) {\n    final java.lang.String java.lang.String = java.lang.String.substring(0, 1);\n    java.lang.String = java.lang.String.replace(java.lang.String, java.lang.String);\n} "},"variableMap":{"replacedName":"rawLine","dc":"location"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:286","type":"CtIfImpl","sourcecode":"if ((java.lang.String[].int) != 2) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (java.lang.String[].int)) + \" parts: \") + java.lang.String) + \" in \") + java.lang.String));\n} else {\n    final java.lang.String java.lang.String = java.lang.String[][0];\n    final java.lang.String java.lang.String = java.lang.String[][1];\n    if (((java.lang.String.length()) != 1) || ((java.lang.String.length()) != 1)) {\n        throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + java.lang.String) + \" in \") + java.lang.String));\n    } \n    java.util.Map<java.lang.Character, java.lang.Character>.put(java.lang.String.charAt(0), java.lang.String.charAt(0));\n}"},"status":-2},{"failures":[85,86,87,88,89,90,91,92,93,94],"tindex":"eb8477ab-4444-11e5-8d47-e7968404a257","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.java.lang.String)) + \"]{2,}$\")))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + java.lang.String));\n} "},"variableMap":{"salt":"inputContext","org.apache.commons.codec.digest.B64.B64T":"inputContext"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:515","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.matches(java.lang.String)) {\n    if (boolean) {\n        java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.clear();\n    } \n    final java.lang.String[] java.lang.String[] = org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.getReplacements(java.lang.String, (char == '\u0000'));\n    final boolean boolean = ((java.lang.String[].int) > 1) && boolean;\n    for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>) {\n        for (final java.lang.String java.lang.String : java.lang.String[]) {\n            final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = boolean ? org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.createBranch() : org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch;\n            final boolean boolean = ((char == 'm') && (char == 'n')) || ((char == 'n') && (char == 'm'));\n            org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.processNextReplacement(java.lang.String, boolean);\n            if (boolean) {\n                java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.add(org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch);\n            } else {\n                break;\n            }\n        }\n    }\n    if (boolean) {\n        java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.clear();\n        java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.addAll(java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>);\n    } \n    int += (org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.getPatternLength()) - 1;\n    break;\n} "},"status":-1},{"failures":[],"tindex":"eb84c5cc-4444-11e5-8d47-ab798dcf192f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:182","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.util.Scanner.nextLine().trim()"},"variableMap":{"lsScanner":"scanner"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:257","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.util.Scanner.nextLine()"},"status":0},{"failures":[95,96,97],"tindex":"eb84ecdd-4444-11e5-8d47-93ed21097cd1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:90","type":"CtAssignmentImpl","sourcecode":"java.lang.String = (org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + java.lang.String"},"variableMap":{"salt":"name","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:142","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.getFirst3Last3(java.lang.String)"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
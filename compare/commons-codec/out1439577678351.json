{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":31,"org.apache.commons.codec.binary.HexTest.testCustomCharset":49,"org.apache.commons.codec.language.NysiisTest.testDropBy":60,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":30,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":35,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":12,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":37,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":61,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":3,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":11,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":26,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":46,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":47,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":8,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":20,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":6,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":41,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithEmptySalt":55,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":52,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__AIDAN_Returns_ADN":9,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":44,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":5,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":38,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":13,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":14,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":51,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":28,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":54,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":2,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":33,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":4,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":43,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":40,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":27,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":48,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":53,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":32,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":39,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":57,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":1,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":58,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":15,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":16,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":25,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":42,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":24,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":56,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":7,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":21,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":59,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":29,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":36,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":50,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":23,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":34,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel_ALESSANDRA_Returns_ALSSNDR":10,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":19,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":17,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__DECLAN_Returns_DCLN":18,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":22,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":0,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":45},"transformations":[{"failures":[],"tindex":"0cf817a1-42b4-11e5-93d2-a95103e3568a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.AbstractCaverphone:58","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:671","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((((\"Input array too big, the output array would be bigger (\" + long) + \") than the specified maximum size of \") + int))"},"status":-2},{"failures":[0,1,2,3],"tindex":"0cf83eb2-42b4-11e5-93d2-8df6e6c085dd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:327","type":"CtAssignmentImpl","sourcecode":"int = 256 + int"},"variableMap":{"b":"j"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:378","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[4,5,6,7],"tindex":"0cf83eb3-42b4-11e5-93d2-1749bdb6049a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:411","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"A\", org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:113","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"r$\", \"3\")"},"status":-1},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19],"tindex":"0cf865c4-42b4-11e5-93d2-2f6fa0e9f378","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:420","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.MatchRatingApproachEncoder.isVowel(java.lang.String)) {\n    return java.lang.String + java.lang.String;\n} else {\n    return java.lang.String;\n}"},"status":-1},{"failures":[20],"tindex":"0cf865c5-42b4-11e5-93d2-d9c934b011e9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:122","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof char[]) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(java.lang.Object)));\n} "},"status":-1},{"failures":[21],"tindex":"0cf865c6-42b4-11e5-93d2-1bbb26eef365","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:149","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"|\")"},"variableMap":{"sb":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:180","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('X')"},"status":-1},{"failures":[22,23,24,25,26],"tindex":"0cf865c7-42b4-11e5-93d2-47b72289f723","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(byte[], ((byte)(0)))"},"variableMap":{"finalb":"altResult"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:457","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][0], byte[][10], byte[][20], 4, java.lang.StringBuilder)"},"status":-1},{"failures":[],"tindex":"0cf88cd8-42b4-11e5-93d2-3fd555ed9f4b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (int == int) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"result","to":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:355","type":"CtIfImpl","sourcecode":"if (int >= 0) {\n    org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) + 1) % (org.apache.commons.codec.binary.Base32.int);\n    org.apache.commons.codec.binary.BaseNCodec.Context.long = ((org.apache.commons.codec.binary.BaseNCodec.Context.long) << (org.apache.commons.codec.binary.Base32.int)) + int;\n    if ((org.apache.commons.codec.binary.BaseNCodec.Context.int) == 0) {\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.long) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n    } \n} "},"status":-2},{"failures":[27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"tindex":"0cf88cd9-42b4-11e5-93d2-3ff0d94f27a4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:320","type":"CtAssignmentImpl","sourcecode":"char[][int] = ' '"},"variableMap":{"name1Char":"toDigits","i":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:145","type":"CtAssignmentImpl","sourcecode":"char[][int++] = char[][((240 & (byte[][int])) >>> 4)]"},"status":-1},{"failures":[],"tindex":"0cf8b3ea-42b4-11e5-93d2-b50fb03a146a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:283","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:503","type":"CtLocalVariableImpl","sourcecode":"int int = byte[][int++]"},"status":-2},{"failures":[],"tindex":"0cf8b3eb-42b4-11e5-93d2-9b72bb772aa9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Crypt:72","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(org.apache.commons.codec.digest.Md5Crypt.java.lang.String)) {\n    return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[], java.lang.String);\n} else {\n    return org.apache.commons.codec.digest.UnixCrypt.crypt(byte[], java.lang.String);\n}"},"variableMap":{"salt":"org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_512","keyBytes":"keyBytes","org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX":"org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:543","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(byte[], java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.int, org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-2},{"failures":[],"tindex":"0cf8b3ec-42b4-11e5-93d2-714f05ca1d46","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.BCodec:102","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:258","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.Context.byte[]"},"status":-2},{"failures":[],"tindex":"0cf8b3ed-42b4-11e5-93d2-611634836e45","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:207","type":"CtAssignmentImpl","sourcecode":"this.boolean = false"},"variableMap":{"found":"eof"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:349","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.boolean = true"},"status":-2},{"failures":[],"tindex":"0cf8dafe-42b4-11e5-93d2-d7101ac11731","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Hex:296","type":"CtTryImpl","sourcecode":"try {\n    final byte[] byte[] = java.lang.Object instanceof java.lang.String ? ((java.lang.String)(java.lang.Object)).getBytes(org.apache.commons.codec.binary.Hex.getCharset()) : ((byte[])(java.lang.Object));\n    return org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.encodeHex(byte[]);\n} catch (final java.lang.ClassCastException e) {\n    throw new org.apache.commons.codec.EncoderException(java.lang.ClassCastException.getMessage() , java.lang.ClassCastException);\n}"},"variableMap":{"e":"obj","this":"obj","object":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:313","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.encode(((byte[])(java.lang.Object)))"},"status":-2},{"failures":[54,55,56,57,58,59],"tindex":"0cf8daff-42b4-11e5-93d2-bbba8125aeff","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtIfImpl","sourcecode":"if (java.lang.String.endsWith(org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    java.lang.String = java.lang.String.substring(0, ((java.lang.String.length()) - 1));\n} "},"variableMap":{"str":"salt","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"salt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtIfImpl","sourcecode":"if ((java.lang.String != null) && (!(java.lang.String.startsWith(org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n    java.lang.String = (org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + java.lang.String;\n} "},"status":-1},{"failures":[],"tindex":"0cf8db00-42b4-11e5-93d2-7f96c3747360","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodecOutputStream.flush(true)"},"variableMap":{"this":"source"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.AbstractCaverphone:57","type":"CtIfImpl","sourcecode":"if (!(java.lang.Object instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n} "},"status":-2},{"failures":[60],"tindex":"0cf90211-42b4-11e5-93d2-ab4c9a93c97e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:143","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.char[]"},"status":-1},{"failures":[],"tindex":"0cf90212-42b4-11e5-93d2-a1a0a81dd794","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:317","type":"CtReturnImpl","sourcecode":"return int[]"},"status":-2},{"failures":[61],"tindex":"0cf90213-42b4-11e5-93d2-25c3913ae49b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:238","type":"CtOperatorAssignmentImpl","sourcecode":"int <<= 1"},"variableMap":{"c":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:153","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":19,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
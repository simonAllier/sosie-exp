{"failureDictionary":{"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":8,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":102,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":11,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":7,"org.apache.commons.codec.language.NysiisTest.testSnat":87,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":13,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":71,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":75,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":21,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":18,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":1,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":98,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":70,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":68,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":97,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":64,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":29,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":15,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":44,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":39,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":34,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":40,"org.apache.commons.codec.language.NysiisTest.testCap":76,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":6,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":43,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":41,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":65,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":42,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":22,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":46,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":19,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":67,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":72,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":27,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":96,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":55,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":104,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":3,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":0,"org.apache.commons.codec.language.NysiisTest.testTranan":91,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":9,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":56,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":23,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":10,"org.apache.commons.codec.language.NysiisTest.testFal":79,"org.apache.commons.codec.language.NysiisTest.testSnad":86,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":12,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":93,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":52,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":101,"org.apache.commons.codec.language.NysiisTest.testDropBy":89,"org.apache.commons.codec.binary.Base64Test.testBase64":51,"org.apache.commons.codec.binary.Base64Test.testUUID":36,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":100,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":28,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":45,"org.apache.commons.codec.binary.Base64Test.testSingletons":49,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":31,"org.apache.commons.codec.binary.Base64Test.testPairs":35,"org.apache.commons.codec.language.NysiisTest.testRule2":81,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":30,"org.apache.commons.codec.language.NysiisTest.testRule1":80,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":53,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":66,"org.apache.commons.codec.language.NysiisTest.testRule7":84,"org.apache.commons.codec.language.NysiisTest.testRule6":83,"org.apache.commons.codec.language.NysiisTest.testRule5":82,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":2,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":63,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":59,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":33,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":88,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":24,"org.apache.commons.codec.language.NysiisTest.testBran":85,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":92,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":4,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":25,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":16,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":47,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":54,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":57,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":48,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":62,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":5,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":26,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert":61,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":73,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":32,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":95,"org.apache.commons.codec.language.NysiisTest.testDad":77,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":17,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":38,"org.apache.commons.codec.language.NysiisTest.testOthers":90,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":50,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":94,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":14,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":74,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":60,"org.apache.commons.codec.language.NysiisTest.testDan":78,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":58,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":99,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":20,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":37,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":69,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":103},"transformations":[{"failures":[],"tindex":"e3892799-42ad-11e5-a7b0-ffc6d068db30","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:48","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone2.java.lang.String"},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"original"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:263","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.crypt(java.lang.String.getBytes(org.apache.commons.codec.Charsets.java.nio.charset.Charset))"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"tindex":"e3894eaa-42ad-11e5-a7b0-1d8ecafbd5b2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:312","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(int, (int + 1))"},"status":-1},{"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"tindex":"e3894eab-42ad-11e5-a7b0-8bd048e1f610","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:445","type":"CtIfImpl","sourcecode":"if (int >= 0) {\n    org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) + 1) % (org.apache.commons.codec.binary.Base64.int);\n    org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) << (org.apache.commons.codec.binary.Base64.int)) + int;\n    if ((org.apache.commons.codec.binary.BaseNCodec.Context.int) == 0) {\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.int) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n    } \n} "},"status":-1},{"failures":[],"tindex":"e3894eac-42ad-11e5-a7b0-a9dac48d38b2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtIfImpl","sourcecode":"if ((((java.lang.String == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(java.lang.String))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(java.lang.String))) || ((java.lang.String.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n} "},"variableMap":{"name":"source","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"source","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"source"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:436","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(java.lang.String, false)[0]"},"status":-2},{"failures":[60,61,62,63,64,65,66],"tindex":"e3894ead-42ad-11e5-a7b0-07038c9254bb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:162","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(char)"},"status":-1},{"failures":[],"tindex":"e38975be-42ad-11e5-a7b0-27eea892db0f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.BCodec:177","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"variableMap":{"value":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Crypt:149","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Crypt.org.apache.commons.codec.digest.Crypt.crypt(java.lang.String.getBytes(org.apache.commons.codec.Charsets.java.nio.charset.Charset), java.lang.String)"},"status":-2},{"failures":[67,68],"tindex":"e38975bf-42ad-11e5-a7b0-25849c5e860f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:242","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[],"tindex":"e38975c0-42ad-11e5-a7b0-f13b2983002c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:333","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = new java.lang.String(char[]).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-2},{"failures":[69,70],"tindex":"e38975c1-42ad-11e5-a7b0-9b849c367346","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:332","type":"CtOperatorAssignmentImpl","sourcecode":"int ^= (((((((org.apache.commons.codec.digest.UnixCrypt.int[][][1][(int & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.int[][][3][((int >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.int[][][5][((int >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.int[][][7][((int >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.int[][][0][(int & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.int[][][2][((int >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.int[][][4][((int >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.int[][][6][((int >>> 24) & 63)])"},"status":-1},{"failures":[71,72,73],"tindex":"e38975c2-42ad-11e5-a7b0-fdfe48d14f5a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:148","type":"CtIfImpl","sourcecode":"if ((java.lang.StringBuilder.length()) > 0) {\n    java.lang.StringBuilder.append(\"|\");\n} "},"variableMap":{"sb":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:484","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][15], byte[][36], byte[][57], 4, java.lang.StringBuilder)"},"status":-1},{"failures":[0,2,4,5,6,7,8,9,10,11,12,13],"tindex":"e38975c3-42ad-11e5-a7b0-87acb99d9d8b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:138","type":"CtAssignmentImpl","sourcecode":"char[][0] = 'S'"},"variableMap":{"inwd":"name1Char"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:320","type":"CtAssignmentImpl","sourcecode":"char[][int] = ' '"},"status":-1},{"failures":[],"tindex":"e38975c4-42ad-11e5-a7b0-61595c7c3f49","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:210","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.String.charAt(1)"},"variableMap":{"salt":"accentedWord"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:360","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.String.charAt(int)"},"status":-2},{"failures":[],"tindex":"e3899cd5-42ad-11e5-a7b0-01a151ca9cf3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:728","type":"CtOperatorAssignmentImpl","sourcecode":"int += 4"},"variableMap":{"index":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:457","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-2},{"failures":[74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"tindex":"e3899cd6-42ad-11e5-a7b0-2552857b908b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:132","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.setCharAt(0, 'W')"},"variableMap":{"local":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:287","type":"CtIfImpl","sourcecode":"if ((char[][int]) != (char[][(int - 1)])) {\n    java.lang.StringBuilder.append(char[][int]);\n} "},"status":-1},{"failures":[93,94,95,96,97,71,72,73],"tindex":"e3899cd7-42ad-11e5-a7b0-d9bbba60024d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:378","type":"CtIfImpl","sourcecode":"if ((int % 3) != 0) {\n    java.security.MessageDigest.update(byte[], 0, int);\n} "},"status":-1},{"failures":[],"tindex":"e3899cd8-42ad-11e5-a7b0-55e4afdb56bc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:167","type":"CtLocalVariableImpl","sourcecode":"final int int = byte[][int]"},"variableMap":{"bytes":"b","i":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:201","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(java.lang.Math.min(byte[].int, long)))"},"status":-2},{"failures":[98,27],"tindex":"e3899cd9-42ad-11e5-a7b0-fdf99bee1098","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:230","type":"CtAssignmentImpl","sourcecode":"byte[][8] = 0"},"variableMap":{"b":"singleByte"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:61","type":"CtAssignmentImpl","sourcecode":"byte[][0] = ((byte)(int))"},"status":-1},{"failures":[],"tindex":"e3899cda-42ad-11e5-a7b0-ab4302ec6fdc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((int & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:652","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 3), 2, \"ER\", \"EN\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"X\", \"SK\");\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"SK\");\n}"},"status":-2},{"failures":[99,100,101,102,103,104],"tindex":"e3899cdb-42ad-11e5-a7b0-4f828436dbbd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:896","type":"CtReturnImpl","sourcecode":"return java.lang.String.toUpperCase(java.util.Locale.java.util.Locale)"},"status":-1},{"failures":[99,100],"tindex":"e389c3ec-42ad-11e5-a7b0-ff4e055c0bd2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:273","type":"CtReturnImpl","sourcecode":"return int + 1"},"variableMap":{"index":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:773","type":"CtReturnImpl","sourcecode":"return int"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
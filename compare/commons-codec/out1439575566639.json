{"failureDictionary":{"org.apache.commons.codec.binary.HexTest.testCustomCharset":36,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":47,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":22,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":15,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":1,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":43,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":42,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":25,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":44,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":9,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":30,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":29,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":19,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":32,"org.apache.commons.codec.binary.Base64Test.testUUID":41,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":7,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":10,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":26,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":21,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":8,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":18,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":40,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":37,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":20,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":16,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":0,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":12,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":39,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":33,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":4,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":6,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":17,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":2,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":3,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":23,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":48,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":24,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":35,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":11,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":27,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":45,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":46,"org.apache.commons.codec.language.SoundexTest.testDifference":34,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":13,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":5,"org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1":38,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":31,"org.apache.commons.codec.language.MetaphoneTest.testTCH":14,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":28},"transformations":[{"failures":[0],"tindex":"224894a4-42af-11e5-b0d2-2f705b15e2ad","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:321","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.md5(java.lang.String))"},"variableMap":{"data":"data","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:249","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.md2(java.lang.String))"},"status":-1},{"failures":[],"tindex":"224894a5-42af-11e5-b0d2-4f43ab85518d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:297","type":"CtWhileImpl","sourcecode":"while (int < (int - int)) {\n    java.lang.System.arraycopy(byte[], 0, byte[], int, int);\n    int += int;\n}"},"variableMap":{"blocksize":"i","tempResult":"bytes","pBytes":"bytes","keyLen":"i","cp":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:360","type":"CtTryImpl","sourcecode":"try {\n    if ((byte[][++int]) == (org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n        continue;\n    } \n    final int int = org.apache.commons.codec.net.Utils.digit16(byte[][int]);\n    final int int = org.apache.commons.codec.net.Utils.digit16(byte[][++int]);\n    java.io.ByteArrayOutputStream.write(((char)((int << 4) + int)));\n} catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n    throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , java.lang.ArrayIndexOutOfBoundsException);\n}"},"status":0},{"failures":[],"tindex":"2248bbb6-42af-11e5-b0d2-936145add397","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:412","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"E\", org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:415","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"U\", org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-2},{"failures":[1,2,3],"tindex":"2248bbb7-42af-11e5-b0d2-cd5de77285df","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:482","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][34], byte[][55], byte[][13], 4, java.lang.StringBuilder)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:489","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][62], byte[][20], byte[][41], 4, java.lang.StringBuilder)"},"status":-1},{"failures":[4,5,6,7,8,9,10,11],"tindex":"2248bbb8-42af-11e5-b0d2-234dd76007fe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:275","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('F')"},"variableMap":{"code":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:73","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(org.apache.commons.codec.net.RFC1522Codec.java.lang.String)"},"status":-1},{"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25],"tindex":"2248bbb9-42af-11e5-b0d2-d3eec6f64385","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:108","type":"CtSwitchImpl","sourcecode":"switch (char[][0]) {\n    case 'K' :\n    case 'G' :\n    case 'P' :\n        if ((char[][1]) == 'N') {\n            java.lang.StringBuilder.append(char[], 1, ((char[].int) - 1));\n        } else {\n            java.lang.StringBuilder.append(char[]);\n        }\n        break;\n    case 'A' :\n        if ((char[][1]) == 'E') {\n            java.lang.StringBuilder.append(char[], 1, ((char[].int) - 1));\n        } else {\n            java.lang.StringBuilder.append(char[]);\n        }\n        break;\n    case 'W' :\n        if ((char[][1]) == 'R') {\n            java.lang.StringBuilder.append(char[], 1, ((char[].int) - 1));\n            break;\n        } \n        if ((char[][1]) == 'H') {\n            java.lang.StringBuilder.append(char[], 1, ((char[].int) - 1));\n            java.lang.StringBuilder.setCharAt(0, 'W');\n        } else {\n            java.lang.StringBuilder.append(char[]);\n        }\n        break;\n    case 'X' :\n        char[][0] = 'S';\n        java.lang.StringBuilder.append(char[]);\n        break;\n    default :\n        java.lang.StringBuilder.append(char[]);\n}"},"status":-1},{"failures":[26,27,28,29,30],"tindex":"2248bbba-42af-11e5-b0d2-e92191b50c95","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:170","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.Base32.this(false, byte)"},"variableMap":{"pad":"org.apache.commons.codec.binary.BaseNCodec.PAD_DEFAULT","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:230","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.Base32.this(int, byte[], false, org.apache.commons.codec.binary.BaseNCodec.byte)"},"status":-1},{"failures":[17],"tindex":"2248bbbb-42af-11e5-b0d2-0fe6b1cbac78","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:252","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('H')"},"status":-1},{"failures":[],"tindex":"2248e2cc-42af-11e5-b0d2-35203a0d616a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:360","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"pos":"pos","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"pos","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:463","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 1))) & (org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[],"tindex":"2248e2cd-42af-11e5-b0d2-41699065d71c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:329","type":"CtLocalVariableImpl","sourcecode":"char char"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:184","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((int >> 4) & 15), 16))"},"status":-2},{"failures":[31,32,33],"tindex":"2248e2ce-42af-11e5-b0d2-2506070c8f93","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:372","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'K')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:417","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"N\", \"KN\")"},"status":-1},{"failures":[34,35],"tindex":"2248e2cf-42af-11e5-b0d2-cbae90936b3a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.java.lang.String)) + \"]{2,}$\")))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + java.lang.String));\n} "},"variableMap":{"salt":"es1","org.apache.commons.codec.digest.B64.B64T":"es1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:116","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    if ((java.lang.String.charAt(int)) == (java.lang.String.charAt(int))) {\n        int++;\n    } \n}"},"status":-1},{"failures":[36,37,38,39,40,41,42],"tindex":"2248e2d0-42af-11e5-b0d2-97135d337a0e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:91","type":"CtAssignmentImpl","sourcecode":"int = int | org.apache.commons.codec.binary.Hex.(org.apache.commons.codec.binary.Hex.toDigit(char[][int], int))"},"status":-1},{"failures":[],"tindex":"2248e2d1-42af-11e5-b0d2-dd37b292122a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:133","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:156","type":"CtLocalVariableImpl","sourcecode":"final int int = byte[].int"},"status":-2},{"failures":[],"tindex":"2248e2d2-42af-11e5-b0d2-a9185e2565e6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:132","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:250","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(java.io.UnsupportedEncodingException.getMessage() , java.io.UnsupportedEncodingException)"},"status":-2},{"failures":[],"tindex":"224909e3-42af-11e5-b0d2-7d6993d24a37","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:296","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"224909e4-42af-11e5-b0d2-6da26152f4d8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:162","type":"CtIfImpl","sourcecode":"if (int > (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    final java.lang.String java.lang.String = java.lang.String.substring(0, org.apache.commons.codec.language.MatchRatingApproachEncoder.int);\n    final java.lang.String java.lang.String = java.lang.String.substring((int - (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)), int);\n    return java.lang.String + java.lang.String;\n} else {\n    return java.lang.String;\n}"},"status":-2},{"failures":[31,32,43,44,45,46,33,47,48],"tindex":"224909e5-42af-11e5-b0d2-b3529b614e6f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:138","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.substring(int, int)"},"variableMap":{"from":"length","text":"value","to":"start"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:919","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.substring(int, (int + int))"},"status":-1},{"failures":[],"tindex":"224909e6-42af-11e5-b0d2-afdc60bf2d47","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:700","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:178","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException((((\"Illegal hexadecimal character \" + char) + \" at index \") + int))"},"status":-2},{"failures":[31,32,33,47],"tindex":"224909e7-42af-11e5-b0d2-25f2f2e91b7b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:429","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K', 'J')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:108","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('P')"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
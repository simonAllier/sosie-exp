{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter":75,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":3,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":23,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":29,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":28,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":6,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":14,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":11,"org.apache.commons.codec.binary.Base64Test.testTriplets":44,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":43,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":5,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":92,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":35,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":69,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":8,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":61,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":80,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":85,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":99,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":54,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":48,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":55,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":97,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":59,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":56,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":57,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":33,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":94,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":15,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":96,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":65,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":12,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":72,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":2,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":26,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":79,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":47,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":30,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":70,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":27,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":4,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":86,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":46,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":21,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":39,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":87,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":18,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":24,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":82,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":76,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":32,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":64,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":17,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":81,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":58,"org.apache.commons.codec.binary.Base64Test.testBase64":78,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":42,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":95,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.binary.Base64Test.testUUID":50,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":31,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":62,"org.apache.commons.codec.binary.Base64Test.testSingletons":71,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":7,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":37,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":77,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":100,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":16,"org.apache.commons.codec.binary.Base64Test.testPairs":49,"org.apache.commons.codec.binary.Base64Test.testConstructors":52,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":36,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":83,"org.apache.commons.codec.binary.Base64Test.testCodec112":66,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":98,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":90,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":45,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":34,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":19,"org.apache.commons.codec.binary.Base64Test.testCodec68":73,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":20,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":41,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":9,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":67,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":84,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":88,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":68,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":91,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":25,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":22,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":38,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":101,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter":60,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":10,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":53,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":74,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":93,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":40,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":89,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":63,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":13,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":51},"transformations":[{"failures":[0,1,2,3],"tindex":"22ff9991-42dd-11e5-a4e6-bde5990a6469","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:306","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 3, \"CIO\", \"CIE\", \"CIA\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n}"},"variableMap":{"result":"result","this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:410","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'H') {\n    int = org.apache.commons.codec.language.DoubleMetaphone.handleGH(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int);\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'N') {\n    if (((int == 1) && org.apache.commons.codec.language.DoubleMetaphone.(isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, 0)))) && (!boolean)) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"KN\", \"N\");\n    } else if (((!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 2), 2, \"EY\"))) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) != 'Y')) && (!boolean)) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"N\", \"KN\");\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"KN\");\n    }\n    int = int + 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"LI\")) && (!boolean)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"KL\", \"L\");\n    int += 2;\n} else if ((int == 0) && ((org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'Y') || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K', 'J');\n    int += 2;\n} else if ((((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"ER\")) || (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'Y')) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\")))) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 1, \"E\", \"I\")))) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 3, \"RGY\", \"OGY\")))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K', 'J');\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"E\", \"I\", \"Y\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 4, \"AGGI\", \"OGGI\"))) {\n    if ((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 4, \"VAN \", \"VON \")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 3, \"SCH\"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"ET\"))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    } else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 3, \"IER\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'K');\n    }\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'G') {\n    int += 2;\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n} else {\n    int++;\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n}"},"status":-1},{"failures":[4],"tindex":"22ffe7b2-42dd-11e5-a4e6-97d792352bf2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:215","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'H'))) {\n    break;\n} "},"status":-1},{"failures":[],"tindex":"23000ec3-42dd-11e5-a4e6-c90bab13c32a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:173","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:92","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = org.apache.commons.codec.language.DoubleMetaphone.isSlavoGermanic(java.lang.String)"},"status":-2},{"failures":[],"tindex":"23000ec4-42dd-11e5-a4e6-7b34aab8b597","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:102","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('}')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:89","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('*')"},"status":-2},{"failures":[0,1,2,3,5],"tindex":"23000ec5-42dd-11e5-a4e6-01f51c80a2b9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:148","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'N' ? int + 2 : int + 1"},"status":-1},{"failures":[],"tindex":"23000ec6-42dd-11e5-a4e6-75f422d98825","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:505","type":"CtOperatorAssignmentImpl","sourcecode":"int += 256"},"variableMap":{"b":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:457","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-2},{"failures":[],"tindex":"230035d7-42dd-11e5-a4e6-37468e09637b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:247","type":"CtWhileImpl","sourcecode":"while (int > 0) {\n    if ((int & 1) != 0) {\n        java.security.MessageDigest.update(byte[], 0, int);\n    } else {\n        java.security.MessageDigest.update(byte[]);\n    }\n    int >>= 1;\n}"},"variableMap":{"blocksize":"org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE","altResult":"finalb","keyBytes":"finalb","ctx":"ctx1","cnt":"org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:261","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[], 0, org.apache.commons.codec.digest.Md5Crypt.int)"},"status":-2},{"failures":[0,1,2,3],"tindex":"230035d8-42dd-11e5-a4e6-c931e1423d8f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:365","type":"CtAssignmentImpl","sourcecode":"int = (int >>> 1) | (int << 27)"},"variableMap":{"c":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:179","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.handleX(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int)"},"status":-1},{"failures":[],"tindex":"230035d9-42dd-11e5-a4e6-f9d264f40aa6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:284","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"230035da-42dd-11e5-a4e6-2f3d0fa97ca2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:500","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha256(byte[]))"},"status":-2},{"failures":[],"tindex":"23005ceb-42dd-11e5-a4e6-07d2e7d3ac6d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (int == (org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"cp","len":"cp"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:343","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, byte[], int, (int - int))"},"status":-2},{"failures":[],"tindex":"23005cec-42dd-11e5-a4e6-f94c68c2b878","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:551","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'L') {\n    if (org.apache.commons.codec.language.DoubleMetaphone.conditionL0(java.lang.String, int)) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendPrimary('L');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('L');\n    }\n    int += 2;\n} else {\n    int++;\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('L');\n}"},"status":-2},{"failures":[],"tindex":"23005ced-42dd-11e5-a4e6-f9b9143e2ea0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:406","type":"CtIfImpl","sourcecode":"if (!(java.lang.Object instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(((((\"This method\\'s parameter was expected to be of the type \" + (java.lang.String.java.lang.String.getName())) + \". But actually it was of the type \") + (java.lang.Object.getClass().getName())) + \".\"));\n} "},"status":0},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91],"tindex":"230083fe-42dd-11e5-a4e6-71aa67fe4e43","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:312","type":"CtSwitchImpl","sourcecode":"switch (byte) {\n    case ' ' :\n    case '\\n' :\n    case '\\r' :\n    case '\\t' :\n        return true;\n    default :\n        return false;\n}"},"variableMap":{"byteToCheck":"element"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:500","type":"CtIfImpl","sourcecode":"if (((byte) == byte) || org.apache.commons.codec.binary.BaseNCodec.(isInAlphabet(byte))) {\n    return true;\n} "},"status":-1},{"failures":[],"tindex":"2302f4ff-42dd-11e5-a4e6-fd80ed719ddb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:470","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getSha256Digest(), java.io.InputStream)"},"status":-2},{"failures":[92,93],"tindex":"2302f500-42dd-11e5-a4e6-531252871a3b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:427","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"$\")"},"status":-1},{"failures":[],"tindex":"23031c11-42dd-11e5-a4e6-714b16a186fd","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:134","type":"CtIfImpl","sourcecode":"if (char == 'M') {\n    return org.apache.commons.codec.language.Nysiis.char[];\n} "},"variableMap":{"org.apache.commons.codec.language.Nysiis.CHARS_N":"org.apache.commons.codec.language.Nysiis.CHARS_NN","curr":"curr"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:139","type":"CtIfImpl","sourcecode":"if (char == 'K') {\n    if (char == 'N') {\n        return org.apache.commons.codec.language.Nysiis.char[];\n    } else {\n        return org.apache.commons.codec.language.Nysiis.char[];\n    }\n} "},"status":-2},{"failures":[],"tindex":"23034322-42dd-11e5-a4e6-79b7e802e0ca","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:487","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[],"tindex":"23034323-42dd-11e5-a4e6-e9bd0326d975","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:728","type":"CtOperatorAssignmentImpl","sourcecode":"int += 4"},"variableMap":{"index":"encodeSize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.int"},"status":-2},{"failures":[94,95,96,97,98,99,100,101],"tindex":"23036a34-42dd-11e5-a4e6-ddab853198b2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:90","type":"CtAssignmentImpl","sourcecode":"java.lang.String = (org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + java.lang.String"},"variableMap":{"salt":"txt","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:120","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"2\", \"\")"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"},"diffs":[{"transformation":"23005ced-42dd-11e5-a4e6-f9b9143e2ea0","diffs":[{"catchs":{},"throws":{"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeWithInvalidObject":["org.apache.commons.codec.language.ColognePhonetic.java.lang.Object encode(java.lang.Object)"]},"type":"exception"},{"branches":{"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeWithInvalidObject":["org.apache.commons.codec.EncoderException_org.apache.commons.codec.EncoderException(java.lang.String).b"]},"type":"branch"},{"nodes":{"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeWithInvalidObject":["org.apache.commons.codec.EncoderException.org.apache.commons.codec.EncoderException(java.lang.String)"]},"edges":{"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeWithInvalidObject":["org.apache.commons.codec.language.ColognePhonetic.java.lang.Object encode(java.lang.Object) -> org.apache.commons.codec.EncoderException.org.apache.commons.codec.EncoderException(java.lang.String)"]},"type":"graph"}]}]}
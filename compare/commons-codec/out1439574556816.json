{"failureDictionary":{"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":5,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":16,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":24,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":25,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":28,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":4,"org.apache.commons.codec.language.NysiisTest.testDropBy":8,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":17,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":15,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":20,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":31,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":13,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":30,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":29,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":10,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":12,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":32,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":21,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":22,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":3,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":1,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":18,"org.apache.commons.codec.language.NysiisTest.testRule7":7,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":2,"org.apache.commons.codec.language.NysiisTest.testRule6":6,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":19,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":23,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":14,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":27,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":11,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":26,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput":0,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":9},"transformations":[{"failures":[],"tindex":"c862201b-42ac-11e5-b2f3-67a6f60ebb14","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:191","type":"CtIfImpl","sourcecode":"if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE","minRating":"org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:189","type":"CtIfImpl","sourcecode":"if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"status":-2},{"failures":[],"tindex":"c862472c-42ac-11e5-b2f3-55f6b060f5a4","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtIfImpl","sourcecode":"if (java.lang.String.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    java.lang.String = java.lang.String.substring(0, ((java.lang.String.length()) - 1));\n} "},"variableMap":{"str":"line","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:413","type":"CtIfImpl","sourcecode":"if (java.lang.String.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    boolean = false;\n} "},"status":-2},{"failures":[],"tindex":"c862472d-42ac-11e5-b2f3-8b6eb4314dc4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:339","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[32]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:314","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[2]"},"status":-2},{"failures":[0],"tindex":"c862472e-42ac-11e5-b2f3-e9f3fabee947","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:204","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")"},"status":-1},{"failures":[],"tindex":"c862472f-42ac-11e5-b2f3-114b7369c5dc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getSha1Digest()"},"status":-2},{"failures":[],"tindex":"c8624730-42ac-11e5-b2f3-f758a704b3e2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    return false;\n} "},"variableMap":{"arrayOctet":"array"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:226","type":"CtReturnImpl","sourcecode":"return (byte[] == null) || ((byte[].int) == 0)"},"status":-2},{"failures":[1,2,3,4,5],"tindex":"c8626e41-42ac-11e5-b2f3-b717c09e54f3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:728","type":"CtOperatorAssignmentImpl","sourcecode":"int += 4"},"variableMap":{"index":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:307","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int, boolean, java.io.ByteArrayOutputStream)"},"status":-1},{"failures":[],"tindex":"c8626e42-42ac-11e5-b2f3-777ded0d470f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:91","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"g\", \"k\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:79","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"tio\", \"sio\")"},"status":1},{"failures":[6,7,8],"tindex":"c8626e43-42ac-11e5-b2f3-11267830e696","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:298","type":"CtAssignmentImpl","sourcecode":"char = java.lang.StringBuilder.charAt(((java.lang.StringBuilder.length()) - 1))"},"status":-1},{"failures":[9,10],"tindex":"c8626e44-42ac-11e5-b2f3-c32797850267","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:137","type":"CtAssignmentImpl","sourcecode":"int = '+'"},"variableMap":{"b":"d"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:344","type":"CtAssignmentImpl","sourcecode":"int = int[][0]"},"status":-1},{"failures":[],"tindex":"c8626e45-42ac-11e5-b2f3-fb4f92447041","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:114","type":"CtReturnImpl","sourcecode":"return this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType()"},"status":-2},{"failures":[11,12,13,14,15,16],"tindex":"c8626e46-42ac-11e5-b2f3-fd13b89e8dd6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((java.lang.String.length()) != 1) || ((java.lang.String.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + java.lang.String) + \" in \") + java.lang.String));\n} "},"variableMap":{"rawLine":"value","leftCharacter":"value","rightCharacter":"value","location":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:301","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CK\", \"CG\", \"CQ\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CI\", \"CE\", \"CY\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 3, \"CIO\", \"CIE\", \"CIA\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    }\n    int += 2;\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \" C\", \" Q\", \" G\")) {\n        int += 3;\n    } else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"C\", \"K\", \"Q\")) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"CE\", \"CI\")))) {\n        int += 2;\n    } else {\n        int++;\n    }\n}"},"status":-1},{"failures":[11,12,15,16],"tindex":"c8629557-42ac-11e5-b2f3-4319cfd7d6b9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:299","type":"CtAssignmentImpl","sourcecode":"int = 1"},"variableMap":{"pos":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:346","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"status":-1},{"failures":[17,18],"tindex":"c8629558-42ac-11e5-b2f3-7d3997095c72","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:635","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha512(byte[]).doFinal(byte[])"},"variableMap":{"valueToDigest":"key","this":"this","key":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:634","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha512(byte[]).doFinal(byte[]);\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalArgumentException(java.lang.IllegalStateException);\n}"},"status":-1},{"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32],"tindex":"c8629559-42ac-11e5-b2f3-11143bf7d048","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:304","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"variableMap":{"lineSeparator":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:300","type":"CtAssignmentImpl","sourcecode":"this.byte[] = new byte[byte[].int]"},"status":-1},{"failures":[2,3,4,5],"tindex":"c862955a-42ac-11e5-b2f3-355e971541c7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:224","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:238","type":"CtReturnImpl","sourcecode":"return (int == (org.apache.commons.codec.net.QuotedPrintableCodec.byte)) || (int == (org.apache.commons.codec.net.QuotedPrintableCodec.byte))"},"status":-1},{"failures":[],"tindex":"c862955b-42ac-11e5-b2f3-d3231add8df3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:339","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[32]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:226","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.body(int[], int, int)"},"status":-2},{"failures":[12],"tindex":"c862955c-42ac-11e5-b2f3-c5f07826cd27","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:214","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:834","type":"CtReturnImpl","sourcecode":"return true"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":18,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
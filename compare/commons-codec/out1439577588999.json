{"failureDictionary":{"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":44,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":32,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":38,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":12,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":22,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":36,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":3,"org.apache.commons.codec.net.URLCodecTest.testEncodeNull":0,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":5,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":6,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":29,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":28,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":39,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":45,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":1,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":16,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":40,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":43,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":23,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":13,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":27,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":11,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":17,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":15,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":18,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":10,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":31,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":25,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":26,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":14,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":24,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":9,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":2,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":8,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":35,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":34,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":41,"org.apache.commons.codec.language.SoundexTest.testDifference":46,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":20,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":30,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":47,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":19,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":21,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":33,"org.apache.commons.codec.language.MetaphoneTest.testTCH":42,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":7,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":37,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":4},"transformations":[{"failures":[],"tindex":"d7b3ec14-42b3-11e5-b62d-2d86087ec0d0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:141","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.util.Scanner.nextLine()"},"variableMap":{"scanner":"lsScanner"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:182","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.util.Scanner.nextLine().trim()"},"status":1},{"failures":[0],"tindex":"d7b41325-42b3-11e5-b62d-4b57e2d9e3cf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:122","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    return null;\n} "},"status":-1},{"failures":[],"tindex":"d7b41326-42b3-11e5-b62d-d197df7b25a3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:66","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"mb$\", \"m2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:80","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"tia\", \"sia\")"},"status":1},{"failures":[],"tindex":"d7b41327-42b3-11e5-b62d-f12a39322bb6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:321","type":"CtLocalVariableImpl","sourcecode":"final int int = byte"},"variableMap":{"b":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:325","type":"CtLocalVariableImpl","sourcecode":"int int = byte"},"status":-2},{"failures":[],"tindex":"d7b41328-42b3-11e5-b62d-777d758f2053","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.Charsets:74","type":"CtReturnImpl","sourcecode":"return java.nio.charset.Charset == null ? java.nio.charset.Charset.defaultCharset() : java.nio.charset.Charset"},"variableMap":{"charset":"charset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:548","type":"CtReturnImpl","sourcecode":"return this.java.nio.charset.Charset"},"status":0},{"failures":[1],"tindex":"d7b41329-42b3-11e5-b62d-394b2c76fc4c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:521","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int = 0"},"status":-1},{"failures":[2,3,4,5,6],"tindex":"d7b4132a-42b3-11e5-b62d-73371c300d44","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:195","type":"CtIfImpl","sourcecode":"if (char != 0) {\n    java.lang.StringBuilder.append(char);\n} "},"status":-1},{"failures":[],"tindex":"d7b4132b-42b3-11e5-b62d-add7d1960387","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:242","type":"CtOperatorAssignmentImpl","sourcecode":"int >>>= 1"},"variableMap":{"u":"maxCodeLen"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:428","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"status":-2},{"failures":[7,8,9,10,11,12,13,14],"tindex":"d7b43a3c-42b3-11e5-b62d-9d11ea9555f3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(byte[], ((byte)(0)))"},"variableMap":{"finalb":"saltBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:200","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[])"},"status":-1},{"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"tindex":"d7b43a3d-42b3-11e5-b62d-537b0afe611e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:398","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.parsePhoneme(java.lang.String)"},"variableMap":{"ph":"ph","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:382","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(\"(\")) {\n    if (!(java.lang.String.endsWith(\")\"))) {\n        throw new java.lang.IllegalArgumentException(\"Phoneme starts with \\'(\\' so must end with \\')\\'\");\n    } \n    final java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme>();\n    final java.lang.String java.lang.String = java.lang.String.substring(1, ((java.lang.String.length()) - 1));\n    for (final java.lang.String java.lang.String : java.lang.String.split(\"[|]\")) {\n        java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme>.add(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.parsePhoneme(java.lang.String));\n    }\n    if ((java.lang.String.startsWith(\"|\")) || (java.lang.String.endsWith(\"|\"))) {\n        java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme>.add(new org.apache.commons.codec.language.bm.Rule.Phoneme(\"\" , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet));\n    } \n    return new org.apache.commons.codec.language.bm.Rule.PhonemeList(java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme>);\n} else {\n    return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.parsePhoneme(java.lang.String);\n}"},"status":-1},{"failures":[],"tindex":"d7b43a3e-42b3-11e5-b62d-9b1ac65bfd60","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with \\'(\\' so must end with \\')\\'\");\n} "},"variableMap":{"ph":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:179","type":"CtTryImpl","sourcecode":"try {\n    boolean boolean = false;\n    while (java.util.Scanner.hasNextLine()) {\n        final java.lang.String java.lang.String = java.util.Scanner.nextLine().trim();\n        if (boolean) {\n            if (java.lang.String.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                boolean = false;\n            } \n        } else {\n            if (java.lang.String.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                boolean = true;\n            } else if ((java.lang.String.length()) > 0) {\n                java.util.Set<java.lang.String>.add(java.lang.String);\n            } \n        }\n    }\n} finally {\n    java.util.Scanner.close();\n}"},"status":-2},{"failures":[33,34,35,36,37,38,39],"tindex":"d7b43a3f-42b3-11e5-b62d-5313fd591e13","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:348","type":"CtAssignmentImpl","sourcecode":"char = '0'"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:389","type":"CtAssignmentImpl","sourcecode":"char = '6'"},"status":-1},{"failures":[40],"tindex":"d7b43a40-42b3-11e5-b62d-bf4e7aa76a47","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:284","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SH\")) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SIO\"))) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SIA\"))) {\n    java.lang.StringBuilder.append('X');\n} else {\n    java.lang.StringBuilder.append('S');\n}"},"variableMap":{"code":"local","this":"this","local":"local","n":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:265","type":"CtIfImpl","sourcecode":"if (!org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'C'))) {\n    java.lang.StringBuilder.append(char);\n} "},"status":-1},{"failures":[41],"tindex":"d7b46151-42b3-11e5-b62d-d9c1764bb176","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:250","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.Math.abs(((java.lang.String.length()) + (java.lang.String.length())))"},"variableMap":{"name2":"text","name1":"text"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:132","type":"CtLocalVariableImpl","sourcecode":"final int int = (java.lang.String.length()) - 2"},"status":-1},{"failures":[],"tindex":"d7b46152-42b3-11e5-b62d-a5c0602e4045","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:531","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.decode(((byte[])(java.lang.Object)))"},"variableMap":{"obj":"obj","this":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:530","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof byte[]) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.decode(((byte[])(java.lang.Object)));\n} else if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.decode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be quoted-printable decoded\"));\n}"},"status":-2},{"failures":[],"tindex":"d7b46153-42b3-11e5-b62d-5957294a439f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (int == (org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"length","len":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:496","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, byte[], org.apache.commons.codec.binary.BaseNCodec.Context.int, byte[].int)"},"status":-2},{"failures":[7,8,9,10,11,12,13,14],"tindex":"d7b46154-42b3-11e5-b62d-e7bfd1ded762","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:326","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    int = 256 + int;\n} "},"variableMap":{"b":"rounds"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:356","type":"CtForImpl","sourcecode":"for (int int = 0 ; int <= (int - 1) ; int++) {\n    java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(java.lang.String);\n    if ((int & 1) != 0) {\n        java.security.MessageDigest.update(byte[], 0, int);\n    } else {\n        java.security.MessageDigest.update(byte[], 0, int);\n    }\n    if ((int % 3) != 0) {\n        java.security.MessageDigest.update(byte[], 0, int);\n    } \n    if ((int % 7) != 0) {\n        java.security.MessageDigest.update(byte[], 0, int);\n    } \n    if ((int & 1) != 0) {\n        java.security.MessageDigest.update(byte[], 0, int);\n    } else {\n        java.security.MessageDigest.update(byte[], 0, int);\n    }\n    byte[] = java.security.MessageDigest.digest();\n}"},"status":-1},{"failures":[42,43,44],"tindex":"d7b46155-42b3-11e5-b62d-2b7e71226d23","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:134","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(char[])"},"status":-1},{"failures":[2,45,46],"tindex":"d7b46156-42b3-11e5-b62d-a7ff92ed614a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:188","type":"CtReturnImpl","sourcecode":"return 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:112","type":"CtReturnImpl","sourcecode":"return 0"},"status":-1},{"failures":[47],"tindex":"d7b48867-42b3-11e5-b62d-d369a469b9e8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:412","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = \"d\" + java.lang.String"},"variableMap":{"remainder":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:333","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = new java.lang.String(char[]).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"},"diffs":[{"transformation":"d7b3ec14-42b3-11e5-b62d-2d86087ec0d0","diffs":[{"variables":{"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":["org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Languages$LanguageSet guessLanguages(java.lang.String)_rules"]},"type":"variable"}]}]}
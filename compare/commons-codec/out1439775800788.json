{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":7,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":30,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":40,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":45,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":36,"org.apache.commons.codec.binary.Base64Test.testBase64":35,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":41,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":5,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":14,"org.apache.commons.codec.binary.Base64Test.testTriplets":18,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":9,"org.apache.commons.codec.binary.Base64Test.testUUID":20,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":17,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":29,"org.apache.commons.codec.binary.Base64Test.testSingletons":32,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":39,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":3,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":34,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":50,"org.apache.commons.codec.binary.Base64Test.testPairs":19,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":28,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":37,"org.apache.commons.codec.binary.Base64Test.testCodec112":31,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":49,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":54,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":23,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":24,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":48,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":27,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":12,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":25,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":26,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean":2,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":52,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":15,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":53,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":6,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":42,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":44,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":46,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":16,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":47,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":38,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":51,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero":11,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":22,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":33,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":13,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":10,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":43,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":8,"org.apache.commons.codec.binary.BaseNCodecTest.testIsWhiteSpace":0,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString":1,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":4,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":21},"transformations":[{"failures":[],"tindex":"572488ed-4481-11e5-8f17-a7c04dbc5952","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:289","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QCodec.encode(((java.lang.String)(java.lang.Object)))"},"variableMap":{"obj":"ascii","this":"ascii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:123","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(java.lang.Object)))"},"status":-2},{"failures":[],"tindex":"5724affe-4481-11e5-8f17-6560cdb0be3b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtIfImpl","sourcecode":"if ((java.lang.String != null) && (!(java.lang.String.startsWith(org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n    java.lang.String = (org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + java.lang.String;\n} "},"variableMap":{"salt":"org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:260","type":"CtIfImpl","sourcecode":"if (boolean) {\n    if (java.lang.String.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n        boolean = false;\n    } \n    continue;\n} "},"status":-2},{"failures":[0,1,2,3,4],"tindex":"5724d70f-4481-11e5-8f17-6d88635065ee","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:312","type":"CtSwitchImpl","sourcecode":"switch (byte) {\n    case ' ' :\n    case '\\n' :\n    case '\\r' :\n    case '\\t' :\n        return true;\n    default :\n        return false;\n}"},"status":-1},{"failures":[5,6,7,8,9],"tindex":"5724d710-4481-11e5-8f17-a11058319b0a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:589","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:313","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K')"},"status":-1},{"failures":[10,11],"tindex":"5724d711-4481-11e5-8f17-6dacb0d0446b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:124","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"tindex":"5724fd22-4481-11e5-8f17-475f94024680","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:670","type":"CtIfImpl","sourcecode":"if (long > int) {\n    throw new java.lang.IllegalArgumentException((((\"Input array too big, the output array would be bigger (\" + long) + \") than the specified maximum size of \") + int));\n} "},"variableMap":{"len":"len","maxResultSize":"lineLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:519","type":"CtIfImpl","sourcecode":"if ((int) > 0) {\n    long += (((long + (int)) - 1) / (int)) * (int);\n} "},"status":-1},{"failures":[],"tindex":"5724fd23-4481-11e5-8f17-dfca6f703176","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:120","type":"CtInvocationImpl","sourcecode":"java.io.OutputStream.flush()"},"variableMap":{"out":"out"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:150","type":"CtInvocationImpl","sourcecode":"java.io.OutputStream.close()"},"status":1},{"failures":[45,46,47],"tindex":"5724fd24-4481-11e5-8f17-03a4d6404776","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:472","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][3], byte[][24], byte[][45], 4, java.lang.StringBuilder)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:479","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][31], byte[][52], byte[][10], 4, java.lang.StringBuilder)"},"status":-1},{"failures":[48,49,50,51],"tindex":"57252435-4481-11e5-8f17-f59434269aff","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:72","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"cy\", \"sy\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:101","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"p+\", \"P\")"},"status":-1},{"failures":[],"tindex":"57252436-4481-11e5-8f17-b7b4cc4e4d5b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"status":-2},{"failures":[],"tindex":"57252437-4481-11e5-8f17-1790f0b34705","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:310","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null) {\n    return null;\n} else if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.QCodec.decode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be decoded using Q codec\"));\n}"},"variableMap":{"obj":"obj","this":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:502","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null) {\n    return null;\n} else if (java.lang.Object instanceof byte[]) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.encode(((byte[])(java.lang.Object)));\n} else if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.encode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n}"},"status":-2},{"failures":[23,24],"tindex":"57252438-4481-11e5-8f17-4558574bb12a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:362","type":"CtAssignmentImpl","sourcecode":"int = (int >>> 2) | (int << 26)"},"variableMap":{"c":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:764","type":"CtUnaryOperatorImpl","sourcecode":"int--"},"status":-1},{"failures":[],"tindex":"57254b49-4481-11e5-8f17-7b888b28b9cf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:78","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"dg\", \"2g\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:112","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"j\", \"y\")"},"status":1},{"failures":[],"tindex":"57254b4a-4481-11e5-8f17-5b8c26411a1f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:192","type":"CtReturnImpl","sourcecode":"return this.int"},"variableMap":{"i":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:297","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CC\")) && (!((int == 1) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, 0)) == 'M')))) {\n    return org.apache.commons.codec.language.DoubleMetaphone.handleCC(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int);\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CK\", \"CG\", \"CQ\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CI\", \"CE\", \"CY\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 3, \"CIO\", \"CIE\", \"CIA\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    }\n    int += 2;\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \" C\", \" Q\", \" G\")) {\n        int += 3;\n    } else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"C\", \"K\", \"Q\")) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"CE\", \"CI\")))) {\n        int += 2;\n    } else {\n        int++;\n    }\n}"},"status":1},{"failures":[],"tindex":"5725725b-4481-11e5-8f17-bf37c2be326e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((int & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:139","type":"CtInvocationImpl","sourcecode":"java.io.ByteArrayOutputStream.write(int)"},"status":-2},{"failures":[],"tindex":"5725725c-4481-11e5-8f17-0f9a0e91eb18","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:227","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[9]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:501","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-2},{"failures":[],"tindex":"5725725d-4481-11e5-8f17-7b4af79bbbc6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:364","type":"CtIfImpl","sourcecode":"if ((byte[]) == (org.apache.commons.codec.binary.Base64.byte[])) {\n    byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n} "},"variableMap":{"encodeTable":"encodeTable","pad":"pad","org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE":"buffer","pos":"modulus","context":"context","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:447","type":"CtSwitchImpl","sourcecode":"switch (org.apache.commons.codec.binary.BaseNCodec.Context.int) {\n    case 0 :\n        break;\n    case 1 :\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 3))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) << 2))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        break;\n    case 2 :\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 11))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 6))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 1))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) << 4))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        break;\n    case 3 :\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 19))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 14))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 9))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 4))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) << 1))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        break;\n    case 4 :\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 27))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 22))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 17))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 12))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 7))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 2))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) << 3))) & (org.apache.commons.codec.binary.Base32.int))];\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte;\n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (org.apache.commons.codec.binary.BaseNCodec.Context.int)));\n}"},"status":-2},{"failures":[52,53,54,50,51],"tindex":"5725c07e-4481-11e5-8f17-65627cdfb782","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:118","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"3\", \"\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:108","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"w$\", \"3\")"},"status":-1},{"failures":[],"tindex":"5725c07f-4481-11e5-8f17-0b9cd6d18997","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.B64:73","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[],"tindex":"5725c080-4481-11e5-8f17-05e91536f774","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:214","type":"CtLocalVariableImpl","sourcecode":"final int int = (org.apache.commons.codec.digest.UnixCrypt.int[][char]) << 4"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
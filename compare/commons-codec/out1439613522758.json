{"failureDictionary":{"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":26,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":49,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":42,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":16,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":22,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":57,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":28,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":67,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":46,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":66,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":40,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":71,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":68,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":48,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":17,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":52,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":11,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":24,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":9,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":51,"org.apache.commons.codec.binary.Base64Test.testRfc2045Section2Dot1CrLfDefinition":56,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":59,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":62,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":1,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":2,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":60,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":34,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":3,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":13,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":44,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":21,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":37,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":35,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":39,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":61,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":6,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":18,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":53,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":5,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":58,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":7,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":14,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":27,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":55,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":65,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":20,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":41,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":63,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":69,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":50,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":43,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":15,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":25,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":10,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":32,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":64,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":4,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":19,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":38,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":47,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":31,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":70,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":33,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":29,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0":12,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":45,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":8,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":0,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":23,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":30,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":36},"transformations":[{"failures":[],"tindex":"81e4b75a-4307-11e5-b512-c3273ba60e62","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:286","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null) {\n    return null;\n} else if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.QCodec.encode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be encoded using Q codec\"));\n}"},"variableMap":{"obj":"value","this":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:201","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.BCodec.encode(((java.lang.String)(java.lang.Object)))"},"status":-2},{"failures":[0,1],"tindex":"81e4de6b-4307-11e5-b512-43a1af06b1ef","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:296","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.md5(byte[]))"},"status":-1},{"failures":[2,3,4,5,6],"tindex":"81e4de6c-4307-11e5-b512-97a92d87fc54","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:670","type":"CtReturnImpl","sourcecode":"return int + 3"},"variableMap":{"index":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:206","type":"CtReturnImpl","sourcecode":"return int"},"status":-1},{"failures":[7,8,9],"tindex":"81e5057d-4307-11e5-b512-5f05817e7daf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:306","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 3, \"CIO\", \"CIE\", \"CIA\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n}"},"status":-1},{"failures":[],"tindex":"81e5057e-4307-11e5-b512-25eeaa28df68","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:329","type":"CtLocalVariableImpl","sourcecode":"char char"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:314","type":"CtLocalVariableImpl","sourcecode":"final char char = org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.java.lang.String.charAt(0)"},"status":-2},{"failures":[],"tindex":"81e5057f-4307-11e5-b512-ad06ee8d49fd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:61","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^tough\", \"tou2f\")"},"status":0},{"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"tindex":"81e50580-4307-11e5-b512-a5c2dec36394","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:411","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.substring(2)"},"variableMap":{"input":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:333","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = new java.lang.String(char[]).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-1},{"failures":[48,7,49,8,9],"tindex":"81e50581-4307-11e5-b512-2b9e28cb1659","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:358","type":"CtOperatorAssignmentImpl","sourcecode":"int &= 268435455"},"variableMap":{"c":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:303","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"status":-1},{"failures":[50,51,52,53,54,55,56,57,58,59,60,61],"tindex":"81e50582-4307-11e5-b512-439ba6c1472c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(byte[], ((byte)(0)))"},"variableMap":{"finalb":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad(byte[])) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[]);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + java.lang.String) + \"]\"));\n} "},"status":-1},{"failures":[],"tindex":"81e50583-4307-11e5-b512-35ac9c38bf22","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:384","type":"CtIfImpl","sourcecode":"if (char == 'R') {\n    char = '7';\n} else if (char == 'L') {\n    char = '5';\n} else if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"variableMap":{"code":"last2Char","chr":"last2Char"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:304","type":"CtIfImpl","sourcecode":"if ((char == 'A') && (char == 'Y')) {\n    java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 2));\n} "},"status":-2},{"failures":[],"tindex":"81e52c94-4307-11e5-b512-c7e0e03b0c29","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:129","type":"CtLocalVariableImpl","sourcecode":"final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream()"},"status":-2},{"failures":[],"tindex":"81e52c95-4307-11e5-b512-77c18cf4a81a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:706","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.binary.Base64().decode(byte[])"},"variableMap":{"base64Data":"raw"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:83","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byte[])"},"status":-2},{"failures":[48,7,49,8,9],"tindex":"81e52c96-4307-11e5-b512-79740be95527","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:363","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.conditionCH1(java.lang.String, int)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    return int + 2;\n} else {\n    if (int > 0) {\n        if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 2, \"MC\")) {\n            org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n        } else {\n            org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'K');\n        }\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n    }\n    return int + 2;\n}"},"variableMap":{"result":"result","this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:286","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CH\")) {\n    int = org.apache.commons.codec.language.DoubleMetaphone.handleCH(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int);\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CZ\")) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 4, \"WICZ\")))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 3, \"CIA\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n    int += 3;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CC\")) && (!((int == 1) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, 0)) == 'M')))) {\n    return org.apache.commons.codec.language.DoubleMetaphone.handleCC(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int);\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CK\", \"CG\", \"CQ\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CI\", \"CE\", \"CY\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 3, \"CIO\", \"CIE\", \"CIA\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    }\n    int += 2;\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \" C\", \" Q\", \" G\")) {\n        int += 3;\n    } else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"C\", \"K\", \"Q\")) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"CE\", \"CI\")))) {\n        int += 2;\n    } else {\n        int++;\n    }\n}"},"status":-1},{"failures":[7,8,9],"tindex":"81e553a7-4307-11e5-b512-916988b4b9fa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:300","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.DoubleMetaphone.handleCC(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int)"},"variableMap":{"result":"result","this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:297","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CC\")) && (!((int == 1) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, 0)) == 'M')))) {\n    return org.apache.commons.codec.language.DoubleMetaphone.handleCC(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int);\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CK\", \"CG\", \"CQ\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CI\", \"CE\", \"CY\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 3, \"CIO\", \"CIE\", \"CIA\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    }\n    int += 2;\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \" C\", \" Q\", \" G\")) {\n        int += 3;\n    } else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"C\", \"K\", \"Q\")) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"CE\", \"CI\")))) {\n        int += 2;\n    } else {\n        int++;\n    }\n}"},"status":-1},{"failures":[62],"tindex":"81e553a8-4307-11e5-b512-23b998afb5f7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:894","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[63,64,65,66,67,68,69,70,71],"tindex":"81e553a9-4307-11e5-b512-1ddb8e57824f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    java.lang.String = java.lang.String.substring(1);\n} "},"status":-1},{"failures":[],"tindex":"81e553aa-4307-11e5-b512-1d48e4b95e95","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:336","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.length()"},"status":-2},{"failures":[],"tindex":"81e553ab-4307-11e5-b512-3d681af62e2a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:465","type":"CtIfImpl","sourcecode":"if ((!org.apache.commons.codec.binary.BaseNCodec.(isInAlphabet(byte[][int]))) && ((!boolean) || (((byte[][int]) != (byte)) && (!org.apache.commons.codec.binary.BaseNCodec.(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte[][int])))))) {\n    return false;\n} "},"variableMap":{"pad":"pad","arrayOctet":"arrayOctet","allowWSPad":"allowWSPad","this":"this","i":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:464","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (byte[].int) ; int++) {\n    if ((!org.apache.commons.codec.binary.BaseNCodec.(isInAlphabet(byte[][int]))) && ((!boolean) || (((byte[][int]) != (byte)) && (!org.apache.commons.codec.binary.BaseNCodec.(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte[][int])))))) {\n        return false;\n    } \n}"},"status":-2},{"failures":[],"tindex":"81e57abc-4307-11e5-b512-cdd3a4f58d2b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:136","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:134","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-2},{"failures":[],"tindex":"81e57abd-4307-11e5-b512-e998821f95a1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:284","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.byte[]"},"variableMap":{"encodeTable":"pArray","org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE":"pArray"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:721","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.decodeBase64(byte[])"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
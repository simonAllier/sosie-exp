{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":43,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":53,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":4,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":14,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":32,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":21,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":31,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":57,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":91,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":49,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":88,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":20,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":46,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":99,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":85,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":54,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":72,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":7,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":67,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":62,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":68,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":71,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":69,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":17,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":70,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":5,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":6,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":92,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":74,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":19,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":89,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":2,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":40,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":41,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":30,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":48,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":22,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":34,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":97,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":27,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":83,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":29,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":37,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":42,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":84,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":52,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":3,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":93,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":16,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":24,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":80,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":47,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":36,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":33,"org.apache.commons.codec.binary.Base64Test.testBase64":79,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":13,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.binary.Base64Test.testUUID":64,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":73,"org.apache.commons.codec.binary.Base64Test.testSingletons":77,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":98,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":11,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":101,"org.apache.commons.codec.binary.Base64Test.testPairs":63,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":8,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":100,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":81,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":9,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":12,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":50,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":60,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":61,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":94,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":55,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":39,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":44,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":95,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":18,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":38,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":86,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":75,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":82,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":58,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":51,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":76,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":45,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":28,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":96,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":23,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":102,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":26,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":87,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":66,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":78,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":25,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":56,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":35,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":15,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":10,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":59,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":65,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":90,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":103},"transformations":[{"failures":[],"tindex":"9849ad7a-4378-11e5-96ea-334f77047d26","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:103","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"w\", \"2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:78","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"c\", \"k\")"},"status":1},{"failures":[0,1,2],"tindex":"9849d48b-4378-11e5-96ea-b3f9df07d035","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:245","type":"CtAssignmentImpl","sourcecode":"int = 128"},"variableMap":{"u":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:287","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.handleCH(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int)"},"status":-1},{"failures":[3,4,5,6,7,8,9,10,11,12,13,14],"tindex":"9849d48c-4378-11e5-96ea-d1f5fdc12f50","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:371","type":"CtIfImpl","sourcecode":"if ((int != (org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (int != (org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n    java.io.ByteArrayOutputStream.write(int);\n} "},"status":-1},{"failures":[],"tindex":"9849d48d-4378-11e5-96ea-7786e5347a7a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:191","type":"CtIfImpl","sourcecode":"if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"pos","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"pos","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH","minRating":"org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"pos","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"pos","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:312","type":"CtIfImpl","sourcecode":"if (int > ((org.apache.commons.codec.net.QuotedPrintableCodec.int) - 2)) {\n    java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n    java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n    java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n} "},"status":-2},{"failures":[],"tindex":"9849fb9e-4378-11e5-96ea-5d069a19da22","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:387","type":"CtLocalVariableImpl","sourcecode":"final java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme>()"},"status":-2},{"failures":[],"tindex":"9849fb9f-4378-11e5-96ea-bd2c47392aeb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:89","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"3gh3\", \"3kh3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:100","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"wy\", \"Wy\")"},"status":1},{"failures":[15,16,17,18,19],"tindex":"9849fba0-4378-11e5-96ea-5316c54aa27b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:169","type":"CtInvocationImpl","sourcecode":"java.io.ByteArrayOutputStream.write(' ')"},"variableMap":{"buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:141","type":"CtInvocationImpl","sourcecode":"java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.URLCodec.byte)"},"status":-1},{"failures":[],"tindex":"9849fba1-4378-11e5-96ea-bf62fe61b6ac","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:94","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set(']')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:69","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('$')"},"status":-2},{"failures":[20,21,22,23,24,25,26,27],"tindex":"9849fba2-4378-11e5-96ea-bf5ef5cc734c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(byte[], ((byte)(0)))"},"variableMap":{"finalb":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:194","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[])"},"status":-1},{"failures":[],"tindex":"9849fba3-4378-11e5-96ea-91876a309ba9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:160","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.String.length()"},"variableMap":{"name":"pattern"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:703","type":"CtLocalVariableImpl","sourcecode":"final int int = this.java.lang.String.length()"},"status":-2},{"failures":[28,29,30,31,32,33,34,35,36],"tindex":"9849fba4-4378-11e5-96ea-8509e0d24f4b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:386","type":"CtIfImpl","sourcecode":"if (char == 'L') {\n    char = '5';\n} else if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"variableMap":{"code":"lastChar","chr":"ch"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:514","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule : java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>) {\n    if (org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.matches(java.lang.String)) {\n        if (boolean) {\n            java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.clear();\n        } \n        final java.lang.String[] java.lang.String[] = org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.getReplacements(java.lang.String, (char == '\u0000'));\n        final boolean boolean = ((java.lang.String[].int) > 1) && boolean;\n        for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>) {\n            for (final java.lang.String java.lang.String : java.lang.String[]) {\n                final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = boolean ? org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.createBranch() : org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch;\n                final boolean boolean = ((char == 'm') && (char == 'n')) || ((char == 'n') && (char == 'm'));\n                org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.processNextReplacement(java.lang.String, boolean);\n                if (boolean) {\n                    java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.add(org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch);\n                } else {\n                    break;\n                }\n            }\n        }\n        if (boolean) {\n            java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.clear();\n            java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.addAll(java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>);\n        } \n        int += (org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.getPatternLength()) - 1;\n        break;\n    } \n}"},"status":-1},{"failures":[37,38,39,40,41],"tindex":"984a22b5-4378-11e5-96ea-89bd54874fc1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:388","type":"CtIfImpl","sourcecode":"if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"variableMap":{"code":"current","chr":"current"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:193","type":"CtIfImpl","sourcecode":"if (char == char) {\n    continue;\n} else if (char != 0) {\n    java.lang.StringBuilder.append(char);\n} "},"status":-1},{"failures":[],"tindex":"984a22b6-4378-11e5-96ea-538701e91026","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:96","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('`')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:75","type":"CtForImpl","sourcecode":"for (int int = 'a' ; int <= 'z' ; int++) {\n    org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(int);\n}"},"status":-2},{"failures":[0,1,42,2,43],"tindex":"984a22b7-4378-11e5-96ea-a757b6a4d094","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:99","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:460","type":"CtReturnImpl","sourcecode":"return int"},"status":-1},{"failures":[],"tindex":"984a22b8-4378-11e5-96ea-3578d4259c4e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:340","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.decode(((java.lang.String)(java.lang.Object)))"},"variableMap":{"obj":"obj","this":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:528","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null) {\n    return null;\n} else if (java.lang.Object instanceof byte[]) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.decode(((byte[])(java.lang.Object)));\n} else if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.decode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be quoted-printable decoded\"));\n}"},"status":-2},{"failures":[44,45,46,47,48,49,50,51,52,53,54,55,56,57],"tindex":"984a22b9-4378-11e5-96ea-53b1fcdcdd0c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:207","type":"CtAssignmentImpl","sourcecode":"this.boolean = false"},"variableMap":{"found":"matches"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:346","type":"CtAssignmentImpl","sourcecode":"boolean = (java.lang.StringBuilder.charAt((int - 1))) == char"},"status":-1},{"failures":[58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],"tindex":"984a49ca-4378-11e5-96ea-1bade732bdae","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:445","type":"CtIfImpl","sourcecode":"if (int >= 0) {\n    org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) + 1) % (org.apache.commons.codec.binary.Base64.int);\n    org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) << (org.apache.commons.codec.binary.Base64.int)) + int;\n    if ((org.apache.commons.codec.binary.BaseNCodec.Context.int) == 0) {\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.int) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n    } \n} "},"status":-1},{"failures":[],"tindex":"984a49cb-4378-11e5-96ea-ff17f1bf7424","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:481","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 27))) & (org.apache.commons.codec.binary.Base32.int))]"},"variableMap":{"encodeTable":"buffer","pos":"pos","org.apache.commons.codec.binary.Base32.MASK_5BITS":"pos","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:392","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2},{"failures":[],"tindex":"984a49cc-4378-11e5-96ea-47886db85c0c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:67","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('\\\"')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:78","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('-')"},"status":-2},{"failures":[0,1,2,43,103],"tindex":"984a49cd-4378-11e5-96ea-35ac3d7f90ee","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:238","type":"CtOperatorAssignmentImpl","sourcecode":"int <<= 1"},"variableMap":{"c":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:109","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'B' ? int + 2 : int + 1"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":4,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":27,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":50,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":59,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":40,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":11,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":20,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":48,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":17,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":43,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":55,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":15,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":47,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":44,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":24,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":23,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":6,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":30,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":42,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":35,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":37,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":60,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":13,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":18,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":2,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":46,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":26,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":57,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":14,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":41,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":31,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":36,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":39,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":33,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":10,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":45,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":53,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":56,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":54,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":28,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":21,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":29,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":22,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":19,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":1,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":38,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":8,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":16,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":25,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":49,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":58,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":51,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0":7,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":3,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":34,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":9,"org.apache.commons.codec.language.MetaphoneTest.testTCH":52,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":32,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":12,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":0,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":5},"transformations":[{"failures":[0],"tindex":"fb5c44bb-43ce-11e5-9ee1-f7ce47663384","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:128","type":"CtReturnImpl","sourcecode":"return java.lang.String.substring(0, org.apache.commons.codec.language.Caverphone2.java.lang.String.length())"},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"data","txt":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:720","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha512(java.lang.String))"},"status":-1},{"failures":[1,2,3,4],"tindex":"fb5c6bcc-43ce-11e5-9ee1-cd260a44d17d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:83","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"b\", \"p\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:88","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"[aeiou]\", \"3\")"},"status":-1},{"failures":[5,6],"tindex":"fb5c92dd-43ce-11e5-9ee1-fbbcd65b48c4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:230","type":"CtAssignmentImpl","sourcecode":"byte[][8] = 0"},"variableMap":{"b":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:400","type":"CtAssignmentImpl","sourcecode":"byte[][int++] = ((byte)((int >>> 8) & 255))"},"status":-1},{"failures":[7,8,9,10,11,12,13,14,15],"tindex":"fb5c92de-43ce-11e5-9ee1-7319168be0bd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:283","type":"CtAssignmentImpl","sourcecode":"char[][(int - int)] = '1'"},"variableMap":{"jj":"name1Size","l_ascii":"name1Char","bits":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:326","type":"CtAssignmentImpl","sourcecode":"char[][(int - int)] = ' '"},"status":-1},{"failures":[16,17,18,19],"tindex":"fb5c92df-43ce-11e5-9ee1-89fc8258c278","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Crypt:67","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[])"},"variableMap":{"keyBytes":"binaryData"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:569","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.encodeBase64(byte[], false))"},"status":-1},{"failures":[20,21,22],"tindex":"fb5cb8f0-43ce-11e5-9ee1-83b48983e82d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:457","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][0], byte[][10], byte[][20], 4, java.lang.StringBuilder)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:469","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][0], byte[][21], byte[][42], 4, java.lang.StringBuilder)"},"status":-1},{"failures":[],"tindex":"fb5cb8f1-43ce-11e5-9ee1-87e8e91369eb","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:451","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.int) & (org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"ibitWorkArea":"pos","pos":"pos","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"pos","context":"context","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:478","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte"},"status":-2},{"failures":[],"tindex":"fb5cb8f2-43ce-11e5-9ee1-2166420bd60f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:165","type":"CtReturnImpl","sourcecode":"return byte[]"},"variableMap":{"data":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":0},{"failures":[23,24,25,26,27,28,29,30,31,32],"tindex":"fb5cb8f3-43ce-11e5-9ee1-cf89c4fdf15c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad(byte[])) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[]);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + java.lang.String) + \"]\"));\n} "},"variableMap":{"this":"this","lineSeparator":"decodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:347","type":"CtIfImpl","sourcecode":"if (byte == (byte)) {\n    org.apache.commons.codec.binary.BaseNCodec.Context.boolean = true;\n    break;\n} else {\n    final byte[] byte[] = org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int, org.apache.commons.codec.binary.BaseNCodec.Context);\n    if ((byte >= 0) && (byte < (this.byte[].int))) {\n        final int int = this.byte[][byte];\n        if (int >= 0) {\n            org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) + 1) % (org.apache.commons.codec.binary.Base32.int);\n            org.apache.commons.codec.binary.BaseNCodec.Context.long = ((org.apache.commons.codec.binary.BaseNCodec.Context.long) << (org.apache.commons.codec.binary.Base32.int)) + int;\n            if ((org.apache.commons.codec.binary.BaseNCodec.Context.int) == 0) {\n                byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n                byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n                byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n                byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n                byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.long) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            } \n        } \n    } \n}"},"status":-1},{"failures":[33,34,35],"tindex":"fb5ce004-43ce-11e5-9ee1-534180c9a555","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:291","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:442","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 4, \"VAN \", \"VON \")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 3, \"SCH\"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"ET\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 3, \"IER\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'K');\n}"},"status":-1},{"failures":[36,37,38],"tindex":"fb5d0715-43ce-11e5-9ee1-39c45b54c276","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:76","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"x\", \"k\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:116","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"l$\", \"3\")"},"status":-1},{"failures":[],"tindex":"fb5d0716-43ce-11e5-9ee1-0d996293b0cf","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:190","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byte[])"},"variableMap":{"tmp":"array"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:275","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.encodeHexString(byte[]).getBytes(org.apache.commons.codec.binary.Hex.getCharset())"},"status":-2},{"failures":[],"tindex":"fb5d0717-43ce-11e5-9ee1-572237132256","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:126","type":"CtAssignmentImpl","sourcecode":"java.util.BitSet = org.apache.commons.codec.net.URLCodec.java.util.BitSet"},"variableMap":{"urlsafe":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS","org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:278","type":"CtAssignmentImpl","sourcecode":"java.util.BitSet = org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet"},"status":-2},{"failures":[],"tindex":"fb5d0718-43ce-11e5-9ee1-a7df43a9dcb0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtIfImpl","sourcecode":"if ((((java.lang.String == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(java.lang.String))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(java.lang.String))) || ((java.lang.String.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n} "},"variableMap":{"name":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:340","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"status":-2},{"failures":[],"tindex":"fb5d2e29-43ce-11e5-9ee1-978228ad5b90","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:506","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.encode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n}"},"variableMap":{"obj":"value","this":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:200","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.BCodec.encode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be encoded using BCodec\"));\n}"},"status":-2},{"failures":[34,35],"tindex":"fb5d2e2a-43ce-11e5-9ee1-072e8a302e82","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 5, \"CHORE\")) {\n    return false;\n} else {\n    return true;\n}"},"variableMap":{"this":"this","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:803","type":"CtIfImpl","sourcecode":"if ((!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 5, \"HARAC\", \"HARIS\"))) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n    return false;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 5, \"CHORE\")) {\n    return false;\n} else {\n    return true;\n}"},"status":-1},{"failures":[39,40,41,42,43,44,45,46,47],"tindex":"fb5d553b-43ce-11e5-9ee1-2553e8af082b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:284","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SH\")) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SIO\"))) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SIA\"))) {\n    java.lang.StringBuilder.append('X');\n} else {\n    java.lang.StringBuilder.append('S');\n}"},"status":-1},{"failures":[48,49,50,34,35],"tindex":"fb5d553c-43ce-11e5-9ee1-4d9b437890c6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:143","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('M')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:527","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'A')"},"status":-1},{"failures":[39,51,52,53,54,41,42,55,43,56,57,45,58,59,60,47],"tindex":"fb5d553d-43ce-11e5-9ee1-5d5d16456033","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:385","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = java.lang.String.toUpperCase()"},"variableMap":{"name":"test"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:364","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.StringBuilder.substring(int, (int + (java.lang.String.length())))"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":19,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":23,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":29,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":36,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":53,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":19,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":61,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":24,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":50,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":38,"org.apache.commons.codec.binary.Base64Test.testBase64":59,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":28,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":11,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":14,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":13,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":4,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":17,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":2,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":15,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":18,"org.apache.commons.codec.binary.Base64Test.testUUID":44,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":7,"org.apache.commons.codec.binary.Base64Test.testSingletons":55,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":40,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":35,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":58,"org.apache.commons.codec.binary.Base64Test.testPairs":43,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":52,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":34,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":60,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":62,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":39,"org.apache.commons.codec.binary.Base64Test.testCodec112":54,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":46,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":47,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":51,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":31,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":48,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":49,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":30,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":12,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":56,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":22,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":64,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":16,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":66,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":42,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":37,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":27,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":5,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":25,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":6,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":33,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":26,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":63,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":20,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":41,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":0,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":10,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":57,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":8,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":32,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":21,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":65,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":1,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":9,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":45,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":3},"transformations":[{"failures":[],"tindex":"55610d3f-42dc-11e5-88d5-131bf9f08d1c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:173","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:306","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = (!(java.util.BitSet.get(int))) || (org.apache.commons.codec.net.QuotedPrintableCodec.(org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(int)) && (int > ((org.apache.commons.codec.net.QuotedPrintableCodec.int) - 5)))"},"status":-2},{"failures":[],"tindex":"55613450-42dc-11e5-88d5-fd7b5d78c7bc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:217","type":"CtReturnImpl","sourcecode":"return this.char[]"},"variableMap":{"soundexMapping":"org.apache.commons.codec.language.Nysiis.CHARS_S"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:133","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[0],"tindex":"55613451-42dc-11e5-88d5-876b3505143b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:421","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha256(byte[])"},"variableMap":{"this":"this","key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:635","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha512(byte[])"},"status":-1},{"failures":[1,2],"tindex":"55613452-42dc-11e5-88d5-392f6a731fb3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:407","type":"CtOperatorAssignmentImpl","sourcecode":"int ^= int << int"},"variableMap":{"a":"index","t":"index","n":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:282","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"status":-1},{"failures":[3,4],"tindex":"55615b63-42dc-11e5-88d5-7fe4c1a353c4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:358","type":"CtOperatorAssignmentImpl","sourcecode":"int &= 268435455"},"variableMap":{"c":"t"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:297","type":"CtAssignmentImpl","sourcecode":"int = (int >>> 1) | (int << 31)"},"status":-1},{"failures":[5,6,7,8,9,10,11,12,13,14],"tindex":"55615b64-42dc-11e5-88d5-b9259fd2fe64","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:251","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int = 0"},"status":-1},{"failures":[15,16,17,18],"tindex":"55615b65-42dc-11e5-88d5-f9a4e9ecfbe1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:142","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = java.lang.String"},"variableMap":{"rawLine":"ph"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:372","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.substring((int + 1), ((java.lang.String.length()) - 1))"},"status":-1},{"failures":[],"tindex":"55615b66-42dc-11e5-88d5-a74b069637f6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getSha1Digest()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:144","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-2},{"failures":[19,20],"tindex":"55615b67-42dc-11e5-88d5-f3379db59da2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:224","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[], 0, int)"},"status":-1},{"failures":[1,2,21,22,23],"tindex":"55615b68-42dc-11e5-88d5-cbf1a7ff6843","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:683","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"TH\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 3, \"TTH\"))) {\n    if ((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 2), 2, \"OM\", \"AM\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 4, \"VAN \", \"VON \"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 3, \"SCH\"))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('0', 'T');\n    }\n    int += 2;\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T');\n    int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"T\", \"D\") ? int + 2 : int + 1;\n}"},"variableMap":{"result":"result","this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:630","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"SC\")) {\n    int = org.apache.commons.codec.language.DoubleMetaphone.handleSC(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int);\n} else {\n    if ((int == ((java.lang.String.length()) - 1)) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 2, \"AI\", \"OI\"))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('S');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    }\n    int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"S\", \"Z\") ? int + 2 : int + 1;\n}"},"status":-1},{"failures":[],"tindex":"55618279-42dc-11e5-88d5-4bc4329f680b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:706","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.binary.Base64().decode(byte[])"},"variableMap":{"base64Data":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:272","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.Context.byte[]"},"status":-2},{"failures":[],"tindex":"5561827a-42dc-11e5-88d5-351acd4df7a8","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:265","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.format(\"org/apache/commons/codec/language/bm/%s.txt\", java.lang.String)"},"variableMap":{"lang":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:301","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":-2},{"failures":[],"tindex":"5561827b-42dc-11e5-88d5-0bbed0bdb8c4","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:384","type":"CtAssignmentImpl","sourcecode":"char = java.lang.Character.toLowerCase(char)"},"variableMap":{"ch":"current"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:199","type":"CtAssignmentImpl","sourcecode":"char = char"},"status":1},{"failures":[],"tindex":"5561827c-42dc-11e5-88d5-0551f461839a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:99","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, byte[])"},"status":-2},{"failures":[2],"tindex":"5561827d-42dc-11e5-88d5-17be482dabaf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:281","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:429","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K', 'J')"},"status":-1},{"failures":[24,0],"tindex":"5561a98e-42dc-11e5-88d5-85bcb3e18bab","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:200","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.byte[]"},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:635","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha512(byte[]).doFinal(byte[])"},"status":-1},{"failures":[19,25,26],"tindex":"5561a98f-42dc-11e5-88d5-eb6a809145cb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:458","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][21], byte[][1], byte[][11], 4, java.lang.StringBuilder)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:490","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), byte[][63], 2, java.lang.StringBuilder)"},"status":-1},{"failures":[5,6,7,27,28,13,14],"tindex":"5561a990-42dc-11e5-88d5-31492e5dec76","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:202","type":"CtLocalVariableImpl","sourcecode":"int int = byte[][int]"},"variableMap":{"bytes":"buf","index":"avail"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:114","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.binary.BaseNCodec.readResults(byte[], 0, int, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-1},{"failures":[6,7,8,9,11,12,13,14,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"tindex":"5561a991-42dc-11e5-88d5-d1a3192f439a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:220","type":"CtForImpl","sourcecode":"for (int int = 0 ; (int < (byte[].int)) && (int < (byte[].int)) ; int++) {\n    final int int = byte[][int];\n    byte[][int] = ((byte)(int << 1));\n}"},"variableMap":{"original":"pArray","length":"org.apache.commons.codec.binary.BaseNCodec.EOF","key":"pArray"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:431","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.encode(byte[], 0, org.apache.commons.codec.binary.BaseNCodec.int, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-1},{"failures":[],"tindex":"5561a992-42dc-11e5-88d5-bd983cc022ee","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:326","type":"CtLocalVariableImpl","sourcecode":"int int = int ^ (int >>> 16)"},"variableMap":{"r":"v"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:330","type":"CtLocalVariableImpl","sourcecode":"int int = ((int ^ (int << 16)) ^ int) ^ (int[][(int + 1)])"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
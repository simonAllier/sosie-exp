{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":12,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":34,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":53,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":20,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":28,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":35,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":68,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":8,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":61,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":67,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":51,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":72,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":69,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":33,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":21,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":16,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":3,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":30,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":14,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_AllLower_SuccessfullyRemoved":58,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":23,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved":36,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":43,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":17,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":55,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":6,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":27,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":46,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved":31,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":44,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":50,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":22,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":1,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":18,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":63,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant":60,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":66,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":25,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant":26,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":52,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":64,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":9,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":70,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":0,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":7,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant":48,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":54,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":10,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":49,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":5,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":19,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":32,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":15,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":41,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":65,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":24,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":47,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":2,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":62,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":39,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":71,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":42,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":37,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemovalNormalString_NoChange":40,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":56,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":11,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":13,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":29,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":59,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":57,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":4,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":38,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":45},"transformations":[{"failures":[],"tindex":"6b176dd3-4409-11e5-80d8-f11498612198","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:92","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[], java.lang.String, org.apache.commons.codec.digest.Md5Crypt.java.lang.String)"},"variableMap":{"salt":"org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX","keyBytes":"keyBytes","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:72","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[], ((org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))))"},"status":-2},{"failures":[0,1],"tindex":"6b1794e4-4409-11e5-80d8-954bc3dfa3c3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:90","type":"CtReturnImpl","sourcecode":"return +1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:64","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.Context.boolean ? 0 : 1"},"status":-1},{"failures":[],"tindex":"6b1794e5-4409-11e5-80d8-dde32b400533","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:327","type":"CtLocalVariableImpl","sourcecode":"int int = int & int"},"variableMap":{"v":"length","e0":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:222","type":"CtLocalVariableImpl","sourcecode":"int int = byte[].int"},"status":-2},{"failures":[2,3],"tindex":"6b17bbf6-4409-11e5-80d8-63f597671e10","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:190","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('K')"},"variableMap":{"code":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:425","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)"},"status":-1},{"failures":[4,2,5,6,7,3,8,9,10,11],"tindex":"6b17bbf7-4409-11e5-80d8-059cb6485ccf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:469","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('|')"},"variableMap":{"sb":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:430","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"$\")"},"status":-1},{"failures":[12,13,14],"tindex":"6b17bbf8-4409-11e5-80d8-3b3c4bfb16a8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:241","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.int"},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:591","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'R' ? int + 2 : int + 1"},"status":-1},{"failures":[],"tindex":"6b17e309-4409-11e5-80d8-c3df73d6b0f9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Hex:90","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"variableMap":{"j":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:307","type":"CtOperatorAssignmentImpl","sourcecode":"int += org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int, boolean, java.io.ByteArrayOutputStream)"},"status":0},{"failures":[],"tindex":"6b17e30a-4409-11e5-80d8-73b6726a8276","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Soundex:151","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:149","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + java.lang.String) + \" encoded content\"))"},"status":-2},{"failures":[],"tindex":"6b17e30b-4409-11e5-80d8-156541f5ceb5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:301","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, byte[], int, (int - int))"},"variableMap":{"tempResult":"buffer","pBytes":"buffer","keyLen":"modulus","cp":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:378","type":"CtSwitchImpl","sourcecode":"switch (org.apache.commons.codec.binary.BaseNCodec.Context.int) {\n    case 2 :\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 2) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 3 :\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 7) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 4 :\n        org.apache.commons.codec.binary.BaseNCodec.Context.long = (org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 4;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.long) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 5 :\n        org.apache.commons.codec.binary.BaseNCodec.Context.long = (org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 1;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.long) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 6 :\n        org.apache.commons.codec.binary.BaseNCodec.Context.long = (org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 6;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.long) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 7 :\n        org.apache.commons.codec.binary.BaseNCodec.Context.long = (org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 3;\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.long) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (org.apache.commons.codec.binary.BaseNCodec.Context.int)));\n}"},"status":-2},{"failures":[],"tindex":"6b180a1c-4409-11e5-80d8-439e61924ed9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:298","type":"CtLocalVariableImpl","sourcecode":"final int int = (java.lang.String.length()) - 1"},"status":-2},{"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"tindex":"6b180a1d-4409-11e5-80d8-996525212b06","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:62","type":"CtIfImpl","sourcecode":"if (char == char) {\n    continue;\n} "},"variableMap":{"c1":"c","c2":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:362","type":"CtIfImpl","sourcecode":"if (int > (-1)) {\n    java.lang.StringBuilder.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(int));\n} else {\n    java.lang.StringBuilder.append(char);\n}"},"status":-1},{"failures":[63,12,13,14],"tindex":"6b18312e-4409-11e5-80d8-5ffaaf5225b4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:555","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('L')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:683","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"TH\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 3, \"TTH\"))) {\n    if ((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 2), 2, \"OM\", \"AM\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 4, \"VAN \", \"VON \"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 3, \"SCH\"))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('0', 'T');\n    }\n    int += 2;\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T');\n    int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"T\", \"D\") ? int + 2 : int + 1;\n}"},"status":-1},{"failures":[],"tindex":"6b18312f-4409-11e5-80d8-57bdab167f70","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:257","type":"CtAssignmentImpl","sourcecode":"java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()"},"status":0},{"failures":[],"tindex":"6b185840-4409-11e5-80d8-0dffb6df9a22","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:80","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('/')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"o1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.StringEncoderComparator:79","type":"CtTryImpl","sourcecode":"try {\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    final java.lang.Comparable<java.lang.Comparable<?>> java.lang.Comparable<java.lang.Comparable<?>> = ((java.lang.Comparable<java.lang.Comparable<?>>)(this.org.apache.commons.codec.StringEncoder.encode(java.lang.Object)));\n    final java.lang.Comparable<?> java.lang.Comparable<?> = ((java.lang.Comparable<?>)(this.org.apache.commons.codec.StringEncoder.encode(java.lang.Object)));\n    int = java.lang.Comparable<java.lang.Comparable<?>>.compareTo(java.lang.Comparable<?>);\n} catch (final org.apache.commons.codec.EncoderException ee) {\n    int = 0;\n}"},"status":-2},{"failures":[64,65,66,67,68,69,70,71,72],"tindex":"6b185841-4409-11e5-80d8-db893022809a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:388","type":"CtIfImpl","sourcecode":"if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"variableMap":{"code":"lastChar","chr":"lastChar"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:522","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>) {\n    for (final java.lang.String java.lang.String : java.lang.String[]) {\n        final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = boolean ? org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.createBranch() : org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch;\n        final boolean boolean = ((char == 'm') && (char == 'n')) || ((char == 'n') && (char == 'm'));\n        org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.processNextReplacement(java.lang.String, boolean);\n        if (boolean) {\n            java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.add(org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch);\n        } else {\n            break;\n        }\n    }\n}"},"status":-1},{"failures":[],"tindex":"6b185842-4409-11e5-80d8-39235d3de762","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:460","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"6b187f53-4409-11e5-80d8-8f0c243cf041","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Soundex:266","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[]{ '0' , '0' , '0' , '0' }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:295","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = java.lang.String.toCharArray()"},"status":-2},{"failures":[12,13,14],"tindex":"6b187f54-4409-11e5-80d8-1587a0b17523","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:728","type":"CtOperatorAssignmentImpl","sourcecode":"int += 4"},"variableMap":{"index":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:292","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":18,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
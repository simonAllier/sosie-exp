{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":66,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":5,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":15,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":23,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":38,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":57,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":76,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":9,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":13,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":19,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":65,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":53,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":28,"org.apache.commons.codec.binary.Base64Test.testBase64":63,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":78,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":0,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":81,"org.apache.commons.codec.binary.Base64Test.testTriplets":42,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":70,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":69,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":37,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":18,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":12,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":34,"org.apache.commons.codec.binary.Base64Test.testUUID":46,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":56,"org.apache.commons.codec.binary.Base64Test.testSingletons":59,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":84,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":80,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":75,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":62,"org.apache.commons.codec.binary.Base64Test.testPairs":45,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":24,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":55,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":64,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":74,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":67,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":79,"org.apache.commons.codec.binary.Base64Test.testCodec112":58,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":3,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":49,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":50,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":21,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":54,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay":29,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":40,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":51,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":25,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":52,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":39,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":30,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":4,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":33,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":82,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":60,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":14,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":1,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":31,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":85,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":22,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":87,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":44,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":20,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":10,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":17,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":77,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":73,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":83,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":27,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":68,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":2,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":32,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":43,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":48,"org.apache.commons.codec.language.MetaphoneTest.testWhy":16,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":61,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":71,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":26,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":41,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":6,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":7,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":86,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":35,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":8,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":11,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":72,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":47,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":36},"transformations":[{"failures":[0,1],"tindex":"dc5ad2e3-42e2-11e5-83b2-09db78b78c11","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:776","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[])"},"status":-1},{"failures":[],"tindex":"dc5af9f4-42e2-11e5-83b2-bfa6beb42c50","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:365","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.net.Utils.digit16(byte[][int])"},"variableMap":{"bytes":"in","i":"inPos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:381","type":"CtLocalVariableImpl","sourcecode":"int int = byte[][int++]"},"status":-2},{"failures":[2,3,4,5,6,7,8,9],"tindex":"dc5af9f5-42e2-11e5-83b2-5fd623e84036","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:226","type":"CtReturnImpl","sourcecode":"return 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:337","type":"CtReturnImpl","sourcecode":"return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (java.lang.String.length())))"},"status":-1},{"failures":[],"tindex":"dc5b2106-42e2-11e5-83b2-db999ff36f31","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:356","type":"CtIfImpl","sourcecode":"if ((int > 0) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 4, \"CHAE\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K', 'X');\n    return int + 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.conditionCH0(java.lang.String, int)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    return int + 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.conditionCH1(java.lang.String, int)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    return int + 2;\n} else {\n    if (int > 0) {\n        if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 2, \"MC\")) {\n            org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n        } else {\n            org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'K');\n        }\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n    }\n    return int + 2;\n}"},"status":-2},{"failures":[],"tindex":"dc5b2107-42e2-11e5-83b2-0366dd0a55f4","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:310","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null) {\n    return null;\n} else if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.QCodec.decode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be decoded using Q codec\"));\n}"},"variableMap":{"obj":"pObject","this":"pObject"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:114","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(((java.lang.String)(java.lang.Object)))"},"status":-2},{"failures":[10],"tindex":"dc5b2108-42e2-11e5-83b2-f37c2499eb8f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.java.lang.String)) + \"]{2,}$\")))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + java.lang.String));\n} "},"variableMap":{"salt":"salt","org.apache.commons.codec.digest.B64.B64T":"salt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtIfImpl","sourcecode":"if ((java.lang.String != null) && (!(java.lang.String.startsWith(org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n    java.lang.String = (org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + java.lang.String;\n} "},"status":-1},{"failures":[],"tindex":"dc5b2109-42e2-11e5-83b2-d919c2797c41","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.BCodec:104","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.decodeBase64(byte[])"},"variableMap":{"bytes":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:634","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha512(byte[]).doFinal(byte[]);\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalArgumentException(java.lang.IllegalStateException);\n}"},"status":-2},{"failures":[],"tindex":"dc5b481a-42e2-11e5-83b2-19cd893d3751","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Crypt:67","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[])"},"variableMap":{"keyBytes":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:733","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha1Hex(byte[])"},"status":-2},{"failures":[11,12],"tindex":"dc5b481b-42e2-11e5-83b2-ab8d9bb81101","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:271","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('A')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:611","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X')"},"status":-1},{"failures":[],"tindex":"dc5b481c-42e2-11e5-83b2-596a90c8cfc3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:68","type":"CtReturnImpl","sourcecode":"return java.security.MessageDigest.getInstance(java.lang.String)"},"status":-2},{"failures":[11,12,13,14,15],"tindex":"dc5b481d-42e2-11e5-83b2-157850c69406","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:145","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29],"tindex":"dc5b481e-42e2-11e5-83b2-e7f4db5b90e8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:214","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:371","type":"CtReturnImpl","sourcecode":"return (int + 1) == int"},"status":-1},{"failures":[],"tindex":"dc5b481f-42e2-11e5-83b2-3f5430e43fca","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:291","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String[][1]"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:308","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][0])"},"status":-2},{"failures":[30,31,10,32,33,34,35],"tindex":"dc5b6f30-42e2-11e5-83b2-27a3376e0f0a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:326","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    int = 256 + int;\n} "},"variableMap":{"b":"ii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:223","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[], 0, (int > 16 ? 16 : int))"},"status":-1},{"failures":[36,37],"tindex":"dc5b6f31-42e2-11e5-83b2-83e47662d9c2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:308","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.permOp(int, int, 16, 65535, int[])"},"variableMap":{"left":"d","this":"this","right":"d","results":"results"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:351","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.permOp(int, int, 8, 16711935, int[])"},"status":-1},{"failures":[38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"tindex":"dc5b6f32-42e2-11e5-83b2-693d2abe2119","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:430","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.encode(byte[], 0, byte[].int, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-1},{"failures":[11,12,14],"tindex":"dc5b6f33-42e2-11e5-83b2-0dab798ab0de","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:574","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"P\", \"B\") ? int + 2 : int + 1"},"variableMap":{"this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:148","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'N' ? int + 2 : int + 1"},"status":-1},{"failures":[],"tindex":"dc5b6f34-42e2-11e5-83b2-535c354b5be6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:339","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[32]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:314","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[2]"},"status":-2},{"failures":[11,12],"tindex":"dc5b9645-42e2-11e5-83b2-1398c3db151b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:607","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n}"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":19,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":40,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":59,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":34,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":41,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":68,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":16,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":39,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":105,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":27,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":12,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":104,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":22,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":6,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":4,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":7,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":29,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":73,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":101,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved":42,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":90,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":1,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":49,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":85,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":18,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":81,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":86,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":33,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":52,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":89,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":8,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved":37,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":50,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":87,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":88,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":106,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":92,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant":67,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":5,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":58,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":78,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":60,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":99,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":25,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":38,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":21,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":47,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":30,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":53,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":45,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":100,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":107,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":48,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":62,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":96,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":26,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":11,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":57,"org.apache.commons.codec.binary.Base64Test.testBase64":95,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":15,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":36,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_AllLower_SuccessfullyRemoved":65,"org.apache.commons.codec.binary.Base64Test.testUUID":82,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":79,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":91,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":3,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":75,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":13,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":74,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":2,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":97,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":9,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":61,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":72,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":80,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":56,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":108,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":28,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":20,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":109,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":102,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":24,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":98,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":70,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":93,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":31,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant":32,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NINO_NoChange":64,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":77,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":0,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant":54,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":19,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":14,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":55,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":76,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":103,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":84,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":94,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":69,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":43,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemovalNormalString_NoChange":46,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":71,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":10,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":35,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":66,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":63,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":83,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":44,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":51},"transformations":[{"failures":[],"tindex":"6e1cf10f-4360-11e5-812b-b10f6e0d85dc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:129","type":"CtIfImpl","sourcecode":"if ((!(java.lang.String.startsWith(org.apache.commons.codec.net.RFC1522Codec.java.lang.String))) || (!(java.lang.String.endsWith(org.apache.commons.codec.net.RFC1522Codec.java.lang.String)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} "},"variableMap":{"org.apache.commons.codec.net.RFC1522Codec.POSTFIX":"salt","org.apache.commons.codec.net.RFC1522Codec.PREFIX":"salt","text":"org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    java.lang.String = (org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} "},"status":-2},{"failures":[],"tindex":"6e1d6640-4360-11e5-812b-a7ff995e12a1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:260","type":"CtReturnImpl","sourcecode":"return int >= int"},"variableMap":{"count":"ipl","minRating":"ipl"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:715","type":"CtIfImpl","sourcecode":"if (!(this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(java.lang.CharSequence.subSequence(int, java.lang.CharSequence.length())))) {\n    return false;\n} "},"status":-2},{"failures":[],"tindex":"6e1d8d51-4360-11e5-812b-0dcf301e6c85","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:101","type":"CtReturnImpl","sourcecode":"return ((((char == 'A') || (char == 'E')) || (char == 'I')) || (char == 'O')) || (char == 'U')"},"status":-2},{"failures":[0,1,2,3],"tindex":"6e1d8d52-4360-11e5-812b-bf184abf0c24","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:361","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.BaseNCodec.encode(byte[]))"},"status":-1},{"failures":[],"tindex":"6e1db463-4360-11e5-812b-cdaae790b2b9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:306","type":"CtReturnImpl","sourcecode":"return (this.byte[]) == (org.apache.commons.codec.binary.Base64.byte[])"},"status":-2},{"failures":[],"tindex":"6e1ddb74-4360-11e5-812b-9fa190951297","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:296","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"6e1ddb75-4360-11e5-812b-b113d42fccb2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:387","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"tindex":"6e1e0286-4360-11e5-812b-e76be54de3fb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:213","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.NameType org.apache.commons.codec.language.bm.NameType : org.apache.commons.codec.language.bm.NameType.values()) {\n    final java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>> java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>> = new java.util.EnumMap<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType);\n    for (final org.apache.commons.codec.language.bm.RuleType org.apache.commons.codec.language.bm.RuleType : org.apache.commons.codec.language.bm.RuleType.values()) {\n        final java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>();\n        final org.apache.commons.codec.language.bm.Languages org.apache.commons.codec.language.bm.Languages = org.apache.commons.codec.language.bm.Languages.getInstance(org.apache.commons.codec.language.bm.NameType);\n        for (final java.lang.String java.lang.String : org.apache.commons.codec.language.bm.Languages.getLanguages()) {\n            try {\n                java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>.put(java.lang.String, org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.createScanner(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String), org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.createResourceName(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String)));\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalStateException((\"Problem processing \" + org.apache.commons.codec.language.bm.Rule.(org.apache.commons.codec.language.bm.Rule.createResourceName(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String))) , java.lang.IllegalStateException);\n            }\n        }\n        if (!(org.apache.commons.codec.language.bm.RuleType.equals(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType))) {\n            java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>.put(\"common\", org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.createScanner(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, \"common\"), org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.createResourceName(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, \"common\")));\n        } \n        java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>.put(org.apache.commons.codec.language.bm.RuleType, java.util.Collections.unmodifiableMap(java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>));\n    }\n    org.apache.commons.codec.language.bm.Rule.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>>.put(org.apache.commons.codec.language.bm.NameType, java.util.Collections.unmodifiableMap(java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>));\n}"},"status":-1},{"failures":[],"tindex":"6e1e77b7-4360-11e5-812b-ab622f8310ff","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:160","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.String.length()"},"status":-2},{"failures":[],"tindex":"6e1e77b8-4360-11e5-812b-bb074230e5fe","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:705","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha512(java.io.InputStream))"},"status":-2},{"failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"tindex":"6e1e9ec9-4360-11e5-812b-df420d74fd36","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a \\'[\\' but does not end in \\']\\'\");\n} "},"variableMap":{"ph":"org.apache.commons.codec.language.MatchRatingApproachEncoder.PLAIN_ASCII"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:359","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    final char char = java.lang.String.charAt(int);\n    final int int = org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.indexOf(char);\n    if (int > (-1)) {\n        java.lang.StringBuilder.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(int));\n    } else {\n        java.lang.StringBuilder.append(char);\n    }\n}"},"status":-1},{"failures":[],"tindex":"6e1ec5da-4360-11e5-812b-91f41e2da78d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:377","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof byte[]) {\n    return org.apache.commons.codec.binary.BaseNCodec.decode(((byte[])(java.lang.Object)));\n} else if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.binary.BaseNCodec.decode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n}"},"variableMap":{"obj":"obj","this":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:340","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.decode(((java.lang.String)(java.lang.Object)))"},"status":-2},{"failures":[],"tindex":"6e1eeceb-4360-11e5-812b-d1a431110102","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (int == int) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"start","to":"start"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:918","type":"CtIfImpl","sourcecode":"if ((int >= 0) && ((int + int) <= (java.lang.String.length()))) {\n    final java.lang.String java.lang.String = java.lang.String.substring(int, (int + int));\n    for (final java.lang.String java.lang.String : java.lang.String[]) {\n        if (java.lang.String.equals(java.lang.String)) {\n            boolean = true;\n            break;\n        } \n    }\n} "},"status":-2},{"failures":[],"tindex":"6e1f13fc-4360-11e5-812b-2d8ffb86c5fd","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:493","type":"CtOperatorAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int += (org.apache.commons.codec.binary.BaseNCodec.Context.int) - int"},"variableMap":{"currentLinePos":"length","savedPos":"pos","pos":"length","context":"context"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:520","type":"CtOperatorAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int += byte[].int"},"status":-2},{"failures":[],"tindex":"6e1f13fd-4360-11e5-812b-d7db9f094d7c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:677","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encode(byte[])"},"variableMap":{"b64":"this","binaryData":"binaryData"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:582","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.encodeBase64(byte[], false, true)"},"status":-2},{"failures":[70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109],"tindex":"6e1f3b0e-4360-11e5-812b-03942d9fdbbb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:448","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.binary.BaseNCodec.Context.int) == 0) {\n    byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n    byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n    byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.int) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n} "},"status":-1},{"failures":[],"tindex":"6e1f621f-4360-11e5-812b-292dcb520fc5","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:242","type":"CtOperatorAssignmentImpl","sourcecode":"int >>>= 1"},"variableMap":{"u":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:380","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[],"tindex":"6e1f8930-4360-11e5-812b-d1c40ae5173b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:106","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"r3\", \"R3\")"},"variableMap":{"txt":"name1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:312","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(int, (int + 1))"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":18,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
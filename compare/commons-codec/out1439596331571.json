{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter":77,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":1,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":35,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":115,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":5,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":17,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":114,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":131,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":27,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":123,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":100,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":94,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":129,"org.apache.commons.codec.binary.Base64Test.testTriplets":46,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":110,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":25,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":127,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":41,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":71,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":90,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":63,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":93,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":9,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":82,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":87,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":56,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":50,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":57,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":61,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":58,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":59,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":126,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":39,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":22,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":6,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":7,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":19,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":101,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":67,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":96,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":74,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":0,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":112,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":81,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":49,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":116,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":72,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":113,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":88,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":124,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":32,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":18,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":48,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":8,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":29,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":45,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":89,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":4,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":104,"org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull":26,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":36,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":24,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":84,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":78,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":38,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":34,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":66,"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad":37,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":103,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":122,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":83,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":128,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":60,"org.apache.commons.codec.binary.Base64Test.testBase64":80,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":16,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":109,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":3,"org.apache.commons.codec.binary.Base64Test.testUUID":52,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":64,"org.apache.commons.codec.binary.Base64Test.testSingletons":73,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":117,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":14,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":28,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":43,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":79,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":20,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":102,"org.apache.commons.codec.binary.Base64Test.testPairs":51,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":23,"org.apache.commons.codec.binary.Base64Test.testConstructors":54,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":10,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":42,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":85,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":11,"org.apache.commons.codec.binary.Base64Test.testCodec112":68,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":97,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":15,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":95,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":120,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":47,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":40,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":105,"org.apache.commons.codec.binary.Base64Test.testCodec68":75,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":106,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":125,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":108,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":91,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":69,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":86,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":118,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":30,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":70,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":121,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":130,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":13,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":111,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":98,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":31,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":21,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":44,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter":62,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":92,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":55,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":76,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":33,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":107,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":12,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":119,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":2,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":65,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":53,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":99},"transformations":[{"failures":[0,1,2,3],"tindex":"7b25c074-42df-11e5-ab45-8b84c57c89b9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:188","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"index","minRating":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:457","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[],"tindex":"7b25c075-42df-11e5-ab45-c77f468fbde2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:209","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.String.charAt(0)"},"variableMap":{"salt":"pattern"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:314","type":"CtLocalVariableImpl","sourcecode":"final char char = org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.java.lang.String.charAt(0)"},"status":-2},{"failures":[],"tindex":"7b25e786-42df-11e5-ab45-c1b336e9d70c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:222","type":"CtWhileImpl","sourcecode":"while (int > 0) {\n    java.security.MessageDigest.update(byte[], 0, (int > 16 ? 16 : int));\n    int -= 16;\n}"},"variableMap":{"ii":"blocksize","finalb":"altResult","ctx":"ctx"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:396","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[], 0, int)"},"status":-2},{"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],"tindex":"7b25e787-42df-11e5-ab45-8db49d9dc43a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (int > int) {\n    break;\n} "},"variableMap":{"i":"b","name2Size":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:359","type":"CtIfImpl","sourcecode":"if (int == (org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n    try {\n        if ((byte[][++int]) == (org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n            continue;\n        } \n        final int int = org.apache.commons.codec.net.Utils.digit16(byte[][int]);\n        final int int = org.apache.commons.codec.net.Utils.digit16(byte[][++int]);\n        java.io.ByteArrayOutputStream.write(((char)((int << 4) + int)));\n    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n        throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , java.lang.ArrayIndexOutOfBoundsException);\n    }\n} else if ((int != (org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (int != (org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n    java.io.ByteArrayOutputStream.write(int);\n} "},"status":-1},{"failures":[2,3],"tindex":"7b25e788-42df-11e5-ab45-03b2350c8c2f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:587","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:666","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S')"},"status":-1},{"failures":[19,20,21,22,23,24,25],"tindex":"7b25e789-42df-11e5-ab45-3f2af3026161","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:658","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getSha512Digest(), java.io.InputStream)"},"variableMap":{"data":"data","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:50","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest, java.io.InputStream).digest()"},"status":-1},{"failures":[],"tindex":"7b25e78a-42df-11e5-ab45-472c6be02384","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:391","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.long = (org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 1"},"variableMap":{"context":"context","lbitWorkArea":"lbitWorkArea"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:386","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.long = (org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 4"},"status":-2},{"failures":[0,2,3],"tindex":"7b25e78b-42df-11e5-ab45-d1754e56e05c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:767","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"S\", \"TS\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:447","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 3, \"IER\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'K');\n}"},"status":-1},{"failures":[26],"tindex":"7b260e9c-42df-11e5-ab45-210eb01b6b85","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:139","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[],"tindex":"7b260e9d-42df-11e5-ab45-b777d644ef82","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:331","type":"CtAssignmentImpl","sourcecode":"int = (int >>> 4) | (int << 28)"},"variableMap":{"t":"org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:188","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"status":-2},{"failures":[27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121],"tindex":"7b260e9e-42df-11e5-ab45-f966725d824e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:224","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:504","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"7b260e9f-42df-11e5-ab45-ef4e3d74cc07","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:668","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.binary.Base64 org.apache.commons.codec.binary.Base64 = boolean ? new org.apache.commons.codec.binary.Base64(boolean) : new org.apache.commons.codec.binary.Base64(0 , org.apache.commons.codec.binary.Base64.byte[] , boolean)"},"status":-2},{"failures":[],"tindex":"7b260ea0-42df-11e5-ab45-5136afc924e8","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Crypt:70","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)) {\n    return org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[], java.lang.String);\n} else if (java.lang.String.startsWith(org.apache.commons.codec.digest.Md5Crypt.java.lang.String)) {\n    return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[], java.lang.String);\n} else {\n    return org.apache.commons.codec.digest.UnixCrypt.crypt(byte[], java.lang.String);\n}"},"variableMap":{"salt":"salt","keyBytes":"keyBytes","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"salt","org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX":"salt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Crypt:66","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[]);\n} else if (java.lang.String.startsWith(org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)) {\n    return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[], java.lang.String);\n} else if (java.lang.String.startsWith(org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)) {\n    return org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[], java.lang.String);\n} else if (java.lang.String.startsWith(org.apache.commons.codec.digest.Md5Crypt.java.lang.String)) {\n    return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[], java.lang.String);\n} else {\n    return org.apache.commons.codec.digest.UnixCrypt.crypt(byte[], java.lang.String);\n}"},"status":-2},{"failures":[0,1,2,3],"tindex":"7b2635b1-42df-11e5-ab45-ab15f7da4643","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:396","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:345","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K')"},"status":-1},{"failures":[122,123,0,1,2,3,124],"tindex":"7b2635b2-42df-11e5-ab45-255204ea7ca7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:137","type":"CtAssignmentImpl","sourcecode":"int = '+'"},"variableMap":{"b":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:156","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.handleP(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int)"},"status":-1},{"failures":[],"tindex":"7b2635b3-42df-11e5-ab45-f16a8cfe20f9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:166","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'M')) && org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) {\n    break;\n} "},"variableMap":{"wdsz":"n","this":"this","local":"code","n":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:284","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SH\")) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SIO\"))) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SIA\"))) {\n    java.lang.StringBuilder.append('X');\n} else {\n    java.lang.StringBuilder.append('S');\n}"},"status":0},{"failures":[],"tindex":"7b2635b4-42df-11e5-ab45-f1f6f248bbe8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:165","type":"CtReturnImpl","sourcecode":"return java.lang.String + java.lang.String"},"variableMap":{"firstThree":"str","lastThree":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:181","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"status":0},{"failures":[2,3],"tindex":"7b2635b5-42df-11e5-ab45-0f7236556ae8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:214","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:809","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[125,126,127,128,129,130,131],"tindex":"7b2635b6-42df-11e5-ab45-793bdeb5fc5a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:252","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('H')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:289","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('S')"},"status":-1},{"failures":[15],"tindex":"7b265cc7-42df-11e5-ab45-c9c9929a8867","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.Utils:44","type":"CtIfImpl","sourcecode":"if (int == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.int)) + \"): \") + byte));\n} "},"variableMap":{"b":"org.apache.commons.codec.net.QCodec.BLANK","org.apache.commons.codec.net.URLCodec.RADIX":"i","i":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:184","type":"CtIfImpl","sourcecode":"if (byte != (org.apache.commons.codec.net.QCodec.byte)) {\n    byte[][int] = byte;\n} else {\n    byte[][int] = org.apache.commons.codec.net.QCodec.byte;\n}"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
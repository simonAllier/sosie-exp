{"failureDictionary":{"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":45,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":23,"org.apache.commons.codec.language.NysiisTest.testSnat":13,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":34,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":25,"org.apache.commons.codec.language.NysiisTest.testDropBy":15,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":1,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":35,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":56,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":21,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":32,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":52,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":51,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":48,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":24,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":20,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":64,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":36,"org.apache.commons.codec.language.NysiisTest.testRule2":7,"org.apache.commons.codec.language.NysiisTest.testRule1":6,"org.apache.commons.codec.language.NysiisTest.testRule7":10,"org.apache.commons.codec.language.NysiisTest.testRule6":9,"org.apache.commons.codec.language.NysiisTest.testRule5":8,"org.apache.commons.codec.language.NysiisTest.testCap":2,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":44,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":14,"org.apache.commons.codec.language.NysiisTest.testBran":11,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":18,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":54,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":59,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":40,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":49,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":63,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":39,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":38,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":57,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":58,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":22,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":60,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":41,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":61,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":46,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":26,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":47,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":31,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":33,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":27,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":53,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":30,"org.apache.commons.codec.language.NysiisTest.testDad":3,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":62,"org.apache.commons.codec.language.NysiisTest.testOthers":16,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":29,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":43,"org.apache.commons.codec.language.NysiisTest.testTranan":17,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":42,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":0,"org.apache.commons.codec.language.NysiisTest.testDan":4,"org.apache.commons.codec.language.NysiisTest.testFal":5,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":37,"org.apache.commons.codec.language.NysiisTest.testSnad":12,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":65,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":19,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":50,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":55,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":28},"transformations":[{"failures":[],"tindex":"a5803733-4361-11e5-93b7-8df19a41cc45","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:462","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 6))) & (org.apache.commons.codec.binary.Base32.int))]"},"variableMap":{"encodeTable":"buffer","pos":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","org.apache.commons.codec.binary.Base32.MASK_5BITS":"pos","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:394","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.long) & (org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],"tindex":"a580ac64-4361-11e5-93b7-051a333f8625","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:228","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.nysiis(java.lang.String)"},"status":-1},{"failures":[],"tindex":"a580d375-4361-11e5-93b7-5dabdea9512b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:388","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.substring(1, ((java.lang.String.length()) - 1))"},"variableMap":{"ph":"org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:435","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.substring(org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim()"},"status":-2},{"failures":[19,20,21,22,23],"tindex":"a580fa86-4361-11e5-93b7-b16b9e5310d7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:970","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate(java.lang.String)"},"variableMap":{"this":"result","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:584","type":"CtIfImpl","sourcecode":"if ((((int == ((java.lang.String.length()) - 1)) && (!boolean)) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 2, \"IE\"))) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 4), 2, \"ME\", \"MA\")))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('R');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('R');\n}"},"status":-1},{"failures":[24,25,26,27,28,29,30,31],"tindex":"a5812197-4361-11e5-93b7-dbea1b3a1c60","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:249","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[], 0, int)"},"status":-1},{"failures":[32],"tindex":"a5812198-4361-11e5-93b7-cf88da2fa734","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:149","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"|\")"},"variableMap":{"sb":"local"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:139","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(char[])"},"status":-1},{"failures":[33,34,35,36,37,38],"tindex":"a58148a9-4361-11e5-93b7-1f4ac0818699","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:449","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[39,40],"tindex":"a58148aa-4361-11e5-93b7-b5e6963b6f5f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:368","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[], byte[]))"},"variableMap":{"valueToDigest":"key","this":"this","key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:281","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.hmacMd5(byte[], java.io.InputStream))"},"status":-1},{"failures":[],"tindex":"a5816fbb-4361-11e5-93b7-2f0d51ced752","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:77","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set(',')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:100","type":"CtForImpl","sourcecode":"for (int int = 33 ; int <= 60 ; int++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(int);\n}"},"status":-2},{"failures":[],"tindex":"a58196cc-4361-11e5-93b7-0d6199419cd1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:159","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.trim()"},"variableMap":{"line":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:83","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"tio\", \"sio\")"},"status":1},{"failures":[],"tindex":"a58196cd-4361-11e5-93b7-dba1752f92f7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:146","type":"CtAssignmentImpl","sourcecode":"boolean = false"},"variableMap":{"inExtendedComment":"eof"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:433","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.boolean = true"},"status":-2},{"failures":[41],"tindex":"a581bdde-4361-11e5-93b7-cf42b1b4ac14","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"maxResultSize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:670","type":"CtIfImpl","sourcecode":"if (long > int) {\n    throw new java.lang.IllegalArgumentException((((\"Input array too big, the output array would be bigger (\" + long) + \") than the specified maximum size of \") + int));\n} "},"status":-1},{"failures":[19,20,22,23],"tindex":"a581e4ef-4361-11e5-93b7-1d78b1f1287d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:110","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[42],"tindex":"a581e4f0-4361-11e5-93b7-d5fcfd43b905","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:703","type":"CtLocalVariableImpl","sourcecode":"final int int = this.java.lang.String.length()"},"variableMap":{"pattern":"text"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:132","type":"CtLocalVariableImpl","sourcecode":"final int int = (java.lang.String.length()) - 2"},"status":-1},{"failures":[43,44,45,46,47,48,49,50,51,52],"tindex":"a5820b01-4361-11e5-93b7-f109933d4ed9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"decodeSize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:374","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.binary.BaseNCodec.Context.boolean) && ((org.apache.commons.codec.binary.BaseNCodec.Context.int) >= 2)) {\n    final byte[] byte[] = org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int, org.apache.commons.codec.binary.BaseNCodec.Context);\n    switch (org.apache.commons.codec.binary.BaseNCodec.Context.int) {\n        case 2 :\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 2) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 3 :\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 7) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 4 :\n            org.apache.commons.codec.binary.BaseNCodec.Context.long = (org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 4;\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.long) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 5 :\n            org.apache.commons.codec.binary.BaseNCodec.Context.long = (org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 1;\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.long) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 6 :\n            org.apache.commons.codec.binary.BaseNCodec.Context.long = (org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 6;\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.long) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 7 :\n            org.apache.commons.codec.binary.BaseNCodec.Context.long = (org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 3;\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.long) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        default :\n            throw new java.lang.IllegalStateException((\"Impossible modulus \" + (org.apache.commons.codec.binary.BaseNCodec.Context.int)));\n    }\n} "},"status":-1},{"failures":[53],"tindex":"a5828032-4361-11e5-93b7-078cfb4322c8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:193","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Metaphone.isNextChar(java.lang.StringBuilder, int, 'H')) {\n    if (((int == 0) && (int >= 3)) && org.apache.commons.codec.language.Metaphone.(isVowel(java.lang.StringBuilder, 2))) {\n        java.lang.StringBuilder.append('K');\n    } else {\n        java.lang.StringBuilder.append('X');\n    }\n} else {\n    java.lang.StringBuilder.append('K');\n}"},"variableMap":{"wdsz":"n","code":"local","this":"this","local":"local","n":"wdsz"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:215","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'H'))) {\n    break;\n} "},"status":-1},{"failures":[],"tindex":"a582a743-4361-11e5-93b7-cfc69b2cfbbf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:273","type":"CtReturnImpl","sourcecode":"return int + 1"},"variableMap":{"index":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:232","type":"CtReturnImpl","sourcecode":"return (org.apache.commons.codec.binary.BaseNCodec.Context.byte[]) != null ? (org.apache.commons.codec.binary.BaseNCodec.Context.int) - (org.apache.commons.codec.binary.BaseNCodec.Context.int) : 0"},"status":-2},{"failures":[54,55,56,57,58],"tindex":"a582a744-4361-11e5-93b7-89e5f2c560e5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:128","type":"CtReturnImpl","sourcecode":"return java.lang.String.substring(0, org.apache.commons.codec.language.Caverphone2.java.lang.String.length())"},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"str","txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:247","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.net.URLCodec.encode(java.lang.String, org.apache.commons.codec.net.URLCodec.getDefaultCharset());\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.EncoderException(java.io.UnsupportedEncodingException.getMessage() , java.io.UnsupportedEncodingException);\n}"},"status":-1},{"failures":[],"tindex":"a582ce55-4361-11e5-93b7-5f63c4356f61","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:198","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null) {\n    return null;\n} else if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.BCodec.encode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be encoded using BCodec\"));\n}"},"variableMap":{"this":"ascii","value":"ascii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:116","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null) {\n    return org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"status":-2},{"failures":[59,60,61,62,63,64,65],"tindex":"a582f566-4361-11e5-93b7-7909f900ad1f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:219","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[])"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
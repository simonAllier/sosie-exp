{"failureDictionary":{"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":34,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":18,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":3,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":9,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":10,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":8,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":15,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":38,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":30,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":16,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":4,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":24,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":17,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":21,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":27,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":28,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":26,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":29,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":0,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":31,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":37,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":32,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":6,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":19,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":22,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":25,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":2,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":41,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":12,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":14,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":23,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":1,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":11,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectException":40,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":5,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":13,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":20,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":33,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":7,"org.apache.commons.codec.language.SoundexTest.testDifference":42,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":36,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":35,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":39},"transformations":[{"failures":[],"tindex":"04be6984-4315-11e5-b4a9-1baeef5ac535","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.IllegalArgumentException(((\"lineLength \" + int) + \" > 0, but lineSeparator is null\"));\n} "},"variableMap":{"lineSeparator":"raw","lineLength":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:278","type":"CtForImpl","sourcecode":"for (int int = 0, int int = (char[].int) - 1 ; int < (byte[].int) ; int++ , int -= 8) {\n    for (int int = 0 ; int < (org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++int) {\n        if (((byte[][int]) & (org.apache.commons.codec.binary.BinaryCodec.int[][int])) == 0) {\n            char[][(int - int)] = '0';\n        } else {\n            char[][(int - int)] = '1';\n        }\n    }\n}"},"status":-2},{"failures":[],"tindex":"04be9095-4315-11e5-b4a9-275b4dc16fe2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:61","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^tough\", \"tou2f\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:108","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"w$\", \"3\")"},"status":1},{"failures":[],"tindex":"04be9096-4315-11e5-b4a9-999a3cc1ec3b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:858","type":"CtReturnImpl","sourcecode":"return ((((java.lang.String.indexOf('W')) > (-1)) || ((java.lang.String.indexOf('K')) > (-1))) || ((java.lang.String.indexOf(\"CZ\")) > (-1))) || ((java.lang.String.indexOf(\"WITZ\")) > (-1))"},"variableMap":{"value":"cs1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:78","type":"CtReturnImpl","sourcecode":"return java.lang.CharSequence.equals(java.lang.CharSequence)"},"status":-2},{"failures":[],"tindex":"04be9097-4315-11e5-b4a9-5fdb40c77d80","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:309","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][1])"},"status":-2},{"failures":[],"tindex":"04be9098-4315-11e5-b4a9-494e73584e98","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:65","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^trough\", \"trou2f\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:102","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"why\", \"Why\")"},"status":1},{"failures":[0,1,2,3,4,5,6],"tindex":"04be9099-4315-11e5-b4a9-cb455ea3da91","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:478","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte"},"status":-1},{"failures":[],"tindex":"04be909a-4315-11e5-b4a9-4f1982d5e2ed","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    int++;\n    int = 128;\n} "},"variableMap":{"u":"index","y":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:344","type":"CtIfImpl","sourcecode":"if ((int > 0) && (int < (java.lang.StringBuilder.length()))) {\n    boolean = (java.lang.StringBuilder.charAt((int - 1))) == char;\n} "},"status":-2},{"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"tindex":"04beb7ab-4315-11e5-b4a9-0b4f7c29ab49","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:73","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('(')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"printable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:282","type":"CtIfImpl","sourcecode":"if (boolean) {\n    int int = 1;\n    for (int int = 0 ; int < ((byte[].int) - 3) ; int++) {\n        int int = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(int, byte[]);\n        if (int < (org.apache.commons.codec.net.QuotedPrintableCodec.int)) {\n            int += org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int, !(java.util.BitSet.get(int)), java.io.ByteArrayOutputStream);\n        } else {\n            org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int, ((!(java.util.BitSet.get(int))) || org.apache.commons.codec.net.QuotedPrintableCodec.(org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(int))), java.io.ByteArrayOutputStream);\n            java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n            java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n            java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n            int = 1;\n        }\n    }\n    int int = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(((byte[].int) - 3), byte[]);\n    boolean boolean = (!(java.util.BitSet.get(int))) || (org.apache.commons.codec.net.QuotedPrintableCodec.(org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(int)) && (int > ((org.apache.commons.codec.net.QuotedPrintableCodec.int) - 5)));\n    int += org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int, boolean, java.io.ByteArrayOutputStream);\n    if (int > ((org.apache.commons.codec.net.QuotedPrintableCodec.int) - 2)) {\n        java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n    } \n    for (int int = (byte[].int) - 2 ; int < (byte[].int) ; int++) {\n        int = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(int, byte[]);\n        boolean = (!(java.util.BitSet.get(int))) || ((int > ((byte[].int) - 2)) && org.apache.commons.codec.net.QuotedPrintableCodec.(org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(int)));\n        org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int, boolean, java.io.ByteArrayOutputStream);\n    }\n} else {\n    for (final byte byte : byte[]) {\n        int int = byte;\n        if (int < 0) {\n            int = 256 + int;\n        } \n        if (java.util.BitSet.get(int)) {\n            java.io.ByteArrayOutputStream.write(int);\n        } else {\n            org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(int, java.io.ByteArrayOutputStream);\n        }\n    }\n}"},"status":-1},{"failures":[24,25,26,27,28,29,30,31,32],"tindex":"04beb7ac-4315-11e5-b4a9-59b88526a503","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:89","type":"CtIfImpl","sourcecode":"if ((int > (byte[].int)) || ((int + int) > (byte[].int))) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if (int > 0) {\n    if (boolean) {\n        org.apache.commons.codec.binary.BaseNCodec.encode(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n    } else {\n        org.apache.commons.codec.binary.BaseNCodec.decode(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n    }\n    org.apache.commons.codec.binary.BaseNCodecOutputStream.flush(false);\n} "},"status":-1},{"failures":[],"tindex":"04beb7ad-4315-11e5-b4a9-49675b9ca0a6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:376","type":"CtAssignmentImpl","sourcecode":"int = (int >>> 16) | (int & -65536)"},"variableMap":{"s":"pos","t":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:365","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-2},{"failures":[26,27,33,34,28,35],"tindex":"04bedebe-4315-11e5-b4a9-33560af74941","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.B64:57","type":"CtLocalVariableImpl","sourcecode":"int int = (((byte << 16) & 16777215) | ((byte << 8) & 65535)) | (byte & 255)"},"variableMap":{"b2":"b","b0":"b","b1":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:354","type":"CtLocalVariableImpl","sourcecode":"final int int = this.byte[][byte]"},"status":-1},{"failures":[36,37],"tindex":"04bedebf-4315-11e5-b4a9-41cf7a1429dc","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:760","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'H') {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n    int += 2;\n} else {\n    if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"ZO\", \"ZI\", \"ZA\")) || (boolean && ((int > 0) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int - 1))) != 'T')))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"S\", \"TS\");\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    }\n    int = org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'Z' ? int + 2 : int + 1;\n}"},"variableMap":{"result":"result","this":"this","index":"index","slavoGermanic":"slavoGermanic","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:415","type":"CtIfImpl","sourcecode":"if (((!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 2), 2, \"EY\"))) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) != 'Y')) && (!boolean)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"N\", \"KN\");\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"KN\");\n}"},"status":-1},{"failures":[38],"tindex":"04bedec0-4315-11e5-b4a9-130236691bb9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:75","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"04bedec1-4315-11e5-b4a9-2fd7de4f1cdc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:192","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.util.regex.Matcher.group(1)"},"status":-2},{"failures":[39],"tindex":"04bedec2-4315-11e5-b4a9-9d4fcec06826","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:547","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getSha384Digest()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:641","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getSha512Digest()"},"status":-1},{"failures":[],"tindex":"04bedec3-4315-11e5-b4a9-df1062e59f78","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:420","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha256(byte[]).doFinal(byte[]);\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalArgumentException(java.lang.IllegalStateException);\n}"},"status":-2},{"failures":[],"tindex":"04bf05d4-4315-11e5-b4a9-8789814508e3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:252","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.decodeHex(char[])"},"variableMap":{"this":"obj","charArray":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:313","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.encode(((byte[])(java.lang.Object)))"},"status":-2},{"failures":[],"tindex":"04bf05d5-4315-11e5-b4a9-ebb02c5faa38","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:298","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[2]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:339","type":"CtLocalVariableImpl","sourcecode":"final int[] int[] = new int[32]"},"status":-2},{"failures":[40],"tindex":"04bf05d6-4315-11e5-b4a9-43287809e2d5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"variableMap":{"salt":"raw"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:98","type":"CtIfImpl","sourcecode":"if (!(java.lang.Object instanceof byte[])) {\n    throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\");\n} "},"status":-1},{"failures":[41,42],"tindex":"04bf05d7-4315-11e5-b4a9-c1a12a958c18","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:188","type":"CtReturnImpl","sourcecode":"return 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:121","type":"CtReturnImpl","sourcecode":"return int"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
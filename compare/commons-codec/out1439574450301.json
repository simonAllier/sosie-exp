{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":25,"org.apache.commons.codec.language.NysiisTest.testSnat":43,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":19,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":0,"org.apache.commons.codec.language.NysiisTest.testDropBy":45,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":33,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":18,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":52,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":10,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":8,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":27,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":16,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":28,"org.apache.commons.codec.language.NysiisTest.testRule1":38,"org.apache.commons.codec.language.NysiisTest.testRule7":40,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":17,"org.apache.commons.codec.language.NysiisTest.testRule5":39,"org.apache.commons.codec.language.NysiisTest.testCap":34,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":23,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":44,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":30,"org.apache.commons.codec.language.NysiisTest.testBran":41,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":48,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":31,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":3,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":7,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":49,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":24,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":4,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":21,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":50,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":29,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":5,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":1,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":14,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":2,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":13,"org.apache.commons.codec.language.NysiisTest.testDad":35,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":6,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":20,"org.apache.commons.codec.language.NysiisTest.testOthers":46,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":12,"org.apache.commons.codec.language.NysiisTest.testTranan":47,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":53,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":15,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":32,"org.apache.commons.codec.language.NysiisTest.testDan":36,"org.apache.commons.codec.language.NysiisTest.testFal":37,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":22,"org.apache.commons.codec.language.NysiisTest.testSnad":42,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":9,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":26,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":11,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":51},"transformations":[{"failures":[0,1,2],"tindex":"88e9f3f1-42ac-11e5-abed-5f15158f94d4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:469","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][0], byte[][21], byte[][42], 4, java.lang.StringBuilder)"},"status":-1},{"failures":[3,4,5,6,7,8,9],"tindex":"88ea1b02-42ac-11e5-abed-ad821cc31d9e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"saltBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:218","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[])"},"status":-1},{"failures":[10,0,1,2,11,12,13,14],"tindex":"88ea1b03-42ac-11e5-abed-6be4afb1695d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"keyLen"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:275","type":"CtForImpl","sourcecode":"for (int int = 1 ; int <= int ; int++) {\n    java.security.MessageDigest.update(byte[]);\n}"},"status":-1},{"failures":[],"tindex":"88ea1b04-42ac-11e5-abed-7f3dd4d1dea6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:312","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)))"},"variableMap":{"org.apache.commons.codec.language.bm.RuleType.RULES":"object"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:407","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(((((\"This method\\'s parameter was expected to be of the type \" + (java.lang.String.java.lang.String.getName())) + \". But actually it was of the type \") + (java.lang.Object.getClass().getName())) + \".\"))"},"status":-2},{"failures":[15,16,17,18,19,20,21,22,23],"tindex":"88ea1b05-42ac-11e5-abed-8d35622e29f3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"to","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"to","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"to","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"to","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"terminator","minRating":"to","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"to","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"to","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"to","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"terminator","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"terminator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (int == int) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"status":-1},{"failures":[24,25,26,27],"tindex":"88ea1b06-42ac-11e5-abed-1bf2dca35538","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:532","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', ' ')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:684","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 2), 2, \"OM\", \"AM\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 4, \"VAN \", \"VON \"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 3, \"SCH\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('0', 'T');\n}"},"status":-1},{"failures":[16,17,18,28,20,21,22,29],"tindex":"88ea4217-42ac-11e5-abed-b5540ff55f9c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:79","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byte[]))"},"status":-1},{"failures":[],"tindex":"88ea4218-42ac-11e5-abed-bb91f40891db","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:240","type":"CtOperatorAssignmentImpl","sourcecode":"int |= 1"},"variableMap":{"c":"rightLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:365","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":0},{"failures":[],"tindex":"88ea4219-42ac-11e5-abed-61a0d4ef2dfd","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:283","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.B64:57","type":"CtLocalVariableImpl","sourcecode":"int int = (((byte << 16) & 16777215) | ((byte << 8) & 65535)) | (byte & 255)"},"status":-2},{"failures":[],"tindex":"88ea421a-42ac-11e5-abed-0d7ea9671366","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:280","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.conditionC0(java.lang.String, int)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    int += 2;\n} else if ((int == 0) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 6, \"CAESAR\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CH\")) {\n    int = org.apache.commons.codec.language.DoubleMetaphone.handleCH(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int);\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CZ\")) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 4, \"WICZ\")))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 3, \"CIA\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n    int += 3;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CC\")) && (!((int == 1) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, 0)) == 'M')))) {\n    return org.apache.commons.codec.language.DoubleMetaphone.handleCC(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int);\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CK\", \"CG\", \"CQ\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"CI\", \"CE\", \"CY\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 3, \"CIO\", \"CIE\", \"CIA\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    }\n    int += 2;\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \" C\", \" Q\", \" G\")) {\n        int += 3;\n    } else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"C\", \"K\", \"Q\")) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"CE\", \"CI\")))) {\n        int += 2;\n    } else {\n        int++;\n    }\n}"},"status":-2},{"failures":[],"tindex":"88ea692b-42ac-11e5-abed-cdb7df3a9095","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:391","type":"CtAssignmentImpl","sourcecode":"char = char"},"variableMap":{"code":"last","chr":"last"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:188","type":"CtAssignmentImpl","sourcecode":"char = '*'"},"status":-2},{"failures":[30,31],"tindex":"88ea692c-42ac-11e5-abed-959a5a3eb7d6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:359","type":"CtAssignmentImpl","sourcecode":"char = '3'"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:363","type":"CtAssignmentImpl","sourcecode":"char = '4'"},"status":-1},{"failures":[10,11,12,13,14],"tindex":"88ea692d-42ac-11e5-abed-255bfea9f571","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:292","type":"CtIfImpl","sourcecode":"if ((java.lang.StringBuilder.length()) > 1) {\n    char char = java.lang.StringBuilder.charAt(((java.lang.StringBuilder.length()) - 1));\n    if (char == 'S') {\n        java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1));\n        char = java.lang.StringBuilder.charAt(((java.lang.StringBuilder.length()) - 1));\n    } \n    if ((java.lang.StringBuilder.length()) > 2) {\n        final char char = java.lang.StringBuilder.charAt(((java.lang.StringBuilder.length()) - 2));\n        if ((char == 'A') && (char == 'Y')) {\n            java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 2));\n        } \n    } \n    if (char == 'A') {\n        java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1));\n    } \n} "},"variableMap":{"key":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:458","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][21], byte[][1], byte[][11], 4, java.lang.StringBuilder)"},"status":-1},{"failures":[],"tindex":"88ea692e-42ac-11e5-abed-012390983108","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:339","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BaseNCodec.Context.boolean) {\n    return ;\n} "},"status":-2},{"failures":[32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"tindex":"88ea692f-42ac-11e5-abed-c79771fc9b44","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:212","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.setCharAt(1, char)"},"variableMap":{"buffer":"key","charOne":"lastChar"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:310","type":"CtIfImpl","sourcecode":"if (char == 'A') {\n    java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1));\n} "},"status":-1},{"failures":[],"tindex":"88ea6930-42ac-11e5-abed-17ee9aee342f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:332","type":"CtLocalVariableImpl","sourcecode":"char char = '/'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:331","type":"CtLocalVariableImpl","sourcecode":"char char = '-'"},"status":-2},{"failures":[],"tindex":"88ea9041-42ac-11e5-abed-b1da0ec3814f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:413","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.ColognePhonetic.encode(((java.lang.String)(java.lang.Object)))"},"variableMap":{"this":"pObject","object":"pObject"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:114","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(((java.lang.String)(java.lang.Object)))"},"status":-2},{"failures":[30,49,50],"tindex":"88ea9042-42ac-11e5-abed-8d394dbe618f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:359","type":"CtAssignmentImpl","sourcecode":"char = '3'"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:379","type":"CtAssignmentImpl","sourcecode":"char = '4'"},"status":-1},{"failures":[51,52],"tindex":"88ea9043-42ac-11e5-abed-750483ac9568","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:329","type":"CtAssignmentImpl","sourcecode":"int = ((int ^ (int << 16)) ^ int) ^ (int[][int])"},"status":-1},{"failures":[53,24,25,26,27],"tindex":"88ea9044-42ac-11e5-abed-21c7f836c752","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((java.lang.String.length()) != 1) || ((java.lang.String.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + java.lang.String) + \" in \") + java.lang.String));\n} "},"variableMap":{"rawLine":"value","leftCharacter":"value","rightCharacter":"value","location":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:552","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.conditionL0(java.lang.String, int)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendPrimary('L');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('L');\n}"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
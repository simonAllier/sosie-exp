{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":6,"org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64":9,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":24,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":16,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":0,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":15,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":11,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":27,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":20,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":5,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":17,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":14,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":12,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":1,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":18,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":29,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":4,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":2,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":8,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":13,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":26,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":19,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":21,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":25,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":3,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":23,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":22,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":7,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":10,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":28},"transformations":[{"failures":[],"tindex":"2df5286c-433f-11e5-b36b-0fb0ae1c7ab9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:93","type":"CtAssignmentImpl","sourcecode":"byte[][int] = ((byte)(int & 255))"},"variableMap":{"f":"ibitWorkArea","i":"pos","out":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:360","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 10) & (org.apache.commons.codec.binary.Base64.int))]"},"status":-2},{"failures":[0,1,2],"tindex":"2df54f7d-433f-11e5-b36b-75d111a35c71","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:285","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][2], byte[][8], byte[][14], 4, java.lang.StringBuilder)"},"variableMap":{"finalb":"altResult","passwd":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:485","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][37], byte[][58], byte[][16], 4, java.lang.StringBuilder)"},"status":-1},{"failures":[3,4,5,6],"tindex":"2df54f7e-433f-11e5-b36b-697bd3a9a289","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:142","type":"CtAssignmentImpl","sourcecode":"int = int + 1"},"variableMap":{"from":"index","to":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:169","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.handleT(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int)"},"status":-1},{"failures":[7,8,9,10],"tindex":"2df54f7f-433f-11e5-b36b-dd2a7bd67ecc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:510","type":"CtReturnImpl","sourcecode":"return (byte == (org.apache.commons.codec.binary.BaseNCodec.byte)) || (((byte >= 0) && (byte < (org.apache.commons.codec.binary.Base64.byte[].int))) && ((org.apache.commons.codec.binary.Base64.byte[][byte]) != (-1)))"},"status":-1},{"failures":[11],"tindex":"2df54f80-433f-11e5-b36b-ad24c495aca0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:207","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacMd5(byte[])"},"variableMap":{"this":"this","key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:528","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byte[])"},"status":-1},{"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24],"tindex":"2df57691-433f-11e5-b36b-c17a851aec58","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtIfImpl","sourcecode":"if (java.lang.String.contains(java.lang.String)) {\n    final java.lang.String java.lang.String = java.lang.String.substring(0, 1);\n    java.lang.String = java.lang.String.replace(java.lang.String, java.lang.String);\n} "},"variableMap":{"replacedName":"line","dc":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:261","type":"CtIfImpl","sourcecode":"if (java.lang.String.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    boolean = false;\n} "},"status":-1},{"failures":[],"tindex":"2df57692-433f-11e5-b36b-35a5cadd2658","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:235","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.org.apache.commons.codec.binary.StringUtils.getBytes(java.lang.String, org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-2},{"failures":[],"tindex":"2df57693-433f-11e5-b36b-f17417db0496","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:384","type":"CtIfImpl","sourcecode":"if (char == 'R') {\n    char = '7';\n} else if (char == 'L') {\n    char = '5';\n} else if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"variableMap":{"code":"ch","chr":"ch"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:522","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>) {\n    for (final java.lang.String java.lang.String : java.lang.String[]) {\n        final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = boolean ? org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.createBranch() : org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch;\n        final boolean boolean = ((char == 'm') && (char == 'n')) || ((char == 'n') && (char == 'm'));\n        org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.processNextReplacement(java.lang.String, boolean);\n        if (boolean) {\n            java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.add(org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch);\n        } else {\n            break;\n        }\n    }\n}"},"status":-2},{"failures":[25],"tindex":"2df57694-433f-11e5-b36b-cb9c00db9aba","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:89","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('*')"},"status":-1},{"failures":[26,27],"tindex":"2df57695-433f-11e5-b36b-898639258fd3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:169","type":"CtInvocationImpl","sourcecode":"java.io.ByteArrayOutputStream.write(' ')"},"variableMap":{"buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:297","type":"CtInvocationImpl","sourcecode":"java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-1},{"failures":[28,29],"tindex":"2df57696-433f-11e5-b36b-1b2b67f8d6a3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:142","type":"CtAssignmentImpl","sourcecode":"int = int + 1"},"variableMap":{"from":"right","to":"right"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:312","type":"CtAssignmentImpl","sourcecode":"int = int[][0]"},"status":-1},{"failures":[],"tindex":"2df59da7-433f-11e5-b36b-e79d649c944d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.B64:77","type":"CtReturnImpl","sourcecode":"return java.lang.StringBuilder.toString()"},"status":-2},{"failures":[],"tindex":"2df59da8-433f-11e5-b36b-313d9b71bf64","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    int++;\n    int = 128;\n} "},"variableMap":{"u":"rightLength","y":"rightLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:347","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '0';\n} else if (((char == 'H') || (char < 'A')) || (char > 'Z')) {\n    if (char == '/') {\n        continue;\n    } \n    char = '-';\n} else if ((char == 'B') || ((char == 'P') && (char != 'H'))) {\n    char = '1';\n} else if (((char == 'D') || (char == 'T')) && (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n    char = '2';\n} else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '3';\n} else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '4';\n} else if ((char == 'X') && (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n    char = '4';\n    org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.addLeft('S');\n    int++;\n} else if ((char == 'S') || (char == 'Z')) {\n    char = '8';\n} else if (char == 'C') {\n    if (char == '/') {\n        if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n            char = '4';\n        } else {\n            char = '8';\n        }\n    } else {\n        if (org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) || (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n            char = '8';\n        } else {\n            char = '4';\n        }\n    }\n} else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '8';\n} else if (char == 'R') {\n    char = '7';\n} else if (char == 'L') {\n    char = '5';\n} else if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"status":-2},{"failures":[],"tindex":"2df59da9-433f-11e5-b36b-cb1db6a99887","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:181","type":"CtThrowImpl","sourcecode":"throw new java.io.IOException(\"mark/reset not supported\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:135","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\")"},"status":-2},{"failures":[],"tindex":"2df59daa-433f-11e5-b36b-936a1792a055","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:45","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.String.length()"},"status":-2},{"failures":[],"tindex":"2df59dab-433f-11e5-b36b-ff9f31476ffe","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:134","type":"CtLocalVariableImpl","sourcecode":"int int = java.lang.String.indexOf(org.apache.commons.codec.net.RFC1522Codec.char, int)"},"status":-2},{"failures":[],"tindex":"2df59dac-433f-11e5-b36b-35ae97cc4f67","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.toString(), byte[])"},"variableMap":{"this":"this","key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_384"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:117","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, byte[])"},"status":-2},{"failures":[3,4,5,6],"tindex":"2df5c4bd-433f-11e5-b36b-5dec76b680ab","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:725","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 4, \"WICZ\", \"WITZ\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"TS\", \"FX\");\n    int += 4;\n} else {\n    int++;\n}"},"variableMap":{"result":"result","this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:431","type":"CtIfImpl","sourcecode":"if ((((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"ER\")) || (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'Y')) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\")))) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 1, \"E\", \"I\")))) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 3, \"RGY\", \"OGY\")))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K', 'J');\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"E\", \"I\", \"Y\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 4, \"AGGI\", \"OGGI\"))) {\n    if ((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 4, \"VAN \", \"VON \")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 3, \"SCH\"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"ET\"))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    } else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 3, \"IER\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'K');\n    }\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'G') {\n    int += 2;\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n} else {\n    int++;\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n}"},"status":-1},{"failures":[],"tindex":"2df5c4be-433f-11e5-b36b-1fa0df7a4801","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:62","type":"CtIfImpl","sourcecode":"if (char == char) {\n    continue;\n} "},"variableMap":{"c1":"lastCode","c2":"lastCode"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:369","type":"CtIfImpl","sourcecode":"if (char == '/') {\n    if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n        char = '4';\n    } else {\n        char = '8';\n    }\n} else {\n    if (org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) || (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n        char = '8';\n    } else {\n        char = '4';\n    }\n}"},"status":-2},{"failures":[],"tindex":"2df5c4bf-433f-11e5-b36b-d1cfdbcc8cc7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:486","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 2))) & (org.apache.commons.codec.binary.Base32.int))]"},"variableMap":{"encodeTable":"encodeTable","pos":"org.apache.commons.codec.binary.Base32.MASK_5BITS","org.apache.commons.codec.binary.Base32.MASK_5BITS":"pos","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"encodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:463","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 1))) & (org.apache.commons.codec.binary.Base32.int))]"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":26,"org.apache.commons.codec.binary.HexTest.testCustomCharset":37,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":0,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":17,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":18,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":5,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":19,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":4,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":10,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":23,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":39,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":42,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":6,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":21,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":22,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":24,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":25,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":3,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":1,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":11,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":16,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":9,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":36,"org.apache.commons.codec.binary.Base64Test.testUUID":41,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":15,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData":13,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":12,"org.apache.commons.codec.language.SoundexTest.testB650":20,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":2,"org.apache.commons.codec.language.SoundexTest.testNewInstance":28,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":32,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":34,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":7,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":33,"org.apache.commons.codec.language.SoundexTest.testDifference":27,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":29,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":14,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":40,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":35,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":30,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":38,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":8,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":31},"transformations":[{"failures":[],"tindex":"0c62572c-4403-11e5-a50c-91eab7bfee4c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:160","type":"CtReturnImpl","sourcecode":"return null"},"status":0},{"failures":[],"tindex":"0c62a54d-4403-11e5-a50c-d9e059d237e6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"saltBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:181","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[])"},"status":0},{"failures":[],"tindex":"0c62a54e-4403-11e5-a50c-5d2aa902e178","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:216","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (byte[].int) ; int++) {\n    byte[][int] = 0;\n}"},"variableMap":{"length":"keyLen","key":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:275","type":"CtForImpl","sourcecode":"for (int int = 1 ; int <= int ; int++) {\n    java.security.MessageDigest.update(byte[]);\n}"},"status":1},{"failures":[],"tindex":"0c62a54f-4403-11e5-a50c-cb3ff4640879","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:357","type":"CtReturnImpl","sourcecode":"return boolean"},"status":-2},{"failures":[],"tindex":"0c62a550-4403-11e5-a50c-db3dd31eaa88","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:294","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + java.lang.String) + \" in \") + java.lang.String))"},"variableMap":{"rawLine":"value","location":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:227","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be decoded using BCodec\"))"},"status":-2},{"failures":[0],"tindex":"0c62cb61-4403-11e5-a50c-17394b95b99e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:113","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"r$\", \"3\")"},"status":-1},{"failures":[],"tindex":"0c62cb62-4403-11e5-a50c-b57c83c63eaf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:692","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.binary.Base64().decode(java.lang.String)"},"status":-2},{"failures":[1,2,3,4,5,6],"tindex":"0c62cb63-4403-11e5-a50c-d11b2023adab","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:517","type":"CtInvocationImpl","sourcecode":"java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.clear()"},"variableMap":{"nextBranches":"nextBranches"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:522","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>) {\n    for (final java.lang.String java.lang.String : java.lang.String[]) {\n        final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = boolean ? org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.createBranch() : org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch;\n        final boolean boolean = ((char == 'm') && (char == 'n')) || ((char == 'n') && (char == 'm'));\n        org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.processNextReplacement(java.lang.String, boolean);\n        if (boolean) {\n            java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.add(org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch);\n        } else {\n            break;\n        }\n    }\n}"},"status":-1},{"failures":[],"tindex":"0c62cb64-4403-11e5-a50c-9f39ca6f5557","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:789","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"0c62f275-4403-11e5-a50c-af51329fec55","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || ((java.lang.String.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.java.lang.String;\n} "},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"str","txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:176","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"status":0},{"failures":[7],"tindex":"0c62f276-4403-11e5-a50c-85241785a4a2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:187","type":"CtAssignmentImpl","sourcecode":"byte[][int] = org.apache.commons.codec.net.QCodec.byte"},"status":-1},{"failures":[],"tindex":"0c62f277-4403-11e5-a50c-f7ea0f1dd57e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:113","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[int]"},"variableMap":{"avail":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:412","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[org.apache.commons.codec.binary.BaseNCodec.Context.int]"},"status":-2},{"failures":[8,9,10,11,12,13,14],"tindex":"0c62f278-4403-11e5-a50c-fb2036d67142","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with \\'(\\' so must end with \\')\\'\");\n} "},"variableMap":{"ph":"org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:540","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    java.lang.String = (org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} "},"status":-1},{"failures":[],"tindex":"0c631989-4403-11e5-a50c-73a167b522fa","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:361","type":"CtAssignmentImpl","sourcecode":"java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(java.lang.String)"},"status":0},{"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"tindex":"0c63198a-4403-11e5-a50c-f74efd4fd990","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:192","type":"CtIfImpl","sourcecode":"if (((char == char) || ('H' == char)) || ('W' == char)) {\n    return 0;\n} "},"variableMap":{"mappedChar":"mappedChar","preHWChar":"mappedChar","firstCode":"mappedChar"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:187","type":"CtIfImpl","sourcecode":"if ((int > 1) && (char != '0')) {\n    final char char = java.lang.String.charAt((int - 1));\n    if (('H' == char) || ('W' == char)) {\n        final char char = java.lang.String.charAt((int - 2));\n        final char char = org.apache.commons.codec.language.Soundex.map(char);\n        if (((char == char) || ('H' == char)) || ('W' == char)) {\n            return 0;\n        } \n    } \n} "},"status":-1},{"failures":[35,36],"tindex":"0c63198b-4403-11e5-a50c-bb2e7be34505","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:654","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"X\", \"SK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:488","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K')"},"status":-1},{"failures":[37,38,39,40,41,42],"tindex":"0c63409c-4403-11e5-a50c-55509d9aa399","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:188","type":"CtReturnImpl","sourcecode":"return 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:180","type":"CtReturnImpl","sourcecode":"return int"},"status":-1},{"failures":[35,36],"tindex":"0c63409d-4403-11e5-a50c-bf3788c75139","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:659","type":"CtIfImpl","sourcecode":"if (((int == 0) && (!org.apache.commons.codec.language.DoubleMetaphone.(isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, 3))))) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, 3)) != 'W')) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'S');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n}"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":18,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
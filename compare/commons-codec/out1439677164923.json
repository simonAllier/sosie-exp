{"failureDictionary":{"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":45,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":11,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":38,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":34,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":5,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":26,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":39,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":9,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":8,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":28,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":13,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":42,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":40,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":7,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":35,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":22,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":14,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":20,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":12,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":15,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":33,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":32,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":6,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":17,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":36,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":46,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":30,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":18,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":23,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":19,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":16,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":43,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":44,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":0,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":1,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":3,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":31,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":10,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":47,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":41,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":2,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":4,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":37,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":24,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":25,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":27,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":29,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":21},"transformations":[{"failures":[0],"tindex":"af98650a-439b-11e5-88f7-8d9f921cd6f9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtIfImpl","sourcecode":"if ((((java.lang.String == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(java.lang.String))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(java.lang.String))) || ((java.lang.String.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n} "},"variableMap":{"name":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:468","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"status":-1},{"failures":[1],"tindex":"af98b32b-439b-11e5-88f7-63bc732a2c00","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:148","type":"CtIfImpl","sourcecode":"if (!(org.apache.commons.codec.net.RFC1522Codec.getEncoding().equalsIgnoreCase(java.lang.String))) {\n    throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + java.lang.String) + \" encoded content\"));\n} "},"status":-1},{"failures":[],"tindex":"af98b32c-439b-11e5-88f7-4766a8f62b4e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:358","type":"CtReturnImpl","sourcecode":"return int + 2"},"variableMap":{"index":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:576","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"af98b32d-439b-11e5-88f7-ad4642dacd87","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:415","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"U\", org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"str1","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"str1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.AbstractCaverphone:77","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.StringEncoder.encode(java.lang.String)"},"status":-2},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15],"tindex":"af98b32e-439b-11e5-88f7-a74b14d4408f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:706","type":"CtIfImpl","sourcecode":"if (int > (java.lang.CharSequence.length())) {\n    return false;\n} "},"status":-1},{"failures":[16,17,18],"tindex":"af98da3f-439b-11e5-88f7-2df7fd565cae","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:100","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"wy\", \"Wy\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:90","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^[aeiou]\", \"A\")"},"status":-1},{"failures":[19,20],"tindex":"af98da40-439b-11e5-88f7-dff92834f68f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:425","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)"},"status":-1},{"failures":[21,22],"tindex":"af98da41-439b-11e5-88f7-43cd71976e6f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:421","type":"CtAssignmentImpl","sourcecode":"int = int + 2"},"variableMap":{"index":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:408","type":"CtOperatorAssignmentImpl","sourcecode":"int ^= int"},"status":-1},{"failures":[],"tindex":"af98da42-439b-11e5-88f7-ed9cd6b4e1a1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:725","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 4, \"WICZ\", \"WITZ\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"TS\", \"FX\");\n    int += 4;\n} else {\n    int++;\n}"},"status":-2},{"failures":[23,24],"tindex":"af98da43-439b-11e5-88f7-6b2982ba38c3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:111","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"l\", \"2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:93","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"t+\", \"T\")"},"status":-1},{"failures":[25,26,27,28],"tindex":"af990154-439b-11e5-88f7-312184946dcb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:367","type":"CtAssignmentImpl","sourcecode":"char = '8'"},"variableMap":{"code":"nextChar"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:342","type":"CtAssignmentImpl","sourcecode":"char = org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.getNextChar()"},"status":-1},{"failures":[],"tindex":"af990155-439b-11e5-88f7-69bf3eebf3c9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:358","type":"CtReturnImpl","sourcecode":"return int + 2"},"variableMap":{"index":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:206","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[29,19,30,31,32,33,20,34,35,36,37],"tindex":"af990156-439b-11e5-88f7-2bd1edfc6a4d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:211","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('T')"},"variableMap":{"code":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:430","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"$\")"},"status":-1},{"failures":[38,39,40,41,42,43,44,45,46],"tindex":"af990157-439b-11e5-88f7-959d2a5f2580","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:308","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[47],"tindex":"af992868-439b-11e5-88f7-573caef94340","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:70","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"mb$\", \"m2\")"},"status":-1},{"failures":[],"tindex":"af992869-439b-11e5-88f7-894ddc13b051","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:401","type":"CtAssignmentImpl","sourcecode":"byte[][int++] = ((byte)((int >>> 16) & 255))"},"variableMap":{"b":"buffer","offset":"ibitWorkArea","iValue":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:477","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2},{"failures":[],"tindex":"af99286a-439b-11e5-88f7-fd6fda813b30","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:438","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha1(java.lang.String))"},"status":-2},{"failures":[],"tindex":"af99286b-439b-11e5-88f7-17e2cd6fac9e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:351","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) << 4) & (org.apache.commons.codec.binary.Base64.int))]"},"variableMap":{"encodeTable":"buffer","ibitWorkArea":"pos","pos":"ibitWorkArea","context":"context","org.apache.commons.codec.binary.Base64.MASK_6BITS":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:449","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2},{"failures":[],"tindex":"af994f7c-439b-11e5-88f7-a15849208d33","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:189","type":"CtIfImpl","sourcecode":"if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"length","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"len","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"len","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"length","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"length","minRating":"len","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"offset","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"offset","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"len","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"offset","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"offset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:89","type":"CtIfImpl","sourcecode":"if ((int > (byte[].int)) || ((int + int) > (byte[].int))) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if (int > 0) {\n    if (boolean) {\n        org.apache.commons.codec.binary.BaseNCodec.encode(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n    } else {\n        org.apache.commons.codec.binary.BaseNCodec.decode(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n    }\n    org.apache.commons.codec.binary.BaseNCodecOutputStream.flush(false);\n} "},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":19,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
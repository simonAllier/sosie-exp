{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":73,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":8,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":21,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":59,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":78,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":60,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":40,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":52,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":26,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":18,"org.apache.commons.codec.binary.Base64Test.testBase64":24,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":62,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":30,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":29,"org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt":34,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":51,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":67,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":66,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":1,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":71,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":33,"org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt":37,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":49,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":63,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":77,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NullValue_ReturnNullSuccessfully":82,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":23,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":3,"org.apache.commons.codec.binary.Base64Test.testPairs":13,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":20,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":45,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":25,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":44,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":76,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":27,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":80,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":46,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":50,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":15,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":74,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":16,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":19,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":10,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":81,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":17,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":9,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":0,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":2,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":31,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":41,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":42,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":65,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":72,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":5,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":7,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":55,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":48,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":79,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NINO_NoChange":83,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":68,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":32,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithEmptySalt":35,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":75,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":56,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":28,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":4,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":57,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":69,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":12,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":53,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectException":38,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":22,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":43,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":54,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":58,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":11,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":39,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":64,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":47,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":6,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":70,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithHalfSalt":36,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":61,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":14},"transformations":[{"failures":[],"tindex":"6be36397-42eb-11e5-a584-e9a8fb3dcb96","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (int == ' ') {\n    int = '+';\n} "},"variableMap":{"b":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:630","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"SC\")) {\n    int = org.apache.commons.codec.language.DoubleMetaphone.handleSC(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int);\n} else {\n    if ((int == ((java.lang.String.length()) - 1)) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 2, \"AI\", \"OI\"))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('S');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    }\n    int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"S\", \"Z\") ? int + 2 : int + 1;\n}"},"status":-2},{"failures":[],"tindex":"6be3d8c8-42eb-11e5-a584-5f8102d01e3f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:435","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.substring(org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim()"},"variableMap":{"org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","line":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:332","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = new java.lang.String(char[]).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":0},{"failures":[0,1,2,3,4],"tindex":"6be3ffd9-42eb-11e5-a584-5980af0c84ff","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:111","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"l\", \"2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:92","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"j\", \"y\")"},"status":-1},{"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"tindex":"6be426ea-42eb-11e5-a584-0f0ceec45094","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:361","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 4) & (org.apache.commons.codec.binary.Base64.int))]"},"status":-1},{"failures":[34,35,36,37],"tindex":"6be426eb-42eb-11e5-a584-65c2b913db66","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:332","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"finalRules can not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:205","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + java.lang.String))"},"status":-1},{"failures":[38],"tindex":"6be44dfc-42eb-11e5-a584-85cd02fffa15","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:132","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:99","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\")"},"status":-1},{"failures":[],"tindex":"6be4750d-42eb-11e5-a584-6f59dfef0f29","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:384","type":"CtIfImpl","sourcecode":"if (char == 'R') {\n    char = '7';\n} else if (char == 'L') {\n    char = '5';\n} else if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"variableMap":{"code":"hex1","chr":"hex1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:144","type":"CtInvocationImpl","sourcecode":"java.io.ByteArrayOutputStream.write(char)"},"status":-2},{"failures":[],"tindex":"6be4750e-42eb-11e5-a584-eb386dc22fc1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"c","minRating":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:115","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    java.io.OutputStream.write(byte[], 0, int);\n} "},"status":-2},{"failures":[39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"tindex":"6be4c32f-42eb-11e5-a584-77af8a2f50cd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.IllegalArgumentException(((\"lineLength \" + int) + \" > 0, but lineSeparator is null\"));\n} "},"variableMap":{"lineSeparator":"bytes","lineLength":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:359","type":"CtIfImpl","sourcecode":"if (int == (org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n    try {\n        if ((byte[][++int]) == (org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n            continue;\n        } \n        final int int = org.apache.commons.codec.net.Utils.digit16(byte[][int]);\n        final int int = org.apache.commons.codec.net.Utils.digit16(byte[][++int]);\n        java.io.ByteArrayOutputStream.write(((char)((int << 4) + int)));\n    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n        throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , java.lang.ArrayIndexOutOfBoundsException);\n    }\n} else if ((int != (org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (int != (org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n    java.io.ByteArrayOutputStream.write(int);\n} "},"status":-1},{"failures":[54,55,56,57,58,59,60,61,62,63,64,65,66,67],"tindex":"6be4ea40-42eb-11e5-a584-fb64fa32bd39","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:304","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"variableMap":{"lineSeparator":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:300","type":"CtAssignmentImpl","sourcecode":"this.byte[] = new byte[byte[].int]"},"status":-1},{"failures":[68,69],"tindex":"6be51151-42eb-11e5-a584-69595a8b319c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:81","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"d\", \"t\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:333","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(1)"},"status":-1},{"failures":[],"tindex":"6be51152-42eb-11e5-a584-5df4bdd254b2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:94","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:525","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = boolean ? org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.createBranch() : org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch"},"status":-2},{"failures":[],"tindex":"6be53863-42eb-11e5-a584-a195de53aa51","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:270","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.char[]"},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY":"org.apache.commons.codec.language.Nysiis.CHARS_SSS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:149","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[70,71,72,73],"tindex":"6be55f74-42eb-11e5-a584-e90f9dff31e2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:552","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.conditionL0(java.lang.String, int)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendPrimary('L');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('L');\n}"},"variableMap":{"result":"result","this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:740","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    int++;\n} else {\n    if (!((int == ((java.lang.String.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 3), 3, \"IAU\", \"EAU\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 2, \"AU\", \"OU\"))))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"KS\");\n    } \n    int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"C\", \"X\") ? int + 2 : int + 1;\n}"},"status":-1},{"failures":[74],"tindex":"6be58685-42eb-11e5-a584-0157c5194357","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Crypt:67","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[])"},"variableMap":{"keyBytes":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:83","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[], null)"},"status":-1},{"failures":[70,71],"tindex":"6be5ad96-42eb-11e5-a584-eb9278999d52","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:368","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 2, \"MC\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'K');\n    }\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n}"},"variableMap":{"result":"result","this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:447","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 3, \"IER\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'K');\n}"},"status":-1},{"failures":[],"tindex":"6be5d4a7-42eb-11e5-a584-cd0eed8e879b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:366","type":"CtIfImpl","sourcecode":"if ((char == 'S') || (char == 'Z')) {\n    char = '8';\n} else if (char == 'C') {\n    if (char == '/') {\n        if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n            char = '4';\n        } else {\n            char = '8';\n        }\n    } else {\n        if (org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) || (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n            char = '8';\n        } else {\n            char = '4';\n        }\n    }\n} else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '8';\n} else if (char == 'R') {\n    char = '7';\n} else if (char == 'L') {\n    char = '5';\n} else if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"status":-2},{"failures":[54,61,75,76,77,78,79,62,80,63,66,67],"tindex":"6be5fbb8-42eb-11e5-a584-a124774a6718","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:69","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:461","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-1},{"failures":[15,16,81,17],"tindex":"6be622c9-42eb-11e5-a584-498ed6aaa13b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:94","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:738","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.encodeBase64(org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.toIntegerBytes(java.math.BigInteger), false)"},"status":-1},{"failures":[82,83],"tindex":"6be622ca-42eb-11e5-a584-9f28985b9ee7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((java.lang.String.length()) == 0) {\n    return null;\n} "},"variableMap":{"input":"accentedWord"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
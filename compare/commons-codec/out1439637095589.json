{"failureDictionary":{"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":21,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":68,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":6,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":60,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":61,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":46,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":10,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":33,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":9,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":38,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":28,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":37,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":71,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":12,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":34,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":74,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":36,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":73,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":55,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":8,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":44,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":85,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":18,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":42,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":45,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":78,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":58,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":23,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":50,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":49,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":66,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":20,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":51,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":17,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":57,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":56,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":31,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":69,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":83,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":39,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":14,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":30,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay":29,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":67,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":19,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":7,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":24,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":41,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":54,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":0,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":47,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":76,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":63,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":15,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":43,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":4,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":11,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":5,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":53,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":79,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":75,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":77,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":84,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":72,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":40,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":35,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert":13,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":26,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":62,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":82,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":27,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":59,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":65,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero":22,"org.apache.commons.codec.language.MetaphoneTest.testWhy":3,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":48,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":81,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":25,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":70,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":16,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":1,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":52,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":32,"org.apache.commons.codec.language.MetaphoneTest.testTCH":2,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":64,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":80},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"tindex":"64656d49-433e-11e5-b447-4781567da86a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtIfImpl","sourcecode":"if ((((java.lang.String == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(java.lang.String))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(java.lang.String))) || ((java.lang.String.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n} "},"variableMap":{"name":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:99","type":"CtIfImpl","sourcecode":"if (int == 1) {\n    return java.lang.String.toUpperCase(java.util.Locale.java.util.Locale);\n} "},"status":-1},{"failures":[],"tindex":"6465945a-433e-11e5-b447-01a7a1d3afc8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (int == int) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"jj","to":"jj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:250","type":"CtIfImpl","sourcecode":"if (((byte[][int]) & (org.apache.commons.codec.binary.BinaryCodec.int[][int])) == 0) {\n    byte[][(int - int)] = '0';\n} else {\n    byte[][(int - int)] = '1';\n}"},"status":-2},{"failures":[30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"tindex":"6465945b-433e-11e5-b447-a528d0b30cb8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:188","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    boolean = true;\n} else if ((java.lang.String.length()) > 0) {\n    java.util.Set<java.lang.String>.add(java.lang.String);\n} "},"status":-1},{"failures":[46,47,48,49,50,51,52,53],"tindex":"6465945c-433e-11e5-b447-ff0a706dbc38","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:128","type":"CtReturnImpl","sourcecode":"return java.lang.String.substring(0, org.apache.commons.codec.language.Caverphone2.java.lang.String.length())"},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"str","txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:450","type":"CtReturnImpl","sourcecode":"return new java.lang.String(org.apache.commons.codec.net.QuotedPrintableCodec.decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(java.lang.String)) , java.nio.charset.Charset)"},"status":-1},{"failures":[],"tindex":"6465945d-433e-11e5-b447-217135648d9a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:216","type":"CtLocalVariableImpl","sourcecode":"java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:196","type":"CtLocalVariableImpl","sourcecode":"final java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()"},"status":-2},{"failures":[],"tindex":"6465945e-433e-11e5-b447-cd1c280116af","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:170","type":"CtIfImpl","sourcecode":"if (int == (org.apache.commons.codec.net.URLCodec.byte)) {\n    try {\n        final int int = org.apache.commons.codec.net.Utils.digit16(byte[][++int]);\n        final int int = org.apache.commons.codec.net.Utils.digit16(byte[][++int]);\n        java.io.ByteArrayOutputStream.write(((char)((int << 4) + int)));\n    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n        throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , java.lang.ArrayIndexOutOfBoundsException);\n    }\n} else {\n    java.io.ByteArrayOutputStream.write(int);\n}"},"variableMap":{"b":"i","e":"e","bytes":"bytes","i":"i","buffer":"buffer","org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR":"org.apache.commons.codec.net.QuotedPrintableCodec.CR"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:359","type":"CtIfImpl","sourcecode":"if (int == (org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n    try {\n        if ((byte[][++int]) == (org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n            continue;\n        } \n        final int int = org.apache.commons.codec.net.Utils.digit16(byte[][int]);\n        final int int = org.apache.commons.codec.net.Utils.digit16(byte[][++int]);\n        java.io.ByteArrayOutputStream.write(((char)((int << 4) + int)));\n    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n        throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , java.lang.ArrayIndexOutOfBoundsException);\n    }\n} else if ((int != (org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (int != (org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n    java.io.ByteArrayOutputStream.write(int);\n} "},"status":-2},{"failures":[],"tindex":"6465bb6f-433e-11e5-b447-99eea5f0864c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:422","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"LI\")) && (!boolean)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"KL\", \"L\");\n    int += 2;\n} else if ((int == 0) && ((org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'Y') || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K', 'J');\n    int += 2;\n} else if ((((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"ER\")) || (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'Y')) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\")))) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 1, \"E\", \"I\")))) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 3, \"RGY\", \"OGY\")))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K', 'J');\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"E\", \"I\", \"Y\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 4, \"AGGI\", \"OGGI\"))) {\n    if ((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 4, \"VAN \", \"VON \")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 3, \"SCH\"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"ET\"))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    } else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 3, \"IER\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'K');\n    }\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'G') {\n    int += 2;\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n} else {\n    int++;\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n}"},"status":-2},{"failures":[],"tindex":"6465bb70-433e-11e5-b447-b51cfadd125f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:254","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(org.apache.commons.codec.binary.BaseNCodec.Context.byte[].int) * (org.apache.commons.codec.binary.BaseNCodec.int)]"},"status":-2},{"failures":[],"tindex":"6465bb71-433e-11e5-b447-9d774795fc57","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:298","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, byte[], int, int)"},"variableMap":{"blocksize":"length","tempResult":"data","pBytes":"data","cp":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:158","type":"CtIfImpl","sourcecode":"if (this.boolean) {\n    for (int int = 0 ; int < (byte[].int) ; int++) {\n        if ((byte[][int]) == (org.apache.commons.codec.net.QCodec.byte)) {\n            byte[][int] = org.apache.commons.codec.net.QCodec.byte;\n        } \n    }\n} "},"status":-2},{"failures":[15],"tindex":"6465bb72-433e-11e5-b447-b99571838053","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:310","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('F')"},"status":-1},{"failures":[54,55,56,57,58,59],"tindex":"6465bb73-433e-11e5-b447-2527ec3b054b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:91","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"g\", \"k\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:85","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"d\", \"t\")"},"status":-1},{"failures":[60,61,62,63,64,65,66,67,68,69,70],"tindex":"6465e284-433e-11e5-b447-99545fe71416","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:138","type":"CtAssignmentImpl","sourcecode":"char[][0] = 'S'"},"variableMap":{"inwd":"name2Char"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:327","type":"CtAssignmentImpl","sourcecode":"char[][(int - int)] = ' '"},"status":-1},{"failures":[],"tindex":"6465e285-433e-11e5-b447-a77494042ab9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:90","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"gh\", \"22\")"},"status":0},{"failures":[],"tindex":"6465e286-433e-11e5-b447-63421cd3bbb2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:751","type":"CtAssignmentImpl","sourcecode":"int = ((int + 7) >> 3) << 3"},"variableMap":{"bitlen":"org.apache.commons.codec.binary.Base64.BYTES_PER_UNENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:380","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) + 1) % (org.apache.commons.codec.binary.Base64.int)"},"status":-2},{"failures":[],"tindex":"6465e287-433e-11e5-b447-736e2f3c07b5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:397","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.long = (org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 6"},"variableMap":{"context":"context","lbitWorkArea":"lbitWorkArea"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:386","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.long = (org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 4"},"status":-2},{"failures":[71,72,73,74,75,76,77,78,79],"tindex":"6465e288-433e-11e5-b447-35703b1b4337","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:89","type":"CtIfImpl","sourcecode":"if ((int > (byte[].int)) || ((int + int) > (byte[].int))) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if (int > 0) {\n    if (boolean) {\n        org.apache.commons.codec.binary.BaseNCodec.encode(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n    } else {\n        org.apache.commons.codec.binary.BaseNCodec.decode(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n    }\n    org.apache.commons.codec.binary.BaseNCodecOutputStream.flush(false);\n} "},"status":-1},{"failures":[],"tindex":"6465e289-433e-11e5-b447-57e2414d5089","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:217","type":"CtAssignmentImpl","sourcecode":"byte[][int] = 0"},"variableMap":{"i":"ibitWorkArea","key":"encodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:360","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 10) & (org.apache.commons.codec.binary.Base64.int))]"},"status":-2},{"failures":[],"tindex":"6465e28a-433e-11e5-b447-9b6b89866af0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:78","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('-')"},"status":0},{"failures":[80,81,82,83,84,85],"tindex":"6466099b-433e-11e5-b447-95547b2d1267","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:474","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][47], byte[][5], byte[][26], 4, java.lang.StringBuilder)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:458","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][21], byte[][1], byte[][11], 4, java.lang.StringBuilder)"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":19,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
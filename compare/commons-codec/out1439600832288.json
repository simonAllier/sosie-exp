{"failureDictionary":{"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":28,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":32,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":37,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":20,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":2,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":10,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":36,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":31,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":16,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":3,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":22,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":11,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":15,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":39,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":23,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":21,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":24,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":19,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":13,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":14,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":12,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":6,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":35,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":33,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":25,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":26,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":34,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":4,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":8,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":18,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":7,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":9,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":27,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":29,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":5,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":30,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":38},"transformations":[{"failures":[],"tindex":"f5ca0a69-42e9-11e5-a4d9-01ebcab04244","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:751","type":"CtAssignmentImpl","sourcecode":"int = ((int + 7) >> 3) << 3"},"variableMap":{"bitlen":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:451","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-2},{"failures":[],"tindex":"f5ca317a-42e9-11e5-a4d9-49caf59bc690","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:380","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.decode(((java.lang.String)(java.lang.Object)))"},"variableMap":{"obj":"object","this":"object"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:296","type":"CtTryImpl","sourcecode":"try {\n    final byte[] byte[] = java.lang.Object instanceof java.lang.String ? ((java.lang.String)(java.lang.Object)).getBytes(org.apache.commons.codec.binary.Hex.getCharset()) : ((byte[])(java.lang.Object));\n    return org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.encodeHex(byte[]);\n} catch (final java.lang.ClassCastException e) {\n    throw new org.apache.commons.codec.EncoderException(java.lang.ClassCastException.getMessage() , java.lang.ClassCastException);\n}"},"status":-2},{"failures":[0,1],"tindex":"f5ca588b-42e9-11e5-a4d9-1bbbe4b46842","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:357","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K', 'X')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:531","type":"CtIfImpl","sourcecode":"if (int == ((java.lang.String.length()) - 1)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', ' ');\n} else if ((!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 1, \"S\", \"K\", \"L\")))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n} "},"status":-1},{"failures":[],"tindex":"f5ca588c-42e9-11e5-a4d9-39fe4410ed47","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:476","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[2,3,4,5,6],"tindex":"f5ca588d-42e9-11e5-a4d9-8f0da0aad964","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:193","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Metaphone.isNextChar(java.lang.StringBuilder, int, 'H')) {\n    if (((int == 0) && (int >= 3)) && org.apache.commons.codec.language.Metaphone.(isVowel(java.lang.StringBuilder, 2))) {\n        java.lang.StringBuilder.append('K');\n    } else {\n        java.lang.StringBuilder.append('X');\n    }\n} else {\n    java.lang.StringBuilder.append('K');\n}"},"variableMap":{"wdsz":"n","code":"local","this":"this","local":"code","n":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:273","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Metaphone.isNextChar(java.lang.StringBuilder, int, 'H')) {\n    java.lang.StringBuilder.append('F');\n} else {\n    java.lang.StringBuilder.append(char);\n}"},"status":-1},{"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"tindex":"f5ca7f9e-42e9-11e5-a4d9-595ee994b5b1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:398","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.parsePhoneme(java.lang.String)"},"variableMap":{"ph":"ph","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:382","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(\"(\")) {\n    if (!(java.lang.String.endsWith(\")\"))) {\n        throw new java.lang.IllegalArgumentException(\"Phoneme starts with \\'(\\' so must end with \\')\\'\");\n    } \n    final java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme>();\n    final java.lang.String java.lang.String = java.lang.String.substring(1, ((java.lang.String.length()) - 1));\n    for (final java.lang.String java.lang.String : java.lang.String.split(\"[|]\")) {\n        java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme>.add(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.parsePhoneme(java.lang.String));\n    }\n    if ((java.lang.String.startsWith(\"|\")) || (java.lang.String.endsWith(\"|\"))) {\n        java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme>.add(new org.apache.commons.codec.language.bm.Rule.Phoneme(\"\" , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet));\n    } \n    return new org.apache.commons.codec.language.bm.Rule.PhonemeList(java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme>);\n} else {\n    return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.parsePhoneme(java.lang.String);\n}"},"status":-1},{"failures":[25,26,27,28],"tindex":"f5ca7f9f-42e9-11e5-a4d9-19767cf05fa3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:92","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"upperName":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:117","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"2\", \"\")"},"status":-1},{"failures":[],"tindex":"f5caa6b0-42e9-11e5-a4d9-aba60dc98ec6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:136","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.this(java.nio.charset.Charset, false)"},"variableMap":{"charset":"org.apache.commons.codec.Charsets.UTF_8","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:125","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.this(org.apache.commons.codec.Charsets.java.nio.charset.Charset, boolean)"},"status":-2},{"failures":[29,30],"tindex":"f5caa6b1-42e9-11e5-a4d9-432f705831ef","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.RefinedSoundex:188","type":"CtAssignmentImpl","sourcecode":"char = '*'"},"variableMap":{"last":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:383","type":"CtAssignmentImpl","sourcecode":"char = '8'"},"status":-1},{"failures":[31,32,0,1],"tindex":"f5caa6b2-42e9-11e5-a4d9-bdaaafb53c0d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:243","type":"CtOperatorAssignmentImpl","sourcecode":"int >>= 1"},"variableMap":{"ii":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:457","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[],"tindex":"f5caa6b3-42e9-11e5-a4d9-4f26696b3d67","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:485","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String))"},"status":-2},{"failures":[],"tindex":"f5cacdc4-42e9-11e5-a4d9-f58d01b85c52","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:73","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('(')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:79","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(int)"},"status":-2},{"failures":[],"tindex":"f5cacdc5-42e9-11e5-a4d9-81ae5ad6a2e6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:470","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getSha256Digest(), java.io.InputStream)"},"status":-2},{"failures":[],"tindex":"f5cacdc6-42e9-11e5-a4d9-359278ecc3f0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:161","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[], java.lang.String, org.apache.commons.codec.digest.Md5Crypt.java.lang.String)"},"status":-2},{"failures":[],"tindex":"f5cacdc7-42e9-11e5-a4d9-f11d1e65bdf4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:326","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    int = 256 + int;\n} "},"variableMap":{"b":"modulus"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:448","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.binary.BaseNCodec.Context.int) == 0) {\n    byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n    byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n    byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.int) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n} "},"status":-2},{"failures":[31,0,1],"tindex":"f5caf4d8-42e9-11e5-a4d9-c38da195956d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:388","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:648","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 2))) == 'H') {\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n        if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 3), 2, \"ER\", \"EN\")) {\n            org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"X\", \"SK\");\n        } else {\n            org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"SK\");\n        }\n    } else {\n        if (((int == 0) && (!org.apache.commons.codec.language.DoubleMetaphone.(isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, 3))))) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, 3)) != 'W')) {\n            org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'S');\n        } else {\n            org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n        }\n    }\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 2), 1, \"I\", \"E\", \"Y\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"SK\");\n}"},"status":-1},{"failures":[33,34,35,36,37],"tindex":"f5caf4d9-42e9-11e5-a4d9-b7e31058ec56","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:226","type":"CtReturnImpl","sourcecode":"return 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:222","type":"CtIfImpl","sourcecode":"if (boolean) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(int, java.io.ByteArrayOutputStream);\n} else {\n    java.io.ByteArrayOutputStream.write(int);\n    return 1;\n}"},"status":-1},{"failures":[26,27],"tindex":"f5caf4da-42e9-11e5-a4d9-e3dbd5ffa723","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:111","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"l\", \"2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:92","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"s+\", \"S\")"},"status":-1},{"failures":[0,1],"tindex":"f5cb1beb-42e9-11e5-a4d9-095d690fe13c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.int"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"index","encodeSize":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:438","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"status":-1},{"failures":[38,39],"tindex":"f5cb1bec-42e9-11e5-a4d9-73e491263f82","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    int += 256;\n} "},"variableMap":{"b":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:361","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.digest.UnixCrypt.boolean[][int]) {\n    int = (int >>> 2) | (int << 26);\n    int = (int >>> 2) | (int << 26);\n} else {\n    int = (int >>> 1) | (int << 27);\n    int = (int >>> 1) | (int << 27);\n}"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
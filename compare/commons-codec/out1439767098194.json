{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":21,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":23,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":4,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":7,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":25,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":11,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":13,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":20,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":24,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":3,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":22,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":26,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":6,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":8,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":12,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":2,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":17,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":9,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":18,"org.apache.commons.codec.binary.Base64Test.testConstructors":19,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":27,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":28,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":15,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":16,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":10,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":14,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":1,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":0,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":5},"transformations":[{"failures":[0],"tindex":"1402a68b-446d-11e5-8537-0b2bb9050459","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:532","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha256(java.lang.String))"},"variableMap":{"data":"data","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:720","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha512(java.lang.String))"},"status":-1},{"failures":[],"tindex":"14031bbc-446d-11e5-8537-63fc7697b905","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:401","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.ColognePhonetic.CologneOutputBuffer.toString()"},"status":-2},{"failures":[],"tindex":"14031bbd-446d-11e5-8537-255e6acb52a7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:200","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.byte[]"},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:635","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha512(byte[]).doFinal(byte[])"},"status":-2},{"failures":[1,2,3,4],"tindex":"140342ce-446d-11e5-8537-f9b6f0b75ba2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:338","type":"CtAssignmentImpl","sourcecode":"int = 0"},"variableMap":{"cp":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:127","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.handleG(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int, boolean)"},"status":-1},{"failures":[],"tindex":"140369df-446d-11e5-8537-9fb1186128f7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:365","type":"CtAssignmentImpl","sourcecode":"int = (int >>> 1) | (int << 27)"},"variableMap":{"c":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:513","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[5,6,7,8],"tindex":"140369e0-446d-11e5-8537-336f2e48d327","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.int"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"t","encodeSize":"j"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:375","type":"CtAssignmentImpl","sourcecode":"int[][int++] = (int << 16) | (int & 65535)"},"status":-1},{"failures":[],"tindex":"140390f1-446d-11e5-8537-51d35b19cf31","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:104","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.decodeBase64(byte[])"},"variableMap":{"bytes":"pArray"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:427","type":"CtReturnImpl","sourcecode":"return byte[]"},"status":1},{"failures":[0],"tindex":"1403b802-446d-11e5-8537-f5e44c0358dd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:688","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha512(byte[]))"},"status":-1},{"failures":[],"tindex":"1403b803-446d-11e5-8537-c338918d59cf","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:227","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[9]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:501","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-2},{"failures":[],"tindex":"1403df14-446d-11e5-8537-7972625b8145","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:297","type":"CtWhileImpl","sourcecode":"while (int < (int - int)) {\n    java.lang.System.arraycopy(byte[], 0, byte[], int, int);\n    int += int;\n}"},"variableMap":{"blocksize":"offset","tempResult":"b","pBytes":"b","keyLen":"len","cp":"offset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:95","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.decode(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-2},{"failures":[9,1,2,10,3,4],"tindex":"14040625-446d-11e5-8537-c1e7742eb180","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:486","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:606","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"SH\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n    }\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 3, \"SIO\", \"SIA\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 4, \"SIAN\"))) {\n    if (boolean) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    }\n    int += 3;\n} else if (((int == 0) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"Z\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S', 'X');\n    int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"Z\") ? int + 2 : int + 1;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"SC\")) {\n    int = org.apache.commons.codec.language.DoubleMetaphone.handleSC(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int);\n} else {\n    if ((int == ((java.lang.String.length()) - 1)) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 2, \"AI\", \"OI\"))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('S');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    }\n    int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"S\", \"Z\") ? int + 2 : int + 1;\n}"},"status":-1},{"failures":[],"tindex":"14045446-446d-11e5-8537-aff1a738e4dc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:94","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set(']')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:87","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('>')"},"status":-2},{"failures":[11,12,13,14,15,16,17,18],"tindex":"14045447-446d-11e5-8537-5bf762b93f6c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:90","type":"CtAssignmentImpl","sourcecode":"java.lang.String = (org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + java.lang.String"},"variableMap":{"salt":"txt","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:80","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"x\", \"k\")"},"status":-1},{"failures":[],"tindex":"14047b58-446d-11e5-8537-dfee139ecf1a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:335","type":"CtReturnImpl","sourcecode":"return new java.lang.String(byte[] , org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-2},{"failures":[19],"tindex":"14047b59-446d-11e5-8537-57a6ef82d88c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad(byte[])) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[]);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + java.lang.String) + \"]\"));\n} "},"status":-1},{"failures":[20,21,22,23,24,25,26,27],"tindex":"1404a26a-446d-11e5-8537-db86b31e031b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:769","type":"CtWhileImpl","sourcecode":"while (int > (-1)) {\n    javax.crypto.Mac.update(byte[], 0, int);\n    int = java.io.InputStream.read(byte[], 0, org.apache.commons.codec.digest.HmacUtils.int);\n}"},"status":-1},{"failures":[],"tindex":"1404c97b-446d-11e5-8537-09e453cd239e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:254","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"variableMap":{"length":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:240","type":"CtOperatorAssignmentImpl","sourcecode":"int |= 1"},"status":0},{"failures":[1,2,28,3,4],"tindex":"1404c97c-446d-11e5-8537-5f86e28caaf3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:116","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    if ((java.lang.String.charAt(int)) == (java.lang.String.charAt(int))) {\n        int++;\n    } \n}"},"variableMap":{"es1":"value","es2":"value","diff":"index","lengthToMatch":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:332","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 2), 1, \"I\", \"E\", \"H\")) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 2), 2, \"HU\")))) {\n    if (((int == 1) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int - 1))) == 'A')) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 5, \"UCCEE\", \"UCCES\"))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"KS\");\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n    }\n    int += 3;\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    int += 2;\n}"},"status":-1},{"failures":[],"tindex":"1405179d-446d-11e5-8537-95147f0007c8","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:225","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((\"Problem processing \" + org.apache.commons.codec.language.bm.Rule.(org.apache.commons.codec.language.bm.Rule.createResourceName(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String))) , java.lang.IllegalStateException)"},"variableMap":{"rt":"object","s":"object","e":"object","this":"object","l":"java.lang.String.class"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:407","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(((((\"This method\\'s parameter was expected to be of the type \" + (java.lang.String.java.lang.String.getName())) + \". But actually it was of the type \") + (java.lang.Object.getClass().getName())) + \".\"))"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":19,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"},"diffs":[{"transformation":"140390f1-446d-11e5-8537-51d35b19cf31","diffs":[{"nodes":{"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":["org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])"],"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":["org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.boolean isInAlphabet(byte)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])"],"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":["org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)","org.apache.commons.codec.binary.Base64.boolean isInAlphabet(byte)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])"],"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":["org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)","org.apache.commons.codec.binary.Base64.boolean isInAlphabet(byte)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])"]},"edges":{"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":["org.apache.commons.codec.binary.BaseNCodec.byte[] encode(byte[]) -> org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int,byte)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)"],"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":["org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[]) -> org.apache.commons.codec.binary.Base64.boolean isInAlphabet(byte)","org.apache.commons.codec.binary.BaseNCodec.byte[] encode(byte[]) -> org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean) -> org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int,byte)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)"],"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":["org.apache.commons.codec.binary.BaseNCodec.byte[] encode(byte[]) -> org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[]) -> org.apache.commons.codec.binary.Base64.boolean isInAlphabet(byte)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean) -> org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int,byte)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)"],"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":["org.apache.commons.codec.binary.BaseNCodec.byte[] encode(byte[]) -> org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[]) -> org.apache.commons.codec.binary.Base64.boolean isInAlphabet(byte)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean) -> org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int,byte)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)"]},"type":"graph"}]}]}
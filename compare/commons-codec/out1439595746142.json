{"failureDictionary":{"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":1,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":35,"org.apache.commons.codec.language.NysiisTest.testSnat":26,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":36,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":37,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":63,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":3,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":41,"org.apache.commons.codec.language.NysiisTest.testDropBy":28,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":39,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":40,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":14,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":42,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":62,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":72,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":75,"org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence":12,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":73,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":76,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":60,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":67,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":66,"org.apache.commons.codec.language.NysiisTest.testRule2":20,"org.apache.commons.codec.language.NysiisTest.testRule1":19,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":52,"org.apache.commons.codec.language.NysiisTest.testRule7":23,"org.apache.commons.codec.language.NysiisTest.testRule6":22,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":54,"org.apache.commons.codec.language.NysiisTest.testRule5":21,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":53,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":61,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex":56,"org.apache.commons.codec.language.NysiisTest.testCap":15,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":59,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":47,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":27,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":51,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":49,"org.apache.commons.codec.language.NysiisTest.testBran":24,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":31,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":50,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":9,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":44,"org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64":68,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":8,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":6,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":10,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":11,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":2,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":57,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":69,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":74,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":43,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":48,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":34,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":5,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":33,"org.apache.commons.codec.language.SoundexTest.testB650":38,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":0,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":4,"org.apache.commons.codec.language.NysiisTest.testDad":16,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":7,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":64,"org.apache.commons.codec.language.SoundexTest.testNewInstance":46,"org.apache.commons.codec.language.NysiisTest.testOthers":29,"org.apache.commons.codec.language.NysiisTest.testTranan":30,"org.apache.commons.codec.language.SoundexTest.testDifference":45,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":13,"org.apache.commons.codec.language.NysiisTest.testDan":17,"org.apache.commons.codec.language.NysiisTest.testFal":18,"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence":55,"org.apache.commons.codec.language.NysiisTest.testSnad":25,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":58,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":65,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":70,"org.apache.commons.codec.language.NysiisTest.testLocaleIndependence":32,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":71},"transformations":[{"failures":[0,1],"tindex":"1e341286-42de-11e5-8867-1d0cf6e13762","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:91","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"g\", \"k\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:108","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"r\", \"2\")"},"status":-1},{"failures":[],"tindex":"1e343997-42de-11e5-8867-e3f64008023d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:453","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[2],"tindex":"1e343998-42de-11e5-8867-6f487e7276ca","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"variableMap":{"string":"ascii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:153","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"status":-1},{"failures":[3,4],"tindex":"1e343999-42de-11e5-8867-0d4959d23cd1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(byte[], ((byte)(0)))"},"variableMap":{"finalb":"pBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:298","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, byte[], int, int)"},"status":-1},{"failures":[],"tindex":"1e34399a-42de-11e5-8867-89a04a3a7f89","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    java.lang.String = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (java.lang.String.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern.matcher(java.lang.String);\n    if ((java.util.regex.Matcher == null) || (!(java.util.regex.Matcher.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + java.lang.String));\n    } \n    java.lang.String = java.util.regex.Matcher.group(1);\n}"},"variableMap":{"saltString":"org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START","salt":"location","prefix":"org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_START"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:267","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    boolean = true;\n} else {\n    final int int = java.lang.String.indexOf(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String);\n    if (int >= 0) {\n        java.lang.String = java.lang.String.substring(0, int);\n    } \n    java.lang.String = java.lang.String.trim();\n    if ((java.lang.String.length()) == 0) {\n        continue;\n    } \n    if (java.lang.String.contains(\"=\")) {\n        final java.lang.String[] java.lang.String[] = java.lang.String.split(\"=\");\n        if ((java.lang.String[].int) != 2) {\n            throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (java.lang.String[].int)) + \" parts: \") + java.lang.String) + \" in \") + java.lang.String));\n        } else {\n            final java.lang.String java.lang.String = java.lang.String[][0];\n            final java.lang.String java.lang.String = java.lang.String[][1];\n            if (((java.lang.String.length()) != 1) || ((java.lang.String.length()) != 1)) {\n                throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + java.lang.String) + \" in \") + java.lang.String));\n            } \n            java.util.Map<java.lang.Character, java.lang.Character>.put(java.lang.String.charAt(0), java.lang.String.charAt(0));\n        }\n    } else {\n        final java.lang.String[] java.lang.String[] = java.lang.String.split(\"\\\\s+\");\n        if ((java.lang.String[].int) != 4) {\n            throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (java.lang.String[].int)) + \" parts: \") + java.lang.String) + \" in \") + java.lang.String));\n        } else {\n            try {\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][0]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][1]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][2]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][3]);\n                final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(java.lang.String , java.lang.String , java.lang.String , java.lang.String);\n                final char char = org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.java.lang.String.charAt(0);\n                java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(char);\n                if (java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> == null) {\n                    java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                    java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.put(char, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>);\n                } \n                java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>.add(org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule);\n            } catch (final java.lang.IllegalArgumentException e) {\n                throw new java.lang.IllegalStateException((((\"Problem parsing line \\'\" + int) + \"\\' in \") + java.lang.String) , java.lang.IllegalArgumentException);\n            }\n        }\n    }\n}"},"status":-2},{"failures":[],"tindex":"1e3460ab-42de-11e5-8867-3d98621bb4d8","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:277","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[5,6],"tindex":"1e3460ac-42de-11e5-8867-372224847496","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:88","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-1},{"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"tindex":"1e3460ad-42de-11e5-8867-af79097eaae0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:142","type":"CtAssignmentImpl","sourcecode":"int = int + 1"},"variableMap":{"from":"count","to":"count"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:50","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[57,58,59,60,61,62,63,64],"tindex":"1e3487be-42de-11e5-8867-5504617222f3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:142","type":"CtAssignmentImpl","sourcecode":"int = int + 1"},"variableMap":{"from":"from","to":"from"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:152","type":"CtAssignmentImpl","sourcecode":"int = java.lang.String.indexOf(org.apache.commons.codec.net.RFC1522Codec.char, int)"},"status":-1},{"failures":[],"tindex":"1e3487bf-42de-11e5-8867-0b1c0d170b86","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:62","type":"CtIfImpl","sourcecode":"if (char == char) {\n    continue;\n} "},"variableMap":{"c1":"lastCode","c2":"lastCode"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:350","type":"CtIfImpl","sourcecode":"if (char == '/') {\n    continue;\n} "},"status":1},{"failures":[],"tindex":"1e3487c0-42de-11e5-8867-ed86fa7a66be","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.B64:73","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:106","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10)"},"status":-2},{"failures":[65,66,67,68,69,70],"tindex":"1e3487c1-42de-11e5-8867-e7f9d0f3a513","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:498","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.isBase64(byte[])"},"variableMap":{"arrayOctet":"arrayOctet","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:539","type":"CtIfImpl","sourcecode":"if ((!org.apache.commons.codec.binary.Base64.(org.apache.commons.codec.binary.Base64.isBase64(byte[][int]))) && (!org.apache.commons.codec.binary.BaseNCodec.(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte[][int])))) {\n    return false;\n} "},"status":-1},{"failures":[],"tindex":"1e3487c2-42de-11e5-8867-1b2553e14195","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:283","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:235","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[71,72],"tindex":"1e3487c3-42de-11e5-8867-47c74e446e7a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:296","type":"CtOperatorAssignmentImpl","sourcecode":"int += 3"},"variableMap":{"index":"d"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:366","type":"CtAssignmentImpl","sourcecode":"int = (int >>> 1) | (int << 27)"},"status":-1},{"failures":[33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,52,53,54],"tindex":"1e3487c4-42de-11e5-8867-3fd262506e39","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:284","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(char[], 0, char[], int, char[].int)"},"variableMap":{"length":"count","i":"count","transcoded":"out","chars":"out"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:275","type":"CtIfImpl","sourcecode":"if ((char != '0') && (char != char)) {\n    char[][int++] = char;\n} "},"status":-1},{"failures":[],"tindex":"1e34aed5-42de-11e5-8867-317c6d88cc8e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:388","type":"CtIfImpl","sourcecode":"if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"variableMap":{"code":"charOne","chr":"charOne"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:212","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.setCharAt(1, char)"},"status":-2},{"failures":[],"tindex":"1e34aed6-42de-11e5-8867-7774dfa6627c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:380","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.decode(((java.lang.String)(java.lang.Object)))"},"variableMap":{"obj":"obj","this":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:312","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof byte[]) {\n    return org.apache.commons.codec.net.URLCodec.encode(((byte[])(java.lang.Object)));\n} else if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.URLCodec.encode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be URL encoded\"));\n}"},"status":-2},{"failures":[73,74,75,76],"tindex":"1e34aed7-42de-11e5-8867-87b35a3ae9df","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:606","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"1e34aed8-42de-11e5-8867-3399fd87cd9f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:728","type":"CtOperatorAssignmentImpl","sourcecode":"int += 4"},"variableMap":{"index":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:468","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-2},{"failures":[],"tindex":"1e34aed9-42de-11e5-8867-03da3e277f82","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:444","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.binary.Base64.byte[][byte]"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"},"diffs":[{"transformation":"1e3487bf-42de-11e5-8867-0b1c0d170b86","diffs":[{"branches":{"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":["org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).t5","org.apache.commons.codec.language.ColognePhonetic_java.lang.String_colognePhonetic(java.lang.String).e5"]},"type":"branch"}]}]}
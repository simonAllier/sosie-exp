{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":27,"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":68,"org.apache.commons.codec.binary.HexTest.testCustomCharset":47,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":69,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":17,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":64,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":56,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":6,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":55,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":60,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":57,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":26,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":31,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":78,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":33,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":74,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":5,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":44,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":14,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":45,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":71,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":38,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":50,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":42,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":20,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":66,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":1,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":18,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":76,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":77,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":34,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":61,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":70,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":0,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":63,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":49,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":19,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":21,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":3,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":40,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":24,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":29,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":41,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":73,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":37,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":75,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":23,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":46,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":2,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":51,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":28,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":15,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":36,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":4,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":54,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":16,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":52,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":7,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":58,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":12,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":39,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":8,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":22,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":11,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":65,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":72,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":53,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":25,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":32,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":48,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":10,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":59,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":30,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":13,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":67,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":35,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":62,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":9,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":43},"transformations":[{"failures":[],"tindex":"d75544e1-4337-11e5-90c5-1f2d66d461f5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:188","type":"CtReturnImpl","sourcecode":"return 3"},"status":-2},{"failures":[0,1,2,3,4],"tindex":"d75544e2-4337-11e5-90c5-6f30f99855ee","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:355","type":"CtAssignmentImpl","sourcecode":"char = '1'"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:353","type":"CtAssignmentImpl","sourcecode":"char = '-'"},"status":-1},{"failures":[5,6,7,8,9,10,11,12],"tindex":"d75544e3-4337-11e5-90c5-e765e89caa13","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:261","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[], 0, org.apache.commons.codec.digest.Md5Crypt.int)"},"variableMap":{"ctx1":"ctx","finalb":"sBytes","org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE":"saltLen"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:378","type":"CtIfImpl","sourcecode":"if ((int % 3) != 0) {\n    java.security.MessageDigest.update(byte[], 0, int);\n} "},"status":-1},{"failures":[],"tindex":"d7556bf4-4337-11e5-90c5-a5223c8da884","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:390","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][((org.apache.commons.codec.binary.BaseNCodec.Context.int) & (org.apache.commons.codec.binary.Base64.int))]"},"variableMap":{"encodeTable":"buffer","ibitWorkArea":"pos","pos":"pos","context":"context","org.apache.commons.codec.binary.Base64.MASK_6BITS":"org.apache.commons.codec.binary.Base64.MASK_6BITS","buffer":"encodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:362","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) << 2) & (org.apache.commons.codec.binary.Base64.int))]"},"status":-2},{"failures":[],"tindex":"d7556bf5-4337-11e5-90c5-937e5829e800","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:231","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacMd5(byte[]), java.io.InputStream)"},"variableMap":{"valueToDigest":"valueToDigest","this":"this","key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:338","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byte[]), java.io.InputStream)"},"status":0},{"failures":[],"tindex":"d7556bf6-4337-11e5-90c5-65eb8c7a3436","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:284","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.byte[]"},"variableMap":{"encodeTable":"lineSeparator","org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:289","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"status":-2},{"failures":[13,14,15],"tindex":"d7556bf7-4337-11e5-90c5-e3ff03b1d98d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:327","type":"CtAssignmentImpl","sourcecode":"int = 256 + int"},"variableMap":{"b":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:285","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"status":-1},{"failures":[16,17,18,19,20,21,22],"tindex":"d7556bf8-4337-11e5-90c5-dd7a5a006886","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:115","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(char[])"},"status":-1},{"failures":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"tindex":"d7556bf9-4337-11e5-90c5-775ec0353eee","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:260","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[int]"},"variableMap":{"length":"l"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:142","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[int << 1]"},"status":-1},{"failures":[52,53,54,55,56,57,58,59,60,61,62,63,64],"tindex":"d755930a-4337-11e5-90c5-3fef29fe0e52","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtIfImpl","sourcecode":"if (java.lang.Character.isWhitespace(char)) {\n    continue;\n} "},"variableMap":{"ch":"patternKey"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:316","type":"CtIfImpl","sourcecode":"if (java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> == null) {\n    java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n    java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.put(char, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>);\n} "},"status":-1},{"failures":[],"tindex":"d755930b-4337-11e5-90c5-e39973b706ae","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:431","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = java.lang.String.toCharArray()"},"variableMap":{"text":"object"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:251","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = java.lang.Object instanceof java.lang.String ? ((java.lang.String)(java.lang.Object)).toCharArray() : ((char[])(java.lang.Object))"},"status":-2},{"failures":[],"tindex":"d755930c-4337-11e5-90c5-a7030aa18db0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:232","type":"CtReturnImpl","sourcecode":"return (org.apache.commons.codec.binary.BaseNCodec.Context.byte[]) != null ? (org.apache.commons.codec.binary.BaseNCodec.Context.int) - (org.apache.commons.codec.binary.BaseNCodec.Context.int) : 0"},"status":-2},{"failures":[65,66,67,68],"tindex":"d755930d-4337-11e5-90c5-abd12b28e833","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:77","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"v\", \"f\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:118","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"3\", \"\")"},"status":-1},{"failures":[],"tindex":"d755930e-4337-11e5-90c5-6150fb68368a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:185","type":"CtLocalVariableImpl","sourcecode":"final char char = org.apache.commons.codec.language.Soundex.map(java.lang.String.charAt(int))"},"status":-2},{"failures":[],"tindex":"d755930f-4337-11e5-90c5-4daf66c36d11","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:790","type":"CtInvocationImpl","sourcecode":"javax.crypto.Mac.reset()"},"status":0},{"failures":[13,69],"tindex":"d7559310-4337-11e5-90c5-41f5c2d9872b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:553","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendPrimary('L')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:439","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"E\", \"I\", \"Y\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 4, \"AGGI\", \"OGGI\"))) {\n    if ((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 4, \"VAN \", \"VON \")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 3, \"SCH\"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"ET\"))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n    } else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 3, \"IER\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'K');\n    }\n    int += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'G') {\n    int += 2;\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n} else {\n    int++;\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n}"},"status":-1},{"failures":[],"tindex":"d755ba21-4337-11e5-90c5-4143c98e91cc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:240","type":"CtReturnImpl","sourcecode":"return new java.lang.IllegalStateException(((java.lang.String + \": \") + java.io.UnsupportedEncodingException))"},"status":-2},{"failures":[70,71,72],"tindex":"d755ba22-4337-11e5-90c5-3b9a5d1ea82f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:87","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"b\", \"p\")"},"status":-1},{"failures":[73,74,75,70,76,77,71,72],"tindex":"d755ba23-4337-11e5-90c5-df5c824a3fb7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:121","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String + (org.apache.commons.codec.language.Caverphone1.java.lang.String)"},"variableMap":{"txt":"txt","org.apache.commons.codec.language.Caverphone1.SIX_1":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:101","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"p+\", \"P\")"},"status":-1},{"failures":[13,14,78,15,69],"tindex":"d755ba24-4337-11e5-90c5-57470c8b8ef7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:145","type":"CtIfImpl","sourcecode":"if (java.lang.String.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    boolean = false;\n} "},"variableMap":{"inExtendedComment":"result","org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"target","line":"target"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:921","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : java.lang.String[]) {\n    if (java.lang.String.equals(java.lang.String)) {\n        boolean = true;\n        break;\n    } \n}"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
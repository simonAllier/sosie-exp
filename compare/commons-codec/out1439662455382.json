{"failureDictionary":{"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":77,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":3,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":48,"org.apache.commons.codec.language.NysiisTest.testSnat":35,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":49,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":11,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":21,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":50,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":6,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":54,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":70,"org.apache.commons.codec.language.NysiisTest.testDropBy":37,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":52,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":53,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":73,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":23,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":55,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":20,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":72,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":18,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":15,"org.apache.commons.codec.language.NysiisTest.testRule2":29,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":14,"org.apache.commons.codec.language.NysiisTest.testRule1":28,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":65,"org.apache.commons.codec.language.NysiisTest.testRule7":32,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":16,"org.apache.commons.codec.language.NysiisTest.testRule6":31,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":67,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":74,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":75,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":19,"org.apache.commons.codec.language.NysiisTest.testRule5":30,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":66,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":68,"org.apache.commons.codec.language.NysiisTest.testCap":24,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":60,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":36,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":64,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":62,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":4,"org.apache.commons.codec.language.NysiisTest.testBran":33,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":40,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":63,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":43,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":57,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":12,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":13,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":42,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":2,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":44,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":45,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":56,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":7,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":61,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":47,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":5,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":46,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":71,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":8,"org.apache.commons.codec.language.SoundexTest.testB650":51,"org.apache.commons.codec.language.NysiisTest.testDad":25,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":41,"org.apache.commons.codec.language.SoundexTest.testNewInstance":59,"org.apache.commons.codec.language.NysiisTest.testOthers":38,"org.apache.commons.codec.language.NysiisTest.testTranan":39,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":10,"org.apache.commons.codec.language.SoundexTest.testDifference":58,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":22,"org.apache.commons.codec.language.NysiisTest.testDan":26,"org.apache.commons.codec.language.NysiisTest.testFal":27,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":17,"org.apache.commons.codec.language.NysiisTest.testSnad":34,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":9,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":69,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":76},"transformations":[{"failures":[],"tindex":"70046d01-4379-11e5-ae73-dddc2b560b30","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:140","type":"CtIfImpl","sourcecode":"if (char == 'N') {\n    return org.apache.commons.codec.language.Nysiis.char[];\n} else {\n    return org.apache.commons.codec.language.Nysiis.char[];\n}"},"variableMap":{"next":"curr","org.apache.commons.codec.language.Nysiis.CHARS_NN":"org.apache.commons.codec.language.Nysiis.CHARS_A","org.apache.commons.codec.language.Nysiis.CHARS_C":"org.apache.commons.codec.language.Nysiis.CHARS_A"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:125","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.isVowel(char)) {\n    return org.apache.commons.codec.language.Nysiis.char[];\n} "},"status":-2},{"failures":[0,1,2,3],"tindex":"70046d02-4379-11e5-ae73-577d199a2929","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:260","type":"CtReturnImpl","sourcecode":"return int >= int"},"variableMap":{"count":"index","minRating":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:786","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int - 2)))) {\n    return false;\n} else if (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 3, \"ACH\"))) {\n    return false;\n} else {\n    final char char = org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int + 2));\n    return ((char != 'I') && (char != 'E')) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 6, \"BACHER\", \"MACHER\"));\n}"},"status":-1},{"failures":[],"tindex":"70049413-4379-11e5-ae73-0dc8d5f8deeb","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:446","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) + 1) % (org.apache.commons.codec.binary.Base64.int)"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"pos","context":"context","modulus":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:510","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[],"tindex":"70049414-4379-11e5-ae73-71b8220e204c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:128","type":"CtReturnImpl","sourcecode":"return java.lang.String.substring(0, org.apache.commons.codec.language.Caverphone2.java.lang.String.length())"},"status":-2},{"failures":[],"tindex":"70049415-4379-11e5-ae73-737754c9bac4","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:197","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[512]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:462","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-2},{"failures":[],"tindex":"70049416-4379-11e5-ae73-c9d572c7ecd3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:117","type":"CtIfImpl","sourcecode":"if ((java.lang.String.charAt(int)) == (java.lang.String.charAt(int))) {\n    int++;\n} "},"variableMap":{"es1":"rawLine","es2":"location","i":"currentLine","diff":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:303","type":"CtIfImpl","sourcecode":"if ((java.lang.String[].int) != 4) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (java.lang.String[].int)) + \" parts: \") + java.lang.String) + \" in \") + java.lang.String));\n} else {\n    try {\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][0]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][1]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][2]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][3]);\n        final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(java.lang.String , java.lang.String , java.lang.String , java.lang.String);\n        final char char = org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.java.lang.String.charAt(0);\n        java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(char);\n        if (java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> == null) {\n            java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n            java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.put(char, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>);\n        } \n        java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>.add(org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule);\n    } catch (final java.lang.IllegalArgumentException e) {\n        throw new java.lang.IllegalStateException((((\"Problem parsing line \\'\" + int) + \"\\' in \") + java.lang.String) , java.lang.IllegalArgumentException);\n    }\n}"},"status":-2},{"failures":[4,5,6,7,8,9],"tindex":"7004bb27-4379-11e5-ae73-e7ff72a974fb","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:132","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.setCharAt(0, 'W')"},"variableMap":{"local":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:483","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][56], byte[][14], byte[][35], 4, java.lang.StringBuilder)"},"status":-1},{"failures":[10,11,12,13,14,15,16,17,18,19,20,21],"tindex":"7004bb28-4379-11e5-ae73-29a01929a8ac","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (int == (org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"b","len":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:371","type":"CtIfImpl","sourcecode":"if ((int != (org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (int != (org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n    java.io.ByteArrayOutputStream.write(int);\n} "},"status":-1},{"failures":[],"tindex":"7004bb29-4379-11e5-ae73-754e358aa9a3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.RefinedSoundex:137","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.RefinedSoundex.soundex(((java.lang.String)(java.lang.Object)))"},"variableMap":{"obj":"ascii","this":"ascii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:126","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(java.lang.Object)).toCharArray())"},"status":-2},{"failures":[],"tindex":"7004bb2a-4379-11e5-ae73-8d602532fb3e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:385","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"DG\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 2), 1, \"I\", \"E\", \"Y\")) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n        int += 3;\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"TK\");\n        int += 2;\n    }\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"DT\", \"DD\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T');\n    int += 2;\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T');\n    int++;\n}"},"status":-2},{"failures":[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"tindex":"7004bb2b-4379-11e5-ae73-c99a9a71f195","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:296","type":"CtAssignmentImpl","sourcecode":"int = (int >>> 1) | (int << 31)"},"variableMap":{"left":"count","right":"count"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:50","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[],"tindex":"7004bb2c-4379-11e5-ae73-dd456a4162a0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"org.apache.commons.codec.binary.BaseNCodec.EOF"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:144","type":"CtIfImpl","sourcecode":"if (boolean) {\n    org.apache.commons.codec.binary.BaseNCodec.encode(byte[], 0, org.apache.commons.codec.binary.BaseNCodec.int, org.apache.commons.codec.binary.BaseNCodec.Context);\n} else {\n    org.apache.commons.codec.binary.BaseNCodec.decode(byte[], 0, org.apache.commons.codec.binary.BaseNCodec.int, org.apache.commons.codec.binary.BaseNCodec.Context);\n}"},"status":-2},{"failures":[10,18],"tindex":"7004e23d-4379-11e5-ae73-83e88522a31c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:357","type":"CtAssignmentImpl","sourcecode":"int = ((((int & 255) << 16) | (int & 65280)) | ((int & 16711680) >>> 16)) | ((int & -268435456) >>> 4)"},"variableMap":{"c":"b","d":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:327","type":"CtAssignmentImpl","sourcecode":"int = 256 + int"},"status":-1},{"failures":[68,69,70,71,72,73],"tindex":"7004e23e-4379-11e5-ae73-91fd228ed8fb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:276","type":"CtIfImpl","sourcecode":"if ((java.lang.CharSequence.length()) > (java.lang.CharSequence.length())) {\n    return false;\n} "},"status":-1},{"failures":[],"tindex":"7004e23f-4379-11e5-ae73-83da7fffb575","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:335","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null) {\n    return null;\n} else if (java.lang.Object instanceof byte[]) {\n    return org.apache.commons.codec.net.URLCodec.decode(((byte[])(java.lang.Object)));\n} else if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.URLCodec.decode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be URL decoded\"));\n}"},"variableMap":{"obj":"object","this":"object"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:413","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.ColognePhonetic.encode(((java.lang.String)(java.lang.Object)))"},"status":-2},{"failures":[],"tindex":"7004e240-4379-11e5-ae73-c7743fc45af3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:728","type":"CtOperatorAssignmentImpl","sourcecode":"int += 4"},"variableMap":{"index":"ii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:243","type":"CtOperatorAssignmentImpl","sourcecode":"int >>= 1"},"status":-2},{"failures":[74,75,76,77],"tindex":"7004e241-4379-11e5-ae73-fd3f3915f4bb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:121","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String + (org.apache.commons.codec.language.Caverphone1.java.lang.String)"},"variableMap":{"txt":"txt","org.apache.commons.codec.language.Caverphone1.SIX_1":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:96","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"f+\", \"F\")"},"status":-1},{"failures":[],"tindex":"7004e242-4379-11e5-ae73-113d33bb84f7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:391","type":"CtAssignmentImpl","sourcecode":"char = char"},"variableMap":{"code":"code","chr":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:348","type":"CtAssignmentImpl","sourcecode":"char = '0'"},"status":-2},{"failures":[0,1],"tindex":"70050953-4379-11e5-ae73-f5f784a01e38","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:429","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K', 'J')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:423","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"KL\", \"L\")"},"status":-1},{"failures":[],"tindex":"70050954-4379-11e5-ae73-4fd07dbae566","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:62","type":"CtIfImpl","sourcecode":"if (char == char) {\n    continue;\n} "},"variableMap":{"c1":"lastChar","c2":"chr"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:366","type":"CtIfImpl","sourcecode":"if ((char == 'S') || (char == 'Z')) {\n    char = '8';\n} else if (char == 'C') {\n    if (char == '/') {\n        if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n            char = '4';\n        } else {\n            char = '8';\n        }\n    } else {\n        if (org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) || (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n            char = '8';\n        } else {\n            char = '4';\n        }\n    }\n} else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '8';\n} else if (char == 'R') {\n    char = '7';\n} else if (char == 'L') {\n    char = '5';\n} else if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
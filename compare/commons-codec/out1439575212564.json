{"failureDictionary":{"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":26,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":1,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":20,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":12,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":28,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":42,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":34,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":22,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":33,"org.apache.commons.codec.language.Caverphone1Test.testEncodeEmpty":27,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":39,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":0,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":35,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":17,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":41,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":19,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":43,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":14,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":32,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":13,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":30,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":5,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":7,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":4,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":21,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":9,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":3,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":16,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":11,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":31,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":10,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":15,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":23,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":24,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":6,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":38,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":37,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":2,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":25,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":36,"org.apache.commons.codec.language.MetaphoneTest.testTCH":29,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":8,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":40,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":18},"transformations":[{"failures":[],"tindex":"4f3d2d1c-42ae-11e5-b9fe-27d59a7b9b8e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:96","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(byte[])"},"variableMap":{"bytes":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:200","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":0},{"failures":[],"tindex":"4f3d2d1d-42ae-11e5-b9fe-87affe1b2a8b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:709","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.hmacSha512(byte[], java.io.InputStream))"},"status":-2},{"failures":[0],"tindex":"4f3d2d1e-42ae-11e5-b9fe-29b69b790b2a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:582","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.hmacSha384(byte[], byte[]))"},"status":-1},{"failures":[1,2,3],"tindex":"4f3d2d1f-42ae-11e5-b9fe-5d92e5bcbb57","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:225","type":"CtOperatorAssignmentImpl","sourcecode":"int -= int"},"variableMap":{"blocksize":"index","cnt":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:682","type":"CtOperatorAssignmentImpl","sourcecode":"int += 3"},"status":-1},{"failures":[2,3],"tindex":"4f3d5430-42ae-11e5-b9fe-65d39833be3f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:690","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('0', 'T')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:611","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X')"},"status":-1},{"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16],"tindex":"4f3d5431-42ae-11e5-b9fe-592a345fe8f4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:69","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:514","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-1},{"failures":[17,1,2,3],"tindex":"4f3d5432-42ae-11e5-b9fe-b9756fac5141","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:502","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('H')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:740","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    int++;\n} else {\n    if (!((int == ((java.lang.String.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 3), 3, \"IAU\", \"EAU\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 2, \"AU\", \"OU\"))))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"KS\");\n    } \n    int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"C\", \"X\") ? int + 2 : int + 1;\n}"},"status":-1},{"failures":[],"tindex":"4f3d5433-42ae-11e5-b9fe-5b4315895a2a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:188","type":"CtLocalVariableImpl","sourcecode":"final java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern.matcher(java.lang.String)"},"status":-2},{"failures":[18,19,20,21],"tindex":"4f3d5434-42ae-11e5-b9fe-953a3612e089","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:132","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.setCharAt(0, 'W')"},"variableMap":{"local":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:247","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.setCharAt(int, ((char)(org.apache.commons.codec.digest.UnixCrypt.int[][int])))"},"status":-1},{"failures":[22],"tindex":"4f3d5435-42ae-11e5-b9fe-5b31a2dfe832","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.int"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"maxCodeLen","encodeSize":"maxCodeLen"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:261","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"status":-1},{"failures":[],"tindex":"4f3d7b46-42ae-11e5-b9fe-3dc1a4db9c5c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:362","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) << 2) & (org.apache.commons.codec.binary.Base64.int))]"},"variableMap":{"encodeTable":"buffer","ibitWorkArea":"pos","pos":"pos","context":"context","org.apache.commons.codec.binary.Base64.MASK_6BITS":"ibitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:473","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.int) & (org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2},{"failures":[23,24,25,26,27],"tindex":"4f3d7b47-42ae-11e5-b9fe-01972ad54898","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:614","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(1)"},"variableMap":{"str":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:66","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"mb$\", \"m2\")"},"status":-1},{"failures":[2,3],"tindex":"4f3d7b48-42ae-11e5-b9fe-c5488a865f20","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:723","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:609","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S')"},"status":-1},{"failures":[],"tindex":"4f3d7b49-42ae-11e5-b9fe-9f41de2e71bc","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:421","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha256(byte[]).doFinal(byte[])"},"variableMap":{"valueToDigest":"key","this":"this","key":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:420","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha256(byte[]).doFinal(byte[]);\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalArgumentException(java.lang.IllegalStateException);\n}"},"status":-2},{"failures":[],"tindex":"4f3d7b4a-42ae-11e5-b9fe-9dcd58694789","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:108","type":"CtSwitchImpl","sourcecode":"switch (char[][0]) {\n    case 'K' :\n    case 'G' :\n    case 'P' :\n        if ((char[][1]) == 'N') {\n            java.lang.StringBuilder.append(char[], 1, ((char[].int) - 1));\n        } else {\n            java.lang.StringBuilder.append(char[]);\n        }\n        break;\n    case 'A' :\n        if ((char[][1]) == 'E') {\n            java.lang.StringBuilder.append(char[], 1, ((char[].int) - 1));\n        } else {\n            java.lang.StringBuilder.append(char[]);\n        }\n        break;\n    case 'W' :\n        if ((char[][1]) == 'R') {\n            java.lang.StringBuilder.append(char[], 1, ((char[].int) - 1));\n            break;\n        } \n        if ((char[][1]) == 'H') {\n            java.lang.StringBuilder.append(char[], 1, ((char[].int) - 1));\n            java.lang.StringBuilder.setCharAt(0, 'W');\n        } else {\n            java.lang.StringBuilder.append(char[]);\n        }\n        break;\n    case 'X' :\n        char[][0] = 'S';\n        java.lang.StringBuilder.append(char[]);\n        break;\n    default :\n        java.lang.StringBuilder.append(char[]);\n}"},"status":-2},{"failures":[28,29],"tindex":"4f3d7b4b-42ae-11e5-b9fe-89d5393b893a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:185","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('S')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:199","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('X')"},"status":-1},{"failures":[30,31,32,33,34,35],"tindex":"4f3da25c-42ae-11e5-b9fe-738e62f8c56e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:463","type":"CtReturnImpl","sourcecode":"return java.lang.StringBuilder.substring(1)"},"variableMap":{"result":"sb"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:472","type":"CtReturnImpl","sourcecode":"return java.lang.StringBuilder.toString()"},"status":-1},{"failures":[],"tindex":"4f3da25d-42ae-11e5-b9fe-d130cd2f5bca","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:339","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.URLCodec.decode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be URL decoded\"));\n}"},"status":-2},{"failures":[36,37,38,39,40,41,42,43],"tindex":"4f3da25e-42ae-11e5-b9fe-0bf3c89958d0","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:387","type":"CtAssignmentImpl","sourcecode":"char = '5'"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:348","type":"CtAssignmentImpl","sourcecode":"char = '0'"},"status":-1},{"failures":[],"tindex":"4f3da25f-42ae-11e5-b9fe-239c638ae78c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:103","type":"CtForImpl","sourcecode":"for (int int = 62 ; int <= 126 ; int++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(int);\n}"},"variableMap":{"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:71","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('&')"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
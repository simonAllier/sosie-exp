{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":7,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":9,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":29,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":11,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":19,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":21,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":6,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":32,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameNullSpace_ReturnsFalseSuccessfully":2,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":10,"org.apache.commons.codec.language.NysiisTest.testDropBy":31,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":28,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":8,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":12,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":15,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse":3,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":20,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":18,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":25,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse":4,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":26,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":14,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":13,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":33,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse":1,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":23,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":24,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":5,"org.apache.commons.codec.language.SoundexTest.testDifference":16,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":22,"org.apache.commons.codec.language.Caverphone2Test.testEncodeEmpty":27,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":30,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":17,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnameCornerCase_Nulls_NoMatch":0},"transformations":[{"failures":[0,1,2,3,4],"tindex":"c7e04441-42dc-11e5-9c07-ef1721d0106c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:215","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[5],"tindex":"c7e04442-42dc-11e5-9c07-09f47ffb053e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} "},"status":-1},{"failures":[],"tindex":"c7e04443-42dc-11e5-9c07-b59c39e92d06","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((java.lang.String.length()) != 1) || ((java.lang.String.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + java.lang.String) + \" in \") + java.lang.String));\n} "},"variableMap":{"rawLine":"salt","leftCharacter":"org.apache.commons.codec.digest.B64.B64T","rightCharacter":"org.apache.commons.codec.digest.B64.B64T","location":"salt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.java.lang.String)) + \"]{2,}$\")))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + java.lang.String));\n} "},"status":-2},{"failures":[],"tindex":"c7e06b54-42dc-11e5-9c07-cb6ddf30ddc4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:154","type":"CtIfImpl","sourcecode":"if (int >= 0) {\n    java.lang.String = java.lang.String.substring(0, int);\n} "},"variableMap":{"cmtI":"currentLine","line":"rawLine"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:303","type":"CtIfImpl","sourcecode":"if ((java.lang.String[].int) != 4) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (java.lang.String[].int)) + \" parts: \") + java.lang.String) + \" in \") + java.lang.String));\n} else {\n    try {\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][0]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][1]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][2]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][3]);\n        final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(java.lang.String , java.lang.String , java.lang.String , java.lang.String);\n        final char char = org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.java.lang.String.charAt(0);\n        java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(char);\n        if (java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> == null) {\n            java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n            java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.put(char, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>);\n        } \n        java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>.add(org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule);\n    } catch (final java.lang.IllegalArgumentException e) {\n        throw new java.lang.IllegalStateException((((\"Problem parsing line \\'\" + int) + \"\\' in \") + java.lang.String) , java.lang.IllegalArgumentException);\n    }\n}"},"status":-2},{"failures":[6,7,8,9,10,11,12,13],"tindex":"c7e06b55-42dc-11e5-9c07-7df712505dea","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:770","type":"CtInvocationImpl","sourcecode":"javax.crypto.Mac.update(byte[], 0, int)"},"status":-1},{"failures":[],"tindex":"c7e06b56-42dc-11e5-9c07-bfdb7f8a3c21","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:331","type":"CtAssignmentImpl","sourcecode":"int = (int >>> 4) | (int << 28)"},"variableMap":{"t":"org.apache.commons.codec.binary.Base32.BYTES_PER_UNENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:502","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) + 1) % (org.apache.commons.codec.binary.Base32.int)"},"status":-2},{"failures":[],"tindex":"c7e06b57-42dc-11e5-9c07-7f157e1ad195","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:137","type":"CtAssignmentImpl","sourcecode":"int = '+'"},"variableMap":{"b":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:246","type":"CtAssignmentImpl","sourcecode":"int = byte[].int"},"status":-2},{"failures":[],"tindex":"c7e06b58-42dc-11e5-9c07-9b2c50a20e4c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:235","type":"CtAssignmentImpl","sourcecode":"int = int"},"variableMap":{"ii":"modulus","keyLen":"org.apache.commons.codec.binary.Base32.BYTES_PER_UNENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:502","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) + 1) % (org.apache.commons.codec.binary.Base32.int)"},"status":-2},{"failures":[],"tindex":"c7e06b59-42dc-11e5-9c07-af8b60368135","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:99","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:535","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be quoted-printable decoded\"))"},"status":-2},{"failures":[],"tindex":"c7e0926a-42dc-11e5-9c07-a59bc280573f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:293","type":"CtLocalVariableImpl","sourcecode":"char char = java.lang.StringBuilder.charAt(((java.lang.StringBuilder.length()) - 1))"},"variableMap":{"key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:302","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.StringBuilder.charAt(((java.lang.StringBuilder.length()) - 2))"},"status":-2},{"failures":[],"tindex":"c7e0926b-42dc-11e5-9c07-8fd7981f3641","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    java.lang.String = java.lang.String.substring(1);\n} "},"variableMap":{"str":"prefix","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"prefix"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:206","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(java.lang.String.getBytes(org.apache.commons.codec.Charsets.java.nio.charset.Charset))"},"status":-2},{"failures":[14,15,16],"tindex":"c7e0926c-42dc-11e5-9c07-939068905f66","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:90","type":"CtReturnImpl","sourcecode":"return +1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:112","type":"CtReturnImpl","sourcecode":"return 0"},"status":-1},{"failures":[17,18],"tindex":"c7e0926d-42dc-11e5-9c07-751b3fd71e1f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:429","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K', 'J')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:706","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('R')"},"status":-1},{"failures":[],"tindex":"c7e0926e-42dc-11e5-9c07-67228f123bf3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:154","type":"CtIfImpl","sourcecode":"if (int >= 0) {\n    java.lang.String = java.lang.String.substring(0, int);\n} "},"variableMap":{"cmtI":"n","line":"accentedWord"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:359","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    final char char = java.lang.String.charAt(int);\n    final int int = org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.indexOf(char);\n    if (int > (-1)) {\n        java.lang.StringBuilder.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(int));\n    } else {\n        java.lang.StringBuilder.append(char);\n    }\n}"},"status":-2},{"failures":[],"tindex":"c7e0926f-42dc-11e5-9c07-8100e3c1d6a9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:360","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"variableMap":{"pos":"org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK","context":"context"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:356","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) + 1) % (org.apache.commons.codec.binary.Base32.int)"},"status":-2},{"failures":[19,20,21,22,23,24,25,26,27],"tindex":"c7e0b980-42dc-11e5-9c07-938dcf40af04","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:618","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(0, ((java.lang.String.length()) - 1))"},"variableMap":{"str":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:106","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"w3\", \"W3\")"},"status":-1},{"failures":[17,18,28,29],"tindex":"c7e0b981-42dc-11e5-9c07-b348a22d8ef7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:695","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"T\", \"D\") ? int + 2 : int + 1"},"status":-1},{"failures":[],"tindex":"c7e0b982-42dc-11e5-9c07-49716935b0f1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:414","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"O\", org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:100","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"wy\", \"Wy\")"},"status":1},{"failures":[30,31],"tindex":"c7e0b983-42dc-11e5-9c07-03c28607994d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:121","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.char[]"},"status":-1},{"failures":[17,18,32,33,29],"tindex":"c7e0b984-42dc-11e5-9c07-ab441c8fd528","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:414","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"KN\", \"N\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:527","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'A')"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean":11,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":19,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":4,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":29,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":32,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":9,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":35,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":3,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":2,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":27,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":28,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":17,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":20,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":14,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":16,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":23,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":26,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":7,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":12,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":8,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":34,"org.apache.commons.codec.language.NysiisTest.testOthers":33,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":10,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":18,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":31,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":13,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex":25,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":6,"org.apache.commons.codec.language.SoundexTest.testDifference":30,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray":24,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":5,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":21,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":15,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray":22},"transformations":[{"failures":[0,1,2,3,4],"tindex":"94f9316c-437d-11e5-a468-395bdc797ff7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:450","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'K')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:123","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('F')"},"status":-1},{"failures":[],"tindex":"94f9587d-437d-11e5-a468-8b84d2d37b6b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:452","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[5,6,7,8],"tindex":"94f9587e-437d-11e5-a468-cd896ca65dbe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:104","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^h\", \"A\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:101","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"p+\", \"P\")"},"status":-1},{"failures":[],"tindex":"94f9587f-437d-11e5-a468-cbb8dcd65e17","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    return null;\n} "},"variableMap":{"bytes":"binaryData"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:662","type":"CtIfImpl","sourcecode":"if ((byte[] == null) || ((byte[].int) == 0)) {\n    return byte[];\n} "},"status":0},{"failures":[0,1,9,10,4],"tindex":"94f95880-437d-11e5-a468-71a77134b2df","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:528","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.(isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int - 1)))) && (!boolean)) && ((org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'A') || (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'O'))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'H');\n} else if (int == ((java.lang.String.length()) - 1)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', ' ');\n} else if ((!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 1, \"S\", \"K\", \"L\")))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n} "},"variableMap":{"result":"result","org.apache.commons.codec.language.DoubleMetaphone.L_T_K_S_N_M_B_Z":"org.apache.commons.codec.language.DoubleMetaphone.L_T_K_S_N_M_B_Z","this":"this","index":"index","slavoGermanic":"slavoGermanic","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:516","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 4, \"JOSE\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 4, \"SAN \"))) {\n    if ((((int == 0) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 4))) == ' ')) || ((java.lang.String.length()) == 4)) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 4, \"SAN \"))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('H');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'H');\n    }\n    int++;\n} else {\n    if ((int == 0) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 4, \"JOSE\")))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'A');\n    } else if ((org.apache.commons.codec.language.DoubleMetaphone.(isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int - 1)))) && (!boolean)) && ((org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'A') || (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'O'))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'H');\n    } else if (int == ((java.lang.String.length()) - 1)) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', ' ');\n    } else if ((!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 1, \"S\", \"K\", \"L\")))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n    } \n    if (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'J') {\n        int += 2;\n    } else {\n        int++;\n    }\n}"},"status":-1},{"failures":[],"tindex":"94f97f91-437d-11e5-a468-2d54872c967a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:505","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.encode(((byte[])(java.lang.Object)))"},"variableMap":{"obj":"obj","this":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:314","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.URLCodec.encode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be URL encoded\"));\n}"},"status":-2},{"failures":[11],"tindex":"94f97f92-437d-11e5-a468-d7a816dcb659","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:510","type":"CtReturnImpl","sourcecode":"return (byte == (org.apache.commons.codec.binary.BaseNCodec.byte)) || (((byte >= 0) && (byte < (org.apache.commons.codec.binary.Base64.byte[].int))) && ((org.apache.commons.codec.binary.Base64.byte[][byte]) != (-1)))"},"variableMap":{"org.apache.commons.codec.binary.Base64.DECODE_TABLE":"arrayOctet","org.apache.commons.codec.binary.BaseNCodec.PAD_DEFAULT":"pad","octet":"pad","length":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:465","type":"CtIfImpl","sourcecode":"if ((!org.apache.commons.codec.binary.BaseNCodec.(isInAlphabet(byte[][int]))) && ((!boolean) || (((byte[][int]) != (byte)) && (!org.apache.commons.codec.binary.BaseNCodec.(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte[][int])))))) {\n    return false;\n} "},"status":-1},{"failures":[12,0,1,2,13,3,4,14,15],"tindex":"94f97f93-437d-11e5-a468-b10d8ec30596","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:906","type":"CtReturnImpl","sourcecode":"return java.lang.Character.char"},"status":-1},{"failures":[],"tindex":"94f97f94-437d-11e5-a468-ab546efbcd68","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtIfImpl","sourcecode":"if (java.lang.String.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    java.lang.String = java.lang.String.substring(0, ((java.lang.String.length()) - 1));\n} "},"variableMap":{"str":"incl","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"location"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:436","type":"CtIfImpl","sourcecode":"if (java.lang.String.contains(\" \")) {\n    throw new java.lang.IllegalArgumentException((((\"Malformed import statement \\'\" + java.lang.String) + \"\\' in \") + java.lang.String));\n} else {\n    java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>.putAll(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.createScanner(java.lang.String), ((java.lang.String + \"->\") + java.lang.String)));\n}"},"status":-2},{"failures":[16,17,18,19,20,21],"tindex":"94f9a6a5-437d-11e5-a468-0953db5c6c31","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:113","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[int]"},"variableMap":{"avail":"decodeSize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:375","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-1},{"failures":[22,23,24],"tindex":"94f9a6a6-437d-11e5-a468-c991f496301d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:239","type":"CtIfImpl","sourcecode":"if (((byte[][int]) & int) != 0) {\n    int |= 1;\n} "},"variableMap":{"b":"ascii","c":"bits","u":"jj","y":"jj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:210","type":"CtIfImpl","sourcecode":"if ((byte[][(int - int)]) == '1') {\n    byte[][int] |= org.apache.commons.codec.binary.BinaryCodec.int[][int];\n} "},"status":-1},{"failures":[],"tindex":"94f9a6a7-437d-11e5-a468-65859f104261","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:314","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.URLCodec.encode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be URL encoded\"));\n}"},"variableMap":{"obj":"obj","this":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:528","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null) {\n    return null;\n} else if (java.lang.Object instanceof byte[]) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.decode(((byte[])(java.lang.Object)));\n} else if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.decode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be quoted-printable decoded\"));\n}"},"status":-2},{"failures":[25,26,27,28,29,30,31,32,33,34],"tindex":"94f9a6a8-437d-11e5-a468-e3dab4eb6fee","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:56","type":"CtReturnImpl","sourcecode":"return new java.lang.String(char[] , 0 , int).toUpperCase(java.util.Locale.java.util.Locale)"},"status":-1},{"failures":[0,1,3,4],"tindex":"94f9a6a9-437d-11e5-a468-9b327670f5a6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:429","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K', 'J')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:560","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('L')"},"status":-1},{"failures":[35],"tindex":"94f9a6aa-437d-11e5-a468-e3515624b11f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:246","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.hmacMd5(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String))"},"variableMap":{"valueToDigest":"key","this":"this","key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:567","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.hmacSha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String))"},"status":-1},{"failures":[],"tindex":"94f9cdbb-437d-11e5-a468-d53e2da96f2c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (int == (org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"to","len":"to"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (int == int) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"status":-2},{"failures":[],"tindex":"94f9cdbc-437d-11e5-a468-6fe17941d72d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:77","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"v\", \"f\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:90","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"gh\", \"22\")"},"status":1}],"header":{"groupId":"commons-codec","transformationCount":17,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"},"diffs":[{"transformation":"94f9587f-437d-11e5-a468-cbb8dcd65e17","diffs":[{"branches":{"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":["org.apache.commons.codec.binary.Base64_byte[]_encodeBase64(byte[],boolean,boolean,int).t1","org.apache.commons.codec.binary.BaseNCodec_byte[]_encode(byte[]).t1"],"org.apache.commons.codec.binary.Base64Test.testUrlSafe":["org.apache.commons.codec.binary.Base64_byte[]_encodeBase64(byte[],boolean,boolean,int).t1","org.apache.commons.codec.binary.BaseNCodec_byte[]_encode(byte[]).t1"],"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":["org.apache.commons.codec.binary.Base64_byte[]_encodeBase64(byte[],boolean,boolean,int).t1","org.apache.commons.codec.binary.BaseNCodec_byte[]_encode(byte[]).t1"],"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":["org.apache.commons.codec.binary.Base64_byte[]_encodeBase64(byte[],boolean,boolean,int).t1","org.apache.commons.codec.binary.BaseNCodec_byte[]_encode(byte[]).t1"]},"type":"branch"}]}]}
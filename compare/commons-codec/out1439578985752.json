{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":24,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":14,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":48,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":4,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":33,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":23,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":8,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":37,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":59,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":36,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":64,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":55,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":63,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":12,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":39,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":60,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":62,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":35,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":66,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":45,"org.apache.commons.codec.binary.Base64Test.testUUID":2,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":26,"org.apache.commons.codec.binary.Base64Test.testSingletons":6,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":11,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":50,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":9,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":47,"org.apache.commons.codec.binary.Base64Test.testCodec112":5,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":44,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":57,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":41,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":21,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay":56,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":16,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":3,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":46,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":20,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":34,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":51,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":15,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":0,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":13,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":28,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":22,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":27,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":42,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":65,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":1,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":31,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":38,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":32,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":10,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":61,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert":40,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":53,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":54,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero":49,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":7,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":17,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":52,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":43,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":18,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":29,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":19,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":58,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":25,"org.apache.commons.codec.language.MetaphoneTest.testTCH":30},"transformations":[{"failures":[0],"tindex":"183d592e-42b7-11e5-8a38-f5ced1b55240","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:285","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.md5(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String))"},"variableMap":{"data":"data","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:485","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(java.lang.String))"},"status":-1},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],"tindex":"183da74f-42b7-11e5-8a38-3d0c38e06833","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:354","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte"},"status":-1},{"failures":[],"tindex":"183da750-42b7-11e5-8a38-db7d45b86d9d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:564","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.getSha384Digest(), java.io.InputStream)"},"status":-2},{"failures":[],"tindex":"183da751-42b7-11e5-8a38-051612c3f2da","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} "},"variableMap":{"charset":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:179","type":"CtTryImpl","sourcecode":"try {\n    boolean boolean = false;\n    while (java.util.Scanner.hasNextLine()) {\n        final java.lang.String java.lang.String = java.util.Scanner.nextLine().trim();\n        if (boolean) {\n            if (java.lang.String.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                boolean = false;\n            } \n        } else {\n            if (java.lang.String.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                boolean = true;\n            } else if ((java.lang.String.length()) > 0) {\n                java.util.Set<java.lang.String>.add(java.lang.String);\n            } \n        }\n    }\n} finally {\n    java.util.Scanner.close();\n}"},"status":-2},{"failures":[18,19,20,21,22],"tindex":"183dcd62-42b7-11e5-8a38-f3fdacf83c30","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.B64:57","type":"CtLocalVariableImpl","sourcecode":"int int = (((byte << 16) & 16777215) | ((byte << 8) & 65535)) | (byte & 255)"},"variableMap":{"b2":"c","b0":"c","b1":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:131","type":"CtLocalVariableImpl","sourcecode":"int int = byte"},"status":-1},{"failures":[23,24,25,26],"tindex":"183dcd63-42b7-11e5-8a38-bb176c264f59","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:574","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"P\", \"B\") ? int + 2 : int + 1"},"status":-1},{"failures":[],"tindex":"183dcd64-42b7-11e5-8a38-3bebb275d247","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:481","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 27))) & (org.apache.commons.codec.binary.Base32.int))]"},"variableMap":{"encodeTable":"buffer","pos":"org.apache.commons.codec.binary.Base32.MASK_5BITS","org.apache.commons.codec.binary.Base32.MASK_5BITS":"pos","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:515","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 5))) & (org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[],"tindex":"183dcd65-42b7-11e5-8a38-b74cd8459129","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:259","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException(\"Can\\'t fetch any language from the any language set.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:281","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + java.lang.String) + \"]\"))"},"status":-2},{"failures":[24],"tindex":"183df476-42b7-11e5-8a38-5bec3ba66dcf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:629","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"Z\") ? int + 2 : int + 1"},"variableMap":{"this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:173","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'V' ? int + 2 : int + 1"},"status":-1},{"failures":[],"tindex":"183df477-42b7-11e5-8a38-395175458574","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtIfImpl","sourcecode":"if (java.lang.Character.isWhitespace(char)) {\n    continue;\n} "},"variableMap":{"ch":"ch"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:177","type":"CtIfImpl","sourcecode":"if (int == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Illegal hexadecimal character \" + char) + \" at index \") + int));\n} "},"status":-2},{"failures":[],"tindex":"183df478-42b7-11e5-8a38-e15c9d8b724f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || ((java.lang.String.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone1.java.lang.String;\n} "},"variableMap":{"txt":"str","org.apache.commons.codec.language.Caverphone1.SIX_1":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"status":0},{"failures":[27,24,25,26],"tindex":"183df479-42b7-11e5-8a38-fd381c7e7019","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:141","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[],"tindex":"183e1b8a-42b7-11e5-8a38-bb434bb1db56","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:163","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.substring(0, org.apache.commons.codec.language.MatchRatingApproachEncoder.int)"},"status":-2},{"failures":[27,25,26],"tindex":"183e1b8b-42b7-11e5-8a38-4de2f705f765","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:532","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', ' ')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 2, \"MC\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X', 'K');\n}"},"status":-1},{"failures":[28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"tindex":"183e1b8c-42b7-11e5-8a38-95394365b71e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:212","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.setCharAt(1, char)"},"variableMap":{"buffer":"code","charOne":"symb"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:161","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    java.lang.StringBuilder.append(char);\n} "},"status":-1},{"failures":[],"tindex":"183e1b8d-42b7-11e5-8a38-2720c84f3e62","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    int += 256;\n} "},"variableMap":{"b":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:374","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, byte[], org.apache.commons.codec.binary.BaseNCodec.Context.int, byte[].int)"},"status":-2},{"failures":[57,58,59,60,61,62,63,64,65,66],"tindex":"183e429e-42b7-11e5-8a38-cfa70297f18a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:602","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"183e429f-42b7-11e5-8a38-6d721df85a24","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:222","type":"CtIfImpl","sourcecode":"if (!(this.boolean)) {\n    int = 1;\n} "},"variableMap":{"found":"eof","patternLength":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:461","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.binary.BaseNCodec.Context.boolean) && ((org.apache.commons.codec.binary.BaseNCodec.Context.int) != 0)) {\n    final byte[] byte[] = org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int, org.apache.commons.codec.binary.BaseNCodec.Context);\n    switch (org.apache.commons.codec.binary.BaseNCodec.Context.int) {\n        case 1 :\n            break;\n        case 2 :\n            org.apache.commons.codec.binary.BaseNCodec.Context.int = (org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 4;\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.int) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 3 :\n            org.apache.commons.codec.binary.BaseNCodec.Context.int = (org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 2;\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.int) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        default :\n            throw new java.lang.IllegalStateException((\"Impossible modulus \" + (org.apache.commons.codec.binary.BaseNCodec.Context.int)));\n    }\n} "},"status":-2},{"failures":[],"tindex":"183e42a0-42b7-11e5-8a38-e35fc8277d6a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    return null;\n} "},"status":0}],"header":{"groupId":"commons-codec","transformationCount":19,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
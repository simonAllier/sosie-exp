{"failureDictionary":{"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":29,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":13,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":14,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":16,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":4,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":3,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":8,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":12,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":5,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":22,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":11,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":2,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":0,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":6,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":15,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":31,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":28,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":10,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":27,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":20,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":25,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":21,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":1,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":24,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":18,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":19,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":7,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":26,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":17,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":9,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":23,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":30},"transformations":[{"failures":[],"tindex":"caa67664-42ec-11e5-b5be-877cbc561801","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:445","type":"CtIfImpl","sourcecode":"if (int >= 0) {\n    org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) + 1) % (org.apache.commons.codec.binary.Base64.int);\n    org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) << (org.apache.commons.codec.binary.Base64.int)) + int;\n    if ((org.apache.commons.codec.binary.BaseNCodec.Context.int) == 0) {\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n        byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.int) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n    } \n} "},"variableMap":{"result":"readPos","org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"pos","ibitWorkArea":"pos","pos":"pos","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"readPos","context":"context","org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE":"pos","buffer":"buffer","modulus":"readPos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:296","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.binary.BaseNCodec.Context.int) >= (org.apache.commons.codec.binary.BaseNCodec.Context.int)) {\n    org.apache.commons.codec.binary.BaseNCodec.Context.byte[] = null;\n} "},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8],"tindex":"caa69d75-42ec-11e5-b5be-395f1c0839d3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:554","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>) {\n    org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.finish();\n    java.lang.String[][int++] = org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.toString();\n}"},"status":-1},{"failures":[],"tindex":"caa69d76-42ec-11e5-b5be-999a3a808796","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:220","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = java.security.MessageDigest.digest()"},"status":-2},{"failures":[9,10,11,12,13],"tindex":"caa69d77-42ec-11e5-b5be-9dfc6873b4f4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:303","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base32.int"},"variableMap":{"encodeSize":"index","org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:173","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'V' ? int + 2 : int + 1"},"status":-1},{"failures":[14,15,16,17,18,19,20,21],"tindex":"caa6c488-42ec-11e5-b5be-bb1bf8a2170d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:165","type":"CtReturnImpl","sourcecode":"return java.lang.String + java.lang.String"},"variableMap":{"firstThree":"txt","lastThree":"org.apache.commons.codec.language.Caverphone2.TEN_1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:128","type":"CtReturnImpl","sourcecode":"return java.lang.String.substring(0, org.apache.commons.codec.language.Caverphone2.java.lang.String.length())"},"status":-1},{"failures":[],"tindex":"caa6c489-42ec-11e5-b5be-0900c06cbd52","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:93","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('\\\\')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:106","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-2},{"failures":[],"tindex":"caa6c48a-42ec-11e5-b5be-a7cdf380c095","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:61","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^tough\", \"tou2f\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:67","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^gn\", \"2n\")"},"status":1},{"failures":[22],"tindex":"caa6c48b-42ec-11e5-b5be-d3158967e708","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:182","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"The finalRules argument must not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:671","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((((\"Input array too big, the output array would be bigger (\" + long) + \") than the specified maximum size of \") + int))"},"status":-1},{"failures":[23,24,25,26,27,28],"tindex":"caa6c48c-42ec-11e5-b5be-db8e0608db61","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:482","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][34], byte[][55], byte[][13], 4, java.lang.StringBuilder)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:458","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(byte[][21], byte[][1], byte[][11], 4, java.lang.StringBuilder)"},"status":-1},{"failures":[29],"tindex":"caa6c48d-42ec-11e5-b5be-75b1f570dc03","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:114","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"y\", \"2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:86","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^[aeiou]\", \"A\")"},"status":-1},{"failures":[],"tindex":"caa6eb9e-42ec-11e5-b5be-5106d86213b1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:393","type":"CtLocalVariableImpl","sourcecode":"final int int = ((int << (16 - int)) ^ int) & int"},"status":-2},{"failures":[],"tindex":"caa6eb9f-42ec-11e5-b5be-eb0a41559cba","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:358","type":"CtOperatorAssignmentImpl","sourcecode":"int &= 268435455"},"variableMap":{"c":"minRating"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:252","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.MatchRatingApproachEncoder.getMinRating(int)"},"status":1},{"failures":[],"tindex":"caa6eba0-42ec-11e5-b5be-c3a7fc8618cb","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:227","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[9]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:283","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = java.security.MessageDigest.digest()"},"status":-2},{"failures":[],"tindex":"caa6eba1-42ec-11e5-b5be-59c05ec2ccba","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:89","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('*')"},"variableMap":{"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:67","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('\\\"')"},"status":-2},{"failures":[],"tindex":"caa6eba2-42ec-11e5-b5be-d5be3aaf542b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:283","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:185","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[18,20,21],"tindex":"caa6eba3-42ec-11e5-b5be-ef8fcb522982","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:147","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String"},"variableMap":{"lastReplacement":"txt","replacement":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:90","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^[aeiou]\", \"A\")"},"status":-1},{"failures":[],"tindex":"caa712b4-42ec-11e5-b5be-c99add17583b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:337","type":"CtReturnImpl","sourcecode":"return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (java.lang.String.length())))"},"status":-2},{"failures":[30,31],"tindex":"caa712b5-42ec-11e5-b5be-3f3e601c602c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:222","type":"CtAssignmentImpl","sourcecode":"byte[][int] = ((byte)(int << 1))"},"status":-1},{"failures":[9,10,12,13],"tindex":"caa712b6-42ec-11e5-b5be-c395c33b35c4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:589","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:760","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'H') {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n    int += 2;\n} else {\n    if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"ZO\", \"ZI\", \"ZA\")) || (boolean && ((int > 0) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int - 1))) != 'T')))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"S\", \"TS\");\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n    }\n    int = org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'Z' ? int + 2 : int + 1;\n}"},"status":-1},{"failures":[],"tindex":"caa712b7-42ec-11e5-b5be-35fedabaaffa","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.StringEncoderComparator:83","type":"CtLocalVariableImpl","sourcecode":"final java.lang.Comparable<?> java.lang.Comparable<?> = ((java.lang.Comparable<?>)(this.org.apache.commons.codec.StringEncoder.encode(java.lang.Object)))"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
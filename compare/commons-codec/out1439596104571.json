{"failureDictionary":{"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":35,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":30,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":13,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":21,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":20,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":4,"org.apache.commons.codec.language.Caverphone1Test.testEncodeEmpty":36,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":5,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":25,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":29,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":22,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":3,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":14,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":19,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":17,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":7,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":6,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":23,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":10,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":27,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":16,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":12,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":32,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":18,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":11,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":15,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":31,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":33,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":8,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":28,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":24,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":2,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":26,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":34,"org.apache.commons.codec.language.Caverphone1Test.testLocaleIndependence":37,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":9,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":0,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":1},"transformations":[{"failures":[],"tindex":"f3d8740b-42de-11e5-9cff-c90a32fe3e9e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:94","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:525","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = boolean ? org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.createBranch() : org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch"},"status":-2},{"failures":[],"tindex":"f3d8740c-42de-11e5-9cff-05aae054d71b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((int & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:231","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int >= (org.apache.commons.codec.language.Soundex.getSoundexMapping().int))) {\n    throw new java.lang.IllegalArgumentException((\"The character is not mapped: \" + char));\n} "},"status":-2},{"failures":[],"tindex":"f3d8740d-42de-11e5-9cff-b329ba21b0ef","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:100","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('{')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:103","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('~')"},"status":-2},{"failures":[],"tindex":"f3d89b1e-42de-11e5-9cff-a739b2dadffa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((java.lang.String.length()) == 0) {\n    continue;\n} "},"variableMap":{"line":"org.apache.commons.codec.digest.B64.B64T"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:204","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.java.lang.String)) + \"]{2,}$\")))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + java.lang.String));\n} "},"status":-2},{"failures":[],"tindex":"f3d89b1f-42de-11e5-9cff-e7ca705e8cfe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"saltBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:504","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(byte[], ((byte)(0)))"},"status":0},{"failures":[],"tindex":"f3d89b20-42de-11e5-9cff-8b3cc493ddda","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:151","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\")"},"status":0},{"failures":[],"tindex":"f3d89b21-42de-11e5-9cff-55d285f6c386","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((int & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:496","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (java.lang.String.length()) ; int++) {\n    final char char = java.lang.String.charAt(int);\n    if (java.lang.Character.isWhitespace(char)) {\n        continue;\n    } \n    final java.lang.String java.lang.String = java.lang.String.substring(int);\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(char);\n    if (java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> == null) {\n        continue;\n    } \n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = boolean ? new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>() : java.util.Collections.java.util.List;\n    for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule : java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>) {\n        if (org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.matches(java.lang.String)) {\n            if (boolean) {\n                java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.clear();\n            } \n            final java.lang.String[] java.lang.String[] = org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.getReplacements(java.lang.String, (char == '\u0000'));\n            final boolean boolean = ((java.lang.String[].int) > 1) && boolean;\n            for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>) {\n                for (final java.lang.String java.lang.String : java.lang.String[]) {\n                    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = boolean ? org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.createBranch() : org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch;\n                    final boolean boolean = ((char == 'm') && (char == 'n')) || ((char == 'n') && (char == 'm'));\n                    org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.processNextReplacement(java.lang.String, boolean);\n                    if (boolean) {\n                        java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.add(org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch);\n                    } else {\n                        break;\n                    }\n                }\n            }\n            if (boolean) {\n                java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.clear();\n                java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.addAll(java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>);\n            } \n            int += (org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.getPatternLength()) - 1;\n            break;\n        } \n    }\n    char = char;\n}"},"status":-2},{"failures":[],"tindex":"f3d8c232-42de-11e5-9cff-d16e1876e7af","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.BCodec:104","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.decodeBase64(byte[])"},"variableMap":{"bytes":"pArray"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:427","type":"CtReturnImpl","sourcecode":"return byte[]"},"status":-2},{"failures":[],"tindex":"f3d8c233-42de-11e5-9cff-633315284f6a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:222","type":"CtIfImpl","sourcecode":"if (boolean) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(int, java.io.ByteArrayOutputStream);\n} else {\n    java.io.ByteArrayOutputStream.write(int);\n    return 1;\n}"},"status":-2},{"failures":[],"tindex":"f3d8c234-42de-11e5-9cff-3d1ae34c2625","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:521","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[], null)"},"status":-2},{"failures":[],"tindex":"f3d8c235-42de-11e5-9cff-dd7448f6c023","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:383","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.org.apache.commons.codec.binary.StringUtils.newString(byte[], org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-2},{"failures":[0,1,2,3,4,5],"tindex":"f3d8c236-42de-11e5-9cff-23bc05e7d4c8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:94","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:247","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.net.URLCodec.encode(java.lang.String, org.apache.commons.codec.net.URLCodec.getDefaultCharset());\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.EncoderException(java.io.UnsupportedEncodingException.getMessage() , java.io.UnsupportedEncodingException);\n}"},"status":-1},{"failures":[6,7,8,9,10,11,12,13,14,15,16],"tindex":"f3d8c237-42de-11e5-9cff-cb7359d65a99","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:486","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 2))) & (org.apache.commons.codec.binary.Base32.int))]"},"status":-1},{"failures":[],"tindex":"f3d8c238-42de-11e5-9cff-292272bc2627","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:250","type":"CtIfImpl","sourcecode":"if (((byte[][int]) & (org.apache.commons.codec.binary.BinaryCodec.int[][int])) == 0) {\n    byte[][(int - int)] = '0';\n} else {\n    byte[][(int - int)] = '1';\n}"},"variableMap":{"ii":"length","jj":"jj","l_ascii":"raw","bits":"jj","raw":"raw","org.apache.commons.codec.binary.BinaryCodec.BITS":"org.apache.commons.codec.binary.BinaryCodec.BITS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:279","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++int) {\n    if (((byte[][int]) & (org.apache.commons.codec.binary.BinaryCodec.int[][int])) == 0) {\n        char[][(int - int)] = '0';\n    } else {\n        char[][(int - int)] = '1';\n    }\n}"},"status":-2},{"failures":[],"tindex":"f3d8e949-42de-11e5-9cff-3d77efb9126b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:357","type":"CtReturnImpl","sourcecode":"return boolean"},"status":-2},{"failures":[17,18,19,20,21,22,23,24,25],"tindex":"f3d8e94a-42de-11e5-9cff-f166fd949edc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtIfImpl","sourcecode":"if (java.lang.String.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    java.lang.String = java.lang.String.substring(0, ((java.lang.String.length()) - 1));\n} "},"status":-1},{"failures":[],"tindex":"f3d8e94b-42de-11e5-9cff-a1670bb46c4c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:238","type":"CtOperatorAssignmentImpl","sourcecode":"int <<= 1"},"variableMap":{"c":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:362","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-2},{"failures":[],"tindex":"f3d8e94c-42de-11e5-9cff-a16491a81a42","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:211","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.RFC1522Codec.encodeText(java.lang.String, java.nio.charset.Charset)"},"status":-2},{"failures":[26,27,28,29,30],"tindex":"f3d8e94d-42de-11e5-9cff-036d62def7d7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:635","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:271","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('A')"},"status":-1},{"failures":[31,32,33,34,35,36,37],"tindex":"f3d8e94e-42de-11e5-9cff-0b3577a9590c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:118","type":"CtAssignmentImpl","sourcecode":"java.lang.String = null"},"variableMap":{"cachedString":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:52","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.toLowerCase(java.util.Locale.java.util.Locale)"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"},"diffs":[{"transformation":"f3d89b20-42de-11e5-9cff-8b3cc493ddda","diffs":[{"nodes":{"org.apache.commons.codec.language.SoundexTest.testEncodeWithInvalidObject":["org.apache.commons.codec.EncoderException.org.apache.commons.codec.EncoderException(java.lang.String)"]},"edges":{"org.apache.commons.codec.language.SoundexTest.testEncodeWithInvalidObject":["org.apache.commons.codec.language.Soundex.java.lang.Object encode(java.lang.Object) -> org.apache.commons.codec.EncoderException.org.apache.commons.codec.EncoderException(java.lang.String)"]},"type":"graph"},{"branches":{"org.apache.commons.codec.language.SoundexTest.testEncodeWithInvalidObject":["org.apache.commons.codec.EncoderException_org.apache.commons.codec.EncoderException(java.lang.String).b"]},"type":"branch"},{"catchs":{},"throws":{"org.apache.commons.codec.language.SoundexTest.testEncodeWithInvalidObject":["org.apache.commons.codec.language.Soundex.java.lang.Object encode(java.lang.Object)"]},"type":"exception"}]}]}
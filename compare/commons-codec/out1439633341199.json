{"failureDictionary":{"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":6,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":14,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":1,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":24,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":0,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":30,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":29,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":21,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":4,"org.apache.commons.codec.language.NysiisTest.testDropBy":9,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":34,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":13,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":23,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":31,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":5,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":25,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":28,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":26,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":37,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":32,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":16,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":12,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":35,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":27,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":3,"org.apache.commons.codec.language.NysiisTest.testOthers":10,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":2,"org.apache.commons.codec.language.NysiisTest.testRule6":8,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":20,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":36,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":19,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":33,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":7,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":17,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":11,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":18,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":22,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":15},"transformations":[{"failures":[],"tindex":"a69aaaf4-4335-11e5-8968-2d2429c2ceb2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:186","type":"CtBreakImpl","sourcecode":"break"},"status":0},{"failures":[0,1,2,3,4,5,6],"tindex":"a69ad205-4335-11e5-8968-5fa130b66dbe","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:107","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-1},{"failures":[7],"tindex":"a69ad206-4335-11e5-8968-53fd938b30f3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:137","type":"CtAssignmentImpl","sourcecode":"int = '+'"},"variableMap":{"b":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:133","type":"CtAssignmentImpl","sourcecode":"int = 256 + int"},"status":-1},{"failures":[],"tindex":"a69ad207-4335-11e5-8968-91410de9b333","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:167","type":"CtLocalVariableImpl","sourcecode":"final int int = byte[][int]"},"variableMap":{"bytes":"keyBytes","i":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:136","type":"CtLocalVariableImpl","sourcecode":"final int int = byte[].int"},"status":-2},{"failures":[8,9,10],"tindex":"a69ad208-4335-11e5-8968-71298f0a089d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:386","type":"CtIfImpl","sourcecode":"if (char == 'L') {\n    char = '5';\n} else if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"variableMap":{"code":"lastChar","chr":"lastChar"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:301","type":"CtIfImpl","sourcecode":"if ((java.lang.StringBuilder.length()) > 2) {\n    final char char = java.lang.StringBuilder.charAt(((java.lang.StringBuilder.length()) - 2));\n    if ((char == 'A') && (char == 'Y')) {\n        java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 2));\n    } \n} "},"status":-1},{"failures":[],"tindex":"a69ad209-4335-11e5-8968-cb93344db5bc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:283","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:235","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"a69ad20a-4335-11e5-8968-5df270dda61d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:217","type":"CtReturnImpl","sourcecode":"return this.char[]"},"variableMap":{"soundexMapping":"org.apache.commons.codec.language.Nysiis.CHARS_C"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:140","type":"CtIfImpl","sourcecode":"if (char == 'N') {\n    return org.apache.commons.codec.language.Nysiis.char[];\n} else {\n    return org.apache.commons.codec.language.Nysiis.char[];\n}"},"status":-2},{"failures":[],"tindex":"a69ad20b-4335-11e5-8968-d907605b3c4a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:487","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.decode(java.lang.String, org.apache.commons.codec.net.QuotedPrintableCodec.getCharset())"},"status":-2},{"failures":[11,12,13,14],"tindex":"a69ad20c-4335-11e5-8968-911bf20f5572","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:131","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[],"tindex":"a69af91d-4335-11e5-8968-0b5408b6c307","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:706","type":"CtConstructorCallImpl","sourcecode":"new org.apache.commons.codec.binary.Base64()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:242","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.Base64.this(int, byte[], false)"},"status":-2},{"failures":[15,16],"tindex":"a69af91e-4335-11e5-8968-7f779f554e21","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:296","type":"CtOperatorAssignmentImpl","sourcecode":"int += 3"},"variableMap":{"index":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:358","type":"CtOperatorAssignmentImpl","sourcecode":"int &= 268435455"},"status":-1},{"failures":[17],"tindex":"a69af91f-4335-11e5-8968-19f6779a8559","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:130","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:227","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be decoded using BCodec\"))"},"status":-1},{"failures":[],"tindex":"a69af920-4335-11e5-8968-a92c2da42dd9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:193","type":"CtIfImpl","sourcecode":"if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"c","minRating":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:159","type":"CtIfImpl","sourcecode":"if (boolean) {\n    org.apache.commons.codec.binary.BaseNCodec.encode(byte[], 0, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n} else {\n    org.apache.commons.codec.binary.BaseNCodec.decode(byte[], 0, int, org.apache.commons.codec.binary.BaseNCodec.Context);\n}"},"status":-2},{"failures":[],"tindex":"a69af921-4335-11e5-8968-f963bb228ca6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:280","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[])"},"status":-2},{"failures":[],"tindex":"a69af922-4335-11e5-8968-d7cb9b1df1b5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:119","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof byte[]) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(java.lang.Object)));\n} "},"variableMap":{"this":"obj","ascii":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:379","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.binary.BaseNCodec.decode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n}"},"status":-2},{"failures":[18,19,20,21,22,23,24,25],"tindex":"a69af923-4335-11e5-8968-1f79744d3be8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:443","type":"CtReturnImpl","sourcecode":"return new java.lang.String(char[])"},"status":-1},{"failures":[26,27,28,29,30,31,32,33,34],"tindex":"a69b2034-4335-11e5-8968-ed833533d538","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:166","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = java.lang.String.split(\"\\\\s+\")"},"variableMap":{"line":"inputContext"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:519","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.getReplacements(java.lang.String, (char == '\u0000'))"},"status":-1},{"failures":[],"tindex":"a69b2035-4335-11e5-8968-058ef05ab4fd","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:73","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('(')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:88","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('@')"},"status":-2},{"failures":[35,36,37],"tindex":"a69b2036-4335-11e5-8968-9d196ed929ef","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:191","type":"CtIfImpl","sourcecode":"if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"i","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"i","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"i","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"i","minRating":"i","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"i","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"i","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:98","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set(int)"},"status":-1},{"failures":[],"tindex":"a69b2037-4335-11e5-8968-4fff1f81e66e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (int == ' ') {\n    int = '+';\n} "},"variableMap":{"b":"rightLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:356","type":"CtIfImpl","sourcecode":"if (((char == 'D') || (char == 'T')) && (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n    char = '2';\n} else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '3';\n} else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '4';\n} else if ((char == 'X') && (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n    char = '4';\n    org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.addLeft('S');\n    int++;\n} else if ((char == 'S') || (char == 'Z')) {\n    char = '8';\n} else if (char == 'C') {\n    if (char == '/') {\n        if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n            char = '4';\n        } else {\n            char = '8';\n        }\n    } else {\n        if (org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) || (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n            char = '8';\n        } else {\n            char = '4';\n        }\n    }\n} else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '8';\n} else if (char == 'R') {\n    char = '7';\n} else if (char == 'L') {\n    char = '5';\n} else if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
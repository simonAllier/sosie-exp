{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":5,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":1,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":9,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":25,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":33,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":29,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":4,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":38,"org.apache.commons.codec.binary.Base64Test.testBase64":32,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":40,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":13,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":8,"org.apache.commons.codec.binary.Base64Test.testTriplets":12,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":27,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":36,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":3,"org.apache.commons.codec.binary.Base64Test.testUUID":15,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":24,"org.apache.commons.codec.binary.Base64Test.testSingletons":28,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":37,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":31,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":6,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":35,"org.apache.commons.codec.binary.Base64Test.testPairs":14,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":23,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":17,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":34,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":30,"org.apache.commons.codec.binary.Base64Test.testCodec112":26,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":11,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":7,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":18,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":19,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":22,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":39,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":2,"org.apache.commons.codec.language.MetaphoneTest.testTCH":0,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":10,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":20,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":16,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":21},"transformations":[{"failures":[],"tindex":"e2d6d17e-42de-11e5-8294-01bef4c5b66a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:106","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"r3\", \"R3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:62","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^rough\", \"rou2f\")"},"status":1},{"failures":[],"tindex":"e2d6f88f-42de-11e5-8294-f3248e24b388","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:87","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('_')"},"variableMap":{"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:77","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set(',')"},"status":-2},{"failures":[],"tindex":"e2d6f890-42de-11e5-8294-27480fd1ed0f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    java.lang.String = java.lang.String.substring(1);\n} "},"variableMap":{"str":"org.apache.commons.codec.language.Metaphone.VARSON","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"org.apache.commons.codec.language.Metaphone.FRONTV"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:148","type":"CtWhileImpl","sourcecode":"while (((java.lang.StringBuilder.length()) < org.apache.commons.codec.language.Metaphone.(getMaxCodeLen())) && (int < int)) {\n    final char char = java.lang.StringBuilder.charAt(int);\n    if ((char != 'C') && org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, char))) {\n        int++;\n    } else {\n        switch (char) {\n            case 'A' :\n            case 'E' :\n            case 'I' :\n            case 'O' :\n            case 'U' :\n                if (int == 0) {\n                    java.lang.StringBuilder.append(char);\n                } \n                break;\n            case 'B' :\n                if (org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'M')) && org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) {\n                    break;\n                } \n                java.lang.StringBuilder.append(char);\n                break;\n            case 'C' :\n                if ((org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'S')) && (!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int)))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 1)))) >= 0)) {\n                    break;\n                } \n                if (org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder, int, \"CIA\")) {\n                    java.lang.StringBuilder.append('X');\n                    break;\n                } \n                if ((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 1)))) >= 0)) {\n                    java.lang.StringBuilder.append('S');\n                    break;\n                } \n                if (org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'S')) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'H'))) {\n                    java.lang.StringBuilder.append('K');\n                    break;\n                } \n                if (org.apache.commons.codec.language.Metaphone.isNextChar(java.lang.StringBuilder, int, 'H')) {\n                    if (((int == 0) && (int >= 3)) && org.apache.commons.codec.language.Metaphone.(isVowel(java.lang.StringBuilder, 2))) {\n                        java.lang.StringBuilder.append('K');\n                    } else {\n                        java.lang.StringBuilder.append('X');\n                    }\n                } else {\n                    java.lang.StringBuilder.append('K');\n                }\n                break;\n            case 'D' :\n                if (((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1)))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'G'))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 2)))) >= 0)) {\n                    java.lang.StringBuilder.append('J');\n                    int += 2;\n                } else {\n                    java.lang.StringBuilder.append('T');\n                }\n                break;\n            case 'G' :\n                if (org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'H'))) {\n                    break;\n                } \n                if (((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1)))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'H'))) && (!org.apache.commons.codec.language.Metaphone.(isVowel(java.lang.StringBuilder, (int + 2))))) {\n                    break;\n                } \n                if ((int > 0) && (org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"GN\")) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"GNED\")))) {\n                    break;\n                } \n                if (org.apache.commons.codec.language.Metaphone.isPreviousChar(java.lang.StringBuilder, int, 'G')) {\n                    boolean = true;\n                } else {\n                    boolean = false;\n                }\n                if (((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 1)))) >= 0)) && (!boolean)) {\n                    java.lang.StringBuilder.append('J');\n                } else {\n                    java.lang.StringBuilder.append('K');\n                }\n                break;\n            case 'H' :\n                if (org.apache.commons.codec.language.Metaphone.isLastChar(int, int)) {\n                    break;\n                } \n                if ((int > 0) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int - 1)))) >= 0)) {\n                    break;\n                } \n                if (org.apache.commons.codec.language.Metaphone.isVowel(java.lang.StringBuilder, (int + 1))) {\n                    java.lang.StringBuilder.append('H');\n                } \n                break;\n            case 'F' :\n            case 'J' :\n            case 'L' :\n            case 'M' :\n            case 'N' :\n            case 'R' :\n                java.lang.StringBuilder.append(char);\n                break;\n            case 'K' :\n                if (int > 0) {\n                    if (!org.apache.commons.codec.language.Metaphone.(isPreviousChar(java.lang.StringBuilder, int, 'C'))) {\n                        java.lang.StringBuilder.append(char);\n                    } \n                } else {\n                    java.lang.StringBuilder.append(char);\n                }\n                break;\n            case 'P' :\n                if (org.apache.commons.codec.language.Metaphone.isNextChar(java.lang.StringBuilder, int, 'H')) {\n                    java.lang.StringBuilder.append('F');\n                } else {\n                    java.lang.StringBuilder.append(char);\n                }\n                break;\n            case 'Q' :\n                java.lang.StringBuilder.append('K');\n                break;\n            case 'S' :\n                if ((org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SH\")) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SIO\"))) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"SIA\"))) {\n                    java.lang.StringBuilder.append('X');\n                } else {\n                    java.lang.StringBuilder.append('S');\n                }\n                break;\n            case 'T' :\n                if (org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"TIA\")) || org.apache.commons.codec.language.Metaphone.(regionMatch(java.lang.StringBuilder, int, \"TIO\"))) {\n                    java.lang.StringBuilder.append('X');\n                    break;\n                } \n                if (org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder, int, \"TCH\")) {\n                    break;\n                } \n                if (org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder, int, \"TH\")) {\n                    java.lang.StringBuilder.append('0');\n                } else {\n                    java.lang.StringBuilder.append('T');\n                }\n                break;\n            case 'V' :\n                java.lang.StringBuilder.append('F');\n                break;\n            case 'W' :\n            case 'Y' :\n                if ((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, int))) && org.apache.commons.codec.language.Metaphone.(isVowel(java.lang.StringBuilder, (int + 1)))) {\n                    java.lang.StringBuilder.append(char);\n                } \n                break;\n            case 'X' :\n                java.lang.StringBuilder.append('K');\n                java.lang.StringBuilder.append('S');\n                break;\n            case 'Z' :\n                java.lang.StringBuilder.append('S');\n                break;\n            default :\n                break;\n        }\n        int++;\n    }\n    if ((java.lang.StringBuilder.length()) > org.apache.commons.codec.language.Metaphone.(getMaxCodeLen())) {\n        java.lang.StringBuilder.setLength(org.apache.commons.codec.language.Metaphone.getMaxCodeLen());\n    } \n}"},"status":-2},{"failures":[0,1],"tindex":"e2d71fa1-42de-11e5-8294-5d8f1a254942","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:211","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('T')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:315","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(char)"},"status":-1},{"failures":[],"tindex":"e2d71fa2-42de-11e5-8294-5902a353e666","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:606","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.encodeBase64(byte[], true)"},"status":-2},{"failures":[],"tindex":"e2d71fa3-42de-11e5-8294-df959575e9c2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:153","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Soundex.soundex(((java.lang.String)(java.lang.Object)))"},"variableMap":{"obj":"object","this":"object"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:296","type":"CtTryImpl","sourcecode":"try {\n    final byte[] byte[] = java.lang.Object instanceof java.lang.String ? ((java.lang.String)(java.lang.Object)).getBytes(org.apache.commons.codec.binary.Hex.getCharset()) : ((byte[])(java.lang.Object));\n    return org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.encodeHex(byte[]);\n} catch (final java.lang.ClassCastException e) {\n    throw new org.apache.commons.codec.EncoderException(java.lang.ClassCastException.getMessage() , java.lang.ClassCastException);\n}"},"status":-2},{"failures":[],"tindex":"e2d746b4-42de-11e5-8294-d5d009ec4834","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:380","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 2) & (org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"pos":"pos","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"pos","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:392","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2},{"failures":[],"tindex":"e2d746b5-42de-11e5-8294-155ebb9462d7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:191","type":"CtIfImpl","sourcecode":"if ((int >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (int <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (int == (org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"d","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"j","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"c","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"j","minRating":"d","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"d","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"d","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"d"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:360","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < 16 ; int++) {\n    if (org.apache.commons.codec.digest.UnixCrypt.boolean[][int]) {\n        int = (int >>> 2) | (int << 26);\n        int = (int >>> 2) | (int << 26);\n    } else {\n        int = (int >>> 1) | (int << 27);\n        int = (int >>> 1) | (int << 27);\n    }\n    int &= 268435455;\n    int &= 268435455;\n    int int = (((org.apache.commons.codec.digest.UnixCrypt.int[][][0][(int & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.int[][][1][(((int >>> 6) & 3) | ((int >>> 7) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.int[][][2][(((int >>> 13) & 15) | ((int >>> 14) & 48))])) | (org.apache.commons.codec.digest.UnixCrypt.int[][][3][((((int >>> 20) & 1) | ((int >>> 21) & 6)) | ((int >>> 22) & 56))]);\n    final int int = (((org.apache.commons.codec.digest.UnixCrypt.int[][][4][(int & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.int[][][5][(((int >>> 7) & 3) | ((int >>> 8) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.int[][][6][((int >>> 15) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.int[][][7][(((int >>> 21) & 15) | ((int >>> 22) & 48))]);\n    int[][int++] = (int << 16) | (int & 65535);\n    int = (int >>> 16) | (int & -65536);\n    int = (int << 4) | (int >>> 28);\n    int[][int++] = int;\n}"},"status":0},{"failures":[],"tindex":"e2d746b6-42de-11e5-8294-33229ff00fd5","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:254","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"variableMap":{"length":"readPos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:252","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int = 0"},"status":-2},{"failures":[],"tindex":"e2d746b7-42de-11e5-8294-fb204d3dd715","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:260","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[int]"},"variableMap":{"length":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:273","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[(byte[].int) << 3]"},"status":-2},{"failures":[],"tindex":"e2d746b8-42de-11e5-8294-af7b88794820","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:140","type":"CtIfImpl","sourcecode":"if (char == 'N') {\n    return org.apache.commons.codec.language.Nysiis.char[];\n} else {\n    return org.apache.commons.codec.language.Nysiis.char[];\n}"},"variableMap":{"next":"next","org.apache.commons.codec.language.Nysiis.CHARS_NN":"org.apache.commons.codec.language.Nysiis.CHARS_SSS","org.apache.commons.codec.language.Nysiis.CHARS_C":"org.apache.commons.codec.language.Nysiis.CHARS_SSS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:148","type":"CtIfImpl","sourcecode":"if (((char == 'S') && (char == 'C')) && (char == 'H')) {\n    return org.apache.commons.codec.language.Nysiis.char[];\n} "},"status":-2},{"failures":[2,3,4,5],"tindex":"e2d76dc9-42de-11e5-8294-ed452c46ed9c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:164","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[],"tindex":"e2d76dca-42de-11e5-8294-eff4f7c326cd","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.B64:59","type":"CtLocalVariableImpl","sourcecode":"int int = int"},"variableMap":{"outLen":"patternLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:704","type":"CtLocalVariableImpl","sourcecode":"final int int = int + int"},"status":-2},{"failures":[],"tindex":"e2d76dcb-42de-11e5-8294-71c24901aacb","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.B64:62","type":"CtOperatorAssignmentImpl","sourcecode":"int >>= 6"},"variableMap":{"w":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:387","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[6,2,3,7,4,5],"tindex":"e2d76dcc-42de-11e5-8294-710037944c41","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:633","type":"CtIfImpl","sourcecode":"if ((int == ((java.lang.String.length()) - 1)) && org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 2, \"AI\", \"OI\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('S');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S');\n}"},"status":-1},{"failures":[2,3,4,5],"tindex":"e2d76dcd-42de-11e5-8294-4da53d242ec6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:284","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:709","type":"CtIfImpl","sourcecode":"if ((int == 0) && (org.apache.commons.codec.language.DoubleMetaphone.(isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int + 1)))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"WH\")))) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int + 1)))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('A', 'F');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('A');\n    }\n    int++;\n} else if ((((int == ((java.lang.String.length()) - 1)) && org.apache.commons.codec.language.DoubleMetaphone.(isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int - 1))))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 3, \"SCH\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('F');\n    int++;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 4, \"WICZ\", \"WITZ\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"TS\", \"FX\");\n    int += 4;\n} else {\n    int++;\n}"},"status":-1},{"failures":[],"tindex":"e2d76dce-42de-11e5-8294-6f3edf12c894","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:319","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(java.lang.String)) {\n    char[][int] = ' ';\n    char[][int] = ' ';\n} "},"variableMap":{"name2RtLStart":"name2RtLStart","name1Char":"name1Char","name2Char":"name1Char","i":"name2Size","name1LtRStart":"name1LtREnd"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:307","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (char[].int) ; int++) {\n    if (int > int) {\n        break;\n    } \n    java.lang.String = java.lang.String.substring(int, (int + 1));\n    java.lang.String = java.lang.String.substring((int - int), ((int - int) + 1));\n    java.lang.String = java.lang.String.substring(int, (int + 1));\n    java.lang.String = java.lang.String.substring((int - int), ((int - int) + 1));\n    if (java.lang.String.equals(java.lang.String)) {\n        char[][int] = ' ';\n        char[][int] = ' ';\n    } \n    if (java.lang.String.equals(java.lang.String)) {\n        char[][(int - int)] = ' ';\n        char[][(int - int)] = ' ';\n    } \n}"},"status":0},{"failures":[],"tindex":"e2d794df-42de-11e5-8294-abd00d499f4b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:471","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) >> 19))) & (org.apache.commons.codec.binary.Base32.int))]"},"variableMap":{"encodeTable":"buffer","pos":"org.apache.commons.codec.binary.Base32.MASK_5BITS","org.apache.commons.codec.binary.Base32.MASK_5BITS":"pos","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"encodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:452","type":"CtAssignmentImpl","sourcecode":"byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((int)(((org.apache.commons.codec.binary.BaseNCodec.Context.long) << 2))) & (org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"tindex":"e2d794e0-42de-11e5-8294-8101f0a25600","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:102","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:640","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.encodeBase64(byte[], boolean, boolean, java.lang.Integer.int)"},"status":-1},{"failures":[],"tindex":"e2d794e1-42de-11e5-8294-3343d011802c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:172","type":"CtLocalVariableImpl","sourcecode":"final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.getClassLoader().getResourceAsStream(java.lang.String)"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
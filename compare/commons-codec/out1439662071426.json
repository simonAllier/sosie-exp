{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":30,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":64,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":63,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":68,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":5,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":65,"org.apache.commons.codec.binary.Base64Test.testBase64":29,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":41,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":38,"org.apache.commons.codec.binary.Base64Test.testUUID":14,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":58,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":23,"org.apache.commons.codec.binary.Base64Test.testSingletons":27,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":48,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":49,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":51,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NullValue_ReturnNullSuccessfully":72,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":35,"org.apache.commons.codec.binary.Base64Test.testPairs":13,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":22,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":50,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":73,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":31,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":74,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":2,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":1,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":17,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":12,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":18,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":10,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":21,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":11,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":0,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":19,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":44,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":69,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":20,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":4,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":53,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":77,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":57,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":6,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":42,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":45,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":3,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":24,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":36,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":39,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":76,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":25,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":32,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":54,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":7,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":8,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":26,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":62,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":55,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":60,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":46,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":66,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":47,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":70,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":33,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":52,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":56,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":61,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":75,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":37,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":16,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":28,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":34,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":43,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":67,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":9,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":59,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":71,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":15,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":40},"transformations":[{"failures":[0,1,2,3,4,5,6,7],"tindex":"8b27b57d-4378-11e5-8f40-f3ffa9842d47","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:302","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"tindex":"8b27b57e-4378-11e5-8f40-5ba8c612baab","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:438","type":"CtIfImpl","sourcecode":"if (byte == (byte)) {\n    org.apache.commons.codec.binary.BaseNCodec.Context.boolean = true;\n    break;\n} else {\n    if ((byte >= 0) && (byte < (org.apache.commons.codec.binary.Base64.byte[].int))) {\n        final int int = org.apache.commons.codec.binary.Base64.byte[][byte];\n        if (int >= 0) {\n            org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) + 1) % (org.apache.commons.codec.binary.Base64.int);\n            org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) << (org.apache.commons.codec.binary.Base64.int)) + int;\n            if ((org.apache.commons.codec.binary.BaseNCodec.Context.int) == 0) {\n                byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n                byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n                byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = ((byte)((org.apache.commons.codec.binary.BaseNCodec.Context.int) & (org.apache.commons.codec.binary.BaseNCodec.int)));\n            } \n        } \n    } \n}"},"status":-1},{"failures":[],"tindex":"8b27dc8f-4378-11e5-8f40-852b2df71d50","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:521","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int = 0"},"variableMap":{"currentLinePos":"pos","context":"context"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:466","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-2},{"failures":[],"tindex":"8b27dc90-4378-11e5-8f40-5b079c63c8db","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (int == ' ') {\n    int = '+';\n} "},"variableMap":{"b":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:496","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (java.lang.String.length()) ; int++) {\n    final char char = java.lang.String.charAt(int);\n    if (java.lang.Character.isWhitespace(char)) {\n        continue;\n    } \n    final java.lang.String java.lang.String = java.lang.String.substring(int);\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(char);\n    if (java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> == null) {\n        continue;\n    } \n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = boolean ? new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>() : java.util.Collections.java.util.List;\n    for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule : java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>) {\n        if (org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.matches(java.lang.String)) {\n            if (boolean) {\n                java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.clear();\n            } \n            final java.lang.String[] java.lang.String[] = org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.getReplacements(java.lang.String, (char == '\u0000'));\n            final boolean boolean = ((java.lang.String[].int) > 1) && boolean;\n            for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>) {\n                for (final java.lang.String java.lang.String : java.lang.String[]) {\n                    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = boolean ? org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.createBranch() : org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch;\n                    final boolean boolean = ((char == 'm') && (char == 'n')) || ((char == 'n') && (char == 'm'));\n                    org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.processNextReplacement(java.lang.String, boolean);\n                    if (boolean) {\n                        java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.add(org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch);\n                    } else {\n                        break;\n                    }\n                }\n            }\n            if (boolean) {\n                java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.clear();\n                java.util.Set<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>.addAll(java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>);\n            } \n            int += (org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.getPatternLength()) - 1;\n            break;\n        } \n    }\n    char = char;\n}"},"status":-2},{"failures":[53,54,55,56,57,58,59],"tindex":"8b27dc91-4378-11e5-8f40-69c936be103e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:301","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, byte[], int, (int - int))"},"variableMap":{"tempResult":"finalb","pBytes":"finalb","keyLen":"org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE","cp":"org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:261","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[], 0, org.apache.commons.codec.digest.Md5Crypt.int)"},"status":-1},{"failures":[],"tindex":"8b27dc92-4378-11e5-8f40-8d874689a22c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:248","type":"CtForImpl","sourcecode":"for (int int = 0, int int = (byte[].int) - 1 ; int < (byte[].int) ; int++ , int -= 8) {\n    for (int int = 0 ; int < (org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++int) {\n        if (((byte[][int]) & (org.apache.commons.codec.binary.BinaryCodec.int[][int])) == 0) {\n            byte[][(int - int)] = '0';\n        } else {\n            byte[][(int - int)] = '1';\n        }\n    }\n}"},"variableMap":{"l_ascii":"l_raw","length":"length","raw":"ascii","org.apache.commons.codec.binary.BinaryCodec.BITS":"org.apache.commons.codec.binary.BinaryCodec.BITS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:208","type":"CtForImpl","sourcecode":"for (int int = 0, int int = (byte[].int) - 1 ; int < (byte[].int) ; int++ , int -= 8) {\n    for (int int = 0 ; int < (org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++int) {\n        if ((byte[][(int - int)]) == '1') {\n            byte[][int] |= org.apache.commons.codec.binary.BinaryCodec.int[][int];\n        } \n    }\n}"},"status":-2},{"failures":[],"tindex":"8b282ab3-4378-11e5-8f40-e1e070275369","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:298","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, byte[], int, int)"},"variableMap":{"blocksize":"length","tempResult":"lineSeparator","pBytes":"encodeTable","cp":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:386","type":"CtIfImpl","sourcecode":"if (0 == (org.apache.commons.codec.binary.BaseNCodec.Context.int)) {\n    byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 18) & (org.apache.commons.codec.binary.Base64.int))];\n    byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 12) & (org.apache.commons.codec.binary.Base64.int))];\n    byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][(((org.apache.commons.codec.binary.BaseNCodec.Context.int) >> 6) & (org.apache.commons.codec.binary.Base64.int))];\n    byte[][(org.apache.commons.codec.binary.BaseNCodec.Context.int)++] = byte[][((org.apache.commons.codec.binary.BaseNCodec.Context.int) & (org.apache.commons.codec.binary.Base64.int))];\n    org.apache.commons.codec.binary.BaseNCodec.Context.int += org.apache.commons.codec.binary.Base64.int;\n    if (((int) > 0) && ((int) <= (org.apache.commons.codec.binary.BaseNCodec.Context.int))) {\n        java.lang.System.arraycopy(byte[], 0, byte[], org.apache.commons.codec.binary.BaseNCodec.Context.int, byte[].int);\n        org.apache.commons.codec.binary.BaseNCodec.Context.int += byte[].int;\n        org.apache.commons.codec.binary.BaseNCodec.Context.int = 0;\n    } \n} "},"status":-2},{"failures":[60,61,62,63,64,65,66,67,68],"tindex":"8b282ab4-4378-11e5-8f40-d952f32983a1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:283","type":"CtIfImpl","sourcecode":"if (java.lang.String.contains(\"=\")) {\n    final java.lang.String[] java.lang.String[] = java.lang.String.split(\"=\");\n    if ((java.lang.String[].int) != 2) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (java.lang.String[].int)) + \" parts: \") + java.lang.String) + \" in \") + java.lang.String));\n    } else {\n        final java.lang.String java.lang.String = java.lang.String[][0];\n        final java.lang.String java.lang.String = java.lang.String[][1];\n        if (((java.lang.String.length()) != 1) || ((java.lang.String.length()) != 1)) {\n            throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + java.lang.String) + \" in \") + java.lang.String));\n        } \n        java.util.Map<java.lang.Character, java.lang.Character>.put(java.lang.String.charAt(0), java.lang.String.charAt(0));\n    }\n} else {\n    final java.lang.String[] java.lang.String[] = java.lang.String.split(\"\\\\s+\");\n    if ((java.lang.String[].int) != 4) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (java.lang.String[].int)) + \" parts: \") + java.lang.String) + \" in \") + java.lang.String));\n    } else {\n        try {\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][0]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][1]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][2]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(java.lang.String[][3]);\n            final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(java.lang.String , java.lang.String , java.lang.String , java.lang.String);\n            final char char = org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule.java.lang.String.charAt(0);\n            java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(char);\n            if (java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> == null) {\n                java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.put(char, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>);\n            } \n            java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>.add(org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule);\n        } catch (final java.lang.IllegalArgumentException e) {\n            throw new java.lang.IllegalStateException((((\"Problem parsing line \\'\" + int) + \"\\' in \") + java.lang.String) , java.lang.IllegalArgumentException);\n        }\n    }\n}"},"status":-1},{"failures":[],"tindex":"8b2851c5-4378-11e5-8f40-497a2e9a3161","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:94","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:525","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = boolean ? org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch.createBranch() : org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch"},"status":-2},{"failures":[53,54,55,56,57,58,59],"tindex":"8b2851c6-4378-11e5-8f40-fd6d03801e30","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:316","type":"CtForImpl","sourcecode":"for (int int = 1 ; int <= (16 + ((byte[][0]) & 255)) ; int++) {\n    java.security.MessageDigest.update(byte[]);\n}"},"variableMap":{"altCtx":"ctx1","altResult":"keyBytes","saltBytes":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:219","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[])"},"status":-1},{"failures":[],"tindex":"8b2851c7-4378-11e5-8f40-cfe4f07b6fa8","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:801","type":"CtIfImpl","sourcecode":"if (int != 0) {\n    return false;\n} else if ((!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 5, \"HARAC\", \"HARIS\"))) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n    return false;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 5, \"CHORE\")) {\n    return false;\n} else {\n    return true;\n}"},"variableMap":{"this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:788","type":"CtIfImpl","sourcecode":"if (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 3, \"ACH\"))) {\n    return false;\n} else {\n    final char char = org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int + 2));\n    return ((char != 'I') && (char != 'E')) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 2), 6, \"BACHER\", \"MACHER\"));\n}"},"status":-2},{"failures":[],"tindex":"8b2878d8-4378-11e5-8f40-7b880369e7ba","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:432","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(org.apache.commons.codec.binary.BaseNCodec.Context.int) - (org.apache.commons.codec.binary.BaseNCodec.Context.int)]"},"variableMap":{"pos":"encodeSize","context":"context","readPos":"encodeSize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:445","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-2},{"failures":[69,70,71],"tindex":"8b2878d9-4378-11e5-8f40-df924c6e2b8d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:417","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"\\\\s{2,}\\\\b\", org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"salt","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"salt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:541","type":"CtAssignmentImpl","sourcecode":"java.lang.String = (org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))"},"status":-1},{"failures":[],"tindex":"8b2878da-4378-11e5-8f40-1988f512b8fb","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:315","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.encode(((java.lang.String)(java.lang.Object)))"},"variableMap":{"obj":"value","this":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:225","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.BCodec.decode(((java.lang.String)(java.lang.Object)))"},"status":-2},{"failures":[72],"tindex":"8b2878db-4378-11e5-8f40-dd86f840a6f1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:353","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[],"tindex":"8b2878dc-4378-11e5-8f40-e36a02c1eac6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:127","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.handleG(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int, boolean)"},"status":-2},{"failures":[],"tindex":"8b2878dd-4378-11e5-8f40-8d567813b0b2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:94","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:283","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"status":-2},{"failures":[73,74,75,76,77],"tindex":"8b2878de-4378-11e5-8f40-9bf078afe88c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:66","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('!')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"printable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:286","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < ((byte[].int) - 3) ; int++) {\n    int int = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(int, byte[]);\n    if (int < (org.apache.commons.codec.net.QuotedPrintableCodec.int)) {\n        int += org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int, !(java.util.BitSet.get(int)), java.io.ByteArrayOutputStream);\n    } else {\n        org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int, ((!(java.util.BitSet.get(int))) || org.apache.commons.codec.net.QuotedPrintableCodec.(org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(int))), java.io.ByteArrayOutputStream);\n        java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        int = 1;\n    }\n}"},"status":-1},{"failures":[],"tindex":"8b293c2f-4378-11e5-8f40-55b7bcfd3f09","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    int += 256;\n} "},"variableMap":{"b":"offset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:93","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.encode(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-2},{"failures":[],"tindex":"8b293c30-4378-11e5-8f40-cd7b85316e9a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Crypt:75","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.UnixCrypt.crypt(byte[], java.lang.String)"},"variableMap":{"salt":"org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX","keyBytes":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Crypt:66","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[]);\n} else if (java.lang.String.startsWith(org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)) {\n    return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[], java.lang.String);\n} else if (java.lang.String.startsWith(org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)) {\n    return org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[], java.lang.String);\n} else if (java.lang.String.startsWith(org.apache.commons.codec.digest.Md5Crypt.java.lang.String)) {\n    return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[], java.lang.String);\n} else {\n    return org.apache.commons.codec.digest.UnixCrypt.crypt(byte[], java.lang.String);\n}"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
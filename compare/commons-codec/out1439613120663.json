{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":0,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":43,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":53,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":10,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":30,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":37,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":36,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":57,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":31,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":52,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":35,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":56,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":9,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":25,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":2,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":23,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":26,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":50,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":33,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":4,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":32,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":7,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":54,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":47,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":46,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":48,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":51,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":22,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":28,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":38,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":19,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":27,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":16,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":6,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":40,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":3,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":14,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":44,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":45,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":58,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":13,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":20,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":24,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":18,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":5,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":39,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":34,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":12,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":11,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":21,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":42,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":15,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":49,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":29,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":1,"org.apache.commons.codec.language.MetaphoneTest.testTCH":41,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":8,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":55},"transformations":[{"failures":[],"tindex":"9239bbdc-4306-11e5-9f41-f19581893d89","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:224","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:222","type":"CtReturnImpl","sourcecode":"return (org.apache.commons.codec.binary.BaseNCodec.Context.byte[]) != null"},"status":-2},{"failures":[],"tindex":"9239e2ed-4306-11e5-9f41-d9aa068fbbc0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:101","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    return null;\n} "},"variableMap":{"bytes":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:269","type":"CtIfImpl","sourcecode":"if (((org.apache.commons.codec.binary.BaseNCodec.Context.byte[]) == null) || ((org.apache.commons.codec.binary.BaseNCodec.Context.byte[].int) < ((org.apache.commons.codec.binary.BaseNCodec.Context.int) + int))) {\n    return org.apache.commons.codec.binary.BaseNCodec.resizeBuffer(org.apache.commons.codec.binary.BaseNCodec.Context);\n} "},"status":-2},{"failures":[0,1,2],"tindex":"9239e2ee-4306-11e5-9f41-05b486a9c766","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:442","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 4, \"VAN \", \"VON \")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 3, \"SCH\"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 2, \"ET\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 3, \"IER\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'K');\n}"},"variableMap":{"result":"result","this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:551","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'L') {\n    if (org.apache.commons.codec.language.DoubleMetaphone.conditionL0(java.lang.String, int)) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendPrimary('L');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('L');\n    }\n    int += 2;\n} else {\n    int++;\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('L');\n}"},"status":-1},{"failures":[3,4,5,6,7,8,9],"tindex":"923a09ff-4306-11e5-9f41-d1fbab2b8a2c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:797","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[], 0, int)"},"status":-1},{"failures":[0,2],"tindex":"923a0a00-4306-11e5-9f41-85c4990a1858","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:587","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.appendAlternate('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:748","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"KS\")"},"status":-1},{"failures":[10,11,0,1,2,12],"tindex":"923a5821-4306-11e5-9f41-0330e68bcc17","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:573","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('P')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:526","type":"CtIfImpl","sourcecode":"if ((int == 0) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 4, \"JOSE\")))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'A');\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.(isVowel(org.apache.commons.codec.language.DoubleMetaphone.charAt(java.lang.String, (int - 1)))) && (!boolean)) && ((org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'A') || (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'O'))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'H');\n} else if (int == ((java.lang.String.length()) - 1)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', ' ');\n} else if ((!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 1, \"S\", \"K\", \"L\")))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J');\n} "},"status":-1},{"failures":[13],"tindex":"923a7f32-4306-11e5-9f41-31e51e619131","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:219","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException(\"Can\\'t fetch any language from the empty language set.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:671","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((((\"Input array too big, the output array would be bigger (\" + long) + \") than the specified maximum size of \") + int))"},"status":-1},{"failures":[14,15,16,17,18,19,20,21,22],"tindex":"923a7f33-4306-11e5-9f41-83c1d33ba62c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:206","type":"CtIfImpl","sourcecode":"if (((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1)))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'G'))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 2)))) >= 0)) {\n    java.lang.StringBuilder.append('J');\n    int += 2;\n} else {\n    java.lang.StringBuilder.append('T');\n}"},"status":-1},{"failures":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"tindex":"923a7f34-4306-11e5-9f41-8d3a92835da6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:146","type":"CtAssignmentImpl","sourcecode":"boolean = false"},"variableMap":{"inExtendedComment":"inExtendedComment"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:189","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":-1},{"failures":[],"tindex":"923a7f35-4306-11e5-9f41-5d6ea9a64d07","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || ((java.lang.String.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone1.java.lang.String;\n} "},"variableMap":{"txt":"str","org.apache.commons.codec.language.Caverphone1.SIX_1":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"status":0},{"failures":[41],"tindex":"923aa646-4306-11e5-9f41-75a98b4c24e8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:300","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[42,43,44,45,46,47,48,49,50,51,52,53],"tindex":"923aa647-4306-11e5-9f41-f16aec77cb3a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (int == int) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"b","to":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:371","type":"CtIfImpl","sourcecode":"if ((int != (org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (int != (org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n    java.io.ByteArrayOutputStream.write(int);\n} "},"status":-1},{"failures":[],"tindex":"923aa648-4306-11e5-9f41-db54067bbb86","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:134","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-2},{"failures":[54],"tindex":"923aa649-4306-11e5-9f41-c3c44c3244ac","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:94","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[],"tindex":"923aa64a-4306-11e5-9f41-7508af299dac","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Soundex:217","type":"CtReturnImpl","sourcecode":"return this.char[]"},"variableMap":{"soundexMapping":"org.apache.commons.codec.language.Nysiis.CHARS_C"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:143","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[],"tindex":"923aa64b-4306-11e5-9f41-9532143aa87d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:306","type":"CtReturnImpl","sourcecode":"return (this.byte[]) == (org.apache.commons.codec.binary.Base64.byte[])"},"status":-2},{"failures":[55,56],"tindex":"923aa64c-4306-11e5-9f41-d9e2890ab522","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:229","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(int[][1], byte[], 4)"},"status":-1},{"failures":[],"tindex":"923acd5d-4306-11e5-9f41-a7764b0f2916","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:109","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"l3\", \"L3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:97","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"gh\", \"22\")"},"status":1},{"failures":[57,58,0,1,2],"tindex":"923acd5e-4306-11e5-9f41-a9477c83f357","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:123","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('F')"},"status":-1},{"failures":[],"tindex":"923acd5f-4306-11e5-9f41-257634fa0745","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:609","type":"CtReturnImpl","sourcecode":"return true"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
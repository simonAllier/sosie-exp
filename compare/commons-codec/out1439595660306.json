{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":2,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":34,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":45,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":27,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":31,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":8,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":36,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":44,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":14,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":28,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":4,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":18,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":51,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":3,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":5,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":22,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":10,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":40,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":11,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":25,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":21,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":46,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":20,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":41,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":16,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":50,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":17,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":9,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":19,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":13,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":26,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":35,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":49,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":15,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":30,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":33,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":23,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":39,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":6,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":12,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":29,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":43,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":47,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":7,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":37,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0":24,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":32,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":38,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":42,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":48},"transformations":[{"failures":[0,1,2],"tindex":"eb0a8983-42dd-11e5-926d-d13f17445f86","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:335","type":"CtIfImpl","sourcecode":"if (((int == 1) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int - 1))) == 'A')) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int - 1), 5, \"UCCEE\", \"UCCES\"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append(\"KS\");\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n}"},"variableMap":{"result":"result","this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:518","type":"CtIfImpl","sourcecode":"if ((((int == 0) && (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 4))) == ' ')) || ((java.lang.String.length()) == 4)) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 4, \"SAN \"))) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('H');\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('J', 'H');\n}"},"status":-1},{"failures":[],"tindex":"eb0ab094-42dd-11e5-926d-0da9649707c5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:68","type":"CtReturnImpl","sourcecode":"return java.security.MessageDigest.getInstance(java.lang.String)"},"variableMap":{"algorithm":"algorithm"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:67","type":"CtTryImpl","sourcecode":"try {\n    return java.security.MessageDigest.getInstance(java.lang.String);\n} catch (final java.security.NoSuchAlgorithmException e) {\n    throw new java.lang.IllegalArgumentException(java.security.NoSuchAlgorithmException);\n}"},"status":-2},{"failures":[],"tindex":"eb0ab095-42dd-11e5-926d-9d300d0eb8bd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:99","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"w3\", \"W3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:67","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^gn\", \"2n\")"},"status":1},{"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16],"tindex":"eb0ad7a6-42dd-11e5-926d-81ec4655adba","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:183","type":"CtInvocationImpl","sourcecode":"java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-1},{"failures":[17,18,19,20,21,22,23],"tindex":"eb0ad7a7-42dd-11e5-926d-7d21bec6d135","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:120","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"2\", \"\")"},"status":-1},{"failures":[],"tindex":"eb0ad7a8-42dd-11e5-926d-f519c67f872c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:447","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.Context.int = ((org.apache.commons.codec.binary.BaseNCodec.Context.int) << (org.apache.commons.codec.binary.Base64.int)) + int"},"variableMap":{"result":"pos","ibitWorkArea":"pos","context":"context","org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:362","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":-2},{"failures":[],"tindex":"eb0ad7a9-42dd-11e5-926d-1155cde153ab","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:312","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.QCodec.decode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be decoded using Q codec\"));\n}"},"status":-2},{"failures":[],"tindex":"eb0ad7aa-42dd-11e5-926d-1939419f7ddd","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:273","type":"CtReturnImpl","sourcecode":"return new java.lang.String(org.apache.commons.codec.net.URLCodec.decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(java.lang.String)) , java.lang.String)"},"status":-2},{"failures":[],"tindex":"eb0ad7ab-42dd-11e5-926d-476243327fcc","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtIfImpl","sourcecode":"if (java.lang.String.endsWith(org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    java.lang.String = java.lang.String.substring(0, ((java.lang.String.length()) - 1));\n} "},"variableMap":{"str":"org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    java.lang.String = java.lang.String.substring(1);\n} "},"status":0},{"failures":[],"tindex":"eb0ad7ac-42dd-11e5-926d-2527bd41237a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:78","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"dg\", \"2g\")"},"variableMap":{"txt":"name2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:240","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.getFirst3Last3(java.lang.String)"},"status":1},{"failures":[],"tindex":"eb0afebd-42dd-11e5-926d-eb739772aa8e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:141","type":"CtInvocationImpl","sourcecode":"java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.URLCodec.byte)"},"variableMap":{"buffer":"buffer","org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR":"org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:183","type":"CtInvocationImpl","sourcecode":"java.io.ByteArrayOutputStream.write(org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-2},{"failures":[],"tindex":"eb0afebe-42dd-11e5-926d-5bf697ba7fd8","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:356","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"variableMap":{"b":"roundsCustom","encodeBlanks":"roundsCustom"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:152","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":0},{"failures":[],"tindex":"eb0afebf-42dd-11e5-926d-8f2d0792b047","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:227","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[9]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:767","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[int / 8]"},"status":-2},{"failures":[],"tindex":"eb0afec0-42dd-11e5-926d-9b4aab47aba3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || ((java.lang.String.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.java.lang.String;\n} "},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"text","txt":"text"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:104","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"status":0},{"failures":[],"tindex":"eb0afec1-42dd-11e5-926d-917e529f912f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:677","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 4, \"TION\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n    int += 3;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 3, \"TIA\", \"TCH\")) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('X');\n    int += 3;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 2, \"TH\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, int, 3, \"TTH\"))) {\n    if ((org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 2), 2, \"OM\", \"AM\")) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 4, \"VAN \", \"VON \"))) || org.apache.commons.codec.language.DoubleMetaphone.(org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, 0, 3, \"SCH\"))) {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T');\n    } else {\n        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('0', 'T');\n    }\n    int += 2;\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('T');\n    int = org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.contains(java.lang.String, (int + 1), 1, \"T\", \"D\") ? int + 2 : int + 1;\n}"},"status":-2},{"failures":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"tindex":"eb0afec2-42dd-11e5-926d-87289bc33caa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:283","type":"CtAssignmentImpl","sourcecode":"char[][(int - int)] = '1'"},"variableMap":{"jj":"i","l_ascii":"name1Char","bits":"name1Size"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:326","type":"CtAssignmentImpl","sourcecode":"char[][(int - int)] = ' '"},"status":-1},{"failures":[],"tindex":"eb0b25d3-42dd-11e5-926d-977c5678e01a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:132","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:414","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\")"},"status":0},{"failures":[],"tindex":"eb0b25d4-42dd-11e5-926d-4335a5742e9c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:206","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(((java.lang.String)(java.lang.Object)))"},"variableMap":{"obj":"obj","this":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:312","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof byte[]) {\n    return org.apache.commons.codec.net.URLCodec.encode(((byte[])(java.lang.Object)));\n} else if (java.lang.Object instanceof java.lang.String) {\n    return org.apache.commons.codec.net.URLCodec.encode(((java.lang.String)(java.lang.Object)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (java.lang.Object.getClass().getName())) + \" cannot be URL encoded\"));\n}"},"status":-2},{"failures":[],"tindex":"eb0b25d5-42dd-11e5-926d-29777ae934c4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:94","type":"CtReturnImpl","sourcecode":"return null"},"status":0},{"failures":[48,49,50,51],"tindex":"eb0b25d6-42dd-11e5-926d-1f29eda8aaef","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:282","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"variableMap":{"index":"j"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:375","type":"CtAssignmentImpl","sourcecode":"int[][int++] = (int << 16) | (int & 65535)"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
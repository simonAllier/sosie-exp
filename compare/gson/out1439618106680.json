{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"2e24bd9e-4312-11e5-a69d-f35fadc30007","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.reflect.TypeToken:245","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"2e250bbf-4312-11e5-a69d-eb562e784251","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonReader:858","type":"CtAssignmentImpl","sourcecode":"int = com.google.gson.stream.JsonReader.int"},"variableMap":{"com.google.gson.stream.JsonReader.PEEKED_NONE":"stackSize","peeked":"stackSize"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:347","type":"CtAssignmentImpl","sourcecode":"int[][((int) - 1)] = 0"},"status":-1},{"failures":[],"tindex":"2e2531d0-4312-11e5-a69d-3772e95ff896","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonReader:661","type":"CtLocalVariableImpl","sourcecode":"int int = com.google.gson.stream.JsonReader.int"},"variableMap":{"com.google.gson.stream.JsonReader.NUMBER_CHAR_NONE":"height"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedHashTreeMap:367","type":"CtLocalVariableImpl","sourcecode":"int int = com.google.gson.internal.LinkedHashTreeMap.Node<K, V> != null ? com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.int : 0"},"status":-2},{"failures":[],"tindex":"2e2558e1-4312-11e5-a69d-613b7d72ef7b","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.LinkedHashTreeMap:534","type":"CtLocalVariableImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = this"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedHashTreeMap:430","type":"CtLocalVariableImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>"},"status":-2},{"failures":[],"tindex":"2e2558e2-4312-11e5-a69d-dd6bc6b6c758","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:831","type":"CtIfImpl","sourcecode":"if (int == (com.google.gson.stream.JsonReader.int)) {\n    java.lang.String = java.lang.Long.toString(long);\n} else if (int == (com.google.gson.stream.JsonReader.int)) {\n    java.lang.String = new java.lang.String(char[] , int , int);\n    int += int;\n} else {\n    throw new java.lang.IllegalStateException((((((((\"Expected a string but was \" + com.google.gson.stream.JsonReader.(peek())) + \" at line \") + com.google.gson.stream.JsonReader.(getLineNumber())) + \" column \") + com.google.gson.stream.JsonReader.(getColumnNumber())) + \" path \") + com.google.gson.stream.JsonReader.(getPath())));\n}"},"status":-2},{"failures":[],"tindex":"2e257ff3-4312-11e5-a69d-657c6160805b","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.LinkedTreeMap:506","type":"CtAssignmentImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>"},"variableMap":{"node":"replacement","child":"right"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedTreeMap:296","type":"CtAssignmentImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>"},"status":-2},{"failures":[],"tindex":"2e25a704-4312-11e5-a69d-0b59d3722b20","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.LinkedHashTreeMap:679","type":"CtLocalVariableImpl","sourcecode":"int int = ((java.lang.Integer.highestOneBit(int)) * 2) - 1"},"variableMap":{"targetSize":"height"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedTreeMap:321","type":"CtLocalVariableImpl","sourcecode":"int int = com.google.gson.internal.LinkedTreeMap.Node<K, V> != null ? com.google.gson.internal.LinkedTreeMap.Node<K, V>.int : 0"},"status":-2},{"failures":[],"tindex":"2e25a705-4312-11e5-a69d-8ddca391a540","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.bind.TypeAdapters:756","type":"CtIfImpl","sourcecode":"if (!(java.lang.Class<? super T>.isEnum())) {\n    java.lang.Class<? super T> = java.lang.Class<? super T>.getSuperclass();\n} "},"variableMap":{"rawType":"contextRawType"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.$Gson$Types:268","type":"CtInvocationImpl","sourcecode":"com.google.gson.internal.$Gson$Preconditions.com.google.gson.internal.$Gson$Preconditions.checkArgument(java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>))"},"status":-1},{"failures":[],"tindex":"2e25ce16-4312-11e5-a69d-750c167ea1e8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1477","type":"CtForImpl","sourcecode":"for (int int = 0, int int = int ; int < int ; int++) {\n    switch (int[][int]) {\n        case com.google.gson.stream.JsonScope.int :\n        case com.google.gson.stream.JsonScope.int :\n            java.lang.StringBuilder.append('[').append(int[][int]).append(']');\n            break;\n        case com.google.gson.stream.JsonScope.int :\n        case com.google.gson.stream.JsonScope.int :\n        case com.google.gson.stream.JsonScope.int :\n            java.lang.StringBuilder.append('.');\n            if ((java.lang.String[][int]) != null) {\n                java.lang.StringBuilder.append(java.lang.String[][int]);\n            } \n            break;\n        case com.google.gson.stream.JsonScope.int :\n        case com.google.gson.stream.JsonScope.int :\n        case com.google.gson.stream.JsonScope.int :\n            break;\n    }\n}"},"status":-1},{"failures":[],"tindex":"2e25f527-4312-11e5-a69d-51dcff90e2fc","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonReader:1257","type":"CtInvocationImpl","sourcecode":"com.google.gson.stream.JsonReader.skipQuotedValue('\\\"')"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:762","type":"CtInvocationImpl","sourcecode":"com.google.gson.stream.JsonReader.checkLenient()"},"status":-1},{"failures":[],"tindex":"2e25f528-4312-11e5-a69d-8f74d03a78fa","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.bind.JsonTreeReader:138","type":"CtIfImpl","sourcecode":"if (com.google.gson.internal.bind.JsonTreeReader.(peek()) != com.google.gson.stream.JsonToken) {\n    throw new java.lang.IllegalStateException((((\"Expected \" + com.google.gson.stream.JsonToken) + \" but was \") + com.google.gson.internal.bind.JsonTreeReader.(peek())));\n} "},"variableMap":{"expected":"array","this":"array"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:78","type":"CtInvocationImpl","sourcecode":"java.lang.reflect.Array.set(java.lang.Object, int, java.util.List<E>.get(int))"},"status":-2},{"failures":[],"tindex":"2e261c39-4312-11e5-a69d-cb70f160557c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtIfImpl","sourcecode":"if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n    return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(java.lang.reflect.Type));\n} else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n    return com.google.gson.reflect.TypeToken<T>.com.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n} else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n    return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(java.lang.reflect.Type))) && com.google.gson.reflect.TypeToken<T>.(com.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n} else {\n    throw com.google.gson.reflect.TypeToken<T>.com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType);\n}"},"status":-2},{"failures":[],"tindex":"2e26434a-4312-11e5-a69d-c382c9bd72d7","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtIfImpl","sourcecode":"if ((java.lang.String) != null) {\n    throw new java.lang.IllegalStateException((\"Dangling name: \" + (java.lang.String)));\n} "},"variableMap":{"deferredName":"deferredName"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonWriter:402","type":"CtInvocationImpl","sourcecode":"com.google.gson.stream.JsonWriter.string(java.lang.String)"},"status":-1},{"failures":[],"tindex":"2e266a5b-4312-11e5-a69d-f92441146989","series":0,"name":"replace","transplant":{"position":"com.google.gson.reflect.TypeToken:124","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.JsonPrimitive:307","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[],"tindex":"2e266a5c-4312-11e5-a69d-61ccbb1360bb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonWriter:339","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"Nesting problem.\")"},"status":-1},{"failures":[],"tindex":"2e26916d-4312-11e5-a69d-d18dc2bb2805","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonReader:627","type":"CtReturnImpl","sourcecode":"return com.google.gson.stream.JsonReader.int"},"variableMap":{"com.google.gson.stream.JsonReader.PEEKED_NONE":"com.google.gson.stream.JsonReader.PEEKED_NUMBER"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:749","type":"CtReturnImpl","sourcecode":"return int = com.google.gson.stream.JsonReader.int"},"status":-1},{"failures":[],"tindex":"2e26916e-4312-11e5-a69d-c1b08f9bac3d","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonReader:733","type":"CtIfImpl","sourcecode":"if (int == (com.google.gson.stream.JsonReader.int)) {\n    int = com.google.gson.stream.JsonReader.int;\n} else if ((int == (com.google.gson.stream.JsonReader.int)) || (int == (com.google.gson.stream.JsonReader.int))) {\n    int = com.google.gson.stream.JsonReader.int;\n} "},"variableMap":{"com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_SIGN":"com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED","com.google.gson.stream.JsonReader.NUMBER_CHAR_FRACTION_DIGIT":"com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED","last":"com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED","com.google.gson.stream.JsonReader.NUMBER_CHAR_DECIMAL":"com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E":"com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_DIGIT":"peekedNumberLength"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1254","type":"CtIfImpl","sourcecode":"if ((int == (com.google.gson.stream.JsonReader.int)) || (int == (com.google.gson.stream.JsonReader.int))) {\n    com.google.gson.stream.JsonReader.skipQuotedValue('\\'');\n} else if ((int == (com.google.gson.stream.JsonReader.int)) || (int == (com.google.gson.stream.JsonReader.int))) {\n    com.google.gson.stream.JsonReader.skipQuotedValue('\\\"');\n} else if (int == (com.google.gson.stream.JsonReader.int)) {\n    int += int;\n} "},"status":-2},{"failures":[],"tindex":"2e26df8f-4312-11e5-a69d-03b0fe0b229a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.Gson:363","type":"CtReturnImpl","sourcecode":"return com.google.gson.TypeAdapter<T>"},"status":-1},{"failures":[],"tindex":"2e26df90-4312-11e5-a69d-ed834801fbeb","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtIfImpl","sourcecode":"if ((java.lang.reflect.Type instanceof java.lang.Class) && (((java.lang.Class<?>)(java.lang.reflect.Type)).isArray())) {\n    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.lang.Class<?>.getComponentType();\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type);\n    return java.lang.reflect.Type == java.lang.reflect.Type ? java.lang.Class<?> : com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.arrayOf(java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.GenericArrayType.getGenericComponentType();\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type);\n    return java.lang.reflect.Type == java.lang.reflect.Type ? java.lang.reflect.GenericArrayType : com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.arrayOf(java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.ParameterizedType.getOwnerType();\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type);\n    boolean boolean = java.lang.reflect.Type != java.lang.reflect.Type;\n    java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    for (int int = 0, int int = java.lang.reflect.Type[].int ; int < int ; int++) {\n        java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type[][int]);\n        if (java.lang.reflect.Type != (java.lang.reflect.Type[][int])) {\n            if (!boolean) {\n                java.lang.reflect.Type[] = java.lang.reflect.Type[].clone();\n                boolean = true;\n            } \n            java.lang.reflect.Type[][int] = java.lang.reflect.Type;\n        } \n    }\n    return boolean ? com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.ParameterizedType.getRawType(), java.lang.reflect.Type[]) : java.lang.reflect.ParameterizedType;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.WildcardType) {\n    java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(java.lang.reflect.Type));\n    java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.WildcardType.getLowerBounds();\n    java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.WildcardType.getUpperBounds();\n    if ((java.lang.reflect.Type[].int) == 1) {\n        java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type[][0]);\n        if (java.lang.reflect.Type != (java.lang.reflect.Type[][0])) {\n            return com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.supertypeOf(java.lang.reflect.Type);\n        } \n    } else if ((java.lang.reflect.Type[].int) == 1) {\n        java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type[][0]);\n        if (java.lang.reflect.Type != (java.lang.reflect.Type[][0])) {\n            return com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.subtypeOf(java.lang.reflect.Type);\n        } \n    } \n    return java.lang.reflect.WildcardType;\n} else {\n    return java.lang.reflect.Type;\n}"},"variableMap":{"toResolve":"context","this":"this","context":"toResolve","contextRawType":"contextRawType"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtIfImpl","sourcecode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable) {\n    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolveTypeVariable(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == java.lang.reflect.TypeVariable<?>) {\n        return java.lang.reflect.Type;\n    } \n} else if ((java.lang.reflect.Type instanceof java.lang.Class) && (((java.lang.Class<?>)(java.lang.reflect.Type)).isArray())) {\n    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.lang.Class<?>.getComponentType();\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type);\n    return java.lang.reflect.Type == java.lang.reflect.Type ? java.lang.Class<?> : com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.arrayOf(java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.GenericArrayType.getGenericComponentType();\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type);\n    return java.lang.reflect.Type == java.lang.reflect.Type ? java.lang.reflect.GenericArrayType : com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.arrayOf(java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.ParameterizedType.getOwnerType();\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type);\n    boolean boolean = java.lang.reflect.Type != java.lang.reflect.Type;\n    java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    for (int int = 0, int int = java.lang.reflect.Type[].int ; int < int ; int++) {\n        java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type[][int]);\n        if (java.lang.reflect.Type != (java.lang.reflect.Type[][int])) {\n            if (!boolean) {\n                java.lang.reflect.Type[] = java.lang.reflect.Type[].clone();\n                boolean = true;\n            } \n            java.lang.reflect.Type[][int] = java.lang.reflect.Type;\n        } \n    }\n    return boolean ? com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.ParameterizedType.getRawType(), java.lang.reflect.Type[]) : java.lang.reflect.ParameterizedType;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.WildcardType) {\n    java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(java.lang.reflect.Type));\n    java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.WildcardType.getLowerBounds();\n    java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.WildcardType.getUpperBounds();\n    if ((java.lang.reflect.Type[].int) == 1) {\n        java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type[][0]);\n        if (java.lang.reflect.Type != (java.lang.reflect.Type[][0])) {\n            return com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.supertypeOf(java.lang.reflect.Type);\n        } \n    } else if ((java.lang.reflect.Type[].int) == 1) {\n        java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type[][0]);\n        if (java.lang.reflect.Type != (java.lang.reflect.Type[][0])) {\n            return com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.subtypeOf(java.lang.reflect.Type);\n        } \n    } \n    return java.lang.reflect.WildcardType;\n} else {\n    return java.lang.reflect.Type;\n}"},"status":-1}],"header":{"groupId":"com.google.code.gson","transformationCount":19,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
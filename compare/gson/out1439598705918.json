{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"02611970-42e5-11e5-a0cc-d797552aa242","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1259","type":"CtOperatorAssignmentImpl","sourcecode":"int += int"},"status":-1},{"failures":[],"tindex":"02616791-42e5-11e5-a0cc-cb08b1c82ec2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedHashTreeMap:182","type":"CtAssignmentImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> , K , int , com.google.gson.internal.LinkedHashTreeMap.Node<K, V> , com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>)"},"status":-2},{"failures":[],"tindex":"02616792-42e5-11e5-a0cc-7de493b75a86","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonReader:1590","type":"CtIfImpl","sourcecode":"if ((char[][((int) + int)]) != (com.google.gson.stream.JsonReader.char[][int])) {\n    return ;\n} "},"variableMap":{"pos":"pos","i":"pos","buffer":"buffer","com.google.gson.stream.JsonReader.NON_EXECUTE_PREFIX":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1108","type":"CtWhileImpl","sourcecode":"while (int < int) {\n    int int = char[][int++];\n    if (int == char) {\n        int = int;\n        return ;\n    } else if (int == '\\\\') {\n        int = int;\n        com.google.gson.stream.JsonReader.readEscapeCharacter();\n        int = int;\n        int = int;\n    } else if (int == '\\n') {\n        (int)++;\n        int = int;\n    } \n}"},"status":-2},{"failures":[],"tindex":"02616793-42e5-11e5-a0cc-d5f2f446a6b2","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:205","type":"CtInvocationImpl","sourcecode":"com.google.gson.stream.JsonWriter.beginObject()"},"variableMap":{"out":"out"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:95","type":"CtInvocationImpl","sourcecode":"com.google.gson.stream.JsonWriter.endArray()"},"status":-1},{"failures":[],"tindex":"02616794-42e5-11e5-a0cc-f3721829fc85","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtIfImpl","sourcecode":"if (!(java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType)) {\n    return false;\n} "},"variableMap":{"b":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.JsonPrimitive:112","type":"CtReturnImpl","sourcecode":"return (java.lang.Object) instanceof java.lang.Boolean"},"status":-2},{"failures":[],"tindex":"02618ea5-42e5-11e5-a0cc-09e9c6cef36e","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.LinkedHashTreeMap:680","type":"CtAssignmentImpl","sourcecode":"int = int - int"},"variableMap":{"targetSize":"size","treeCapacity":"size","leavesToSkip":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedTreeMap:177","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-1},{"failures":[],"tindex":"02618ea6-42e5-11e5-a0cc-f7c0dacc0700","series":0,"name":"add","transplant":{"position":"com.google.gson.internal.LinkedHashTreeMap:822","type":"CtInvocationImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedTreeMap:292","type":"CtIfImpl","sourcecode":"if ((com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n    com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n} else {\n    assert (com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n    com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n}"},"status":-2},{"failures":[],"tindex":"02618ea7-42e5-11e5-a0cc-2bd4ee8fd440","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.LinkedHashTreeMap:354","type":"CtInvocationImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap<K, V>.rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V>)"},"variableMap":{"node":"nearest","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedHashTreeMap:188","type":"CtInvocationImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap<K, V>.rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V>, true)"},"status":-1},{"failures":[],"tindex":"0261b5b8-42e5-11e5-a0cc-db0875a903b0","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonReader:1223","type":"CtAssignmentImpl","sourcecode":"int = 1"},"variableMap":{"stackSize":"pos"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1406","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-1},{"failures":[],"tindex":"0261b5b9-42e5-11e5-a0cc-8df802fc748e","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:64","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonWriter:603","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\")"},"status":-1},{"failures":[],"tindex":"0261b5ba-42e5-11e5-a0cc-633fc2c119ae","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.bind.TypeAdapters:96","type":"CtLocalVariableImpl","sourcecode":"boolean boolean"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.Gson:663","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = com.google.gson.stream.JsonWriter.isHtmlSafe()"},"status":-2},{"failures":[],"tindex":"0261b5bb-42e5-11e5-a0cc-bb13be9f4ff6","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonReader:346","type":"CtInvocationImpl","sourcecode":"com.google.gson.stream.JsonReader.push(com.google.gson.stream.JsonScope.int)"},"variableMap":{"this":"this","com.google.gson.stream.JsonScope.EMPTY_ARRAY":"stackSize"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1243","type":"CtIfImpl","sourcecode":"if (int == (com.google.gson.stream.JsonReader.int)) {\n    com.google.gson.stream.JsonReader.push(com.google.gson.stream.JsonScope.int);\n    int++;\n} else if (int == (com.google.gson.stream.JsonReader.int)) {\n    (int)--;\n    int--;\n} else if (int == (com.google.gson.stream.JsonReader.int)) {\n    (int)--;\n    int--;\n} else if ((int == (com.google.gson.stream.JsonReader.int)) || (int == (com.google.gson.stream.JsonReader.int))) {\n    com.google.gson.stream.JsonReader.skipUnquotedValue();\n} else if ((int == (com.google.gson.stream.JsonReader.int)) || (int == (com.google.gson.stream.JsonReader.int))) {\n    com.google.gson.stream.JsonReader.skipQuotedValue('\\'');\n} else if ((int == (com.google.gson.stream.JsonReader.int)) || (int == (com.google.gson.stream.JsonReader.int))) {\n    com.google.gson.stream.JsonReader.skipQuotedValue('\\\"');\n} else if (int == (com.google.gson.stream.JsonReader.int)) {\n    int += int;\n} "},"status":-1},{"failures":[],"tindex":"0261dccc-42e5-11e5-a0cc-71858c1df2bd","series":0,"name":"add","transplant":{"position":"com.google.gson.stream.JsonReader:1223","type":"CtAssignmentImpl","sourcecode":"int = 1"},"variableMap":{"stackSize":"pos"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:547","type":"CtUnaryOperatorImpl","sourcecode":"(int)--"},"status":-1},{"failures":[],"tindex":"0261dccd-42e5-11e5-a0cc-7da4318957b5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.GsonBuilder:323","type":"CtReturnImpl","sourcecode":"return this"},"status":-2},{"failures":[],"tindex":"0261dcce-42e5-11e5-a0cc-45c8f6f520d6","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.LazilyParsedNumber:51","type":"CtReturnImpl","sourcecode":"return new java.math.BigDecimal(java.lang.String).longValue()"},"variableMap":{"value":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LazilyParsedNumber:48","type":"CtTryImpl","sourcecode":"try {\n    return java.lang.Long.parseLong(java.lang.String);\n} catch (java.lang.NumberFormatException e) {\n    return new java.math.BigDecimal(java.lang.String).longValue();\n}"},"status":0},{"failures":[],"tindex":"0261dccf-42e5-11e5-a0cc-6f56c9c8a795","series":0,"name":"replace","transplant":{"position":"com.google.gson.JsonPrimitive:290","type":"CtReturnImpl","sourcecode":"return 31"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1417","type":"CtReturnImpl","sourcecode":"return -1"},"status":-1},{"failures":[],"tindex":"026203e0-42e5-11e5-a0cc-2fc819755dfe","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonWriter:608","type":"CtIfImpl","sourcecode":"if ((!(boolean)) && (!boolean)) {\n    throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n} "},"variableMap":{"root":"deserialize","lenient":"serialize"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:137","type":"CtIfImpl","sourcecode":"if ((!boolean) && (!boolean)) {\n    continue;\n} "},"status":-1},{"failures":[],"tindex":"026203e1-42e5-11e5-a0cc-5f06b0ae012c","series":0,"name":"add","transplant":{"position":"com.google.gson.internal.LinkedHashTreeMap:595","type":"CtInvocationImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.AvlBuilder<K, V>.reset(int)"},"variableMap":{"leftSize":"oldCapacity","leftBuilder":"leftBuilder"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedHashTreeMap:598","type":"CtForImpl","sourcecode":"for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> ; (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.AvlIterator<K, V>.next()) != null ; ) {\n    if (((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.int) & int) == 0) {\n        com.google.gson.internal.LinkedHashTreeMap.AvlBuilder<K, V>.add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n    } else {\n        com.google.gson.internal.LinkedHashTreeMap.AvlBuilder<K, V>.add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n    }\n}"},"status":-1},{"failures":[],"tindex":"026203e2-42e5-11e5-a0cc-4d63c3881783","series":0,"name":"add","transplant":{"position":"com.google.gson.internal.LinkedHashTreeMap:692","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"variableMap":{"size":"last"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:724","type":"CtAssignmentImpl","sourcecode":"int = com.google.gson.stream.JsonReader.int"},"status":-1},{"failures":[],"tindex":"026203e3-42e5-11e5-a0cc-33aa881369ab","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.$Gson$Types:324","type":"CtWhileImpl","sourcecode":"while (true) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable) {\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolveTypeVariable(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == java.lang.reflect.TypeVariable<?>) {\n            return java.lang.reflect.Type;\n        } \n    } else if ((java.lang.reflect.Type instanceof java.lang.Class) && (((java.lang.Class<?>)(java.lang.reflect.Type)).isArray())) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.lang.Class<?>.getComponentType();\n        java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type);\n        return java.lang.reflect.Type == java.lang.reflect.Type ? java.lang.Class<?> : com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.arrayOf(java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.GenericArrayType.getGenericComponentType();\n        java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type);\n        return java.lang.reflect.Type == java.lang.reflect.Type ? java.lang.reflect.GenericArrayType : com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.arrayOf(java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.ParameterizedType.getOwnerType();\n        java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type);\n        boolean boolean = java.lang.reflect.Type != java.lang.reflect.Type;\n        java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n        for (int int = 0, int int = java.lang.reflect.Type[].int ; int < int ; int++) {\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type[][int]);\n            if (java.lang.reflect.Type != (java.lang.reflect.Type[][int])) {\n                if (!boolean) {\n                    java.lang.reflect.Type[] = java.lang.reflect.Type[].clone();\n                    boolean = true;\n                } \n                java.lang.reflect.Type[][int] = java.lang.reflect.Type;\n            } \n        }\n        return boolean ? com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.ParameterizedType.getRawType(), java.lang.reflect.Type[]) : java.lang.reflect.ParameterizedType;\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(java.lang.reflect.Type));\n        java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.WildcardType.getLowerBounds();\n        java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.WildcardType.getUpperBounds();\n        if ((java.lang.reflect.Type[].int) == 1) {\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type[][0]);\n            if (java.lang.reflect.Type != (java.lang.reflect.Type[][0])) {\n                return com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.supertypeOf(java.lang.reflect.Type);\n            } \n        } else if ((java.lang.reflect.Type[].int) == 1) {\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type[][0]);\n            if (java.lang.reflect.Type != (java.lang.reflect.Type[][0])) {\n                return com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.subtypeOf(java.lang.reflect.Type);\n            } \n        } \n        return java.lang.reflect.WildcardType;\n    } else {\n        return java.lang.reflect.Type;\n    }\n}"},"variableMap":{"toResolve":"declaredBy","this":"this","context":"declaredBy","contextRawType":"declaredByRaw"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtIfImpl","sourcecode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    int int = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.indexOf(java.lang.Class<?>.getTypeParameters(), java.lang.reflect.TypeVariable<?>);\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getActualTypeArguments()[int];\n} "},"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":20,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"49efe057-4306-11e5-99c8-bd10ea0558a3","series":0,"name":"replace","transplant":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtIfImpl","sourcecode":"if (!(com.google.gson.JsonElement instanceof com.google.gson.JsonPrimitive)) {\n    throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n} "},"variableMap":{"json":"element"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.JsonArray:47","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonArray.add(com.google.gson.JsonElement.deepCopy())"},"status":-1},{"failures":[],"tindex":"49efe058-4306-11e5-99c8-1743bc9b6e56","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.LinkedHashTreeMap:643","type":"CtForImpl","sourcecode":"for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> ; com.google.gson.internal.LinkedHashTreeMap.Node<K, V> != null ; com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n    com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n}"},"variableMap":{"result":"child","parent":"child","left":"child","stackTop":"child","right":"child"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedHashTreeMap:158","type":"CtIfImpl","sourcecode":"if (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> == null) {\n    break;\n} "},"status":-1},{"failures":[],"tindex":"49efe059-4306-11e5-99c8-83b2b0658824","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.bind.JsonTreeReader:198","type":"CtInvocationImpl","sourcecode":"com.google.gson.internal.bind.JsonTreeReader.popStack()"},"variableMap":{"this":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.JsonPrimitive:98","type":"CtAssignmentImpl","sourcecode":"this.java.lang.Object = java.lang.String.valueOf(char)"},"status":-2},{"failures":[],"tindex":"49f0076a-4306-11e5-99c8-3bcaf5e6a71a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtIfImpl","sourcecode":"if (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> == null) {\n    continue;\n} "},"status":0},{"failures":[],"tindex":"49f0076b-4306-11e5-99c8-174d3e79d78e","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.LinkedHashTreeMap:822","type":"CtInvocationImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedHashTreeMap:596","type":"CtInvocationImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.AvlBuilder<K, V>.reset(int)"},"status":-2},{"failures":[],"tindex":"49f0076c-4306-11e5-99c8-355aa4d46579","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtIfImpl","sourcecode":"if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n    return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(java.lang.reflect.Type));\n} else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n    return com.google.gson.reflect.TypeToken<T>.com.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n} else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n    return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(java.lang.reflect.Type))) && com.google.gson.reflect.TypeToken<T>.(com.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n} else {\n    throw com.google.gson.reflect.TypeToken<T>.com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType);\n}"},"status":-2},{"failures":[],"tindex":"49f0076d-4306-11e5-99c8-b544df8f0df1","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.LinkedTreeMap:326","type":"CtInvocationImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap<K, V>.rotateLeft(com.google.gson.internal.LinkedTreeMap.Node<K, V>)"},"variableMap":{"node":"node","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedTreeMap:259","type":"CtInvocationImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap<K, V>.replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V>, com.google.gson.internal.LinkedTreeMap.Node<K, V>)"},"status":-1},{"failures":[],"tindex":"49f0076e-4306-11e5-99c8-1956f5ffaecf","series":0,"name":"replace","transplant":{"position":"com.google.gson.JsonPrimitive:290","type":"CtReturnImpl","sourcecode":"return 31"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:745","type":"CtReturnImpl","sourcecode":"return int = com.google.gson.stream.JsonReader.int"},"status":-1},{"failures":[],"tindex":"49f0076f-4306-11e5-99c8-015761d19f44","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.$Gson$Types:96","type":"CtReturnImpl","sourcecode":"return java.lang.Class<?>.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.canonicalize(java.lang.Class<?>.getComponentType())) : java.lang.Class<?>"},"variableMap":{"c":"contextRawType","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.$Gson$Types:324","type":"CtWhileImpl","sourcecode":"while (true) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable) {\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolveTypeVariable(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == java.lang.reflect.TypeVariable<?>) {\n            return java.lang.reflect.Type;\n        } \n    } else if ((java.lang.reflect.Type instanceof java.lang.Class) && (((java.lang.Class<?>)(java.lang.reflect.Type)).isArray())) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.lang.Class<?>.getComponentType();\n        java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type);\n        return java.lang.reflect.Type == java.lang.reflect.Type ? java.lang.Class<?> : com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.arrayOf(java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.GenericArrayType.getGenericComponentType();\n        java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type);\n        return java.lang.reflect.Type == java.lang.reflect.Type ? java.lang.reflect.GenericArrayType : com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.arrayOf(java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.ParameterizedType.getOwnerType();\n        java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type);\n        boolean boolean = java.lang.reflect.Type != java.lang.reflect.Type;\n        java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n        for (int int = 0, int int = java.lang.reflect.Type[].int ; int < int ; int++) {\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type[][int]);\n            if (java.lang.reflect.Type != (java.lang.reflect.Type[][int])) {\n                if (!boolean) {\n                    java.lang.reflect.Type[] = java.lang.reflect.Type[].clone();\n                    boolean = true;\n                } \n                java.lang.reflect.Type[][int] = java.lang.reflect.Type;\n            } \n        }\n        return boolean ? com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.ParameterizedType.getRawType(), java.lang.reflect.Type[]) : java.lang.reflect.ParameterizedType;\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(java.lang.reflect.Type));\n        java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.WildcardType.getLowerBounds();\n        java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.WildcardType.getUpperBounds();\n        if ((java.lang.reflect.Type[].int) == 1) {\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type[][0]);\n            if (java.lang.reflect.Type != (java.lang.reflect.Type[][0])) {\n                return com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.supertypeOf(java.lang.reflect.Type);\n            } \n        } else if ((java.lang.reflect.Type[].int) == 1) {\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type[][0]);\n            if (java.lang.reflect.Type != (java.lang.reflect.Type[][0])) {\n                return com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.subtypeOf(java.lang.reflect.Type);\n            } \n        } \n        return java.lang.reflect.WildcardType;\n    } else {\n        return java.lang.reflect.Type;\n    }\n}"},"status":-2},{"failures":[],"tindex":"49f02e80-4306-11e5-99c8-432401e88f97","series":0,"name":"add","transplant":{"position":"com.google.gson.stream.JsonReader:1080","type":"CtAssignmentImpl","sourcecode":"java.lang.StringBuilder = new java.lang.StringBuilder()"},"variableMap":{"builder":"builder"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1094","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(char[], int, int)"},"status":-1},{"failures":[],"tindex":"49f02e81-4306-11e5-99c8-bf79c5ee968f","series":0,"name":"add","transplant":{"position":"com.google.gson.stream.JsonReader:616","type":"CtAssignmentImpl","sourcecode":"java.lang.String = \"TRUE\""},"variableMap":{"keywordUpper":"keywordUpper"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:620","type":"CtAssignmentImpl","sourcecode":"java.lang.String = \"FALSE\""},"status":-1},{"failures":[],"tindex":"49f02e82-4306-11e5-99c8-05cbf2cd9112","series":0,"name":"add","transplant":{"position":"com.google.gson.stream.JsonReader:930","type":"CtAssignmentImpl","sourcecode":"java.lang.String = null"},"variableMap":{"peekedString":"peekedString"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:916","type":"CtAssignmentImpl","sourcecode":"java.lang.String = com.google.gson.stream.JsonReader.nextQuotedValue((int == (com.google.gson.stream.JsonReader.int) ? '\\'' : '\\\"'))"},"status":-1},{"failures":[],"tindex":"49f02e83-4306-11e5-99c8-6beb5ea31bd6","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonReader:746","type":"CtIfImpl","sourcecode":"if (((int == (com.google.gson.stream.JsonReader.int)) || (int == (com.google.gson.stream.JsonReader.int))) || (int == (com.google.gson.stream.JsonReader.int))) {\n    int = int;\n    return int = com.google.gson.stream.JsonReader.int;\n} else {\n    return com.google.gson.stream.JsonReader.int;\n}"},"variableMap":{"com.google.gson.stream.JsonReader.PEEKED_NUMBER":"pos","com.google.gson.stream.JsonReader.NUMBER_CHAR_FRACTION_DIGIT":"p","com.google.gson.stream.JsonReader.PEEKED_NONE":"pos","last":"l","peeked":"limit","i":"limit","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_DIGIT":"l","com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT":"pos","peekedNumberLength":"limit"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1397","type":"CtIfImpl","sourcecode":"if (int == '#') {\n    int = int;\n    com.google.gson.stream.JsonReader.checkLenient();\n    com.google.gson.stream.JsonReader.skipToEndOfLine();\n    int = int;\n    int = int;\n} else {\n    int = int;\n    return int;\n}"},"status":-1},{"failures":[],"tindex":"49f05594-4306-11e5-99c8-595aa66650c8","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.Excluder:233","type":"CtIfImpl","sourcecode":"if (com.google.gson.annotations.Since != null) {\n    double double = com.google.gson.annotations.Since.double();\n    if (double > (double)) {\n        return false;\n    } \n} "},"variableMap":{"annotation":"com.google.gson.annotations.Since.class","value":"version","version":"version"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.Excluder:154","type":"CtIfImpl","sourcecode":"if (((double) != (com.google.gson.internal.Excluder.double)) && (!com.google.gson.internal.Excluder.(isValidVersion(java.lang.reflect.Field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since), java.lang.reflect.Field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until))))) {\n    return true;\n} "},"status":-2},{"failures":[],"tindex":"49f05595-4306-11e5-99c8-ef1d0b1db14c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:668","type":"CtIfImpl","sourcecode":"if (int == (char[].int)) {\n    return com.google.gson.stream.JsonReader.int;\n} "},"status":-2},{"failures":[],"tindex":"49f05596-4306-11e5-99c8-4f9919754eda","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.Gson:427","type":"CtIfImpl","sourcecode":"if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(com.google.gson.TypeAdapterFactory)))\n    boolean = true;\n"},"status":-1},{"failures":[],"tindex":"49f05597-4306-11e5-99c8-a7ca16c24227","series":0,"name":"add","transplant":{"position":"com.google.gson.stream.JsonReader:1547","type":"CtReturnImpl","sourcecode":"return '\\n'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1517","type":"CtSwitchImpl","sourcecode":"switch (char) {\n    case 'u' :\n        if ((((int) + 4) > (int)) && (!com.google.gson.stream.JsonReader.(fillBuffer(4)))) {\n            throw com.google.gson.stream.JsonReader.syntaxError(\"Unterminated escape sequence\");\n        } \n        char char = 0;\n        for (int int = int, int int = int + 4 ; int < int ; int++) {\n            char char = char[][int];\n            char <<= 4;\n            if ((char >= '0') && (char <= '9')) {\n                char += char - '0';\n            } else if ((char >= 'a') && (char <= 'f')) {\n                char += (char - 'a') + 10;\n            } else if ((char >= 'A') && (char <= 'F')) {\n                char += (char - 'A') + 10;\n            } else {\n                throw new java.lang.NumberFormatException((\"\\\\u\" + (new java.lang.String(char[] , int , 4))));\n            }\n        }\n        int += 4;\n        return char;\n    case 't' :\n        return '\\t';\n    case 'b' :\n        return '\\b';\n    case 'n' :\n        return '\\n';\n    case 'r' :\n        return '\\r';\n    case 'f' :\n        return '\\f';\n    case '\\n' :\n        (int)++;\n        int = int;\n    case '\\'' :\n    case '\\\"' :\n    case '\\\\' :\n    default :\n        return char;\n}"},"status":-2},{"failures":[],"tindex":"49f05598-4306-11e5-99c8-af03f915939f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:925","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Double.parseDouble(java.lang.String)"},"status":-2},{"failures":[],"tindex":"49f07ca9-4306-11e5-99c8-6bd979ca572f","series":0,"name":"add","transplant":{"position":"com.google.gson.stream.JsonReader:574","type":"CtIfImpl","sourcecode":"if ((int) == 1) {\n    com.google.gson.stream.JsonReader.checkLenient();\n} "},"variableMap":{"stackSize":"p","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:789","type":"CtIfImpl","sourcecode":"if (int == (com.google.gson.stream.JsonReader.int)) {\n    int = com.google.gson.stream.JsonReader.doPeek();\n} "},"status":0}],"header":{"groupId":"com.google.code.gson","transformationCount":19,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
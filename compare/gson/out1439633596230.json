{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"3e9e880e-4336-11e5-9fd5-133485057b2c","series":0,"name":"add","transplant":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtIfImpl","sourcecode":"if ((java.lang.reflect.Type instanceof java.lang.Class) && (((java.lang.Class<?>)(java.lang.reflect.Type)).isArray())) {\n    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.lang.Class<?>.getComponentType();\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type);\n    return java.lang.reflect.Type == java.lang.reflect.Type ? java.lang.Class<?> : com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.arrayOf(java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.GenericArrayType.getGenericComponentType();\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type);\n    return java.lang.reflect.Type == java.lang.reflect.Type ? java.lang.reflect.GenericArrayType : com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.arrayOf(java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.ParameterizedType.getOwnerType();\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type);\n    boolean boolean = java.lang.reflect.Type != java.lang.reflect.Type;\n    java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    for (int int = 0, int int = java.lang.reflect.Type[].int ; int < int ; int++) {\n        java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type[][int]);\n        if (java.lang.reflect.Type != (java.lang.reflect.Type[][int])) {\n            if (!boolean) {\n                java.lang.reflect.Type[] = java.lang.reflect.Type[].clone();\n                boolean = true;\n            } \n            java.lang.reflect.Type[][int] = java.lang.reflect.Type;\n        } \n    }\n    return boolean ? com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.ParameterizedType.getRawType(), java.lang.reflect.Type[]) : java.lang.reflect.ParameterizedType;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.WildcardType) {\n    java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(java.lang.reflect.Type));\n    java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.WildcardType.getLowerBounds();\n    java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.WildcardType.getUpperBounds();\n    if ((java.lang.reflect.Type[].int) == 1) {\n        java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type[][0]);\n        if (java.lang.reflect.Type != (java.lang.reflect.Type[][0])) {\n            return com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.supertypeOf(java.lang.reflect.Type);\n        } \n    } else if ((java.lang.reflect.Type[].int) == 1) {\n        java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type[][0]);\n        if (java.lang.reflect.Type != (java.lang.reflect.Type[][0])) {\n            return com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.subtypeOf(java.lang.reflect.Type);\n        } \n    } \n    return java.lang.reflect.WildcardType;\n} else {\n    return java.lang.reflect.Type;\n}"},"variableMap":{"toResolve":"context","this":"this","context":"toResolve","contextRawType":"contextRawType"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.$Gson$Types:324","type":"CtWhileImpl","sourcecode":"while (true) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable) {\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolveTypeVariable(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == java.lang.reflect.TypeVariable<?>) {\n            return java.lang.reflect.Type;\n        } \n    } else if ((java.lang.reflect.Type instanceof java.lang.Class) && (((java.lang.Class<?>)(java.lang.reflect.Type)).isArray())) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.lang.Class<?>.getComponentType();\n        java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type);\n        return java.lang.reflect.Type == java.lang.reflect.Type ? java.lang.Class<?> : com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.arrayOf(java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.GenericArrayType.getGenericComponentType();\n        java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type);\n        return java.lang.reflect.Type == java.lang.reflect.Type ? java.lang.reflect.GenericArrayType : com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.arrayOf(java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.ParameterizedType.getOwnerType();\n        java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type);\n        boolean boolean = java.lang.reflect.Type != java.lang.reflect.Type;\n        java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n        for (int int = 0, int int = java.lang.reflect.Type[].int ; int < int ; int++) {\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type[][int]);\n            if (java.lang.reflect.Type != (java.lang.reflect.Type[][int])) {\n                if (!boolean) {\n                    java.lang.reflect.Type[] = java.lang.reflect.Type[].clone();\n                    boolean = true;\n                } \n                java.lang.reflect.Type[][int] = java.lang.reflect.Type;\n            } \n        }\n        return boolean ? com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.ParameterizedType.getRawType(), java.lang.reflect.Type[]) : java.lang.reflect.ParameterizedType;\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(java.lang.reflect.Type));\n        java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.WildcardType.getLowerBounds();\n        java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.WildcardType.getUpperBounds();\n        if ((java.lang.reflect.Type[].int) == 1) {\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type[][0]);\n            if (java.lang.reflect.Type != (java.lang.reflect.Type[][0])) {\n                return com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.supertypeOf(java.lang.reflect.Type);\n            } \n        } else if ((java.lang.reflect.Type[].int) == 1) {\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type[][0]);\n            if (java.lang.reflect.Type != (java.lang.reflect.Type[][0])) {\n                return com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.subtypeOf(java.lang.reflect.Type);\n            } \n        } \n        return java.lang.reflect.WildcardType;\n    } else {\n        return java.lang.reflect.Type;\n    }\n}"},"status":-2},{"failures":[],"tindex":"3e9eaf1f-4336-11e5-9fd5-8318c107d2ef","series":0,"name":"replace","transplant":{"position":"com.google.gson.JsonElement:74","type":"CtReturnImpl","sourcecode":"return (this) instanceof com.google.gson.JsonNull"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1461","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[],"tindex":"3e9ed630-4336-11e5-9fd5-5df54d24ff1c","series":0,"name":"replace","transplant":{"position":"com.google.gson.Gson:662","type":"CtInvocationImpl","sourcecode":"com.google.gson.stream.JsonWriter.setLenient(true)"},"variableMap":{"writer":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonWriter:325","type":"CtInvocationImpl","sourcecode":"com.google.gson.stream.JsonWriter.beforeValue(true)"},"status":-1},{"failures":[],"tindex":"3e9ed631-4336-11e5-9fd5-79288cbf03d3","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.bind.JsonTreeReader:171","type":"CtIfImpl","sourcecode":"if ((com.google.gson.stream.JsonToken != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) && (com.google.gson.stream.JsonToken != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n    throw new java.lang.IllegalStateException((((\"Expected \" + (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) + \" but was \") + com.google.gson.stream.JsonToken));\n} "},"variableMap":{"com.google.gson.stream.JsonToken.STRING":"com.google.gson.stream.JsonToken.NAME","token":"com.google.gson.stream.JsonToken.NAME","com.google.gson.stream.JsonToken.NUMBER":"com.google.gson.stream.JsonToken.NAME"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.bind.JsonTreeReader:144","type":"CtInvocationImpl","sourcecode":"com.google.gson.internal.bind.JsonTreeReader.expect(com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)"},"status":-2},{"failures":[],"tindex":"3e9ed632-4336-11e5-9fd5-6bd0f0820da5","series":0,"name":"add","transplant":{"position":"com.google.gson.internal.bind.TypeAdapters:552","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:901","type":"CtLocalVariableImpl","sourcecode":"int int = int"},"status":-2},{"failures":[],"tindex":"3e9f7273-4336-11e5-9fd5-537f34bd73b3","series":0,"name":"add","transplant":{"position":"com.google.gson.JsonElement:90","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((\"Not a JSON Object: \" + (this)))"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:980","type":"CtThrowImpl","sourcecode":"throw new java.lang.NumberFormatException((((((((\"Expected a long but was \" + (java.lang.String)) + \" at line \") + com.google.gson.stream.JsonReader.(getLineNumber())) + \" column \") + com.google.gson.stream.JsonReader.(getColumnNumber())) + \" path \") + com.google.gson.stream.JsonReader.(getPath())))"},"status":-2},{"failures":[],"tindex":"3e9f9984-4336-11e5-9fd5-1514ff78cd70","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof com.google.gson.JsonPrimitive) {\n    com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(java.lang.Object));\n    if (com.google.gson.JsonPrimitive.isString()) {\n        return com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken;\n    } else if (com.google.gson.JsonPrimitive.isBoolean()) {\n        return com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken;\n    } else if (com.google.gson.JsonPrimitive.isNumber()) {\n        return com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken;\n    } else {\n        throw new java.lang.AssertionError();\n    }\n} else if (java.lang.Object instanceof com.google.gson.JsonNull) {\n    return com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken;\n} else if (java.lang.Object == (com.google.gson.internal.bind.JsonTreeReader.java.lang.Object)) {\n    throw new java.lang.IllegalStateException(\"JsonReader is closed\");\n} else {\n    throw new java.lang.AssertionError();\n}"},"status":-2},{"failures":[],"tindex":"3e9f9985-4336-11e5-9fd5-630c37fbf65d","series":0,"name":"replace","transplant":{"position":"com.google.gson.reflect.TypeToken:124","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:756","type":"CtSwitchImpl","sourcecode":"switch (char) {\n    case '/' :\n    case '\\\\' :\n    case ';' :\n    case '#' :\n    case '=' :\n        com.google.gson.stream.JsonReader.checkLenient();\n    case '{' :\n    case '}' :\n    case '[' :\n    case ']' :\n    case ':' :\n    case ',' :\n    case ' ' :\n    case '\\t' :\n    case '\\f' :\n    case '\\r' :\n    case '\\n' :\n        return false;\n    default :\n        return true;\n}"},"status":-1},{"failures":[],"tindex":"3e9fc096-4336-11e5-9fd5-3fb7233b5052","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonReader:1537","type":"CtOperatorAssignmentImpl","sourcecode":"int += 4"},"variableMap":{"pos":"peeked"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:862","type":"CtAssignmentImpl","sourcecode":"int = com.google.gson.stream.JsonReader.int"},"status":-1},{"failures":[],"tindex":"3e9fc097-4336-11e5-9fd5-47fb53db8ba5","series":0,"name":"add","transplant":{"position":"com.google.gson.internal.LinkedHashTreeMap:822","type":"CtInvocationImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1255","type":"CtInvocationImpl","sourcecode":"com.google.gson.stream.JsonReader.skipQuotedValue('\\'')"},"status":-2},{"failures":[],"tindex":"3e9fc098-4336-11e5-9fd5-538ba4f60478","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.LinkedHashTreeMap:771","type":"CtIfImpl","sourcecode":"if (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> == (com.google.gson.internal.LinkedHashTreeMap.Node<K, V>)) {\n    throw new java.util.NoSuchElementException();\n} "},"variableMap":{"e":"header","header":"header"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedHashTreeMap:111","type":"CtForImpl","sourcecode":"for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> ; com.google.gson.internal.LinkedHashTreeMap.Node<K, V> != com.google.gson.internal.LinkedHashTreeMap.Node<K, V> ; ) {\n    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n    com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n}"},"status":-1},{"failures":[],"tindex":"3e9fc099-4336-11e5-9fd5-99d536de07b5","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonWriter:347","type":"CtInvocationImpl","sourcecode":"com.google.gson.stream.JsonWriter.newline()"},"variableMap":{"this":"jsonWriter"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.Gson:652","type":"CtInvocationImpl","sourcecode":"com.google.gson.stream.JsonWriter.setSerializeNulls(boolean)"},"status":-2},{"failures":[],"tindex":"3e9fc09a-4336-11e5-9fd5-2decdca67b66","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:733","type":"CtIfImpl","sourcecode":"if (int == (com.google.gson.stream.JsonReader.int)) {\n    int = com.google.gson.stream.JsonReader.int;\n} else if ((int == (com.google.gson.stream.JsonReader.int)) || (int == (com.google.gson.stream.JsonReader.int))) {\n    int = com.google.gson.stream.JsonReader.int;\n} "},"status":-1},{"failures":[],"tindex":"3e9fe7ab-4336-11e5-9fd5-9797aeef6b85","series":0,"name":"add","transplant":{"position":"com.google.gson.internal.LinkedHashTreeMap:680","type":"CtAssignmentImpl","sourcecode":"int = int - int"},"variableMap":{"targetSize":"com.google.gson.stream.JsonReader.PEEKED_NONE","treeCapacity":"com.google.gson.stream.JsonReader.PEEKED_NONE","leavesToSkip":"com.google.gson.stream.JsonReader.PEEKED_NONE"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:931","type":"CtAssignmentImpl","sourcecode":"int = com.google.gson.stream.JsonReader.int"},"status":-2},{"failures":[],"tindex":"3e9fe7ac-4336-11e5-9fd5-1f880f7596bd","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonReader:1234","type":"CtDoImpl","sourcecode":"do {\n    int int = int;\n    if (int == (com.google.gson.stream.JsonReader.int)) {\n        int = com.google.gson.stream.JsonReader.doPeek();\n    } \n    if (int == (com.google.gson.stream.JsonReader.int)) {\n        com.google.gson.stream.JsonReader.push(com.google.gson.stream.JsonScope.int);\n        int++;\n    } else if (int == (com.google.gson.stream.JsonReader.int)) {\n        com.google.gson.stream.JsonReader.push(com.google.gson.stream.JsonScope.int);\n        int++;\n    } else if (int == (com.google.gson.stream.JsonReader.int)) {\n        (int)--;\n        int--;\n    } else if (int == (com.google.gson.stream.JsonReader.int)) {\n        (int)--;\n        int--;\n    } else if ((int == (com.google.gson.stream.JsonReader.int)) || (int == (com.google.gson.stream.JsonReader.int))) {\n        com.google.gson.stream.JsonReader.skipUnquotedValue();\n    } else if ((int == (com.google.gson.stream.JsonReader.int)) || (int == (com.google.gson.stream.JsonReader.int))) {\n        com.google.gson.stream.JsonReader.skipQuotedValue('\\'');\n    } else if ((int == (com.google.gson.stream.JsonReader.int)) || (int == (com.google.gson.stream.JsonReader.int))) {\n        com.google.gson.stream.JsonReader.skipQuotedValue('\\\"');\n    } else if (int == (com.google.gson.stream.JsonReader.int)) {\n        int += int;\n    } \n    int = com.google.gson.stream.JsonReader.int;\n} while (int != 0 )"},"variableMap":{"com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"i","peeked":"pos","com.google.gson.stream.JsonScope.EMPTY_OBJECT":"pos","com.google.gson.stream.JsonReader.PEEKED_END_ARRAY":"pos","count":"i","this":"this","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED":"i","com.google.gson.stream.JsonReader.PEEKED_BEGIN_ARRAY":"i","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED_NAME":"pos","com.google.gson.stream.JsonReader.PEEKED_BEGIN_OBJECT":"i","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"pos","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED_NAME":"pos","com.google.gson.stream.JsonReader.PEEKED_NONE":"i","stackSize":"pos","com.google.gson.stream.JsonReader.PEEKED_END_OBJECT":"pos","pos":"pos","com.google.gson.stream.JsonScope.EMPTY_ARRAY":"pos","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"pos","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED_NAME":"i","peekedNumberLength":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1047","type":"CtSwitchImpl","sourcecode":"switch (char[][((int) + int)]) {\n    case '/' :\n    case '\\\\' :\n    case ';' :\n    case '#' :\n    case '=' :\n        com.google.gson.stream.JsonReader.checkLenient();\n    case '{' :\n    case '}' :\n    case '[' :\n    case ']' :\n    case ':' :\n    case ',' :\n    case ' ' :\n    case '\\t' :\n    case '\\f' :\n    case '\\r' :\n    case '\\n' :\n        break findNonLiteralCharacter;\n}"},"status":-2},{"failures":[],"tindex":"3e9fe7ad-4336-11e5-9fd5-6fb095f9f9b3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.$Gson$Types:186","type":"CtReturnImpl","sourcecode":"return com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.GenericArrayType.getGenericComponentType(), java.lang.reflect.GenericArrayType.getGenericComponentType())"},"status":-2},{"failures":[],"tindex":"3e9fe7ae-4336-11e5-9fd5-4bfb44b70e76","series":0,"name":"add","transplant":{"position":"com.google.gson.stream.JsonReader:616","type":"CtAssignmentImpl","sourcecode":"java.lang.String = \"TRUE\""},"variableMap":{"keywordUpper":"result"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:832","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.Long.toString(long)"},"status":-1},{"failures":[],"tindex":"3e9fe7af-4336-11e5-9fd5-ab6a6660b344","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.LinkedTreeMap:123","type":"CtLocalVariableImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>"},"variableMap":{"root":"right"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedTreeMap:375","type":"CtLocalVariableImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V>"},"status":-2},{"failures":[],"tindex":"3ea05ce0-4336-11e5-9fd5-bb9b1f4d64a2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.$Gson$Types:133","type":"CtLocalVariableImpl","sourcecode":"java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType()"},"status":-2},{"failures":[],"tindex":"3ea05ce1-4336-11e5-9fd5-0326fa164403","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:718","type":"CtBreakImpl","sourcecode":"break charactersOfNumber"},"status":-1}],"header":{"groupId":"com.google.code.gson","transformationCount":20,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
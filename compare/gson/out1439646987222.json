{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"6c4991e5-4355-11e5-87ff-395e750f3914","series":0,"name":"add","transplant":{"position":"com.google.gson.internal.$Gson$Types:100","type":"CtReturnImpl","sourcecode":"return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(java.lang.reflect.ParameterizedType.getOwnerType() , java.lang.reflect.ParameterizedType.getRawType() , java.lang.reflect.ParameterizedType.getActualTypeArguments())"},"variableMap":{"p":"type"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtIfImpl","sourcecode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(java.lang.reflect.ParameterizedType.getOwnerType() , java.lang.reflect.ParameterizedType.getRawType() , java.lang.reflect.ParameterizedType.getActualTypeArguments());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type));\n    return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(java.lang.reflect.GenericArrayType.getGenericComponentType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.WildcardType) {\n    java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(java.lang.reflect.Type));\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(java.lang.reflect.WildcardType.getUpperBounds() , java.lang.reflect.WildcardType.getLowerBounds());\n} else {\n    return java.lang.reflect.Type;\n}"},"status":-2},{"failures":[],"tindex":"6c49b8f6-4355-11e5-87ff-1b1c87aa5744","series":0,"name":"replace","transplant":{"position":"com.google.gson.JsonElement:64","type":"CtReturnImpl","sourcecode":"return (this) instanceof com.google.gson.JsonPrimitive"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1311","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[],"tindex":"6c49e007-4355-11e5-87ff-a1695274bfa8","series":0,"name":"add","transplant":{"position":"com.google.gson.stream.JsonReader:853","type":"CtLocalVariableImpl","sourcecode":"int int = int"},"variableMap":{"peeked":"height"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedTreeMap:321","type":"CtLocalVariableImpl","sourcecode":"int int = com.google.gson.internal.LinkedTreeMap.Node<K, V> != null ? com.google.gson.internal.LinkedTreeMap.Node<K, V>.int : 0"},"status":-2},{"failures":[],"tindex":"6c49e008-4355-11e5-87ff-d3ada9aea5b1","series":0,"name":"add","transplant":{"position":"com.google.gson.stream.JsonReader:326","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"variableMap":{"lenient":"serializeNulls"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.GsonBuilder:157","type":"CtAssignmentImpl","sourcecode":"this.boolean = true"},"status":0},{"failures":[],"tindex":"6c49e009-4355-11e5-87ff-4b9a92e54f29","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonReader:1301","type":"CtOperatorAssignmentImpl","sourcecode":"int += int"},"variableMap":{"total":"p","limit":"p"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1116","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-1},{"failures":[],"tindex":"6c4af17a-4355-11e5-87ff-7552c18c6254","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonReader:574","type":"CtIfImpl","sourcecode":"if ((int) == 1) {\n    com.google.gson.stream.JsonReader.checkLenient();\n} "},"variableMap":{"stackSize":"pos","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:529","type":"CtIfImpl","sourcecode":"if ((((int) < (int)) || com.google.gson.stream.JsonReader.(fillBuffer(1))) && ((char[][int]) == '>')) {\n    (int)++;\n} "},"status":-1},{"failures":[],"tindex":"6c4b188b-4355-11e5-87ff-f16e96f3b995","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.LinkedTreeMap:145","type":"CtIfImpl","sourcecode":"if (com.google.gson.internal.LinkedTreeMap.Node<K, V> == null) {\n    break;\n} "},"variableMap":{"child":"parent"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedTreeMap:409","type":"CtIfImpl","sourcecode":"if (com.google.gson.internal.LinkedTreeMap.Node<K, V> != null) {\n    com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n} "},"status":-2},{"failures":[],"tindex":"6c4b188c-4355-11e5-87ff-e1c79dbada85","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.bind.JsonTreeReader:148","type":"CtReturnImpl","sourcecode":"return ((java.lang.String)(java.util.Map.Entry<?, ?>.getKey()))"},"status":-2},{"failures":[],"tindex":"6c4b3f9d-4355-11e5-87ff-9394e914b2cb","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.LinkedHashTreeMap:822","type":"CtInvocationImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.bind.JsonTreeReader:153","type":"CtIfImpl","sourcecode":"if ((com.google.gson.stream.JsonToken != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) && (com.google.gson.stream.JsonToken != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n    throw new java.lang.IllegalStateException((((\"Expected \" + (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) + \" but was \") + com.google.gson.stream.JsonToken));\n} "},"status":-2},{"failures":[],"tindex":"6c4b66ae-4355-11e5-87ff-1d071a2c2420","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.bind.JsonTreeReader:199","type":"CtReturnImpl","sourcecode":"return int"},"variableMap":{"result":"com.google.gson.stream.JsonReader.PEEKED_NONE"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:725","type":"CtIfImpl","sourcecode":"if (int == (com.google.gson.stream.JsonReader.int)) {\n    if (long == 0) {\n        return com.google.gson.stream.JsonReader.int;\n    } \n    long long = (long * 10) - (char - '0');\n    boolean &= (long > (com.google.gson.stream.JsonReader.long)) || ((long == (com.google.gson.stream.JsonReader.long)) && (long < long));\n    long = long;\n} else if (int == (com.google.gson.stream.JsonReader.int)) {\n    int = com.google.gson.stream.JsonReader.int;\n} else if ((int == (com.google.gson.stream.JsonReader.int)) || (int == (com.google.gson.stream.JsonReader.int))) {\n    int = com.google.gson.stream.JsonReader.int;\n} "},"status":-1},{"failures":[],"tindex":"6c4b66af-4355-11e5-87ff-11f3397d6c34","series":0,"name":"add","transplant":{"position":"com.google.gson.stream.JsonReader:1417","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1410","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"6c4b66b0-4355-11e5-87ff-816c2ec51b40","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.$Gson$Preconditions:35","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.bind.JsonTreeReader:172","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((((\"Expected \" + (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) + \" but was \") + com.google.gson.stream.JsonToken))"},"status":-1},{"failures":[],"tindex":"6c4b66b1-4355-11e5-87ff-fd5cd4b94ed5","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtIfImpl","sourcecode":"if (java.lang.Class<?> == java.lang.Class<?>) {\n    return java.lang.Class<?>.getGenericSuperclass();\n} else if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.getGenericSupertype(java.lang.Class<?>.getGenericSuperclass(), java.lang.Class<?>, java.lang.Class<?>);\n} "},"variableMap":{"rawType":"rawType","toResolve":"rawType","this":"this","rawSupertype":"toResolve"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.$Gson$Types:237","type":"CtIfImpl","sourcecode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>[][int])) {\n    return com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.getGenericSupertype(java.lang.Class<?>.getGenericInterfaces()[int], java.lang.Class<?>[][int], java.lang.Class<?>);\n} "},"status":-1},{"failures":[],"tindex":"6c4b8dc2-4355-11e5-87ff-512b79927c81","series":0,"name":"replace","transplant":{"position":"com.google.gson.GsonBuilder:403","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"variableMap":{"dateStyle":"peeked","style":"peeked"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1261","type":"CtAssignmentImpl","sourcecode":"int = com.google.gson.stream.JsonReader.int"},"status":-2},{"failures":[],"tindex":"6c4b8dc3-4355-11e5-87ff-b5e528fd38f5","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.$Gson$Types:383","type":"CtReturnImpl","sourcecode":"return com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.subtypeOf(java.lang.reflect.Type)"},"variableMap":{"upperBound":"context","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtIfImpl","sourcecode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable) {\n    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolveTypeVariable(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == java.lang.reflect.TypeVariable<?>) {\n        return java.lang.reflect.Type;\n    } \n} else if ((java.lang.reflect.Type instanceof java.lang.Class) && (((java.lang.Class<?>)(java.lang.reflect.Type)).isArray())) {\n    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.lang.Class<?>.getComponentType();\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type);\n    return java.lang.reflect.Type == java.lang.reflect.Type ? java.lang.Class<?> : com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.arrayOf(java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.GenericArrayType.getGenericComponentType();\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type);\n    return java.lang.reflect.Type == java.lang.reflect.Type ? java.lang.reflect.GenericArrayType : com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.arrayOf(java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.ParameterizedType.getOwnerType();\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type);\n    boolean boolean = java.lang.reflect.Type != java.lang.reflect.Type;\n    java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    for (int int = 0, int int = java.lang.reflect.Type[].int ; int < int ; int++) {\n        java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type[][int]);\n        if (java.lang.reflect.Type != (java.lang.reflect.Type[][int])) {\n            if (!boolean) {\n                java.lang.reflect.Type[] = java.lang.reflect.Type[].clone();\n                boolean = true;\n            } \n            java.lang.reflect.Type[][int] = java.lang.reflect.Type;\n        } \n    }\n    return boolean ? com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.ParameterizedType.getRawType(), java.lang.reflect.Type[]) : java.lang.reflect.ParameterizedType;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.WildcardType) {\n    java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(java.lang.reflect.Type));\n    java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.WildcardType.getLowerBounds();\n    java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.WildcardType.getUpperBounds();\n    if ((java.lang.reflect.Type[].int) == 1) {\n        java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type[][0]);\n        if (java.lang.reflect.Type != (java.lang.reflect.Type[][0])) {\n            return com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.supertypeOf(java.lang.reflect.Type);\n        } \n    } else if ((java.lang.reflect.Type[].int) == 1) {\n        java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type[][0]);\n        if (java.lang.reflect.Type != (java.lang.reflect.Type[][0])) {\n            return com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.subtypeOf(java.lang.reflect.Type);\n        } \n    } \n    return java.lang.reflect.WildcardType;\n} else {\n    return java.lang.reflect.Type;\n}"},"status":-2},{"failures":[],"tindex":"6c4b8dc4-4355-11e5-87ff-7113b34a836d","series":0,"name":"add","transplant":{"position":"com.google.gson.internal.bind.TypeAdapters:119","type":"CtUnaryOperatorImpl","sourcecode":"++int"},"variableMap":{"i":"p"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1398","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":0},{"failures":[],"tindex":"6c4b8dc5-4355-11e5-87ff-b759e31aa22b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.bind.JsonTreeReader:174","type":"CtLocalVariableImpl","sourcecode":"double double = com.google.gson.internal.bind.JsonTreeReader.((com.google.gson.JsonPrimitive)(peekStack())).getAsDouble()"},"status":-2},{"failures":[],"tindex":"6c4bb4d6-4355-11e5-87ff-a39acb5570bf","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.$Gson$Types:372","type":"CtLocalVariableImpl","sourcecode":"java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.WildcardType.getLowerBounds()"},"variableMap":{"original":"original"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.$Gson$Types:373","type":"CtLocalVariableImpl","sourcecode":"java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.WildcardType.getUpperBounds()"},"status":-1},{"failures":[],"tindex":"6c4bb4d7-4355-11e5-87ff-5732ab140d77","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.LinkedHashTreeMap:534","type":"CtLocalVariableImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = this"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedHashTreeMap:157","type":"CtLocalVariableImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = int < 0 ? com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>"},"status":-2},{"failures":[],"tindex":"6c4bb4d8-4355-11e5-87ff-efe47636ef41","series":0,"name":"add","transplant":{"position":"com.google.gson.stream.JsonReader:762","type":"CtInvocationImpl","sourcecode":"com.google.gson.stream.JsonReader.checkLenient()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:586","type":"CtIfImpl","sourcecode":"if ((int) == 1) {\n    com.google.gson.stream.JsonReader.checkLenient();\n} "},"status":-1}],"header":{"groupId":"com.google.code.gson","transformationCount":20,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
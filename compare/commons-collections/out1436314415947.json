{"failureDictionary":{"org.apache.commons.collections4.map.SingletonMapTest.testValuesRemoveChangesMap":16,"org.apache.commons.collections4.list.CursorableLinkedListTest.testEqualsAndHashCode":76,"org.apache.commons.collections4.list.CursorableLinkedListTest.testRemoveLast":116,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionRemove":152,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListGetByIndex":123,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListListIteratorByIndex":38,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorNextIndexFirst":86,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSubList":106,"org.apache.commons.collections4.map.SingletonMapTest.testValuesIteratorRemoveChangesMap":17,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testRemoveNode":23,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListGetByIndexBoundsChecking2":124,"org.apache.commons.collections4.list.CursorableLinkedListTest.testFullListSerialization":138,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListListIteratorNextRemovePrevious":42,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextSetByIterator":103,"org.apache.commons.collections4.list.CursorableLinkedListTest.testRetainAll":73,"org.apache.commons.collections4.iterators.SingletonIterator2Test.testRemove":15,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextPreviousRemoveByIterator":94,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionSize":62,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextAddIndex1ByList":97,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListListIteratorByIndex":132,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionRemove":59,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionToString":49,"org.apache.commons.collections4.list.CursorableLinkedListTest.testObjectHashCodeEqualsContract":157,"org.apache.commons.collections4.iterators.SingletonListIteratorTest.testEmptyListIteratorIsIndeedEmpty":160,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListListIteratorNextRemoveNext":41,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionToArray2":48,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListListIteratorPreviousRemovePrevious":40,"org.apache.commons.collections4.list.CursorableLinkedListTest.testClear":77,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testEmptyListSerialization":44,"org.apache.commons.collections4.list.CursorableLinkedListTest.testAdd":68,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorAdd":83,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListSetByIndexBoundsChecking2":33,"org.apache.commons.collections4.list.CursorableLinkedListTest.testAddNodeAfter":117,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListEquals":27,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListSetByIndex":128,"org.apache.commons.collections4.CollectionUtilsTest.get":1,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextPreviousAddByIterator":99,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionAdd":144,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListListIteratorPreviousRemoveNext":39,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListHashCode":122,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListSetByIndexBoundsChecking2":127,"org.apache.commons.collections4.iterators.SingletonListIteratorTest.testEmptyIterator":162,"org.apache.commons.collections4.list.CursorableLinkedListTest.testIterator":70,"org.apache.commons.collections4.list.CursorableLinkedListTest.testRemoveAll":79,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSubListAddBegin":108,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListRemoveByIndex":36,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextAddByIterator":100,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListListIterator":131,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testObjectHashCodeEqualsSelfHashCode":65,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextPreviousSetByIterator":102,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextPreviousRemoveIndex1ByList":90,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionToString":142,"org.apache.commons.collections4.list.CursorableLinkedListTest.testLongSerialization":113,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionContains":54,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionIteratorRemove":58,"org.apache.commons.collections4.collection.IndexedCollectionTest.testSimpleSerialization":8,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListLastIndexOf":126,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListIteratorRemove":105,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testSerializeDeserializeThenCompare":11,"org.apache.commons.collections4.map.MultiValueMapTest.testSimpleSerialization":5,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListIteratorSet":69,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEmptyMapCompatibility":9,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListIndexOf":31,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextRemoveByListSetByIterator":101,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextRemoveIndex1ByList":91,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSubListAddMiddle":109,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListGetByIndex":29,"org.apache.commons.collections4.list.CursorableLinkedListTest.testGet":72,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListSetByIndex":34,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorSet":81,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorNextIndexMid":85,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListRemoveByIndex":130,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionToArray2":141,"org.apache.commons.collections4.collection.IndexedCollectionTest.testSerializeDeserializeThenCompare":7,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testObjectHashCodeEqualsContract":64,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListRemoveByIndexBoundsChecking2":129,"org.apache.commons.collections4.TransformerUtilsTest.testFactoryTransformer":18,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSerializeDeserializeThenCompare":143,"org.apache.commons.collections4.ListUtilsTest.testIntersectListWithSelf":169,"org.apache.commons.collections4.CollectionUtilsTest.get1":2,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSerialization":111,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListListIteratorNextRemovePrevious":136,"org.apache.commons.collections4.list.CursorableLinkedListTest.testEmptyListSerialization":137,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionContainsAll":148,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorRemove":82,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSet":67,"org.apache.commons.collections4.list.CursorableLinkedListTest.testObjectHashCodeEqualsSelfHashCode":158,"org.apache.commons.collections4.map.MultiValueMapTest.testPutAll_Map2":166,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testSerializeDeserializeThenCompare":50,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListEquals":121,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListHashCode":28,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextAddIndex1ByList":98,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testFullMapCompatibility":10,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorNextIndexAddAfter":89,"org.apache.commons.collections4.map.MultiValueMapTest.testPutAll_Map1":165,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionContainsAll":55,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextRemoveByIterator":95,"org.apache.commons.collections4.list.CursorableLinkedListTest.testGetNode":119,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionRemoveAll":153,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListListIteratorPreviousRemoveNext":133,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListIndexOf":125,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionRetainAll":61,"org.apache.commons.collections4.map.MultiValueMapTest.testContainsValue":164,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testSimpleSerialization":66,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionClear":146,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed1":12,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed2":13,"org.apache.commons.collections4.CollectionUtilsTest.getFromEnumeration":0,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed3":14,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextNextRemoveIndex1ByList":93,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSerializationWithOpenCursor":112,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorConcurrentModification":84,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListIteratorAdd":114,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListAddByIndex":120,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testAddNodeAfter":22,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListRemoveByIndexBoundsChecking2":35,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListListIterator":37,"org.apache.commons.collections4.iterators.SingletonListIteratorTest.testRemoveThenSet":161,"org.apache.commons.collections4.ListUtilsTest.testIntersectNonEmptySubset":168,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSubListRemove":110,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSubListAddEnd":107,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionClear":53,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionIsEmpty":56,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionSize":155,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testFullListSerialization":45,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorNextIndexAddBefore":87,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListIteratorAdd":43,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionContains":147,"org.apache.commons.collections4.CollectionUtilsTest.getFromPrimativeArray":3,"org.apache.commons.collections4.CollectionUtilsTest.getFromObject":4,"org.apache.commons.collections4.list.CursorableLinkedListTest.testRemoveNode":118,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionRetainAll":154,"org.apache.commons.collections4.map.MultiValueMapTest.testSerializeDeserializeThenCompare":6,"org.apache.commons.collections4.list.CursorableLinkedListTest.testRemoveFirst":115,"org.apache.commons.collections4.list.CursorableLinkedListTest.testRemoveByIndex":74,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testRemoveLast":21,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSimpleSerialization":159,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionAdd":51,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorNavigation":80,"org.apache.commons.collections4.iterators.SingletonListIteratorTest.testRemove":163,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionRemoveAll":60,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListListIteratorNextRemoveNext":135,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionToArray":156,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionIterator":57,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListAddByIndex":26,"org.apache.commons.collections4.list.CursorableLinkedListTest.testEmptyListCompatibility":139,"org.apache.commons.collections4.list.CursorableLinkedListTest.testFullListCompatibility":140,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionIteratorRemove":151,"org.apache.commons.collections4.list.CursorableLinkedListTest.testRemove":71,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextRemoveIndex1ByList":92,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testShrinkCache":19,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionIterator":150,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListListIteratorPreviousRemovePrevious":134,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testGetNode":24,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListIteratorNavigation":104,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testEmptyListCompatibility":46,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListLastIndexOf":32,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextPreviousAddIndex1ByList":96,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListGetByIndexBoundsChecking2":30,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionToArray":63,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListIteratorSet":25,"org.apache.commons.collections4.list.CursorableLinkedListTest.testContainsAll":78,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testRemoveFirst":20,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionAddAll":145,"org.apache.commons.collections4.list.CursorableLinkedListTest.testIsEmpty":75,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionAddAll":52,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testFullListCompatibility":47,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionIsEmpty":149,"org.apache.commons.collections4.MapUtilsTest.testPopulateMultiMap":167,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorNextIndexAddNext":88},"transformations":[{"failures":[0,1,2,3,4],"tindex":"2d01c427-2506-11e5-9371-4b021ef994fb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.CollectionUtils:1260","type":"CtReturnImpl","sourcecode":"return ((java.lang.Object[])(java.lang.Object))[int]"},"variableMap":{"i":"i","object":"object"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.CollectionUtils:1271","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof java.util.Collection<?>) {\n    final java.util.Iterator<?> java.util.Iterator<?> = ((java.util.Collection<?>)(java.lang.Object)).iterator();\n    return org.apache.commons.collections4.CollectionUtils.org.apache.commons.collections4.CollectionUtils.get(java.util.Iterator<?>, int);\n} else if (java.lang.Object instanceof java.util.Enumeration<?>) {\n    final java.util.Enumeration<?> java.util.Enumeration<?> = ((java.util.Enumeration<?>)(java.lang.Object));\n    while (java.util.Enumeration<?>.hasMoreElements()) {\n        int--;\n        if (int == (-1)) {\n            return java.util.Enumeration<?>.nextElement();\n        } else {\n            java.util.Enumeration<?>.nextElement();\n        }\n    }\n    throw new java.lang.IndexOutOfBoundsException((\"Entry does not exist: \" + int));\n} else if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException(\"Unsupported object type: null\");\n} else {\n    try {\n        return java.lang.reflect.Array.get(java.lang.Object, int);\n    } catch (final java.lang.IllegalArgumentException ex) {\n        throw new java.lang.IllegalArgumentException((\"Unsupported object type: \" + (java.lang.Object.getClass().getName())));\n    }\n}"},"status":-1},{"failures":[],"tindex":"2d021248-2506-11e5-9371-fbf65a339616","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:140","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.MultiKeyMap:678","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"2d021249-2506-11e5-9371-cd094a0aa0cb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:611","type":"CtIfImpl","sourcecode":"if ((int) >= (int)) {\n    final int int = (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[].int) * 2;\n    if (int <= (org.apache.commons.collections4.map.AbstractHashedMap.int)) {\n        org.apache.commons.collections4.map.AbstractHashedMap<K, V>.ensureCapacity(int);\n    } \n} "},"status":0},{"failures":[],"tindex":"2d02124a-2506-11e5-9371-77ecc9ab77cd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1045","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)"},"status":0},{"failures":[5,6,7,8],"tindex":"2d02124b-2506-11e5-9371-85429e2f76b8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.MultiValueMap:502","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.map.MultiValueMap.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.MultiValueMap:162","type":"CtInvocationImpl","sourcecode":"java.io.ObjectOutputStream.defaultWriteObject()"},"status":-1},{"failures":[9,10,11],"tindex":"2d02395c-2506-11e5-9371-d55102d77192","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.ReferenceIdentityMap:237","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.map.AbstractReferenceMap<K, V>.doReadObject(java.io.ObjectInputStream)"},"status":-1},{"failures":[],"tindex":"2d02395d-2506-11e5-9371-b90ee586bcc1","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.map.MultiKeyMap:142","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>"},"variableMap":{"next":"entry","entry":"previous"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.MultiKeyMap:343","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>"},"status":0},{"failures":[],"tindex":"2d02395e-2506-11e5-9371-494868ec4c85","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:417","type":"CtAssignmentImpl","sourcecode":"java.util.Set<java.util.Map.Entry<K, V>> = new org.apache.commons.collections4.bidimap.TreeBidiMap.EntryView()"},"variableMap":{"entrySet":"entrySet"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:306","type":"CtAssignmentImpl","sourcecode":"java.util.Set<java.util.Map.Entry<K, V>> = new org.apache.commons.collections4.bidimap.AbstractDualBidiMap.EntrySet<K, V>(this)"},"status":-2},{"failures":[12,13,14],"tindex":"2d02395f-2506-11e5-9371-9b936f7051bb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:220","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.updateCurrentIterator()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:147","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(E))"},"status":-1},{"failures":[15,16,17],"tindex":"2d026070-2506-11e5-9371-a5995a488544","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.list.SetUniqueList:73","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"List must not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.SingletonIterator:112","type":"CtThrowImpl","sourcecode":"throw new java.lang.UnsupportedOperationException()"},"status":-1},{"failures":[],"tindex":"2d026071-2506-11e5-9371-8d884da7cb0e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:376","type":"CtReturnImpl","sourcecode":"return java.util.Set<K>"},"status":-2},{"failures":[18],"tindex":"2d026072-2506-11e5-9371-d949a6b54063","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.iterators.ReverseListIterator:159","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"Cannot add to list until next() or previous() called\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.functors.FactoryTransformer:49","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Factory must not be null\")"},"status":-1},{"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159],"tindex":"2d028783-2506-11e5-9371-f7c6f0d5b364","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:1055","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int >= int)) {\n    throw new java.lang.IndexOutOfBoundsException(((((\"Index \\'\" + int) + \"\\' out of bounds for size \\'\") + (int)) + \"\\'\"));\n} "},"variableMap":{"size":"size","index":"size","beyond":"size"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:542","type":"CtIfImpl","sourcecode":"if ((!boolean) && (int == (int))) {\n    throw new java.lang.IndexOutOfBoundsException((((\"Couldn\\'t get the node: \" + \"index (\") + int) + \") is the size of the list.\"));\n} "},"status":-1},{"failures":[160,161,162,163],"tindex":"2d028784-2506-11e5-9371-c996e263baa1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.comparators.ComparatorChain:239","type":"CtIfImpl","sourcecode":"if ((boolean) == true) {\n    throw new java.lang.UnsupportedOperationException(\"Comparator ordering cannot be changed after the first comparison is performed\");\n} "},"variableMap":{"isLocked":"nextCalled"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.SingletonListIterator:133","type":"CtIfImpl","sourcecode":"if ((!(boolean)) || (boolean)) {\n    throw new java.lang.IllegalStateException();\n} "},"status":-1},{"failures":[],"tindex":"2d028785-2506-11e5-9371-6991dd29f976","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:243","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[164,165,166,167],"tindex":"2d02ae96-2506-11e5-9371-b3a259aecc7d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.CollectionUtils:1394","type":"CtReturnImpl","sourcecode":"return (((java.util.Enumeration<?>)(java.lang.Object)).hasMoreElements()) == false"},"variableMap":{"object":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.MultiValueMap:239","type":"CtIfImpl","sourcecode":"if (((java.util.Collection<V>)(java.util.Map.Entry<K, java.lang.Object>.getValue())).contains(java.lang.Object)) {\n    return true;\n} "},"status":-1},{"failures":[],"tindex":"2d02ae97-2506-11e5-9371-bb6062048bfa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:599","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = null"},"variableMap":{"next":"next","entry":"entry"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:350","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>"},"status":-2},{"failures":[168,169],"tindex":"2d02ae98-2506-11e5-9371-29002ef612b6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.list.SetUniqueList:81","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.list.SetUniqueList<E>.addAll(java.util.List<E>)"},"variableMap":{"temp":"result","sl":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.ListUtils:103","type":"CtInvocationImpl","sourcecode":"java.util.List<E>.add(E)"},"status":-1},{"failures":[],"tindex":"2d02ae99-2506-11e5-9371-e5cebc931c93","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:154","type":"CtLocalVariableImpl","sourcecode":"final java.util.SortedMap<K, V> java.util.SortedMap<K, V> = ((java.util.SortedMap<K, V>)(java.util.Map<K, V>))"},"variableMap":{"normalMap":"normalMap"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:203","type":"CtLocalVariableImpl","sourcecode":"final java.util.SortedMap<K, V> java.util.SortedMap<K, V> = ((java.util.SortedMap<K, V>)(java.util.Map<K, V>)).headMap(K)"},"status":-2},{"failures":[],"tindex":"2d02d5aa-2506-11e5-9371-ffc5c6d834a0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.PredicateUtils:322","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.functors.AnyPredicate.anyPredicate(org.apache.commons.collections4.Predicate<? super T>[])"},"variableMap":{"predicates":"predicates"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.functors.AllPredicate:61","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.functors.FunctorUtils.org.apache.commons.collections4.functors.FunctorUtils.coerce(org.apache.commons.collections4.Predicate<? super T>[][0])"},"status":0}],"header":{"groupId":"org.apache.commons","transformationCount":20,"projectType":"maven","artifactId":"commons-collections4","generatorVersion":"1.0","version":"4.0"},"diffs":[{"transformation":"2d021249-2506-11e5-9371-cd094a0aa0cb","diffs":[{"branches":{"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).t3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e1","org.apache.commons.collections4.map.AbstractHashedMap_int_calculateThreshold(int,float).b","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e2","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l4","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l5","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).b"],"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).t3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e1","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e2","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l4","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l5","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).b"],"org.apache.commons.collections4.SplitMapUtilsTest.testWritableMap":["org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).t3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e1","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e2","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l4","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).b","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l5"],"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionAdd":["org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).t3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e1","org.apache.commons.collections4.map.AbstractHashedMap_int_calculateThreshold(int,float).b","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e2","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l4","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l5","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).b"],"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastKeySet":["org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).t3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e1","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e2","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l4","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).b","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l5"],"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutNullValue":["org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).t3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e1","org.apache.commons.collections4.map.AbstractHashedMap_int_calculateThreshold(int,float).b","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e2","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l4","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l5","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).b"],"org.apache.commons.collections4.set.MapBackedSet2Test.testSetHashCode":["org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).t3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e1","org.apache.commons.collections4.map.AbstractHashedMap_int_calculateThreshold(int,float).b","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e2","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l4","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).b","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l5"]},"type":"branch"},{"nodes":{"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.SplitMapUtilsTest.testWritableMap":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionAdd":["org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastKeySet":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutNullValue":["org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.set.MapBackedSet2Test.testSetHashCode":["org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"]},"edges":{"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int hashIndex(int,int)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionAdd":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int hashIndex(int,int)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutNullValue":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int hashIndex(int,int)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.map.LRUMapTest.testFailFastValues":["org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()"],"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPutAll":["org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()"],"org.apache.commons.collections4.map.Flat3MapTest.testSerialisation4":["org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()"],"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int hashIndex(int,int)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.MapUtilsTest.testIterableMap":["org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()"],"org.apache.commons.collections4.map.HashedMapTest.testMapPutAll":["org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.map.TransformedMapTest.testMapPutAll":["org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()"],"org.apache.commons.collections4.SplitMapUtilsTest.testWritableMap":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int hashIndex(int,int)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastKeySet":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int hashIndex(int,int)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.set.MapBackedSet2Test.testSetHashCode":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int hashIndex(int,int)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"]},"type":"graph"},{"variables":{"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_last = newCurrent","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_hashIndex = i","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashIterator(org.apache.commons.collections4.map.AbstractHashedMap)_this.hashIndex = i","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> newCurrent = next","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.V getValue()_return ((V)(value))","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_int i = hashIndex","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.boolean hasNext()_return (next) != null","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.void remove()_if ((parent.modCount) != (expectedModCount)) {    throw new java.util.ConcurrentModificationException()","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.void remove()_expectedModCount = parent.modCount","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.K getKey()_return ((K)(key))","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> n = newCurrent.next","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.K getKey()_if ((key) == (org.apache.commons.collections4.map.AbstractHashedMap.NULL)) {    return null","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,java.lang.Object,V)_this.next = next","org.apache.commons.collections4.map.AbstractHashedMap.void removeMapping(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,org.apache.commons.collections4.map.AbstractHashedMap$HashEntry)_(modCount)++","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashIterator(org.apache.commons.collections4.map.AbstractHashedMap)_this.next = next","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_next = n"],"org.apache.commons.collections4.map.HashedMapTest.testMapPutAll":["org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_last = newCurrent","org.apache.commons.collections4.map.AbstractHashedMap.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry getEntry(java.lang.Object)_entry = entry.next","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> newCurrent = next","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_hashIndex = i","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashIterator(org.apache.commons.collections4.map.AbstractHashedMap)_this.hashIndex = i","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.V getValue()_return ((V)(value))","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)_final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> next = entry.next","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_int i = hashIndex","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.boolean hasNext()_return (next) != null","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_if ((parent.modCount) != (expectedModCount)) {    throw new java.util.ConcurrentModificationException()","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.K getKey()_return ((K)(key))","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> n = newCurrent.next","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.K getKey()_if ((key) == (org.apache.commons.collections4.map.AbstractHashedMap.NULL)) {    return null","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry currentEntry()_return last","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashIterator(org.apache.commons.collections4.map.AbstractHashedMap)_this.next = next","org.apache.commons.collections4.map.AbstractHashedMap.boolean containsKey(java.lang.Object)_entry = entry.next","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_next = n","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashIterator(org.apache.commons.collections4.map.AbstractHashedMap)_this.expectedModCount = parent.modCount"],"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_index = i","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_return previous","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,java.lang.Object,V)_this.hashCode = hashCode","org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef.org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef(int,T,java.lang.ref.ReferenceQueue)_this.hash = hash","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_int i = index","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_previous = entry","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_currentKey = nextKey","org.apache.commons.collections4.map.AbstractHashedMap.boolean containsValue(java.lang.Object)_entry = entry.next","org.apache.commons.collections4.map.AbstractHashedMap.void removeEntry(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,org.apache.commons.collections4.map.AbstractHashedMap$HashEntry)_data[hashIndex] = entry.next","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.void remove()_expectedModCount = parent.modCount","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V> e = entry","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry next()_return ((org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V>)(next))","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.void checkMod()_if ((parent.modCount) != (expectedModCount)) {    throw new java.util.ConcurrentModificationException()","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_nextKey = e.getKey()","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_nextValue = e.getValue()","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_entry = e","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_currentValue = nextValue"],"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastKeySet":["org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_index = i","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_return previous","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_int i = index","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_previous = entry","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_currentKey = nextKey","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator(org.apache.commons.collections4.map.AbstractReferenceMap)_expectedModCount = parent.modCount","org.apache.commons.collections4.map.AbstractHashedMap.void removeEntry(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,org.apache.commons.collections4.map.AbstractHashedMap$HashEntry)_data[hashIndex] = entry.next","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry next()_return ((org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V>)(next))","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.void checkMod()_if ((parent.modCount) != (expectedModCount)) {    throw new java.util.ConcurrentModificationException()","org.apache.commons.collections4.map.AbstractHashedMap.void clear()_(modCount)++","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_nextKey = e.getKey()","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_nextValue = e.getValue()","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_entry = e","org.apache.commons.collections4.map.AbstractHashedMap.void removeMapping(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,org.apache.commons.collections4.map.AbstractHashedMap$HashEntry)_(modCount)++","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_currentValue = nextValue","org.apache.commons.collections4.map.AbstractHashedMap.void clear()_int i = (data.length) - 1"],"org.apache.commons.collections4.set.MapBackedSet2Test.testSetHashCode":["org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator(org.apache.commons.collections4.map.AbstractLinkedMap)_this.expectedModCount = parent.modCount","org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry nextEntry()_if ((parent.modCount) != (expectedModCount)) {    throw new java.util.ConcurrentModificationException()"],"org.apache.commons.collections4.map.LRUMapTest.testFailFastValues":["org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry nextEntry()_if ((parent.modCount) != (expectedModCount)) {    throw new java.util.ConcurrentModificationException()"]},"type":"variable"}]}]}
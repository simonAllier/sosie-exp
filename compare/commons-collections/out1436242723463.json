{"failureDictionary":{"org.apache.commons.collections4.map.StaticBucketMapTest.test_containsKey_nullMatchesIncorrectly":9,"org.apache.commons.collections4.IteratorUtilsTest.testToArray":5,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapPut":16,"org.apache.commons.collections4.map.StaticBucketMapTest.testEntrySetRemove3":19,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapContainsValue":13,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapContainsKey":12,"org.apache.commons.collections4.CollectionUtilsTest.testCollateIgnoreDuplicates":22,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapSize":11,"org.apache.commons.collections4.iterators.CollatingIteratorTest.testNullComparator":26,"org.apache.commons.collections4.map.MultiValueMapTest.testKeyedIterator":1,"org.apache.commons.collections4.TrieUtilsTest.testUnmodifiableTrie":20,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testQueueRemove":7,"org.apache.commons.collections4.iterators.CollatingIteratorTest.testIterateEvenOdd":24,"org.apache.commons.collections4.iterators.CollatingIteratorTest.testIterateFibEvenOdd":25,"org.apache.commons.collections4.CollectionUtilsTest.testCollate":0,"org.apache.commons.collections4.EnumerationUtilsTest.testToListWithHashtable":2,"org.apache.commons.collections4.iterators.CollatingIteratorTest.testIterateEvenEven":28,"org.apache.commons.collections4.IteratorUtilsTest.testToArray2":4,"org.apache.commons.collections4.iterators.CollatingIteratorTest.testRemove":32,"org.apache.commons.collections4.iterators.CollatingIteratorTest.testIterateEven":27,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet4":6,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapRemove":18,"org.apache.commons.collections4.iterators.CollatingIteratorTest.testFullIterator":31,"org.apache.commons.collections4.iterators.CollatingIteratorTest.testIterateOddEven":23,"org.apache.commons.collections4.iterators.CollatingIteratorTest.testRemoveFromDouble":29,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapToString":15,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapIsEmpty":10,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testDecorateFactory":21,"org.apache.commons.collections4.iterators.CollatingIteratorTest.testRemoveFromSingle":30,"org.apache.commons.collections4.IteratorUtilsTest.testToList":3,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapPutAll":17,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapEquals":14,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testQueueElement":8},"transformations":[{"failures":[0,1,2,3,4,5],"tindex":"40f689a7-245f-11e5-a442-d93d9e0673c1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.IteratorUtils:956","type":"CtIfImpl","sourcecode":"if (java.util.Iterator<?> == null) {\n    throw new java.lang.NullPointerException(\"Iterator must not be null\");\n} "},"variableMap":{"iterator":"iterator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.IteratorUtils:1025","type":"CtWhileImpl","sourcecode":"while (java.util.Iterator<? extends E>.hasNext()) {\n    java.util.List<E>.add(java.util.Iterator<? extends E>.next());\n}"},"status":-1},{"failures":[],"tindex":"40f6d7c8-245f-11e5-a442-e19d4108fb6d","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.comparators.ComparatorChain:269","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"variableMap":{"isLocked":"changed"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bag.CollectionSortedBag:131","type":"CtAssignmentImpl","sourcecode":"boolean = boolean || boolean"},"status":-2},{"failures":[],"tindex":"40f6d7c9-245f-11e5-a442-998d5f07a37a","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1364","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"left=\").append(\"null\")"},"variableMap":{"buffer":"buf"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.Flat3Map:1235","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(',')"},"status":0},{"failures":[6],"tindex":"40f6d7ca-245f-11e5-a442-133dedaeedbf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.AbstractMapDecorator:73","type":"CtReturnImpl","sourcecode":"return java.util.Map<K, V>"},"variableMap":{"map":"map"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.DefaultedMap:131","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.collections4.map.DefaultedMap<K, V>(java.util.Map<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends V>)"},"status":-1},{"failures":[],"tindex":"40f6fedb-245f-11e5-a442-1b25d6e4e367","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.FixedSizeMap:147","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.set.UnmodifiableSet.unmodifiableSet(java.util.Set<java.util.Map.Entry<K, V>>)"},"variableMap":{"set":"set"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.UnmodifiableOrderedMap:138","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.map.UnmodifiableEntrySet.unmodifiableEntrySet(java.util.Set<java.util.Map.Entry<K, V>>)"},"status":0},{"failures":[],"tindex":"40f6fedc-245f-11e5-a442-019cf8216216","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.list.PredicatedList:95","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.list.PredicatedList<E>.decorated().get(int)"},"variableMap":{"this":"this","index":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.list.PredicatedList:107","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.list.PredicatedList<E>.decorated().remove(int)"},"status":-2},{"failures":[7,8],"tindex":"40f6fedd-245f-11e5-a442-2b23ed418745","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.queue.CircularFifoQueue:289","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException(\"queue is empty\")"},"status":-1},{"failures":[],"tindex":"40f6fede-245f-11e5-a442-8300de745bca","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.MultiKeyMap:339","type":"CtLocalVariableImpl","sourcecode":"final V V = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.getValue()"},"status":-2},{"failures":[9,10,11,12,13,14,15,16,17,18,19],"tindex":"40f725ef-245f-11e5-a442-e3a438a61526","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.StaticBucketMap:590","type":"CtIfImpl","sourcecode":"if ((java.lang.Object instanceof java.util.Map.Entry<?, ?>) == false) {\n    return false;\n} "},"variableMap":{"obj":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.StaticBucketMap:230","type":"CtIfImpl","sourcecode":"if (((org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>.K) == java.lang.Object) || (((org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>.K) != null) && (org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>.K.equals(java.lang.Object)))) {\n    return true;\n} "},"status":-1},{"failures":[],"tindex":"40f725f0-245f-11e5-a442-2d9c167f66f8","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.map.ListOrderedMap:267","type":"CtLocalVariableImpl","sourcecode":"V V = null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.SingletonMap:156","type":"CtLocalVariableImpl","sourcecode":"final V V = this.V"},"status":-2},{"failures":[],"tindex":"40f725f1-245f-11e5-a442-e5eb0e910219","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1039","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.rotateRight(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)"},"variableMap":{"siblingNode":"node","this":"this","dataElement":"org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.KEY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:490","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> == null) {\n    final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = new org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>(K , V);\n    org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>;\n    org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>;\n    org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.grow();\n} else {\n    while (true) {\n        final int int = org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.compare(K, org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getKey());\n        if (int == 0) {\n            throw new java.lang.IllegalArgumentException(((\"Cannot store a duplicate key (\\\"\" + K) + \"\\\") in this Map\"));\n        } else if (int < 0) {\n            if ((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) != null) {\n                org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n            } else {\n                final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = new org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>(K , V);\n                org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>);\n                org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.setLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.setParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.doRedBlackInsert(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.grow();\n                break;\n            }\n        } else {\n            if ((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getRight(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) != null) {\n                org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getRight(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n            } else {\n                final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = new org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>(K , V);\n                org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>);\n                org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.setRight(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.setParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.doRedBlackInsert(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n                org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.grow();\n                break;\n            }\n        }\n    }\n}"},"status":-2},{"failures":[],"tindex":"40f77412-245f-11e5-a442-eba26f26042a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:1163","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.collections4.map.AbstractHashedMap<K, V>.int) != (int)) {\n    throw new java.util.ConcurrentModificationException();\n} "},"variableMap":{"parent":"this","modCount":"newCapacity","expectedModCount":"newCapacity"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:614","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.map.AbstractHashedMap<K, V>.ensureCapacity(int)"},"status":0},{"failures":[20,21],"tindex":"40f77413-245f-11e5-a442-694cb71b4e58","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.trie.UnmodifiableTrie:58","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.Trie<K, V>"},"status":-1},{"failures":[],"tindex":"40f79b24-245f-11e5-a442-ffafa0a2231c","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.keyvalue.MultiKey:279","type":"CtReturnImpl","sourcecode":"return this"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.CollectionUtils:1255","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof java.util.Map<?, ?>) {\n    final java.util.Map<?, ?> java.util.Map<?, ?> = ((java.util.Map<?, ?>)(java.lang.Object));\n    final java.util.Iterator<?> java.util.Iterator<?> = java.util.Map<?, ?>.entrySet().iterator();\n    return org.apache.commons.collections4.CollectionUtils.org.apache.commons.collections4.CollectionUtils.get(java.util.Iterator<?>, int);\n} else if (java.lang.Object instanceof java.lang.Object[]) {\n    return ((java.lang.Object[])(java.lang.Object))[int];\n} else if (java.lang.Object instanceof java.util.Iterator<?>) {\n    final java.util.Iterator<?> java.util.Iterator<?> = ((java.util.Iterator<?>)(java.lang.Object));\n    while (java.util.Iterator<?>.hasNext()) {\n        int--;\n        if (int == (-1)) {\n            return java.util.Iterator<?>.next();\n        } \n        java.util.Iterator<?>.next();\n    }\n    throw new java.lang.IndexOutOfBoundsException((\"Entry does not exist: \" + int));\n} else if (java.lang.Object instanceof java.util.Collection<?>) {\n    final java.util.Iterator<?> java.util.Iterator<?> = ((java.util.Collection<?>)(java.lang.Object)).iterator();\n    return org.apache.commons.collections4.CollectionUtils.org.apache.commons.collections4.CollectionUtils.get(java.util.Iterator<?>, int);\n} else if (java.lang.Object instanceof java.util.Enumeration<?>) {\n    final java.util.Enumeration<?> java.util.Enumeration<?> = ((java.util.Enumeration<?>)(java.lang.Object));\n    while (java.util.Enumeration<?>.hasMoreElements()) {\n        int--;\n        if (int == (-1)) {\n            return java.util.Enumeration<?>.nextElement();\n        } else {\n            java.util.Enumeration<?>.nextElement();\n        }\n    }\n    throw new java.lang.IndexOutOfBoundsException((\"Entry does not exist: \" + int));\n} else if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException(\"Unsupported object type: null\");\n} else {\n    try {\n        return java.lang.reflect.Array.get(java.lang.Object, int);\n    } catch (final java.lang.IllegalArgumentException ex) {\n        throw new java.lang.IllegalArgumentException((\"Unsupported object type: \" + (java.lang.Object.getClass().getName())));\n    }\n}"},"status":-2},{"failures":[],"tindex":"40f79b25-245f-11e5-a442-5775bd188c79","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.list.NodeCachingLinkedList:186","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.collections4.list.AbstractLinkedList.Node<E> org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = org.apache.commons.collections4.list.NodeCachingLinkedList<E>.getNodeFromCache()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:482","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.collections4.list.AbstractLinkedList.Node<E> org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = org.apache.commons.collections4.list.AbstractLinkedList<E>.createNode(E)"},"status":-2},{"failures":[],"tindex":"40f7c236-245f-11e5-a442-c371bf67dd38","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.keyvalue.DefaultKeyValue:112","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.collections4.keyvalue.DefaultMapEntry<K, V>(this)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:54","type":"CtReturnImpl","sourcecode":"return java.util.Map.Entry<K, V>"},"status":-2},{"failures":[],"tindex":"40f7c237-245f-11e5-a442-89cb45a54294","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:759","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.collections4.map.AbstractHashedMap.HashMapIterator<K, V>(this)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.UnmodifiableMapIterator:53","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.MapIterator<K, V>"},"status":-2},{"failures":[],"tindex":"40f7c238-245f-11e5-a442-578e634ad511","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1978","type":"CtLocalVariableImpl","sourcecode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:241","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.getEntry(java.lang.Object)"},"status":-2},{"failures":[],"tindex":"40f7e949-245f-11e5-a442-377d33c1244b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.collection.TransformedCollection:94","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.collection.TransformedCollection<E>"},"variableMap":{"decorated":"coll"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.collection.TransformedCollection:63","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.collections4.collection.TransformedCollection<E>(java.util.Collection<E> , org.apache.commons.collections4.Transformer<? super E, ? extends E>)"},"status":-2},{"failures":[22,0,23,24,25,26,27,28,29,30,31,32],"tindex":"40f7e94a-245f-11e5-a442-eb1ae7113549","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:1055","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int >= int)) {\n    throw new java.lang.IndexOutOfBoundsException(((((\"Index \\'\" + int) + \"\\' out of bounds for size \\'\") + (int)) + \"\\'\"));\n} "},"variableMap":{"size":"leastIndex","index":"i","beyond":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.CollatingIterator:359","type":"CtIfImpl","sourcecode":"if (java.util.BitSet.get(int)) {\n    if (int == (-1)) {\n        int = int;\n        E = java.util.ArrayList<E>.get(int);\n    } else {\n        final E E = java.util.ArrayList<E>.get(int);\n        if ((java.util.Comparator<? super E>) == null) {\n            throw new java.lang.NullPointerException(\"You must invoke setComparator() to set a comparator first.\");\n        } \n        if ((java.util.Comparator<? super E>.compare(E, E)) < 0) {\n            E = E;\n            int = int;\n        } \n    }\n} "},"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":20,"projectType":"maven","artifactId":"commons-collections4","generatorVersion":"1.0","version":"4.0"},"diffs":[{"transformation":"40f77412-245f-11e5-a442-eba26f26042a","diffs":[{"branches":{"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).t3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e1","org.apache.commons.collections4.map.AbstractHashedMap_int_calculateThreshold(int,float).b","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e2","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l4","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).b","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l5"],"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).t3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e1","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e2","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l4","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).b","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l5"],"org.apache.commons.collections4.SplitMapUtilsTest.testWritableMap":["org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).t3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e1","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e2","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l4","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l5","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).b"],"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionAdd":["org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).t3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e1","org.apache.commons.collections4.map.AbstractHashedMap_int_calculateThreshold(int,float).b","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e2","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l4","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).b","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l5"],"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastKeySet":["org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).t3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e1","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e2","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l4","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l5","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).b"],"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutNullValue":["org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).t3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e1","org.apache.commons.collections4.map.AbstractHashedMap_int_calculateThreshold(int,float).b","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e2","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l4","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l5","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).b"],"org.apache.commons.collections4.set.MapBackedSet2Test.testSetHashCode":["org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).t3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e1","org.apache.commons.collections4.map.AbstractHashedMap_int_calculateThreshold(int,float).b","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e2","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l4","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).b","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l5"]},"type":"branch"},{"nodes":{"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.SplitMapUtilsTest.testWritableMap":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionAdd":["org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastKeySet":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutNullValue":["org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.set.MapBackedSet2Test.testSetHashCode":["org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"]},"edges":{"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int hashIndex(int,int)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()":["org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int hashIndex(int,int)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.SplitMapUtilsTest.testWritableMap":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int hashIndex(int,int)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionAdd":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int hashIndex(int,int)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastKeySet":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int hashIndex(int,int)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutNullValue":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int hashIndex(int,int)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.set.MapBackedSet2Test.testSetHashCode":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int hashIndex(int,int)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"]},"graph":"branch"},{"variables":{"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_last = newCurrent","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> newCurrent = next","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_hashIndex = i","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashIterator(org.apache.commons.collections4.map.AbstractHashedMap)_this.hashIndex = i","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.V getValue()_return ((V)(value))","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_int i = hashIndex","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.boolean hasNext()_return (next) != null","org.apache.commons.collections4.map.AbstractHashedMap.void removeEntry(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,org.apache.commons.collections4.map.AbstractHashedMap$HashEntry)_data[hashIndex] = entry.next","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_if ((parent.modCount) != (expectedModCount)) {    throw new java.util.ConcurrentModificationException()","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.void remove()_if ((parent.modCount) != (expectedModCount)) {    throw new java.util.ConcurrentModificationException()","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.void remove()_expectedModCount = parent.modCount","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.K getKey()_return ((K)(key))","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> n = newCurrent.next","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.K getKey()_if ((key) == (org.apache.commons.collections4.map.AbstractHashedMap.NULL)) {    return null","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashIterator(org.apache.commons.collections4.map.AbstractHashedMap)_int i = data.length","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashIterator(org.apache.commons.collections4.map.AbstractHashedMap)_this.next = next","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_next = n","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashIterator(org.apache.commons.collections4.map.AbstractHashedMap)_this.expectedModCount = parent.modCount"],"org.apache.commons.collections4.map.HashedMapTest.testMapPutAll":["org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_last = newCurrent","org.apache.commons.collections4.map.AbstractHashedMap.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry getEntry(java.lang.Object)_entry = entry.next","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> newCurrent = next","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_hashIndex = i","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.V getValue()_return ((V)(value))","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashIterator(org.apache.commons.collections4.map.AbstractHashedMap)_this.hashIndex = i","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)_final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> next = entry.next","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_int i = hashIndex","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.boolean hasNext()_return (next) != null","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)_entry.next = newEntries[index]","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_if ((parent.modCount) != (expectedModCount)) {    throw new java.util.ConcurrentModificationException()","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.K getKey()_return ((K)(key))","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> n = newCurrent.next","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.K getKey()_if ((key) == (org.apache.commons.collections4.map.AbstractHashedMap.NULL)) {    return null","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry currentEntry()_return last","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashIterator(org.apache.commons.collections4.map.AbstractHashedMap)_int i = data.length","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashIterator(org.apache.commons.collections4.map.AbstractHashedMap)_this.next = next","org.apache.commons.collections4.map.AbstractHashedMap.boolean containsKey(java.lang.Object)_entry = entry.next","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_next = n","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashIterator(org.apache.commons.collections4.map.AbstractHashedMap)_this.expectedModCount = parent.modCount"],"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_index = i","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_return previous","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,java.lang.Object,V)_this.hashCode = hashCode","org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef.org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef(int,T,java.lang.ref.ReferenceQueue)_this.hash = hash","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_int i = index","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_previous = entry","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_currentKey = nextKey","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.void remove()_expectedModCount = parent.modCount","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V> e = entry","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.void checkMod()_if ((parent.modCount) != (expectedModCount)) {    throw new java.util.ConcurrentModificationException()","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_nextKey = e.getKey()","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_nextValue = e.getValue()","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_entry = e","org.apache.commons.collections4.map.AbstractHashedMap.void removeMapping(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,org.apache.commons.collections4.map.AbstractHashedMap$HashEntry)_(modCount)++","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_currentValue = nextValue","org.apache.commons.collections4.map.AbstractHashedMap.V put(K,V)_entry = entry.next"],"org.apache.commons.collections4.SplitMapUtilsTest.testWritableMap":["org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator(org.apache.commons.collections4.map.AbstractLinkedMap)_this.expectedModCount = parent.modCount","org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry nextEntry()_if ((parent.modCount) != (expectedModCount)) {    throw new java.util.ConcurrentModificationException()"],"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastKeySet":["org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_index = i","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_return previous","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_int i = index","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_previous = entry","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_currentKey = nextKey","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator(org.apache.commons.collections4.map.AbstractReferenceMap)_expectedModCount = parent.modCount","org.apache.commons.collections4.map.AbstractHashedMap.void removeEntry(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,org.apache.commons.collections4.map.AbstractHashedMap$HashEntry)_data[hashIndex] = entry.next","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry next()_return ((org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V>)(next))","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.void checkMod()_if ((parent.modCount) != (expectedModCount)) {    throw new java.util.ConcurrentModificationException()","org.apache.commons.collections4.map.AbstractHashedMap.void clear()_(modCount)++","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_nextKey = e.getKey()","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_nextValue = e.getValue()","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_entry = e","org.apache.commons.collections4.map.AbstractHashedMap.void removeMapping(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,org.apache.commons.collections4.map.AbstractHashedMap$HashEntry)_(modCount)++","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_currentValue = nextValue","org.apache.commons.collections4.map.AbstractHashedMap.void clear()_int i = (data.length) - 1"]},"type":"variable"}]},{"transformation":"40f6fedb-245f-11e5-a442-1b25d6e4e367","diffs":[{"branches":{"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRemoveAll":["org.apache.commons.collections4.map.UnmodifiableEntrySet_<K,V>_java.util.Set_unmodifiableEntrySet(java.util.Set).e1","org.apache.commons.collections4.map.UnmodifiableEntrySet_org.apache.commons.collections4.map.UnmodifiableEntrySet(java.util.Set).b","org.apache.commons.collections4.map.UnmodifiableEntrySet_<K,V>_java.util.Set_unmodifiableEntrySet(java.util.Set).b"],"org.apache.commons.collections4.map.SingletonMapTest.testMapHashCode":["org.apache.commons.collections4.map.UnmodifiableEntrySet_<K,V>_java.util.Set_unmodifiableEntrySet(java.util.Set).e1","org.apache.commons.collections4.map.UnmodifiableEntrySet_org.apache.commons.collections4.map.UnmodifiableEntrySet(java.util.Set).b","org.apache.commons.collections4.map.UnmodifiableEntrySet_<K,V>_java.util.Set_unmodifiableEntrySet(java.util.Set).b"]},"type":"branch"},{"nodes":{"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRemoveAll":["org.apache.commons.collections4.map.UnmodifiableEntrySet.org.apache.commons.collections4.map.UnmodifiableEntrySet(java.util.Set)","org.apache.commons.collections4.map.UnmodifiableEntrySet.<K,V> java.util.Set unmodifiableEntrySet(java.util.Set)"],"org.apache.commons.collections4.map.SingletonMapTest.testMapHashCode":["org.apache.commons.collections4.map.UnmodifiableEntrySet.org.apache.commons.collections4.map.UnmodifiableEntrySet(java.util.Set)","org.apache.commons.collections4.map.UnmodifiableEntrySet.<K,V> java.util.Set unmodifiableEntrySet(java.util.Set)"]},"edges":{"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRemoveAll":["org.apache.commons.collections4.map.UnmodifiableEntrySet.<K,V> java.util.Set unmodifiableEntrySet(java.util.Set) -> org.apache.commons.collections4.set.AbstractSetDecorator.org.apache.commons.collections4.set.AbstractSetDecorator(java.util.Set)","org.apache.commons.collections4.map.UnmodifiableEntrySet.<K,V> java.util.Set unmodifiableEntrySet(java.util.Set) -> org.apache.commons.collections4.collection.AbstractCollectionDecorator.org.apache.commons.collections4.collection.AbstractCollectionDecorator(java.util.Collection)","org.apache.commons.collections4.map.UnmodifiableEntrySet.<K,V> java.util.Set unmodifiableEntrySet(java.util.Set) -> org.apache.commons.collections4.map.UnmodifiableEntrySet.org.apache.commons.collections4.map.UnmodifiableEntrySet(java.util.Set)"],"org.apache.commons.collections4.map.SingletonMapTest.testMapHashCode":["org.apache.commons.collections4.map.UnmodifiableEntrySet.<K,V> java.util.Set unmodifiableEntrySet(java.util.Set) -> org.apache.commons.collections4.set.AbstractSetDecorator.org.apache.commons.collections4.set.AbstractSetDecorator(java.util.Set)","org.apache.commons.collections4.map.UnmodifiableEntrySet.<K,V> java.util.Set unmodifiableEntrySet(java.util.Set) -> org.apache.commons.collections4.collection.AbstractCollectionDecorator.org.apache.commons.collections4.collection.AbstractCollectionDecorator(java.util.Collection)","org.apache.commons.collections4.map.UnmodifiableEntrySet.<K,V> java.util.Set unmodifiableEntrySet(java.util.Set) -> org.apache.commons.collections4.map.UnmodifiableEntrySet.org.apache.commons.collections4.map.UnmodifiableEntrySet(java.util.Set)"],"org.apache.commons.collections4.map.UnmodifiableOrderedMap.java.util.Set entrySet()":["org.apache.commons.collections4.map.UnmodifiableOrderedMap.java.util.Set entrySet() -> org.apache.commons.collections4.map.UnmodifiableEntrySet.<K,V> java.util.Set unmodifiableEntrySet(java.util.Set)","org.apache.commons.collections4.map.UnmodifiableOrderedMap.java.util.Set entrySet() -> org.apache.commons.collections4.set.UnmodifiableSet.<E> java.util.Set unmodifiableSet(java.util.Set)"]},"graph":"branch"}]}]}
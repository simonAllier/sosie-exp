{"failureDictionary":{"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemoveChangesMap":119,"org.apache.commons.collections4.iterators.ObjectArrayListIteratorTest.testRemove":1,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapRemove":167,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionContains":17,"org.apache.commons.collections4.collection.CompositeCollectionTest.testUnsupportedAdd":16,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapSize":130,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapHashCode":161,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapToString":162,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testValuesRemoveChangesMap":171,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastEntrySet":22,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetRemoveChangesMap":179,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsKey":157,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testFailFastEntrySet":100,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiRemoveByEntrySet":126,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionContainsAll":63,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetClearChangesMap":35,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetRemoveAll":42,"org.apache.commons.collections4.set.CompositeSetTest.testFailedCollisionResolution":60,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemoveAll":120,"org.apache.commons.collections4.map.CompositeMapTest.testMapClear":44,"org.apache.commons.collections4.set.TransformedSetTest.testTransformedSet_decorateTransform":94,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionAddAll":72,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemoveChangesMap":29,"org.apache.commons.collections4.set.CompositeSetTest.testSimpleSerialization":83,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddRemove":87,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionIterator":19,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemoveAll":37,"org.apache.commons.collections4.map.CompositeMapTest.testMapIsEmpty":7,"org.apache.commons.collections4.set.CompositeSetTest.testRemoveComposited":56,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionRetainAll":73,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testBidiMapIteratorSet":153,"org.apache.commons.collections4.collection.CompositeCollectionTest.testIsEmpty":13,"org.apache.commons.collections4.iterators.ObjectArrayIteratorTest.testRemove":2,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionSize":65,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapGet":107,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsKey":132,"org.apache.commons.collections4.map.CompositeMapTest.testObjectHashCodeEqualsContract":52,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapPutNullValue":165,"org.apache.commons.collections4.collection.CompositeCollectionTest.testUnsupportedRemove":12,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionToArray2":15,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapPutAll":166,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetRemoveAll":180,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove1":32,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove3":34,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove2":33,"org.apache.commons.collections4.map.CompositeMapTest.testMapPutNullValue":40,"org.apache.commons.collections4.set.CompositeSetTest.testObjectEqualsSelf":79,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testKeySetRetainAll":177,"org.apache.commons.collections4.set.CompositeSetTest.testObjectHashCodeEqualsSelfHashCode":85,"org.apache.commons.collections4.list.SetUniqueListTest.testSubListIsUnmodifiable":91,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRetainAll":121,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.initializationError":123,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionRemove":75,"org.apache.commons.collections4.map.CompositeMapTest.testObjectEqualsSelf":51,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsValue":158,"org.apache.commons.collections4.set.CompositeSetTest.testRemoveUnderlying":55,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNextChangesPrevious":96,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetRemoveChangesMap":41,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapIsEmpty":101,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetClearChangesMap":140,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiModifyEntrySet":125,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionAdd":74,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapGet":160,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemoveAll":148,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapToString":136,"org.apache.commons.collections4.map.CompositeMapTest.testObjectHashCodeEqualsSelfHashCode":53,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapEquals":159,"org.apache.commons.collections4.map.CompositeMapTest.testMapPutNullKey":43,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsKey":104,"org.apache.commons.collections4.keyvalue.DefaultKeyValueTest.testToMapEntry":92,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPut":137,"org.apache.commons.collections4.map.CompositeMapTest.testValuesRemoveAll":46,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testValuesRetainAll":173,"org.apache.commons.collections4.map.CompositeMapTest.testMapRemove":10,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapClear":103,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsValue":105,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetIteratorRemoveChangesMap":38,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPut":109,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemove1":144,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionIterator":78,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemove2":145,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemove3":146,"org.apache.commons.collections4.set.CompositeSetTest.testAddComposited":59,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapEquals":134,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetIteratorRemoveChangesMap":182,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapIsEmpty":154,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testValuesIteratorRemoveChangesMap":174,"org.apache.commons.collections4.map.CompositeMapTest.testMapContainsValue":11,"org.apache.commons.collections4.map.CompositeMapTest.testMapPutAll":8,"org.apache.commons.collections4.map.CompositeMapTest.testSerializeDeserializeThenCompare":54,"org.apache.commons.collections4.iterators.ObjectArrayListIterator2Test.testRemove":0,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiModifyEntrySet":97,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapGet":135,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testFailFastEntrySet":128,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains3":27,"org.apache.commons.collections4.map.ListOrderedMapTest.testPutAllWithIndexBug441":20,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetContains1":113,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetContains2":114,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetContains3":115,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapSize":155,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapIsEmpty":129,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapToString":108,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionToArray2":64,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapPutNullKey":164,"org.apache.commons.collections4.map.CompositeMapTest.testMapSize":4,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains1":25,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testKeySetRemoveChangesMap":175,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains2":26,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionIteratorRemove":67,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapClear":131,"org.apache.commons.collections4.map.ListOrderedMapTest.testPut_intObjectObject":21,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapEquals":106,"org.apache.commons.collections4.set.CompositeSetTest.testCanonicalFullCollectionExists":80,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFailingHasNextBug":95,"org.apache.commons.collections4.map.CompositeMapTest.testMapToString":5,"org.apache.commons.collections4.map.CompositeMapTest.testValuesClearChangesMap":50,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastKeySet":23,"org.apache.commons.collections4.map.CompositeMapTest.testMapHashCode":31,"org.apache.commons.collections4.map.CompositeMapTest.testMapContainsKey":3,"org.apache.commons.collections4.map.CompositeMapTest.testMapGet":48,"org.apache.commons.collections4.map.CompositeMapTest.testMapEquals":6,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionContains":69,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetContains1":168,"org.apache.commons.collections4.set.ListOrderedSet2Test.testListAddRemove":88,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapRemove":139,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRetainAll":149,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetContains2":169,"org.apache.commons.collections4.list.PredicatedListTest.testIllegalAddAll":183,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiRemoveByEntrySet":98,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionContainsAll":14,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetClearChangesMap":39,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPutAll":138,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testKeySetIteratorRemoveChangesMap":178,"org.apache.commons.collections4.list.SetUniqueListTest.testCollections307":90,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapSize":102,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetContains3":170,"org.apache.commons.collections4.set.CompositeSetTest.testEqualsNull":81,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testBidiKeySetValuesOrder":152,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRetainAll":45,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetIteratorRemoveChangesMap":47,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionClear":71,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.initializationError":151,"org.apache.commons.collections4.list.UnmodifiableListTest.testDecorateFactory":89,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetRetainAll":181,"org.apache.commons.collections4.map.CompositeMapTest.testValuesIteratorRemoveChangesMap":28,"org.apache.commons.collections4.set.CompositeSetTest.testSetEquals":61,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionRemoveAll":68,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastValues":24,"org.apache.commons.collections4.set.CompositeSetTest.testSetHashCode":62,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPutAll":110,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemoveChangesMap":147,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionIsEmpty":70,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetContains2":142,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.initializationError":124,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetContains3":143,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetContains1":141,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testValuesRemoveAll":172,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetRetainAll":49,"org.apache.commons.collections4.set.CompositeSetTest.testSerializeDeserializeThenCompare":76,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapRemove":111,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiMapIteratorSet":99,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionIsEmpty":18,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapClear":156,"org.apache.commons.collections4.set.CompositeSetTest.testContains":57,"org.apache.commons.collections4.set.CompositeSetTest.testCanonicalEmptyCollectionExists":82,"org.apache.commons.collections4.map.CompositeMapTest.testMapPut":9,"org.apache.commons.collections4.set.CompositeSetTest.testAddCompositedCollision":58,"org.apache.commons.collections4.map.CompositeMapTest.testValuesRemoveChangesMap":36,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemove1":116,"org.apache.commons.collections4.set.TransformedSortedSetTest.testTransformedSet_decorateTransform":93,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemove2":117,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemove3":118,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetClearChangesMap":112,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapPut":163,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiMapIteratorSet":127,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testKeySetRemoveAll":176,"org.apache.commons.collections4.set.CompositeSetTest.testObjectHashCodeEqualsContract":84,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsValue":133,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionToArray":77,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionToString":66,"org.apache.commons.collections4.map.CompositeMapTest.testValuesRetainAll":30,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddReplacing":86,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetIteratorRemoveChangesMap":150,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetIteratorRemoveChangesMap":122},"transformations":[{"failures":[],"tindex":"1fad565f-24fc-11e5-85c8-8ba40cd092f7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1434","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:192","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(E)"},"status":-2},{"failures":[],"tindex":"1fada480-24fc-11e5-85c8-538d275faa3e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2054","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.isEmpty()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.comparators.ReverseComparator:114","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"1fada481-24fc-11e5-85c8-a5eee4f184a0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.CompositeMap:250","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.collections4.set.CompositeSet<java.util.Map.Entry<K, V>> org.apache.commons.collections4.set.CompositeSet<java.util.Map.Entry<K, V>> = new org.apache.commons.collections4.set.CompositeSet<java.util.Map.Entry<K, V>>()"},"status":-2},{"failures":[0,1,2],"tindex":"1fada482-24fc-11e5-85c8-71357f4c0e2f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator:44","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"MapIterator must not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.ObjectArrayIterator:134","type":"CtThrowImpl","sourcecode":"throw new java.lang.UnsupportedOperationException(\"remove() method is not supported for an ObjectArrayIterator\")"},"status":-1},{"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"tindex":"1fada483-24fc-11e5-85c8-b1df6aeb36db","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.functors.AllPredicate:112","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.collection.CompositeCollection:118","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,3,42,4,43,44,5,6,45,7,46,8,47,48,9,10,11,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91],"tindex":"1fadcb94-24fc-11e5-85c8-a32112ef5b22","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.ListUtils:401","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.list.UnmodifiableList.unmodifiableList(java.util.List<? extends E>)"},"variableMap":{"list":"list"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.list.UnmodifiableList:60","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.collections4.list.UnmodifiableList<E>(java.util.List<? extends E>)"},"status":-1},{"failures":[92],"tindex":"1fadcb95-24fc-11e5-85c8-e183cfd1ebd3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.list.TreeList:724","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.keyvalue.DefaultKeyValue:151","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.keyvalue.AbstractKeyValue<K, V>.getValue().hashCode()"},"status":-1},{"failures":[93,94],"tindex":"1fadf2a6-24fc-11e5-85c8-61e1e6227154","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.set.ListOrderedSet:77","type":"CtIfImpl","sourcecode":"if (java.util.Set<E> == null) {\n    throw new java.lang.IllegalArgumentException(\"Set must not be null\");\n} "},"variableMap":{"set":"set"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.set.TransformedSet:81","type":"CtInvocationImpl","sourcecode":"java.util.Set<E>.clear()"},"status":-1},{"failures":[],"tindex":"1fadf2a7-24fc-11e5-85c8-693dd7598817","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.SetUtils:124","type":"CtReturnImpl","sourcecode":"return java.util.Collection<?>.containsAll(java.util.Collection<?>)"},"variableMap":{"set2":"coll","set1":"coll"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:144","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().retainAll(java.util.Collection<?>)"},"status":-2},{"failures":[95,96],"tindex":"1fadf2a8-24fc-11e5-85c8-b563c28bb8e9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.iterators.FilterListIterator:130","type":"CtIfImpl","sourcecode":"if (!org.apache.commons.collections4.iterators.FilterListIterator<E>.(setNextObject())) {\n    throw new java.util.NoSuchElementException();\n} "},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.FilterListIterator:225","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.iterators.FilterListIterator<E>.clearNextObject()"},"status":-1},{"failures":[97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182],"tindex":"1fadf2a9-24fc-11e5-85c8-77312ad4dd8d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:305","type":"CtIfImpl","sourcecode":"if ((java.util.Set<java.util.Map.Entry<K, V>>) == null) {\n    java.util.Set<java.util.Map.Entry<K, V>> = new org.apache.commons.collections4.bidimap.AbstractDualBidiMap.EntrySet<K, V>(this);\n} "},"status":-1},{"failures":[],"tindex":"1fae19ba-24fc-11e5-85c8-47a928692c88","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:2310","type":"CtIfImpl","sourcecode":"if ((int) != 0) {\n    throw new java.util.NoSuchElementException();\n} "},"variableMap":{"hit":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.collection.CompositeCollection:188","type":"CtIfImpl","sourcecode":"if ((T[].int) >= int) {\n    java.lang.Object[] = T[];\n} else {\n    java.lang.Object[] = ((java.lang.Object[])(java.lang.reflect.Array.newInstance(T[].getClass().getComponentType(), int)));\n}"},"status":-2},{"failures":[],"tindex":"1fae19bb-24fc-11e5-85c8-65218a2d5790","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.ListUtils:658","type":"CtIfImpl","sourcecode":"if (int <= 0) {\n    throw new java.lang.IllegalArgumentException(\"Size must be greater than 0\");\n} "},"variableMap":{"size":"org.apache.commons.collections4.map.AbstractHashedMap.MAXIMUM_CAPACITY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:611","type":"CtIfImpl","sourcecode":"if ((int) >= (int)) {\n    final int int = (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[].int) * 2;\n    if (int <= (org.apache.commons.collections4.map.AbstractHashedMap.int)) {\n        org.apache.commons.collections4.map.AbstractHashedMap<K, V>.ensureCapacity(int);\n    } \n} "},"status":0},{"failures":[],"tindex":"1fae19bc-24fc-11e5-85c8-b127ec48c29c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2162","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.doHashCode(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)"},"variableMap":{"org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.VALUE":"object"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bag.SynchronizedBag:108","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.bag.SynchronizedBag<E>.getBag().getCount(java.lang.Object)"},"status":-2},{"failures":[],"tindex":"1fae40cd-24fc-11e5-85c8-372f7ed06baa","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:706","type":"CtWhileImpl","sourcecode":"while (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> == (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) {\n    if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> == org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) {\n        return null;\n    } \n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n}"},"variableMap":{"parent":"entry","current":"entry","tree":"entry","right":"entry"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:226","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>"},"status":-2},{"failures":[],"tindex":"1fae40ce-24fc-11e5-85c8-af0442a57fe3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bag.TransformedBag:120","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.bag.TransformedBag<E>.getBag().remove(java.lang.Object, int)"},"status":-2},{"failures":[183],"tindex":"1fae40cf-24fc-11e5-85c8-a19882dae02a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.list.PredicatedList:119","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.collection.PredicatedCollection<E>.validate(E)"},"status":-1},{"failures":[],"tindex":"1fae40d0-24fc-11e5-85c8-43b06695b30c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.LRUMap:416","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.map.LRUMap<K, V>.doWriteObject(java.io.ObjectOutputStream)"},"variableMap":{"this":"this","out":"out"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.LinkedMap:124","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.map.AbstractHashedMap<K, V>.doWriteObject(java.io.ObjectOutputStream)"},"status":0},{"failures":[],"tindex":"1fae67e1-24fc-11e5-85c8-195b7ffa1a01","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.map.MultiValueMap:502","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.map.MultiValueMap.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.CollectionUtils:752","type":"CtInvocationImpl","sourcecode":"java.util.Iterator<T>.remove()"},"status":-2},{"failures":[],"tindex":"1fae67e2-24fc-11e5-85c8-533d9fcafdc8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.ListUtils:94","type":"CtIfImpl","sourcecode":"if ((java.util.List<? extends E>.size()) > (java.util.List<? extends E>.size())) {\n    java.util.List<? extends E> = java.util.List<? extends E>;\n    java.util.List<? extends E> = java.util.List<? extends E>;\n} "},"variableMap":{"list1":"coll","larger":"coll","smaller":"coll","list2":"coll"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.collection.PredicatedCollection:132","type":"CtForEachImpl","sourcecode":"for (final E E : java.util.Collection<? extends E>) {\n    org.apache.commons.collections4.collection.PredicatedCollection<E>.validate(E);\n}"},"status":-2}],"header":{"groupId":"org.apache.commons","transformationCount":20,"projectType":"maven","artifactId":"commons-collections4","generatorVersion":"1.0","version":"4.0"},"diffs":[{"transformation":"1fae19bb-24fc-11e5-85c8-65218a2d5790","diffs":[{"branches":{"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).t3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e1","org.apache.commons.collections4.map.AbstractHashedMap_int_calculateThreshold(int,float).b","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e2","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l4","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l5","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).b"],"org.apache.commons.collections4.SplitMapUtilsTest.testWritableMap":["org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).t3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e1","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e2","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l4","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l5","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).b"],"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).t3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e1","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e2","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l4","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).b","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l5"],"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionAdd":["org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).t3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e1","org.apache.commons.collections4.map.AbstractHashedMap_int_calculateThreshold(int,float).b","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e2","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l4","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l5","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).b"],"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastKeySet":["org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).t3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e1","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e2","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l4","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).b","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l5"],"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutNullValue":["org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).t3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e1","org.apache.commons.collections4.map.AbstractHashedMap_int_calculateThreshold(int,float).b","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e2","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l4","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l5","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).b"],"org.apache.commons.collections4.set.MapBackedSet2Test.testSetHashCode":["org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).t3","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e1","org.apache.commons.collections4.map.AbstractHashedMap_int_calculateThreshold(int,float).b","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).e2","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l4","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).l5","org.apache.commons.collections4.map.AbstractHashedMap_void_ensureCapacity(int).b"]},"type":"branch"},{"nodes":{"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.SplitMapUtilsTest.testWritableMap":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionAdd":["org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastKeySet":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutNullValue":["org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.set.MapBackedSet2Test.testSetHashCode":["org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"]},"edges":{"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int hashIndex(int,int)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionAdd":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int hashIndex(int,int)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutNullValue":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int hashIndex(int,int)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.map.LRUMapTest.testFailFastValues":["org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()"],"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPutAll":["org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()"],"org.apache.commons.collections4.map.Flat3MapTest.testSerialisation4":["org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()"],"org.apache.commons.collections4.MapUtilsTest.testIterableMap":["org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()"],"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int hashIndex(int,int)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.map.HashedMapTest.testMapPutAll":["org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.map.TransformedMapTest.testMapPutAll":["org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()"],"org.apache.commons.collections4.SplitMapUtilsTest.testWritableMap":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int hashIndex(int,int)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastKeySet":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int hashIndex(int,int)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"],"org.apache.commons.collections4.set.MapBackedSet2Test.testSetHashCode":["org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int calculateThreshold(int,float)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.int hashIndex(int,int)","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int) -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity()","org.apache.commons.collections4.map.AbstractHashedMap.void checkCapacity() -> org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)"]},"type":"graph"},{"variables":{"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_last = newCurrent","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_hashIndex = i","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashIterator(org.apache.commons.collections4.map.AbstractHashedMap)_this.hashIndex = i","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> newCurrent = next","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.V getValue()_return ((V)(value))","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_int i = hashIndex","org.apache.commons.collections4.map.AbstractHashedMap.boolean containsValue(java.lang.Object)_entry = entry.next","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.boolean hasNext()_return (next) != null","org.apache.commons.collections4.map.AbstractHashedMap.void removeEntry(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,org.apache.commons.collections4.map.AbstractHashedMap$HashEntry)_data[hashIndex] = entry.next","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_if ((parent.modCount) != (expectedModCount)) {    throw new java.util.ConcurrentModificationException()","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.void remove()_if ((parent.modCount) != (expectedModCount)) {    throw new java.util.ConcurrentModificationException()","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.void remove()_expectedModCount = parent.modCount","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.K getKey()_return ((K)(key))","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> n = newCurrent.next","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.K getKey()_if ((key) == (org.apache.commons.collections4.map.AbstractHashedMap.NULL)) {    return null","org.apache.commons.collections4.map.AbstractHashedMap.void removeMapping(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,org.apache.commons.collections4.map.AbstractHashedMap$HashEntry)_(modCount)++","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashIterator(org.apache.commons.collections4.map.AbstractHashedMap)_this.next = next","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_next = n","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashIterator(org.apache.commons.collections4.map.AbstractHashedMap)_this.expectedModCount = parent.modCount"],"org.apache.commons.collections4.map.HashedMapTest.testMapPutAll":["org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_last = newCurrent","org.apache.commons.collections4.map.AbstractHashedMap.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry getEntry(java.lang.Object)_entry = entry.next","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> newCurrent = next","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_hashIndex = i","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashIterator(org.apache.commons.collections4.map.AbstractHashedMap)_this.hashIndex = i","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.V getValue()_return ((V)(value))","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)_final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> next = entry.next","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_int i = hashIndex","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.boolean hasNext()_return (next) != null","org.apache.commons.collections4.map.AbstractHashedMap.void ensureCapacity(int)_entry.next = newEntries[index]","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_if ((parent.modCount) != (expectedModCount)) {    throw new java.util.ConcurrentModificationException()","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.K getKey()_return ((K)(key))","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> n = newCurrent.next","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.K getKey()_if ((key) == (org.apache.commons.collections4.map.AbstractHashedMap.NULL)) {    return null","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry currentEntry()_return last","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,java.lang.Object,V)_this.next = next","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashIterator(org.apache.commons.collections4.map.AbstractHashedMap)_int i = data.length","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashIterator(org.apache.commons.collections4.map.AbstractHashedMap)_this.next = next","org.apache.commons.collections4.map.AbstractHashedMap.boolean containsKey(java.lang.Object)_entry = entry.next","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry nextEntry()_next = n","org.apache.commons.collections4.map.AbstractHashedMap$HashIterator.org.apache.commons.collections4.map.AbstractHashedMap$HashIterator(org.apache.commons.collections4.map.AbstractHashedMap)_this.expectedModCount = parent.modCount"],"org.apache.commons.collections4.map.TransformedMapTest.testMapPutAll":["org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,java.lang.Object,V)_this.next = next"],"org.apache.commons.collections4.SplitMapUtilsTest.testWritableMap":["org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator(org.apache.commons.collections4.map.AbstractLinkedMap)_this.expectedModCount = parent.modCount","org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry nextEntry()_if ((parent.modCount) != (expectedModCount)) {    throw new java.util.ConcurrentModificationException()"],"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesIteratorRemoveChangesMap":["org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_index = i","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_return previous","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,java.lang.Object,V)_this.hashCode = hashCode","org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef.org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef(int,T,java.lang.ref.ReferenceQueue)_this.hash = hash","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_int i = index","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_previous = entry","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_currentKey = nextKey","org.apache.commons.collections4.map.AbstractHashedMap.void removeEntry(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,org.apache.commons.collections4.map.AbstractHashedMap$HashEntry)_data[hashIndex] = entry.next","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.void remove()_expectedModCount = parent.modCount","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry next()_return ((org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V>)(next))","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.void checkMod()_if ((parent.modCount) != (expectedModCount)) {    throw new java.util.ConcurrentModificationException()","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_nextKey = e.getKey()","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_nextValue = e.getValue()","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_entry = e","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_currentValue = nextValue"],"org.apache.commons.collections4.map.ReferenceMapTest.testFailFastKeySet":["org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_index = i","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_return previous","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_int i = index","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_previous = entry","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_currentKey = nextKey","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator(org.apache.commons.collections4.map.AbstractReferenceMap)_expectedModCount = parent.modCount","org.apache.commons.collections4.map.AbstractHashedMap.void removeEntry(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,org.apache.commons.collections4.map.AbstractHashedMap$HashEntry)_data[hashIndex] = entry.next","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry next()_return ((org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V>)(next))","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.void checkMod()_if ((parent.modCount) != (expectedModCount)) {    throw new java.util.ConcurrentModificationException()","org.apache.commons.collections4.map.AbstractHashedMap.void clear()_(modCount)++","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_nextKey = e.getKey()","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_nextValue = e.getValue()","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.boolean hasNext()_entry = e","org.apache.commons.collections4.map.AbstractHashedMap.void removeMapping(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,org.apache.commons.collections4.map.AbstractHashedMap$HashEntry)_(modCount)++","org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator.org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry nextEntry()_currentValue = nextValue","org.apache.commons.collections4.map.AbstractHashedMap.void clear()_int i = (data.length) - 1"],"org.apache.commons.collections4.set.MapBackedSet2Test.testSetHashCode":["org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator(org.apache.commons.collections4.map.AbstractLinkedMap)_this.expectedModCount = parent.modCount","org.apache.commons.collections4.map.AbstractHashedMap$HashEntry.org.apache.commons.collections4.map.AbstractHashedMap$HashEntry(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,java.lang.Object,V)_this.next = next","org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator.org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry nextEntry()_if ((parent.modCount) != (expectedModCount)) {    throw new java.util.ConcurrentModificationException()"]},"type":"variable"}]}]}
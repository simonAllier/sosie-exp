{"failureDictionary":{"org.apache.commons.collections4.list.CursorableLinkedListTest.testEqualsAndHashCode":51,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyContainsKey":12,"org.apache.commons.collections4.map.LinkedMapTest.testMapPut":70,"org.apache.commons.collections4.map.HashedMapTest.testInitialCapacityZero":7,"org.apache.commons.collections4.map.LRUMapTest.testMapEquals":108,"org.apache.commons.collections4.map.LRUMapTest.testFirstKey":98,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testPurgeValues":86,"org.apache.commons.collections4.map.LinkedMapTest.testReset":55,"org.apache.commons.collections4.map.LRUMapTest.testFailFastValues":103,"org.apache.commons.collections4.map.LRUMapTest.testMapContainsKey":106,"org.apache.commons.collections4.sequence.SequencesComparatorTest.testShadok":3,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemoveAll":80,"org.apache.commons.collections4.map.LRUMapTest.testMapHashCode":109,"org.apache.commons.collections4.sequence.SequencesComparatorTest.testLength":2,"org.apache.commons.collections4.map.LRUMapTest.testValuesIteratorRemoveChangesMap":120,"org.apache.commons.collections4.SplitMapUtilsTest.testWritableMap":123,"org.apache.commons.collections4.map.TransformedSortedMapTest.testFactory_decorateTransform":83,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionSize":37,"org.apache.commons.collections4.map.LRUMapTest.testAccessOrder":90,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionClear":26,"org.apache.commons.collections4.map.LRUMapTest.testInternalState_getEntry_int":93,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyPut":13,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionSize":20,"org.apache.commons.collections4.iterators.FilterIteratorTest.testSetIterator":50,"org.apache.commons.collections4.set.MapBackedSetTest.testSerializeDeserializeThenCompare":47,"org.apache.commons.collections4.sequence.SequencesComparatorTest.testExecution":0,"org.apache.commons.collections4.map.LRUMapTest.testFailFastKeySet":102,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListEquals":53,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRetainAll":81,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionContains":24,"org.apache.commons.collections4.map.LRUMapTest.testMapIsEmpty":104,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemove3":78,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionRemove":29,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionToString":38,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemove2":77,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemove1":76,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionClear":43,"org.apache.commons.collections4.map.LinkedMapTest.testMapPutAll":71,"org.apache.commons.collections4.map.LRUMapTest.testInternalState_Buckets":9,"org.apache.commons.collections4.map.LinkedMapTest.testMapToString":69,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionAddAll":27,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIteratorRemove":39,"org.apache.commons.collections4.map.LinkedMapTest.testPreviousKey":59,"org.apache.commons.collections4.map.LRUMapTest.testClone":87,"org.apache.commons.collections4.set.MapBackedSet2Test.testSetEquals":16,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIsEmpty":42,"org.apache.commons.collections4.map.LinkedMapTest.testValuesIteratorRemoveChangesMap":79,"org.apache.commons.collections4.map.LRUMapTest.testMapSize":105,"org.apache.commons.collections4.map.LinkedMapTest.testFirstKey":57,"org.apache.commons.collections4.map.LRUMapTest.testFailFastEntrySet":101,"org.apache.commons.collections4.map.LRUMapTest.testNextKey":99,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionToString":21,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRemove":46,"org.apache.commons.collections4.map.LinkedMapTest.testMapRemove":72,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionContains":41,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyGet":11,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionToArray2":19,"org.apache.commons.collections4.map.TransformedMapTest.testFactory_decorateTransform":121,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRetainAll":45,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListEquals":52,"org.apache.commons.collections4.set.MapBackedSetTest.testSetEquals":33,"org.apache.commons.collections4.map.LRUMapTest.testMapContainsValue":107,"org.apache.commons.collections4.map.HashedMapTest.testInternalState":8,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testInitialCapacityZero":10,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutAll":122,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIterator":49,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionContainsAll":35,"org.apache.commons.collections4.map.LinkedMapTest.testFailFastValues":62,"org.apache.commons.collections4.map.LRUMapTest.testSynchronizedRemoveFromEntrySet":95,"org.apache.commons.collections4.FactoryUtilsTest.testExceptionFactory":15,"org.apache.commons.collections4.set.MapBackedSetTest.testSetHashCode":34,"org.apache.commons.collections4.map.LinkedMapTest.testMapIsEmpty":63,"org.apache.commons.collections4.map.LRUMapTest.testMapPut":111,"org.apache.commons.collections4.map.LRUMapTest.testLRU":89,"org.apache.commons.collections4.map.LinkedMapTest.testMapEquals":67,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemove":14,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionRemoveAll":23,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPutAll":84,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetContains2":74,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetContains1":73,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetContains3":75,"org.apache.commons.collections4.map.LinkedMapTest.testFailFastEntrySet":60,"org.apache.commons.collections4.map.LRUMapTest.testSynchronizedRemoveFromMapIterator":94,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionRetainAll":28,"org.apache.commons.collections4.map.LRUMapTest.testRemoveLRUFirstBlocksRemove":92,"org.apache.commons.collections4.map.LinkedMapTest.testMapContainsValue":66,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIsEmpty":25,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionToArray":31,"org.apache.commons.collections4.map.ReferenceMapTest.testPurgeValues":82,"org.apache.commons.collections4.ListUtilsTest.testLongestCommonSubsequenceWithString":5,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionAddAll":44,"org.apache.commons.collections4.map.LRUMapTest.testRemoveLRU":91,"org.apache.commons.collections4.map.LRUMapTest.testSynchronizedRemoveFromValues":97,"org.apache.commons.collections4.map.LinkedMapTest.testMapHashCode":68,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionAdd":125,"org.apache.commons.collections4.ListUtilsTest.testLongestCommonSubsequence":4,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetContains3":116,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemove3":119,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionToArray2":36,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemove2":118,"org.apache.commons.collections4.map.LinkedMapTest.testInitialCapacityZero":6,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemove1":117,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIterator":32,"org.apache.commons.collections4.map.LRUMapTest.testReset":88,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionToArray":48,"org.apache.commons.collections4.map.MultiKeyMapTest.testLRUMultiKeyMap":85,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetContains1":114,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetContains2":115,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionContainsAll":18,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIteratorRemove":22,"org.apache.commons.collections4.map.LinkedMapTest.testInsertionOrder":56,"org.apache.commons.collections4.map.LRUMapTest.testSynchronizedRemoveFromKeySet":96,"org.apache.commons.collections4.map.LRUMapTest.testMapPutAll":112,"org.apache.commons.collections4.map.LRUMapTest.testPreviousKey":100,"org.apache.commons.collections4.map.LinkedMapTest.testNextKey":58,"org.apache.commons.collections4.map.LinkedMapTest.testMapContainsKey":65,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRemoveAll":40,"org.apache.commons.collections4.map.LinkedMapTest.testClone":54,"org.apache.commons.collections4.map.LinkedMapTest.testMapSize":64,"org.apache.commons.collections4.map.LRUMapTest.testMapRemove":113,"org.apache.commons.collections4.sequence.SequencesComparatorTest.testMinimal":1,"org.apache.commons.collections4.set.MapBackedSet2Test.testSerializeDeserializeThenCompare":30,"org.apache.commons.collections4.map.LRUMapTest.testMapToString":110,"org.apache.commons.collections4.set.MapBackedSet2Test.testSetHashCode":17,"org.apache.commons.collections4.map.LinkedMapTest.testFailFastKeySet":61,"org.apache.commons.collections4.set.MapBackedSet2Test.testOrdering":124},"transformations":[{"failures":[],"tindex":"0a1a31c8-4200-11e5-8c2d-cdf0965b3abc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.functors.IfClosure:76","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.collections4.Closure<? super E> == null) || (org.apache.commons.collections4.Closure<? super E> == null)) {\n    throw new java.lang.IllegalArgumentException(\"Closures must not be null\");\n} "},"variableMap":{"falseClosure":"closure","trueClosure":"closure"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.functors.WhileClosure:58","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.Closure<? super E> == null) {\n    throw new java.lang.IllegalArgumentException(\"Closure must not be null\");\n} "},"status":0},{"failures":[],"tindex":"0a1a58d9-4200-11e5-8c2d-b37e18467ae1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.SingletonMap:567","type":"CtInvocationImpl","sourcecode":"new java.lang.StringBuilder(128).append('{').append((org.apache.commons.collections4.map.SingletonMap<K, V>.(getKey()) == (this) ? \"(this Map)\" : org.apache.commons.collections4.map.SingletonMap<K, V>.getKey())).append('=')"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.SingletonMap:567","type":"CtInvocationImpl","sourcecode":"new java.lang.StringBuilder(128).append('{').append((org.apache.commons.collections4.map.SingletonMap<K, V>.(getKey()) == (this) ? \"(this Map)\" : org.apache.commons.collections4.map.SingletonMap<K, V>.getKey())).append('=').append((org.apache.commons.collections4.map.SingletonMap<K, V>.(getValue()) == (this) ? \"(this Map)\" : org.apache.commons.collections4.map.SingletonMap<K, V>.getValue())).append('}')"},"status":0},{"failures":[0,1,2,3,4,5],"tindex":"0a1a58da-4200-11e5-8c2d-719e9394606a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:212","type":"CtForImpl","sourcecode":"for (int int = int - int ; int <= (int + int) ; int += 2) {\n    final int int = (int + int) - int;\n    if ((int == (int - int)) || ((int != (int + int)) && ((int[][(int + 1)]) <= (int[][(int - 1)])))) {\n        int[][int] = (int[][(int + 1)]) - 1;\n    } else {\n        int[][int] = int[][(int - 1)];\n    }\n    int int = (int[][int]) - 1;\n    int int = ((int - int) + int) - int;\n    while (((int >= int) && (int >= int)) && (org.apache.commons.collections4.Equator<? super T>.equate(java.util.List<T>.get(int), java.util.List<T>.get(int)))) {\n        int[][int] = int--;\n        int--;\n    }\n    if ((((int % 2) == 0) && ((-int) <= int)) && (int <= int)) {\n        if ((int[][int]) <= (int[][(int + int)])) {\n            return org.apache.commons.collections4.sequence.SequencesComparator<T>.buildSnake(int[][int], ((int + int) - int), int, int);\n        } \n    } \n}"},"variableMap":{"start1":"start1","d":"delta","offset":"delta","vDown":"vUp","delta":"end1","this":"this","sequence1":"sequence1","sequence2":"sequence2","vUp":"vDown","equator":"equator","end2":"end2","end1":"start2","start2":"start2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:186","type":"CtForImpl","sourcecode":"for (int int = -int ; int <= int ; int += 2) {\n    final int int = int + int;\n    if ((int == (-int)) || ((int != int) && ((int[][(int - 1)]) < (int[][(int + 1)])))) {\n        int[][int] = int[][(int + 1)];\n    } else {\n        int[][int] = (int[][(int - 1)]) + 1;\n    }\n    int int = int[][int];\n    int int = ((int - int) + int) - int;\n    while (((int < int) && (int < int)) && (org.apache.commons.collections4.Equator<? super T>.equate(java.util.List<T>.get(int), java.util.List<T>.get(int)))) {\n        int[][int] = ++int;\n        ++int;\n    }\n    if ((((int % 2) != 0) && ((int - int) <= int)) && (int <= (int + int))) {\n        if ((int[][(int - int)]) <= (int[][int])) {\n            return org.apache.commons.collections4.sequence.SequencesComparator<T>.buildSnake(int[][(int - int)], ((int + int) - int), int, int);\n        } \n    } \n}"},"status":-1},{"failures":[6,7,8,9,10],"tindex":"0a1a7feb-4200-11e5-8c2d-0f5357ed14a3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer:96","type":"CtReturnImpl","sourcecode":"return ((int * (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int)) + (java.lang.Integer.numberOfLeadingZeros(int))) - (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int)"},"variableMap":{"org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.LENGTH":"newCapacity","x":"newCapacity","i":"newCapacity"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:675","type":"CtReturnImpl","sourcecode":"return int"},"status":-1},{"failures":[11,12,13,14],"tindex":"0a1a7fec-4200-11e5-8c2d-0b822373eaff","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.comparators.FixedOrderComparator:261","type":"CtAssignmentImpl","sourcecode":"int = (int * 37) + (int)"},"variableMap":{"total":"h","counter":"h"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.MultiKeyMap:669","type":"CtOperatorAssignmentImpl","sourcecode":"int ^= java.lang.Object.hashCode()"},"status":-1},{"failures":[0,1,2,3,4,5],"tindex":"0a1a7fed-4200-11e5-8c2d-0956abb5a1b8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:546","type":"CtIfImpl","sourcecode":"if (int > (int)) {\n    throw new java.lang.IndexOutOfBoundsException(((((((\"Couldn\\'t get the node: \" + \"index (\") + int) + \") greater than the size of the \") + \"list (\") + (int)) + \").\"));\n} "},"variableMap":{"size":"end1","index":"end2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:287","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.sequence.SequencesComparator<T>.buildScript(org.apache.commons.collections4.sequence.SequencesComparator.Snake.getEnd(), int, ((org.apache.commons.collections4.sequence.SequencesComparator.Snake.getEnd()) - (org.apache.commons.collections4.sequence.SequencesComparator.Snake.getDiag())), int, org.apache.commons.collections4.sequence.EditScript<T>)"},"status":-1},{"failures":[],"tindex":"0a1a7fee-4200-11e5-8c2d-35b9dc7eaa23","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:37","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.CollectionUtils:368","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[],"tindex":"0a1b1c2f-4200-11e5-8c2d-714aa32be709","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.functors.TransformedPredicate:59","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.collections4.functors.TransformedPredicate<T>(org.apache.commons.collections4.Transformer<? super T, ? extends T> , org.apache.commons.collections4.Predicate<? super T>)"},"status":-2},{"failures":[15],"tindex":"0a1b1c30-4200-11e5-8c2d-593c815c91bc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.functors.PrototypeFactory:60","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.functors.ConstantFactory.<T>constantFactory(null)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.FactoryUtils:56","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.functors.ExceptionFactory.<T>exceptionFactory()"},"status":-1},{"failures":[],"tindex":"0a1b1c31-4200-11e5-8c2d-abd17377c77c","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.MapUtils:1438","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.map.MultiValueMap.<K,V>multiValueMap(java.util.Map<K, ? super java.util.Collection<V>>)"},"variableMap":{"map":"map"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.MultiValueMap:88","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.map.MultiValueMap.<K,V,java.util.ArrayList>multiValueMap(((java.util.Map<K, ? super java.util.Collection>)(java.util.Map<K, ? super java.util.Collection<V>>)), java.util.ArrayList.java.util.ArrayList)"},"status":-2},{"failures":[],"tindex":"0a1b1c32-4200-11e5-8c2d-e3ea287dd88f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2054","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.isEmpty()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.CollatingIterator:398","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[],"tindex":"0a1b1c33-4200-11e5-8c2d-a70fdb41c02f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1142","type":"CtIfImpl","sourcecode":"if ((int >= 0) && (int < int)) {\n    return null;\n} "},"variableMap":{"lengthInBits":"bitIndex","bitIndex":"bitIndex"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:971","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)) {\n    final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>(K , null , int);\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, int);\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.incrementSize();\n    final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.nextEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>);\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.removeEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>);\n    int -= 2;\n    return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n} else if (org.apache.commons.collections4.trie.KeyAnalyzer.isNullBitKey(int)) {\n    if (!(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.isEmpty())) {\n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n    } else {\n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.firstEntry();\n    }\n} else if (org.apache.commons.collections4.trie.KeyAnalyzer.isEqualBitKey(int)) {\n    return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n} "},"status":-1},{"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"tindex":"0a1b1c34-4200-11e5-8c2d-6d663e26c708","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.collection.UnmodifiableBoundedCollection:97","type":"CtIfImpl","sourcecode":"if ((java.util.Collection<? extends E> instanceof org.apache.commons.collections4.BoundedCollection) == false) {\n    throw new java.lang.IllegalArgumentException(\"The collection is not a bounded collection\");\n} "},"variableMap":{"coll":"coll"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.set.MapBackedSet:124","type":"CtForEachImpl","sourcecode":"for (final E E : java.util.Collection<? extends E>) {\n    java.util.Map<E, ? super V>.put(E, V);\n}"},"status":-1},{"failures":[50],"tindex":"0a1b1c35-4200-11e5-8c2d-d11c606dbf2e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.Flat3Map:802","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"variableMap":{"flag":"nextObjectSet","removed":"nextObjectSet"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.FilterIterator:144","type":"CtAssignmentImpl","sourcecode":"boolean = false"},"status":-1},{"failures":[51,52,53],"tindex":"0a1b1c36-4200-11e5-8c2d-b167eaf3f8eb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.iterators.CollatingIterator:398","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:368","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,9,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,16,17,18,19,22,23,24,25,27,28,125,29,30,31,32],"tindex":"0a1b4347-4200-11e5-8c2d-ad4eae12eae1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.AbstractReferenceMap:1036","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.map.AbstractReferenceMap<K, V>.init()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:519","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.map.AbstractHashedMap<K, V>.checkCapacity()"},"status":-1},{"failures":[],"tindex":"0a1b4348-4200-11e5-8c2d-05a51a59e5c1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.TransformerUtils:79","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.functors.ExceptionTransformer.<I,O>exceptionTransformer()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.functors.ChainedTransformer:75","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.functors.NOPTransformer.<T>nopTransformer()"},"status":-2},{"failures":[],"tindex":"0a1b4349-4200-11e5-8c2d-bfc0159d281b","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:145","type":"CtWhileImpl","sourcecode":"while ((((int - int) < int) && (int < int)) && (org.apache.commons.collections4.Equator<? super T>.equate(java.util.List<T>.get(int), java.util.List<T>.get((int - int))))) {\n    ++int;\n}"},"variableMap":{"diag":"start2","end2":"start1","equator":"equator","end1":"start1","end":"start2","sequence1":"sequence1","sequence2":"sequence2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:257","type":"CtIfImpl","sourcecode":"if (((org.apache.commons.collections4.sequence.SequencesComparator.Snake == null) || (((org.apache.commons.collections4.sequence.SequencesComparator.Snake.getStart()) == int) && ((org.apache.commons.collections4.sequence.SequencesComparator.Snake.getDiag()) == (int - int)))) || (((org.apache.commons.collections4.sequence.SequencesComparator.Snake.getEnd()) == int) && ((org.apache.commons.collections4.sequence.SequencesComparator.Snake.getDiag()) == (int - int)))) {\n    int int = int;\n    int int = int;\n    while ((int < int) || (int < int)) {\n        if (((int < int) && (int < int)) && (org.apache.commons.collections4.Equator<? super T>.equate(java.util.List<T>.get(int), java.util.List<T>.get(int)))) {\n            org.apache.commons.collections4.sequence.EditScript<T>.append(new org.apache.commons.collections4.sequence.KeepCommand<T>(java.util.List<T>.get(int)));\n            ++int;\n            ++int;\n        } else {\n            if ((int - int) > (int - int)) {\n                org.apache.commons.collections4.sequence.EditScript<T>.append(new org.apache.commons.collections4.sequence.DeleteCommand<T>(java.util.List<T>.get(int)));\n                ++int;\n            } else {\n                org.apache.commons.collections4.sequence.EditScript<T>.append(new org.apache.commons.collections4.sequence.InsertCommand<T>(java.util.List<T>.get(int)));\n                ++int;\n            }\n        }\n    }\n} else {\n    org.apache.commons.collections4.sequence.SequencesComparator<T>.buildScript(int, org.apache.commons.collections4.sequence.SequencesComparator.Snake.getStart(), int, ((org.apache.commons.collections4.sequence.SequencesComparator.Snake.getStart()) - (org.apache.commons.collections4.sequence.SequencesComparator.Snake.getDiag())), org.apache.commons.collections4.sequence.EditScript<T>);\n    for (int int = org.apache.commons.collections4.sequence.SequencesComparator.Snake.getStart() ; int < (org.apache.commons.collections4.sequence.SequencesComparator.Snake.getEnd()) ; ++int) {\n        org.apache.commons.collections4.sequence.EditScript<T>.append(new org.apache.commons.collections4.sequence.KeepCommand<T>(java.util.List<T>.get(int)));\n    }\n    org.apache.commons.collections4.sequence.SequencesComparator<T>.buildScript(org.apache.commons.collections4.sequence.SequencesComparator.Snake.getEnd(), int, ((org.apache.commons.collections4.sequence.SequencesComparator.Snake.getEnd()) - (org.apache.commons.collections4.sequence.SequencesComparator.Snake.getDiag())), int, org.apache.commons.collections4.sequence.EditScript<T>);\n}"},"status":-2},{"failures":[],"tindex":"0a1b434a-4200-11e5-8c2d-818f0774f430","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.MultiValueMap:211","type":"CtLocalVariableImpl","sourcecode":"final java.util.Collection<V> java.util.Collection<V> = org.apache.commons.collections4.map.MultiValueMap<K, V>.getCollection(java.lang.Object)"},"status":-2}],"header":{"groupId":"org.apache.commons","transformationCount":19,"projectType":"maven","artifactId":"commons-collections4","generatorVersion":"1.0","version":"4.0"}}
{"failureDictionary":{"org.apache.commons.collections4.list.CursorableLinkedListTest.testEqualsAndHashCode":22,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListEquals":24,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionRemove":38,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyContainsKey":45,"org.apache.commons.collections4.collection.CompositeCollectionTest.testUnsupportedAdd":0,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListHashCode":3,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListGetByIndex":26,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionContainsAll":14,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionRemoveAll":39,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll3":43,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListIndexOf":27,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionRetainAll":20,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListAddByIndex":23,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionRemove":18,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionToArray2":21,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyPut":46,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyOrderedMapIterator":50,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionIsEmpty":15,"org.apache.commons.collections4.keyvalue.MultiKeyTest.testHashCode":48,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemove":47,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListIteratorAdd":9,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionContains":33,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyMapIterator":49,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListEquals":2,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionRetainAll":40,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListSetByIndex":29,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionAdd":31,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListHashCode":25,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListRemoveByIndex":8,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionAdd":11,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionRemoveAll":19,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionIterator":16,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListAddByIndex":1,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionContains":13,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionIteratorRemove":17,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionIteratorRemove":37,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListLastIndexOf":28,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testPreviousKey":51,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionIterator":36,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListIndexOf":5,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListLastIndexOf":6,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListGetByIndex":4,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListSetByIndex":7,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListIteratorSet":10,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListRemoveByIndex":30,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionToArray2":41,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionAddAll":32,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionAddAll":12,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionIsEmpty":35,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyGet":44,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionContainsAll":34,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSet":42},"transformations":[{"failures":[],"tindex":"32e3ccf4-240e-11e5-8170-f35d25544de0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.Flat3Map:1023","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.collections4.map.AbstractHashedMap<K, V>) != null) {\n    return org.apache.commons.collections4.map.AbstractHashedMap<K, V>.values();\n} "},"status":0},{"failures":[0],"tindex":"32e3f405-240e-11e5-8170-4158bb7af163","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.collection.CompositeCollection:219","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.collections4.collection.CompositeCollection.CollectionMutator<E>) == null) {\n    throw new java.lang.UnsupportedOperationException(\"add() is not supported on CompositeCollection without a CollectionMutator strategy\");\n} "},"status":-1},{"failures":[],"tindex":"32e3f406-240e-11e5-8170-f9ae073afb36","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:752","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.followLeft(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)"},"variableMap":{"root":"right","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1200","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) == org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) {\n    if (org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) {\n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n    } else {\n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.followRight(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>);\n    }\n} else {\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n    while (((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) != null) && (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> == (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>))) {\n        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n    }\n    if ((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) == null) {\n        return null;\n    } \n    if (org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) {\n        if ((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) == (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) {\n            if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.isEmpty()) {\n                return null;\n            } else {\n                return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n            }\n        } else {\n            return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n        }\n    } else {\n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.followRight(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>);\n    }\n}"},"status":-2},{"failures":[],"tindex":"32e44227-240e-11e5-8170-89c9fa0e8ed8","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.map.MultiValueMap:502","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.map.MultiValueMap.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.PeekingIterator:128","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.iterators.PeekingIterator<E>.fill()"},"status":-2},{"failures":[],"tindex":"32e44228-240e-11e5-8170-6bf3c49f32cf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.CollectionUtils:1252","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    throw new java.lang.IndexOutOfBoundsException((\"Index cannot be negative: \" + int));\n} "},"variableMap":{"i":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.UnmodifiableEntrySet:139","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(java.lang.Object[], 0, T[], 0, java.lang.Object[].int)"},"status":-2},{"failures":[],"tindex":"32e44229-240e-11e5-8170-59fca556b928","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.collection.CompositeCollection:239","type":"CtThrowImpl","sourcecode":"throw new java.lang.UnsupportedOperationException(\"remove() is not supported on CompositeCollection without a CollectionMutator strategy\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.functors.SwitchClosure:62","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"The predicate and closure arrays must be the same size\")"},"status":-2},{"failures":[],"tindex":"32e4693a-240e-11e5-8170-c913b5c03ed9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.MultiValueMap:502","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.map.MultiValueMap.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:869","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.setParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)"},"status":-2},{"failures":[],"tindex":"32e4693b-240e-11e5-8170-2fe79a36fbc2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.functors.TruePredicate:47","type":"CtReturnImpl","sourcecode":"return ((org.apache.commons.collections4.Predicate<T>)(org.apache.commons.collections4.functors.TruePredicate.org.apache.commons.collections4.Predicate))"},"variableMap":{"org.apache.commons.collections4.functors.TruePredicate.INSTANCE":"org.apache.commons.collections4.functors.NullPredicate.INSTANCE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.functors.NullPredicate:47","type":"CtReturnImpl","sourcecode":"return ((org.apache.commons.collections4.Predicate<T>)(org.apache.commons.collections4.functors.NullPredicate.org.apache.commons.collections4.Predicate))"},"status":-2},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],"tindex":"32e4693c-240e-11e5-8170-6fa5c74d1fde","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:378","type":"CtAssignmentImpl","sourcecode":"int = (31 * int) + (E == null ? 0 : E.hashCode())"},"status":-1},{"failures":[7,42,29],"tindex":"32e4904d-240e-11e5-8170-db88c8b80d02","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:483","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.list.AbstractLinkedList<E>.addNode(org.apache.commons.collections4.list.AbstractLinkedList.Node<E>, org.apache.commons.collections4.list.AbstractLinkedList.Node<E>.org.apache.commons.collections4.list.AbstractLinkedList.Node<E>)"},"variableMap":{"next":"node","node":"node","this":"this","newNode":"node"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:293","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.list.AbstractLinkedList<E>.updateNode(org.apache.commons.collections4.list.AbstractLinkedList.Node<E>, E)"},"status":-1},{"failures":[],"tindex":"32e4904e-240e-11e5-8170-239adb1d769b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.ListUtils:292","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[43],"tindex":"32e4904f-240e-11e5-8170-6ddacba740f8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.MultiKeyMap:773","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.MapIterator<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.remove()"},"status":-1},{"failures":[],"tindex":"32e49050-240e-11e5-8170-3f158a890e16","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1434","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.set.ListOrderedSet:242","type":"CtForImpl","sourcecode":"for (final java.util.Iterator<E> java.util.Iterator<E> = org.apache.commons.collections4.set.ListOrderedSet<E>.iterator() ; java.util.Iterator<E>.hasNext() ; ) {\n    if (!(java.util.Set<java.lang.Object>.contains(java.util.Iterator<E>.next()))) {\n        java.util.Iterator<E>.remove();\n    } \n}"},"status":-2},{"failures":[],"tindex":"32e4b761-240e-11e5-8170-759ca0b2e7a9","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:150","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.collections4.sequence.SequencesComparator.Snake(int , int , int)"},"variableMap":{"diag":"end2","start":"start2","end":"end2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:232","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.sequence.SequencesComparator<T>.buildSnake(int[][int], ((int + int) - int), int, int)"},"status":-2},{"failures":[44,45,46,47,48],"tindex":"32e4b762-240e-11e5-8170-791b036d0ae8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.StaticBucketMap:282","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.collections4.map.StaticBucketMap.Lock[][int].int)++"},"variableMap":{"size":"total","locks":"key","hash":"total"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.keyvalue.MultiKey:265","type":"CtOperatorAssignmentImpl","sourcecode":"int ^= java.lang.Object.hashCode()"},"status":-1},{"failures":[49,50],"tindex":"32e4b763-240e-11e5-8170-d5ea88b2acdf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.iterators.NodeListIterator:76","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException(\"underlying nodeList has no more elements\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.AbstractEmptyMapIterator:35","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"Iterator contains no elements\")"},"status":-1},{"failures":[],"tindex":"32e4de74-240e-11e5-8170-7bd169d19783","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.comparators.ComparatorChain:334","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.CollectionUtils:516","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"32e4de75-240e-11e5-8170-d1f8ccffa3f3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.CollatingIterator:172","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.iterators.CollatingIterator<E>.checkNotStarted()"},"status":0},{"failures":[],"tindex":"32e4de76-240e-11e5-8170-3f84c3a7ec5b","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:1294","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.map.AbstractHashedMap<K, V>.init()"},"variableMap":{"cloned":"map"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.FixedSizeSortedMap:119","type":"CtIfImpl","sourcecode":"if ((java.util.Map<K, V>.containsKey(K)) == false) {\n    throw new java.lang.IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\");\n} "},"status":-2},{"failures":[51],"tindex":"32e4de77-240e-11e5-8170-9d839ce84103","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:789","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> != null) {\n    return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.getKey();\n} else {\n    throw new java.util.NoSuchElementException();\n}"},"variableMap":{"entry":"prevEntry"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:816","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> != null ? org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.getKey() : null"},"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":20,"projectType":"maven","artifactId":"commons-collections4","generatorVersion":"1.0","version":"4.0"},"diffs":[{"transformation":"32e4de75-240e-11e5-8170-d1f8ccffa3f3","diffs":[{"nodes":{},"edges":{"org.apache.commons.collections4.iterators.CollatingIterator.void addIterator(java.util.Iterator)":["org.apache.commons.collections4.iterators.CollatingIterator.void addIterator(java.util.Iterator) -> org.apache.commons.collections4.iterators.CollatingIterator.void addIterator(java.util.Iterator)","org.apache.commons.collections4.iterators.CollatingIterator.void addIterator(java.util.Iterator) -> org.apache.commons.collections4.iterators.CollatingIterator.void checkNotStarted()"]},"graph":"branch"}]},{"transformation":"32e3ccf4-240e-11e5-8170-f35d25544de0","diffs":[{"nodes":{"org.apache.commons.collections4.map.Flat3MapTest.testMapToString":["org.apache.commons.collections4.map.AbstractHashedMap$Values.int size()"]},"edges":{"org.apache.commons.collections4.map.Flat3MapTest.testMapToString":["org.apache.commons.collections4.map.AbstractHashedMap$Values.int size() -> org.apache.commons.collections4.map.AbstractHashedMap.int size()","org.apache.commons.collections4.map.AbstractHashedMap$Values.int size() -> org.apache.commons.collections4.map.AbstractHashedMap$Values.int size()"],"org.apache.commons.collections4.map.Flat3Map$Values.java.util.Iterator iterator()":["org.apache.commons.collections4.map.Flat3Map$Values.java.util.Iterator iterator() -> org.apache.commons.collections4.map.AbstractHashedMap.java.util.Collection values()","org.apache.commons.collections4.map.Flat3Map$Values.java.util.Iterator iterator() -> org.apache.commons.collections4.map.AbstractHashedMap$Values.java.util.Iterator iterator()"],"org.apache.commons.collections4.map.Flat3Map.java.util.Collection values()":["org.apache.commons.collections4.map.Flat3Map.java.util.Collection values() -> org.apache.commons.collections4.map.Flat3Map.java.util.Collection values()","org.apache.commons.collections4.map.Flat3Map.java.util.Collection values() -> org.apache.commons.collections4.map.AbstractHashedMap.java.util.Collection values()"]},"graph":"branch"},{"branches":{"org.apache.commons.collections4.map.Flat3MapTest.testMapToString":["org.apache.commons.collections4.map.AbstractHashedMap$Values_int_size().b","org.apache.commons.collections4.map.Flat3Map$Values_java.util.Iterator_iterator().t1"]},"type":"branch"}]}]}
{"failureDictionary":{"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemoveAll":140,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testPreviousKey":1,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastEntrySet":60,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapGet":7,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testKeySetIteratorRemoveChangesMap":14,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionContainsAll":110,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetClearChangesMap":73,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetRemoveAll":81,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray":160,"org.apache.commons.collections4.set.CompositeSetTest.testFailedCollisionResolution":107,"org.apache.commons.collections4.iterators.CollatingIteratorTest.testIterateFibEvenOdd":50,"org.apache.commons.collections4.CollectionUtilsTest.testCollate":59,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapContainsValue":5,"org.apache.commons.collections4.map.CompositeMapTest.testMapClear":84,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapHashCode":8,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionAddAll":119,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemoveChangesMap":67,"org.apache.commons.collections4.set.CompositeSetTest.testSimpleSerialization":130,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapIsEmpty":19,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemoveAll":75,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapPutAll":31,"org.apache.commons.collections4.map.CompositeMapTest.testMapIsEmpty":88,"org.apache.commons.collections4.set.CompositeSetTest.testRemoveComposited":103,"org.apache.commons.collections4.CollectionUtilsTest.extractSingleton":133,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionRetainAll":120,"org.apache.commons.collections4.iterators.CollatingIteratorTest.testFullIterator":56,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionSize":112,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testKeySetRemoveChangesMap":13,"org.apache.commons.collections4.iterators.CollatingIteratorTest.testIterateOddEven":48,"org.apache.commons.collections4.iterators.CollatingIteratorTest.testRemoveFromDouble":54,"org.apache.commons.collections4.map.CompositeMapTest.testObjectHashCodeEqualsContract":99,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIteratorRemove":139,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiGetKey":32,"org.apache.commons.collections4.set.ListOrderedSetTest.testSetHashCode":149,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContains":155,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove1":70,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiGetKey":27,"org.apache.commons.collections4.CollectionUtilsTest.maxSize":47,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove3":72,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove2":71,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToArray2":137,"org.apache.commons.collections4.map.CompositeMapTest.testMapPutNullValue":78,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemoveAll":154,"org.apache.commons.collections4.set.CompositeSetTest.testObjectEqualsSelf":126,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapToString":9,"org.apache.commons.collections4.set.CompositeSetTest.testObjectHashCodeEqualsSelfHashCode":132,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray2":151,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionRemove":122,"org.apache.commons.collections4.map.CompositeMapTest.testObjectEqualsSelf":98,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetIteratorRemoveChangesMap":16,"org.apache.commons.collections4.set.CompositeSetTest.testRemoveUnderlying":102,"org.apache.commons.collections4.iterators.CollatingIteratorTest.testIterateEvenOdd":49,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIsEmpty":142,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSetEquals":134,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetRemoveChangesMap":79,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAddAll":157,"org.apache.commons.collections4.iterators.CollatingIteratorTest.testIterateEvenEven":53,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapRemove":11,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionAdd":121,"org.apache.commons.collections4.map.CompositeMapTest.testObjectHashCodeEqualsSelfHashCode":100,"org.apache.commons.collections4.map.CompositeMapTest.testMapPutNullKey":83,"org.apache.commons.collections4.map.CompositeMapTest.testValuesRemoveAll":89,"org.apache.commons.collections4.map.CompositeMapTest.testMapRemove":94,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContainsAll":136,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetIteratorRemoveChangesMap":76,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContains":141,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionIterator":125,"org.apache.commons.collections4.set.CompositeSetTest.testAddComposited":106,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemove":145,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRetainAll":144,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testCircularFifoQueueCircular":44,"org.apache.commons.collections4.map.CompositeMapTest.testMapContainsValue":95,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testNextKey":0,"org.apache.commons.collections4.map.CompositeMapTest.testMapPutAll":90,"org.apache.commons.collections4.map.CompositeMapTest.testSerializeDeserializeThenCompare":101,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAddAll":143,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapToString":26,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapEquals":23,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains3":65,"org.apache.commons.collections4.CollectionUtilsTest.testCollateIgnoreDuplicates":58,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testPreviousKey":18,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapEquals":6,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testValuesIteratorRemoveChangesMap":12,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionToArray2":111,"org.apache.commons.collections4.map.CompositeMapTest.testMapSize":82,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains1":63,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains2":64,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionIteratorRemove":114,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIsEmpty":156,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapSize":3,"org.apache.commons.collections4.iterators.CollatingIteratorTest.testIterateEven":52,"org.apache.commons.collections4.set.CompositeSetTest.testCanonicalFullCollectionExists":127,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionSize":152,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapContainsKey":4,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContainsAll":150,"org.apache.commons.collections4.map.CompositeMapTest.testMapToString":85,"org.apache.commons.collections4.map.CompositeMapTest.testValuesClearChangesMap":97,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsKey":21,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastKeySet":61,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiInverse":34,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiRemove":30,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionSize":138,"org.apache.commons.collections4.map.CompositeMapTest.testMapHashCode":69,"org.apache.commons.collections4.map.CompositeMapTest.testMapContainsKey":80,"org.apache.commons.collections4.map.CompositeMapTest.testMapGet":92,"org.apache.commons.collections4.map.CompositeMapTest.testMapEquals":86,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionContains":116,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIteratorRemove":153,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetClearChangesMap":77,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapIsEmpty":2,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapHashCode":25,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemove":159,"org.apache.commons.collections4.set.CompositeSetTest.testEqualsNull":128,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRetainAll":87,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetRemoveChangesMap":15,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetIteratorRemoveChangesMap":91,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionClear":118,"org.apache.commons.collections4.map.CompositeMapTest.testValuesIteratorRemoveChangesMap":66,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRepeatedSerialization":45,"org.apache.commons.collections4.iterators.CollatingIteratorTest.testNullComparator":51,"org.apache.commons.collections4.set.CompositeSetTest.testSetEquals":108,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionRemoveAll":115,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsValue":22,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastValues":62,"org.apache.commons.collections4.set.CompositeSetTest.testSetHashCode":109,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapPut":10,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testNextKey":17,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRetainAll":158,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError9":43,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError8":42,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionIsEmpty":117,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToArray":146,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError5":39,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError4":38,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError7":41,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError6":40,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError1":35,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetRetainAll":96,"org.apache.commons.collections4.iterators.CollatingIteratorTest.testRemove":57,"org.apache.commons.collections4.set.CompositeSetTest.testSerializeDeserializeThenCompare":123,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError3":37,"org.apache.commons.collections4.queue.CircularFifoQueueTest.testRemoveError2":36,"org.apache.commons.collections4.set.CompositeSetTest.testContains":104,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiGetKeyInverse":33,"org.apache.commons.collections4.set.CompositeSetTest.testCanonicalEmptyCollectionExists":129,"org.apache.commons.collections4.CollectionUtilsTest.isFull":46,"org.apache.commons.collections4.map.CompositeMapTest.testMapPut":93,"org.apache.commons.collections4.set.CompositeSetTest.testAddCompositedCollision":105,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapSize":20,"org.apache.commons.collections4.map.CompositeMapTest.testValuesRemoveChangesMap":74,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiInverse":29,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIterator":147,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapGet":24,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIterator":161,"org.apache.commons.collections4.iterators.CollatingIteratorTest.testRemoveFromSingle":55,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSetHashCode":135,"org.apache.commons.collections4.set.CompositeSetTest.testObjectHashCodeEqualsContract":131,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionToArray":124,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionToString":113,"org.apache.commons.collections4.set.ListOrderedSetTest.testSetEquals":148,"org.apache.commons.collections4.map.CompositeMapTest.testValuesRetainAll":68,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiGetKeyInverse":28},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"tindex":"0c2698b7-2469-11e5-93d1-f32271b6a8a4","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:512","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.setLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)"},"variableMap":{"node":"leftChild","org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.KEY":"dataElement","newNode":"node"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:862","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement).getRight(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) == org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>) {\n    org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement).setRight(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n} else {\n    org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement).setLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n}"},"status":-1},{"failures":[],"tindex":"0c2734f8-2469-11e5-93d1-55c1e340b3f7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.list.TreeList:1097","type":"CtIfImpl","sourcecode":"if ((int) != (int)) {\n    (int)--;\n} "},"variableMap":{"nextIndex":"start2","currentIndex":"start1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:224","type":"CtWhileImpl","sourcecode":"while (((int >= int) && (int >= int)) && (org.apache.commons.collections4.Equator<? super T>.equate(java.util.List<T>.get(int), java.util.List<T>.get(int)))) {\n    int[][int] = int--;\n    int--;\n}"},"status":-2},{"failures":[],"tindex":"0c2734f9-2469-11e5-93d1-c707e58c6b5b","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.map.LRUMap:180","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.map.LRUMap<K, V>.moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)"},"variableMap":{"entry":"entry","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:282","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.map.AbstractHashedMap<K, V>.updateEntry(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>, V)"},"status":-2},{"failures":[],"tindex":"0c275c0a-2469-11e5-93d1-6f022b5fe719","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.StaticBucketMap:566","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.map.StaticBucketMap.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.list.CursorableLinkedList:317","type":"CtIfImpl","sourcecode":"if (org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E> == null) {\n    java.util.Iterator<java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>>>.remove();\n} else {\n    org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>.nodeChanged(org.apache.commons.collections4.list.AbstractLinkedList.Node<E>);\n}"},"status":-2},{"failures":[0,1,27,28,29,30,2,3,4,5,6,7,8,9,10,31,11,12,17,18,32,33,34,19,20,21,22,23,24,25,26],"tindex":"0c27831b-2469-11e5-93d1-89eaedb0006c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:983","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] = null"},"variableMap":{"dataElement":"dataElement","rootNode":"rootNode"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:834","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>"},"status":-1},{"failures":[35,36,37,38,39,40,41,42,43,44,45,46,47],"tindex":"0c27aa2c-2469-11e5-93d1-7bf13af0e558","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.comparators.FixedOrderComparator:261","type":"CtAssignmentImpl","sourcecode":"int = (int * 37) + (int)"},"variableMap":{"total":"index","counter":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.queue.CircularFifoQueue:328","type":"CtAssignmentImpl","sourcecode":"int = 0"},"status":-1},{"failures":[],"tindex":"0c27aa2d-2469-11e5-93d1-2b813ab665de","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.MapUtils:1192","type":"CtReturnImpl","sourcecode":"return java.util.Map<K, V> == null ? java.util.Collections.<K,V>emptyMap() : java.util.Map<K, V>"},"variableMap":{"map":"map"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.AbstractMapDecorator:73","type":"CtReturnImpl","sourcecode":"return java.util.Map<K, V>"},"status":0},{"failures":[48,49,50,51,52,53,54,55,56,57,58,59],"tindex":"0c27d13e-2469-11e5-93d1-71b0d6470c97","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.ListUtils:658","type":"CtIfImpl","sourcecode":"if (int <= 0) {\n    throw new java.lang.IllegalArgumentException(\"Size must be greater than 0\");\n} "},"variableMap":{"size":"leastIndex"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.CollatingIterator:360","type":"CtIfImpl","sourcecode":"if (int == (-1)) {\n    int = int;\n    E = java.util.ArrayList<E>.get(int);\n} else {\n    final E E = java.util.ArrayList<E>.get(int);\n    if ((java.util.Comparator<? super E>) == null) {\n        throw new java.lang.NullPointerException(\"You must invoke setComparator() to set a comparator first.\");\n    } \n    if ((java.util.Comparator<? super E>.compare(E, E)) < 0) {\n        E = E;\n        int = int;\n    } \n}"},"status":-1},{"failures":[60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132],"tindex":"0c27f84f-2469-11e5-93d1-2b91040ae733","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.set.CompositeSet:266","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.collections4.set.CompositeSet.SetMutator<E>) == null) {\n    throw new java.lang.UnsupportedOperationException(\"addAll() is not supported on CompositeSet without a SetMutator strategy\");\n} "},"variableMap":{"mutator":"mutator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.set.CompositeSet:344","type":"CtForEachImpl","sourcecode":"for (final java.util.Set<E> java.util.Set<E> : org.apache.commons.collections4.set.CompositeSet<E>.getSets()) {\n    final java.util.Collection<E> java.util.Collection<E> = org.apache.commons.collections4.CollectionUtils.intersection(java.util.Set<E>, java.util.Set<E>);\n    if ((java.util.Collection<E>.size()) > 0) {\n        if ((this.org.apache.commons.collections4.set.CompositeSet.SetMutator<E>) == null) {\n            throw new java.lang.UnsupportedOperationException(\"Collision adding composited set with no SetMutator set\");\n        } \n        org.apache.commons.collections4.set.CompositeSet<E>.getMutator().resolveCollision(this, java.util.Set<E>, java.util.Set<E>, java.util.Collection<E>);\n        if ((org.apache.commons.collections4.CollectionUtils.intersection(java.util.Set<E>, java.util.Set<E>).size()) > 0) {\n            throw new java.lang.IllegalArgumentException(\"Attempt to add illegal entry unresolved by SetMutator.resolveCollision()\");\n        } \n    } \n}"},"status":-1},{"failures":[],"tindex":"0c281f60-2469-11e5-93d1-0792f5a6747b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:145","type":"CtWhileImpl","sourcecode":"while ((((int - int) < int) && (int < int)) && (org.apache.commons.collections4.Equator<? super T>.equate(java.util.List<T>.get(int), java.util.List<T>.get((int - int))))) {\n    ++int;\n}"},"variableMap":{"diag":"start1","end2":"start1","equator":"equator","end1":"start2","end":"start1","sequence1":"sequence1","sequence2":"sequence2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:257","type":"CtIfImpl","sourcecode":"if (((org.apache.commons.collections4.sequence.SequencesComparator.Snake == null) || (((org.apache.commons.collections4.sequence.SequencesComparator.Snake.getStart()) == int) && ((org.apache.commons.collections4.sequence.SequencesComparator.Snake.getDiag()) == (int - int)))) || (((org.apache.commons.collections4.sequence.SequencesComparator.Snake.getEnd()) == int) && ((org.apache.commons.collections4.sequence.SequencesComparator.Snake.getDiag()) == (int - int)))) {\n    int int = int;\n    int int = int;\n    while ((int < int) || (int < int)) {\n        if (((int < int) && (int < int)) && (org.apache.commons.collections4.Equator<? super T>.equate(java.util.List<T>.get(int), java.util.List<T>.get(int)))) {\n            org.apache.commons.collections4.sequence.EditScript<T>.append(new org.apache.commons.collections4.sequence.KeepCommand<T>(java.util.List<T>.get(int)));\n            ++int;\n            ++int;\n        } else {\n            if ((int - int) > (int - int)) {\n                org.apache.commons.collections4.sequence.EditScript<T>.append(new org.apache.commons.collections4.sequence.DeleteCommand<T>(java.util.List<T>.get(int)));\n                ++int;\n            } else {\n                org.apache.commons.collections4.sequence.EditScript<T>.append(new org.apache.commons.collections4.sequence.InsertCommand<T>(java.util.List<T>.get(int)));\n                ++int;\n            }\n        }\n    }\n} else {\n    org.apache.commons.collections4.sequence.SequencesComparator<T>.buildScript(int, org.apache.commons.collections4.sequence.SequencesComparator.Snake.getStart(), int, ((org.apache.commons.collections4.sequence.SequencesComparator.Snake.getStart()) - (org.apache.commons.collections4.sequence.SequencesComparator.Snake.getDiag())), org.apache.commons.collections4.sequence.EditScript<T>);\n    for (int int = org.apache.commons.collections4.sequence.SequencesComparator.Snake.getStart() ; int < (org.apache.commons.collections4.sequence.SequencesComparator.Snake.getEnd()) ; ++int) {\n        org.apache.commons.collections4.sequence.EditScript<T>.append(new org.apache.commons.collections4.sequence.KeepCommand<T>(java.util.List<T>.get(int)));\n    }\n    org.apache.commons.collections4.sequence.SequencesComparator<T>.buildScript(org.apache.commons.collections4.sequence.SequencesComparator.Snake.getEnd(), int, ((org.apache.commons.collections4.sequence.SequencesComparator.Snake.getEnd()) - (org.apache.commons.collections4.sequence.SequencesComparator.Snake.getDiag())), int, org.apache.commons.collections4.sequence.EditScript<T>);\n}"},"status":-2},{"failures":[],"tindex":"0c284671-2469-11e5-93d1-17183f52378c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:604","type":"CtForEachImpl","sourcecode":"for (final E E : this) {\n    java.io.ObjectOutputStream.writeObject(E);\n}"},"variableMap":{"outputStream":"out"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.bidimap.DualHashBidiMap:94","type":"CtInvocationImpl","sourcecode":"java.io.ObjectOutputStream.defaultWriteObject()"},"status":-2},{"failures":[],"tindex":"0c284672-2469-11e5-93d1-3d1312ed3a4c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.comparators.ComparatorChain:305","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[133],"tindex":"0c286d83-2469-11e5-93d1-bb0b02821a33","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:131","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"Key cannot be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.CollectionUtils:1785","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Can extract singleton only when collection size == 1\")"},"status":-1},{"failures":[],"tindex":"0c286d84-2469-11e5-93d1-8578dc727976","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.map.MultiKeyMap:635","type":"CtWhileImpl","sourcecode":"while (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> != null) {\n    if (((org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.int) == int) && org.apache.commons.collections4.map.MultiKeyMap<K, V>.(isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object))) {\n        final V V = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.getValue();\n        org.apache.commons.collections4.map.MultiKeyMap<K, V>.decorated().removeMapping(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>, int, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>);\n        return V;\n    } \n    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>;\n    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>;\n}"},"variableMap":{"key1":"key1","next":"previous","entry":"previous","key2":"key1","key5":"key1","previous":"next","hashCode":"index","key3":"key1","key4":"key2","this":"this","index":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.MultiKeyMap:204","type":"CtWhileImpl","sourcecode":"while (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> != null) {\n    if (((org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.int) == int) && org.apache.commons.collections4.map.MultiKeyMap<K, V>.(isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>, java.lang.Object, java.lang.Object))) {\n        final V V = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.getValue();\n        org.apache.commons.collections4.map.MultiKeyMap<K, V>.decorated().removeMapping(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>, int, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>);\n        return V;\n    } \n    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>;\n    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>;\n}"},"status":-2},{"failures":[],"tindex":"0c289495-2469-11e5-93d1-4db765ef5056","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2062","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.get(java.lang.Object)"},"variableMap":{"value":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.map.CompositeMap:284","type":"CtReturnImpl","sourcecode":"return this.java.util.Map<K, V>[][int].get(java.lang.Object)"},"status":-2},{"failures":[],"tindex":"0c28bba6-2469-11e5-93d1-91bbff374d94","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2054","type":"CtReturnImpl","sourcecode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.isEmpty()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.CollectionUtils:883","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[],"tindex":"0c28bba7-2469-11e5-93d1-a574f8be780c","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:813","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.collections4.list.AbstractLinkedList.Node<E>) == null) {\n    throw new java.lang.IllegalStateException();\n} "},"variableMap":{"current":"nodeToInsert"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.list.CursorableLinkedList:235","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.list.CursorableLinkedList<E>.broadcastNodeInserted(org.apache.commons.collections4.list.AbstractLinkedList.Node<E>)"},"status":0},{"failures":[134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161],"tindex":"0c28e2b8-2469-11e5-93d1-6b8a66faeb17","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.iterators.PeekingIterator:153","type":"CtIfImpl","sourcecode":"if (boolean) {\n    throw new java.lang.IllegalStateException();\n} "},"variableMap":{"slotFilled":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.set.ListOrderedSet:204","type":"CtForEachImpl","sourcecode":"for (final E E : java.util.Collection<? extends E>) {\n    boolean |= org.apache.commons.collections4.set.ListOrderedSet<E>.add(E);\n}"},"status":-1},{"failures":[],"tindex":"0c28e2b9-2469-11e5-93d1-9b9288778513","series":0,"name":"replace","transplant":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2120","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.bidimap.TreeBidiMap.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.iterators.LazyIteratorChain:145","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.iterators.LazyIteratorChain<E>.updateCurrentIterator()"},"status":-2},{"failures":[],"tindex":"0c2909ca-2469-11e5-93d1-b7cd04af1b1d","series":0,"name":"add","transplant":{"position":"org.apache.commons.collections4.ListUtils:680","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    throw new java.lang.IllegalArgumentException((\"negative size: \" + int));\n} "},"variableMap":{"listSize":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.collections4.collection.CompositeCollection:200","type":"CtIfImpl","sourcecode":"if ((java.lang.Object[].int) > int) {\n    java.lang.Object[][int] = null;\n} "},"status":-2}],"header":{"groupId":"org.apache.commons","transformationCount":20,"projectType":"maven","artifactId":"commons-collections4","generatorVersion":"1.0","version":"4.0"}}
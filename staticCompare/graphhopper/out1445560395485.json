{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":96,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":87,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":91,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":17,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":18,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":118,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":108,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":44,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":114,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":109,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":126,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":48,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":82,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":29,"com.graphhopper.reader.PrinctonReaderTest.testRead":14,"com.graphhopper.storage.MMapDataAccessTest.testLoadFlush":7,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":56,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":57,"com.graphhopper.geohash.LinearKeyAlgoTest.testEncode":0,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":27,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":32,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":123,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":80,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":33,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":85,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":122,"com.graphhopper.util.InstructionListTest.testWayList2":22,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":49,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":110,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":100,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":98,"com.graphhopper.util.InstructionListTest.testWayList":21,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":115,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":45,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":73,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":61,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":70,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":76,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":58,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":31,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":37,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":42,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":97,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":104,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":15,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":69,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":67,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":28,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":60,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":50,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":65,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":75,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":102,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":121,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":25,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":34,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":81,"com.graphhopper.routing.PathBidirRefTest.testExtract":23,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":26,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":1,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":125,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":13,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":35,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":8,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":111,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":12,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":11,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":10,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":9,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":59,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":88,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":47,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":78,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":103,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":52,"com.graphhopper.routing.PathBidirRefTest.testExtract2":24,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":64,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":2,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":127,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":36,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":101,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":77,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":54,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":86,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":90,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":112,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":53,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":79,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":43,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":124,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":120,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":30,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":107,"com.graphhopper.storage.GraphHopperStorageTest.testClone":106,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":84,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":113,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":46,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":68,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":72,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":95,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":63,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":40,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":39,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":128,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":93,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":4,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNoErrorOnEdgeCase_lastIndex":3,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":71,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":83,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":119,"com.graphhopper.GraphHopperTest.testVia":5,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":92,"com.graphhopper.GraphHopperAPITest.testLoad":6,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":51,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":55,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":89,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":105,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":66,"com.graphhopper.util.InstructionListTest.testFind":19,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":62,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":117,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":38,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":99,"com.graphhopper.util.GHUtilityTest.testCopy":16,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":41,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":94,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":74,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":116},"transformations":[{"failures":[0,1,2,3,4],"tindex":"a6432a5a-791d-11e5-a122-8fba115874df","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:306","type":"CtAssignmentImpl","sourcecode":"double = java.lang.Math.min((double / 1000), 50000)"},"variableMap":{"dist":"lat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.LinearKeyAlgo:87","type":"CtAssignmentImpl","sourcecode":"double = java.lang.Math.min(java.lang.Math.max(double, com.graphhopper.util.shapes.BBox.double), com.graphhopper.util.shapes.BBox.double)"},"status":-1},{"failures":[5,6],"tindex":"a643516b-791d-11e5-a122-29b7d5e662b2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:167","type":"CtAssignmentImpl","sourcecode":"double = double"},"variableMap":{"midLat":"fullDistance","maxLatTmp":"fullDistance"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:53","type":"CtOperatorAssignmentImpl","sourcecode":"double += com.graphhopper.routing.Path.getDistance()"},"status":-1},{"failures":[],"tindex":"a643516c-791d-11e5-a122-83b3ea72b41d","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:55","type":"CtLocalVariableImpl","sourcecode":"double double = (double * double) + (((double * double) * java.lang.Math.(java.lang.Math.cos(java.lang.Math.java.lang.Math.toRadians(double)))) * java.lang.Math.(java.lang.Math.cos(java.lang.Math.java.lang.Math.toRadians(double))))"},"variableMap":{"toLat":"toLat","fromLat":"toLat","sinDeltaLon":"fromLat","this":"this","sinDeltaLat":"fromLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistancePlaneProjection:40","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Math.java.lang.Math.toRadians((double - double))"},"status":-2},{"failures":[],"tindex":"a643516d-791d-11e5-a122-874cbed6d115","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:179","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.CHGraphImpl.checkNodeId(int)"},"status":0},{"failures":[],"tindex":"a643516e-791d-11e5-a122-cf3b49a9c4b5","series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:499","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.TranslationMap"},"variableMap":{"trMap":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.TranslationMap:66","type":"CtTryImpl","sourcecode":"try {\n    for (java.lang.String java.lang.String : com.graphhopper.util.TranslationMap.java.util.List<java.lang.String>) {\n        com.graphhopper.util.TranslationMap.TranslationHashMap com.graphhopper.util.TranslationMap.TranslationHashMap = new com.graphhopper.util.TranslationMap.TranslationHashMap(com.graphhopper.util.Helper.getLocale(java.lang.String));\n        com.graphhopper.util.TranslationMap.TranslationHashMap.doImport(com.graphhopper.util.TranslationMap.com.graphhopper.util.TranslationMap.getResourceAsStream((java.lang.String + \".txt\")));\n        com.graphhopper.util.TranslationMap.add(com.graphhopper.util.TranslationMap.TranslationHashMap);\n    }\n    com.graphhopper.util.TranslationMap.postImportHook();\n    return this;\n} catch (java.lang.Exception ex) {\n    throw new java.lang.RuntimeException(java.lang.Exception);\n}"},"status":-2},{"failures":[7],"tindex":"a643787f-791d-11e5-a122-f38361d4dd11","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.VLongStorage:168","type":"CtThrowImpl","sourcecode":"throw new java.lang.RuntimeException(\"Invalid vLong detected (negative values disallowed)\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:232","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"already closed\")"},"status":-1},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,6,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128],"tindex":"a6437880-791d-11e5-a122-ffec95bce131","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:255","type":"CtOperatorAssignmentImpl","sourcecode":"long |= long & 1"},"variableMap":{"res":"flags","value":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:318","type":"CtOperatorAssignmentImpl","sourcecode":"long |= com.graphhopper.routing.util.AbstractFlagEncoder.flagsDefault(boolean, boolean)"},"status":-1},{"failures":[],"tindex":"a6437881-791d-11e5-a122-9d0583d433dd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:204","type":"CtIfImpl","sourcecode":"if (int <= ((1 << int) - 12)) {\n    return (1 << int) - 12;\n} "},"variableMap":{"need":"intVal","i":"intVal"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:89","type":"CtIfImpl","sourcecode":"if (double == int)\n    return int;\n"},"status":-2},{"failures":[],"tindex":"a6437882-791d-11e5-a122-bf925d4103b3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDMap:85","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setBytes(long, byte[], 8)"},"status":-2},{"failures":[],"tindex":"a6437883-791d-11e5-a122-151b349b99da","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:45","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.AngleCalc.double"},"variableMap":{"angle":"turnCosts","com.graphhopper.util.AngleCalc.PI3_4":"turnCosts"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TurnWeighting:80","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.routing.util.TurnWeighting.calcTurnWeight(int, com.graphhopper.util.EdgeIteratorState.getBaseNode(), int)"},"status":-2},{"failures":[],"tindex":"a6439e94-791d-11e5-a122-6b8436ad71cd","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.DAType:78","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.DAType.isSynched())\n    throw new java.lang.IllegalStateException(\"something went wrong as DataAccess object is already synched!?\");\n"},"variableMap":{"type":"type"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:131","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.DAType.isSynched())\n    com.graphhopper.storage.DataAccess = new com.graphhopper.storage.SynchedDAWrapper(com.graphhopper.storage.DataAccess);\n"},"status":-2},{"failures":[],"tindex":"a6439e95-791d-11e5-a122-cd57daacd1b2","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.Dijkstra:98","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry"},"variableMap":{"parent":"edgeTo","currEdge":"edgeTo","nEdge":"edgeTo"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.PathBidirRef:75","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry"},"status":-2},{"failures":[],"tindex":"a6439e96-791d-11e5-a122-9d8a995bf569","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:112","type":"CtIfImpl","sourcecode":"if ((java.lang.String.substring(0, 1).charAt(0)) == 'S')\n    int = -int;\n"},"status":-2},{"failures":[],"tindex":"a6439e97-791d-11e5-a122-8b440c9eef48","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:673","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Restricted turn can only have infinite costs (or use 0)\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:447","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((((((\"Configured dimension (\" + (com.graphhopper.storage.NodeAccess.getDimension())) + \") is not equal \") + \"to dimension of loaded graph (\") + java.lang.String) + \")\"))"},"status":-2},{"failures":[],"tindex":"a6439e98-791d-11e5-a122-d9fb5a780ea5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:187","type":"CtAssignmentImpl","sourcecode":"int = (int) - 1"},"status":-2},{"failures":[],"tindex":"a6439e99-791d-11e5-a122-796efdebdec2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalc2D:58","type":"CtReturnImpl","sourcecode":"return (double * double) + (double * double)"},"variableMap":{"dX":"weight","dY":"weight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:189","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.AStar.AStarEdge.double"},"status":-2},{"failures":[],"tindex":"a6439e9a-791d-11e5-a122-e32324ab5f0d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:935","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.getNodes()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:468","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.loadWayGeometryHeader()"},"status":-2},{"failures":[],"tindex":"a643c5ab-791d-11e5-a122-45d393ec1eec","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:173","type":"CtIfImpl","sourcecode":"if (int < int) {\n    int = int;\n} "},"variableMap":{"max":"edgeId","tmpSize":"edgeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:533","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.storage.EdgeAccess.isInBounds(int)))\n    throw new java.lang.IllegalStateException(((\"edgeId \" + int) + \" out of bounds\"));\n"},"status":-2},{"failures":[],"tindex":"a643c5ac-791d-11e5-a122-5ddcdb5809a6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:136","type":"CtIfImpl","sourcecode":"if (!(boolean))\n    return false;\n"},"status":-2},{"failures":[],"tindex":"a643c5ad-791d-11e5-a122-9da1c61bcdaf","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:760","type":"CtIfImpl","sourcecode":"if (int >= (int))\n    throw new java.lang.IllegalStateException((\"graph is empty after in-place removal but was \" + int));\n"},"variableMap":{"removeNodeCount":"bucketSize","nodeCount":"currentBucket"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:63","type":"CtIfImpl","sourcecode":"if ((int) >= (int)) {\n    (int)++;\n    int = 0;\n} "},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
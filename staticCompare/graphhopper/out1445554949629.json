{"failureDictionary":{"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":1,"com.graphhopper.reader.OSMReaderTest.testMain":28,"com.graphhopper.routing.PathTest.testFindInstruction":41,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":19,"com.graphhopper.reader.OSMReaderTest.testFerry":26,"com.graphhopper.util.PointListTest.testReverse":16,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":25,"com.graphhopper.routing.QueryGraphTest.testOneWay":4,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":37,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":46,"com.graphhopper.reader.OSMReaderTest.testWithBounds":35,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":33,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":2,"com.graphhopper.storage.GraphHopperStorageTest.testClone":20,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":0,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":44,"com.graphhopper.GraphHopperTest.testPrepare":10,"com.graphhopper.GraphHopperTest.testFootAndCar":12,"com.graphhopper.util.InstructionListTest.testWayList2":53,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":17,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":42,"com.graphhopper.reader.OSMReaderTest.testFoot":27,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":3,"com.graphhopper.util.InstructionListTest.testWayList":52,"com.graphhopper.reader.OSMReaderTest.testOneWay":36,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":23,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":51,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":47,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":22,"com.graphhopper.GraphHopperTest.testPrepareOnly":45,"com.graphhopper.GraphHopperTest.testVia":9,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":15,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":34,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":31,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":43,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":40,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":32,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":13,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":18,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":38,"com.graphhopper.GraphHopperTest.testFootOnly":48,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":54,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":11,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":39,"com.graphhopper.reader.OSMReaderTest.testBarriers":30,"com.graphhopper.util.InstructionListTest.testFind":50,"com.graphhopper.GraphHopperTest.testLoadOSM":14,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":24,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":5,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":49,"com.graphhopper.util.GHUtilityTest.testCopy":55,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":8,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":7,"com.graphhopper.reader.OSMReaderTest.testSort":29,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":6,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":21},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],"tindex":"f8461bd3-7910-11e5-91cb-a7c33a97559b","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GHNodeAccess:90","type":"CtIfImpl","sourcecode":"if (!(boolean))\n    throw new java.lang.IllegalStateException(\"Cannot access elevation - 3D is not enabled\");\n"},"variableMap":{"elevation":"reverse"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:360","type":"CtIfImpl","sourcecode":"if (boolean)\n    com.graphhopper.util.PointList.reverse();\n"},"status":-1},{"failures":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,9,10,11,12,13,14,47,15,48,49,50,51,52,53,54,55],"tindex":"f84642e4-7910-11e5-91cb-ab08f445dd61","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.CompressedArray:87","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"variableMap":{"currentEntry":"E_NAME"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:252","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.storage.BaseGraph.nextEdgeEntryIndex(4)"},"status":-1},{"failures":[],"tindex":"f84642e5-7910-11e5-91cb-61ac17ea47dd","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.TranslationMap:216","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.Helper.isEmpty(java.lang.String))\n    return java.lang.String;\n"},"variableMap":{"val":"str","key":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PMap:141","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.Helper.isEmpty(java.lang.String)) {\n    return java.lang.String;\n} "},"status":0},{"failures":[],"tindex":"f84642e6-7910-11e5-91cb-cf80eca818f3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.PathNative:47","type":"CtIfImpl","sourcecode":"if ((int) < 0)\n    return this;\n"},"variableMap":{"endNode":"edge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:97","type":"CtWhileImpl","sourcecode":"while (true) {\n    int int = com.graphhopper.routing.AStar.AStarEdge.int;\n    (int)++;\n    if (com.graphhopper.routing.AStar.isWeightLimitExceeded())\n        return com.graphhopper.routing.AbstractRoutingAlgorithm.createEmptyPath();\n    \n    if (com.graphhopper.routing.AStar.finished())\n        break;\n    \n    com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        if (!com.graphhopper.routing.AbstractRoutingAlgorithm.(accept(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge.int)))\n            continue;\n        \n        int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n        int int = com.graphhopper.routing.util.TraversalMode.createTraversalId(com.graphhopper.util.EdgeIterator, false);\n        float float = ((float)((com.graphhopper.routing.util.Weighting.calcWeight(com.graphhopper.util.EdgeIterator, false, com.graphhopper.routing.AStar.AStarEdge.int)) + (com.graphhopper.routing.AStar.AStarEdge.double)));\n        if (java.lang.Double.isInfinite(float))\n            continue;\n        \n        com.graphhopper.routing.AStar.AStarEdge com.graphhopper.routing.AStar.AStarEdge = com.graphhopper.routing.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.get(int);\n        if ((com.graphhopper.routing.AStar.AStarEdge == null) || ((com.graphhopper.routing.AStar.AStarEdge.double) > float)) {\n            double = com.graphhopper.routing.util.WeightApproximator.approximate(int);\n            double = float + double;\n            if (com.graphhopper.routing.AStar.AStarEdge == null) {\n                com.graphhopper.routing.AStar.AStarEdge = new com.graphhopper.routing.AStar.AStarEdge(com.graphhopper.util.EdgeIterator.getEdge() , int , double , float);\n                com.graphhopper.routing.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.put(int, com.graphhopper.routing.AStar.AStarEdge);\n            } else {\n                assert (com.graphhopper.routing.AStar.AStarEdge.double) > double : \"Inconsistent distance estimate\";\n                java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.remove(com.graphhopper.routing.AStar.AStarEdge);\n                com.graphhopper.routing.AStar.AStarEdge.int = com.graphhopper.util.EdgeIterator.getEdge();\n                com.graphhopper.routing.AStar.AStarEdge.double = double;\n                com.graphhopper.routing.AStar.AStarEdge.double = float;\n            }\n            com.graphhopper.routing.AStar.AStarEdge.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge;\n            java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.add(com.graphhopper.routing.AStar.AStarEdge);\n            com.graphhopper.routing.AbstractRoutingAlgorithm.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge, int);\n        } \n    }\n    if (java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.isEmpty())\n        return com.graphhopper.routing.AbstractRoutingAlgorithm.createEmptyPath();\n    \n    com.graphhopper.routing.AStar.AStarEdge = java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.poll();\n    if ((com.graphhopper.routing.AStar.AStarEdge) == null)\n        throw new java.lang.AssertionError(\"Empty edge cannot happen\");\n    \n}"},"status":-2},{"failures":[],"tindex":"f84642e7-7910-11e5-91cb-2d5e6ef0565a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:144","type":"CtReturnImpl","sourcecode":"return (com.graphhopper.util.EdgeIterator) == null"},"variableMap":{"iter":"iter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:295","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.routing.util.FlagEncoder com.graphhopper.routing.util.FlagEncoder : java.util.List<com.graphhopper.routing.util.FlagEncoder>) {\n    if ((com.graphhopper.routing.util.FlagEncoder.isBackward(com.graphhopper.util.EdgeIterator.getFlags())) || (com.graphhopper.routing.util.FlagEncoder.isForward(com.graphhopper.util.EdgeIterator.getFlags())))\n        return false;\n    \n}"},"status":-2},{"failures":[],"tindex":"f84669f8-7910-11e5-91cb-f9094e59ee97","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.BigLongIntMap:78","type":"CtReturnImpl","sourcecode":"return long"},"variableMap":{"cap":"directionBitMask"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:288","type":"CtReturnImpl","sourcecode":"return long ^ (long)"},"status":-2},{"failures":[],"tindex":"f84669f9-7910-11e5-91cb-6fa05fabbf67","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:252","type":"CtIfImpl","sourcecode":"if (int <= 0)\n    throw new java.lang.IllegalStateException(\"Negative precision is not allowed!\");\n"},"variableMap":{"minResolutionInMeter":"subnetworks"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:75","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.routing.util.FlagEncoder com.graphhopper.routing.util.FlagEncoder : java.util.List<com.graphhopper.routing.util.FlagEncoder>) {\n    com.graphhopper.routing.util.PrepareRoutingSubnetworks.PrepEdgeFilter com.graphhopper.routing.util.PrepareRoutingSubnetworks.PrepEdgeFilter = new com.graphhopper.routing.util.PrepareRoutingSubnetworks.PrepEdgeFilter(com.graphhopper.routing.util.FlagEncoder);\n    if ((int) > 0)\n        int += com.graphhopper.routing.util.PrepareRoutingSubnetworks.removeDeadEndUnvisitedNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks.PrepEdgeFilter);\n    \n    java.util.List<com.graphhopper.routing.util.TIntArrayList> java.util.List<com.graphhopper.routing.util.TIntArrayList> = com.graphhopper.routing.util.PrepareRoutingSubnetworks.findSubnetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks.PrepEdgeFilter);\n    com.graphhopper.routing.util.PrepareRoutingSubnetworks.keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks.PrepEdgeFilter, java.util.List<com.graphhopper.routing.util.TIntArrayList>);\n    int = java.lang.Math.max(java.util.List<com.graphhopper.routing.util.TIntArrayList>.size(), int);\n}"},"status":-2},{"failures":[],"tindex":"f84669fa-7910-11e5-91cb-5f718bd5a18f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GHRequest:255","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = java.lang.String"},"status":-2},{"failures":[],"tindex":"f84669fb-7910-11e5-91cb-c36ec3f05c35","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GHResponse:184","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.PointList.getEle(int)"},"variableMap":{"i":"i","list":"points"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:140","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.PointList.getLatitude(int)"},"status":-2},{"failures":[],"tindex":"f84669fc-7910-11e5-91cb-11b24bf9ab74","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:447","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:114","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    java.util.Set<java.lang.Integer>.add(com.graphhopper.util.EdgeIterator.getAdjNode());\n}"},"status":-2},{"failures":[],"tindex":"f84669fd-7910-11e5-91cb-2366538cae3f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.LinearKeyAlgo:105","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.shapes.GHPoint.double = double + ((double) / 2)"},"variableMap":{"latDelta":"dMinLat","latLon":"query","lat":"minLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:666","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.DistanceCalc.calcDist(com.graphhopper.util.shapes.GHPoint.double, com.graphhopper.util.shapes.GHPoint.double, double, com.graphhopper.util.shapes.GHPoint.double)"},"status":-2},{"failures":[],"tindex":"f846910e-7910-11e5-91cb-531c787aede4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:184","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Math.max(((int)(java.lang.Math.pow(2, int))), com.graphhopper.storage.AbstractDataAccess.int)"},"variableMap":{"com.graphhopper.storage.AbstractDataAccess.SEGMENT_SIZE_MIN":"encoderCount","tmp":"usedBits","segmentSizeInBytes":"encoderCount"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:204","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.routing.util.AbstractFlagEncoder.defineTurnBits(int, int)"},"status":-2},{"failures":[],"tindex":"f846910f-7910-11e5-91cb-31d2dd1d7e7a","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:155","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.StopWatch.stop()"},"variableMap":{"sw2":"sw"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1047","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch().start()"},"status":-2},{"failures":[],"tindex":"f8469110-7910-11e5-91cb-8db0524e75fa","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:269","type":"CtLocalVariableImpl","sourcecode":"long long = long >> 1"},"variableMap":{"bytePos":"lastKey"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:86","type":"CtLocalVariableImpl","sourcecode":"long long = long - (long)"},"status":-2},{"failures":[],"tindex":"f8469111-7910-11e5-91cb-1f3933e0f377","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:154","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:104","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.AStar.finished())\n    break;\n"},"status":-2},{"failures":[],"tindex":"f8469112-7910-11e5-91cb-37b0924e1a9d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:124","type":"CtIfImpl","sourcecode":"if (int > 0)\n    continue;\n"},"variableMap":{"i":"com.graphhopper.routing.util.FlagEncoder.K_ROUNDABOUT"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:338","type":"CtIfImpl","sourcecode":"if (boolean) {\n    long = com.graphhopper.routing.util.BikeCommonFlagEncoder.setBool(long, com.graphhopper.routing.util.FlagEncoder.int, true);\n} "},"status":-2},{"failures":[],"tindex":"f8469113-7910-11e5-91cb-a557cc38c3eb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:330","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":-2},{"failures":[],"tindex":"f8469114-7910-11e5-91cb-e3e787ee1a93","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:577","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.CHGraphImpl.this.getWeight(this)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:77","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.EncodedDoubleValue.getDoubleValue(long)"},"status":-2},{"failures":[],"tindex":"f8469115-7910-11e5-91cb-2d2e330b5578","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.UnsafeDataAccess:267","type":"CtIfImpl","sourcecode":"if (long > (this.long))\n    throw new java.lang.IllegalStateException(\"Use ensureCapacity to increase capacity!\");\n"},"variableMap":{"bytes":"nodeFlags","capacity":"nodeFlags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:572","type":"CtIfImpl","sourcecode":"if (long != 0)\n    com.graphhopper.reader.OSMReader.getNodeFlagsMap().put(com.graphhopper.reader.OSMNode.getId(), long);\n"},"status":-2},{"failures":[],"tindex":"f846b826-7910-11e5-91cb-d5f653637446","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:801","type":"CtIfImpl","sourcecode":"if (int < 0)\n    continue;\n"},"variableMap":{"index":"edgeEntryBytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:219","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setHeader(0, int)"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
{"failureDictionary":{"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":89,"com.graphhopper.GraphHopperAPITest.testNoLoad":40,"com.graphhopper.routing.PathTest.testFindInstruction":59,"com.graphhopper.reader.OSMReaderTest.testFerry":62,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":86,"com.graphhopper.routing.QueryGraphTest.testOneWay":96,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":25,"com.graphhopper.util.InstructionListTest.testEmptyList":6,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":81,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":43,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":82,"com.graphhopper.reader.OSMReaderTest.testWithBounds":73,"com.graphhopper.storage.MMapDataAccessTest.testLoadFlush":78,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":91,"com.graphhopper.coll.CompressedArrayTest.testCompress":77,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":79,"com.graphhopper.coll.OSMIDMapTest.testUpdateOfLowerKeys":3,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":4,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":17,"com.graphhopper.GraphHopperTest.testPrepare":27,"com.graphhopper.util.InstructionListTest.testWayList2":13,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":84,"com.graphhopper.routing.util.BikeFlagEncoderTest.testclassBicycle":100,"com.graphhopper.reader.OSMReaderTest.testFoot":63,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":94,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":97,"com.graphhopper.util.InstructionListTest.testWayList":9,"com.graphhopper.reader.OSMReaderTest.testOneWay":75,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":8,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":44,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":48,"com.graphhopper.GraphHopperAPITest.testDisconnected179":39,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":47,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":33,"com.graphhopper.util.TranslationMapTest.testToRoundaboutString":16,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":61,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":67,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":57,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":68,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":45,"com.graphhopper.GraphHopperTest.testNoNPE_ifLoadNotSuccessful":37,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":53,"com.graphhopper.coll.OSMIDMapTest.testGet":0,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":28,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":24,"com.graphhopper.GraphHopperTest.testLoadOSM":31,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":19,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testclassBicycle":101,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":23,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":22,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":21,"com.graphhopper.reader.OSMReaderTest.testSort":65,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":20,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":72,"com.graphhopper.reader.OSMReaderTest.testMain":64,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":46,"com.graphhopper.util.InstructionListTest.testRoundaboutJsonNaN":11,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":93,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":52,"com.graphhopper.routing.PathTest.testWayList":58,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":51,"com.graphhopper.coll.OSMIDMapTest.testGet2":1,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":85,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":69,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":88,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":74,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":41,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":83,"com.graphhopper.GraphHopperTest.testFootAndCar":29,"com.graphhopper.GraphHopperTest.testFailsForMissingParameters":32,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":42,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":49,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":60,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":50,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":95,"com.graphhopper.routing.PathTest.testTime":55,"com.graphhopper.coll.OSMIDMapTest.testGetLong":2,"com.graphhopper.util.InstructionListTest.testCreateGPX":12,"com.graphhopper.util.InstructionListTest.testRoundaboutJsonIntegrity":7,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":92,"com.graphhopper.GraphHopperTest.testPrepareOnly":18,"com.graphhopper.coll.CompressedArrayTest.testCompress2":76,"com.graphhopper.GraphHopperTest.testVia":26,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":98,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":34,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":87,"com.graphhopper.util.InstructionListTest.testCreateGPXWithEle":10,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":71,"com.graphhopper.GraphHopperAPITest.testLoad":38,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":30,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":90,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":14,"com.graphhopper.util.TranslationMapTest.testToString":15,"com.graphhopper.GraphHopperTest.testFootOnly":35,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":70,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":56,"com.graphhopper.util.InstructionListTest.testFind":5,"com.graphhopper.reader.OSMReaderTest.testBarriers":66,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testclassBicycle":99,"com.graphhopper.routing.PathTest.testFound":54,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":36,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":80},"transformations":[{"failures":[],"tindex":"6c49e4ab-8273-11e5-9f9b-99064f0231ae","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:221","type":"CtLocalVariableImpl","sourcecode":"double double = (double - double) - double"},"variableMap":{"incDist2DSum":"minLon","fullDist2D":"minLon","decDist2DSum":"minLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:218","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.shapes.BBox.double"},"status":-2},{"failures":[],"tindex":"6c4b6b4c-8273-11e5-9f9b-45161bd19e8f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:219","type":"CtLocalVariableImpl","sourcecode":"double double = double > 1 ? double / double : 0"},"variableMap":{"incEleSum":"lon","incDist2DSum":"lon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:203","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.DistanceCalc.calcNormalizedDist(com.graphhopper.util.shapes.GHPoint.double, com.graphhopper.util.shapes.GHPoint.double, double, double)"},"status":0},{"failures":[],"tindex":"6c4b6b4d-8273-11e5-9f9b-b5b73c8a458e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:153","type":"CtIfImpl","sourcecode":"if (double >= 64) {\n    int = 64;\n} else if (double >= 16) {\n    int = 16;\n} else if (double >= 4) {\n    int = 4;\n} else {\n    break;\n}"},"variableMap":{"tmp":"weightOfVisitedPath","tmpNo":"edge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:245","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    if (!com.graphhopper.routing.AbstractRoutingAlgorithm.(accept(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge.int)))\n        continue;\n    \n    int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n    int int = com.graphhopper.routing.util.TraversalMode.createTraversalId(com.graphhopper.util.EdgeIterator, boolean);\n    float float = ((float)((com.graphhopper.routing.util.Weighting.calcWeight(com.graphhopper.util.EdgeIterator, boolean, com.graphhopper.routing.AStar.AStarEdge.int)) + (com.graphhopper.routing.AStar.AStarEdge.double)));\n    if (java.lang.Double.isInfinite(float))\n        continue;\n    \n    com.graphhopper.routing.AStar.AStarEdge com.graphhopper.routing.AStar.AStarEdge = gnu.trove.map.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.get(int);\n    if ((com.graphhopper.routing.AStar.AStarEdge == null) || ((com.graphhopper.routing.AStar.AStarEdge.double) > float)) {\n        double double = com.graphhopper.routing.util.ConsistentWeightApproximator.approximate(int, boolean);\n        double double = float + double;\n        if (com.graphhopper.routing.AStar.AStarEdge == null) {\n            com.graphhopper.routing.AStar.AStarEdge = new com.graphhopper.routing.AStar.AStarEdge(com.graphhopper.util.EdgeIterator.getEdge() , int , double , float);\n            gnu.trove.map.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.put(int, com.graphhopper.routing.AStar.AStarEdge);\n        } else {\n            assert (com.graphhopper.routing.AStar.AStarEdge.double) > double : \"Inconsistent distance estimate\";\n            java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.remove(com.graphhopper.routing.AStar.AStarEdge);\n            com.graphhopper.routing.AStar.AStarEdge.int = com.graphhopper.util.EdgeIterator.getEdge();\n            com.graphhopper.routing.AStar.AStarEdge.double = double;\n            com.graphhopper.routing.AStar.AStarEdge.double = float;\n        }\n        com.graphhopper.routing.AStar.AStarEdge.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge;\n        java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.add(com.graphhopper.routing.AStar.AStarEdge);\n        com.graphhopper.routing.AStarBidirection.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge, int);\n    } \n}"},"status":-2},{"failures":[],"tindex":"6c4b925e-8273-11e5-9f9b-a74bacc33d9f","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:124","type":"CtIfImpl","sourcecode":"if (int > 0)\n    continue;\n"},"variableMap":{"i":"remainingSegNo"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:424","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.MMapDataAccess.clean(int, java.util.List<java.nio.ByteBuffer>.size())"},"status":-2},{"failures":[0,1,2,3],"tindex":"6c4b925f-8273-11e5-9f9b-73c66090b91d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:284","type":"CtLocalVariableImpl","sourcecode":"long long = long & (long)"},"variableMap":{"directionBitMask":"size","flags":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDMap:80","type":"CtLocalVariableImpl","sourcecode":"long long = (long) * 2"},"status":-1},{"failures":[],"tindex":"6c4b9260-8273-11e5-9f9b-3542bfc00fbe","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:424","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.MMapDataAccess.clean(int, java.util.List<java.nio.ByteBuffer>.size())"},"status":0},{"failures":[],"tindex":"6c4bb971-8273-11e5-9f9b-dd0ab57adcb2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:476","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.EdgeIteratorState.setDistance(com.graphhopper.storage.BaseGraph.CommonEdgeIterator.getDistance()).setName(com.graphhopper.storage.BaseGraph.CommonEdgeIterator.getName()).setFlags(com.graphhopper.storage.BaseGraph.CommonEdgeIterator.getDirectFlags())"},"status":0},{"failures":[],"tindex":"6c4bb972-8273-11e5-9f9b-cfd10433b743","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:96","type":"CtAssignmentImpl","sourcecode":"double = double + (2 * (java.lang.Math.double))"},"variableMap":{"resultOrientation":"midLon","orientation":"minLonTmp","java.lang.Math.PI":"midLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:191","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":0},{"failures":[4],"tindex":"6c4bb973-8273-11e5-9f9b-bdf319f603e8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:447","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:770","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double = double;\n} "},"status":-2},{"failures":[],"tindex":"6c4bb974-8273-11e5-9f9b-e51c40c0372b","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:476","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.EdgeIteratorState.setDistance(com.graphhopper.storage.BaseGraph.CommonEdgeIterator.getDistance()).setName(com.graphhopper.storage.BaseGraph.CommonEdgeIterator.getName()).setFlags(com.graphhopper.storage.BaseGraph.CommonEdgeIterator.getDirectFlags())"},"variableMap":{"from":"detach","to":"closestEdge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.QueryResult:131","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.EdgeIteratorState = com.graphhopper.util.EdgeIteratorState"},"status":-2},{"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"tindex":"6c4be085-8273-11e5-9f9b-d176a6a78fd2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.pbf.PbfBlobDecoder:102","type":"CtIfImpl","sourcecode":"if ((java.util.List<java.lang.String>.size()) > 0) {\n    throw new java.lang.RuntimeException((\"PBF file contains unsupported features \" + java.util.List<java.lang.String>));\n} "},"variableMap":{"unsupportedFeatures":"com.graphhopper.util.TranslationMap.LOCALES"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.TranslationMap:68","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : com.graphhopper.util.TranslationMap.java.util.List<java.lang.String>) {\n    com.graphhopper.util.TranslationMap.TranslationHashMap com.graphhopper.util.TranslationMap.TranslationHashMap = new com.graphhopper.util.TranslationMap.TranslationHashMap(com.graphhopper.util.Helper.getLocale(java.lang.String));\n    com.graphhopper.util.TranslationMap.TranslationHashMap.doImport(com.graphhopper.util.TranslationMap.com.graphhopper.util.TranslationMap.getResourceAsStream((java.lang.String + \".txt\")));\n    com.graphhopper.util.TranslationMap.add(com.graphhopper.util.TranslationMap.TranslationHashMap);\n}"},"status":-1},{"failures":[76,77],"tindex":"6c4be086-8273-11e5-9f9b-7300f370e780","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtilBig:103","type":"CtOperatorAssignmentImpl","sourcecode":"byte |= 1"},"variableMap":{"res":"b"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:156","type":"CtAssignmentImpl","sourcecode":"byte = com.graphhopper.storage.VLongStorage.readByte()"},"status":-1},{"failures":[78],"tindex":"6c4be087-8273-11e5-9f9b-93ef54b8c3f4","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(5);\n} catch (java.lang.InterruptedException iex) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:260","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(int[], int, ((int) + 1), 0)"},"status":-1},{"failures":[],"tindex":"6c4c0798-8273-11e5-9f9b-275b77e55ad1","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistanceCalc3D:45","type":"CtReturnImpl","sourcecode":"return \"EXACT3D\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:364","type":"CtReturnImpl","sourcecode":"return ((((((((((com.graphhopper.storage.GraphHopperStorage.isCHPossible() ? \"CH|\" : \"\") + (com.graphhopper.routing.util.EncodingManager)) + \"|\") + (com.graphhopper.storage.GraphHopperStorage.getDirectory().getDefaultType())) + \"|\") + (com.graphhopper.storage.BaseGraph.com.graphhopper.storage.NodeAccess.getDimension())) + \"D\") + \"|\") + (com.graphhopper.storage.BaseGraph.com.graphhopper.storage.GraphExtension)) + \"|\") + (com.graphhopper.storage.GraphHopperStorage.getProperties().versionsToString())"},"status":-2},{"failures":[19,20,21,22,23,26,27,28,29,30,31,34,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],"tindex":"6c4c0799-8273-11e5-9f9b-5ff9350e81a4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:135","type":"CtOperatorAssignmentImpl","sourcecode":"int -= int"},"variableMap":{"err":"current","dLat":"current"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.VirtualEdgeIterator:57","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-1},{"failures":[],"tindex":"6c4c079a-8273-11e5-9f9b-bbbd39eb8ee4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:134","type":"CtAssignmentImpl","sourcecode":"java.lang.String = \"NE\""},"variableMap":{"cp":"name"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.search.NameIndex:106","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String"},"status":0},{"failures":[98],"tindex":"6c4c079b-8273-11e5-9f9b-7b26a2096f06","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:230","type":"CtAssignmentImpl","sourcecode":"double = double * double"},"status":-1},{"failures":[99,100,101],"tindex":"6c4c2eac-8273-11e5-9f9b-dd46241bb9ea","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:565","type":"CtIfImpl","sourcecode":"if (java.lang.String != null) {\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(100.0, com.graphhopper.routing.util.BikeCommonFlagEncoder.convertCallValueToPriority(java.lang.String).getValue());\n} else {\n    java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"class:bicycle\");\n    if (java.lang.String != null)\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(100.0, com.graphhopper.routing.util.BikeCommonFlagEncoder.convertCallValueToPriority(java.lang.String).getValue());\n    \n}"},"status":-1},{"failures":[26,27,28,29,30,31,34,35,36,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"tindex":"6c4c2ead-8273-11e5-9f9b-a92740801240","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:658","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-1},{"failures":[],"tindex":"6c4c2eae-8273-11e5-9f9b-c184f5e2db15","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:245","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.PrepareRoutingSubnetworks.removeEdges(com.graphhopper.util.EdgeExplorer, com.graphhopper.routing.util.FlagEncoder, gnu.trove.list.array.TIntArrayList, int)"},"status":0}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"6c4b9260-8273-11e5-9f9b-3542bfc00fbe","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.MMapDataAccess.clean","java.util.List<java.nio.ByteBuffer>.size"]},"type":"staticDiff"},{"branches":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":["com.graphhopper.storage.MMapDataAccess_void_clean(int,int).b"]},"type":"branch"}]},{"transformation":"6c4bb971-8273-11e5-9f9b-dd0ab57adcb2","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.BaseGraph.CommonEdgeIterator.getDirectFlags","com.graphhopper.storage.BaseGraph.CommonEdgeIterator.getDistance","com.graphhopper.storage.BaseGraph.CommonEdgeIterator.getName","com.graphhopper.util.EdgeIteratorState.setDistance","com.graphhopper.util.EdgeIteratorState.setName","com.graphhopper.util.EdgeIteratorState.setFlags"]},"type":"staticDiff"}]},{"transformation":"6c4c2eae-8273-11e5-9f9b-c184f5e2db15","diffs":[{"methodsDiff":{"delete":["com.graphhopper.routing.util.PrepareRoutingSubnetworks.removeEdges"]},"type":"staticDiff"}]},{"transformation":"6c4b6b4c-8273-11e5-9f9b-45161bd19e8f","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.DistanceCalc.calcNormalizedDist"]},"type":"staticDiff"}]}]}
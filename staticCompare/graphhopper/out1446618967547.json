{"failureDictionary":{"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":55,"com.graphhopper.reader.OSMReaderTest.testMain":49,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":86,"com.graphhopper.reader.OSMReaderTest.testFerry":48,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":73,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":76,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":27,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":24,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":44,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":60,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":15,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":77,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":85,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":22,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":83,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeightMMap":0,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":11,"com.graphhopper.reader.OSMReaderTest.testWithBounds":56,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":5,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":14,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":78,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeight":2,"com.graphhopper.coll.CompressedArrayTest.testCompress":68,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":32,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":57,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":33,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":7,"com.graphhopper.storage.StorablePropertiesTest.testStore":70,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":43,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":35,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":39,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":74,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":59,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":36,"com.graphhopper.GraphHopperTest.testPrepare":62,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":69,"com.graphhopper.GraphHopperTest.testFootAndCar":29,"com.graphhopper.reader.dem.SRTMProviderTest.testGetFileString":1,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":81,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":9,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":10,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":20,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":45,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":21,"com.graphhopper.reader.OSMReaderTest.testFoot":4,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":75,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":80,"com.graphhopper.reader.OSMReaderTest.testOneWay":58,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":87,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":23,"com.graphhopper.storage.StorablePropertiesTest.testVersionCheck":90,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":19,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":18,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":8,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":47,"com.graphhopper.GraphHopperTest.testPrepareOnly":28,"com.graphhopper.coll.CompressedArrayTest.testCompress2":67,"com.graphhopper.GraphHopperTest.testVia":61,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":88,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":34,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":65,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":72,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":79,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":54,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":52,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":84,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":3,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":64,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":25,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":16,"com.graphhopper.GraphHopperTest.testFootOnly":30,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":82,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":26,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":31,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":37,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":63,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":53,"com.graphhopper.reader.OSMReaderTest.testBarriers":51,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":6,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":38,"com.graphhopper.routing.util.FootFlagEncoderTest.handleWayTagsRoundabout":13,"com.graphhopper.GraphHopperTest.testLoadOSM":46,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":12,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":40,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":66,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":42,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":89,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":17,"com.graphhopper.reader.OSMReaderTest.testSort":50,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":41,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":71},"transformations":[{"failures":[0,0,1,1,2,2,3],"tindex":"5461f137-82be-11e5-8337-65d4f5c1bed1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:301","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : java.lang.String.split(\";\")) {\n    if (java.lang.String.trim().isEmpty())\n        continue;\n    \n    if (int > 0)\n        java.lang.String += \", \";\n    \n    java.lang.String += java.lang.String.trim();\n    int++;\n}"},"variableMap":{"str":"line","destination":"line","counter":"lat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:112","type":"CtIfImpl","sourcecode":"if ((java.lang.String.substring(0, 1).charAt(0)) == 'S')\n    int = -int;\n"},"status":-1},{"failures":[],"tindex":"54621848-82be-11e5-8337-0b301cbb2a2a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(5);\n} catch (java.lang.InterruptedException iex) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:557","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.CHEdgeIterator.isShortcut())\n    int++;\n"},"status":0},{"failures":[],"tindex":"54621849-82be-11e5-8337-e58814ca0757","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:191","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(5)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:853","type":"CtIfImpl","sourcecode":"if (boolean)\n    com.graphhopper.GraphHopper.createCHPreparations();\n"},"status":-2},{"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],"tindex":"54623f5a-82be-11e5-8337-5b42bbb876ba","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.EncodedValue:94","type":"CtOperatorAssignmentImpl","sourcecode":"long &= long"},"variableMap":{"flags":"flags","mask":"mask"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedValue:85","type":"CtOperatorAssignmentImpl","sourcecode":"long &= ~(long)"},"status":-1},{"failures":[31,32,33,34,35,36,37,38],"tindex":"54623f5b-82be-11e5-8337-a76fad86932a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:265","type":"CtWhileImpl","sourcecode":"while (!(com.graphhopper.coll.GHTreeMapComposed.isEmpty())) {\n    if ((boolean && ((long) > 0)) && (((long) % long) == 0)) {\n        com.graphhopper.util.StopWatch.start();\n        com.graphhopper.coll.GHTreeMapComposed.clear();\n        int int = com.graphhopper.storage.CHGraphImpl.getNodes();\n        for (int int = 0 ; int < int ; int++) {\n            if ((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int))\n                continue;\n            \n            int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n            com.graphhopper.coll.GHTreeMapComposed.insert(int, int);\n        }\n        com.graphhopper.util.StopWatch.stop();\n        int++;\n        if (com.graphhopper.coll.GHTreeMapComposed.isEmpty())\n            throw new java.lang.IllegalStateException(\"Cannot prepare as no unprepared nodes where found. Called preparation twice?\");\n        \n    } \n    if (((long) % long) == 0) {\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        org.slf4j.Logger.info((((((((((((((((((com.graphhopper.util.Helper.nf(long)) + \", updates:\") + int) + \", nodes: \") + (com.graphhopper.util.Helper.nf(com.graphhopper.coll.GHTreeMapComposed.getSize()))) + \", shortcuts:\") + (com.graphhopper.util.Helper.nf(int))) + \", dijkstras:\") + (com.graphhopper.util.Helper.nf(long))) + \", \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getTimesAsString())) + \", meanDegree:\") + ((long)(double))) + \", algo:\") + (com.graphhopper.routing.DijkstraOneToMany.getMemoryUsageAsString())) + \", \") + (com.graphhopper.util.Helper.getMemInfo())));\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n    } \n    (long)++;\n    int int = com.graphhopper.coll.GHTreeMapComposed.pollKey();\n    if ((!(com.graphhopper.coll.GHTreeMapComposed.isEmpty())) && ((com.graphhopper.coll.GHTreeMapComposed.getSize()) < long)) {\n        com.graphhopper.util.StopWatch.start();\n        int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n        if (int > (com.graphhopper.coll.GHTreeMapComposed.peekValue())) {\n            com.graphhopper.coll.GHTreeMapComposed.insert(int, int);\n            com.graphhopper.util.StopWatch.stop();\n            continue;\n        } \n        com.graphhopper.util.StopWatch.stop();\n    } \n    int += com.graphhopper.routing.ch.PrepareContractionHierarchies.addShortcuts(int);\n    com.graphhopper.storage.CHGraphImpl.setLevel(int, int);\n    int++;\n    if ((com.graphhopper.coll.GHTreeMapComposed.getSize()) < long)\n        break;\n    \n    com.graphhopper.util.CHEdgeIterator com.graphhopper.util.CHEdgeIterator = com.graphhopper.util.CHEdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.CHEdgeIterator.next()) {\n        int int = com.graphhopper.util.CHEdgeIterator.getAdjNode();\n        if ((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int))\n            continue;\n        \n        if (boolean && ((java.util.Random.nextInt(100)) < (int))) {\n            com.graphhopper.util.StopWatch.start();\n            int int = int[][int];\n            int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n            if (int != int)\n                com.graphhopper.coll.GHTreeMapComposed.update(int, int, int);\n            \n            com.graphhopper.util.StopWatch.stop();\n        } \n        com.graphhopper.storage.CHGraphImpl.disconnect(com.graphhopper.util.CHEdgeExplorer, com.graphhopper.util.CHEdgeIterator);\n    }\n}"},"status":-1},{"failures":[39,40,41,42],"tindex":"5462666c-82be-11e5-8337-81abd3ce85a8","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.QueryGraph:452","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.VirtualEdgeIteratorState.setVirtualEdgePreference(false)"},"variableMap":{"edge":"edge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:410","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.VirtualEdgeIteratorState.setVirtualEdgePreference(true)"},"status":-1},{"failures":[43,44,45,28,46,47],"tindex":"5462666d-82be-11e5-8337-d79ada7268e5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:222","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setSegmentSize(com.graphhopper.storage.DataAccess.getSegmentSize())"},"variableMap":{"indexCopy":"shortcuts","index":"shortcuts"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:678","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.create(long)"},"status":-1},{"failures":[48,4,49,50,51,52,3,5,53,54,55,56,57,58,59,28,60,61,62,63,29,64,46,47,65,30,66],"tindex":"54628d7e-82be-11e5-8337-6f9f9a777296","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.VLongStorage:45","type":"CtAssignmentImpl","sourcecode":"int = ((int)(long))"},"variableMap":{"pointer":"id","pos":"osmId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:657","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.OSMReader.getNodeMap().put(long, int)"},"status":-1},{"failures":[67,68],"tindex":"54628d7f-82be-11e5-8337-71751efa9203","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtilBig:103","type":"CtOperatorAssignmentImpl","sourcecode":"byte |= 1"},"variableMap":{"res":"b"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:156","type":"CtAssignmentImpl","sourcecode":"byte = com.graphhopper.storage.VLongStorage.readByte()"},"status":-1},{"failures":[],"tindex":"54628d80-82be-11e5-8337-75f3411b36f2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.NativeFSLockFactory:240","type":"CtLocalVariableImpl","sourcecode":"java.io.File java.io.File = new java.io.File(\"tmp.lock\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:723","type":"CtLocalVariableImpl","sourcecode":"java.io.File java.io.File = new java.io.File((java.lang.String + \".ghz\"))"},"status":-2},{"failures":[],"tindex":"54628d81-82be-11e5-8337-574f27e1ba99","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:40","type":"CtLocalVariableImpl","sourcecode":"double double = (java.lang.Math.abs(double)) + 1.0E-10"},"variableMap":{"y":"deltaLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:652","type":"CtLocalVariableImpl","sourcecode":"double double = (com.graphhopper.util.shapes.GHPoint.double) - ((0.5 + int) * (double))"},"status":0},{"failures":[69],"tindex":"5462b492-82be-11e5-8337-531628dfebb6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:373","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-1},{"failures":[70,71,72,43,44,45,73,74,28,64,46,47,65],"tindex":"5462b493-82be-11e5-8337-251ef33ceebd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:125","type":"CtInvocationImpl","sourcecode":"java.util.Map<java.lang.String, java.lang.String>.put(java.lang.String, java.lang.String)"},"status":-1},{"failures":[71,43,45,73,46,65],"tindex":"5462b494-82be-11e5-8337-77e2803bbcd4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:196","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setHeader((3 * 4), com.graphhopper.util.Helper.degreeToInt(com.graphhopper.util.shapes.BBox.double))"},"status":-1},{"failures":[75,33,76,34,77,78,79,80,81,82],"tindex":"5462b495-82be-11e5-8337-65e9a757177d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:96","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.ch.Path4CH.expandEdge(com.graphhopper.util.CHEdgeIteratorState, true)"},"status":-1},{"failures":[],"tindex":"5462b496-82be-11e5-8337-f106980a762e","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PointList:110","type":"CtAssignmentImpl","sourcecode":"int = 15"},"variableMap":{"cap":"id"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:555","type":"CtAssignmentImpl","sourcecode":"int = int - 3"},"status":0},{"failures":[83,84,85,86,87,88,89],"tindex":"5462dba7-82be-11e5-8337-3df53910a5e6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:767","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.storage.NodeAccess.getLat(int)"},"variableMap":{"node":"node","nodeAccess":"nodeAccess"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:110","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.storage.NodeAccess.getLongitude(int)"},"status":-1},{"failures":[],"tindex":"5462dba8-82be-11e5-8337-a9d241a2fc69","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHNodeAccess:105","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.GHNodeAccess.getLatitude(int)"},"variableMap":{"this":"nodeAccess","nodeId":"id"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:532","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.NodeAccess.getLatitude(int)"},"status":-2},{"failures":[90],"tindex":"5462dba9-82be-11e5-8337-b9441c1576b4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:362","type":"CtIfImpl","sourcecode":"if (int == int)\n    return true;\n"},"variableMap":{"baseNode":"vers","id":"vers"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:179","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.equals((int + \"\")))) {\n    if (boolean) {\n        return false;\n    } \n    throw new java.lang.IllegalStateException((((((\"Version of \" + java.lang.String) + \" unsupported: \") + java.lang.String) + \", expected:\") + int));\n} "},"status":-1},{"failures":[],"tindex":"5462dbaa-82be-11e5-8337-556eabf5ed79","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.EdgeEntry:52","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry.clone()"},"variableMap":{"parent":"parent","cl":"currEdge","tmpPrev":"nEdge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Dijkstra:98","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"54628d81-82be-11e5-8337-574f27e1ba99","diffs":[{"branches":{"com.graphhopper.GraphHopperAPITest.testLoad":["com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e1"],"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":["com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e1"],"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":["com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e1"],"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":["com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e1"]},"type":"branch"}]},{"transformation":"54621848-82be-11e5-8337-0b301cbb2a2a","diffs":[{"branchesDiff":{"delete":["t0"]},"type":"staticDiff"}]}]}
{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":158,"com.graphhopper.routing.util.FootFlagEncoderTest.testPriority":76,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":340,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":349,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":358,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":110,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":127,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":147,"com.graphhopper.reader.OSMReaderTest.testFerry":0,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":298,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":299,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":346,"com.graphhopper.routing.QueryGraphTest.testOneWay":357,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":202,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":36,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":106,"com.graphhopper.reader.OSMReaderTest.testWithBounds":57,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":164,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":25,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":6,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testInfinityWeight":281,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":310,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":352,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":311,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":163,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":177,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":248,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":318,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":162,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":230,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":121,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":34,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":137,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":14,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":274,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":141,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":203,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":323,"com.graphhopper.GraphHopperTest.testPrepare":38,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":170,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":268,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":71,"com.graphhopper.storage.GraphStorageViaMMapTest.testInfinityWeight":171,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":221,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":63,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":235,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":355,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":328,"com.graphhopper.storage.UnsafeDataAccessTest.testLoadFlush":87,"com.graphhopper.storage.GraphHopperStorageTest.testInfinityWeight":246,"com.graphhopper.util.InstructionListTest.testWayList":295,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":294,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":334,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":287,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":11,"com.graphhopper.GraphHopperAPITest.testDisconnected179":89,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":176,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":313,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":153,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":43,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":105,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":312,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":148,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":69,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":18,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":332,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":107,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":302,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":369,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":33,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":52,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":283,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":190,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":362,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":7,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":174,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":39,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":226,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":133,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":276,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":280,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":30,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":29,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":326,"com.graphhopper.GraphHopperTest.testLoadOSM":42,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":144,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":324,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":95,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":108,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":186,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":240,"com.graphhopper.reader.OSMReaderTest.testSort":49,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":239,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":337,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":32,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":56,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":199,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":243,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":65,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":218,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":99,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":100,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":172,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":255,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":343,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":354,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":303,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":217,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":361,"com.graphhopper.routing.PathTest.testWayList":60,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":173,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":279,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":5,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":102,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":195,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":344,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeReturn":209,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":227,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":68,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":252,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":142,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":247,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":333,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":348,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":94,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPropertiesWithNoInit":273,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":13,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":260,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":234,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":256,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":179,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":225,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":262,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":103,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":219,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":216,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":232,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":120,"com.graphhopper.GraphHopperTest.testFailsForMissingParameters":83,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":368,"com.graphhopper.util.GHUtilityTest.testSort":291,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":154,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":111,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":356,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":70,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":213,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":330,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testBarrierAccess":74,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":223,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":266,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":284,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":359,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":128,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":135,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":258,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":271,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":138,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":178,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":210,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":353,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":136,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":308,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":44,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":253,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":254,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":236,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testBarrierAccess":75,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":125,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":265,"com.graphhopper.GraphHopperAPITest.testLoad":88,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":41,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":72,"com.graphhopper.routing.util.FootFlagEncoderTest.testBarrierAccess":73,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":269,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":19,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":309,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":183,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":17,"com.graphhopper.reader.OSMReaderTest.testBarriers":50,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":257,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":314,"com.graphhopper.storage.UnsafeDataAccessTest.testSegments":61,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":166,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes":200,"com.graphhopper.routing.PathTest.testFound":363,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":46,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":90,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":150,"com.graphhopper.util.GHUtilityTest.testCopy":290,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":331,"com.graphhopper.routing.PathTest.testFindInstruction":367,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":327,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":24,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":286,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":27,"com.graphhopper.storage.UnsafeDataAccessTest.testSet_GetBytes":85,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":155,"com.graphhopper.util.InstructionListTest.testEmptyList":84,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":229,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":118,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":126,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":244,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":233,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":119,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":21,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":277,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":288,"com.graphhopper.storage.GraphHopperStorageCHTest.testFlags":192,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":339,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":208,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":267,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":320,"com.graphhopper.reader.PrinctonReaderTest.testRead":301,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":245,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":194,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":263,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":4,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":272,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":146,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":182,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":151,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes2":189,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":220,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":322,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":345,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":270,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":206,"com.graphhopper.util.InstructionListTest.testWayList2":296,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":122,"com.graphhopper.reader.OSMReaderTest.testFoot":47,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":167,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":145,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":165,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":360,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":112,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":249,"com.graphhopper.reader.OSMReaderTest.testOneWay":59,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":113,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":214,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":261,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":188,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":282,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":20,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetLocations":197,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":307,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":23,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":191,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":22,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":278,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":157,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":26,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":66,"com.graphhopper.storage.GraphHopperStorageTest.testPropertiesWithNoInit":238,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":131,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":160,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":222,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":228,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":51,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":366,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":319,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":123,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":342,"com.graphhopper.storage.UnsafeDataAccessTest.testLoadClose":62,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":264,"com.graphhopper.storage.UnsafeDataAccessTest.testCopy":86,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":207,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":316,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":325,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":139,"com.graphhopper.routing.PathBidirRefTest.testExtract":304,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":317,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":82,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":300,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":306,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":77,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":143,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":9,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnsureSize":184,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":81,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":285,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":80,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":101,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":8,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":79,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":78,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":117,"com.graphhopper.util.GHUtilityTest.testSort2":289,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":338,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":156,"com.graphhopper.reader.OSMReaderTest.testMain":48,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":211,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":350,"com.graphhopper.storage.GraphHopperStorageCHTest.testInfinityWeight":212,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":28,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":16,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":180,"com.graphhopper.routing.PathBidirRefTest.testExtract2":305,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":15,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":134,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":67,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":169,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":96,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":31,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":114,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":130,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":104,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":241,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":198,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":201,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":53,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":91,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":175,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":275,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":58,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":140,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":187,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":341,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":64,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":109,"com.graphhopper.storage.GraphHopperStorageTest.testClone":224,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":250,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":168,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":215,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":242,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":2,"com.graphhopper.storage.GraphHopperStorageCHTest.testCheckFirstNode":205,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":231,"com.graphhopper.GraphHopperTest.testFootAndCar":40,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":237,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":185,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":152,"com.graphhopper.routing.PathTest.testTime":364,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":149,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":193,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":321,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":115,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":93,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":161,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":336,"com.graphhopper.storage.GraphHopperStorageCHTest.testPropertiesWithNoInit":204,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":259,"com.graphhopper.util.GHUtilityTest.testSortDirected":292,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":12,"com.graphhopper.GraphHopperTest.testPrepareOnly":35,"com.graphhopper.GraphHopperTest.testVia":37,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":129,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":347,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":3,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":335,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":55,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":124,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":92,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":181,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":351,"com.graphhopper.GraphHopperTest.testFootOnly":45,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":297,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":97,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":54,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":1,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":132,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":98,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":159,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":196,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":365,"com.graphhopper.util.InstructionListTest.testFind":293,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":329,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":315,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":10,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":116,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":251},"transformations":[{"failures":[0,1,2],"tindex":"f7a0d7ba-8286-11e5-b1d1-2d7c9c96963b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:186","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    if (com.graphhopper.reader.OSMWay.hasTag(\"route\", java.util.Set<java.lang.String>)) {\n        java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motorcar\");\n        if (java.lang.String == null)\n            java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motor_vehicle\");\n        \n        if ((((java.lang.String == null) && (!(com.graphhopper.reader.OSMWay.hasTag(\"foot\")))) && (!(com.graphhopper.reader.OSMWay.hasTag(\"bicycle\")))) || (\"yes\".equals(java.lang.String)))\n            return (long) | (long);\n        \n    } \n    return 0;\n} "},"status":-1},{"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"tindex":"f7a0fecb-8286-11e5-b1d1-f1e1c7d2d375","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:288","type":"CtIfImpl","sourcecode":"if ((long & long) != 0)\n    long |= 1;\n"},"variableMap":{"res":"oldOffset","maxBit":"newOffset","value":"newOffset"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:722","type":"CtForImpl","sourcecode":"for (long long = 0 ; long < (int) ; long += 4) {\n    com.graphhopper.storage.DataAccess.setInt((long + long), com.graphhopper.storage.DataAccess.getInt((long + long)));\n}"},"status":-1},{"failures":[],"tindex":"f7a0fecc-8286-11e5-b1d1-3b97a039fd74","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:861","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt((long + (int)), 0)"},"status":0},{"failures":[34,35,36,37,38,39,40,41,42,43,44,45,46,0,47,48,49,50,51,52,53,54,55,56,57,58,59],"tindex":"f7a0fecd-8286-11e5-b1d1-3572e842fb4e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:178","type":"CtIfImpl","sourcecode":"if (int > 64)\n    throw new java.lang.IllegalStateException(\"sum of all shifts does not fit into a long variable\");\n"},"variableMap":{"shiftSum":"event"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:60","type":"CtIfImpl","sourcecode":"if (int == (javax.xml.stream.XMLStreamConstants.int)) {\n    java.lang.String java.lang.String = javax.xml.stream.XMLStreamReader.getAttributeValue(null, \"k\");\n    java.lang.String java.lang.String = javax.xml.stream.XMLStreamReader.getAttributeValue(null, \"v\");\n    if ((java.lang.String != null) && ((java.lang.String.length()) > 0))\n        com.graphhopper.reader.OSMElement.setTag(java.lang.String, java.lang.String);\n    \n} "},"status":-1},{"failures":[60],"tindex":"f7a0fece-8286-11e5-b1d1-0d656b956707","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:102","type":"CtInvocationImpl","sourcecode":"java.util.Map<java.lang.String, java.lang.Object>.put(\"interval\", java.util.Arrays.asList(int, int))"},"status":-1},{"failures":[],"tindex":"f7a0fecf-8286-11e5-b1d1-050cc76f9a64","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:224","type":"CtLocalVariableImpl","sourcecode":"long long = (1L << int) - 1"},"variableMap":{"shift":"intIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:590","type":"CtLocalVariableImpl","sourcecode":"long long = ((long)(int)) << 2"},"status":-2},{"failures":[61,62],"tindex":"f7a125e0-8286-11e5-b1d1-7f2d71a93ac7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:149","type":"CtIfImpl","sourcecode":"if (((int) * (int)) < int)\n    (int)++;\n"},"variableMap":{"latSize":"segmentSizeInBytes","size":"segmentSizeInBytes","lonSize":"segmentSizeInBytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:158","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.UnsafeDataAccess.setBytes((int * (int)), byte[], int)"},"status":-1},{"failures":[63,64,65,66,67,68,69,70,71,72],"tindex":"f7a125e1-8286-11e5-b1d1-0d9a6b64c7eb","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Constants:91","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.Constants.boolean = true"},"variableMap":{"com.graphhopper.util.Constants.SNAPSHOT":"reverseOrder"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:132","type":"CtAssignmentImpl","sourcecode":"boolean = false"},"status":-1},{"failures":[37,38,39,40,45,46,0,47,48,49,50,51,52,54,55,57,59,73,74,75],"tindex":"f7a125e2-8286-11e5-b1d1-b7455618b999","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:254","type":"CtIfImpl","sourcecode":"if (boolean)\n    return long;\n"},"variableMap":{"directionBitMask":"directionBitMask","blockByDefault":"blockFords"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:259","type":"CtIfImpl","sourcecode":"if ((((boolean) && ((com.graphhopper.reader.OSMNode.hasTag(\"highway\", \"ford\")) || (com.graphhopper.reader.OSMNode.hasTag(\"ford\")))) && (!(com.graphhopper.reader.OSMNode.hasTag(java.util.List<java.lang.String>, java.util.Set<java.lang.String>)))) && (!(com.graphhopper.reader.OSMNode.hasTag(\"ford\", \"no\")))) {\n    return long;\n} "},"status":-1},{"failures":[76],"tindex":"f7a125e3-8286-11e5-b1d1-57b43776980c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:375","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.reader.OSMWay.hasTag(\"bicycle\", \"official\")) || (com.graphhopper.reader.OSMWay.hasTag(\"bicycle\", \"designated\")))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(44.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"status":-1},{"failures":[34,35,77,78,79,80,81,82,36,37,38,39,40,41,42,83,43,44,45,46,0,47,48,49,50,51,52,53,54,55,56,57,58,59],"tindex":"f7a125e4-8286-11e5-b1d1-29d4cd259daa","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:314","type":"CtIfImpl","sourcecode":"if (java.lang.String.isEmpty())\n    return java.lang.String;\n"},"variableMap":{"str":"ret"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:100","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return \"\";\n} "},"status":-1},{"failures":[84],"tindex":"f7a14cf5-8286-11e5-b1d1-35122156dea4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Dijkstra:114","type":"CtIfImpl","sourcecode":"if (java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.isEmpty())\n    break;\n"},"status":-1},{"failures":[85,86,62,87],"tindex":"f7a14cf6-8286-11e5-b1d1-4b9b41ceaafb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:236","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    com.graphhopper.storage.UnsafeDataAccess.sun.misc.Unsafe.putByte((((long) + long) + int), byte[][int]);\n}"},"status":-1},{"failures":[],"tindex":"f7a14cf7-8286-11e5-b1d1-9bfc5fa2ecf4","series":0,"name":"add","transplant":{"position":"com.graphhopper.GHResponse:121","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GHResponse.check(\"getDistance\")"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GHResponse:50","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GHResponse.check(\"getDebugInfo\")"},"status":0},{"failures":[34,35,36,37,38,39,40,41,42,43,44,45,46,0,47,48,49,50,51,52,53,54,55,56,57,58,59],"tindex":"f7a14cf8-8286-11e5-b1d1-231e9be3cab7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:672","type":"CtTryImpl","sourcecode":"try {\n    for (int int = 0 ; int < (gnu.trove.list.TLongList.size()) ; int++) {\n        long long = gnu.trove.list.TLongList.get(int);\n        int int = com.graphhopper.reader.OSMReader.getNodeMap().get(long);\n        if (int == (com.graphhopper.reader.OSMReader.int))\n            continue;\n        \n        if (int == (com.graphhopper.reader.OSMReader.int))\n            continue;\n        \n        if (int == (com.graphhopper.reader.OSMReader.int)) {\n            if ((!(com.graphhopper.util.PointList.isEmpty())) && (int > (-(com.graphhopper.reader.OSMReader.int)))) {\n                int = int;\n                int = com.graphhopper.reader.OSMReader.handlePillarNode(int, long, null, true);\n                int = (-int) - 3;\n                if (((com.graphhopper.util.PointList.getSize()) > 1) && (int >= 0)) {\n                    java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long));\n                    com.graphhopper.util.PointList.clear();\n                    com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n                } \n                int = int;\n                int = -1;\n            } \n            continue;\n        } \n        if ((int <= (-(com.graphhopper.reader.OSMReader.int))) && (int >= (com.graphhopper.reader.OSMReader.int)))\n            throw new java.lang.AssertionError((((\"Mapped index not in correct bounds \" + int) + \", \") + long));\n        \n        if (int > (-(com.graphhopper.reader.OSMReader.int))) {\n            boolean boolean = (int == 0) || (int == int);\n            if (!boolean) {\n                int = int;\n            } \n            int = com.graphhopper.reader.OSMReader.handlePillarNode(int, long, com.graphhopper.util.PointList, boolean);\n        } \n        if (int < (com.graphhopper.reader.OSMReader.int)) {\n            int = (-int) - 3;\n            com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n            if (int >= 0) {\n                java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long));\n                com.graphhopper.util.PointList.clear();\n                com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n            } \n            int = int;\n        } \n    }\n} catch (java.lang.RuntimeException ex) {\n    com.graphhopper.reader.OSMReader.org.slf4j.Logger.error((\"Couldn\\'t properly add edge with osm ids:\" + gnu.trove.list.TLongList), java.lang.RuntimeException);\n    if (boolean)\n        throw java.lang.RuntimeException;\n    \n}"},"status":-1},{"failures":[88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,77,78,79,80,81,82,37,38,39,40,41,42,44,45,48,49,50,118,119,120,71],"tindex":"f7a14cf9-8286-11e5-b1d1-2db1917bb888","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:474","type":"CtLocalVariableImpl","sourcecode":"int int = int + int"},"variableMap":{"len":"offset","start":"offset"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:610","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.storage.DataAccess.getInt((long + int))"},"status":-1},{"failures":[88,89,90,91,92,121,93,94,95,96,97,122,98,99,100,123,124,101,102,103,104,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,105,142,106,107,108,109,110,143,111,112,113,144,145,114,115,116,117,146,147,3,148,149,150,151,152,153,154,155,5,6,156,157,158,159,160,7,161,162,163,164,165,166,8,9,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,10,189,190,191,192,193,194,195,196,12,13,197,198,199,200,201,14,202,203,204,205,206,207,15,16,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,17,223,224,225,226,227,228,229,230,19,20,231,232,233,234,235,21,236,237,238,239,240,241,22,23,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,24,258,259,260,261,262,263,264,265,26,27,266,267,268,269,270,28,271,272,273,274,275,276,29,30,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,34,35,77,78,79,80,81,82,36,37,38,39,40,41,42,43,44,45,46,301,302,303,0,47,48,49,50,51,52,53,54,55,56,57,58,59,304,305,306,307,308,31,309,310,311,312,32,33,313,314,63,315,316,317,318,319,320,321,64,65,66,322,323,324,325,326,327,67,68,328,69,329,330,70,331,332,333,118,334,335,336,337,119,120,338,339,71,340,341,342,72,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,60,367,368,369],"tindex":"f7a1740a-8286-11e5-b1d1-51113b9b66c5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:402","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.close()"},"variableMap":{"index":"edges"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:173","type":"CtIfImpl","sourcecode":"if (int > (com.graphhopper.util.EdgeIterator.int)) {\n    long long = com.graphhopper.storage.EdgeAccess.toPointer(int);\n    int int = com.graphhopper.storage.EdgeAccess.getOtherNode(int, long);\n    long long = com.graphhopper.storage.EdgeAccess._getLinkPosInEdgeArea(int, int, long);\n    com.graphhopper.storage.DataAccess.setInt(long, int);\n} "},"status":-1},{"failures":[316,64,66,322,323,325,69,333,334,337,338,342,72,344],"tindex":"f7a19b1b-8286-11e5-b1d1-b1fd8baf3bf0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:694","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.CHEdgeIteratorState.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double)"},"status":-1},{"failures":[],"tindex":"f7a19b1c-8286-11e5-b1d1-e14cea868ae3","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:118","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.Location2IDQuadtree.initLatLonSize(int)"},"variableMap":{"this":"this","resolution":"counter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:140","type":"CtInvocationImpl","sourcecode":"org.slf4j.Logger.info(((((((((((\"filled quadtree index array in \" + float) + \"s. size is \") + com.graphhopper.storage.index.Location2IDQuadtree.(getCapacity())) + \" (\") + int) + \"). filled empty \") + int) + \" in \") + float) + \"s\"))"},"status":0},{"failures":[78,79,345],"tindex":"f7a19b1d-8286-11e5-b1d1-098736553c01","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Instruction:173","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.PointList.getElevation(0)"},"variableMap":{"ele":"edgeOrientation","points":"wayGeo"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:397","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.routing.QueryGraph.com.graphhopper.util.AngleCalc.calcOrientation(com.graphhopper.util.PointList.getLat((int - 2)), com.graphhopper.util.PointList.getLon((int - 2)), com.graphhopper.util.PointList.getLat((int - 1)), com.graphhopper.util.PointList.getLon((int - 1)))"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"f7a0fecc-8286-11e5-b1d1-3b97a039fd74","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.DataAccess.setInt"]},"type":"staticDiff"}]}]}
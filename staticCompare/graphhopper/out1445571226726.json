{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":128,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":25,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":50,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":33,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":180,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":212,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":117,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":79,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":80,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":22,"com.graphhopper.routing.QueryGraphTest.testOneWay":32,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":104,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":176,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":133,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":14,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":27,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":125,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":15,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":171,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":59,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":194,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":222,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":103,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":247,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":66,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":226,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":242,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":49,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":146,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":160,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":30,"com.graphhopper.util.InstructionListTest.testWayList":9,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":8,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":44,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":82,"com.graphhopper.GraphHopperAPITest.testDisconnected179":259,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":19,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":174,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":16,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":119,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":36,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":41,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":177,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":6,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":262,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":18,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":255,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":1,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":92,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":131,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":142,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":218,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":249,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":251,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":68,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":250,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":67,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":185,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":197,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":164,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":178,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":163,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":17,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":100,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":145,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":202,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":203,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":140,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":29,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":54,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":260,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":0,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":144,"com.graphhopper.routing.PathTest.testWayList":4,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":141,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":253,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":124,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":207,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":95,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":55,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":152,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":228,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":24,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":42,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":170,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":175,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":196,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":97,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":235,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":159,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":230,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":151,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":236,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":208,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":115,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":157,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":46,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":5,"com.graphhopper.util.GHUtilityTest.testSort":77,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":123,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":31,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":182,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":39,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":38,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":112,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":34,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":149,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":240,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":256,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":213,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":220,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":233,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":246,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":223,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":85,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":28,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":111,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":221,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":229,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":162,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":210,"com.graphhopper.GraphHopperAPITest.testLoad":258,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":53,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":243,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":154,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":13,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":148,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":20,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":231,"com.graphhopper.routing.PathTest.testFound":69,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes":101,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":135,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":191,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":40,"com.graphhopper.util.GHUtilityTest.testCopy":76,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":121,"com.graphhopper.routing.PathTest.testFindInstruction":71,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":81,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":232,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":239,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":153,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":43,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":211,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":169,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":158,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":74,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":161,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":252,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":48,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":110,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":61,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":241,"com.graphhopper.reader.PrinctonReaderTest.testRead":261,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":116,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":21,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":65,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes2":91,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":244,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":106,"com.graphhopper.util.InstructionListTest.testWayList2":11,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":200,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":138,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":35,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":134,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":186,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":183,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":172,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":113,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":184,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":89,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":254,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetLocations":98,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":155,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":93,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":167,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":166,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":127,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":64,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":238,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":216,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":130,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":147,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":3,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":60,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":52,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":204,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":237,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":57,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":107,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":58,"com.graphhopper.routing.PathBidirRefTest.testExtract":72,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":224,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":268,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":181,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":263,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnsureSize":86,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":137,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":257,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":267,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":206,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":266,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":136,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":265,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":264,"com.graphhopper.util.GHUtilityTest.testSort2":75,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":190,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":47,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":126,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":245,"com.graphhopper.util.InstructionListTest.testRoundaboutJsonNaN":10,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":109,"com.graphhopper.routing.PathBidirRefTest.testExtract2":73,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":108,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":219,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":139,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":198,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":12,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":187,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":215,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":209,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":165,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":99,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":102,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":192,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":143,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":248,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":51,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":88,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":225,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":63,"com.graphhopper.storage.GraphHopperStorageTest.testClone":150,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":173,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":179,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":114,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":168,"com.graphhopper.storage.GraphHopperStorageCHTest.testCheckFirstNode":105,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":156,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":87,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":122,"com.graphhopper.routing.PathTest.testTime":70,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":120,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":94,"com.graphhopper.util.InstructionListTest.testRoundaboutJsonIntegrity":7,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":62,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":188,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":195,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":45,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":132,"com.graphhopper.util.GHUtilityTest.testSortDirected":78,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":234,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":96,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":214,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":23,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":118,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":205,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":193,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":26,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":84,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":199,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":217,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":201,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":2,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":129,"com.graphhopper.util.InstructionListTest.testFind":83,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":37,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":56,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":90,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":189,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":227},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11],"tindex":"de2f3a42-7936-11e5-b5a6-17c793b6c134","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:115","type":"CtIfImpl","sourcecode":"if (int < 1)\n    throw new java.lang.IllegalArgumentException((\"Region of location index must be at least 1 but was \" + int));\n"},"variableMap":{"numTiles":"pointsIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:76","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.util.Instruction com.graphhopper.util.Instruction : java.util.List<com.graphhopper.util.Instruction>) {\n    java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new java.util.HashMap<java.lang.String, java.lang.Object>();\n    java.util.List<java.util.Map<java.lang.String, java.lang.Object>>.add(java.util.Map<java.lang.String, java.lang.Object>);\n    com.graphhopper.util.InstructionAnnotation com.graphhopper.util.InstructionAnnotation = com.graphhopper.util.Instruction.getAnnotation();\n    java.lang.String java.lang.String = com.graphhopper.util.Instruction.getTurnDescription(com.graphhopper.util.Translation);\n    if (com.graphhopper.util.Helper.isEmpty(java.lang.String))\n        java.lang.String = com.graphhopper.util.InstructionAnnotation.getMessage();\n    \n    java.util.Map<java.lang.String, java.lang.Object>.put(\"text\", com.graphhopper.util.Helper.firstBig(java.lang.String));\n    if (!(com.graphhopper.util.InstructionAnnotation.isEmpty())) {\n        java.util.Map<java.lang.String, java.lang.Object>.put(\"annotation_text\", com.graphhopper.util.InstructionAnnotation.getMessage());\n        java.util.Map<java.lang.String, java.lang.Object>.put(\"annotation_importance\", com.graphhopper.util.InstructionAnnotation.getImportance());\n    } \n    java.util.Map<java.lang.String, java.lang.Object>.put(\"time\", com.graphhopper.util.Instruction.getTime());\n    java.util.Map<java.lang.String, java.lang.Object>.put(\"distance\", com.graphhopper.util.Helper.round(com.graphhopper.util.Instruction.getDistance(), 3));\n    java.util.Map<java.lang.String, java.lang.Object>.put(\"sign\", com.graphhopper.util.Instruction.getSign());\n    java.util.Map<java.lang.String, java.lang.Object>.putAll(com.graphhopper.util.Instruction.getExtraInfoJSON());\n    int int = int + (com.graphhopper.util.Instruction.getPoints().size());\n    if ((int + 1) == (java.util.List<com.graphhopper.util.Instruction>.size()))\n        int--;\n    \n    java.util.Map<java.lang.String, java.lang.Object>.put(\"interval\", java.util.Arrays.asList(int, int));\n    int = int;\n    int++;\n}"},"status":-1},{"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,0,1,69,70,2,3,4,71,5,6,72,73,74,75,76,77,78,79,80,81,82,83,8,9,11,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268],"tindex":"de2f6153-7936-11e5-b5a6-697d6d81d891","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:415","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.BaseGraph.getEdgeIteratorState(int, int)"},"variableMap":{"edgeId":"a","adjNode":"a","baseGraph":"baseGraph"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:409","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.BaseGraph.edge(int, int, double, boolean)"},"status":-1},{"failures":[],"tindex":"de2f8864-7936-11e5-b5a6-996d7ad3a7b1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:129","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.DistanceCalc.calcNormalizedDist(0.1)"},"status":-2},{"failures":[],"tindex":"de2f8865-7936-11e5-b5a6-a54dbe5b1784","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:186","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-2},{"failures":[],"tindex":"de2f8866-7936-11e5-b5a6-0d20a24d0891","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:182","type":"CtIfImpl","sourcecode":"if (int <= 0) {\n    throw new java.lang.IllegalStateException(\"check your graph - it is empty!\");\n} "},"variableMap":{"locs":"foundInstruction"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:303","type":"CtIfImpl","sourcecode":"if (!((int == 0) && (int == 0))) {\n    double double;\n    int int = int;\n    if (com.graphhopper.util.DistanceCalc.validEdgeDistance(double, double, double, double, double, double)) {\n        double = com.graphhopper.util.DistanceCalc.calcNormalizedEdgeDistance(double, double, double, double, double, double);\n        if (int > 0)\n            int++;\n        \n    } else {\n        double = com.graphhopper.util.DistanceCalc.calcNormalizedDist(double, double, double, double);\n        if (int > 0)\n            int++;\n        \n    }\n    if (double < double) {\n        double = double;\n        int = int;\n    } \n} "},"status":-2},{"failures":[],"tindex":"de2faf77-7936-11e5-b5a6-c5ea5d75de74","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GHResponse:56","type":"CtIfImpl","sourcecode":"if (java.lang.String != null)\n    this.java.lang.String = java.lang.String;\n"},"status":-2},{"failures":[],"tindex":"de2faf78-7936-11e5-b5a6-ab55b94e5b36","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(5);\n} catch (java.lang.InterruptedException iex) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtil:207","type":"CtIfImpl","sourcecode":"if ((long & long) == 0)\n    java.lang.StringBuilder.append('0');\nelse\n    java.lang.StringBuilder.append('1');\n"},"status":-2},{"failures":[],"tindex":"de2faf79-7936-11e5-b5a6-35e32a945bc0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:254","type":"CtReturnImpl","sourcecode":"return (int * (((4 + 4) + 4) + 4)) + (8 * int)"},"variableMap":{"length":"val","factor":"val"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHSortedCollection:143","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"de2faf7a-7936-11e5-b5a6-2db7fd8fa850","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:233","type":"CtLocalVariableImpl","sourcecode":"int int = (int) / 2"},"variableMap":{"size":"nextNodeBit"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:185","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.routing.util.AbstractFlagEncoder.defineNodeBits(int, int)"},"status":-2},{"failures":[],"tindex":"de2faf7b-7936-11e5-b5a6-1d314f0fdf3e","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.StopWatch:58","type":"CtAssignmentImpl","sourcecode":"long = -1"},"variableMap":{"lastTime":"lastKey"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:91","type":"CtAssignmentImpl","sourcecode":"long = long"},"status":-2},{"failures":[],"tindex":"de2fd68c-7936-11e5-b5a6-6fcf296cbec1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:118","type":"CtAssignmentImpl","sourcecode":"int = int * 2"},"variableMap":{"i":"allBits","child":"allBits"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:97","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"status":-2},{"failures":[],"tindex":"de2fd68d-7936-11e5-b5a6-a16ff0740359","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.DijkstraOneToMany:114","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.DijkstraOneToMany.int"},"variableMap":{"com.graphhopper.routing.DijkstraOneToMany.NOT_FOUND":"java.lang.Integer.MAX_VALUE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:366","type":"CtReturnImpl","sourcecode":"return java.lang.Integer.int"},"status":-2},{"failures":[],"tindex":"de2fd68e-7936-11e5-b5a6-a9e893b476c4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:226","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt(long, int)"},"status":-2},{"failures":[],"tindex":"de2fd68f-7936-11e5-b5a6-c72fa95a8f33","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:42","type":"CtIfImpl","sourcecode":"if (double < 0.0) {\n    double = (double + double) / (double - double);\n    double = com.graphhopper.util.AngleCalc.double;\n} else {\n    double = (double - double) / (double + double);\n    double = com.graphhopper.util.AngleCalc.double;\n}"},"variableMap":{"r":"lat","com.graphhopper.util.AngleCalc.PI_4":"lat","x":"lat","angle":"lat","absY":"lat","com.graphhopper.util.AngleCalc.PI3_4":"lat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:195","type":"CtIfImpl","sourcecode":"if (double >= 0)\n    java.lang.String += \"N\";\nelse\n    java.lang.String += \"S\";\n"},"status":-2},{"failures":[],"tindex":"de2ffda0-7936-11e5-b5a6-7724d7305dfe","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:159","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt((long + (int)), ((int)(long)))"},"variableMap":{"turnCosts":"nodes","TC_FLAGS":"N_ADDITIONAL","costsBase":"newCapacity","turnFlags":"oldCapacity"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:287","type":"CtForImpl","sourcecode":"for (long long = long + (int) ; long < long ; long += int) {\n    com.graphhopper.storage.DataAccess.setInt(long, com.graphhopper.storage.GraphExtension.getDefaultNodeFieldValue());\n}"},"status":-2},{"failures":[],"tindex":"de2ffda1-7936-11e5-b5a6-3389a1be41d4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:935","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.coll.GHBitSet = new com.graphhopper.coll.GHBitSetImpl(com.graphhopper.storage.BaseGraph.getNodes())"},"status":-2},{"failures":[],"tindex":"de2ffda2-7936-11e5-b5a6-11dea1931ec6","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtilBig:101","type":"CtOperatorAssignmentImpl","sourcecode":"byte <<= 1"},"variableMap":{"res":"res"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilLittle:107","type":"CtAssignmentImpl","sourcecode":"byte[][int] = byte"},"status":-2},{"failures":[],"tindex":"de2ffda3-7936-11e5-b5a6-97d33a955e07","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:154","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:406","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.close()"},"status":-2},{"failures":[],"tindex":"de2ffda4-7936-11e5-b5a6-03ced7c6326a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:139","type":"CtIfImpl","sourcecode":"if (int < int) {\n    int += int;\n    int += int;\n} "},"status":-2},{"failures":[],"tindex":"de3024b5-7936-11e5-b5a6-f996b8905914","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.TurnWeighting:84","type":"CtIfImpl","sourcecode":"if ((double == 0) && (int == int))\n    return double + (double);\n"},"variableMap":{"defaultUTurnCost":"java.lang.Double.MAX_VALUE","turnCosts":"java.lang.Double.MAX_VALUE","edgeId":"java.lang.Integer.MAX_VALUE","prevOrNextEdgeId":"java.lang.Integer.MAX_VALUE","weight":"java.lang.Double.MAX_VALUE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:381","type":"CtIfImpl","sourcecode":"if (int == (-(java.lang.Integer.int)))\n    return -(java.lang.Double.double);\n"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
{"failureDictionary":{"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAccess":102,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":33,"com.graphhopper.reader.OSMReaderTest.testFerry":11,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":90,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testService":99,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":2,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":76,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":58,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":59,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":30,"com.graphhopper.reader.OSMReaderTest.testWithBounds":20,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAccess":110,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":109,"com.graphhopper.routing.util.EncodingManagerTest.testWrongEncoders":119,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":116,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testSacScale":65,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":101,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":1,"com.graphhopper.GraphHopperTest.testPrepare":4,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":61,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":111,"com.graphhopper.reader.OSMReaderTest.testFoot":113,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":36,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testSacScale":96,"com.graphhopper.reader.OSMReaderTest.testOneWay":22,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":89,"com.graphhopper.routing.util.BikeFlagEncoderTest.testSacScale":87,"com.graphhopper.GraphHopperAPITest.testDisconnected179":123,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":98,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":8,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":88,"com.graphhopper.routing.util.CarFlagEncoderTest.testMilitaryAccess":78,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":53,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSacScale":103,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":31,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":15,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":16,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":47,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":91,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":79,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":5,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":92,"com.graphhopper.routing.util.FootFlagEncoderTest.testAccess":77,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":55,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":28,"com.graphhopper.GraphHopperTest.testLoadOSM":7,"com.graphhopper.routing.util.FootFlagEncoderTest.handleWayTagsRoundabout":73,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":23,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":35,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":44,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":32,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":27,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":26,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":49,"com.graphhopper.reader.OSMReaderTest.testSort":13,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":25,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":97,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":24,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":19,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":40,"com.graphhopper.reader.OSMReaderTest.testMain":12,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":81,"com.graphhopper.reader.OSMReaderTest.testEstimatedCenter":114,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":120,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAccess":94,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":80,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":56,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":50,"com.graphhopper.routing.util.CarFlagEncoderTest.testFordAccess":82,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":37,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":52,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":71,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":0,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":41,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":74,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":104,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":43,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":21,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":93,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":105,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":51,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":85,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":60,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":84,"com.graphhopper.GraphHopperTest.testFootAndCar":29,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":107,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":108,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAccess":70,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":68,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":34,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testBarrierAccess":100,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":57,"com.graphhopper.routing.util.CarFlagEncoderTest.testOneway":86,"com.graphhopper.routing.util.FootFlagEncoderTest.testRailPlatformIssue366":75,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":38,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":42,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":106,"com.graphhopper.GraphHopperTest.testPrepareOnly":63,"com.graphhopper.GraphHopperTest.testVia":3,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":122,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":9,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":95,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":18,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":67,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSetSpeed0_issue367":121,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testBarrierAccess":66,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":48,"com.graphhopper.GraphHopperAPITest.testLoad":62,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":6,"com.graphhopper.GraphHopperTest.testFootOnly":10,"com.graphhopper.routing.util.FootFlagEncoderTest.testBarrierAccess":72,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":115,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":45,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":17,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":54,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":83,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":46,"com.graphhopper.reader.OSMReaderTest.testBarriers":14,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":112,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":117,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":64,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":118,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":69,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":39},"transformations":[{"failures":[0],"tindex":"b874365d-8270-11e5-ac22-2771ef7d5495","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:803","type":"CtIfImpl","sourcecode":"if (int < 0)\n    return 1;\n"},"variableMap":{"edgeId":"com.graphhopper.reader.OSMReader.TOWER_NODE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:517","type":"CtIfImpl","sourcecode":"if (int < (com.graphhopper.reader.OSMReader.int))\n    return (-int) - 3;\n"},"status":-1},{"failures":[],"tindex":"b8745d6e-8270-11e5-ac22-6db38f1fc5e5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:186","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(2000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:103","type":"CtForEachImpl","sourcecode":"for (int int : int[]) {\n    java.util.Set<java.lang.Integer>.add(int);\n}"},"status":-2},{"failures":[0],"tindex":"b8745d6f-8270-11e5-ac22-471099e14169","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:923","type":"CtIfImpl","sourcecode":"if (\"from\".equals(com.graphhopper.reader.OSMRelation.Member.role())) {\n    long = com.graphhopper.reader.OSMRelation.Member.ref();\n} else if (\"to\".equals(com.graphhopper.reader.OSMRelation.Member.role())) {\n    long = com.graphhopper.reader.OSMRelation.Member.ref();\n} "},"status":-1},{"failures":[],"tindex":"b8745d70-8270-11e5-ac22-f58f4a597a12","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:476","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.EdgeIteratorState.setDistance(com.graphhopper.storage.BaseGraph.CommonEdgeIterator.getDistance())"},"status":0},{"failures":[],"tindex":"b8745d71-8270-11e5-ac22-4f92713f7232","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:754","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.EdgeAccess.writeEdge(int, int, int, int, int)"},"variableMap":{"edgeAccess":"this","edgeId":"toNodeId","updatedB":"fromNodeId","updatedA":"toNodeId","linkA":"com.graphhopper.util.EdgeIterator.NO_EDGE","linkB":"fromNodeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:143","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.EdgeAccess.writeEdge(int, int, int, com.graphhopper.util.EdgeIterator.int, com.graphhopper.util.EdgeIterator.int)"},"status":-2},{"failures":[],"tindex":"b8745d72-8270-11e5-ac22-cf258a2b810a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:154","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:324","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.LocationIndexTree.flush()"},"status":0},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,17,18,19,20,21,22],"tindex":"b8748483-8270-11e5-ac22-33daf220f6c5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:721","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.reader.OSMReader.handlePillarNode(int, long, com.graphhopper.util.PointList, boolean)"},"status":-1},{"failures":[23,24,25,26,27,28,3,4,5,29,6,7,9,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,12,13],"tindex":"b8748484-8270-11e5-ac22-cf112ec64036","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:255","type":"CtAssignmentImpl","sourcecode":"double = 30"},"variableMap":{"speed":"queryDistance"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.QueryResult:81","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-1},{"failures":[1,63,2,3,4,5,29,6,7,8,9,10,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,11,113,12,13,14,15,16,0,17,18,19,20,21,114,22],"tindex":"b8748485-8270-11e5-ac22-f9202a8b9371","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.DAType:203","type":"CtIfImpl","sourcecode":"if ((this.com.graphhopper.storage.DAType.MemRef) != (com.graphhopper.storage.DAType.com.graphhopper.storage.DAType.MemRef))\n    return false;\n"},"variableMap":{"other":"osmValue","memRef":"osmValue"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:144","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null)\n    return false;\n"},"status":-1},{"failures":[115,1,63,2,3,4,5,29,6,7,8,9,10,64,116,117,118,79,11,113,12,13,14,15,16,0,17,18,19,20,21,22],"tindex":"b8748486-8270-11e5-ac22-0f0c5aa726d9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:154","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:272","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.routing.util.AbstractFlagEncoder com.graphhopper.routing.util.AbstractFlagEncoder : java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>) {\n    long |= com.graphhopper.routing.util.AbstractFlagEncoder.handleWayTags(com.graphhopper.reader.OSMWay, long, (long & (com.graphhopper.routing.util.AbstractFlagEncoder.getRelBitMask())));\n}"},"status":-1},{"failures":[],"tindex":"b874ab97-8270-11e5-ac22-77d5bcc1deda","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PointList:69","type":"CtReturnImpl","sourcecode":"return 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:207","type":"CtReturnImpl","sourcecode":"return 10"},"status":-2},{"failures":[7],"tindex":"b874ab98-8270-11e5-ac22-718a5d521379","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:268","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.storage.StorableProperties.get(\"graph.byteOrder\")"},"variableMap":{"properties":"properties"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:450","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.storage.StorableProperties.get(\"graph.flagEncoders\")"},"status":-1},{"failures":[],"tindex":"b874ab99-8270-11e5-ac22-99bc425e7769","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:915","type":"CtLocalVariableImpl","sourcecode":"long long = -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:201","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.storage.RAMIntDataAccess.getCapacity()"},"status":-2},{"failures":[],"tindex":"b874ab9a-8270-11e5-ac22-f7fcdf3d228b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:242","type":"CtReturnImpl","sourcecode":"return (double > 0) && (double > 0)"},"variableMap":{"ab_rb":"weightLimit","ab_ar":"weightLimit"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:210","type":"CtReturnImpl","sourcecode":"return ((com.graphhopper.routing.AStar.AStarEdge.double) + (com.graphhopper.routing.AStar.AStarEdge.double)) > (double)"},"status":-1},{"failures":[119,118,89,90,91,120,121,122,104,108],"tindex":"b874ab9b-8270-11e5-ac22-3f40af79bcff","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:148","type":"CtAssignmentImpl","sourcecode":"int = int = ((int)(java.lang.Math.sqrt(int)))"},"variableMap":{"latSize":"shift","size":"shift","lonSize":"shift"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:216","type":"CtOperatorAssignmentImpl","sourcecode":"int += com.graphhopper.routing.util.EncodedDoubleValue.getBits()"},"status":-1},{"failures":[],"tindex":"b874d2ac-8270-11e5-ac22-f7c0ad3edd59","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(5);\n} catch (java.lang.InterruptedException iex) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:89","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.VLongStorage.writeByte(((byte)((long & 127L) | 128L)))"},"status":-2},{"failures":[122],"tindex":"b874d2ad-8270-11e5-ac22-bbefcf811dcf","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper:306","type":"CtAssignmentImpl","sourcecode":"double = java.lang.Math.min((double / 1000), 50000)"},"variableMap":{"dist":"incEleSum"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:186","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-1},{"failures":[],"tindex":"b874d2ae-8270-11e5-ac22-c9fb039c2d2a","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.MiniPerfTest:44","type":"CtLocalVariableImpl","sourcecode":"long long = java.lang.System.nanoTime()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:172","type":"CtLocalVariableImpl","sourcecode":"long long = 1"},"status":-2},{"failures":[],"tindex":"b874d2af-8270-11e5-ac22-bba0cb364494","series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:176","type":"CtIfImpl","sourcecode":"if (int < (int))\n    long <<= 1;\nelse\n    break;\n"},"variableMap":{"i":"length","allBits":"length","hash":"bytePos"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:236","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    com.graphhopper.storage.UnsafeDataAccess.sun.misc.Unsafe.putByte((((long) + long) + int), byte[][int]);\n}"},"status":-2},{"failures":[3,4,5,29,6,7,9,10,62,123],"tindex":"b874d2b0-8270-11e5-ac22-231cead85678","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:361","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.reverse()"},"variableMap":{"clonePL":"fullPoints"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:49","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (java.util.List<com.graphhopper.routing.Path>.size()) ; int++) {\n    com.graphhopper.routing.Path com.graphhopper.routing.Path = java.util.List<com.graphhopper.routing.Path>.get(int);\n    long += com.graphhopper.routing.Path.getTime();\n    double += com.graphhopper.routing.Path.getDistance();\n    double += com.graphhopper.routing.Path.getWeight();\n    if (boolean) {\n        com.graphhopper.util.InstructionList com.graphhopper.util.InstructionList = com.graphhopper.routing.Path.calcInstructions(com.graphhopper.util.Translation);\n        if (!(com.graphhopper.util.InstructionList.isEmpty())) {\n            if (com.graphhopper.util.PointList.isEmpty()) {\n                com.graphhopper.util.PointList com.graphhopper.util.PointList = com.graphhopper.util.InstructionList.get(0).getPoints();\n                com.graphhopper.util.PointList = new com.graphhopper.util.PointList(((com.graphhopper.util.InstructionList.size()) * (java.lang.Math.min(10, com.graphhopper.util.PointList.size()))) , com.graphhopper.util.PointList.is3D());\n            } \n            for (com.graphhopper.util.Instruction com.graphhopper.util.Instruction : com.graphhopper.util.InstructionList) {\n                if (boolean) {\n                    int += com.graphhopper.util.Instruction.getPoints().size();\n                    com.graphhopper.util.DouglasPeucker.simplify(com.graphhopper.util.Instruction.getPoints());\n                } \n                com.graphhopper.util.InstructionList.add(com.graphhopper.util.Instruction);\n                com.graphhopper.util.PointList.add(com.graphhopper.util.Instruction.getPoints());\n            }\n            if ((int + 1) < (java.util.List<com.graphhopper.routing.Path>.size())) {\n                com.graphhopper.util.ViaInstruction com.graphhopper.util.ViaInstruction = new com.graphhopper.util.ViaInstruction(com.graphhopper.util.InstructionList.get(((com.graphhopper.util.InstructionList.size()) - 1)));\n                com.graphhopper.util.ViaInstruction.setViaCount((int + 1));\n                com.graphhopper.util.InstructionList.replaceLast(com.graphhopper.util.ViaInstruction);\n            } \n        } \n    } else if (boolean) {\n        com.graphhopper.util.PointList com.graphhopper.util.PointList = com.graphhopper.routing.Path.calcPoints();\n        if (com.graphhopper.util.PointList.isEmpty())\n            com.graphhopper.util.PointList = new com.graphhopper.util.PointList(com.graphhopper.util.PointList.size() , com.graphhopper.util.PointList.is3D());\n        \n        if (boolean) {\n            int = com.graphhopper.util.PointList.getSize();\n            com.graphhopper.util.DouglasPeucker.simplify(com.graphhopper.util.PointList);\n        } \n        com.graphhopper.util.PointList.add(com.graphhopper.util.PointList);\n    } \n    boolean = boolean && (com.graphhopper.routing.Path.isFound());\n}"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"b8745d70-8270-11e5-ac22-f58f4a597a12","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.BaseGraph.CommonEdgeIterator.getDistance","com.graphhopper.util.EdgeIteratorState.setDistance"]},"type":"staticDiff"}]},{"transformation":"b8745d72-8270-11e5-ac22-cf258a2b810a","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.index.LocationIndexTree.flush"]},"type":"staticDiff"},{"branches":{"com.graphhopper.reader.OSMReaderTest.testNegativeIds":["com.graphhopper.util.Helper_void_cleanHack().b","com.graphhopper.storage.index.LocationIndexTree_void_flush().b"],"com.graphhopper.GraphHopperAPITest.testLoad":["com.graphhopper.util.Helper_void_cleanHack().b","com.graphhopper.storage.AbstractDataAccess_void_setHeader(int,int).b","com.graphhopper.storage.RAMDataAccess_void_flush().e1","com.graphhopper.storage.RAMDataAccess_void_flush().b","com.graphhopper.storage.index.LocationIndexTree_void_flush().b","com.graphhopper.storage.RAMDataAccess_void_flush().t2"],"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":["com.graphhopper.util.Helper_void_cleanHack().b","com.graphhopper.storage.AbstractDataAccess_void_setHeader(int,int).b","com.graphhopper.storage.RAMDataAccess_void_flush().e1","com.graphhopper.storage.RAMDataAccess_void_flush().b","com.graphhopper.storage.index.LocationIndexTree_void_flush().b","com.graphhopper.storage.RAMDataAccess_void_flush().t2"],"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":["com.graphhopper.util.Helper_void_cleanHack().b","com.graphhopper.storage.AbstractDataAccess_void_setHeader(int,int).b","com.graphhopper.storage.RAMDataAccess_void_flush().e1","com.graphhopper.storage.RAMDataAccess_void_flush().b","com.graphhopper.storage.index.LocationIndexTree_void_flush().b","com.graphhopper.storage.RAMDataAccess_void_flush().t2"],"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":["com.graphhopper.util.Helper_void_cleanHack().b","com.graphhopper.storage.AbstractDataAccess_void_setHeader(int,int).b","com.graphhopper.storage.RAMDataAccess_void_flush().e1","com.graphhopper.storage.RAMDataAccess_void_flush().b","com.graphhopper.storage.index.LocationIndexTree_void_flush().b","com.graphhopper.storage.RAMDataAccess_void_flush().t2"],"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":["com.graphhopper.util.Helper_void_cleanHack().b","com.graphhopper.storage.AbstractDataAccess_void_setHeader(int,int).b","com.graphhopper.storage.RAMDataAccess_void_flush().e1","com.graphhopper.storage.RAMDataAccess_void_flush().b","com.graphhopper.storage.index.LocationIndexTree_void_flush().b","com.graphhopper.storage.RAMDataAccess_void_flush().t2"]},"type":"branch"}]}]}
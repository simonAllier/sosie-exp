{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":76,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testNoErrorOnEdgeCase_lastIndex":109,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":4,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":43,"com.graphhopper.routing.PathTest.testFindInstruction":3,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":62,"com.graphhopper.reader.OSMReaderTest.testFerry":1,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":22,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":141,"com.graphhopper.storage.GraphHopperStorageCHTest.testDoThrowExceptionIfDimDoesNotMatch":101,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":144,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":116,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":129,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":33,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":38,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":137,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":41,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":83,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":145,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":142,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":73,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":152,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":82,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":58,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testNoErrorOnEdgeCase_lastIndex":107,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":71,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":81,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":61,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":54,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":67,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":128,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":59,"com.graphhopper.GraphHopperTest.testPrepare":15,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":92,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":42,"com.graphhopper.storage.GraphStorageViaMMapTest.testInfinityWeight":93,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":49,"com.graphhopper.search.NameIndexTest.testFlush":122,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":5,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":89,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":25,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":84,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":34,"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":105,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":135,"com.graphhopper.GraphHopperAPITest.testDisconnected179":57,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":124,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":69,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":140,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":139,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":75,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":53,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":64,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":143,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":26,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":110,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":31,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":133,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":78,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":154,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":45,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":79,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":96,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":16,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":50,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":60,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":112,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":13,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":149,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":55,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":148,"com.graphhopper.GraphHopperTest.testLoadOSM":19,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":8,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":88,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":12,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":11,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":10,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":87,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":9,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":37,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":153,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":40,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":74,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":120,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":52,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":104,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":146,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":94,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":47,"com.graphhopper.storage.MMapDirectoryTest.testNoErrorForDACreate":103,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":131,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":99,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":130,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":113,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":95,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":23,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":72,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":91,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":150,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":48,"com.graphhopper.storage.index.Location2IDFullIndexTest.testNoErrorOnEdgeCase_lastIndex":108,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":127,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":97,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":24,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":119,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":32,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":44,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":126,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":51,"com.graphhopper.storage.StorablePropertiesTest.testStore":102,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":98,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":90,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":106,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":136,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":39,"com.graphhopper.GraphHopperTest.testFootAndCar":17,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":100,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":68,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":70,"com.graphhopper.storage.GraphStorageViaMMapTest.testBounds":85,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":29,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":28,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":65,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":115,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":147,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNoErrorOnEdgeCase_lastIndex":114,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":36,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":80,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":125,"com.graphhopper.GraphHopperTest.testVia":14,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":20,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":63,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":121,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":35,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":138,"com.graphhopper.reader.OSMReaderTest.testTurnFlagCombination":7,"com.graphhopper.GraphHopperAPITest.testLoad":56,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":18,"com.graphhopper.routing.util.FootFlagEncoderTest.testTurnFlagEncoding_noCostsAndRestrictions":6,"com.graphhopper.GraphHopperTest.testFootOnly":21,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":46,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":134,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":151,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":111,"com.graphhopper.storage.RAMDirectoryTest.testNoErrorForDACreate":117,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":132,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testParseDuration":0,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":77,"com.graphhopper.util.InstructionListTest.testFind":2,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":27,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":86,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":30,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":66,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":118,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":123},"transformations":[{"failures":[],"tindex":"6e72c91f-827c-11e5-8154-9be4c21f3340","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:121","type":"CtReturnImpl","sourcecode":"return java.lang.Math.toDegrees(double)"},"variableMap":{"orientation":"java.lang.Double.POSITIVE_INFINITY"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:105","type":"CtReturnImpl","sourcecode":"return java.lang.Double.double"},"status":-2},{"failures":[0,1],"tindex":"6e72f030-827c-11e5-8154-85376b7f5b41","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:169","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = (((java.lang.String) + \"/\") + java.lang.String) + \".zip\""},"variableMap":{"baseUrl":"str","name":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:486","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = java.lang.String.substring(0, int)"},"status":-1},{"failures":[],"tindex":"6e72f031-827c-11e5-8154-89f980bb95ae","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:124","type":"CtIfImpl","sourcecode":"if (long == long)\n    return long;\nelse\n    return ~long;\n"},"variableMap":{"high":"acceptBit","highKey":"acceptBit","key":"acceptBit"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:251","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"railway\", \"platform\"))\n    return long;\n"},"status":-2},{"failures":[2,3],"tindex":"6e731742-827c-11e5-8154-05e4762e72a2","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:73","type":"CtOperatorAssignmentImpl","sourcecode":"double += double"},"variableMap":{"deltaX":"prevLat","maxX":"prevLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:326","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-1},{"failures":[],"tindex":"6e731743-827c-11e5-8154-fb6c127e9ee5","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper:176","type":"CtLocalVariableImpl","sourcecode":"int int = 1024 * 8"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:48","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.storage.GraphHopperStorage.getNodes()"},"status":-2},{"failures":[],"tindex":"6e731744-827c-11e5-8154-c112b5859972","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:186","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(2000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.TurnCostExtension:92","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.flush()"},"status":-2},{"failures":[4,5],"tindex":"6e731745-827c-11e5-8154-c394efdf5de0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:160","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.QueryResult.setWayIndex((((com.graphhopper.util.PointList.getSize()) - (com.graphhopper.storage.index.QueryResult.getWayIndex())) - 1))"},"status":-1},{"failures":[6,7],"tindex":"6e731746-827c-11e5-8154-3d28326c03c0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:179","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"6e731747-827c-11e5-8154-150f01183bfd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:139","type":"CtIfImpl","sourcecode":"if (int < int) {\n    int += int;\n    int += int;\n} "},"variableMap":{"err":"edge","tmpErr":"adjNode","y1":"adjNode","dLon":"edge","sLat":"adjNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:186","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.Edge.isValid(com.graphhopper.storage.EdgeEntry.int)) {\n    com.graphhopper.routing.Path.processEdge(com.graphhopper.storage.EdgeEntry.int, com.graphhopper.storage.EdgeEntry.int);\n    com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry;\n}"},"status":-2},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"tindex":"6e733e58-827c-11e5-8154-03c893ddecb8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:105","type":"CtAssignmentImpl","sourcecode":"gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry> = gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry>"},"status":-1},{"failures":[24,25,26,29,42,45,46,48,50,58,51,53,54,59,60,55],"tindex":"6e733e59-827c-11e5-8154-552152c0c31f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:189","type":"CtOperatorAssignmentImpl","sourcecode":"int /= 2"},"variableMap":{"i":"newShortcuts"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:326","type":"CtOperatorAssignmentImpl","sourcecode":"int += com.graphhopper.routing.ch.PrepareContractionHierarchies.addShortcuts(int)"},"status":-1},{"failures":[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122],"tindex":"6e733e5a-827c-11e5-8154-83e391dba699","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:176","type":"CtIfImpl","sourcecode":"if ((java.lang.String.length()) > 64)\n    throw new java.lang.UnsupportedOperationException((\"Strings needs to fit into a \\'long\\' but length was \" + (java.lang.String.length())));\n"},"variableMap":{"str":"location"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:196","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.GHDirectory.isStoring())\n    new java.io.File(java.lang.String).mkdirs();\n"},"status":-1},{"failures":[63,71,72,73,75,79,80,87,88,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154],"tindex":"6e733e5b-827c-11e5-8154-4b1305db77a1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:230","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.storage.BaseGraph.getRemovedNodes().getCardinality()"},"variableMap":{"baseGraph":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:634","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.storage.BaseGraph.getNodes()"},"status":-1},{"failures":[],"tindex":"6e733e5c-827c-11e5-8154-653d8069a660","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.SparseArray:132","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:329","type":"CtLocalVariableImpl","sourcecode":"int int = java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>.size()"},"status":-2},{"failures":[],"tindex":"6e73656d-827c-11e5-8154-f51f910fe28d","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:67","type":"CtReturnImpl","sourcecode":"return java.lang.Math.atan2((double - double), (double * (double - double)))"},"variableMap":{"lat1":"distance","lat2":"distance","lon1":"distance","lon2":"distance","shrinkFactor":"distance"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TurnWeighting:67","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.Weighting.getMinWeight(double)"},"status":-2},{"failures":[],"tindex":"6e73656e-827c-11e5-8154-594bbc988649","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.CompressedArray:144","type":"CtAssignmentImpl","sourcecode":"int = 0"},"variableMap":{"currentEntry":"com.graphhopper.reader.OSMReader.PILLAR_NODE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:638","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.OSMReader.getNodeMap().put(long, com.graphhopper.reader.OSMReader.int)"},"status":-2},{"failures":[],"tindex":"6e73656f-827c-11e5-8154-c189d1b0ce52","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:318","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.util.EdgeIterator.Edge.isValid(int)) != (com.graphhopper.util.EdgeIterator.Edge.isValid(int))) {\n    throw new java.lang.IllegalStateException(((((\"Skipped edges of a shortcut needs \" + \"to be both valid or invalid but they were not \") + int) + \", \") + int));\n} "},"variableMap":{"edge1":"from","edge2":"from"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:86","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.routing.util.TraversalMode.isEdgeBased())) {\n    gnu.trove.map.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.put(int, com.graphhopper.routing.AStar.AStarEdge);\n} "},"status":0},{"failures":[],"tindex":"6e736570-827c-11e5-8154-ef9820bc7210","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:96","type":"CtAssignmentImpl","sourcecode":"double = double + (2 * (java.lang.Math.double))"},"variableMap":{"resultOrientation":"x","orientation":"absY","java.lang.Math.PI":"absY"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:44","type":"CtAssignmentImpl","sourcecode":"double = (double + double) / (double - double)"},"status":-2},{"failures":[],"tindex":"6e736571-827c-11e5-8154-e312b3e195ea","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.RoutingAlgorithmFactorySimple:37","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.AlgorithmOptions.java.lang.String.equalsIgnoreCase(java.lang.String)) {\n    return new com.graphhopper.routing.DijkstraBidirectionRef(com.graphhopper.storage.Graph , com.graphhopper.routing.AlgorithmOptions.getFlagEncoder() , com.graphhopper.routing.AlgorithmOptions.getWeighting() , com.graphhopper.routing.AlgorithmOptions.getTraversalMode());\n} else if (com.graphhopper.routing.AlgorithmOptions.java.lang.String.equalsIgnoreCase(java.lang.String)) {\n    return new com.graphhopper.routing.Dijkstra(com.graphhopper.storage.Graph , com.graphhopper.routing.AlgorithmOptions.getFlagEncoder() , com.graphhopper.routing.AlgorithmOptions.getWeighting() , com.graphhopper.routing.AlgorithmOptions.getTraversalMode());\n} else if (com.graphhopper.routing.AlgorithmOptions.java.lang.String.equalsIgnoreCase(java.lang.String)) {\n    com.graphhopper.routing.AStarBidirection com.graphhopper.routing.AStarBidirection = new com.graphhopper.routing.AStarBidirection(com.graphhopper.storage.Graph , com.graphhopper.routing.AlgorithmOptions.getFlagEncoder() , com.graphhopper.routing.AlgorithmOptions.getWeighting() , com.graphhopper.routing.AlgorithmOptions.getTraversalMode());\n    com.graphhopper.routing.AStarBidirection.setApproximation(com.graphhopper.routing.RoutingAlgorithmFactorySimple.getApproximation(com.graphhopper.routing.AlgorithmOptions.java.lang.String, com.graphhopper.routing.AlgorithmOptions, com.graphhopper.storage.Graph.getNodeAccess()));\n    return com.graphhopper.routing.AStarBidirection;\n} else if (com.graphhopper.routing.AlgorithmOptions.java.lang.String.equalsIgnoreCase(java.lang.String)) {\n    return new com.graphhopper.routing.DijkstraOneToMany(com.graphhopper.storage.Graph , com.graphhopper.routing.AlgorithmOptions.getFlagEncoder() , com.graphhopper.routing.AlgorithmOptions.getWeighting() , com.graphhopper.routing.AlgorithmOptions.getTraversalMode());\n} else if (com.graphhopper.routing.AlgorithmOptions.java.lang.String.equalsIgnoreCase(java.lang.String)) {\n    com.graphhopper.routing.AStar com.graphhopper.routing.AStar = new com.graphhopper.routing.AStar(com.graphhopper.storage.Graph , com.graphhopper.routing.AlgorithmOptions.getFlagEncoder() , com.graphhopper.routing.AlgorithmOptions.getWeighting() , com.graphhopper.routing.AlgorithmOptions.getTraversalMode());\n    com.graphhopper.routing.AStar.setApproximation(com.graphhopper.routing.RoutingAlgorithmFactorySimple.getApproximation(com.graphhopper.routing.AlgorithmOptions.java.lang.String, com.graphhopper.routing.AlgorithmOptions, com.graphhopper.storage.Graph.getNodeAccess()));\n    return com.graphhopper.routing.AStar;\n} else {\n    throw new java.lang.IllegalArgumentException((((\"Algorithm \" + java.lang.String) + \" not found in \") + (java.lang.Object.getClass().getName())));\n}"},"status":-2},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"tindex":"6e738c82-827c-11e5-8154-79e99b442c54","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:233","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.EdgeEntry == null)\n    return ;\n"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"6e73656f-827c-11e5-8154-c189d1b0ce52","diffs":[{"methodsDiff":{"delete":["gnu.trove.map.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.put"]},"branchesDiff":{"delete":["t0"]},"type":"staticDiff"}]}]}
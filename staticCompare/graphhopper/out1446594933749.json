{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":16,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":177,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":101,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":113,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":2,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":127,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":46,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeightMMap":198,"com.graphhopper.reader.OSMReaderTest.testWithBounds":73,"com.graphhopper.storage.MMapDataAccessTest.testSegments":55,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":23,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":13,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":146,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":147,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeight":199,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":22,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testNoErrorOnEdgeCase_lastIndex":45,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":187,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":21,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":85,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":80,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":84,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":195,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":32,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":120,"com.graphhopper.storage.GraphStorageViaMMapTest.testInfinityWeight":33,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":176,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":183,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":164,"com.graphhopper.util.InstructionListTest.testWayList":132,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":170,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":134,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":68,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":9,"com.graphhopper.storage.MMapDataAccessTest.testLoadClose":56,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":65,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":148,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":4,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":165,"com.graphhopper.storage.MMapDataAccessTest.testRenameFlush":51,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":160,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":72,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":150,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":152,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":19,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":36,"com.graphhopper.storage.MMapDataAccessTest.testEnsureCapacity":52,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":41,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":121,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":197,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":105,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":86,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":99,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":172,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":149,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":77,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":60,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":192,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":90,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":91,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":34,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":181,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":151,"com.graphhopper.storage.MMapDataAccessTest.testCopy":50,"com.graphhopper.routing.PathTest.testWayList":157,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":35,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":12,"com.graphhopper.storage.MMapDataAccessTest.testRenameNoFlush":53,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":95,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":182,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":122,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":59,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":163,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":98,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":168,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":75,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":117,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":96,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":124,"com.graphhopper.coll.OSMIDSegmentedMapTest.testGet2":62,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":159,"com.graphhopper.util.GHUtilityTest.testSort":131,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":10,"com.graphhopper.storage.GraphStorageViaMMapTest.testBounds":25,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":66,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":114,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":44,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":81,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":79,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":111,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":180,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":145,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":26,"com.graphhopper.routing.PathTest.testFound":153,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":143,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":6,"com.graphhopper.util.GHUtilityTest.testCopy":130,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":167,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testNoErrorOnEdgeCase_lastIndex":47,"com.graphhopper.routing.PathTest.testFindInstruction":158,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":161,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":133,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":118,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":169,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":112,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":125,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":173,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":128,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":175,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":119,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":189,"com.graphhopper.storage.MMapDataAccessTest.testLoadFlush":57,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":11,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":1,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":7,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":194,"com.graphhopper.storage.MMapDataAccessTest.testTrimTo":54,"com.graphhopper.storage.MMapDataAccessTest.textMixMMAP2RAM":48,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":89,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":29,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":24,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":106,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":103,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":104,"com.graphhopper.storage.StorablePropertiesTest.testVersionCheck":67,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":123,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":15,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":193,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":39,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":18,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":71,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":156,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":188,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":92,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":179,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":78,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":185,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":196,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":82,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":186,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":140,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":102,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":135,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":28,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":139,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":94,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":138,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":27,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":137,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":136,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":110,"com.graphhopper.util.GHUtilityTest.testSort2":129,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":174,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":14,"com.graphhopper.reader.OSMReaderTest.testMain":70,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":42,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":31,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":162,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":87,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":107,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":116,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":144,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":97,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":126,"com.graphhopper.storage.index.Location2IDFullIndexTest.testNoErrorOnEdgeCase_lastIndex":38,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":76,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":37,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":83,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":178,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":191,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":100,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":30,"com.graphhopper.GraphHopperTest.testFootAndCar":142,"com.graphhopper.coll.OSMIDSegmentedMapTest.testGet":61,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":0,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":8,"com.graphhopper.routing.PathTest.testTime":154,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":5,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":74,"com.graphhopper.storage.MMapDataAccessTest.testBoundsCheck":49,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNoErrorOnEdgeCase_lastIndex":43,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":190,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":108,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":171,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":115,"com.graphhopper.GraphHopperTest.testVia":141,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":3,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":93,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":63,"com.graphhopper.GraphHopperTest.testFootOnly":69,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":88,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":40,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":64,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":17,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":155,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":166,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":184,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":58,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":109},"transformations":[{"failures":[],"tindex":"5f1d9268-8286-11e5-bdf7-fdd054ca0776","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:158","type":"CtAssignmentImpl","sourcecode":"int = 16"},"variableMap":{"tmpNo":"offset"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilBig:76","type":"CtUnaryOperatorImpl","sourcecode":"++int"},"status":0},{"failures":[],"tindex":"5f1db979-8286-11e5-bdf7-ebb32dddfafe","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.EdgeAccess:194","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int == (com.graphhopper.util.EdgeIterator.int)))\n    throw new java.lang.IllegalStateException((((((\"Cannot write edge with illegal ID:\" + int) + \"; nodeThis:\") + int) + \", nodeOther:\") + int));\n"},"variableMap":{"com.graphhopper.util.EdgeIterator.NO_EDGE":"length","nodeThis":"length","edgeId":"length","nodeOther":"length"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.search.NameIndex:98","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < 2 ; int++) {\n    byte[] = java.lang.String.getBytes(com.graphhopper.util.Helper.java.nio.charset.Charset);\n    if ((byte[].int) > 255) {\n        java.lang.String java.lang.String = java.lang.String.substring(0, (256 / 4));\n        com.graphhopper.search.NameIndex.org.slf4j.Logger.info((((\"Way name is too long: \" + java.lang.String) + \" truncated to \") + java.lang.String));\n        java.lang.String = java.lang.String;\n        continue;\n    } \n    break;\n}"},"status":-2},{"failures":[],"tindex":"5f1db97a-8286-11e5-bdf7-2d43f39d47a3","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:896","type":"CtOperatorAssignmentImpl","sourcecode":"int += 4"},"variableMap":{"index":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntIntBinHeap:213","type":"CtAssignmentImpl","sourcecode":"int[][int] = int[][(int / 2)]"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"tindex":"5f1de08b-8286-11e5-bdf7-0917abd6ef42","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.pbf.PbfBlobDecoder:321","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.reader.OSMRelation.Member.int"},"variableMap":{"com.graphhopper.reader.OSMRelation.Member.NODE":"segmentSizePower"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:303","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long >> (int)))"},"status":-1},{"failures":[],"tindex":"5f1de08c-8286-11e5-bdf7-a74c3f44d9d8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.QueryGraph:707","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.VirtualEdgeIterator.add(com.graphhopper.util.EdgeIterator.detach(false))"},"variableMap":{"iter":"iter","vIter":"iter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BreadthFirstSearch:44","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n    if (com.graphhopper.util.XFirstSearch.(checkAdjacent(com.graphhopper.util.EdgeIterator)) && (!(com.graphhopper.coll.GHBitSet.contains(int)))) {\n        com.graphhopper.coll.GHBitSet.add(int);\n        com.graphhopper.util.SimpleIntDeque.push(int);\n    } \n}"},"status":-2},{"failures":[],"tindex":"5f1de08d-8286-11e5-bdf7-5d70b01f6eb6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GHRequest:69","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GHRequest.this(new com.graphhopper.util.shapes.GHPoint(double , double), new com.graphhopper.util.shapes.GHPoint(double , double), double, double)"},"status":-2},{"failures":[61,62],"tindex":"5f1de08e-8286-11e5-bdf7-277902e2989d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:204","type":"CtLocalVariableImpl","sourcecode":"long long = 1L << (int - 1)"},"variableMap":{"bits":"retBucket"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:107","type":"CtLocalVariableImpl","sourcecode":"long long = long[][int]"},"status":-1},{"failures":[63,64,65,66],"tindex":"5f1de08f-8286-11e5-bdf7-ab2d980532b1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:40","type":"CtLocalVariableImpl","sourcecode":"double double = (java.lang.Math.abs(double)) + 1.0E-10"},"variableMap":{"y":"a_lat_deg"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:219","type":"CtLocalVariableImpl","sourcecode":"double double = double"},"status":-1},{"failures":[67],"tindex":"5f1e06a0-8286-11e5-bdf7-9961ec351a31","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:173","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[],"tindex":"5f1e06a1-8286-11e5-bdf7-13d167616885","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.VLongStorage:90","type":"CtOperatorAssignmentImpl","sourcecode":"long >>>= 7"},"variableMap":{"i":"dijkstraCount"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:623","type":"CtUnaryOperatorImpl","sourcecode":"(long)++"},"status":0},{"failures":[],"tindex":"5f1e06a2-8286-11e5-bdf7-a1745d414a32","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.MapEntry:92","type":"CtLocalVariableImpl","sourcecode":"int int = 7"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:106","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long / (int)))"},"status":-2},{"failures":[68],"tindex":"5f1e06a3-8286-11e5-bdf7-0f6d6f2663f7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:153","type":"CtReturnImpl","sourcecode":"return (int) == 0"},"variableMap":{"size":"index"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:221","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.BaseGraph.getRemovedNodes().contains(int)"},"status":-1},{"failures":[],"tindex":"5f1e06a4-8286-11e5-bdf7-eb0932605e70","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:121","type":"CtReturnImpl","sourcecode":"return java.lang.Math.toDegrees(double)"},"variableMap":{"orientation":"speedVal"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:334","type":"CtReturnImpl","sourcecode":"return double"},"status":-2},{"failures":[],"tindex":"5f1e06a5-8286-11e5-bdf7-153d27e2f823","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:974","type":"CtAssignmentImpl","sourcecode":"this.com.graphhopper.routing.util.EncodingManager = com.graphhopper.routing.util.EncodingManager"},"variableMap":{"em":"this","encodingManager":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:85","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.EncodingManager.this(java.util.Arrays.asList(com.graphhopper.routing.util.FlagEncoder[]))"},"status":-2},{"failures":[69,70,71,72,73],"tindex":"5f1e06a6-8286-11e5-bdf7-7b1e8e3751fe","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.Path:246","type":"CtIfImpl","sourcecode":"if (double == 0)\n    throw new java.lang.IllegalStateException(\"Speed cannot be 0 for unblocked edge, use access properties to mark edge blocked! Should only occur for shortest path calculation. See #242.\");\n"},"variableMap":{"speed":"lon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:842","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.PointList.is3D())\n    com.graphhopper.util.PointList.add(double, double, double);\nelse\n    com.graphhopper.util.PointList.add(double, double);\n"},"status":-1},{"failures":[0,74,75,76,77,78,8,13,15,16,26,79,80,81,82,83,84,39,40,41,42,44,63,85,86,87,88,89,64,90,91,92,93,94,95,96,97,65,98,99,100,101,102,66,103,104,105,106,107,108,109,110,111,112,113,114,115,116,58,59,117,118,119,120,121,60,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,68,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197],"tindex":"5f1e2db7-8286-11e5-bdf7-9f573e5192ab","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:184","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Math.max(((int)(java.lang.Math.pow(2, int))), com.graphhopper.storage.AbstractDataAccess.int)"},"variableMap":{"com.graphhopper.storage.AbstractDataAccess.SEGMENT_SIZE_MIN":"edgeCount","tmp":"edgeCount","segmentSizeInBytes":"edgeCount"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:522","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-2},{"failures":[],"tindex":"5f1e2db8-8286-11e5-bdf7-b90e49fbc2ee","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.shapes.BBox:230","type":"CtLocalVariableImpl","sourcecode":"int int = 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:635","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"5f1e2db9-8286-11e5-bdf7-3d1744c64042","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:417","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.CHGraphImpl.CHEdgeIteratorImpl.checkShortcut(false, \"setName\")"},"variableMap":{"this":"iter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:260","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.routing.AStar.AStarEdge == null) || ((com.graphhopper.routing.AStar.AStarEdge.double) > float)) {\n    double double = com.graphhopper.routing.util.ConsistentWeightApproximator.approximate(int, boolean);\n    double double = float + double;\n    if (com.graphhopper.routing.AStar.AStarEdge == null) {\n        com.graphhopper.routing.AStar.AStarEdge = new com.graphhopper.routing.AStar.AStarEdge(com.graphhopper.util.EdgeIterator.getEdge() , int , double , float);\n        gnu.trove.map.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.put(int, com.graphhopper.routing.AStar.AStarEdge);\n    } else {\n        assert (com.graphhopper.routing.AStar.AStarEdge.double) > double : \"Inconsistent distance estimate\";\n        java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.remove(com.graphhopper.routing.AStar.AStarEdge);\n        com.graphhopper.routing.AStar.AStarEdge.int = com.graphhopper.util.EdgeIterator.getEdge();\n        com.graphhopper.routing.AStar.AStarEdge.double = double;\n        com.graphhopper.routing.AStar.AStarEdge.double = float;\n    }\n    com.graphhopper.routing.AStar.AStarEdge.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge;\n    java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.add(com.graphhopper.routing.AStar.AStarEdge);\n    com.graphhopper.routing.AStarBidirection.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge, int);\n} "},"status":-2},{"failures":[72,198,199],"tindex":"5f1e54ca-8286-11e5-bdf7-e1f4dd8d086a","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:288","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt((int * 4), com.graphhopper.storage.DataAccess.getInt((int * 4)))"},"variableMap":{"indexCopy":"heights","index":"heights","from":"bytePos","to":"bytePos"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:294","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setShort(int, short)"},"status":-1},{"failures":[],"tindex":"5f1e54cb-8286-11e5-bdf7-d3d4f240e5d7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:361","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:92","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
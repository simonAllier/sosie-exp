{"failureDictionary":{"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":18,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":22,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":31,"com.graphhopper.reader.OSMReaderTest.testFerry":33,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":39,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":98,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":25,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":71,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":26,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":49,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidanceOfHighMaxSpeed":53,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":66,"com.graphhopper.reader.OSMReaderTest.testWithBounds":96,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":48,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":2,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":17,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":54,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":97,"com.graphhopper.GraphHopperTest.testPrepare":11,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":28,"com.graphhopper.util.InstructionListTest.testWayList2":64,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":44,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":21,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":23,"com.graphhopper.util.InstructionListTest.testWayList":87,"com.graphhopper.reader.OSMReaderTest.testOneWay":35,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":38,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":37,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":55,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":36,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":99,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":65,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":67,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":63,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":91,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":61,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":92,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":40,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":77,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":59,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":12,"com.graphhopper.GraphHopperTest.testLoadOSM":15,"com.graphhopper.routing.util.FootFlagEncoderTest.handleWayTagsRoundabout":56,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":5,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":68,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":9,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":8,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":7,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":52,"com.graphhopper.reader.OSMReaderTest.testSort":86,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":6,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":95,"com.graphhopper.util.GHUtilityTest.testSort2":101,"com.graphhopper.util.DistanceCalcEarthTest.testEdgeDistance":81,"com.graphhopper.reader.OSMReaderTest.testMain":85,"com.graphhopper.util.DistanceCalcEarthTest.testPrecisionBug":80,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":57,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":42,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":58,"com.graphhopper.routing.PathTest.testWayList":90,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":78,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":51,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":29,"com.graphhopper.util.DistanceCalcEarthTest.testPrecisionBug2":82,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":93,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":43,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":76,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":34,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":41,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":45,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":79,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":27,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointCount":83,"com.graphhopper.util.DouglasPeuckerTest.testPathSimplify":84,"com.graphhopper.GraphHopperTest.testFootAndCar":13,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":47,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":62,"com.graphhopper.util.GHUtilityTest.testSort":102,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":3,"com.graphhopper.util.InstructionListTest.testCreateGPX":88,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":72,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":69,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":75,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":46,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":20,"com.graphhopper.GraphHopperTest.testVia":10,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":73,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":16,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":104,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":1,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":14,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":74,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":19,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":89,"com.graphhopper.GraphHopperTest.testFootOnly":100,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":94,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":4,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":60,"com.graphhopper.reader.OSMReaderTest.testBarriers":0,"com.graphhopper.storage.index.BresenhamLineTest.testBresenhamToLeft":30,"com.graphhopper.reader.OSMElementTest.testSetTags":32,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":24,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":50,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":70,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":103},"transformations":[{"failures":[0,1],"tindex":"2d70ad84-82c7-11e5-81c8-1df676e61daf","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:135","type":"CtOperatorAssignmentImpl","sourcecode":"int -= int"},"variableMap":{"err":"minNetworkSize","dLat":"minNetworkSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:236","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"status":-1},{"failures":[],"tindex":"2d70d495-82c7-11e5-81c8-e58d9cc2d14e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:367","type":"CtIfImpl","sourcecode":"if (int > int)\n    throw new java.lang.IllegalArgumentException(\"from must be smaller or equals to end\");\n"},"variableMap":{"from":"to","end":"to"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:140","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.ConsistentWeightApproximator.setGoalNode(int)"},"status":-1},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"tindex":"2d70d496-82c7-11e5-81c8-e1fff66bbfbb","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:922","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.PointList.getLatitude(int)"},"variableMap":{"pointIndex":"wayIndex","pointList":"fullPL"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.QueryResult:179","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.PointList.getLatitude(((int) + 1))"},"status":-1},{"failures":[30,31],"tindex":"2d70fba7-82c7-11e5-81c8-d95470f64e80","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:109","type":"CtIfImpl","sourcecode":"if (int < 15)\n    int = 15;\n"},"variableMap":{"cap":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:274","type":"CtIfImpl","sourcecode":"if (int > 0)\n    java.lang.StringBuilder.append(\", \");\n"},"status":-1},{"failures":[32],"tindex":"2d70fba8-82c7-11e5-81c8-0df181616d31","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:154","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:97","type":"CtInvocationImpl","sourcecode":"java.util.Map<java.lang.String, java.lang.Object>.clear()"},"status":-1},{"failures":[],"tindex":"2d70fba9-82c7-11e5-81c8-f918160996eb","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.shapes.BBox:92","type":"CtIfImpl","sourcecode":"if (double > (double)) {\n    double = double;\n} "},"variableMap":{"maxLat":"minEle","lat":"minEle"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:202","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setHeader((7 * 4), com.graphhopper.util.Helper.eleToInt(com.graphhopper.util.shapes.BBox.double))"},"status":-2},{"failures":[33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"tindex":"2d70fbaa-82c7-11e5-81c8-93c711fbb233","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:475","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(0.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"status":-1},{"failures":[38,56,45,57,58,59,60,61,62,63],"tindex":"2d70fbab-82c7-11e5-81c8-7faaff0cdc77","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:153","type":"CtReturnImpl","sourcecode":"return (int) == 0"},"variableMap":{"size":"com.graphhopper.routing.util.FlagEncoder.K_ROUNDABOUT"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:729","type":"CtSwitchImpl","sourcecode":"switch (int) {\n    case com.graphhopper.routing.util.AbstractFlagEncoder.int :\n        return com.graphhopper.routing.util.AbstractFlagEncoder.isForward(long);\n    case com.graphhopper.routing.util.AbstractFlagEncoder.int :\n        return com.graphhopper.routing.util.AbstractFlagEncoder.isBackward(long);\n    case com.graphhopper.routing.util.FlagEncoder.int :\n        return (long & (long)) != 0;\n    default :\n        throw new java.lang.IllegalArgumentException(((\"Unknown key \" + int) + \" for boolean value\"));\n}"},"status":-1},{"failures":[64],"tindex":"2d7122bc-82c7-11e5-81c8-3b1124f21489","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:282","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[],"tindex":"2d7122bd-82c7-11e5-81c8-a307575237b0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:315","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.DistanceCalc.calcNormalizedDist(double, double, double, double)"},"status":-2},{"failures":[],"tindex":"2d7122be-82c7-11e5-81c8-1939716ebc64","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:307","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:145","type":"CtReturnImpl","sourcecode":"return 1"},"status":0},{"failures":[],"tindex":"2d7122bf-82c7-11e5-81c8-49c508a2b058","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PointList:218","type":"CtIfImpl","sourcecode":"if (!(boolean))\n    return java.lang.Double.double;\n"},"variableMap":{"java.lang.Double.NaN":"speed","is3D":"force"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:819","type":"CtIfImpl","sourcecode":"if (double >= 0) {\n    if (boolean || (double < double))\n        return double * 0.9;\n    \n} "},"status":0},{"failures":[],"tindex":"2d7122c0-82c7-11e5-81c8-c7d670a33193","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:577","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.CHGraphImpl.this.getWeight(this)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TurnWeighting:96","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.TurnCostEncoder.getTurnCost(long)"},"status":-2},{"failures":[],"tindex":"2d7122c1-82c7-11e5-81c8-0503b886c896","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.EdgeAccess:133","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt(((long + (int)) + 4), com.graphhopper.util.BitUtil.getIntHigh(long))"},"variableMap":{"edgePointer":"edgePointer","E_FLAGS":"length","bitUtil":"bitUtil","edges":"wayGeometry","flags":"edgePointer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:824","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.util.PointList != null) && (!(com.graphhopper.util.PointList.isEmpty()))) {\n    if ((com.graphhopper.util.PointList.getDimension()) != (com.graphhopper.storage.NodeAccess.getDimension()))\n        throw new java.lang.IllegalArgumentException(((((\"Cannot use pointlist which is \" + (com.graphhopper.util.PointList.getDimension())) + \"D for graph which is \") + (com.graphhopper.storage.NodeAccess.getDimension())) + \"D\"));\n    \n    int int = com.graphhopper.util.PointList.getSize();\n    int int = com.graphhopper.storage.NodeAccess.getDimension();\n    int int = com.graphhopper.storage.BaseGraph.nextGeoRef((int * int));\n    com.graphhopper.storage.DataAccess.setInt((long + (int)), int);\n    long long = ((long)(int)) * 4;\n    byte[] byte[] = new byte[((int * int) * 4) + 4];\n    com.graphhopper.storage.BaseGraph.ensureGeometry(long, byte[].int);\n    com.graphhopper.util.BitUtil.fromInt(byte[], int, 0);\n    if (boolean)\n        com.graphhopper.util.PointList.reverse();\n    \n    int int = 4;\n    boolean boolean = com.graphhopper.storage.NodeAccess.is3D();\n    for (int int = 0 ; int < int ; int++) {\n        double double = com.graphhopper.util.PointList.getLatitude(int);\n        com.graphhopper.util.BitUtil.fromInt(byte[], com.graphhopper.util.Helper.degreeToInt(double), int);\n        int += 4;\n        com.graphhopper.util.BitUtil.fromInt(byte[], com.graphhopper.util.Helper.degreeToInt(com.graphhopper.util.PointList.getLongitude(int)), int);\n        int += 4;\n        if (boolean) {\n            com.graphhopper.util.BitUtil.fromInt(byte[], com.graphhopper.util.Helper.eleToInt(com.graphhopper.util.PointList.getElevation(int)), int);\n            int += 4;\n        } \n    }\n    com.graphhopper.storage.DataAccess.setBytes(long, byte[], byte[].int);\n} else {\n    com.graphhopper.storage.DataAccess.setInt((long + (int)), 0);\n}"},"status":-2},{"failures":[65,66,67,3,68,69,70,71,72,73,74,75,76,4,77,78,79,80,81,82,83,31,84,85,86,10,11,12,13,14,15,16,25,27,28],"tindex":"2d7149d2-82c7-11e5-81c8-5bef26da0e40","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:413","type":"CtReturnImpl","sourcecode":"return 140"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:167","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.DistanceCalcEarth.calcNormalizedDist(double, (double / double), double, double)"},"status":-1},{"failures":[87,88,89,90],"tindex":"2d7149d3-82c7-11e5-81c8-a1cc433dce5a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:104","type":"CtAssignmentImpl","sourcecode":"this.double = double"},"status":-1},{"failures":[33,85,86,0,91,92,93,94,1,95,96,34,35,97,98,10,11,12,14,15,99,16,100],"tindex":"2d7149d4-82c7-11e5-81c8-ab2addef1b20","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:835","type":"CtIfImpl","sourcecode":"if (boolean) {\n    com.graphhopper.reader.PillarInfo.setNode(int, java.lang.Double.double, java.lang.Double.double, java.lang.Double.double);\n    int = com.graphhopper.reader.OSMReader.addTowerNode(long, double, double, double);\n} else {\n    if (com.graphhopper.util.PointList.is3D())\n        com.graphhopper.util.PointList.add(double, double, double);\n    else\n        com.graphhopper.util.PointList.add(double, double);\n    \n}"},"status":-1},{"failures":[101,102,86,12],"tindex":"2d7149d5-82c7-11e5-81c8-5fa6ad47455f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.Path:110","type":"CtIfImpl","sourcecode":"if ((int) < 0)\n    throw new java.lang.IllegalStateException(\"Call extract() before retrieving fromNode\");\n"},"variableMap":{"fromNode":"old"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:269","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.NodeAccess.setNode(int, com.graphhopper.storage.NodeAccess.getLatitude(int), com.graphhopper.storage.NodeAccess.getLongitude(int))"},"status":-1},{"failures":[103,93,104],"tindex":"2d7149d6-82c7-11e5-81c8-dd2a97cae62f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:237","type":"CtReturnImpl","sourcecode":"return ((java.lang.Runtime.getRuntime().totalMemory()) - (java.lang.Runtime.getRuntime().freeMemory())) / (com.graphhopper.util.Helper.long)"},"variableMap":{"com.graphhopper.util.Helper.MB":"turnCostPtr"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.TurnCostExtension:188","type":"CtIfImpl","sourcecode":"if (int == (com.graphhopper.storage.DataAccess.getInt((long + (int)))))\n    return com.graphhopper.storage.DataAccess.getInt((long + (int)));\n"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":19,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
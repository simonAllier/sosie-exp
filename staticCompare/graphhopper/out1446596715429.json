{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":71,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":10,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":77,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":74,"com.graphhopper.reader.OSMReaderTest.testMain":2,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":30,"com.graphhopper.reader.OSMReaderTest.testFerry":0,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":36,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":57,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testSetSpeed0_issue367":43,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode":91,"com.graphhopper.util.BitUtilLittleTest.testToLastBitString":84,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":81,"com.graphhopper.coll.IntDoubleBinHeapTest.testClear":83,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":89,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":16,"com.graphhopper.routing.PathTest.testWayList":28,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":94,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":67,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":38,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":72,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":34,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":82,"com.graphhopper.geohash.SpatialKeyAlgoTest.testOddBits":87,"com.graphhopper.reader.OSMReaderTest.testWithBounds":11,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":75,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":7,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":49,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":32,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBits":86,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":93,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":58,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":66,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":40,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":12,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":47,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":78,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":51,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":88,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":41,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":53,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":14,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":73,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":54,"com.graphhopper.GraphHopperTest.testPrepare":18,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":31,"com.graphhopper.GraphHopperTest.testFootAndCar":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":76,"com.graphhopper.reader.OSMReaderTest.testFoot":1,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":35,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":59,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":63,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":62,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":90,"com.graphhopper.reader.OSMReaderTest.testOneWay":13,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":68,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":50,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":39,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":70,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":23,"com.graphhopper.GraphHopperTest.testPrepareOnly":15,"com.graphhopper.GraphHopperTest.testVia":17,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":24,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":52,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":60,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":65,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":69,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":9,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":5,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":6,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":48,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":21,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":79,"com.graphhopper.GraphHopperTest.testFootOnly":25,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":80,"com.graphhopper.util.BitUtilBigTest.testToLastBitString":85,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":19,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":37,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":45,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":46,"com.graphhopper.routing.util.FootFlagEncoderTest.testAccess":95,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":8,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":42,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":29,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":33,"com.graphhopper.reader.OSMReaderTest.testBarriers":4,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":56,"com.graphhopper.GraphHopperTest.testLoadOSM":22,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":61,"com.graphhopper.routing.util.FootFlagEncoderTest.handleWayTagsRoundabout":92,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":26,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":55,"com.graphhopper.util.GHUtilityTest.testCopy":27,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":44,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":64,"com.graphhopper.reader.OSMReaderTest.testSort":3},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"tindex":"851483e6-828a-11e5-95f4-158b7bfbe54d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Downloader:133","type":"CtInvocationImpl","sourcecode":"java.io.InputStream.close()"},"variableMap":{"in":"ips"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMInputFile:92","type":"CtInvocationImpl","sourcecode":"java.io.InputStream.mark(10)"},"status":-1},{"failures":[],"tindex":"8514aaf7-828a-11e5-95f4-4fbcd7248545","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:128","type":"CtLocalVariableImpl","sourcecode":"double double = 360.0 / 16"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:60","type":"CtLocalVariableImpl","sourcecode":"double double = double / (java.lang.Math.abs((double - double)))"},"status":-2},{"failures":[27,28,29,30,31,32],"tindex":"8514aaf8-828a-11e5-95f4-8daf76cd6758","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PathMerger:99","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(com.graphhopper.util.PointList)"},"variableMap":{"tmpPoints":"pillarNodes","fullPoints":"pillarNodes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:839","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.reverse()"},"status":-1},{"failures":[],"tindex":"8514d209-828a-11e5-95f4-014f69517c56","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:494","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode"},"variableMap":{"com.graphhopper.routing.util.PriorityCode.UNCHANGED":"com.graphhopper.routing.util.PriorityCode.PREFER"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:497","type":"CtSwitchImpl","sourcecode":"switch (int) {\n    case 3 :\n        return com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode;\n    case 2 :\n        return com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode;\n    case 1 :\n        return com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode;\n    case 0 :\n        return com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode;\n    case -1 :\n        return com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode;\n    case -2 :\n        return com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode;\n    case -3 :\n        return com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode;\n    default :\n        return com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode;\n}"},"status":-2},{"failures":[],"tindex":"8514d20a-828a-11e5-95f4-4129bf28d5b1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.UnsafeDataAccess:267","type":"CtIfImpl","sourcecode":"if (long > (this.long))\n    throw new java.lang.IllegalStateException(\"Use ensureCapacity to increase capacity!\");\n"},"variableMap":{"bytes":"flags","capacity":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:467","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.routing.util.FlagEncoder com.graphhopper.routing.util.FlagEncoder : com.graphhopper.routing.util.EncodingManager.fetchEdgeEncoders()) {\n    for (com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry : com.graphhopper.reader.OSMReader.analyzeTurnRelation(com.graphhopper.routing.util.FlagEncoder, com.graphhopper.reader.OSMTurnRelation)) {\n        com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry = gnu.trove.map.TLongObjectMap<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>.get(com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.getItemId());\n        if (com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry != null) {\n            com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.long |= com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.long;\n        } else {\n            gnu.trove.map.TLongObjectMap<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>.put(com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.getItemId(), com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry);\n        }\n    }\n}"},"status":-2},{"failures":[],"tindex":"8514d20b-828a-11e5-95f4-d956051772f8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:530","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.CHGraphImpl.AllCHEdgesIteratorImpl.isShortcut())\n    throw new java.lang.IllegalStateException(\"Shortcut should not need to return raw flags!\");\n"},"variableMap":{"this":"eIter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:246","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.routing.util.AllEdgesIterator.next()) {\n    int int = com.graphhopper.routing.util.AllEdgesIterator.getBaseNode();\n    int int = gnu.trove.list.TIntList.get(int);\n    int int = com.graphhopper.routing.util.AllEdgesIterator.getAdjNode();\n    int int = gnu.trove.list.TIntList.get(int);\n    if ((int < 0) || (int < 0))\n        continue;\n    \n    com.graphhopper.routing.util.AllEdgesIterator.copyPropertiesTo(com.graphhopper.storage.Graph.edge(int, int));\n}"},"status":-2},{"failures":[],"tindex":"8514f91c-828a-11e5-95f4-8943381493e3","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.QueryResult:126","type":"CtReturnImpl","sourcecode":"return (int) >= 0"},"status":-2},{"failures":[33,34,27,35,36,37,38,39,40,41,42],"tindex":"8514f91d-828a-11e5-95f4-81e66fb03818","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:225","type":"CtAssertImpl","sourcecode":"assert (int) > 0 : \"call create or loadExisting before usage!\""},"variableMap":{"segmentSizePower":"a"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:211","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.ensureNodeIndex(java.lang.Math.max(int, int))"},"status":-1},{"failures":[],"tindex":"8514f91e-828a-11e5-95f4-bdbf4df43656","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.PathBidir:70","type":"CtIfImpl","sourcecode":"if (int < 0)\n    break;\n"},"variableMap":{"edgeId":"currentBucket"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:81","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.VLongStorage[][((int) - 1)].trimToSize()"},"status":-2},{"failures":[],"tindex":"8514f91f-828a-11e5-95f4-0face7afb511","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.SparseArray:153","type":"CtAssignmentImpl","sourcecode":"boolean = false"},"variableMap":{"mGarbage":"mmap"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphBuilder:68","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"status":0},{"failures":[43],"tindex":"8514f920-828a-11e5-95f4-4107d379c11f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:285","type":"CtIfImpl","sourcecode":"if ((long == (long)) || (long == 0))\n    return long;\n"},"variableMap":{"directionBitMask":"flags","flags":"flags","dir":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:280","type":"CtIfImpl","sourcecode":"if (boolean)\n    return com.graphhopper.routing.util.MotorcycleFlagEncoder.setReverseSpeed(long, double);\n"},"status":-1},{"failures":[],"tindex":"8514f921-828a-11e5-95f4-c710e81eb66d","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:518","type":"CtReturnImpl","sourcecode":"return (-int) - 3"},"variableMap":{"id":"intVal"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:182","type":"CtReturnImpl","sourcecode":"return int - 1"},"status":-2},{"failures":[],"tindex":"85152032-828a-11e5-95f4-71b4eca6c2df","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:93","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.routing.util.AllEdgesIterator.next()) {\n    if (!(com.graphhopper.routing.util.EdgeFilter.accept(com.graphhopper.routing.util.AllEdgesIterator))) {\n        continue;\n    } \n    for (int int = 0, int int ; int < 2 ; int++) {\n        if (int == 0) {\n            int = com.graphhopper.routing.util.AllEdgesIterator.getBaseNode();\n        } else {\n            int = com.graphhopper.routing.util.AllEdgesIterator.getAdjNode();\n        }\n        double double = com.graphhopper.storage.NodeAccess.getLatitude(int);\n        double double = com.graphhopper.storage.NodeAccess.getLongitude(int);\n        double double = com.graphhopper.util.DistanceCalc.calcDist(double, double, double, double);\n        if (double < 0)\n            continue;\n        \n        if (double < double) {\n            com.graphhopper.storage.index.QueryResult.setQueryDistance(double);\n            com.graphhopper.storage.index.QueryResult.setClosestEdge(com.graphhopper.routing.util.AllEdgesIterator.detach(false));\n            com.graphhopper.storage.index.QueryResult.setClosestNode(int);\n            double = double;\n        } \n        if (int > 0)\n            continue;\n        \n        int int = com.graphhopper.routing.util.AllEdgesIterator.getAdjNode();\n        double double = com.graphhopper.storage.NodeAccess.getLatitude(int);\n        double double = com.graphhopper.storage.NodeAccess.getLongitude(int);\n        if (com.graphhopper.util.DistanceCalc.validEdgeDistance(double, double, double, double, double, double)) {\n            double double = com.graphhopper.util.DistanceCalc.calcDenormalizedDist(com.graphhopper.util.DistanceCalc.calcNormalizedEdgeDistance(double, double, double, double, double, double));\n            if (double < double) {\n                com.graphhopper.storage.index.QueryResult.setQueryDistance(double);\n                com.graphhopper.storage.index.QueryResult.setClosestNode(int);\n                com.graphhopper.storage.index.QueryResult.setClosestEdge(com.graphhopper.routing.util.AllEdgesIterator);\n                if (double > (com.graphhopper.util.DistanceCalc.calcDist(double, double, double, double)))\n                    com.graphhopper.storage.index.QueryResult.setClosestNode(int);\n                \n                double = double;\n            } \n        } \n    }\n}"},"variableMap":{"filter":"edgeFilter","res":"res","queryLat":"queryLat","nodeAccess":"nodeAccess","queryLon":"queryLon","iter":"iter","calc":"calc","foundDist":"queryLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullIndex:84","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.routing.util.AllEdgesIterator.next()) {\n    if (!(com.graphhopper.routing.util.EdgeFilter.accept(com.graphhopper.routing.util.AllEdgesIterator)))\n        continue;\n    \n    for (int int, int int = 0 ; int < 2 ; int++) {\n        if (int == 0) {\n            int = com.graphhopper.routing.util.AllEdgesIterator.getBaseNode();\n        } else {\n            int = com.graphhopper.routing.util.AllEdgesIterator.getAdjNode();\n        }\n        double double = com.graphhopper.storage.NodeAccess.getLatitude(int);\n        double double = com.graphhopper.storage.NodeAccess.getLongitude(int);\n        double double = com.graphhopper.util.DistanceCalc.calcDist(double, double, double, double);\n        if ((com.graphhopper.util.shapes.Circle == null) || (double < (com.graphhopper.util.DistanceCalc.calcDist(com.graphhopper.util.shapes.Circle.getLat(), com.graphhopper.util.shapes.Circle.getLon(), double, double)))) {\n            com.graphhopper.storage.index.QueryResult.setClosestEdge(com.graphhopper.routing.util.AllEdgesIterator.detach(false));\n            com.graphhopper.storage.index.QueryResult.setClosestNode(int);\n            com.graphhopper.storage.index.QueryResult.setQueryDistance(double);\n            if (double <= 0)\n                break;\n            \n            com.graphhopper.util.shapes.Circle = new com.graphhopper.util.shapes.Circle(double , double , double , com.graphhopper.util.DistanceCalc);\n        } \n    }\n}"},"status":0},{"failures":[16,17,18,21,22,23,44,45,46,47,48,49,50,51,52,53,54,55,37,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"tindex":"85152033-828a-11e5-95f4-b57c27d74625","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:54","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"variableMap":{"maxLeafEntries":"toSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:256","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"status":-1},{"failures":[],"tindex":"85154744-828a-11e5-95f4-a3a93dda55ee","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:68","type":"CtAssignmentImpl","sourcecode":"float = 1.7F"},"variableMap":{"factor":"factor"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHLongIntBTree:60","type":"CtAssignmentImpl","sourcecode":"float = 2"},"status":0},{"failures":[7],"tindex":"85154745-828a-11e5-95f4-e7c071812b52","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMRelation:52","type":"CtWhileImpl","sourcecode":"while ((int != (javax.xml.stream.XMLStreamConstants.int)) && (javax.xml.stream.XMLStreamReader.getLocalName().equalsIgnoreCase(\"member\"))) {\n    if (int == (javax.xml.stream.XMLStreamConstants.int)) {\n        java.util.ArrayList<com.graphhopper.reader.OSMRelation.Member>.add(new com.graphhopper.reader.OSMRelation.Member(javax.xml.stream.XMLStreamReader));\n    } \n    int = javax.xml.stream.XMLStreamReader.nextTag();\n}"},"status":-1},{"failures":[],"tindex":"85154746-828a-11e5-95f4-4bf5f99ae097","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:168","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException((\"You cannot configure this GraphStorage \" + \"after calling create or loadExisting. Calling one of the methods twice is also not allowed.\"));\n"},"variableMap":{"initialized":"reverse"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:311","type":"CtIfImpl","sourcecode":"if (double < (com.graphhopper.routing.PathBidirRef.getWeight())) {\n    com.graphhopper.routing.PathBidirRef.setSwitchToFrom(boolean);\n    com.graphhopper.routing.PathBidirRef.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge;\n    com.graphhopper.routing.PathBidirRef.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge;\n    com.graphhopper.routing.PathBidirRef.setWeight(double);\n} "},"status":-1},{"failures":[84,85,86,87,88,89,90,91],"tindex":"85154747-828a-11e5-95f4-bf7fd3fe7543","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.InstructionList:243","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<gh:time>\")"},"variableMap":{"output":"sb"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtil:210","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('1')"},"status":-1},{"failures":[1,15,20,25,92,93,94,95],"tindex":"85154748-828a-11e5-95f4-ab635c8af9b6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:139","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motorcycle\")"},"variableMap":{"way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:206","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"highway\")"},"status":-1},{"failures":[],"tindex":"85156e59-828a-11e5-95f4-5796bbbd558c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:148","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.DataAccess instanceof com.graphhopper.storage.MMapDataAccess)\n    com.graphhopper.storage.MMapDataAccess = ((com.graphhopper.storage.MMapDataAccess)(com.graphhopper.storage.DataAccess));\n"},"variableMap":{"mmapDA":"shortcuts","da":"shortcuts"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:703","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.close()"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"8514f91f-828a-11e5-95f4-0face7afb511","diffs":[{"branches":{"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":["com.graphhopper.storage.GraphBuilder_com.graphhopper.storage.GraphHopperStorage_build().e1","com.graphhopper.storage.MMapDataAccess_java.nio.ByteBuffer_newByteBuffer(long,long).e1","com.graphhopper.storage.RAMIntDataAccess_int_getInt(long).b","com.graphhopper.storage.GHDirectory_com.graphhopper.storage.DataAccess_find(java.lang.String,com.graphhopper.storage.DAType).t3","com.graphhopper.storage.GHDirectory_com.graphhopper.storage.DataAccess_find(java.lang.String,com.graphhopper.storage.DAType).t4","com.graphhopper.storage.RAMIntDataAccess_void_setInt(long,int).b","com.graphhopper.storage.GHDirectory_com.graphhopper.storage.DataAccess_find(java.lang.String,com.graphhopper.storage.DAType).t7","com.graphhopper.storage.MMapDataAccess_com.graphhopper.storage.MMapDataAccess(java.lang.String,java.lang.String,java.nio.ByteOrder,boolean).b","com.graphhopper.storage.GHDirectory_void_mkdirs().e1","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).e6","com.graphhopper.storage.RAMIntDataAccess_boolean_ensureCapacity(long).e2","com.graphhopper.storage.MMapDataAccess_com.graphhopper.storage.MMapDataAccess_create(long).b","com.graphhopper.storage.MMapDataAccess_java.nio.ByteBuffer_newByteBuffer(long,long).e3","com.graphhopper.storage.RAMIntDataAccess_boolean_ensureCapacity(long).e1","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).e1","com.graphhopper.storage.MMapDataAccess_com.graphhopper.storage.MMapDataAccess_create(long).e1","com.graphhopper.util.Helper$1_java.lang.Object_run().t1","com.graphhopper.storage.GHDirectory_com.graphhopper.storage.GHDirectory(java.lang.String,com.graphhopper.storage.DAType).t4","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).e5","com.graphhopper.storage.RAMDataAccess_com.graphhopper.storage.RAMDataAccess_create(long).e1","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).e3","com.graphhopper.storage.MMapDataAccess_void_close(boolean).t1","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).e2","com.graphhopper.storage.MMapDataAccess_long_getCapacity().b","com.graphhopper.storage.MMapDataAccess_void_clean(int,int).b","com.graphhopper.storage.RAMIntDataAccess_boolean_ensureCapacity(long).b","com.graphhopper.storage.GHDirectory_com.graphhopper.storage.GHDirectory(java.lang.String,com.graphhopper.storage.DAType).e5","com.graphhopper.storage.MMapDataAccess_boolean_ensureCapacity(long).b","com.graphhopper.storage.DAType_boolean_isAllowWrites().b","com.graphhopper.storage.GHDirectory_com.graphhopper.storage.GHDirectory(java.lang.String,com.graphhopper.storage.DAType).e4","com.graphhopper.storage.GraphBuilder_com.graphhopper.storage.GraphHopperStorage_build().t1","com.graphhopper.storage.DAType_boolean_isInteg().b","com.graphhopper.storage.RAMDataAccess_boolean_ensureCapacity(long).e1","com.graphhopper.storage.MMapDataAccess_int_getInt(long).b","com.graphhopper.storage.RAMIntDataAccess_boolean_ensureCapacity(long).l4","com.graphhopper.storage.RAMIntDataAccess_int_getSegments().b","com.graphhopper.storage.GHDirectory_com.graphhopper.storage.DataAccess_find(java.lang.String,com.graphhopper.storage.DAType).e3","com.graphhopper.storage.MMapDataAccess_void_initRandomAccessFile().b","com.graphhopper.storage.DAType_boolean_isMMap().b","com.graphhopper.storage.GHDirectory_com.graphhopper.storage.DataAccess_find(java.lang.String,com.graphhopper.storage.DAType).e4","com.graphhopper.storage.GHDirectory_com.graphhopper.storage.DataAccess_find(java.lang.String,com.graphhopper.storage.DAType).e5","com.graphhopper.storage.GHDirectory_com.graphhopper.storage.DataAccess_find(java.lang.String,com.graphhopper.storage.DAType).e6","com.graphhopper.storage.MMapDataAccess_void_setInt(long,int).b","com.graphhopper.storage.RAMIntDataAccess_boolean_ensureCapacity(long).t3","com.graphhopper.storage.RAMDataAccess_com.graphhopper.storage.RAMDataAccess(java.lang.String,java.lang.String,boolean,java.nio.ByteOrder).b","com.graphhopper.storage.RAMIntDataAccess_boolean_ensureCapacity(long).t2","com.graphhopper.storage.RAMDataAccess_boolean_ensureCapacity(long).e2","com.graphhopper.storage.MMapDataAccess_void_initRandomAccessFile().e1","com.graphhopper.storage.RAMIntDataAccess_long_getCapacity().b","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).t4","com.graphhopper.util.Helper_void_close(java.io.Closeable).b","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).t2","com.graphhopper.storage.RAMDataAccess_boolean_ensureCapacity(long).b","com.graphhopper.storage.MMapDataAccess_void_clean(int,int).l1","com.graphhopper.storage.RAMIntDataAccess_com.graphhopper.storage.RAMIntDataAccess_create(long).e1","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).b","com.graphhopper.util.Helper_void_close(java.io.Closeable).t1","com.graphhopper.util.Helper_void_cleanHack().b","com.graphhopper.storage.RAMDataAccess_com.graphhopper.storage.RAMDataAccess_create(long).b","com.graphhopper.storage.RAMDataAccess_boolean_ensureCapacity(long).l4","com.graphhopper.storage.AbstractDataAccess_java.lang.String_getFullName().b","com.graphhopper.storage.MMapDataAccess_java.nio.ByteBuffer_newByteBuffer(long,long).b","com.graphhopper.storage.GHDirectory_com.graphhopper.storage.Directory_put(java.lang.String,com.graphhopper.storage.DAType).b","com.graphhopper.storage.MMapDataAccess_void_close(boolean).b","com.graphhopper.storage.GHDirectory_void_mkdirs().t1","com.graphhopper.storage.MMapDataAccess_long_getCapacity().l1","com.graphhopper.storage.RAMIntDataAccess_com.graphhopper.storage.DataAccess_setSegmentSize(int).b","com.graphhopper.storage.RAMDataAccess_long_getCapacity().b","com.graphhopper.storage.RAMDirectory_com.graphhopper.storage.RAMDirectory(java.lang.String,boolean).b","com.graphhopper.storage.MMapDataAccess_java.nio.ByteBuffer_newByteBuffer(long,long).l5","com.graphhopper.storage.RAMIntDataAccess_com.graphhopper.storage.RAMIntDataAccess_create(long).b","com.graphhopper.util.Helper_void_cleanMappedByteBuffer(java.nio.ByteBuffer).b","com.graphhopper.storage.MMapDirectory_com.graphhopper.storage.MMapDirectory(java.lang.String).b","com.graphhopper.storage.RAMDataAccess_boolean_ensureCapacity(long).t3","com.graphhopper.storage.RAMIntDataAccess_com.graphhopper.storage.RAMIntDataAccess(java.lang.String,java.lang.String,boolean,java.nio.ByteOrder).b","com.graphhopper.storage.MMapDataAccess_void_close().b","com.graphhopper.storage.RAMDataAccess_int_getSegments().b","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).l7","com.graphhopper.util.Helper$1_java.lang.Object_run().b","com.graphhopper.storage.GHDirectory_com.graphhopper.storage.DataAccess_find(java.lang.String).e1"]},"type":"branch"}]}]}
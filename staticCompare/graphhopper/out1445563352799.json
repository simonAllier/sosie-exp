{"failureDictionary":{"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":11,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":18,"com.graphhopper.reader.OSMReaderTest.testMain":32,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":61,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":51,"com.graphhopper.util.PointListTest.testReverse":7,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":9,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":15,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":60,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":26,"com.graphhopper.routing.PathTest.testWayList":8,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":67,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":42,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":13,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":55,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":10,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":40,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":56,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":58,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":46,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":47,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":64,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":63,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":0,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":24,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":59,"com.graphhopper.GraphHopperTest.testPrepare":5,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":66,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":53,"com.graphhopper.util.InstructionListTest.testWayList2":72,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":52,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":57,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":16,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":17,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":20,"com.graphhopper.util.InstructionListTest.testWayList":71,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":19,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":62,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":70,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":22,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":39,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":29,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":54,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":14,"com.graphhopper.GraphHopperTest.testPrepareOnly":25,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":23,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":30,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":38,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":43,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":35,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":36,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":27,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":50,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":21,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":12,"com.graphhopper.GraphHopperTest.testFootOnly":31,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":6,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":37,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":49,"com.graphhopper.reader.OSMReaderTest.testBarriers":34,"com.graphhopper.util.InstructionListTest.testFind":69,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":48,"com.graphhopper.GraphHopperTest.testLoadOSM":28,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":1,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":41,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":44,"com.graphhopper.util.GHUtilityTest.testCopy":68,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":4,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":3,"com.graphhopper.reader.OSMReaderTest.testSort":33,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":65,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":2,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":45},"transformations":[{"failures":[0,1,2,3,4,5,6,7],"tindex":"88f43fba-7924-11e5-a153-b7bda5d45777","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper7:40","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Class.forName(\"sun.misc.Cleaner\");\n    java.lang.Class.forName(\"java.nio.DirectByteBuffer\").getMethod(\"cleaner\");\n    boolean = true;\n} catch (java.lang.Exception e) {\n    boolean = false;\n}"},"variableMap":{"v":"reverse"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:360","type":"CtIfImpl","sourcecode":"if (boolean)\n    com.graphhopper.util.PointList.reverse();\n"},"status":-1},{"failures":[],"tindex":"88f466cb-7924-11e5-a153-37b3c913c798","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:396","type":"CtAssignmentImpl","sourcecode":"int = (73 * int) + (this.int)"},"variableMap":{"size":"E_FLAGS","hash":"E_FLAGS"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:658","type":"CtAssignmentImpl","sourcecode":"int = (com.graphhopper.storage.EdgeAccess.int) + 4"},"status":-2},{"failures":[],"tindex":"88f466cc-7924-11e5-a153-454d1761a855","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.RacingBikeFlagEncoder:183","type":"CtReturnImpl","sourcecode":"return \"racingbike\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.StopWatch:84","type":"CtReturnImpl","sourcecode":"return (java.lang.String + \"time:\") + com.graphhopper.util.StopWatch.(getSeconds())"},"status":0},{"failures":[8,0,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,5,6,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"tindex":"88f466cd-7924-11e5-a153-c5f17a871a39","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:531","type":"CtAssignmentImpl","sourcecode":"int = (-int) - 3"},"variableMap":{"id":"tmpOffset"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:847","type":"CtOperatorAssignmentImpl","sourcecode":"int += 4"},"status":-1},{"failures":[],"tindex":"88f48dde-7924-11e5-a153-0b6c6b2073c3","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:966","type":"CtLocalVariableImpl","sourcecode":"int int = 5"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:122","type":"CtLocalVariableImpl","sourcecode":"int int = boolean ? 1 : -1"},"status":-2},{"failures":[],"tindex":"88f48ddf-7924-11e5-a153-4b2b5a3fb8ff","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:672","type":"CtTryImpl","sourcecode":"try {\n    for (int int = 0 ; int < (com.graphhopper.reader.TLongList.size()) ; int++) {\n        long long = com.graphhopper.reader.TLongList.get(int);\n        int int = com.graphhopper.reader.OSMReader.getNodeMap().get(long);\n        if (int == (com.graphhopper.reader.OSMReader.int))\n            continue;\n        \n        if (int == (com.graphhopper.reader.OSMReader.int))\n            continue;\n        \n        if (int == (com.graphhopper.reader.OSMReader.int)) {\n            if ((!(com.graphhopper.util.PointList.isEmpty())) && (int > (-(com.graphhopper.reader.OSMReader.int)))) {\n                int = int;\n                int = com.graphhopper.reader.OSMReader.handlePillarNode(int, long, null, true);\n                int = (-int) - 3;\n                if (((com.graphhopper.util.PointList.getSize()) > 1) && (int >= 0)) {\n                    java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long));\n                    com.graphhopper.util.PointList.clear();\n                    com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n                } \n                int = int;\n                int = -1;\n            } \n            continue;\n        } \n        if ((int <= (-(com.graphhopper.reader.OSMReader.int))) && (int >= (com.graphhopper.reader.OSMReader.int)))\n            throw new java.lang.AssertionError((((\"Mapped index not in correct bounds \" + int) + \", \") + long));\n        \n        if (int > (-(com.graphhopper.reader.OSMReader.int))) {\n            boolean boolean = (int == 0) || (int == int);\n            if (!boolean) {\n                int = int;\n            } \n            int = com.graphhopper.reader.OSMReader.handlePillarNode(int, long, com.graphhopper.util.PointList, boolean);\n        } \n        if (int < (com.graphhopper.reader.OSMReader.int)) {\n            int = (-int) - 3;\n            com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n            if (int >= 0) {\n                java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long));\n                com.graphhopper.util.PointList.clear();\n                com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n            } \n            int = int;\n        } \n    }\n} catch (java.lang.RuntimeException ex) {\n    com.graphhopper.reader.OSMReader.com.graphhopper.routing.util.Logger.error((\"Couldn\\'t properly add edge with osm ids:\" + com.graphhopper.reader.TLongList), java.lang.RuntimeException);\n    if (boolean)\n        throw java.lang.RuntimeException;\n    \n}"},"status":-2},{"failures":[],"tindex":"88f48de0-7924-11e5-a153-7138f6f93448","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:659","type":"CtAssignmentImpl","sourcecode":"int = (int) + 4"},"variableMap":{"S_SKIP_EDGE1":"maxGeoRef","S_SKIP_EDGE2":"maxGeoRef"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:399","type":"CtAssignmentImpl","sourcecode":"int = 4"},"status":-2},{"failures":[],"tindex":"88f48de1-7924-11e5-a153-395767b11662","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:659","type":"CtAssignmentImpl","sourcecode":"int = (int) + 4"},"variableMap":{"S_SKIP_EDGE1":"endIndexPlusOne","S_SKIP_EDGE2":"endIndexPlusOne"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.SimpleIntDeque:103","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-2},{"failures":[],"tindex":"88f48de2-7924-11e5-a153-a95669046d13","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.SparseLongLongArray:48","type":"CtAssignmentImpl","sourcecode":"long[] = new long[int]"},"variableMap":{"mKeys":"keys","cap":"cap"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:73","type":"CtAssignmentImpl","sourcecode":"long[] = java.util.Arrays.copyOf(long[], int)"},"status":-2},{"failures":[],"tindex":"88f4b4f3-7924-11e5-a153-2753310aa8a5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:127","type":"CtReturnImpl","sourcecode":"return ~long"},"variableMap":{"high":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:319","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(long, double)"},"status":-2},{"failures":[],"tindex":"88f4b4f4-7924-11e5-a153-3fa67998c175","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:103","type":"CtLocalVariableImpl","sourcecode":"long long"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:143","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.storage.Storable<com.graphhopper.storage.DataAccess>.getCapacity()"},"status":-2},{"failures":[],"tindex":"88f4b4f5-7924-11e5-a153-3d06dcbba980","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:93","type":"CtIfImpl","sourcecode":"if (int > 0.0) {\n    if (int >= int)\n        boolean = true;\n    \n} else if (int <= int) {\n    boolean = true;\n} "},"status":-2},{"failures":[],"tindex":"88f4b4f6-7924-11e5-a153-97596ae9c506","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHTreeMapComposed:32","type":"CtUnaryOperatorImpl","sourcecode":"-3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.HeightTile:131","type":"CtInvocationImpl","sourcecode":"java.util.concurrent.atomic.AtomicInteger.incrementAndGet()"},"status":-2},{"failures":[],"tindex":"88f4b4f7-7924-11e5-a153-d9ff5953e56e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:474","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMWay:55","type":"CtLocalVariableImpl","sourcecode":"int int = javax.xml.stream.XMLStreamReader.getEventType()"},"status":-2},{"failures":[],"tindex":"88f4b4f8-7924-11e5-a153-d5c9836034a2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:124","type":"CtIfImpl","sourcecode":"if (long == long)\n    return long;\nelse\n    return ~long;\n"},"variableMap":{"high":"ferryBit","highKey":"ferryBit","key":"acceptBit"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:195","type":"CtReturnImpl","sourcecode":"return (long) | (long)"},"status":-2},{"failures":[],"tindex":"88f4b4f9-7924-11e5-a153-b1d8368f81da","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:264","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((((((\"Encoding does not match:\\nGraphhopper config: \" + (com.graphhopper.routing.util.EncodingManager.toDetailsString())) + \"\\nGraph: \") + java.lang.String) + \", dir:\") + (com.graphhopper.storage.Directory.getLocation())))"},"status":-2},{"failures":[],"tindex":"88f4dc0a-7924-11e5-a153-895491b48400","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:678","type":"CtIfImpl","sourcecode":"if (int == (com.graphhopper.reader.OSMReader.int))\n    continue;\n"},"variableMap":{"com.graphhopper.reader.OSMReader.EMPTY":"segmentSizeInBytes","tmpNode":"segmentSizeInBytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:109","type":"CtIfImpl","sourcecode":"if ((long % (int)) != 0)\n    int++;\n"},"status":-2},{"failures":[],"tindex":"88f4dc0b-7924-11e5-a153-f94a78c0acf6","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:474","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.search.NameIndex:130","type":"CtLocalVariableImpl","sourcecode":"int int = (byte[][0]) & 255"},"status":-2},{"failures":[],"tindex":"88f4dc0c-7924-11e5-a153-cd581e946ab2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:494","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.util.EdgeExplorer == null) || (com.graphhopper.util.EdgeExplorer == null)) {\n    com.graphhopper.util.EdgeExplorer = com.graphhopper.storage.Graph.createEdgeExplorer(new com.graphhopper.routing.util.DefaultEdgeFilter(com.graphhopper.routing.util.FlagEncoder , false , true));\n    java.util.Map<com.graphhopper.routing.util.FlagEncoder, com.graphhopper.util.EdgeExplorer>.put(com.graphhopper.routing.util.FlagEncoder, com.graphhopper.util.EdgeExplorer);\n    com.graphhopper.util.EdgeExplorer = com.graphhopper.storage.Graph.createEdgeExplorer(new com.graphhopper.routing.util.DefaultEdgeFilter(com.graphhopper.routing.util.FlagEncoder , true , false));\n    java.util.Map<com.graphhopper.routing.util.FlagEncoder, com.graphhopper.util.EdgeExplorer>.put(com.graphhopper.routing.util.FlagEncoder, com.graphhopper.util.EdgeExplorer);\n} "},"status":-2},{"failures":[],"tindex":"88f4dc0d-7924-11e5-a153-1799ef8cd931","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:108","type":"CtIfImpl","sourcecode":"if ((int) == 0) {\n    throw new java.lang.IllegalStateException(\"collection is already empty!?\");\n} "},"variableMap":{"size":"tmpPrevEdge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:454","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.CHEdgeIterator.next()) {\n    if ((com.graphhopper.util.CHEdgeIterator.isShortcut()) && ((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.util.EdgeIteratorState.getEdge()))) {\n        long long = int == (com.graphhopper.util.EdgeIterator.int) ? -1 : com.graphhopper.storage.CHGraphImpl.isShortcut(int) ? com.graphhopper.storage.EdgeAccess.toPointer(int) : com.graphhopper.storage.BaseGraph.com.graphhopper.storage.EdgeAccess.toPointer(int);\n        com.graphhopper.storage.EdgeAccess.internalEdgeDisconnect(com.graphhopper.util.EdgeIteratorState.getEdge(), long, com.graphhopper.util.EdgeIteratorState.getAdjNode(), com.graphhopper.util.EdgeIteratorState.getBaseNode());\n        break;\n    } \n    int = com.graphhopper.util.CHEdgeIterator.getEdge();\n}"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
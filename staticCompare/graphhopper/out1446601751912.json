{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":87,"com.graphhopper.reader.OSMReaderTest.testFerry":50,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":82,"com.graphhopper.coll.IntDoubleBinHeapTest.testBasic":90,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":84,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSortHighLevelFirst":94,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":7,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":39,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":41,"com.graphhopper.reader.OSMReaderTest.testWithBounds":61,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":80,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":23,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":26,"com.graphhopper.util.BitUtilBigTest.testReverse":97,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":64,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":27,"com.graphhopper.GraphHopperTest.testPrepare":67,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":42,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":99,"com.graphhopper.reader.OSMReaderTest.testFoot":51,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":31,"com.graphhopper.coll.IntDoubleBinHeapTest.testSpreading":93,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":104,"com.graphhopper.util.InstructionListTest.testWayList":19,"com.graphhopper.reader.OSMReaderTest.testOneWay":63,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":105,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":14,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":37,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":13,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":48,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":12,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":72,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_withCosts":2,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":102,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":25,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":32,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":35,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":55,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":56,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":79,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":15,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":43,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":21,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":28,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":68,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":22,"com.graphhopper.coll.IntDoubleBinHeapTest.testSize":92,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":29,"com.graphhopper.GraphHopperTest.testLoadOSM":71,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":103,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":11,"com.graphhopper.reader.OSMReaderTest.testSort":53,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":85,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":60,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":40,"com.graphhopper.reader.OSMReaderTest.testMain":52,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":100,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":101,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":16,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":89,"com.graphhopper.util.AngleCalcTest.testConvertAzimuth2xaxisAngle":77,"com.graphhopper.routing.PathTest.testWayList":17,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":10,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":46,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":45,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":57,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":30,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":36,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":62,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":88,"com.graphhopper.storage.GraphHopperStorageCHTest.testPrios":95,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":24,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":5,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":86,"com.graphhopper.GraphHopperTest.testFootAndCar":69,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":6,"com.graphhopper.coll.IntDoubleBinHeapTest.testRekey":91,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":8,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":9,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":34,"com.graphhopper.search.NameIndexTest.testPut":18,"com.graphhopper.util.AngleCalcTest.checkAzimuthConsitency":76,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_withCosts":1,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":81,"com.graphhopper.util.BitUtilLittleTest.testReverse":96,"com.graphhopper.GraphHopperTest.testPrepareOnly":65,"com.graphhopper.GraphHopperTest.testVia":66,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":3,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":73,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":38,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":59,"com.graphhopper.reader.OSMReaderTest.testTurnFlagCombination":4,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":70,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":98,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":44,"com.graphhopper.GraphHopperTest.testFootOnly":74,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":78,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":47,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":58,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":49,"com.graphhopper.reader.OSMReaderTest.testBarriers":54,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":33,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":75,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_withCosts":0,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":83},"transformations":[{"failures":[],"tindex":"3f0eae80-8296-11e5-8ec1-8b9e6ff0b768","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistanceCalc2D:56","type":"CtLocalVariableImpl","sourcecode":"double double = double - double"},"variableMap":{"fromX":"weight","toX":"weight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:203","type":"CtLocalVariableImpl","sourcecode":"double double = (com.graphhopper.routing.util.Weighting.calcWeight(com.graphhopper.util.EdgeIterator, boolean, com.graphhopper.storage.EdgeEntry.int)) + (com.graphhopper.storage.EdgeEntry.double)"},"status":-2},{"failures":[],"tindex":"3f0ed591-8296-11e5-8ec1-9b873d2d6b2b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:163","type":"CtLocalVariableImpl","sourcecode":"int int = -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:162","type":"CtLocalVariableImpl","sourcecode":"int int = java.io.RandomAccessFile.read(byte[])"},"status":-2},{"failures":[],"tindex":"3f0ed592-8296-11e5-8ec1-a943ddc7341c","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper:447","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:230","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.UnsafeDataAccess.sun.misc.Unsafe.putShort(((long) + long), short)"},"status":0},{"failures":[0,1,2,3,4],"tindex":"3f0ed593-8296-11e5-8ec1-693d948f3262","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.SimpleIntDeque:67","type":"CtReturnImpl","sourcecode":"return (int) >= (int)"},"variableMap":{"frontIndex":"maxTurnCosts","endIndexPlusOne":"maxTurnCosts"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:637","type":"CtReturnImpl","sourcecode":"return (com.graphhopper.routing.util.EncodedValue.getValue(long)) == (int)"},"status":-1},{"failures":[],"tindex":"3f0ed594-8296-11e5-8ec1-9b792447cd0e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:105","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.AStar.AStarEdge = new com.graphhopper.routing.AStar.AStarEdge(com.graphhopper.util.EdgeIterator.int , int , double , double)"},"status":-1},{"failures":[],"tindex":"3f0ed595-8296-11e5-8ec1-51062b2c6a7f","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:95","type":"CtIfImpl","sourcecode":"if (double < ((-(java.lang.Math.double)) + double))\n    double = double + (2 * (java.lang.Math.double));\nelse\n    double = double;\n"},"variableMap":{"orientation":"weight","resultOrientation":"weight","baseOrientation":"weight","java.lang.Math.PI":"weight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Dijkstra:101","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.storage.EdgeEntry.double) > double) {\n    java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.remove(com.graphhopper.storage.EdgeEntry);\n    com.graphhopper.storage.EdgeEntry.int = com.graphhopper.util.EdgeIterator.getEdge();\n    com.graphhopper.storage.EdgeEntry.double = double;\n    com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n    java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.add(com.graphhopper.storage.EdgeEntry);\n} else\n    continue;\n"},"status":-2},{"failures":[5,6,7,8,9,10,11,12,13,14,15,16],"tindex":"3f0efca6-8296-11e5-8ec1-8d95b6562997","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.pbf.PbfBlobDecoder:283","type":"CtOperatorAssignmentImpl","sourcecode":"long += long"},"variableMap":{"nodeId":"encoded","nodeIdOffset":"encoded"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:596","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.BikeCommonFlagEncoder.setBool(long, com.graphhopper.routing.util.BikeCommonFlagEncoder.int, true)"},"status":-1},{"failures":[5,6,7,8,9,10,12,13,14,15,16],"tindex":"3f0efca7-8296-11e5-8ec1-9f468cfae1b0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.CmdArgs:80","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(\"graphhopper.\".length())"},"variableMap":{"k":"pavementName"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:432","type":"CtAssignmentImpl","sourcecode":"java.lang.String = com.graphhopper.util.Translation.tr(\"unpaved\")"},"status":-1},{"failures":[17,18,19],"tindex":"3f0efca8-8296-11e5-8ec1-5bfe87955882","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:335","type":"CtReturnImpl","sourcecode":"return \"motorcycle\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.search.NameIndex:126","type":"CtReturnImpl","sourcecode":"return \"\""},"status":-1},{"failures":[],"tindex":"3f0efca9-8296-11e5-8ec1-f10d474be7ab","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:163","type":"CtLocalVariableImpl","sourcecode":"int int = -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:272","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.storage.CHGraphImpl.getNodes()"},"status":-2},{"failures":[],"tindex":"3f0efcaa-8296-11e5-8ec1-57dcb088e224","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistancePlaneProjection:73","type":"CtReturnImpl","sourcecode":"return \"PLANE_PROJ\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:199","type":"CtReturnImpl","sourcecode":"return \"mtb\""},"status":-2},{"failures":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"tindex":"3f0efcab-8296-11e5-8ec1-3f66ef830030","series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:235","type":"CtIfImpl","sourcecode":"if (long > 1) {\n    long >>>= 1;\n} else {\n    break;\n}"},"variableMap":{"bits":"dijkstraCount"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:598","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n    if (((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int)) || (int == int))\n        continue;\n    \n    double double = double + (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.EdgeIterator, false, com.graphhopper.util.EdgeIterator.getEdge()));\n    if (java.lang.Double.isNaN(double))\n        throw new java.lang.IllegalStateException(((((((\"Weighting should never return NaN values\" + \", in:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", out:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", dist:\") + (com.graphhopper.util.EdgeIterator.getDistance())));\n    \n    if (java.lang.Double.isInfinite(double))\n        continue;\n    \n    double double = double + (com.graphhopper.util.EdgeIterator.getDistance());\n    com.graphhopper.routing.DijkstraOneToMany.setWeightLimit(double);\n    com.graphhopper.routing.DijkstraOneToMany.setLimitVisitedNodes((((int)(double)) * 100)).setEdgeFilter(com.graphhopper.routing.ch.PrepareContractionHierarchies.IgnoreNodeFilter.setAvoidNode(com.graphhopper.routing.ch.PrepareContractionHierarchies.ShortcutHandler.getNode()));\n    com.graphhopper.util.StopWatch.start();\n    (long)++;\n    int int = com.graphhopper.routing.DijkstraOneToMany.findEndNode(int, int);\n    com.graphhopper.util.StopWatch.stop();\n    if ((int == int) && ((com.graphhopper.routing.DijkstraOneToMany.getWeight(int)) <= double))\n        continue;\n    \n    com.graphhopper.routing.ch.PrepareContractionHierarchies.ShortcutHandler.foundShortcut(int, int, double, double, com.graphhopper.util.EdgeIterator, int, int);\n}"},"status":-1},{"failures":[46,47,48,49],"tindex":"3f0f23bc-8296-11e5-8ec1-e37971d6c9b1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:189","type":"CtIfImpl","sourcecode":"if ((int[].int) < 1) {\n    throw new java.lang.IllegalStateException(\"depth needs to be at least 1\");\n} "},"variableMap":{"entries":"nodeIndex","length":"start"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:51","type":"CtIfImpl","sourcecode":"if (((int[][int]) == 0) && (!(com.graphhopper.storage.GraphHopperStorage.isNodeRemoved(int)))) {\n    com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.strongConnect(int);\n} "},"status":-1},{"failures":[],"tindex":"3f0f23bd-8296-11e5-8ec1-f3b6c3c30742","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:221","type":"CtLocalVariableImpl","sourcecode":"double double = (double - double) - double"},"variableMap":{"incDist2DSum":"toLat","fullDist2D":"toLat","decDist2DSum":"toLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistancePlaneProjection:64","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Math.java.lang.Math.toRadians((double - double))"},"status":-2},{"failures":[50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"tindex":"3f0f23be-8296-11e5-8ec1-cd3a601a9066","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.SRTMProvider:113","type":"CtAssignmentImpl","sourcecode":"int = -int"},"variableMap":{"lat":"event"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMWay:65","type":"CtAssignmentImpl","sourcecode":"int = javax.xml.stream.XMLStreamReader.nextTag()"},"status":-1},{"failures":[76,77],"tindex":"3f0f23bf-8296-11e5-8ec1-4fc1d600ef12","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:80","type":"CtOperatorAssignmentImpl","sourcecode":"double += 2 * (java.lang.Math.double)"},"status":-1},{"failures":[17,19,78],"tindex":"3f0f23c0-8296-11e5-8ec1-333160002985","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalc2D:58","type":"CtReturnImpl","sourcecode":"return (double * double) + (double * double)"},"variableMap":{"dX":"distance","dY":"distance"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:113","type":"CtReturnImpl","sourcecode":"return double"},"status":-1},{"failures":[21,23,79,80,81,24,25,26,27,28,82,30,31,32,33,83,36,84,37,85,39,86,40,41,42,87,88,43,44,89,45,90,91,92,93],"tindex":"3f0f4ad1-8296-11e5-8ec1-496fb83697f0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:197","type":"CtAssignmentImpl","sourcecode":"int = ~int"},"variableMap":{"index":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:115","type":"CtOperatorAssignmentImpl","sourcecode":"int -= 1"},"status":-1},{"failures":[94,95],"tindex":"3f0f4ad2-8296-11e5-8ec1-1d08087f129f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:1056","type":"CtIfImpl","sourcecode":"if (((int) == (int)) || ((int) == (com.graphhopper.util.EdgeIterator.int)))\n    throw new java.lang.IllegalStateException(((((\"call next before detaching or setEdgeId (edgeId:\" + (int)) + \" vs. next \") + (int)) + \")\"));\n"},"variableMap":{"com.graphhopper.util.EdgeIterator.NO_EDGE":"nodeId","edgeId":"nodeId","nextEdgeId":"nodeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHNodeAccess:42","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.ensureNodeIndex(int)"},"status":-1},{"failures":[96,97,98,99,100,101,102,103,104,105],"tindex":"3f0f4ad3-8296-11e5-8ec1-83bfe1067268","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtil:254","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= 1"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
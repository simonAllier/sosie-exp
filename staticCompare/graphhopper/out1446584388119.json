{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":5,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":9,"com.graphhopper.routing.PathTest.testFindInstruction":0,"com.graphhopper.reader.OSMReaderTest.testFerry":53,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":54,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":46,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":6,"com.graphhopper.routing.QueryGraphTest.testOneWay":16,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":4,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":19,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":61,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":11,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":37,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":38,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":23,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":68,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":69,"com.graphhopper.GraphHopperTest.testPrepare":30,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":21,"com.graphhopper.util.InstructionListTest.testWayList2":93,"com.graphhopper.reader.OSMReaderTest.testFoot":43,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":81,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":14,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":17,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":56,"com.graphhopper.util.InstructionListTest.testWayList":92,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":59,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":91,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":47,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":67,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":57,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":78,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":89,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":86,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":36,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":44,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":80,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":84,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":31,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":65,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":70,"com.graphhopper.routing.PathBidirRefTest.testExtract":72,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":41,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":94,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":71,"com.graphhopper.GraphHopperTest.testLoadOSM":34,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":24,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":28,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":27,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":97,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":26,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":25,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":79,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":39,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":60,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":82,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":13,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":64,"com.graphhopper.routing.PathBidirRefTest.testExtract2":73,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":83,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":42,"com.graphhopper.routing.PathTest.testWayList":87,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":74,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":96,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":22,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":45,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":55,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":8,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":58,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":62,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":66,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":52,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":20,"com.graphhopper.GraphHopperTest.testFootAndCar":32,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":88,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":15,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":77,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":76,"com.graphhopper.util.InstructionListTest.testCreateGPX":49,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":12,"com.graphhopper.GraphHopperTest.testVia":29,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":7,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":35,"com.graphhopper.util.InstructionListTest.testCreateGPXWithEle":2,"com.graphhopper.reader.OSMElementTest.testHasTag":3,"com.graphhopper.GraphHopperAPITest.testLoad":90,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":33,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":10,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":50,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":63,"com.graphhopper.GraphHopperTest.testFootOnly":95,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":40,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":51,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":85,"com.graphhopper.util.InstructionListTest.testFind":1,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":75,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":48,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":18},"transformations":[{"failures":[0,1,2],"tindex":"d16ee58c-826d-11e5-a1c2-dd307c432486","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:804","type":"CtReturnImpl","sourcecode":"return 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:63","type":"CtReturnImpl","sourcecode":"return java.util.List<com.graphhopper.util.Instruction>.size()"},"status":-1},{"failures":[],"tindex":"d16f0c9d-826d-11e5-a1c2-3b8519c1388a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:677","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.DistanceCalc.calcDist(com.graphhopper.util.shapes.GHPoint.double, com.graphhopper.util.shapes.GHPoint.double, com.graphhopper.util.shapes.GHPoint.double, double)"},"status":-2},{"failures":[],"tindex":"d16f33ae-826d-11e5-a1c2-55cba3e68d6e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:139","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motorcycle\")"},"variableMap":{"way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:223","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"sac_scale\")"},"status":0},{"failures":[],"tindex":"d16f33af-826d-11e5-a1c2-27852b6f23e0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:358","type":"CtAssertImpl","sourcecode":"assert int <= (int) : ((\"the length has to be smaller or equal to the segment size: \" + int) + \" vs. \") + (int)"},"variableMap":{"segmentSizeInBytes":"com.graphhopper.reader.OSMElement.WAY","length":"com.graphhopper.reader.OSMElement.WAY"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:177","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMElement.isType(com.graphhopper.reader.OSMElement.int)) {\n    final com.graphhopper.reader.OSMWay com.graphhopper.reader.OSMWay = ((com.graphhopper.reader.OSMWay)(com.graphhopper.reader.OSMElement));\n    boolean boolean = com.graphhopper.reader.OSMReader.filterWay(com.graphhopper.reader.OSMWay);\n    if (boolean) {\n        gnu.trove.list.TLongList gnu.trove.list.TLongList = com.graphhopper.reader.OSMWay.getNodes();\n        int int = gnu.trove.list.TLongList.size();\n        for (int int = 0 ; int < int ; int++) {\n            com.graphhopper.reader.OSMReader.prepareHighwayNode(gnu.trove.list.TLongList.get(int));\n        }\n        if (((++long) % 5000000) == 0) {\n            com.graphhopper.reader.OSMReader.org.slf4j.Logger.info(((((((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \" (preprocess), osmIdMap:\") + com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(com.graphhopper.reader.OSMReader.getNodeMap().getSize()))) + \" (\") + (com.graphhopper.reader.OSMReader.getNodeMap().getMemoryUsage())) + \"MB) \") + (com.graphhopper.util.Helper.getMemInfo())));\n        } \n    } \n} "},"status":-2},{"failures":[],"tindex":"d16f33b0-826d-11e5-a1c2-c1484a5e8359","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:324","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.LocationIndexTree.flush()"},"status":0},{"failures":[],"tindex":"d16f5ac1-826d-11e5-a1c2-3d5edd2766d7","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper:447","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.search.NameIndex:86","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setBytes(long, byte[], byte[].int)"},"status":0},{"failures":[3],"tindex":"d16f5ac2-826d-11e5-a1c2-595c95653473","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.FastestWeighting:102","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.FastestWeighting.toString().equals(com.graphhopper.routing.util.FastestWeighting.toString())"},"variableMap":{"other":"osmValue","this":"osmValue"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:153","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(java.lang.Object))\n    return true;\n"},"status":-1},{"failures":[4,5],"tindex":"d16f5ac3-826d-11e5-a1c2-2d2166a70f46","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:103","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.storage.EdgeEntry) != null) {\n    gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry> = gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry>;\n    com.graphhopper.routing.DijkstraBidirectionRef.updateBestPath(com.graphhopper.util.GHUtility.getEdge(com.graphhopper.storage.Graph, com.graphhopper.storage.EdgeEntry.int, int), com.graphhopper.storage.EdgeEntry, int);\n} "},"status":-1},{"failures":[],"tindex":"d16f5ac4-826d-11e5-a1c2-79e92a7f0272","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:500","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = com.graphhopper.storage.BaseGraph.EdgeIterable.init(int, int)"},"variableMap":{"edgeId":"com.graphhopper.util.EdgeIteratorState.K_UNFAVORED_EDGE","nodeB":"com.graphhopper.util.EdgeIteratorState.K_UNFAVORED_EDGE","iter":"edge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FastestWeighting:73","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = com.graphhopper.util.EdgeIteratorState.getBoolean(com.graphhopper.util.EdgeIteratorState.int, boolean, false)"},"status":-2},{"failures":[],"tindex":"d16f5ac5-826d-11e5-a1c2-41212dd53550","series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:106","type":"CtAssignmentImpl","sourcecode":"this.com.graphhopper.storage.GraphHopperStorage = com.graphhopper.storage.GraphHopperStorage"},"variableMap":{"ghStorage":"ghStorage","g":"ghStorage"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:849","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.GraphHopperStorage = com.graphhopper.storage.GraphHopperStorage"},"status":0},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,4,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"tindex":"d16f81d6-826d-11e5-a1c2-6fd4de88a243","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:315","type":"CtAssignmentImpl","sourcecode":"int = ((int) / 4) - 1"},"variableMap":{"segmentSizeInBytes":"current","indexDivisor":"current"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.VirtualEdgeIterator:57","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-1},{"failures":[36],"tindex":"d16f81d7-826d-11e5-a1c2-a10992746f6f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:296","type":"CtReturnImpl","sourcecode":"return int - int"},"variableMap":{"tmp":"allRemoved","initializedCounter":"allRemoved"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:195","type":"CtReturnImpl","sourcecode":"return int"},"status":-1},{"failures":[37,38,39,36,40,41,42,43,44,45,46,47,32,48],"tindex":"d16f81d8-826d-11e5-a1c2-8bc84c8a6350","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:63","type":"CtIfImpl","sourcecode":"if ((int) >= (int)) {\n    (int)++;\n    int = 0;\n} "},"variableMap":{"currentBucket":"connectedId","currentIndex":"connectedId","bucketSize":"connectedId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BreadthFirstSearch:50","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.SimpleIntDeque.push(int)"},"status":-1},{"failures":[49,50],"tindex":"d16f81d9-826d-11e5-a1c2-cb9fb1d9c44e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionList:226","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<\/trk>\")"},"variableMap":{"track":"output"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:243","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<gh:time>\").append(com.graphhopper.util.Instruction.getTime())"},"status":-1},{"failures":[51,52,53],"tindex":"d16fa8ea-826d-11e5-a1c2-9f64c10bc522","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:188","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"route\", java.util.Set<java.lang.String>)) {\n    java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motorcar\");\n    if (java.lang.String == null)\n        java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motor_vehicle\");\n    \n    if ((((java.lang.String == null) && (!(com.graphhopper.reader.OSMWay.hasTag(\"foot\")))) && (!(com.graphhopper.reader.OSMWay.hasTag(\"bicycle\")))) || (\"yes\".equals(java.lang.String)))\n        return (long) | (long);\n    \n} "},"status":-1},{"failures":[54,55,56,57,18,58,4,59,19,60,61,21,5,62,63,64,22,65,66,67,68,69,70,71],"tindex":"d16fa8eb-826d-11e5-a1c2-8b4406a8f565","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:212","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    com.graphhopper.storage.CHGraphImpl.setLevel(int, int);\n}"},"variableMap":{"maxLevel":"nn","nodes":"nn","prepareGraph":"prepareGraph"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:338","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int))\n    continue;\n"},"status":-1},{"failures":[],"tindex":"d16fa8ec-826d-11e5-a1c2-6dfaa053c601","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:128","type":"CtLocalVariableImpl","sourcecode":"double double = 360.0 / 16"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:180","type":"CtLocalVariableImpl","sourcecode":"double double = double * double"},"status":-2},{"failures":[],"tindex":"d16fa8ed-826d-11e5-a1c2-2b55958ae18a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:367","type":"CtIfImpl","sourcecode":"if (int > int)\n    throw new java.lang.IllegalArgumentException(\"from must be smaller or equals to end\");\n"},"variableMap":{"from":"adjNode","end":"adjNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:186","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.Edge.isValid(com.graphhopper.storage.EdgeEntry.int)) {\n    com.graphhopper.routing.Path.processEdge(com.graphhopper.storage.EdgeEntry.int, com.graphhopper.storage.EdgeEntry.int);\n    com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry;\n}"},"status":-2},{"failures":[72,73,54,74,55,56,57,75,76,77,18,78,4,79,19,20,60,61,21,80,63,64,22,81,65,66,82,67,68,71,83,84,85,86,87,0,88,89,90,1,91,92,93,50,24,25,26,27,28,94,29,30,31,32,33,34,35,95],"tindex":"d16fa8ee-826d-11e5-a1c2-9595df811822","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:87","type":"CtInvocationImpl","sourcecode":"gnu.trove.list.TIntList.add(int)"},"status":-1},{"failures":[96,97],"tindex":"d16fcfff-826d-11e5-a1c2-a52507f0ecb9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:126","type":"CtIfImpl","sourcecode":"if ((int) < 0) {\n    throw new java.lang.IllegalStateException(\"collection is already empty!?\");\n} "},"variableMap":{"size":"node"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:139","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.QueryResult.setClosestNode(int)"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"d16f33b0-826d-11e5-a1c2-c1484a5e8359","diffs":[{"branches":{"com.graphhopper.reader.OSMReaderTest.testNegativeIds":["com.graphhopper.storage.index.LocationIndexTree_void_flush().b"],"com.graphhopper.GraphHopperAPITest.testLoad":["com.graphhopper.storage.AbstractDataAccess_void_setHeader(int,int).b","com.graphhopper.storage.RAMDataAccess_void_flush().e1","com.graphhopper.storage.RAMDataAccess_void_flush().b","com.graphhopper.storage.index.LocationIndexTree_void_flush().b","com.graphhopper.storage.RAMDataAccess_void_flush().t2"],"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":["com.graphhopper.storage.AbstractDataAccess_void_setHeader(int,int).b","com.graphhopper.storage.RAMDataAccess_void_flush().e1","com.graphhopper.storage.RAMDataAccess_void_flush().b","com.graphhopper.storage.index.LocationIndexTree_void_flush().b","com.graphhopper.storage.RAMDataAccess_void_flush().t2"],"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":["com.graphhopper.storage.AbstractDataAccess_void_setHeader(int,int).b","com.graphhopper.storage.RAMDataAccess_void_flush().e1","com.graphhopper.storage.RAMDataAccess_void_flush().b","com.graphhopper.storage.index.LocationIndexTree_void_flush().b","com.graphhopper.storage.RAMDataAccess_void_flush().t2"],"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":["com.graphhopper.storage.AbstractDataAccess_void_setHeader(int,int).b","com.graphhopper.storage.RAMDataAccess_void_flush().e1","com.graphhopper.storage.RAMDataAccess_void_flush().b","com.graphhopper.storage.index.LocationIndexTree_void_flush().b","com.graphhopper.storage.RAMDataAccess_void_flush().t2"],"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":["com.graphhopper.storage.AbstractDataAccess_void_setHeader(int,int).b","com.graphhopper.storage.RAMDataAccess_void_flush().e1","com.graphhopper.storage.RAMDataAccess_void_flush().b","com.graphhopper.storage.index.LocationIndexTree_void_flush().b","com.graphhopper.storage.RAMDataAccess_void_flush().t2"]},"type":"branch"},{"methodsDiff":{"delete":["com.graphhopper.storage.index.LocationIndexTree.flush"]},"type":"staticDiff"}]},{"transformation":"d16f33ae-826d-11e5-a1c2-55cba3e68d6e","diffs":[{"branches":{"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":["com.graphhopper.routing.util.FootFlagEncoder_long_acceptWay(com.graphhopper.reader.OSMWay).e5","com.graphhopper.routing.util.FootFlagEncoder_long_acceptWay(com.graphhopper.reader.OSMWay).t5","com.graphhopper.routing.util.FootFlagEncoder_long_acceptWay(com.graphhopper.reader.OSMWay).e6"]},"type":"branch"},{"methodsDiff":{"delete":["com.graphhopper.reader.OSMElement.getTag"]},"type":"staticDiff"}]}]}
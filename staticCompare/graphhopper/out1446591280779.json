{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":83,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":86,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":84,"com.graphhopper.reader.OSMReaderTest.testFerry":37,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_noCosts":23,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":71,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":59,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":56,"com.graphhopper.util.BitUtilLittleTest.testFromBitString":60,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":2,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":90,"com.graphhopper.coll.IntDoubleBinHeapTest.testClear":64,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":91,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":5,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":52,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":6,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":46,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidanceOfHighMaxSpeed":48,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeightMMap":61,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":9,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":25,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":85,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":26,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":68,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":1,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":45,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":72,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":0,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeight":62,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":79,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":40,"com.graphhopper.coll.CompressedArrayTest.testCompress":94,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":30,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":38,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":87,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":31,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":58,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":42,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":28,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":33,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":49,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":7,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":34,"com.graphhopper.GraphHopperTest.testPrepare":16,"com.graphhopper.GraphHopperTest.testFootAndCar":18,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":8,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":44,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":41,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":3,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":27,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":73,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":77,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":76,"com.graphhopper.reader.OSMReaderTest.testOneWay":39,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":55,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":80,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":50,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":54,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":69,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":82,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":43,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":53,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":92,"com.graphhopper.coll.CompressedArrayTest.testCompress2":93,"com.graphhopper.GraphHopperTest.testVia":15,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":21,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":32,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":74,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":78,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":81,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":63,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":67,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":19,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":57,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":88,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":89,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":17,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":29,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":35,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":66,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":36,"com.graphhopper.GraphHopperTest.testLoadOSM":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":75,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":10,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":70,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":24,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":4,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":65,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":14,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":13,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":22,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":12,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":47,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":51,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":11},"transformations":[{"failures":[],"tindex":"ddc81c6d-827d-11e5-a6a5-ebe98cca2114","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:669","type":"CtLocalVariableImpl","sourcecode":"int int = -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHLongIntBTree:474","type":"CtLocalVariableImpl","sourcecode":"int int"},"status":-2},{"failures":[],"tindex":"ddc8437e-827d-11e5-a6a5-434432ab5ad6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:186","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(2000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:165","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Instruction.checkOne()"},"status":-2},{"failures":[],"tindex":"ddc86a8f-827d-11e5-a6a5-a5de05cb247a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:447","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:52","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.AbstractFlagEncoder.setBlockFords(com.graphhopper.util.PMap.getBool(\"blockFords\", true))"},"status":0},{"failures":[],"tindex":"ddc86a90-827d-11e5-a6a5-a1e2858aa17f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:392","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setHeader(0, com.graphhopper.storage.index.Location2IDQuadtree.int)"},"status":0},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"tindex":"ddc86a91-827d-11e5-a6a5-dd8b05d3f3dc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.QueryGraph:354","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.routing.VirtualEdgeIteratorState com.graphhopper.routing.VirtualEdgeIteratorState = new com.graphhopper.routing.VirtualEdgeIteratorState(int , int , int , int , double , com.graphhopper.util.EdgeIteratorState.getFlags() , com.graphhopper.util.EdgeIteratorState.getName() , com.graphhopper.util.PointList)"},"variableMap":{"closestEdge":"closestEdge","baseDistance":"baseDistance","prevNodeId":"origRevTraversalKey","virtEdgeId":"origRevTraversalKey","origTraversalKey":"prevNodeId","nodeId":"prevNodeId","basePoints":"baseReversePoints"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:356","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.routing.VirtualEdgeIteratorState com.graphhopper.routing.VirtualEdgeIteratorState = new com.graphhopper.routing.VirtualEdgeIteratorState(int , int , int , int , double , long , com.graphhopper.util.EdgeIteratorState.getName() , com.graphhopper.util.PointList)"},"status":-1},{"failures":[22,23,24],"tindex":"ddc890a2-827d-11e5-a6a5-4774d931911b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:419","type":"CtReturnImpl","sourcecode":"return 50"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:644","type":"CtReturnImpl","sourcecode":"return 0"},"status":-1},{"failures":[25,26,27,28],"tindex":"ddc890a3-827d-11e5-a6a5-7bd848275387","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DouglasPeucker:154","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    throw new java.lang.IllegalStateException(((((\"maximum not found in [\" + int) + \",\") + int) + \"]\"));\n} "},"variableMap":{"indexWithMaxDist":"edgeId","lastIndex":"edgeId","fromIndex":"edgeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:533","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.storage.EdgeAccess.isInBounds(int)))\n    throw new java.lang.IllegalStateException(((\"edgeId \" + int) + \" out of bounds\"));\n"},"status":-1},{"failures":[29,30,31,32,33,34,35,36],"tindex":"ddc890a4-827d-11e5-a6a5-33882dc8d8b5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:265","type":"CtWhileImpl","sourcecode":"while (!(com.graphhopper.coll.GHTreeMapComposed.isEmpty())) {\n    if ((boolean && ((long) > 0)) && (((long) % long) == 0)) {\n        com.graphhopper.util.StopWatch.start();\n        com.graphhopper.coll.GHTreeMapComposed.clear();\n        int int = com.graphhopper.storage.CHGraphImpl.getNodes();\n        for (int int = 0 ; int < int ; int++) {\n            if ((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int))\n                continue;\n            \n            int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n            com.graphhopper.coll.GHTreeMapComposed.insert(int, int);\n        }\n        com.graphhopper.util.StopWatch.stop();\n        int++;\n        if (com.graphhopper.coll.GHTreeMapComposed.isEmpty())\n            throw new java.lang.IllegalStateException(\"Cannot prepare as no unprepared nodes where found. Called preparation twice?\");\n        \n    } \n    if (((long) % long) == 0) {\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        org.slf4j.Logger.info((((((((((((((((((com.graphhopper.util.Helper.nf(long)) + \", updates:\") + int) + \", nodes: \") + (com.graphhopper.util.Helper.nf(com.graphhopper.coll.GHTreeMapComposed.getSize()))) + \", shortcuts:\") + (com.graphhopper.util.Helper.nf(int))) + \", dijkstras:\") + (com.graphhopper.util.Helper.nf(long))) + \", \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getTimesAsString())) + \", meanDegree:\") + ((long)(double))) + \", algo:\") + (com.graphhopper.routing.DijkstraOneToMany.getMemoryUsageAsString())) + \", \") + (com.graphhopper.util.Helper.getMemInfo())));\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n    } \n    (long)++;\n    int int = com.graphhopper.coll.GHTreeMapComposed.pollKey();\n    if ((!(com.graphhopper.coll.GHTreeMapComposed.isEmpty())) && ((com.graphhopper.coll.GHTreeMapComposed.getSize()) < long)) {\n        com.graphhopper.util.StopWatch.start();\n        int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n        if (int > (com.graphhopper.coll.GHTreeMapComposed.peekValue())) {\n            com.graphhopper.coll.GHTreeMapComposed.insert(int, int);\n            com.graphhopper.util.StopWatch.stop();\n            continue;\n        } \n        com.graphhopper.util.StopWatch.stop();\n    } \n    int += com.graphhopper.routing.ch.PrepareContractionHierarchies.addShortcuts(int);\n    com.graphhopper.storage.CHGraphImpl.setLevel(int, int);\n    int++;\n    if ((com.graphhopper.coll.GHTreeMapComposed.getSize()) < long)\n        break;\n    \n    com.graphhopper.util.CHEdgeIterator com.graphhopper.util.CHEdgeIterator = com.graphhopper.util.CHEdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.CHEdgeIterator.next()) {\n        int int = com.graphhopper.util.CHEdgeIterator.getAdjNode();\n        if ((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int))\n            continue;\n        \n        if (boolean && ((java.util.Random.nextInt(100)) < (int))) {\n            com.graphhopper.util.StopWatch.start();\n            int int = int[][int];\n            int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n            if (int != int)\n                com.graphhopper.coll.GHTreeMapComposed.update(int, int, int);\n            \n            com.graphhopper.util.StopWatch.stop();\n        } \n        com.graphhopper.storage.CHGraphImpl.disconnect(com.graphhopper.util.CHEdgeExplorer, com.graphhopper.util.CHEdgeIterator);\n    }\n}"},"status":-1},{"failures":[],"tindex":"ddc8b7b5-827d-11e5-a6a5-cd0704bcd73f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:67","type":"CtUnaryOperatorImpl","sourcecode":"~(long)"},"variableMap":{"mask":"bytePos"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:230","type":"CtOperatorAssignmentImpl","sourcecode":"long >>>= 2"},"status":-2},{"failures":[37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"tindex":"ddc8dec6-827d-11e5-a6a5-9590f32b8bbb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:475","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(0.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"status":-1},{"failures":[],"tindex":"ddc8dec7-827d-11e5-a6a5-870c7e8df129","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.FastestWeighting:67","type":"CtIfImpl","sourcecode":"if (double == 0)\n    return java.lang.Double.double;\n"},"variableMap":{"java.lang.Double.POSITIVE_INFINITY":"dist","speed":"dist"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:421","type":"CtReturnImpl","sourcecode":"return double"},"status":-2},{"failures":[60],"tindex":"ddc8dec8-827d-11e5-a6a5-d77eb7c048dd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilLittle:91","type":"CtIfImpl","sourcecode":"if ((int % 8) != 0)\n    int++;\n"},"status":-1},{"failures":[61,62,63],"tindex":"ddc8dec9-827d-11e5-a6a5-fdb23597eb7d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:723","type":"CtLocalVariableImpl","sourcecode":"java.io.File java.io.File = new java.io.File((java.lang.String + \".ghz\"))"},"variableMap":{"graphHopperFolder":"zippedURL"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:256","type":"CtLocalVariableImpl","sourcecode":"java.io.File java.io.File = new java.io.File(java.io.File , new java.io.File(java.lang.String).getName())"},"status":-1},{"failures":[64,65,29,66,30,67,68,69,31,32,33,34,70,35,36,71,72,73,74,75,76,77,4,78,79,5,80,81,82,83,6,7,84,85,8,86,87,88,89,90,9,91,15,16,19,20,92],"tindex":"ddc8deca-827d-11e5-a6a5-77b7caa9be11","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:990","type":"CtIfImpl","sourcecode":"if ((int) == (com.graphhopper.storage.EdgeAccess.int))\n    throw new java.lang.IllegalStateException(((\"content of edgeId \" + (int)) + \" is marked as invalid - ie. the edge is already removed!\"));\n"},"variableMap":{"baseNode":"toSize","edgeId":"size","com.graphhopper.storage.EdgeAccess.NO_NODE":"toSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:260","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(int[], int, ((int) + 1), 0)"},"status":-1},{"failures":[],"tindex":"ddc905db-827d-11e5-a6a5-9db6019332f8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:135","type":"CtIfImpl","sourcecode":"if (double < (double * 5)) {\n    java.lang.String = \"E\";\n} else if (double < (double * 7)) {\n    java.lang.String = \"SE\";\n} else if (double < (double * 9)) {\n    java.lang.String = \"S\";\n} else if (double < (double * 11)) {\n    java.lang.String = \"SW\";\n} else if (double < (double * 13)) {\n    java.lang.String = \"W\";\n} else if (double < (double * 15)) {\n    java.lang.String = \"NW\";\n} else {\n    java.lang.String = \"N\";\n}"},"status":-2},{"failures":[],"tindex":"ddc905dc-827d-11e5-a6a5-e1d977d5c85f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:68","type":"CtReturnImpl","sourcecode":"return 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TraversalMode:88","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.EdgeIteratorState.getEdge()"},"status":-1},{"failures":[93,94],"tindex":"ddc905dd-827d-11e5-a6a5-cd2587df3ad4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:157","type":"CtOperatorAssignmentImpl","sourcecode":"long |= (byte & 127L) << 49"},"status":-1},{"failures":[],"tindex":"ddc92cee-827d-11e5-a6a5-b3ca3a4765d4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:475","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(0.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"variableMap":{"weightToPrioMap":"weightToPrioMap","com.graphhopper.routing.util.PriorityCode.UNCHANGED":"com.graphhopper.routing.util.PriorityCode.UNCHANGED"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:556","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(100.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"status":-2},{"failures":[64,65,29,66,30,67,68,69,31,32,33,34,70,35,36,71,72,73,74,75,76,77,4,78,79,5,80,81,82,83,6,7,84,85,8,86,87,88,89,90,9,91,15,16,19,20,92],"tindex":"ddc92cef-827d-11e5-a6a5-55415554e25f","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:315","type":"CtAssignmentImpl","sourcecode":"int = ((int) / 4) - 1"},"variableMap":{"segmentSizeInBytes":"toSize","indexDivisor":"toSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:257","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[4,5,6,7,8,9,15,16,19,20],"tindex":"ddc92cf0-827d-11e5-a6a5-19b7a893b0cd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.VirtualEdgeIteratorState:174","type":"CtReturnImpl","sourcecode":"return false"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"ddc86a90-827d-11e5-a6a5-a1e2858aa17f","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.DataAccess.setHeader"]},"type":"staticDiff"}]}]}
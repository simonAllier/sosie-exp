{"failureDictionary":{"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":21,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":108,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":289,"com.graphhopper.GraphHopperAPITest.testNoLoad":374,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":383,"com.graphhopper.reader.OSMReaderTest.testFerry":161,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":157,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":158,"com.graphhopper.storage.GraphHopperStorageCHTest.testDoThrowExceptionIfDimDoesNotMatch":380,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":64,"com.graphhopper.storage.index.BresenhamLineTest.testBresenhamHorizontal":41,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":376,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":57,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":58,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":404,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":348,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":135,"com.graphhopper.coll.CompressedArrayTest.testCompress":16,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":193,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":284,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":1,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testNoErrorOnEdgeCase_lastIndex":425,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":402,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":262,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":176,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":221,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":5,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":223,"com.graphhopper.GraphHopperTest.testPrepare":29,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":107,"com.graphhopper.storage.GraphStorageViaMMapTest.testInfinityWeight":412,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":78,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":269,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":99,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":152,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNormedDist":426,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":75,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":149,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":139,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":192,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":74,"com.graphhopper.storage.RAMIntDataAccessTest.testBoundsCheck":240,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":91,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":96,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":261,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":295,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":121,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":166,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":371,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":65,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":114,"com.graphhopper.GraphHopperTest.testNoNPE_ifLoadNotSuccessful":375,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":86,"com.graphhopper.GraphHopperTest.testLoadOSM":188,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":302,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":40,"com.graphhopper.storage.RAMIntDataAccessTest.testEnsureCapacity":244,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":38,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":202,"com.graphhopper.reader.OSMReaderTest.testSort":163,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":137,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":169,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":218,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":429,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":280,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":250,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijection":12,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":413,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":23,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":175,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":113,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":368,"com.graphhopper.storage.index.BresenhamLineTest.testBresenhamVertical":42,"com.graphhopper.storage.RAMIntDataAccessTest.testExceptionIfNoEnsureCapacityWasCalled":243,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeReturn":231,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":258,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":89,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":428,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":283,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":215,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":343,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":53,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":49,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":72,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":329,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":418,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":237,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":266,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":104,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":55,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":391,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":94,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":93,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":128,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":352,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":341,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":358,"com.graphhopper.coll.CompressedArrayTest.testCompress2":15,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":271,"com.graphhopper.storage.GraphHopperStorageCHTest.testBigDataEdge":381,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":287,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":349,"com.graphhopper.GraphHopperAPITest.testLoad":159,"com.graphhopper.storage.RAMIntDataAccessTest.testRenameFlush":242,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":263,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":253,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":140,"com.graphhopper.reader.OSMReaderTest.testBarriers":164,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":339,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes":219,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":95,"com.graphhopper.util.GHUtilityTest.testCopy":145,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":387,"com.graphhopper.storage.index.BresenhamLineTest.testBresenhamBug":43,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testNoErrorOnEdgeCase_lastIndex":421,"com.graphhopper.routing.PathTest.testFindInstruction":119,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":340,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":288,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":281,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":267,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":143,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":366,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":82,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":353,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":198,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":4,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":251,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":388,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":226,"com.graphhopper.storage.GraphHopperStorageCHTest.testBounds":382,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadFlush":248,"com.graphhopper.util.InstructionListTest.testWayList2":154,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":321,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":409,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":303,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":285,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijectionBug2":9,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":344,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":63,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":203,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":62,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":370,"com.graphhopper.storage.index.BresenhamLineTest.testBresenhamLineRightDown":47,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":129,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetLocations":216,"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":417,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":396,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":350,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":331,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":252,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":165,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":17,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":347,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":227,"com.graphhopper.routing.PathBidirRefTest.testExtract":141,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":183,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":178,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":298,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnsureSize":200,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":408,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":182,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":373,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":181,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":327,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":73,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":180,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":407,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":179,"com.graphhopper.util.GHUtilityTest.testSort2":144,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":307,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":105,"com.graphhopper.reader.OSMReaderTest.testMain":28,"com.graphhopper.storage.GraphHopperStorageCHTest.testInfinityWeight":233,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":357,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":229,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":228,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":411,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBigDataEdge":431,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":132,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":217,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":362,"com.graphhopper.storage.RAMIntDataAccessTest.testCopy":241,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":171,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":31,"com.graphhopper.storage.GraphHopperStorageTest.testClone":255,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":286,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":410,"com.graphhopper.storage.GraphHopperStorageCHTest.testCheckFirstNode":225,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":265,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":389,"com.graphhopper.routing.PathTest.testTime":116,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":209,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNoErrorOnEdgeCase_lastIndex":427,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":305,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":401,"com.graphhopper.util.GHUtilityTest.testSortDirected":147,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":214,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":125,"com.graphhopper.GraphHopperTest.testFootOnly":30,"com.graphhopper.storage.index.BresenhamLineTest.testBresenhamLineRightUp":48,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":320,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":332,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":117,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":60,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":92,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":79,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":204,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":306,"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":397,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":26,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":297,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":122,"com.graphhopper.routing.QueryGraphTest.testOneWay":127,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":422,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":222,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":10,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSortHighLevelFirst":424,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":37,"com.graphhopper.geohash.SpatialKeyAlgoTest.testOddBits":7,"com.graphhopper.reader.OSMReaderTest.testWithBounds":170,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":22,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":134,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testInfinityWeight":369,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":394,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":403,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":59,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":317,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":76,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":309,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":361,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":313,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":34,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":354,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":35,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":24,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":90,"com.graphhopper.util.InstructionListTest.testWayList":153,"com.graphhopper.storage.GraphHopperStorageTest.testInfinityWeight":282,"com.graphhopper.GraphHopperAPITest.testDisconnected179":160,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":212,"com.graphhopper.geohash.SpatialKeyAlgoTest.testNoFurtherIterationIfBitsIs1":11,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":390,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":189,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBounds":432,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":293,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":136,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":385,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":174,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":138,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":206,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":51,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":400,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":415,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":185,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":257,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":333,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":50,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":363,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":365,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":364,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":85,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":275,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":274,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":102,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":84,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":323,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":324,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":67,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":338,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":111,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":68,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":249,"com.graphhopper.routing.PathTest.testWayList":18,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":414,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":328,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":393,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":211,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":112,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":97,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":294,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":318,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPropertiesWithNoInit":360,"com.graphhopper.storage.GraphHopperStorageCHTest.testPrios":378,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":268,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":195,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":256,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":345,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":69,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":120,"com.graphhopper.util.GHUtilityTest.testSort":146,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":25,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":299,"com.graphhopper.storage.GraphStorageViaMMapTest.testBounds":406,"com.graphhopper.geohash.SpatialKeyAlgoTest.testDifferentInitialBounds":14,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":234,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":254,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":372,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":290,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":335,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":310,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":194,"com.graphhopper.storage.RAMIntDataAccessTest.testSegments":246,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":54,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":126,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":232,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":130,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":308,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":190,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":337,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":430,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":187,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":110,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":355,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":133,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":199,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadClose":247,"com.graphhopper.routing.PathTest.testFound":115,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":239,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":61,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":191,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":314,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":87,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":148,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":351,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":238,"com.graphhopper.util.InstructionListTest.testEmptyList":151,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":260,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":98,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":103,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":270,"com.graphhopper.storage.GraphHopperStorageCHTest.testFlags":208,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":106,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":230,"com.graphhopper.reader.PrinctonReaderTest.testRead":173,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":36,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":210,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":346,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":8,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":392,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":359,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":33,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":19,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes2":205,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":356,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":52,"com.graphhopper.reader.OSMReaderTest.testFoot":162,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":27,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":405,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":13,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":300,"com.graphhopper.reader.OSMReaderTest.testOneWay":172,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":235,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":301,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":264,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":207,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":278,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":277,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":367,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":3,"com.graphhopper.storage.GraphHopperStorageTest.testPropertiesWithNoInit":273,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":259,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":399,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":118,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":81,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":325,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":0,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":6,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":66,"com.graphhopper.storage.index.BresenhamLineTest.testBresenhamLineLeftDown":45,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":80,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":311,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":156,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":131,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":395,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":32,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":124,"com.graphhopper.storage.GraphHopperStorageTest.testBigDataEdge":419,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":196,"com.graphhopper.routing.PathBidirRefTest.testExtract2":142,"com.graphhopper.storage.RAMIntDataAccessTest.testTrimTo":245,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":334,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":88,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":319,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":71,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":292,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":304,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":330,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":276,"com.graphhopper.storage.index.Location2IDFullIndexTest.testNoErrorOnEdgeCase_lastIndex":423,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":220,"com.graphhopper.storage.index.BresenhamLineTest.testBresenhamLineLeftUp":46,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":77,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":315,"com.graphhopper.storage.index.BresenhamLineTest.testLineRightDown2":44,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":416,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":109,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":312,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":2,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":379,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":296,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":236,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":279,"com.graphhopper.GraphHopperTest.testFootAndCar":186,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":272,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":56,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":201,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":70,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":386,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":83,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":39,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":101,"com.graphhopper.storage.GraphHopperStorageCHTest.testPropertiesWithNoInit":224,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":342,"com.graphhopper.GraphHopperTest.testPrepareOnly":177,"com.graphhopper.GraphHopperTest.testVia":184,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":291,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":123,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":384,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":100,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":168,"com.graphhopper.reader.OSMReaderTest.testTurnFlagCombination":377,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":326,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":316,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":197,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":155,"com.graphhopper.storage.GraphHopperStorageTest.testBounds":420,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":167,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":322,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":213,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":398,"com.graphhopper.util.InstructionListTest.testFind":150,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":336},"transformations":[{"failures":[0,1,2,3,4,5,6],"tindex":"49000c16-82a6-11e5-99dc-13dcedb3063b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:597","type":"CtUnaryOperatorImpl","sourcecode":"long++"},"status":-2},{"failures":[],"tindex":"49003327-82a6-11e5-99dc-53137a99d4d4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.LinearKeyAlgo:70","type":"CtInvocationImpl","sourcecode":"com.graphhopper.geohash.LinearKeyAlgo.setBounds(-180, 180, -90, 90)"},"status":0},{"failures":[],"tindex":"49003328-82a6-11e5-99dc-6d74ad4951df","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:478","type":"CtAssignmentImpl","sourcecode":"int = (int + int) >>> 1"},"variableMap":{"high":"child","guess":"child","low":"child"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntIntBinHeap:116","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":0},{"failures":[7,8,9,10,11,12,13,14,15,16],"tindex":"49005a39-82a6-11e5-99dc-01b3474e0ef5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:227","type":"CtOperatorAssignmentImpl","sourcecode":"double /= 2"},"status":-1},{"failures":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"tindex":"49005a3a-82a6-11e5-99dc-25e0b54c5e94","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:199","type":"CtIfImpl","sourcecode":"if (int > 1000)\n    throw new java.lang.IllegalStateException(\"something went wrong: there seems to be no end of the turn cost-list!?\");\n"},"variableMap":{"i":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:337","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(double[][(2 * int)], double[][((2 * int) + 1)], java.lang.Double.double)"},"status":-1},{"failures":[],"tindex":"49005a3b-82a6-11e5-99dc-fb70aac7fa2a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:239","type":"CtTryImpl","sourcecode":"try {\n    long long = com.graphhopper.storage.AbstractDataAccess.readHeader(java.io.RandomAccessFile);\n    if (long < 0)\n        return false;\n    \n    com.graphhopper.storage.MMapDataAccess.mapIt(com.graphhopper.storage.AbstractDataAccess.int, (long - (com.graphhopper.storage.AbstractDataAccess.int)), false);\n    return true;\n} catch (java.io.IOException ex) {\n    throw new java.lang.RuntimeException((\"Problem while loading \" + com.graphhopper.storage.AbstractDataAccess.(getFullName())) , java.io.IOException);\n}"},"status":-2},{"failures":[51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"tindex":"4900814c-82a6-11e5-99dc-2d137aac1829","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.pbf.PbfBlobDecoder:283","type":"CtOperatorAssignmentImpl","sourcecode":"long += long"},"variableMap":{"nodeId":"encoded","nodeIdOffset":"encoded"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:355","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.EncodedValue.setValue(long, com.graphhopper.routing.util.BikeCommonFlagEncoder.handlePriority(com.graphhopper.reader.OSMWay, int))"},"status":-1},{"failures":[],"tindex":"4900814d-82a6-11e5-99dc-7181fa758747","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.SparseLongLongArray:355","type":"CtLocalVariableImpl","sourcecode":"long[] long[] = new long[int]"},"variableMap":{"n":"lastBarrier"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:400","type":"CtLocalVariableImpl","sourcecode":"long[] long[] = gnu.trove.list.TLongList.toArray(int, ((int - int) + 1))"},"status":-2},{"failures":[],"tindex":"4900814e-82a6-11e5-99dc-4317a3531f3a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.LinearKeyAlgo:111","type":"CtReturnImpl","sourcecode":"return double"},"variableMap":{"latDelta":"java.lang.Double.POSITIVE_INFINITY"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:105","type":"CtReturnImpl","sourcecode":"return java.lang.Double.double"},"status":-2},{"failures":[],"tindex":"4900814f-82a6-11e5-99dc-0d02be3e3032","series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:227","type":"CtOperatorAssignmentImpl","sourcecode":"double /= 2"},"variableMap":{"midLat":"periodTime"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:361","type":"CtOperatorAssignmentImpl","sourcecode":"double += com.graphhopper.util.StopWatch.getSeconds()"},"status":0},{"failures":[],"tindex":"4900a860-82a6-11e5-99dc-edae359aaccc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:406","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.util.EdgeIteratorState>.addAll(com.graphhopper.reader.OSMReader.addBarrierEdge(long, long, long, long, long))"},"status":0},{"failures":[78,79,0,80,1,81,82,83,2,84,3,4,5,85,6,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,17,110,111,112,113,114,115,116,117,118,18,119,120,121,19,122,123,20,21,124,125,22,126,23,24,25,127,26,128,27,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,28,163,164,165,166,77,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,29,185,186,187,188,189,190,30,191,192,193,194,195,196,197,198,199,200,201,202,31,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,32,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,35,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,36,282,283,284,285,286,287,288,289,290,291,292,293,294,37,295,38,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,39,318,40,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,49,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,50,369,370,371,372,373],"tindex":"4900a861-82a6-11e5-99dc-35ed8bcb6802","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:184","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Math.max(((int)(java.lang.Math.pow(2, int))), com.graphhopper.storage.AbstractDataAccess.int)"},"variableMap":{"com.graphhopper.storage.AbstractDataAccess.SEGMENT_SIZE_MIN":"bufferIndex","tmp":"index","segmentSizeInBytes":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:233","type":"CtAssignmentImpl","sourcecode":"int[][][int][int] = int"},"status":-1},{"failures":[],"tindex":"4900cf72-82a6-11e5-99dc-9f5901abf866","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalc2D:58","type":"CtReturnImpl","sourcecode":"return (double * double) + (double * double)"},"variableMap":{"dX":"val","dY":"val"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:114","type":"CtReturnImpl","sourcecode":"return double - ((int)(double))"},"status":0},{"failures":[374,375],"tindex":"4900cf73-82a6-11e5-99dc-4db663d08c47","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:321","type":"CtThrowImpl","sourcecode":"throw new java.lang.AssertionError(\"The graph has not yet been initialized.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:946","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"Call load or importOrLoad before routing\")"},"status":-1},{"failures":[],"tindex":"4900f684-82a6-11e5-99dc-555995f0ef32","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:125","type":"CtIfImpl","sourcecode":"if (long > long) {\n    break;\n} "},"variableMap":{"storedKey":"periodicUpdatesCount","key":"dijkstraCount"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:265","type":"CtWhileImpl","sourcecode":"while (!(com.graphhopper.coll.GHTreeMapComposed.isEmpty())) {\n    if ((boolean && ((long) > 0)) && (((long) % long) == 0)) {\n        com.graphhopper.util.StopWatch.start();\n        com.graphhopper.coll.GHTreeMapComposed.clear();\n        int int = com.graphhopper.storage.CHGraphImpl.getNodes();\n        for (int int = 0 ; int < int ; int++) {\n            if ((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int))\n                continue;\n            \n            int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n            com.graphhopper.coll.GHTreeMapComposed.insert(int, int);\n        }\n        com.graphhopper.util.StopWatch.stop();\n        int++;\n        if (com.graphhopper.coll.GHTreeMapComposed.isEmpty())\n            throw new java.lang.IllegalStateException(\"Cannot prepare as no unprepared nodes where found. Called preparation twice?\");\n        \n    } \n    if (((long) % long) == 0) {\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        org.slf4j.Logger.info((((((((((((((((((com.graphhopper.util.Helper.nf(long)) + \", updates:\") + int) + \", nodes: \") + (com.graphhopper.util.Helper.nf(com.graphhopper.coll.GHTreeMapComposed.getSize()))) + \", shortcuts:\") + (com.graphhopper.util.Helper.nf(int))) + \", dijkstras:\") + (com.graphhopper.util.Helper.nf(long))) + \", \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getTimesAsString())) + \", meanDegree:\") + ((long)(double))) + \", algo:\") + (com.graphhopper.routing.DijkstraOneToMany.getMemoryUsageAsString())) + \", \") + (com.graphhopper.util.Helper.getMemInfo())));\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n    } \n    (long)++;\n    int int = com.graphhopper.coll.GHTreeMapComposed.pollKey();\n    if ((!(com.graphhopper.coll.GHTreeMapComposed.isEmpty())) && ((com.graphhopper.coll.GHTreeMapComposed.getSize()) < long)) {\n        com.graphhopper.util.StopWatch.start();\n        int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n        if (int > (com.graphhopper.coll.GHTreeMapComposed.peekValue())) {\n            com.graphhopper.coll.GHTreeMapComposed.insert(int, int);\n            com.graphhopper.util.StopWatch.stop();\n            continue;\n        } \n        com.graphhopper.util.StopWatch.stop();\n    } \n    int += com.graphhopper.routing.ch.PrepareContractionHierarchies.addShortcuts(int);\n    com.graphhopper.storage.CHGraphImpl.setLevel(int, int);\n    int++;\n    if ((com.graphhopper.coll.GHTreeMapComposed.getSize()) < long)\n        break;\n    \n    com.graphhopper.util.CHEdgeIterator com.graphhopper.util.CHEdgeIterator = com.graphhopper.util.CHEdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.CHEdgeIterator.next()) {\n        int int = com.graphhopper.util.CHEdgeIterator.getAdjNode();\n        if ((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int))\n            continue;\n        \n        if (boolean && ((java.util.Random.nextInt(100)) < (int))) {\n            com.graphhopper.util.StopWatch.start();\n            int int = int[][int];\n            int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n            if (int != int)\n                com.graphhopper.coll.GHTreeMapComposed.update(int, int, int);\n            \n            com.graphhopper.util.StopWatch.stop();\n        } \n        com.graphhopper.storage.CHGraphImpl.disconnect(com.graphhopper.util.CHEdgeExplorer, com.graphhopper.util.CHEdgeIterator);\n    }\n}"},"status":-2},{"failures":[0,1,2,3,4,5,85,6,86,87,89,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,106,107,108,109,17,111,177,376,184,29,187,188,189,30],"tindex":"49011d95-82a6-11e5-99dc-3399441cb7de","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.SparseArray:374","type":"CtWhileImpl","sourcecode":"while ((int - int) > 1) {\n    int = (int + int) >>> 1;\n    if ((int[][int]) < int) {\n        int = int;\n    } else {\n        int = int;\n    }\n}"},"variableMap":{"a":"oldPriorities","high":"neighborUpdatePercentage","low":"newShortcuts","guess":"neighborUpdatePercentage","key":"updateCounter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:265","type":"CtWhileImpl","sourcecode":"while (!(com.graphhopper.coll.GHTreeMapComposed.isEmpty())) {\n    if ((boolean && ((long) > 0)) && (((long) % long) == 0)) {\n        com.graphhopper.util.StopWatch.start();\n        com.graphhopper.coll.GHTreeMapComposed.clear();\n        int int = com.graphhopper.storage.CHGraphImpl.getNodes();\n        for (int int = 0 ; int < int ; int++) {\n            if ((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int))\n                continue;\n            \n            int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n            com.graphhopper.coll.GHTreeMapComposed.insert(int, int);\n        }\n        com.graphhopper.util.StopWatch.stop();\n        int++;\n        if (com.graphhopper.coll.GHTreeMapComposed.isEmpty())\n            throw new java.lang.IllegalStateException(\"Cannot prepare as no unprepared nodes where found. Called preparation twice?\");\n        \n    } \n    if (((long) % long) == 0) {\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        org.slf4j.Logger.info((((((((((((((((((com.graphhopper.util.Helper.nf(long)) + \", updates:\") + int) + \", nodes: \") + (com.graphhopper.util.Helper.nf(com.graphhopper.coll.GHTreeMapComposed.getSize()))) + \", shortcuts:\") + (com.graphhopper.util.Helper.nf(int))) + \", dijkstras:\") + (com.graphhopper.util.Helper.nf(long))) + \", \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getTimesAsString())) + \", meanDegree:\") + ((long)(double))) + \", algo:\") + (com.graphhopper.routing.DijkstraOneToMany.getMemoryUsageAsString())) + \", \") + (com.graphhopper.util.Helper.getMemInfo())));\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n    } \n    (long)++;\n    int int = com.graphhopper.coll.GHTreeMapComposed.pollKey();\n    if ((!(com.graphhopper.coll.GHTreeMapComposed.isEmpty())) && ((com.graphhopper.coll.GHTreeMapComposed.getSize()) < long)) {\n        com.graphhopper.util.StopWatch.start();\n        int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n        if (int > (com.graphhopper.coll.GHTreeMapComposed.peekValue())) {\n            com.graphhopper.coll.GHTreeMapComposed.insert(int, int);\n            com.graphhopper.util.StopWatch.stop();\n            continue;\n        } \n        com.graphhopper.util.StopWatch.stop();\n    } \n    int += com.graphhopper.routing.ch.PrepareContractionHierarchies.addShortcuts(int);\n    com.graphhopper.storage.CHGraphImpl.setLevel(int, int);\n    int++;\n    if ((com.graphhopper.coll.GHTreeMapComposed.getSize()) < long)\n        break;\n    \n    com.graphhopper.util.CHEdgeIterator com.graphhopper.util.CHEdgeIterator = com.graphhopper.util.CHEdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.CHEdgeIterator.next()) {\n        int int = com.graphhopper.util.CHEdgeIterator.getAdjNode();\n        if ((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int))\n            continue;\n        \n        if (boolean && ((java.util.Random.nextInt(100)) < (int))) {\n            com.graphhopper.util.StopWatch.start();\n            int int = int[][int];\n            int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n            if (int != int)\n                com.graphhopper.coll.GHTreeMapComposed.update(int, int, int);\n            \n            com.graphhopper.util.StopWatch.stop();\n        } \n        com.graphhopper.storage.CHGraphImpl.disconnect(com.graphhopper.util.CHEdgeExplorer, com.graphhopper.util.CHEdgeIterator);\n    }\n}"},"status":-1},{"failures":[26,181],"tindex":"490144a6-82a6-11e5-99dc-335472849c16","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.QueryGraph:258","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.add(java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.get(((java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.size()) - 2)))"},"variableMap":{"virtualEdges":"modifiedEdges"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:441","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.add(com.graphhopper.routing.VirtualEdgeIteratorState)"},"status":-1},{"failures":[78,79,0,80,1,81,82,83,2,84,3,4,5,85,6,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,17,110,111,112,113,114,115,116,117,118,18,119,120,121,19,19,122,122,123,123,20,20,21,21,124,124,125,125,22,22,126,126,23,23,24,24,25,25,127,127,26,26,128,128,27,27,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,28,163,164,165,166,77,167,377,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,376,184,29,185,186,187,188,189,190,30,191,192,378,379,193,194,195,196,197,198,199,200,201,380,381,202,31,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,382,227,228,229,230,231,232,32,233,234,235,236,237,33,383,384,385,386,387,388,389,390,391,392,238,393,394,395,396,397,398,399,400,401,402,403,404,405,406,239,407,408,409,410,411,34,412,413,414,415,416,249,250,417,418,419,251,35,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,420,276,277,278,279,280,281,36,282,283,284,285,286,287,288,289,290,421,291,292,293,294,37,295,38,296,297,298,299,300,301,302,303,304,305,422,306,307,308,309,310,311,423,312,313,314,315,424,316,317,39,318,40,319,320,321,322,323,324,325,326,327,328,425,329,330,426,331,332,333,334,427,335,336,428,337,429,430,431,338,49,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,432,363,364,365,366,367,368,50,369,370,371,372,373],"tindex":"49016bb7-82a6-11e5-99dc-f9ad42fe8a1b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:175","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.create(100)"},"variableMap":{"properties":"properties"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:181","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.put(\"graph.dimension\", com.graphhopper.storage.BaseGraph.com.graphhopper.storage.NodeAccess.getDimension())"},"status":-1},{"failures":[],"tindex":"490192c8-82a6-11e5-99dc-5572496d7a14","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.SparseArray:153","type":"CtAssignmentImpl","sourcecode":"boolean = false"},"variableMap":{"mGarbage":"empty"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionAnnotation:51","type":"CtAssignmentImpl","sourcecode":"this.boolean = true"},"status":0}],"header":{"groupId":"com.graphhopper","transformationCount":19,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"4900814f-82a6-11e5-99dc-0d02be3e3032","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.StopWatch.getSeconds"]},"type":"staticDiff"}]},{"transformation":"49003327-82a6-11e5-99dc-53137a99d4d4","diffs":[{"methodsDiff":{"delete":["com.graphhopper.geohash.LinearKeyAlgo.setBounds"]},"type":"staticDiff"}]},{"transformation":"490192c8-82a6-11e5-99dc-5572496d7a14","diffs":[{"branches":{"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":["com.graphhopper.util.InstructionAnnotation_java.lang.String_getMessage().b","com.graphhopper.util.InstructionAnnotation_int_getImportance().b","com.graphhopper.util.InstructionList_java.util.List_createJson().t2","com.graphhopper.util.InstructionList_java.util.List_createJson().e2"],"com.graphhopper.util.InstructionListTest.testRoundaboutJsonNaN":["com.graphhopper.util.InstructionAnnotation_int_getImportance().b","com.graphhopper.util.InstructionAnnotation_java.lang.String_getMessage().b","com.graphhopper.util.InstructionList_java.util.List_createJson().t2","com.graphhopper.util.InstructionList_java.util.List_createJson().e2"]},"type":"branch"}]},{"transformation":"4900a860-82a6-11e5-99dc-edae359aaccc","diffs":[{"methodsDiff":{"delete":["java.util.List<com.graphhopper.util.EdgeIteratorState>.addAll","com.graphhopper.reader.OSMReader.addBarrierEdge"]},"type":"staticDiff"}]}]}
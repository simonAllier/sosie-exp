{"failureDictionary":{"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":3,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":46,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":61,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":47,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":28,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijection":56,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":23,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode":59,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":26,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":73,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":13,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":11,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":12,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":55,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":65,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":16,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":0,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":67,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":37,"com.graphhopper.geohash.SpatialKeyAlgoTest.testOddBits":53,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":74,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":9,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":69,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":27,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":24,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":17,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":2,"com.graphhopper.coll.CompressedArrayTest.testCompress":43,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":8,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":71,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":15,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":54,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":36,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":68,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":10,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":70,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":45,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":62,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":51,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":57,"com.graphhopper.reader.OSMReaderTest.testOneWay":41,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":52,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":29,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":66,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":35,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":6,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":20,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":40,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":39,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":49,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":7,"com.graphhopper.coll.CompressedArrayTest.testCompress2":42,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":18,"com.graphhopper.GraphHopperTest.testVia":60,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":25,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":14,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":63,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":33,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":38,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":4,"com.graphhopper.storage.index.BresenhamLineTest.testRealBresenham":48,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":72,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":44,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":19,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":34,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":1,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEdgeCases":58,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":32,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":31,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":30,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":50,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":22,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":64,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":21,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":5},"transformations":[{"failures":[],"tindex":"acb1badb-790e-11e5-ace2-adcdb7f08623","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:222","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<time>\").append(java.text.SimpleDateFormat.format((long + (com.graphhopper.util.GPXEntry.getTime()))))"},"status":0},{"failures":[],"tindex":"acb1e1ec-790e-11e5-ace2-271c166bb75b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:92","type":"CtLocalVariableImpl","sourcecode":"double double"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:154","type":"CtLocalVariableImpl","sourcecode":"double double = (((double - double) * double) + ((double - double) * double)) / double"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],"tindex":"acb208fd-790e-11e5-ace2-b55b6de8e6e9","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.EdgeAccess:233","type":"CtIfImpl","sourcecode":"if (int <= (com.graphhopper.util.EdgeIterator.int))\n    throw new java.lang.IllegalStateException((((\"edgeId invalid \" + int) + \", \") + (this)));\n"},"variableMap":{"com.graphhopper.util.EdgeIterator.NO_EDGE":"oldI","edgeId":"oldI"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:701","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n    if (int == (com.graphhopper.storage.EdgeAccess.int))\n        continue;\n    \n    if (com.graphhopper.coll.GHBitSet.contains(int))\n        throw new java.lang.IllegalStateException((((\"shouldn\\'t happen the edge to the node \" + int) + \" should be already deleted. \") + int));\n    \n    com.graphhopper.coll.GHBitSet.add(int);\n}"},"status":-1},{"failures":[42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"tindex":"acb208fe-790e-11e5-ace2-9baf1abe5ceb","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:108","type":"CtAssignmentImpl","sourcecode":"long = (long + long) >>> 1"},"variableMap":{"high":"hash","guess":"hash","low":"hash"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:170","type":"CtOperatorAssignmentImpl","sourcecode":"long |= 1"},"status":-1},{"failures":[60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"tindex":"acb208ff-790e-11e5-ace2-850be7917393","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:422","type":"CtReturnImpl","sourcecode":"return 6"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:421","type":"CtReturnImpl","sourcecode":"return double"},"status":-1},{"failures":[],"tindex":"acb20900-790e-11e5-ace2-0be4247e0c12","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:362","type":"CtIfImpl","sourcecode":"if (int == int)\n    return true;\n"},"variableMap":{"baseNode":"com.graphhopper.storage.AbstractDataAccess.HEADER_OFFSET","id":"segmentSizeInBytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:146","type":"CtTryImpl","sourcecode":"try {\n    long long = com.graphhopper.storage.AbstractDataAccess.(readHeader(java.io.RandomAccessFile)) - (com.graphhopper.storage.AbstractDataAccess.int);\n    if (long < 0)\n        return false;\n    \n    java.io.RandomAccessFile.seek(com.graphhopper.storage.AbstractDataAccess.int);\n    int int = ((int)(long / (int)));\n    if ((long % (int)) != 0)\n        int++;\n    \n    byte[][] = new byte[int][];\n    for (int int = 0 ; int < int ; int++) {\n        byte[] byte[] = new byte[int];\n        int int = java.io.RandomAccessFile.read(byte[]);\n        if (int <= 0)\n            throw new java.lang.IllegalStateException((((\"segment \" + int) + \" is empty? \") + com.graphhopper.storage.AbstractDataAccess.(toString())));\n        \n        byte[][][int] = byte[];\n    }\n    return true;\n} finally {\n    java.io.RandomAccessFile.close();\n}"},"status":-2},{"failures":[],"tindex":"acb20901-790e-11e5-ace2-45c76a779cf5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:222","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((((\"File does not exist!? \" + com.graphhopper.storage.AbstractDataAccess.(getFullName())) + \" Make sure that you flushed before renaming. Otherwise it could make problems\") + \" for memory mapped DataAccess objects\"))"},"status":-2},{"failures":[],"tindex":"acb23012-790e-11e5-ace2-c5dadc8d9b8a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:243","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.routing.util.AbstractFlagEncoder.(isAccept(long)))\n    return 0;\n"},"status":-2},{"failures":[],"tindex":"acb23013-790e-11e5-ace2-093e79343313","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtilBig:56","type":"CtAssignmentImpl","sourcecode":"byte[][++int] = ((byte)(int >> 8))"},"variableMap":{"offset":"pointer","bytes":"bytes","value":"pointer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:72","type":"CtAssignmentImpl","sourcecode":"byte[][int] = byte"},"status":-2},{"failures":[],"tindex":"acb23014-790e-11e5-ace2-bb5f7825b235","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:153","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.MMapDataAccess != null)\n    com.graphhopper.util.Helper.cleanHack();\n"},"variableMap":{"mmapDA":"names"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.search.NameIndex:141","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.flush()"},"status":-2},{"failures":[],"tindex":"acb23015-790e-11e5-ace2-91ec4a5b28ba","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:157","type":"CtIfImpl","sourcecode":"if (boolean) {\n    if (double > 1)\n        double = 1;\n    else if (double < 0)\n        double = 0;\n    \n} "},"variableMap":{"reduceToSegment":"updatedInGraph","factor":"weight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:660","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.CHEdgeIterator.next()) {\n    if (((com.graphhopper.util.CHEdgeIterator.isShortcut()) && ((com.graphhopper.util.CHEdgeIterator.getAdjNode()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) && (com.graphhopper.util.CHEdgeIterator.canBeOverwritten(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long))) {\n        if ((com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double) >= (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.CHEdgeIterator, false, com.graphhopper.util.EdgeIterator.int)))\n            continue NEXT_SC;\n        \n        if (((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) || ((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) {\n            throw new java.lang.IllegalStateException((((((((((((((((((\"Shortcut cannot update itself! \" + (com.graphhopper.util.CHEdgeIterator.getEdge())) + \", skipEdge1:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", skipEdge2:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", edge \") + com.graphhopper.util.CHEdgeIterator) + \":\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.CHEdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", sc:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut) + \", skippedEdge1: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", skippedEdge2: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", neighbors:\") + (com.graphhopper.util.GHUtility.getNeighbors(com.graphhopper.util.CHEdgeIterator))));\n        } \n        com.graphhopper.util.CHEdgeIterator.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n        com.graphhopper.util.CHEdgeIterator.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIterator.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIterator.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIterator.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        boolean = true;\n        break;\n    } \n}"},"status":-2},{"failures":[],"tindex":"acb23016-790e-11e5-ace2-07c7fbff66cd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:184","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Math.max(((int)(java.lang.Math.pow(2, int))), com.graphhopper.storage.AbstractDataAccess.int)"},"variableMap":{"com.graphhopper.storage.AbstractDataAccess.SEGMENT_SIZE_MIN":"ref","tmp":"ref","segmentSizeInBytes":"ref"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.EdgeWrapper:68","type":"CtAssignmentImpl","sourcecode":"int[][int] = -1"},"status":-2},{"failures":[],"tindex":"acb25727-790e-11e5-ace2-791fff8387c7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:134","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setHeader(int, com.graphhopper.storage.AbstractDataAccess.getHeader(int))"},"variableMap":{"h":"len","this":"da","da":"da"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:54","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.getBytes(0, byte[], int)"},"status":-2},{"failures":[],"tindex":"acb25728-790e-11e5-ace2-c992ec0e2e31","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:303","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch()"},"variableMap":{"dijkstraSW":"lazySW"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:313","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.StopWatch.start()"},"status":-2},{"failures":[],"tindex":"acb25729-790e-11e5-ace2-dd5ddf11fe27","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DouglasPeucker:133","type":"CtLocalVariableImpl","sourcecode":"double double = -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:895","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.Helper.intToDegree(com.graphhopper.util.BitUtil.toInt(byte[], int))"},"status":-2},{"failures":[],"tindex":"acb2572a-790e-11e5-ace2-f94f2c49d93d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:111","type":"CtIfImpl","sourcecode":"if ((int) <= 0) {\n    throw new java.lang.IllegalStateException(\"An empty queue does not have a minimum value.\");\n} "},"variableMap":{"size":"mSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:197","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(int[], int, int[], (int + 1), ((int) - int))"},"status":-2},{"failures":[],"tindex":"acb2572b-790e-11e5-ace2-e73af9783d6a","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:172","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"via node cannot be negative\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:129","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"already closed\")"},"status":-2},{"failures":[],"tindex":"acb2572c-790e-11e5-ace2-8d51c0facd3f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:110","type":"CtIfImpl","sourcecode":"if (long < 0)\n    throw new java.lang.IllegalArgumentException(\"new capacity has to be strictly positive\");\n"},"variableMap":{"byteCount":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedValue:79","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.EncodedValue.checkValue(long)"},"status":-2},{"failures":[],"tindex":"acb2572d-790e-11e5-ace2-6d69949ad086","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.Path:460","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.util.Instruction.int"},"variableMap":{"com.graphhopper.util.Instruction.USE_ROUNDABOUT":"fromNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:176","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.storage.EdgeAccess.getOtherNode(int, long)"},"status":-2},{"failures":[],"tindex":"acb27e3e-790e-11e5-ace2-f3c166bcc3e6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.Dijkstra:55","type":"CtAssignmentImpl","sourcecode":"java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry> = new java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>(int)"},"variableMap":{"size":"nodes","fromHeap":"openSetTo"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:65","type":"CtAssignmentImpl","sourcecode":"java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry> = new java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>((int / 10))"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":8,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":2,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":36,"com.graphhopper.util.InstructionListTest.testCreateGPX":0,"com.graphhopper.reader.OSMReaderTest.testOneWay":38,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":27,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":19,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":29,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":5,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":22,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":33,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":6,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":30,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":9,"com.graphhopper.GraphHopperTest.testVia":12,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":24,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":26,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":32,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":17,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":28,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":25,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":23,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":35,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":37,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":3,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":1,"com.graphhopper.GraphHopperTest.testFootOnly":16,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":31,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":18,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":14,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":21,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":34,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":7,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":4,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":11,"com.graphhopper.GraphHopperTest.testPrepare":13,"com.graphhopper.GraphHopperTest.testFootAndCar":15,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":10},"transformations":[{"failures":[0,1],"tindex":"00cc86da-7926-11e5-bac9-21de09d755fb","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.Path:494","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.InstructionList.add(com.graphhopper.util.Instruction)"},"variableMap":{"ways":"this","prevInstruction":"currInstr"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:205","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.InstructionList.createRteptBlock(java.lang.StringBuilder, com.graphhopper.util.Instruction, com.graphhopper.util.Instruction)"},"status":-1},{"failures":[],"tindex":"00ccadeb-7926-11e5-bac9-1f756735b6ca","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMTurnRelation:103","type":"CtIfImpl","sourcecode":"if (int == (com.graphhopper.util.EdgeIterator.int))\n    return java.util.Collections.emptyList();\n"},"variableMap":{"com.graphhopper.util.EdgeIterator.NO_EDGE":"com.graphhopper.util.EdgeIterator.NO_EDGE","edgeIdFrom":"edgeFrom"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMTurnRelation:83","type":"CtTryImpl","sourcecode":"try {\n    if (int == (com.graphhopper.reader.OSMReader.int))\n        return java.util.Collections.emptyList();\n    \n    int int = com.graphhopper.util.EdgeIterator.int;\n    com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        if ((com.graphhopper.reader.OSMReader.getOsmIdOfInternalEdge(com.graphhopper.util.EdgeIterator.getEdge())) == (this.long)) {\n            int = com.graphhopper.util.EdgeIterator.getEdge();\n            break;\n        } \n    }\n    if (int == (com.graphhopper.util.EdgeIterator.int))\n        return java.util.Collections.emptyList();\n    \n    final java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry> java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry> = new java.util.ArrayList<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>();\n    com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        int int = com.graphhopper.util.EdgeIterator.getEdge();\n        long long = com.graphhopper.reader.OSMReader.getOsmIdOfInternalEdge(int);\n        if ((((int != int) && ((this.com.graphhopper.reader.OSMTurnRelation.Type) == (com.graphhopper.reader.OSMTurnRelation.Type.com.graphhopper.reader.OSMTurnRelation.Type))) && (long != (this.long))) || ((((this.com.graphhopper.reader.OSMTurnRelation.Type) == (com.graphhopper.reader.OSMTurnRelation.Type.com.graphhopper.reader.OSMTurnRelation.Type)) && (long == (this.long))) && (long >= 0))) {\n            final com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry = new com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry();\n            com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int = int;\n            com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int = int;\n            com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int = com.graphhopper.util.EdgeIterator.getEdge();\n            com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.long = com.graphhopper.routing.util.TurnCostEncoder.getTurnFlags(true, 0);\n            java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>.add(com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry);\n            if ((this.com.graphhopper.reader.OSMTurnRelation.Type) == (com.graphhopper.reader.OSMTurnRelation.Type.com.graphhopper.reader.OSMTurnRelation.Type))\n                break;\n            \n        } \n    }\n    return java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>;\n} catch (java.lang.Exception e) {\n    throw new java.lang.IllegalStateException((\"Could not built turn table entry for relation of node with osmId:\" + (this.long)) , java.lang.Exception);\n}"},"status":-2},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],"tindex":"00ccadec-7926-11e5-bac9-951736d150dd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:443","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.getLatitude(int)"},"variableMap":{"this":"this","index":"index"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:443","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.getLongitude(int)"},"status":-1},{"failures":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38],"tindex":"00ccd4fd-7926-11e5-bac9-c779e7cbc41b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:675","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.EdgeIterable.setBaseNode(int)"},"status":-1},{"failures":[],"tindex":"00ccd4fe-7926-11e5-bac9-272158188835","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:191","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(5)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:133","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.AbstractDataAccess.isClosed())\n    throw new java.lang.IllegalStateException(\"already closed\");\n"},"status":-2},{"failures":[],"tindex":"00ccd4ff-7926-11e5-bac9-bb632ff1915a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.shapes.BBox:230","type":"CtLocalVariableImpl","sourcecode":"int int = 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:48","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(double))"},"status":-2},{"failures":[],"tindex":"00ccd500-7926-11e5-bac9-4f9fa81a5f53","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:280","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt(long, com.graphhopper.storage.BaseGraph.com.graphhopper.storage.DataAccess.getInt(long))"},"status":-2},{"failures":[],"tindex":"00ccd501-7926-11e5-bac9-4bd18084a4c3","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistanceCalc2D:58","type":"CtReturnImpl","sourcecode":"return (double * double) + (double * double)"},"variableMap":{"dX":"java.lang.Double.NaN","dY":"java.lang.Double.NaN"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:241","type":"CtReturnImpl","sourcecode":"return java.lang.Double.double"},"status":-2},{"failures":[],"tindex":"00ccd502-7926-11e5-bac9-edf73f9680e9","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:236","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"00ccfc13-7926-11e5-bac9-b3bd770d2893","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMInputFile:209","type":"CtReturnImpl","sourcecode":"return com.graphhopper.reader.OSMRelation.create(long, javax.xml.stream.XMLStreamReader)"},"variableMap":{"parser":"parser","id":"id"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMInputFile:195","type":"CtIfImpl","sourcecode":"if (\"node\".equals(java.lang.String)) {\n    long = java.lang.Long.parseLong(java.lang.String);\n    return com.graphhopper.reader.OSMNode.create(long, javax.xml.stream.XMLStreamReader);\n} "},"status":-2},{"failures":[],"tindex":"00ccfc14-7926-11e5-bac9-ab745f2a3745","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:168","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[],"tindex":"00ccfc15-7926-11e5-bac9-c79695b81729","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:146","type":"CtIfImpl","sourcecode":"if (int > 100)\n    throw new java.lang.IllegalArgumentException(\"neighborUpdates has to be in [0, 100], to disable it use 0\");\n"},"variableMap":{"neighborUpdates":"adjNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.PathBidirRef:92","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.Path.processEdge(int, com.graphhopper.storage.EdgeEntry.int)"},"status":-2},{"failures":[],"tindex":"00ccfc16-7926-11e5-bac9-b79196ba6735","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:685","type":"CtIfImpl","sourcecode":"if ((!(com.graphhopper.storage.DataAccess.loadExisting())) || (!(com.graphhopper.storage.DataAccess.loadExisting())))\n    return false;\n"},"variableMap":{"shortcuts":"dataAccess","nodesCH":"dataAccess"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:281","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.storage.DataAccess.loadExisting()))\n    return false;\n"},"status":-2},{"failures":[],"tindex":"00ccfc17-7926-11e5-bac9-312c0c4c5296","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:154","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:84","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.MMapDataAccess.initRandomAccessFile()"},"status":-2},{"failures":[],"tindex":"00ccfc18-7926-11e5-bac9-b3600e2c5229","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:369","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.GraphHopperStorage.getProperties()"},"status":-2},{"failures":[],"tindex":"00cd2329-7926-11e5-bac9-c3d13b7c1e68","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.QueryGraph:585","type":"CtIfImpl","sourcecode":"if ((int % 2) == 0)\n    int++;\nelse\n    int--;\n"},"variableMap":{"edgeId":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:164","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.set(int, java.lang.Double.double, java.lang.Double.double, java.lang.Double.double)"},"status":-2},{"failures":[],"tindex":"00cd232a-7926-11e5-bac9-457fffe7ec0b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:848","type":"CtReturnImpl","sourcecode":"return ((int)(int))"},"variableMap":{"tmpNode":"tmp"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:296","type":"CtReturnImpl","sourcecode":"return int - int"},"status":-2},{"failures":[],"tindex":"00cd232b-7926-11e5-bac9-39aa76de4944","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:415","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.BaseGraph.getEdgeIteratorState(int, int)"},"variableMap":{"edgeId":"b","adjNode":"b","baseGraph":"baseGraph"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:403","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.BaseGraph.edge(int, int)"},"status":-2},{"failures":[],"tindex":"00cd232c-7926-11e5-bac9-a5485cf80cbd","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:158","type":"CtAssignmentImpl","sourcecode":"byte[][] = new byte[int][]"},"variableMap":{"segmentCount":"length","segments":"segments"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:68","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.RAMDataAccess.byte[][] = new byte[byte[][].int][]"},"status":-2},{"failures":[],"tindex":"00cd232d-7926-11e5-bac9-db0017ce0125","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:254","type":"CtIfImpl","sourcecode":"if (boolean)\n    return long;\n"},"variableMap":{"directionBitMask":"turnRestrictionBit","blockByDefault":"restricted"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:659","type":"CtIfImpl","sourcecode":"if ((int) == 0)\n    return 0;\nelse if ((int) == 1) {\n    if (double != 0)\n        throw new java.lang.IllegalArgumentException(\"Only restrictions are supported\");\n    \n    return boolean ? long : 0;\n} "},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
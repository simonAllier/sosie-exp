{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":140,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":279,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":328,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":288,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":175,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":189,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":125,"com.graphhopper.reader.OSMReaderTest.testFerry":363,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":14,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":15,"com.graphhopper.storage.GraphHopperStorageCHTest.testDoThrowExceptionIfDimDoesNotMatch":234,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":276,"com.graphhopper.routing.QueryGraphTest.testOneWay":287,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":184,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":257,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":24,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSortHighLevelFirst":196,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":171,"com.graphhopper.reader.OSMReaderTest.testWithBounds":375,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":147,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":52,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testInfinityWeight":75,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":137,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":282,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":339,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":340,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":146,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":121,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":225,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testNoErrorOnEdgeCase_lastIndex":212,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":295,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":145,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":97,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":198,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":16,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":163,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":65,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":256,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":168,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":258,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":303,"com.graphhopper.GraphHopperTest.testPrepare":26,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":156,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":58,"com.graphhopper.storage.GraphStorageViaMMapTest.testInfinityWeight":157,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":327,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":86,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":104,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":291,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":285,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":310,"com.graphhopper.util.InstructionListTest.testWayList":11,"com.graphhopper.storage.GraphHopperStorageTest.testInfinityWeight":119,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":10,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":319,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNormedDist":215,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":2,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":247,"com.graphhopper.GraphHopperAPITest.testDisconnected179":359,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":222,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":344,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":132,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":31,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBounds":67,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":169,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":341,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":127,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":311,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":96,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":316,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":172,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":357,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":362,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":343,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":369,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":77,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":241,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":349,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":143,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":160,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":27,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":92,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":218,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":68,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":74,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":70,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":69,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":306,"com.graphhopper.GraphHopperTest.testLoadOSM":30,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":180,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":304,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":201,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":110,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":173,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":236,"com.graphhopper.reader.OSMReaderTest.testSort":366,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":109,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":322,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":342,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":374,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":38,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":253,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":116,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":81,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":300,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":206,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":207,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":158,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":41,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":284,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":332,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":360,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":80,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":348,"com.graphhopper.routing.PathTest.testWayList":354,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":73,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":159,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":136,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":211,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":246,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":333,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeReturn":267,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":93,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":36,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":309,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":120,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":170,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":278,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":317,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":200,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPropertiesWithNoInit":64,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":47,"com.graphhopper.storage.GraphHopperStorageCHTest.testPrios":223,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":250,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":103,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":42,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":227,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":49,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":91,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":213,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":83,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":274,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":101,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":324,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":356,"com.graphhopper.util.GHUtilityTest.testSort":6,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":133,"com.graphhopper.storage.GraphStorageViaMMapTest.testBounds":149,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":177,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":286,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":314,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":271,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":313,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":56,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":78,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":89,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":289,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":190,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":45,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":62,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":221,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":164,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":226,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":268,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":283,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":162,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":347,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":32,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":37,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":39,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":106,"com.graphhopper.storage.GraphHopperStorageCHTest.testBigDataEdge":235,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":187,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":53,"com.graphhopper.GraphHopperAPITest.testLoad":358,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":29,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":59,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":331,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":98,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":338,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":231,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":88,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":43,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":345,"com.graphhopper.reader.OSMReaderTest.testBarriers":367,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":150,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes":254,"com.graphhopper.routing.PathTest.testFound":350,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":34,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":380,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":194,"com.graphhopper.util.GHUtilityTest.testCopy":5,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":129,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":315,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testNoErrorOnEdgeCase_lastIndex":191,"com.graphhopper.routing.PathTest.testFindInstruction":355,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":307,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":1,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":44,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":55,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":135,"com.graphhopper.util.InstructionListTest.testEmptyList":9,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":95,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":318,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":188,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":117,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":102,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":323,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":3,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":71,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":105,"com.graphhopper.storage.GraphHopperStorageCHTest.testFlags":243,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":326,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":266,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":57,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":297,"com.graphhopper.reader.PrinctonReaderTest.testRead":361,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":118,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":245,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":50,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":134,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":63,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":124,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":230,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":85,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":130,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes2":240,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":275,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":302,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":60,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":261,"com.graphhopper.storage.GraphHopperStorageCHTest.testBounds":262,"com.graphhopper.util.InstructionListTest.testWayList2":12,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":204,"com.graphhopper.reader.OSMReaderTest.testFoot":364,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":153,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":148,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":181,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":290,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":178,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":122,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":179,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":272,"com.graphhopper.reader.OSMReaderTest.testOneWay":377,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":48,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":238,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":76,"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":82,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":99,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetLocations":251,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":346,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":114,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":242,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":113,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":72,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":139,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":54,"com.graphhopper.storage.GraphHopperStorageTest.testPropertiesWithNoInit":108,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":301,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":216,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":87,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":94,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":142,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":368,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":353,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":296,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":208,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":330,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":51,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":263,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":293,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":305,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":165,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":294,"com.graphhopper.routing.PathBidirRefTest.testExtract":334,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":0,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":23,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":336,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":18,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":176,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":152,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnsureSize":232,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":22,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":79,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":21,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":210,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":20,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":151,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":19,"com.graphhopper.util.GHUtilityTest.testSort2":4,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":186,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":325,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":138,"com.graphhopper.reader.OSMReaderTest.testMain":365,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":269,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":280,"com.graphhopper.storage.GraphHopperStorageCHTest.testInfinityWeight":270,"com.graphhopper.storage.GraphHopperStorageTest.testBigDataEdge":84,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":61,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":265,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":228,"com.graphhopper.routing.PathBidirRefTest.testExtract2":335,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":264,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":219,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBigDataEdge":40,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":155,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":308,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":202,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":182,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":193,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":337,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":214,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":112,"com.graphhopper.storage.index.Location2IDFullIndexTest.testNoErrorOnEdgeCase_lastIndex":166,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":252,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":255,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":195,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":370,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":161,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":66,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":376,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":167,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":237,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":329,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":299,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":224,"com.graphhopper.storage.GraphHopperStorageTest.testClone":90,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":123,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":174,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":115,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":154,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":273,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":379,"com.graphhopper.storage.GraphHopperStorageCHTest.testCheckFirstNode":260,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":100,"com.graphhopper.GraphHopperTest.testFootAndCar":28,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":107,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":233,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":131,"com.graphhopper.routing.PathTest.testTime":351,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":128,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":244,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNoErrorOnEdgeCase_lastIndex":220,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":298,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":183,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":199,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":144,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":321,"com.graphhopper.util.GHUtilityTest.testSortDirected":7,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":46,"com.graphhopper.storage.GraphHopperStorageCHTest.testPropertiesWithNoInit":259,"com.graphhopper.GraphHopperTest.testPrepareOnly":17,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":249,"com.graphhopper.GraphHopperTest.testVia":25,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":192,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":277,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":126,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":320,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":373,"com.graphhopper.reader.OSMReaderTest.testTurnFlagCombination":372,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":209,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":197,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":229,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":281,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":13,"com.graphhopper.GraphHopperTest.testFootOnly":33,"com.graphhopper.storage.GraphHopperStorageTest.testBounds":111,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":203,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":371,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":217,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":378,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":205,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":141,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":248,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":352,"com.graphhopper.util.InstructionListTest.testFind":8,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":312,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":292,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":35,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":185,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":239},"transformations":[{"failures":[],"tindex":"4abdf44f-8277-11e5-a921-e1f6953ec2e6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:314","type":"CtAssignmentImpl","sourcecode":"int = ((int)((java.lang.Math.log(((int) / 4))) / (java.lang.Math.log(2))))"},"variableMap":{"segmentSizeInBytes":"node","segmentSizeIntsPower":"node"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullIndex:96","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.routing.util.AllEdgesIterator.getAdjNode()"},"status":-2},{"failures":[],"tindex":"4abe1b60-8277-11e5-a921-85032c2bf520","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:140","type":"CtAssignmentImpl","sourcecode":"java.lang.String = \"SE\""},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,275,276,276,277,277,278,278,279,279,280,280,281,281,282,282,283,283,284,284,285,285,286,286,287,287,288,288,289,289,290,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377],"tindex":"4abe1b61-8277-11e5-a921-7db8fbedf3d4","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:175","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.create(100)"},"variableMap":{"properties":"properties"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:181","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.put(\"graph.dimension\", com.graphhopper.storage.BaseGraph.com.graphhopper.storage.NodeAccess.getDimension())"},"status":-1},{"failures":[],"tindex":"4abf05c2-8277-11e5-a921-837cd61d8f04","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:53","type":"CtLocalVariableImpl","sourcecode":"final double double = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.QueryResult:178","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.storage.index.QueryResult.getQueryPoint().double"},"status":-2},{"failures":[],"tindex":"4abf05c3-8277-11e5-a921-a17a5d9b06c4","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GHDirectory:154","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:257","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    com.graphhopper.util.EdgeIterator.setFlags(com.graphhopper.routing.util.FlagEncoder.setAccess(com.graphhopper.util.EdgeIterator.getFlags(), false, false));\n    int++;\n}"},"status":0},{"failures":[0,1,2,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,41,43,44,47,51,53,54,55,57,58,60,61,62,63,65,66,68,69,70,71,74,78,81,85,87,88,91,95,97,98,99,101,102,104,105,106,107,109,110,112,113,114,115,118,122,125,126,129,133,135,136,137,139,140,142,143,144,145,147,148,150,151,152,153,156,160,168,169,173,174,175,177,179,180,181,182,183,185,186,193,194,197,201,202,203,205,207,208,209,210,211,213,214,216,217,218,219,221,222,225,228,230,233,236,238,239,242,246,248,249,250,252,253,255,256,257,258,260,261,263,264,265,266,269,273,276,277,278,279,281,282,283,285,286,287,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,336,337,338,339,340,341,342,343,344,345,348,349,352,353,356,357,358,359,360,361,364,365,366,367,368,369,370,371,373,374,375,377],"tindex":"4abf05c4-8277-11e5-a921-91835f0ffb13","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:201","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt((long + (int)), int)"},"status":-1},{"failures":[],"tindex":"4abf05c5-8277-11e5-a921-a17fdb3cdc63","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:304","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch()"},"status":0},{"failures":[],"tindex":"4abf2cd6-8277-11e5-a921-9b64276fd62f","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.EdgeWrapper:54","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:260","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-2},{"failures":[378,379,363],"tindex":"4abf2cd7-8277-11e5-a921-2f31dc65ae54","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:139","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motorcycle\")"},"variableMap":{"way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:190","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motorcar\")"},"status":-1},{"failures":[18,19,20,21,22,23,25,26,27,28,29,30,32,33,291,293,299,300,301,302,306,307,308,309,310,311,312,313,314,315,316,318,322,323,324,325,326,327,330,331,332,333,334,335,358],"tindex":"4abfa208-8277-11e5-a921-65ada70127e0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.PathBidirRef:85","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.Path.setFromNode(com.graphhopper.storage.EdgeEntry.int)"},"status":-1},{"failures":[],"tindex":"4abfc919-8277-11e5-a921-d90901f6acbe","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:95","type":"CtIfImpl","sourcecode":"if (double < ((-(java.lang.Math.double)) + double))\n    double = double + (2 * (java.lang.Math.double));\nelse\n    double = double;\n"},"variableMap":{"orientation":"minLon","resultOrientation":"dEasternLon","baseOrientation":"lat","java.lang.Math.PI":"minLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:672","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double = com.graphhopper.util.DistanceCalc.calcDist(com.graphhopper.util.shapes.GHPoint.double, com.graphhopper.util.shapes.GHPoint.double, com.graphhopper.util.shapes.GHPoint.double, double);\n} else {\n    double = com.graphhopper.util.DistanceCalc.calcDist(com.graphhopper.util.shapes.GHPoint.double, com.graphhopper.util.shapes.GHPoint.double, com.graphhopper.util.shapes.GHPoint.double, double);\n}"},"status":0},{"failures":[16,17,24,25,26,27,28,29,30,31,32,33,34,363,364,365,366,367,368,369,370,371,373,374,375,376,377],"tindex":"4abfc91a-8277-11e5-a921-11ae7f909698","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistancePlaneProjection:73","type":"CtReturnImpl","sourcecode":"return \"PLANE_PROJ\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:62","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"status":-1},{"failures":[380],"tindex":"4abfc91b-8277-11e5-a921-119bdcd78642","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:224","type":"CtOperatorAssignmentImpl","sourcecode":"int += com.graphhopper.routing.util.EncodedValue.getBits()"},"status":-1},{"failures":[188,190,193],"tindex":"4abfc91c-8277-11e5-a921-b18e751e014f","series":0,"name":"add","transplant":{"position":"com.graphhopper.GHRequest:194","type":"CtIfImpl","sourcecode":"if ((!(java.lang.Double.isNaN(double))) && (((java.lang.Double.compare(double, 360)) > 0) || ((java.lang.Double.compare(double, 0)) < 0)))\n    throw new java.lang.IllegalArgumentException(((\"Heading \" + double) + \" must be in range (0,360) or NaN\"));\n"},"variableMap":{"heading":"queryLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:99","type":"CtForImpl","sourcecode":"for (int int = 0, int int ; int < 2 ; int++) {\n    if (int == 0) {\n        int = com.graphhopper.routing.util.AllEdgesIterator.getBaseNode();\n    } else {\n        int = com.graphhopper.routing.util.AllEdgesIterator.getAdjNode();\n    }\n    double double = com.graphhopper.storage.NodeAccess.getLatitude(int);\n    double double = com.graphhopper.storage.NodeAccess.getLongitude(int);\n    double double = com.graphhopper.util.DistanceCalc.calcDist(double, double, double, double);\n    if (double < 0)\n        continue;\n    \n    if (double < double) {\n        com.graphhopper.storage.index.QueryResult.setQueryDistance(double);\n        com.graphhopper.storage.index.QueryResult.setClosestEdge(com.graphhopper.routing.util.AllEdgesIterator.detach(false));\n        com.graphhopper.storage.index.QueryResult.setClosestNode(int);\n        double = double;\n    } \n    if (int > 0)\n        continue;\n    \n    int int = com.graphhopper.routing.util.AllEdgesIterator.getAdjNode();\n    double double = com.graphhopper.storage.NodeAccess.getLatitude(int);\n    double double = com.graphhopper.storage.NodeAccess.getLongitude(int);\n    if (com.graphhopper.util.DistanceCalc.validEdgeDistance(double, double, double, double, double, double)) {\n        double double = com.graphhopper.util.DistanceCalc.calcDenormalizedDist(com.graphhopper.util.DistanceCalc.calcNormalizedEdgeDistance(double, double, double, double, double, double));\n        if (double < double) {\n            com.graphhopper.storage.index.QueryResult.setQueryDistance(double);\n            com.graphhopper.storage.index.QueryResult.setClosestNode(int);\n            com.graphhopper.storage.index.QueryResult.setClosestEdge(com.graphhopper.routing.util.AllEdgesIterator);\n            if (double > (com.graphhopper.util.DistanceCalc.calcDist(double, double, double, double)))\n                com.graphhopper.storage.index.QueryResult.setClosestNode(int);\n            \n            double = double;\n        } \n    } \n}"},"status":-1},{"failures":[],"tindex":"4abfc91d-8277-11e5-a921-752acb81df3c","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.CompressedArray:143","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.VLongStorage = null"},"variableMap":{"currentWriter":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:29","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.VLongStorage.this(10)"},"status":-2},{"failures":[25,34],"tindex":"4abfc91e-8277-11e5-a921-2185c3f08d48","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:520","type":"CtAssignmentImpl","sourcecode":"java.lang.String = (com.graphhopper.util.Helper.pruneFileEnd(java.lang.String)) + \"-gh\""},"variableMap":{"graphHopperFolder":"osmFile","osmFile":"osmFile"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:512","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String"},"status":-1},{"failures":[],"tindex":"4abfc91f-8277-11e5-a921-d9a6f633ce48","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DouglasPeucker:133","type":"CtLocalVariableImpl","sourcecode":"double double = -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:745","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.storage.index.LocationIndexTree.calcMinDistance(double, double, gnu.trove.set.hash.TIntHashSet)"},"status":-2},{"failures":[18,19,20,21,22,23,27,28,29,32,301,307,309,310,311,312,315,317,323,324,325,327,329,331,333,358],"tindex":"4abff030-8277-11e5-a921-99dc58dd980c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:171","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[],"tindex":"4abff031-8277-11e5-a921-a5147fa9e021","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:176","type":"CtLocalVariableImpl","sourcecode":"int int = 1024 * 8"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDMap:73","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.storage.DataAccess.getInt(long)"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":19,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"4abf05c3-8277-11e5-a921-a17a5d9b06c4","diffs":[{"branches":{"com.graphhopper.reader.OSMReaderTest.testNegativeIds":["com.graphhopper.util.Helper_void_cleanHack().b"],"com.graphhopper.GraphHopperTest.testFootAndCar":["com.graphhopper.util.Helper_void_cleanHack().b"],"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":["com.graphhopper.util.Helper_void_cleanHack().b"]},"type":"branch"}]}]}
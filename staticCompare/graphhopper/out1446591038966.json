{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":217,"com.graphhopper.search.NameIndexTest.testCreate":3,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":49,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":54,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":128,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":212,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":238,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":239,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":43,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":74,"com.graphhopper.reader.OSMReaderTest.testWithBounds":30,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":50,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":175,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":176,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":90,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":157,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":148,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":14,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":86,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":162,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetAccess":182,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":198,"com.graphhopper.GraphHopperTest.testPrepare":17,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":150,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":205,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":100,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":63,"com.graphhopper.search.NameIndexTest.testFlush":2,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":192,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":52,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":141,"com.graphhopper.util.InstructionListTest.testWayList":40,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":39,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":144,"com.graphhopper.GraphHopperAPITest.testDisconnected179":108,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":180,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":224,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":95,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":22,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":125,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":177,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":142,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":169,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":126,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":13,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":185,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":61,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":179,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":94,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":5,"com.graphhopper.GraphHopperTest.testNoNPE_ifLoadNotSuccessful":45,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":228,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":223,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":18,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":71,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":80,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":208,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":79,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":164,"com.graphhopper.GraphHopperTest.testLoadOSM":21,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":132,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":69,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":75,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":193,"com.graphhopper.reader.OSMReaderTest.testSort":28,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":178,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":231,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":31,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":117,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":118,"com.graphhopper.util.PointListTest.testReverse":151,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":35,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":51,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":146,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":4,"com.graphhopper.routing.PathTest.testWayList":10,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":89,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":210,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":122,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":230,"com.graphhopper.coll.OSMIDMapTest.testGet2":58,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":147,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":32,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":48,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":170,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":113,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":203,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":77,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":189,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":123,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":62,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":99,"com.graphhopper.GraphHopperTest.testFailsForMissingParameters":44,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":92,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":12,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":216,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":53,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":129,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":168,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":37,"com.graphhopper.coll.OSMIDMapTest.testGetLong":59,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":167,"com.graphhopper.search.NameIndexTest.testPut":1,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":211,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":73,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":225,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":236,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":23,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":76,"com.graphhopper.GraphHopperAPITest.testLoad":107,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":172,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":174,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":187,"com.graphhopper.reader.OSMReaderTest.testBarriers":109,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":181,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":200,"com.graphhopper.routing.PathTest.testFound":6,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":220,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":25,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":110,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":143,"com.graphhopper.util.GHUtilityTest.testCopy":152,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":215,"com.graphhopper.routing.PathTest.testFindInstruction":11,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":140,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":201,"com.graphhopper.search.NameIndexTest.testNoErrorOnLargeName":46,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":190,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":97,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":196,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":191,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":98,"com.graphhopper.routing.util.CarFlagEncoderTest.testSwapDir":183,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":209,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":145,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":235,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":138,"com.graphhopper.reader.PrinctonReaderTest.testRead":184,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":66,"com.graphhopper.coll.OSMIDMapTest.testUpdateOfLowerKeys":60,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":78,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":47,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":161,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":206,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":233,"com.graphhopper.util.InstructionListTest.testWayList2":41,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":91,"com.graphhopper.reader.OSMReaderTest.testFoot":26,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":221,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":55,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":133,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":219,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":130,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":197,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":131,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":226,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":34,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":93,"com.graphhopper.storage.SynchedDAWrapperTest.testSet_GetBytes":67,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":229,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":65,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":160,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":186,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":218,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":29,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":9,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":158,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":56,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":119,"com.graphhopper.coll.OSMIDMapTest.testGet":57,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":204,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":155,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":163,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":234,"com.graphhopper.routing.PathBidirRefTest.testExtract":153,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":156,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":106,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":101,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":105,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":104,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":121,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":103,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":149,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":102,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":137,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":171,"com.graphhopper.reader.OSMReaderTest.testMain":27,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":88,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":139,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":84,"com.graphhopper.routing.PathBidirRefTest.testExtract2":154,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":87,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":72,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":165,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":222,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":114,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":134,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":173,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":199,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":124,"com.graphhopper.search.NameIndexTest.testTooLongNameNoError":0,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":194,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":232,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":111,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":207,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":85,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":159,"com.graphhopper.storage.StorablePropertiesTest.testStore":81,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":83,"com.graphhopper.storage.RAMDataAccessTest.testSet_GetBytes":82,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":127,"com.graphhopper.storage.GraphHopperStorageTest.testClone":188,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":195,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":237,"com.graphhopper.GraphHopperTest.testFootAndCar":19,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":64,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":36,"com.graphhopper.routing.PathTest.testTime":7,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":214,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":135,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":68,"com.graphhopper.reader.OSMReaderTest.testRelation":96,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":202,"com.graphhopper.GraphHopperTest.testPrepareOnly":15,"com.graphhopper.GraphHopperTest.testVia":16,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":213,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":120,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":112,"com.graphhopper.GraphHopperTest.testFootOnly":24,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":42,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":115,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":240,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":70,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":116,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":8,"com.graphhopper.util.InstructionListTest.testFind":38,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":166,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":33,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":136,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":227},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"tindex":"4da4d8d1-827d-11e5-b538-99916c679146","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.StopWatch:48","type":"CtAssignmentImpl","sourcecode":"long = java.lang.System.nanoTime()"},"variableMap":{"lastTime":"bytePointer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.search.NameIndex:89","type":"CtOperatorAssignmentImpl","sourcecode":"long += byte[].int"},"status":-1},{"failures":[],"tindex":"4da4d8d2-827d-11e5-b538-133ccd3ffbb9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:231","type":"CtAssignmentImpl","sourcecode":"double = (double * (((double * double) + (double * double)) + (1 * double))) / double"},"variableMap":{"fwdFaster":"minLat","incDist2DSum":"maxLat","fwdSlower":"minLat","fullDist2D":"minLat","restDist2D":"maxLat","speed":"maxLat","decDist2DSum":"minLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:183","type":"CtAssignmentImpl","sourcecode":"double = ((com.graphhopper.util.shapes.BBox.double) - (com.graphhopper.util.shapes.BBox.double)) / long"},"status":-2},{"failures":[15,43,16,17,20,21,44,22,24,45],"tindex":"4da4ffe3-827d-11e5-b538-11f3b0d3961a","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:194","type":"CtIfImpl","sourcecode":"if ((int) < 0)\n    throw new java.lang.IllegalStateException((\"too many shortcuts. new shortcut id would be negative. \" + com.graphhopper.storage.CHGraphImpl.(toString())));\n"},"variableMap":{"shortcutCount":"bytes","this":"cg"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:160","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.CHGraphImpl.setSegmentSize(int)"},"status":-1},{"failures":[],"tindex":"4da4ffe4-827d-11e5-b538-3fa72fcd4f99","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:802","type":"CtOperatorAssignmentImpl","sourcecode":"int -= int"},"variableMap":{"edgeId":"child","maxEdgesCount":"child"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:121","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-2},{"failures":[],"tindex":"4da4ffe5-827d-11e5-b538-73e696dd500f","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:111","type":"CtIfImpl","sourcecode":"if ((int) <= 0) {\n    throw new java.lang.IllegalStateException(\"An empty queue does not have a minimum value.\");\n} "},"variableMap":{"size":"nodes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:217","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n    com.graphhopper.coll.GHTreeMapComposed.insert(int, int);\n}"},"status":0},{"failures":[16,25],"tindex":"4da4ffe6-827d-11e5-b538-6d5fa2045990","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:512","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String"},"status":-1},{"failures":[1,2,46,3,4,5,8,9,10,11,12,13,47,48,49,50,51,52,53,54,55,56,15,16,20,21,22,23,24,57,58,59,60,27,29,61,31,62,63,64,65,66,32,67,68,69,70,71,72,73,74,75,33,76,77,78,79,80,34,81,82,83,84,36,85,86,87,88,37,38,39,40,41,42],"tindex":"4da4ffe7-827d-11e5-b538-c7ff3d9f8802","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:275","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, byte[], int, int)"},"status":-1},{"failures":[],"tindex":"4da526f8-827d-11e5-b538-f1e9c1827077","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.TestAlgoCollector:193","type":"CtReturnImpl","sourcecode":"return new com.graphhopper.routing.RoutingAlgorithmFactorySimple().createAlgo(com.graphhopper.storage.Graph, com.graphhopper.routing.AlgorithmOptions)"},"variableMap":{"opts":"opts","qGraph":"g"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.RoutingAlgorithmFactorySimple:43","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.AlgorithmOptions.java.lang.String.equalsIgnoreCase(java.lang.String)) {\n    com.graphhopper.routing.AStarBidirection com.graphhopper.routing.AStarBidirection = new com.graphhopper.routing.AStarBidirection(com.graphhopper.storage.Graph , com.graphhopper.routing.AlgorithmOptions.getFlagEncoder() , com.graphhopper.routing.AlgorithmOptions.getWeighting() , com.graphhopper.routing.AlgorithmOptions.getTraversalMode());\n    com.graphhopper.routing.AStarBidirection.setApproximation(com.graphhopper.routing.RoutingAlgorithmFactorySimple.getApproximation(com.graphhopper.routing.AlgorithmOptions.java.lang.String, com.graphhopper.routing.AlgorithmOptions, com.graphhopper.storage.Graph.getNodeAccess()));\n    return com.graphhopper.routing.AStarBidirection;\n} else if (com.graphhopper.routing.AlgorithmOptions.java.lang.String.equalsIgnoreCase(java.lang.String)) {\n    return new com.graphhopper.routing.DijkstraOneToMany(com.graphhopper.storage.Graph , com.graphhopper.routing.AlgorithmOptions.getFlagEncoder() , com.graphhopper.routing.AlgorithmOptions.getWeighting() , com.graphhopper.routing.AlgorithmOptions.getTraversalMode());\n} else if (com.graphhopper.routing.AlgorithmOptions.java.lang.String.equalsIgnoreCase(java.lang.String)) {\n    com.graphhopper.routing.AStar com.graphhopper.routing.AStar = new com.graphhopper.routing.AStar(com.graphhopper.storage.Graph , com.graphhopper.routing.AlgorithmOptions.getFlagEncoder() , com.graphhopper.routing.AlgorithmOptions.getWeighting() , com.graphhopper.routing.AlgorithmOptions.getTraversalMode());\n    com.graphhopper.routing.AStar.setApproximation(com.graphhopper.routing.RoutingAlgorithmFactorySimple.getApproximation(com.graphhopper.routing.AlgorithmOptions.java.lang.String, com.graphhopper.routing.AlgorithmOptions, com.graphhopper.storage.Graph.getNodeAccess()));\n    return com.graphhopper.routing.AStar;\n} else {\n    throw new java.lang.IllegalArgumentException((((\"Algorithm \" + java.lang.String) + \" not found in \") + (java.lang.Object.getClass().getName())));\n}"},"status":-1},{"failures":[0,1,2,46,3,4,5,6,7,8,9,10,11,12,13,18,26,27,28,29,30,31,62,33,76,35,89,83,84,36,38,39,40,41,42],"tindex":"4da526f9-827d-11e5-b538-07a8f91e1353","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.search.NameIndex:50","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.create(long)"},"status":-1},{"failures":[90,91,92,93,94,95,96],"tindex":"4da526fa-827d-11e5-b538-0df4eab32137","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:63","type":"CtIfImpl","sourcecode":"if ((int) >= (int)) {\n    (int)++;\n    int = 0;\n} "},"variableMap":{"currentBucket":"code","currentIndex":"code","bucketSize":"code"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:305","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMRelation.hasTag(\"route\", \"bicycle\")) {\n    java.lang.Integer java.lang.Integer = java.util.Map<java.lang.String, java.lang.Integer>.get(com.graphhopper.reader.OSMRelation.getTag(\"network\"));\n    if (java.lang.Integer != null)\n        int = java.lang.Integer;\n    \n} else if (com.graphhopper.reader.OSMRelation.hasTag(\"route\", \"ferry\")) {\n    int = com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue();\n} "},"status":-1},{"failures":[97,98,99,100,101,102,103,104,105,106,16,17,18,19,20,21,23,24,107,108,27,28,109,110,111,112,68,113,69,114,115,116,117,118,119,120,121,122,123,124,125,74,126,75,127,128,129,130,131,132,133,134,135,136,137],"tindex":"4da526fb-827d-11e5-b538-51b340d6e9ba","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:108","type":"CtIfImpl","sourcecode":"if ((int) == 0) {\n    throw new java.lang.IllegalStateException(\"collection is already empty!?\");\n} "},"variableMap":{"size":"iteration"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:730","type":"CtForImpl","sourcecode":"for (int int = (-int) + 1 ; int <= (int - 1) ; int++) {\n    double double = double + (int * (double));\n    double double = double - (int * (double));\n    double double = double + (int * (double));\n    com.graphhopper.storage.index.LocationIndexTree.findNetworkEntriesSingleRegion(gnu.trove.set.hash.TIntHashSet, double, double);\n    com.graphhopper.storage.index.LocationIndexTree.findNetworkEntriesSingleRegion(gnu.trove.set.hash.TIntHashSet, double, double);\n}"},"status":-1},{"failures":[4,5,8,9,12,13,138,102,38,39,40,41,42],"tindex":"4da54e0c-827d-11e5-b538-0b8d917be67b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.SRTMProvider:113","type":"CtAssignmentImpl","sourcecode":"int = -int"},"variableMap":{"lat":"to"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Dijkstra:63","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"status":-1},{"failures":[15,43,16,17,20,21,22,24],"tindex":"4da54e0d-827d-11e5-b538-112ed55d117d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:809","type":"CtInvocationImpl","sourcecode":"java.util.Map<com.graphhopper.routing.util.Weighting, com.graphhopper.routing.RoutingAlgorithmFactory>.put(com.graphhopper.routing.util.Weighting, null)"},"status":-1},{"failures":[10,139,140,141,142,143,97,144,98,99,145,100,56,146,147,102,19,61,64,65,66,116,129,78,79,80,148,149,150,86,87,88,151,152],"tindex":"4da54e0e-827d-11e5-b538-f13bdc9513fc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:684","type":"CtAssignmentImpl","sourcecode":"double = int"},"variableMap":{"maxTurnCosts":"swapIndex","costs":"tmp"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:244","type":"CtAssignmentImpl","sourcecode":"double[][int] = double"},"status":-1},{"failures":[],"tindex":"4da54e0f-827d-11e5-b538-152ed7b9b314","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.VirtualEdgeIteratorState:95","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.util.PointList.getSize()) == 1)\n    return com.graphhopper.util.PointList.com.graphhopper.util.PointList;\n"},"variableMap":{"pointList":"pointList","com.graphhopper.util.PointList.EMPTY":"pointList"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.VirtualEdgeIteratorState:88","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.PointList.clone(false)"},"status":-2},{"failures":[153,154,4,5,8,9,12,13,53,155,156,157,158,138,159,160,161,162,163,164,165,142,166,167,168,143,169,170,97,144,99,171,145,100,56,172,146,147,173,174,175,176,177,178,179,180,181,182,183,101,102,103,104,105,106,107,184,185,31,186,187,188,189,190,191,192,193,194,195,196,197,115,124,198,128,137,199,33,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,36,226,227,228,229,230,231,232,233,234,235,236,237,152,38,39,40,41,238,239],"tindex":"4da54e10-827d-11e5-b538-d197f16b38c3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:124","type":"CtIfImpl","sourcecode":"if (long == long)\n    return long;\nelse\n    return ~long;\n"},"variableMap":{"high":"flags","highKey":"flags","key":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:297","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.AbstractFlagEncoder.setAccess(long, boolean, boolean)"},"status":-1},{"failures":[16,19,27,240,30],"tindex":"4da57521-827d-11e5-b538-090d849173be","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DouglasPeucker:55","type":"CtAssignmentImpl","sourcecode":"this.double = com.graphhopper.util.DistanceCalc.calcNormalizedDist(double)"},"variableMap":{"normedMaxDist":"prevLat","dist":"lon","calc":"distCalc"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:773","type":"CtOperatorAssignmentImpl","sourcecode":"double += com.graphhopper.util.DistanceCalc.calcDist(double, double, double, double)"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":17,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":211,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":255,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":312,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":261,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":48,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":85,"com.graphhopper.GraphHopperAPITest.testNoLoad":324,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":197,"com.graphhopper.reader.OSMReaderTest.testFerry":13,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":235,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":236,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":253,"com.graphhopper.storage.RAMIntDataAccessTest.testHeader":363,"com.graphhopper.routing.QueryGraphTest.testOneWay":373,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":148,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":2,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":44,"com.graphhopper.reader.OSMReaderTest.testWithBounds":24,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":330,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":208,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":246,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":257,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testInfinityWeight":335,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":247,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":215,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":122,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":193,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":279,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":174,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":62,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":0,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":37,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":147,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":333,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":41,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":287,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":344,"com.graphhopper.GraphHopperTest.testPrepare":4,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":223,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":105,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":311,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":164,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":180,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":275,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":260,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":294,"com.graphhopper.util.InstructionListTest.testWayList":239,"com.graphhopper.storage.GraphHopperStorageTest.testInfinityWeight":356,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":238,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":303,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":234,"com.graphhopper.GraphHopperAPITest.testDisconnected179":319,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":342,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":251,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":336,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":204,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":9,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBounds":334,"com.graphhopper.storage.RAMIntDataAccessTest.testBoundsCheck":358,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":42,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":248,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":199,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":295,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":300,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":351,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":45,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":273,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":321,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":19,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":250,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":119,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":134,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":265,"com.graphhopper.GraphHopperTest.testNoNPE_ifLoadNotSuccessful":323,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":213,"com.graphhopper.storage.RAMIntDataAccessTest.testSet_Get_Short_Long":357,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":226,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":5,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":170,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":80,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":111,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":117,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":113,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":112,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":290,"com.graphhopper.GraphHopperTest.testLoadOSM":8,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":53,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":288,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":65,"com.graphhopper.storage.RAMIntDataAccessTest.testEnsureCapacity":361,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":46,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":129,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":184,"com.graphhopper.reader.OSMReaderTest.testSort":16,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":354,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":306,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":23,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":249,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":145,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":189,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":162,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":284,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":70,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":71,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":224,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":89,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":259,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":316,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":322,"com.graphhopper.storage.RAMIntDataAccessTest.testRenameNoFlush":362,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":264,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":348,"com.graphhopper.routing.PathTest.testWayList":270,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":116,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":225,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":75,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":207,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":139,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":317,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeReturn":155,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":171,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":28,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":293,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":43,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":192,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":254,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":301,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":64,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPropertiesWithNoInit":109,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":95,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":142,"com.graphhopper.storage.GraphHopperStorageCHTest.testPrios":337,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":352,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":90,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":124,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":97,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":169,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":76,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":349,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":161,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":178,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":308,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":272,"com.graphhopper.util.GHUtilityTest.testSort":231,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":205,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":50,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":372,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":298,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":158,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":297,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":103,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":120,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":167,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":262,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":86,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":82,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":93,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":108,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":38,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":123,"com.graphhopper.storage.RAMIntDataAccessTest.testSegments":365,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":156,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":258,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":36,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":326,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":10,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":327,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":328,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":182,"com.graphhopper.storage.GraphHopperStorageCHTest.testBigDataEdge":341,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":83,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":100,"com.graphhopper.GraphHopperAPITest.testLoad":318,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":7,"com.graphhopper.storage.RAMIntDataAccessTest.testRenameFlush":360,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":315,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":331,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":175,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":245,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":127,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":166,"com.graphhopper.reader.OSMReaderTest.testBarriers":17,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":91,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":252,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadClose":366,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":217,"com.graphhopper.routing.PathTest.testFound":266,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes":343,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":12,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":59,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":201,"com.graphhopper.util.GHUtilityTest.testCopy":230,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":299,"com.graphhopper.routing.PathTest.testFindInstruction":271,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":291,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":92,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":233,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":102,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":206,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":173,"com.graphhopper.util.InstructionListTest.testEmptyList":368,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":302,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":84,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":190,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":179,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":307,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":114,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":181,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":228,"com.graphhopper.storage.GraphHopperStorageCHTest.testFlags":136,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":310,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":154,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":104,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":281,"com.graphhopper.reader.PrinctonReaderTest.testRead":320,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":191,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":138,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":98,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":332,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":196,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":126,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes2":133,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":163,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":202,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":286,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":370,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":106,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":150,"com.graphhopper.storage.GraphHopperStorageCHTest.testBounds":346,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadFlush":367,"com.graphhopper.util.InstructionListTest.testWayList2":240,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":68,"com.graphhopper.reader.OSMReaderTest.testFoot":14,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":220,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":54,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":216,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":263,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":51,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":194,"com.graphhopper.coll.IntIntBinHeapTest.test0":376,"com.graphhopper.reader.OSMReaderTest.testOneWay":26,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":52,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":159,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":96,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":131,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":118,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetLocations":143,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":176,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":369,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":135,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":187,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":186,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":115,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":210,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":101,"com.graphhopper.storage.GraphHopperStorageTest.testPropertiesWithNoInit":183,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":285,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":78,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":165,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":172,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":212,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":18,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":269,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":280,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":72,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":314,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":99,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":151,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":277,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":289,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":39,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":278,"com.graphhopper.routing.PathBidirRefTest.testExtract":374,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":35,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":242,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":243,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":30,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":49,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":219,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnsureSize":340,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":34,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":121,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":33,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":74,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":32,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":218,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":31,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":58,"com.graphhopper.util.GHUtilityTest.testSort2":229,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":309,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":209,"com.graphhopper.reader.OSMReaderTest.testMain":15,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":157,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":371,"com.graphhopper.storage.GraphHopperStorageCHTest.testInfinityWeight":347,"com.graphhopper.storage.GraphHopperStorageTest.testBigDataEdge":350,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":107,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":153,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":125,"com.graphhopper.routing.PathBidirRefTest.testExtract2":274,"com.graphhopper.storage.RAMIntDataAccessTest.testTrimTo":364,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":152,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":81,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":222,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":292,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBigDataEdge":329,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":66,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":55,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":88,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":244,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":77,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":185,"com.graphhopper.coll.IntIntBinHeapTest.testRekey":375,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":144,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":146,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":20,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":60,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":227,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":110,"com.graphhopper.storage.RAMIntDataAccessTest.testCopy":359,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":25,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":40,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":130,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":313,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":283,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":338,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":47,"com.graphhopper.storage.GraphHopperStorageTest.testClone":168,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":195,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":160,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":188,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":221,"com.graphhopper.storage.GraphHopperStorageCHTest.testCheckFirstNode":345,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":177,"com.graphhopper.GraphHopperTest.testFootAndCar":6,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":353,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":128,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":203,"com.graphhopper.routing.PathTest.testTime":267,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":200,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":137,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":282,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":56,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":63,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":214,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":305,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":94,"com.graphhopper.storage.GraphHopperStorageCHTest.testPropertiesWithNoInit":149,"com.graphhopper.util.GHUtilityTest.testSortDirected":232,"com.graphhopper.GraphHopperTest.testPrepareOnly":1,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":141,"com.graphhopper.GraphHopperTest.testVia":3,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":87,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":29,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":198,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":304,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":22,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":73,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":61,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":256,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":339,"com.graphhopper.GraphHopperTest.testFootOnly":11,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":241,"com.graphhopper.storage.GraphHopperStorageTest.testBounds":355,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":67,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":21,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":79,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":325,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":69,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":140,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":268,"com.graphhopper.util.InstructionListTest.testFind":237,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":296,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":276,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":27,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":57,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":132},"transformations":[{"failures":[],"tindex":"71eab90b-8279-11e5-a37b-d5fdb752a80b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:358","type":"CtAssertImpl","sourcecode":"assert int <= (int) : ((\"the length has to be smaller or equal to the segment size: \" + int) + \" vs. \") + (int)"},"variableMap":{"segmentSizeInBytes":"E_NODEA","length":"E_NODEA"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:656","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.EdgeAccess.init(com.graphhopper.storage.EdgeAccess.int, com.graphhopper.storage.EdgeAccess.int, com.graphhopper.storage.EdgeAccess.int, com.graphhopper.storage.EdgeAccess.int, com.graphhopper.storage.EdgeAccess.int, com.graphhopper.storage.EdgeAccess.int, false)"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"tindex":"71eb072c-8279-11e5-a37b-a9227035d3d5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:729","type":"CtIfImpl","sourcecode":"if (int >= 0) {\n    java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long));\n    com.graphhopper.util.PointList.clear();\n    com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n} "},"status":-1},{"failures":[],"tindex":"71eb072d-8279-11e5-a37b-337a9e927c61","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:478","type":"CtAssignmentImpl","sourcecode":"int = (int + int) >>> 1"},"variableMap":{"high":"sLon","guess":"x1","low":"x1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:136","type":"CtOperatorAssignmentImpl","sourcecode":"int += int"},"status":-2},{"failures":[],"tindex":"71eb072e-8279-11e5-a37b-736ee4700e32","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:126","type":"CtIfImpl","sourcecode":"if ((int) < 0) {\n    throw new java.lang.IllegalStateException(\"collection is already empty!?\");\n} "},"variableMap":{"size":"length"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:196","type":"CtTryImpl","sourcecode":"try {\n    java.io.RandomAccessFile java.io.RandomAccessFile = new java.io.RandomAccessFile(com.graphhopper.storage.AbstractDataAccess.getFullName() , \"rw\");\n    try {\n        long long = com.graphhopper.storage.RAMIntDataAccess.getCapacity();\n        com.graphhopper.storage.AbstractDataAccess.writeHeader(java.io.RandomAccessFile, long, int);\n        java.io.RandomAccessFile.seek(com.graphhopper.storage.AbstractDataAccess.int);\n        for (int int = 0 ; int < (int[][].int) ; int++) {\n            int[] int[] = int[][][int];\n            int int = int[].int;\n            byte[] byte[] = new byte[int * 4];\n            for (int int = 0 ; int < int ; int++) {\n                com.graphhopper.util.BitUtil.fromInt(byte[], int[][int], (int * 4));\n            }\n            java.io.RandomAccessFile.write(byte[]);\n        }\n    } finally {\n        java.io.RandomAccessFile.close();\n    }\n} catch (java.lang.Exception ex) {\n    throw new java.lang.RuntimeException((\"Couldn\\'t store integers to \" + com.graphhopper.storage.AbstractDataAccess.(toString())) , java.lang.Exception);\n}"},"status":-2},{"failures":[],"tindex":"71eb2e3f-8279-11e5-a37b-dd441ed3947d","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:139","type":"CtIfImpl","sourcecode":"if (int < int) {\n    int += int;\n    int += int;\n} "},"variableMap":{"err":"workerThreads","tmpErr":"com.graphhopper.reader.OSMElement.WAY","y1":"com.graphhopper.reader.OSMElement.WAY","dLon":"com.graphhopper.reader.OSMElement.RELATION","sLat":"com.graphhopper.reader.OSMElement.RELATION"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:168","type":"CtTryImpl","sourcecode":"try {\n    com.graphhopper.reader.OSMInputFile = new com.graphhopper.reader.OSMInputFile(java.io.File).setWorkerThreads(int).open();\n    long long = 1;\n    long long = 1;\n    com.graphhopper.reader.OSMElement com.graphhopper.reader.OSMElement;\n    while ((com.graphhopper.reader.OSMElement = com.graphhopper.reader.OSMInputFile.getNext()) != null) {\n        if (com.graphhopper.reader.OSMElement.isType(com.graphhopper.reader.OSMElement.int)) {\n            final com.graphhopper.reader.OSMWay com.graphhopper.reader.OSMWay = ((com.graphhopper.reader.OSMWay)(com.graphhopper.reader.OSMElement));\n            boolean boolean = com.graphhopper.reader.OSMReader.filterWay(com.graphhopper.reader.OSMWay);\n            if (boolean) {\n                gnu.trove.list.TLongList gnu.trove.list.TLongList = com.graphhopper.reader.OSMWay.getNodes();\n                int int = gnu.trove.list.TLongList.size();\n                for (int int = 0 ; int < int ; int++) {\n                    com.graphhopper.reader.OSMReader.prepareHighwayNode(gnu.trove.list.TLongList.get(int));\n                }\n                if (((++long) % 5000000) == 0) {\n                    com.graphhopper.reader.OSMReader.org.slf4j.Logger.info(((((((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \" (preprocess), osmIdMap:\") + com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(com.graphhopper.reader.OSMReader.getNodeMap().getSize()))) + \" (\") + (com.graphhopper.reader.OSMReader.getNodeMap().getMemoryUsage())) + \"MB) \") + (com.graphhopper.util.Helper.getMemInfo())));\n                } \n            } \n        } \n        if (com.graphhopper.reader.OSMElement.isType(com.graphhopper.reader.OSMElement.int)) {\n            final com.graphhopper.reader.OSMRelation com.graphhopper.reader.OSMRelation = ((com.graphhopper.reader.OSMRelation)(com.graphhopper.reader.OSMElement));\n            if ((!(com.graphhopper.reader.OSMRelation.isMetaRelation())) && (com.graphhopper.reader.OSMRelation.hasTag(\"type\", \"route\")))\n                com.graphhopper.reader.OSMReader.prepareWaysWithRelationInfo(com.graphhopper.reader.OSMRelation);\n            \n            if (com.graphhopper.reader.OSMRelation.hasTag(\"type\", \"restriction\"))\n                com.graphhopper.reader.OSMReader.prepareRestrictionRelation(com.graphhopper.reader.OSMRelation);\n            \n            if (((++long) % 50000) == 0) {\n                com.graphhopper.reader.OSMReader.org.slf4j.Logger.info(((((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \" (preprocess), osmWayMap:\") + com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(com.graphhopper.reader.OSMReader.getRelFlagsMap().size()))) + \" \") + (com.graphhopper.util.Helper.getMemInfo())));\n            } \n        } \n    }\n} catch (java.lang.Exception ex) {\n    throw new java.lang.RuntimeException(\"Problem while parsing file\" , java.lang.Exception);\n} finally {\n    com.graphhopper.util.Helper.close(com.graphhopper.reader.OSMInputFile);\n}"},"status":-2},{"failures":[],"tindex":"71eb5550-8279-11e5-a37b-9df843349013","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:124","type":"CtIfImpl","sourcecode":"if (long == long)\n    return long;\nelse\n    return ~long;\n"},"variableMap":{"high":"toOsmWayId","highKey":"toOsmWayId","key":"toOsmWayId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMTurnRelation:68","type":"CtReturnImpl","sourcecode":"return long"},"status":0},{"failures":[27,28,29,20],"tindex":"71eb5551-8279-11e5-a37b-47722b2219d9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:1056","type":"CtIfImpl","sourcecode":"if (((int) == (int)) || ((int) == (com.graphhopper.util.EdgeIterator.int)))\n    throw new java.lang.IllegalStateException(((((\"call next before detaching or setEdgeId (edgeId:\" + (int)) + \" vs. next \") + (int)) + \")\"));\n"},"variableMap":{"com.graphhopper.util.EdgeIterator.NO_EDGE":"newEntryIndex","edgeId":"newEntryIndex","nextEdgeId":"newEntryIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.TurnCostExtension:131","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.TurnCostExtension.ensureTurnCostIndex(int)"},"status":-1},{"failures":[0,1,30,31,32,33,34,35,3,4,5,6,7,8,9,10,11,12,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,27,28,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,29,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,13,14,15,16,17,18,19,20,21,22,24,25,26,320,321,322],"tindex":"71eb7c62-8279-11e5-a37b-f73b22ac744e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:37","type":"CtAssignmentImpl","sourcecode":"int = 10"},"variableMap":{"capacity":"edgeCount"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:522","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-1},{"failures":[20,23,24],"tindex":"71eb7c63-8279-11e5-a37b-1fd8b666c4e8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:77","type":"CtIfImpl","sourcecode":"if (long == (int)) {\n    throw new java.lang.IllegalArgumentException((\"Illegal key \" + long));\n} "},"variableMap":{"noNumberValue":"com.graphhopper.reader.OSMReader.PILLAR_NODE","key":"osmId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:685","type":"CtIfImpl","sourcecode":"if (int == (com.graphhopper.reader.OSMReader.int)) {\n    if ((!(com.graphhopper.util.PointList.isEmpty())) && (int > (-(com.graphhopper.reader.OSMReader.int)))) {\n        int = int;\n        int = com.graphhopper.reader.OSMReader.handlePillarNode(int, long, null, true);\n        int = (-int) - 3;\n        if (((com.graphhopper.util.PointList.getSize()) > 1) && (int >= 0)) {\n            java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long));\n            com.graphhopper.util.PointList.clear();\n            com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n        } \n        int = int;\n        int = -1;\n    } \n    continue;\n} "},"status":-1},{"failures":[239],"tindex":"71eba374-8279-11e5-a37b-ef78f89b7a93","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:149","type":"CtOperatorAssignmentImpl","sourcecode":"double /= 4"},"variableMap":{"tmp":"nextLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:189","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-1},{"failures":[3,4,5,6,7,8,10,11,239,264,265,268,269,272,273,301,302,312,318],"tindex":"71eba375-8279-11e5-a37b-0d6313fa350b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionAnnotation:43","type":"CtAssignmentImpl","sourcecode":"this.boolean = false"},"variableMap":{"empty":"found"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:123","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"status":-1},{"failures":[30,31,32,33,34,35,3,4,5,6,7,8,10,11,323,318,319,324],"tindex":"71eba376-8279-11e5-a37b-114bd948122e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.AbstractRoutingAlgorithm:87","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException(\"Create a new instance per call\");\n"},"variableMap":{"alreadyRun":"fullyLoaded"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:945","type":"CtIfImpl","sourcecode":"if (((com.graphhopper.storage.GraphHopperStorage) == null) || (!(boolean)))\n    throw new java.lang.IllegalStateException(\"Call load or importOrLoad before routing\");\n"},"status":-1},{"failures":[],"tindex":"71ebca87-8279-11e5-a37b-616d8333817e","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistanceCalc2D:58","type":"CtReturnImpl","sourcecode":"return (double * double) + (double * double)"},"variableMap":{"dX":"deltaLon","dY":"deltaLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:694","type":"CtReturnImpl","sourcecode":"return double"},"status":-2},{"failures":[30,31,32,33,34,35,3,4,5,6,7,8,10,11,275,277,283,284,285,286,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319],"tindex":"71ebca88-8279-11e5-a37b-95b848cfb93a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:66","type":"CtAssignmentImpl","sourcecode":"gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry> = new gnu.trove.map.hash.TIntObjectHashMap<com.graphhopper.storage.EdgeEntry>((int / 10))"},"status":-1},{"failures":[325,13],"tindex":"71ebca89-8279-11e5-a37b-575caa95d34c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:529","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Number java.lang.Number = com.graphhopper.reader.OSMWay.getTag(\"estimated_distance\", null);\n    if (java.lang.Number != null) {\n        double double = (java.lang.Number.doubleValue()) / 1000;\n        double = java.lang.Math.round(((double / double) / 1.4));\n        if (double > com.graphhopper.routing.util.AbstractFlagEncoder.(getMaxSpeed()))\n            double = com.graphhopper.routing.util.AbstractFlagEncoder.getMaxSpeed();\n        \n        double = double;\n    } \n} catch (java.lang.Exception ex) {\n}"},"status":-1},{"failures":[],"tindex":"71ebf19a-8279-11e5-a37b-d142de260028","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:119","type":"CtOperatorAssignmentImpl","sourcecode":"double += 2 * (java.lang.Math.double)"},"variableMap":{"orientation":"nextEle","java.lang.Math.PI":"ele"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:190","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":0},{"failures":[326],"tindex":"71ebf19b-8279-11e5-a37b-71211881b9d9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GHRequest:194","type":"CtIfImpl","sourcecode":"if ((!(java.lang.Double.isNaN(double))) && (((java.lang.Double.compare(double, 360)) > 0) || ((java.lang.Double.compare(double, 0)) < 0)))\n    throw new java.lang.IllegalArgumentException(((\"Heading \" + double) + \" must be in range (0,360) or NaN\"));\n"},"variableMap":{"heading":"fullDist2D"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:184","type":"CtIfImpl","sourcecode":"if (double > 0.1) {\n    double = double;\n    double = double;\n} else if (double < (-0.1)) {\n    double = -double;\n    double = double;\n} "},"status":-1},{"failures":[0,1,30,31,32,33,34,35,2,3,4,5,6,7,8,9,10,11,12,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,27,327,328,329,89,90,91,92,93,94,95,96,97,98,99,330,100,101,102,103,104,105,331,106,107,108,332,109,333,110,334,111,112,113,114,115,116,117,335,118,119,120,121,336,337,338,122,123,124,125,339,126,127,340,128,341,129,130,131,132,133,134,135,136,137,138,139,342,140,141,142,143,144,145,343,146,147,148,344,149,345,150,346,151,152,153,154,155,156,157,347,158,159,160,161,348,162,349,350,163,164,165,166,167,168,169,170,171,172,173,351,174,175,176,177,178,179,352,180,181,182,353,183,354,184,355,185,186,187,188,189,190,191,356,192,193,194,195,357,358,359,360,361,362,363,364,365,366,367,206,217,228,229,230,231,232,233,234,235,236,237,368,238,239,240,241,242,243,369,326,244,245,246,247,248,249,250,251,252,370,253,29,254,255,371,256,257,258,259,260,372,373,261,262,263,264,265,266,267,268,269,270,271,272,273,374,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,13,14,15,16,17,18,19,20,21,22,23,24,25,26,320,321,322],"tindex":"71ebf19c-8279-11e5-a37b-9d04de24b435","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:294","type":"CtAssignmentImpl","sourcecode":"int[][] = new int[0][]"},"variableMap":{"segments":"segments"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:119","type":"CtAssignmentImpl","sourcecode":"int[][] = int[][]"},"status":-1},{"failures":[375,376],"tindex":"71ec18ad-8279-11e5-a37b-83e9c76f14c1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntIntBinHeap:187","type":"CtAssignmentImpl","sourcecode":"int[][int] = int"},"status":-1},{"failures":[],"tindex":"71ec18ae-8279-11e5-a37b-adcde69dea3f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:168","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(90.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"variableMap":{"weightToPrioMap":"weightToPrioMap","com.graphhopper.routing.util.PriorityCode.PREFER":"com.graphhopper.routing.util.PriorityCode.AVOID_AT_ALL_COSTS"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.RacingBikeFlagEncoder:159","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(110.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
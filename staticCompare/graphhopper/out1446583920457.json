{"failureDictionary":{"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":67,"com.graphhopper.reader.OSMReaderTest.testFerry":118,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":18,"com.graphhopper.storage.RAMIntDataAccessTest.testHeader":86,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":38,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":12,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":13,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":63,"com.graphhopper.storage.VLongStorageTest.testWrite":116,"com.graphhopper.reader.OSMReaderTest.testWithBounds":29,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":107,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":8,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":9,"com.graphhopper.coll.CompressedArrayTest.testCompress":115,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":31,"com.graphhopper.GraphHopperTest.testPrepare":40,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":15,"com.graphhopper.util.InstructionListTest.testWayList2":111,"com.graphhopper.reader.OSMReaderTest.testFoot":20,"com.graphhopper.search.NameIndexTest.testFlush":81,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":71,"com.graphhopper.util.InstructionListTest.testWayList":110,"com.graphhopper.reader.OSMReaderTest.testOneWay":30,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":69,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":109,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":19,"com.graphhopper.GraphHopperAPITest.testDisconnected179":17,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":2,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":99,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":62,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":76,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":64,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":24,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":105,"com.graphhopper.storage.SynchedDAWrapperTest.testCopy":94,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":103,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":11,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":25,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":106,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":56,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":101,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":41,"com.graphhopper.storage.UnsafeDataAccessTest.testCopy":92,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":78,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":37,"com.graphhopper.storage.RAMDataAccessTest.testCopy":89,"com.graphhopper.GraphHopperTest.testLoadOSM":1,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":32,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":70,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":51,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":65,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":36,"com.graphhopper.storage.VLongStorageTest.testWriteWithTrim":117,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":35,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":58,"com.graphhopper.reader.OSMReaderTest.testSort":22,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":34,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":33,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":10,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":28,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":75,"com.graphhopper.reader.OSMReaderTest.testMain":21,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":6,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":55,"com.graphhopper.storage.RAMDataAccessTest.testHeader":90,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":84,"com.graphhopper.storage.MMapDataAccessTest.testHeader":88,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":100,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":79,"com.graphhopper.storage.MMapDataAccessTest.testCopy":87,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":59,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":52,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":7,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":72,"com.graphhopper.storage.UnsafeDataAccessTest.testHeader":93,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":61,"com.graphhopper.storage.SynchedDAWrapperTest.testHeader":95,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":26,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":47,"com.graphhopper.storage.RAMIntDataAccessTest.testCopy":85,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":97,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":50,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":120,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":83,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":60,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":66,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":91,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":14,"com.graphhopper.GraphHopperTest.testFootAndCar":42,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":5,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":104,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":68,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":80,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":73,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":49,"com.graphhopper.GraphHopperTest.testPrepareOnly":0,"com.graphhopper.coll.CompressedArrayTest.testCompress2":114,"com.graphhopper.GraphHopperTest.testVia":39,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":3,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":82,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":119,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":98,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":57,"com.graphhopper.GraphHopperAPITest.testLoad":16,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":43,"com.graphhopper.util.BitUtilBigTest.testToShort":113,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":48,"com.graphhopper.GraphHopperTest.testFootOnly":44,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":112,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":53,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":27,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":77,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":54,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":102,"com.graphhopper.reader.OSMReaderTest.testBarriers":23,"com.graphhopper.util.InstructionListTest.testFind":108,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":45,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":96,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":46,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":4,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":74},"transformations":[{"failures":[0,1,2,3,4,5,6],"tindex":"baaeba75-826c-11e5-9b63-f37bb65cca60","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:177","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.shapes.BBox.double = com.graphhopper.util.Helper.intToDegree(com.graphhopper.storage.DataAccess.getHeader((3 * 4)))"},"status":-1},{"failures":[],"tindex":"baaeba76-826c-11e5-9b63-73e0b9e4122c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:192","type":"CtIfImpl","sourcecode":"if (!(boolean)) {\n    return ;\n} "},"variableMap":{"store":"store"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:185","type":"CtIfImpl","sourcecode":"if (!(boolean))\n    return ;\n"},"status":0},{"failures":[],"tindex":"baaeba77-826c-11e5-9b63-8bc43fb43001","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:121","type":"CtIfImpl","sourcecode":"if (long == long) {\n    int = (int * (int)) + int;\n    break;\n} else if (long > long) {\n    break;\n} "},"variableMap":{"ret":"com.graphhopper.util.EdgeIterator.NO_EDGE","retBucket":"com.graphhopper.util.EdgeIterator.NO_EDGE","i":"maxLevel","storedKey":"tmpDegreeCounter","bucketSize":"maxLevel","key":"tmpDegreeCounter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:582","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n    if ((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int))\n        continue;\n    \n    double double = com.graphhopper.util.EdgeIterator.getDistance();\n    double double = com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.EdgeIterator, true, com.graphhopper.util.EdgeIterator.int);\n    int int = com.graphhopper.util.EdgeIterator.getEdge();\n    int int = com.graphhopper.routing.ch.PrepareContractionHierarchies.getOrigEdgeCount(int);\n    com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.CHEdgeExplorer.setBaseNode(com.graphhopper.routing.ch.PrepareContractionHierarchies.ShortcutHandler.getNode());\n    com.graphhopper.routing.DijkstraOneToMany.clear();\n    long++;\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n        if (((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int)) || (int == int))\n            continue;\n        \n        double double = double + (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.EdgeIterator, false, com.graphhopper.util.EdgeIterator.getEdge()));\n        if (java.lang.Double.isNaN(double))\n            throw new java.lang.IllegalStateException(((((((\"Weighting should never return NaN values\" + \", in:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", out:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", dist:\") + (com.graphhopper.util.EdgeIterator.getDistance())));\n        \n        if (java.lang.Double.isInfinite(double))\n            continue;\n        \n        double double = double + (com.graphhopper.util.EdgeIterator.getDistance());\n        com.graphhopper.routing.DijkstraOneToMany.setWeightLimit(double);\n        com.graphhopper.routing.DijkstraOneToMany.setLimitVisitedNodes((((int)(double)) * 100)).setEdgeFilter(com.graphhopper.routing.ch.PrepareContractionHierarchies.IgnoreNodeFilter.setAvoidNode(com.graphhopper.routing.ch.PrepareContractionHierarchies.ShortcutHandler.getNode()));\n        com.graphhopper.util.StopWatch.start();\n        (long)++;\n        int int = com.graphhopper.routing.DijkstraOneToMany.findEndNode(int, int);\n        com.graphhopper.util.StopWatch.stop();\n        if ((int == int) && ((com.graphhopper.routing.DijkstraOneToMany.getWeight(int)) <= double))\n            continue;\n        \n        com.graphhopper.routing.ch.PrepareContractionHierarchies.ShortcutHandler.foundShortcut(int, int, double, double, com.graphhopper.util.EdgeIterator, int, int);\n    }\n}"},"status":-2},{"failures":[],"tindex":"baaee188-826c-11e5-9b63-0d582faaba8d","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.EdgeWrapper:54","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:134","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-2},{"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,0,32,33,34,35,36,37,38,39,40,41,42,43,1,2,3,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"tindex":"baaee189-826c-11e5-9b63-c199791b07cc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.SimpleIntDeque:36","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.SimpleIntDeque.this(100, 2)"},"status":-1},{"failures":[41],"tindex":"baaee18a-826c-11e5-9b63-71f2b5df3ffb","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:357","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.edge(int, int)"},"variableMap":{"a":"newBaseIndex","b":"newAdjIndex","this":"toSortedGraph"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:257","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.AllEdgesIterator.copyPropertiesTo(com.graphhopper.storage.Graph.edge(int, int))"},"status":-1},{"failures":[81,0,1,2,3,4,82,83,84,5,85,86,87,88,89,90,6,91,92,93,94,95],"tindex":"baaf089b-826c-11e5-9b63-b769d9a59231","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.CompressedArray:72","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"variableMap":{"compressionLevel":"bytePos"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:86","type":"CtAssignmentImpl","sourcecode":"int[][int] = int"},"status":-1},{"failures":[96,97,98,99],"tindex":"baaf089c-826c-11e5-9b63-e94677a6eead","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:262","type":"CtIfImpl","sourcecode":"if (int > (int))\n    throw new java.lang.IllegalArgumentException(\"new size needs be smaller than old size\");\n"},"variableMap":{"size":"speed","newSize":"com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:407","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"highway\", \"steps\"))\n    int = (com.graphhopper.routing.util.BikeCommonFlagEncoder.int) / 2;\nelse\n    int = com.graphhopper.routing.util.BikeCommonFlagEncoder.int;\n"},"status":-1},{"failures":[],"tindex":"baaf089d-826c-11e5-9b63-a98c6dc21671","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:675","type":"CtOperatorAssignmentImpl","sourcecode":"long |= long"},"variableMap":{"encoded":"fullTimeInMillis","backwardBit":"fullTimeInMillis"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:52","type":"CtOperatorAssignmentImpl","sourcecode":"long += com.graphhopper.routing.Path.getTime()"},"status":0},{"failures":[],"tindex":"baaf089e-826c-11e5-9b63-253c22f08e7d","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:45","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.AngleCalc.double"},"variableMap":{"angle":"angleXY","com.graphhopper.util.AngleCalc.PI3_4":"java.lang.Math.PI"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:80","type":"CtOperatorAssignmentImpl","sourcecode":"double += 2 * (java.lang.Math.double)"},"status":-2},{"failures":[],"tindex":"baaf089f-826c-11e5-9b63-7bb1ba499ea8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:803","type":"CtIfImpl","sourcecode":"if (int < 0)\n    return 1;\n"},"variableMap":{"edgeId":"shift"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:152","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"baaf2fb0-826c-11e5-9b63-d3df2da8d2b8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.EdgeWrapper:83","type":"CtIfImpl","sourcecode":"if (int < 1)\n    throw new java.lang.IllegalStateException(\"You cannot save a reference with values smaller 1. 0 is reserved\");\n"},"variableMap":{"ref":"length"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:69","type":"CtIfImpl","sourcecode":"if ((int) >= (com.graphhopper.storage.VLongStorage[].int)) {\n    int int = ((int)((int) * 1.5F));\n    com.graphhopper.storage.VLongStorage[] = java.util.Arrays.copyOf(com.graphhopper.storage.VLongStorage[], int);\n    long[] = java.util.Arrays.copyOf(long[], int);\n} "},"status":-2},{"failures":[100,101,102,103,104,105,106,107,108,109,110,111,112,33],"tindex":"baaf2fb1-826c-11e5-9b63-b9bda4fab00a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:248","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry"},"variableMap":{"parent":"nEdge","entryCurrent":"nEdge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Dijkstra:97","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry = new com.graphhopper.storage.EdgeEntry(com.graphhopper.util.EdgeIterator.getEdge() , com.graphhopper.util.EdgeIterator.getAdjNode() , double)"},"status":-1},{"failures":[],"tindex":"baaf2fb2-826c-11e5-9b63-9b324ede4dcc","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper:482","type":"CtReturnImpl","sourcecode":"return (java.lang.Math.round((double * double))) / double"},"variableMap":{"factor":"r_lon_deg","value":"r_lon_deg"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:167","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.DistanceCalcEarth.calcNormalizedDist(double, (double / double), double, double)"},"status":-2},{"failures":[],"tindex":"baaf2fb3-826c-11e5-9b63-e9e32669a97b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:128","type":"CtLocalVariableImpl","sourcecode":"double double = 360.0 / 16"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:182","type":"CtLocalVariableImpl","sourcecode":"double double = double"},"status":-2},{"failures":[113],"tindex":"baaf2fb4-826c-11e5-9b63-8522e16c7e1c","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtilLittle:47","type":"CtAssignmentImpl","sourcecode":"byte[][(int + 1)] = ((byte)(short >>> 8))"},"variableMap":{"offset":"offset","bytes":"bytes","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilBig:48","type":"CtAssignmentImpl","sourcecode":"byte[][(int + 1)] = ((byte)(short))"},"status":-1},{"failures":[114,115,116,117],"tindex":"baaf2fb5-826c-11e5-9b63-2bfa45d2ab5e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtilBig:101","type":"CtOperatorAssignmentImpl","sourcecode":"byte <<= 1"},"variableMap":{"res":"b"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:120","type":"CtAssignmentImpl","sourcecode":"byte = com.graphhopper.storage.VLongStorage.readByte()"},"status":-1},{"failures":[118,20,21,22,23,24,25,26,27,119,28,29,120,30,31,0,38,39,40,41,42,43,1,2,3,44,45],"tindex":"baaf56c6-826c-11e5-9b63-c721882a4745","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:177","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMElement.isType(com.graphhopper.reader.OSMElement.int)) {\n    final com.graphhopper.reader.OSMWay com.graphhopper.reader.OSMWay = ((com.graphhopper.reader.OSMWay)(com.graphhopper.reader.OSMElement));\n    boolean boolean = com.graphhopper.reader.OSMReader.filterWay(com.graphhopper.reader.OSMWay);\n    if (boolean) {\n        gnu.trove.list.TLongList gnu.trove.list.TLongList = com.graphhopper.reader.OSMWay.getNodes();\n        int int = gnu.trove.list.TLongList.size();\n        for (int int = 0 ; int < int ; int++) {\n            com.graphhopper.reader.OSMReader.prepareHighwayNode(gnu.trove.list.TLongList.get(int));\n        }\n        if (((++long) % 5000000) == 0) {\n            com.graphhopper.reader.OSMReader.org.slf4j.Logger.info(((((((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \" (preprocess), osmIdMap:\") + com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(com.graphhopper.reader.OSMReader.getNodeMap().getSize()))) + \" (\") + (com.graphhopper.reader.OSMReader.getNodeMap().getMemoryUsage())) + \"MB) \") + (com.graphhopper.util.Helper.getMemInfo())));\n        } \n    } \n} "},"status":-1},{"failures":[],"tindex":"baaf56c7-826c-11e5-9b63-d5a29d51d32e","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:121","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"EncodingManager does no longer use reflection instantiate encoders directly.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:264","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((((((\"Encoding does not match:\\nGraphhopper config: \" + (com.graphhopper.routing.util.EncodingManager.toDetailsString())) + \"\\nGraph: \") + java.lang.String) + \", dir:\") + (com.graphhopper.storage.Directory.getLocation())))"},"status":-2},{"failures":[],"tindex":"baaf56c8-826c-11e5-9b63-ab7398313573","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:481","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Math.pow(10, int)"},"variableMap":{"exponent":"oldNodeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:201","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.storage.NodeAccess.getLatitude(int)"},"status":0}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"baaeba76-826c-11e5-9b63-73e0b9e4122c","diffs":[{"branchesDiff":{"delete":["t0"]},"type":"staticDiff"}]},{"transformation":"baaf089d-826c-11e5-9b63-a98c6dc21671","diffs":[{"methodsDiff":{"delete":["com.graphhopper.routing.Path.getTime"]},"type":"staticDiff"}]},{"transformation":"baaf56c8-826c-11e5-9b63-ab7398313573","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.PointAccess.getLatitude"]},"type":"staticDiff"}]}]}
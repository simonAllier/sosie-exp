{"failureDictionary":{"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":53,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":61,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":80,"com.graphhopper.routing.PathTest.testFindInstruction":72,"com.graphhopper.routing.QueryGraphTest.testOneWay":60,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":65,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":67,"com.graphhopper.reader.OSMReaderTest.testWithBounds":95,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":22,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":56,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":87,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":47,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":18,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":23,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":51,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":49,"com.graphhopper.GraphHopperTest.testPrepare":10,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":24,"com.graphhopper.util.InstructionListTest.testWayList2":2,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":69,"com.graphhopper.reader.OSMReaderTest.testFoot":91,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":58,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":30,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":62,"com.graphhopper.util.InstructionListTest.testWayList":1,"com.graphhopper.reader.OSMReaderTest.testOneWay":96,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":66,"com.graphhopper.GraphHopperAPITest.testDisconnected179":74,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":25,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":63,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":26,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":77,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":78,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":89,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":41,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":82,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":11,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":19,"com.graphhopper.GraphHopperTest.testLoadOSM":14,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":4,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":29,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":39,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":27,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":8,"com.graphhopper.storage.UnsafeDataAccessTest.testTrimTo":83,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":7,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":43,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":6,"com.graphhopper.reader.OSMReaderTest.testSort":76,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":5,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":34,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":88,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":94,"com.graphhopper.reader.OSMReaderTest.testMain":75,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":50,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":54,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":20,"com.graphhopper.routing.PathTest.testWayList":71,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":44,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":31,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":85,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":46,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":70,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":36,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":92,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":38,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":45,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":68,"com.graphhopper.coll.OSMIDSegmentedMapTest.testGet2":100,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointCount":79,"com.graphhopper.util.DouglasPeuckerTest.testPathSimplify":81,"com.graphhopper.GraphHopperTest.testFootAndCar":12,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":21,"com.graphhopper.coll.OSMIDSegmentedMapTest.testGet":99,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":48,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":28,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":59,"com.graphhopper.util.InstructionListTest.testCreateGPX":98,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":32,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":57,"com.graphhopper.GraphHopperTest.testVia":9,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":15,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":52,"com.graphhopper.util.InstructionListTest.testCreateGPXWithEle":97,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":42,"com.graphhopper.GraphHopperAPITest.testLoad":73,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":13,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":37,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":55,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":3,"com.graphhopper.GraphHopperTest.testFootOnly":16,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":86,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":93,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":40,"com.graphhopper.util.InstructionListTest.testFind":0,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":90,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":84,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":35,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":64,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":17,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":33},"transformations":[{"failures":[],"tindex":"a432aaab-8295-11e5-a957-b74269ca4654","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.CompressedArray:72","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"variableMap":{"compressionLevel":"count"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:873","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.storage.DataAccess.getInt(long)"},"status":0},{"failures":[],"tindex":"a432d1bc-8295-11e5-a957-a1c4010879ab","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:186","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(2000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:153","type":"CtIfImpl","sourcecode":"if (double >= 64) {\n    int = 64;\n} else if (double >= 16) {\n    int = 16;\n} else if (double >= 4) {\n    int = 4;\n} else {\n    break;\n}"},"status":-2},{"failures":[],"tindex":"a432f8cd-8295-11e5-a957-257a9c44d8ae","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:789","type":"CtAssignmentImpl","sourcecode":"double = 1.0E-4"},"variableMap":{"towerNodeDistance":"prevLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:770","type":"CtOperatorAssignmentImpl","sourcecode":"double += com.graphhopper.util.DistanceCalc3D.calcDist(double, double, double, double, double, double)"},"status":0},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"tindex":"a432f8ce-8295-11e5-a957-83aa86cdf279","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:889","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int)"},"status":-1},{"failures":[79,80,81,8,9,10,11,53,64,65,67,68,69,82,70,71],"tindex":"a432f8cf-8295-11e5-a957-69bcb4635f40","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:55","type":"CtAssignmentImpl","sourcecode":"double[] = new double[int]"},"variableMap":{"cap":"cap","elevations":"longitudes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:112","type":"CtAssignmentImpl","sourcecode":"double[] = java.util.Arrays.copyOf(double[], int)"},"status":-1},{"failures":[71],"tindex":"a432f8d0-8295-11e5-a957-b31177f1ffe5","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:271","type":"CtAssignmentImpl","sourcecode":"int = int - (int)"},"variableMap":{"intVal":"counter","degree":"counter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:105","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[12],"tindex":"a4331fe1-8295-11e5-a957-813dfa35dcd3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GHRequest:254","type":"CtIfImpl","sourcecode":"if (java.lang.String != null)\n    this.java.lang.String = java.lang.String;\n"},"status":-1},{"failures":[83],"tindex":"a4331fe2-8295-11e5-a957-6ba46e5a117e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:118","type":"CtAssignmentImpl","sourcecode":"int = int * 2"},"variableMap":{"i":"allSegments","child":"allSegments"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:274","type":"CtAssignmentImpl","sourcecode":"int = 1"},"status":-1},{"failures":[71],"tindex":"a4331fe3-8295-11e5-a957-578e319b1dd3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:143","type":"CtAssignmentImpl","sourcecode":"java.lang.String = \"S\""},"variableMap":{"cp":"dir"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:287","type":"CtAssignmentImpl","sourcecode":"java.lang.String = com.graphhopper.util.Translation.tr(\"turn_sharp_right\")"},"status":-1},{"failures":[12,84,85,86,87,88,89,90,91,75,76,77,78,92,93,94,95,96],"tindex":"a4331fe4-8295-11e5-a957-c56dd9c3f734","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.EdgeAccess:194","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int == (com.graphhopper.util.EdgeIterator.int)))\n    throw new java.lang.IllegalStateException((((((\"Cannot write edge with illegal ID:\" + int) + \"; nodeThis:\") + int) + \", nodeOther:\") + int));\n"},"variableMap":{"com.graphhopper.util.EdgeIterator.NO_EDGE":"min","nodeThis":"removedEdges","edgeId":"min","nodeOther":"removedEdges"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:253","type":"CtIfImpl","sourcecode":"if ((gnu.trove.list.TIntList.size()) < int)\n    for (int int = 0 ; int < (gnu.trove.list.TIntList.size()) ; int++) {\n        com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(gnu.trove.list.TIntList.get(int));\n        while (com.graphhopper.util.EdgeIterator.next()) {\n            com.graphhopper.util.EdgeIterator.setFlags(com.graphhopper.routing.util.FlagEncoder.setAccess(com.graphhopper.util.EdgeIterator.getFlags(), false, false));\n            int++;\n        }\n    }\n"},"status":-1},{"failures":[97,98,3],"tindex":"a43346f5-8295-11e5-a957-1ddb41db629a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMElement:85","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"\\n\")"},"variableMap":{"tagTxt":"track"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:223","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<\/trkpt>\")"},"status":-1},{"failures":[99,100],"tindex":"a43346f6-8295-11e5-a957-47f07426a9b2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:594","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.storage.CHGraphImpl.long"},"variableMap":{"com.graphhopper.storage.CHGraphImpl.MAX_WEIGHT_LONG":"key","weightLong":"key"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:78","type":"CtAssignmentImpl","sourcecode":"long[][int] = long"},"status":-1},{"failures":[71],"tindex":"a43346f7-8295-11e5-a957-ab97f22d01e3","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:704","type":"CtIfImpl","sourcecode":"if (int == (com.graphhopper.storage.EdgeAccess.int))\n    continue;\n"},"variableMap":{"com.graphhopper.storage.EdgeAccess.NO_NODE":"counter","nodeId":"counter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:99","type":"CtIfImpl","sourcecode":"if ((int + 1) == (java.util.List<com.graphhopper.util.Instruction>.size()))\n    int--;\n"},"status":-1},{"failures":[],"tindex":"a43346f8-8295-11e5-a957-cfc20246c501","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.BigLongIntMap:73","type":"CtLocalVariableImpl","sourcecode":"long long = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:331","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.storage.DataAccess.getCapacity()"},"status":-2},{"failures":[],"tindex":"a43346f9-8295-11e5-a957-49507772ef8e","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:260","type":"CtAssignmentImpl","sourcecode":"int = 8"},"variableMap":{"bytesForFlags":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntIntBinHeap:121","type":"CtAssignmentImpl","sourcecode":"int[][int] = int[][int]"},"status":0},{"failures":[],"tindex":"a43346fa-8295-11e5-a957-c5b62c556b3a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:660","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.CHEdgeIterator.next()) {\n    if (((com.graphhopper.util.CHEdgeIterator.isShortcut()) && ((com.graphhopper.util.CHEdgeIterator.getAdjNode()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) && (com.graphhopper.util.CHEdgeIterator.canBeOverwritten(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long))) {\n        if ((com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double) >= (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.CHEdgeIterator, false, com.graphhopper.util.EdgeIterator.int)))\n            continue NEXT_SC;\n        \n        if (((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) || ((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) {\n            throw new java.lang.IllegalStateException((((((((((((((((((\"Shortcut cannot update itself! \" + (com.graphhopper.util.CHEdgeIterator.getEdge())) + \", skipEdge1:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", skipEdge2:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", edge \") + com.graphhopper.util.CHEdgeIterator) + \":\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.CHEdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", sc:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut) + \", skippedEdge1: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", skippedEdge2: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", neighbors:\") + (com.graphhopper.util.GHUtility.getNeighbors(com.graphhopper.util.CHEdgeIterator))));\n        } \n        com.graphhopper.util.CHEdgeIterator.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n        com.graphhopper.util.CHEdgeIterator.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIterator.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIterator.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIterator.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        boolean = true;\n        break;\n    } \n}"},"status":0},{"failures":[],"tindex":"a4336e0b-8295-11e5-a957-8b1ea7693d61","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.EdgeEntry:52","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry.clone()"},"variableMap":{"parent":"currEdge","cl":"currEdge","tmpPrev":"currEdge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Dijkstra:67","type":"CtInvocationImpl","sourcecode":"gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry>.put(int, com.graphhopper.storage.EdgeEntry)"},"status":0},{"failures":[],"tindex":"a4336e0c-8295-11e5-a957-ed990c448252","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:87","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.MMapDataAccess.ensureCapacity(long)"},"variableMap":{"bytes":"longSegmentSize","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:153","type":"CtInvocationImpl","sourcecode":"java.util.List<java.nio.ByteBuffer>.add(com.graphhopper.storage.MMapDataAccess.newByteBuffer(long, long))"},"status":-2},{"failures":[],"tindex":"a4336e0d-8295-11e5-a957-b9ff11136e00","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GHDirectory:154","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:272","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.InternalGraphEventListener.initStorage()"},"status":0},{"failures":[],"tindex":"a4336e0e-8295-11e5-a957-0f2ea1c9aec7","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:778","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.PointList.is3D())\n    com.graphhopper.util.PointList.add(double, double, double);\nelse\n    com.graphhopper.util.PointList.add(double, double);\n"},"variableMap":{"pillarNodes":"this","lon":"java.lang.Double.NaN","lat":"java.lang.Double.NaN","ele":"java.lang.Double.NaN"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:437","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(java.lang.Double.parseDouble(java.lang.String), java.lang.Double.parseDouble(java.lang.String[][0].trim()), java.lang.Double.double)"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"a432f8cd-8295-11e5-a957-257a9c44d8ae","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.DistanceCalc3D.calcDist"]},"type":"staticDiff"}]},{"transformation":"a4336e0b-8295-11e5-a957-8b1ea7693d61","diffs":[{"methodsDiff":{"delete":["gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry>.put"]},"type":"staticDiff"}]},{"transformation":"a43346fa-8295-11e5-a957-c5b62c556b3a","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.CHEdgeIteratorState.canBeOverwritten","com.graphhopper.util.EdgeIteratorState.getAdjNode","com.graphhopper.util.EdgeIteratorState.setFlags","com.graphhopper.util.CHEdgeIteratorState.setWeight","com.graphhopper.util.CHEdgeIteratorState.setSkippedEdges","com.graphhopper.routing.ch.PreparationWeighting.calcWeight","com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount","com.graphhopper.util.EdgeIteratorState.setDistance","com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState","com.graphhopper.util.CHEdgeIteratorState.isShortcut","com.graphhopper.routing.ch.PrepareContractionHierarchies.getCoords","com.graphhopper.util.GHUtility.getNeighbors","com.graphhopper.util.EdgeIteratorState.getEdge"]},"branchesDiff":{"delete":["l3","t0","t1","t2"]},"type":"staticDiff"},{"branches":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":["com.graphhopper.storage.CHGraphImpl$CHEdgeIteratorImpl_boolean_canBeOverwritten(long).b","com.graphhopper.routing.ch.PrepareEncoder_boolean_canBeOverwritten(long,long).b"]},"type":"branch"}]}]}
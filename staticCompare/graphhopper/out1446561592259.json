{"failureDictionary":{"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAccess":116,"com.graphhopper.routing.util.FootFlagEncoderTest.testPriority":107,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":136,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":154,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidTunnel":64,"com.graphhopper.reader.OSMReaderTest.testFerry":18,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":156,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPreferenceForSlowSpeed":85,"com.graphhopper.storage.RAMIntDataAccessTest.testHeader":188,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":151,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testService":95,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":34,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":110,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":157,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTram":96,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":73,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":82,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":158,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":84,"com.graphhopper.reader.OSMReaderTest.testWithBounds":28,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":159,"com.graphhopper.reader.PrinctonReaderTest.testRead":123,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAccess":114,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":142,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":173,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":81,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":125,"com.graphhopper.coll.CompressedArrayTest.testCompress":178,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":9,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":103,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":163,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":174,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":12,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":160,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTram":78,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":98,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":32,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":100,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":13,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":168,"com.graphhopper.GraphHopperTest.testPrepare":36,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":165,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPreferenceForSlowSpeed":55,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidTunnel":49,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":4,"com.graphhopper.util.InstructionListTest.testWayList2":119,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":72,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":83,"com.graphhopper.routing.util.BikeFlagEncoderTest.testclassBicycle":60,"com.graphhopper.reader.OSMReaderTest.testFoot":19,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":131,"com.graphhopper.search.NameIndexTest.testFlush":179,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":139,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":1,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":140,"com.graphhopper.util.InstructionListTest.testWayList":118,"com.graphhopper.reader.OSMReaderTest.testOneWay":31,"com.graphhopper.routing.util.BikeFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":58,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":59,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":129,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":57,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":99,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":148,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":128,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":94,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":149,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":41,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":56,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":172,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPreferenceForSlowSpeed":70,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidMotorway":97,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":11,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":2,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidTunnel":79,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":23,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":124,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":24,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":127,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":5,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":61,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":141,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":86,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":8,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":14,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":37,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":62,"com.graphhopper.routing.util.FootFlagEncoderTest.testAccess":117,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":133,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTram":63,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":176,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":152,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":15,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":175,"com.graphhopper.GraphHopperTest.testLoadOSM":40,"com.graphhopper.routing.util.FootFlagEncoderTest.handleWayTagsRoundabout":106,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testclassBicycle":93,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":143,"com.graphhopper.reader.OSMReaderTest.testSort":21,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":91,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":164,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":27,"com.graphhopper.util.GHUtilityTest.testSort2":120,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":126,"com.graphhopper.reader.OSMReaderTest.testMain":20,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":161,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":170,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":88,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":134,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":147,"com.graphhopper.reader.OSMReaderTest.testEstimatedCenter":30,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTram":48,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":67,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":138,"com.graphhopper.storage.RAMDataAccessTest.testHeader":185,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":146,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":183,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":17,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":69,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAccess":113,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":169,"com.graphhopper.storage.MMapDataAccessTest.testHeader":184,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":87,"com.graphhopper.routing.PathTest.testWayList":162,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":52,"com.graphhopper.storage.UnsafeDataAccessTest.testHeader":181,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":7,"com.graphhopper.storage.SynchedDAWrapperTest.testHeader":180,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":53,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":16,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":108,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":0,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":135,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":71,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":29,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":145,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":10,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":66,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidMotorway":80,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":74,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":54,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":182,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":186,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":115,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":130,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":89,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointCount":153,"com.graphhopper.util.DouglasPeuckerTest.testPathSimplify":155,"com.graphhopper.GraphHopperTest.testFootAndCar":38,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":171,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":76,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":77,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":46,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAccess":112,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":144,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":47,"com.graphhopper.util.GHUtilityTest.testSort":122,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":167,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":3,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidMotorway":50,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidMotorway":65,"com.graphhopper.routing.util.CarFlagEncoderTest.testOneway":90,"com.graphhopper.routing.util.FootFlagEncoderTest.testRailPlatformIssue366":109,"com.graphhopper.GraphHopperTest.testPrepareOnly":33,"com.graphhopper.coll.CompressedArrayTest.testCompress2":177,"com.graphhopper.GraphHopperTest.testVia":35,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":42,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":68,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":187,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":26,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":45,"com.graphhopper.GraphHopperAPITest.testLoad":111,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":39,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":137,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":6,"com.graphhopper.GraphHopperTest.testFootOnly":43,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":25,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidTunnel":92,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":166,"com.graphhopper.reader.OSMReaderTest.testBarriers":22,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testclassBicycle":75,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":102,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":104,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":44,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":105,"com.graphhopper.util.GHUtilityTest.testCopy":121,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":132,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":51,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPreferenceForSlowSpeed":101,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":150},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"tindex":"be0a663e-8238-11e5-b484-53e468520788","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:655","type":"CtForEachImpl","sourcecode":"NEXT_SC : for (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut : java.util.Map<com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut>.keySet()) {\n    boolean boolean = false;\n    com.graphhopper.util.CHEdgeIterator com.graphhopper.util.CHEdgeIterator = com.graphhopper.util.CHEdgeExplorer.setBaseNode(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n    while (com.graphhopper.util.CHEdgeIterator.next()) {\n        if (((com.graphhopper.util.CHEdgeIterator.isShortcut()) && ((com.graphhopper.util.CHEdgeIterator.getAdjNode()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) && (com.graphhopper.util.CHEdgeIterator.canBeOverwritten(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long))) {\n            if ((com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double) >= (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.CHEdgeIterator, false, com.graphhopper.util.EdgeIterator.int)))\n                continue NEXT_SC;\n            \n            if (((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) || ((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) {\n                throw new java.lang.IllegalStateException((((((((((((((((((\"Shortcut cannot update itself! \" + (com.graphhopper.util.CHEdgeIterator.getEdge())) + \", skipEdge1:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", skipEdge2:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", edge \") + com.graphhopper.util.CHEdgeIterator) + \":\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.CHEdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", sc:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut) + \", skippedEdge1: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", skippedEdge2: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", neighbors:\") + (com.graphhopper.util.GHUtility.getNeighbors(com.graphhopper.util.CHEdgeIterator))));\n            } \n            com.graphhopper.util.CHEdgeIterator.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n            com.graphhopper.util.CHEdgeIterator.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n            com.graphhopper.util.CHEdgeIterator.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n            com.graphhopper.util.CHEdgeIterator.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n            com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIterator.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n            boolean = true;\n            break;\n        } \n    }\n    if (!boolean) {\n        com.graphhopper.util.CHEdgeIteratorState com.graphhopper.util.CHEdgeIteratorState = com.graphhopper.storage.CHGraphImpl.shortcut(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        com.graphhopper.util.CHEdgeIteratorState.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n        com.graphhopper.util.CHEdgeIteratorState.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIteratorState.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIteratorState.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIteratorState.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        int++;\n    } \n}"},"status":-1},{"failures":[16,17],"tindex":"be0a8d4f-8238-11e5-b484-3f959c4ceb13","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:224","type":"CtLocalVariableImpl","sourcecode":"long long = (1L << int) - 1"},"variableMap":{"shift":"edgeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMTurnRelation:114","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.reader.OSMReader.getOsmIdOfInternalEdge(int)"},"status":-1},{"failures":[],"tindex":"be0a8d50-8238-11e5-b484-795ee2a8d9d1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DouglasPeucker:70","type":"CtLocalVariableImpl","sourcecode":"int int = 500"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:166","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.util.PointList.size()"},"status":-2},{"failures":[],"tindex":"be0ab461-8238-11e5-b484-a9279d7f12b5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:106","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.routing.util.AllEdgesIterator.getAdjNode()"},"status":-2},{"failures":[],"tindex":"be0ab462-8238-11e5-b484-e5371b0539cb","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:81","type":"CtOperatorAssignmentImpl","sourcecode":"double -= 2 * (java.lang.Math.double)"},"variableMap":{"java.lang.Math.PI":"dist","angleXY":"dist"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.PrinctonReader:82","type":"CtAssignmentImpl","sourcecode":"double = java.lang.Double.parseDouble(java.lang.String[][int])"},"status":0},{"failures":[18,19,20,21,22,23,24,16,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],"tindex":"be0ab463-8238-11e5-b484-2b3c6e7af38a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:75","type":"CtIfImpl","sourcecode":"if (((java.lang.Double.compare(double, 360)) > 0) || ((java.lang.Double.compare(double, 0)) < 0)) {\n    throw new java.lang.IllegalArgumentException(((\"Azimuth \" + double) + \" must be in (0, 360)\"));\n} "},"variableMap":{"azimuth":"maxSpeed"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:368","type":"CtIfImpl","sourcecode":"if ((double >= 0) && ((double < 0) || (double < double)))\n    double = double;\n"},"status":-1},{"failures":[],"tindex":"be0ab464-8238-11e5-b484-e549afc85ddc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:185","type":"CtOperatorAssignmentImpl","sourcecode":"long |= 1"},"variableMap":{"res":"mask"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedValue:94","type":"CtOperatorAssignmentImpl","sourcecode":"long &= long"},"status":-2},{"failures":[111,35,36,37,38,39,40,42],"tindex":"be0ab465-8238-11e5-b484-9779d4d9cb21","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:169","type":"CtIfImpl","sourcecode":"if (int > int) {\n    int = int;\n} "},"variableMap":{"min":"pathIndex","tmpSize":"pathIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:59","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.util.InstructionList.isEmpty())) {\n    if (com.graphhopper.util.PointList.isEmpty()) {\n        com.graphhopper.util.PointList com.graphhopper.util.PointList = com.graphhopper.util.InstructionList.get(0).getPoints();\n        com.graphhopper.util.PointList = new com.graphhopper.util.PointList(((com.graphhopper.util.InstructionList.size()) * (java.lang.Math.min(10, com.graphhopper.util.PointList.size()))) , com.graphhopper.util.PointList.is3D());\n    } \n    for (com.graphhopper.util.Instruction com.graphhopper.util.Instruction : com.graphhopper.util.InstructionList) {\n        if (boolean) {\n            int += com.graphhopper.util.Instruction.getPoints().size();\n            com.graphhopper.util.DouglasPeucker.simplify(com.graphhopper.util.Instruction.getPoints());\n        } \n        com.graphhopper.util.InstructionList.add(com.graphhopper.util.Instruction);\n        com.graphhopper.util.PointList.add(com.graphhopper.util.Instruction.getPoints());\n    }\n    if ((int + 1) < (java.util.List<com.graphhopper.routing.Path>.size())) {\n        com.graphhopper.util.ViaInstruction com.graphhopper.util.ViaInstruction = new com.graphhopper.util.ViaInstruction(com.graphhopper.util.InstructionList.get(((com.graphhopper.util.InstructionList.size()) - 1)));\n        com.graphhopper.util.ViaInstruction.setViaCount((int + 1));\n        com.graphhopper.util.InstructionList.replaceLast(com.graphhopper.util.ViaInstruction);\n    } \n} "},"status":-1},{"failures":[],"tindex":"be0adb76-8238-11e5-b484-4b702da21374","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:199","type":"CtIfImpl","sourcecode":"if (int > 1000)\n    throw new java.lang.IllegalStateException(\"something went wrong: there seems to be no end of the turn cost-list!?\");\n"},"variableMap":{"i":"com.graphhopper.reader.OSMElement.NODE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:288","type":"CtSwitchImpl","sourcecode":"switch (com.graphhopper.reader.OSMElement.getType()) {\n    case com.graphhopper.reader.OSMElement.int :\n        if ((com.graphhopper.coll.LongIntMap.get(com.graphhopper.reader.OSMElement.getId())) != (-1)) {\n            com.graphhopper.reader.OSMReader.processNode(((com.graphhopper.reader.OSMNode)(com.graphhopper.reader.OSMElement)));\n        } \n        break;\n    case com.graphhopper.reader.OSMElement.int :\n        if (long < 0) {\n            com.graphhopper.reader.OSMReader.org.slf4j.Logger.info((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \", now parsing ways\"));\n            long = long;\n        } \n        com.graphhopper.reader.OSMReader.processWay(((com.graphhopper.reader.OSMWay)(com.graphhopper.reader.OSMElement)));\n        break;\n    case com.graphhopper.reader.OSMElement.int :\n        if (long < 0) {\n            com.graphhopper.reader.OSMReader.org.slf4j.Logger.info((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \", now parsing relations\"));\n            long = long;\n        } \n        com.graphhopper.reader.OSMReader.processRelation(((com.graphhopper.reader.OSMRelation)(com.graphhopper.reader.OSMElement)));\n        break;\n}"},"status":-2},{"failures":[52,112,56,61,62,67,113,71,76,77,82,114,87,115,90,91,94,99,116,107,109,117],"tindex":"be0adb77-8238-11e5-b484-655b76a60add","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:154","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:201","type":"CtInvocationImpl","sourcecode":"java.util.Map<java.lang.String, java.lang.Object>.clear()"},"status":-1},{"failures":[],"tindex":"be0adb78-8238-11e5-b484-ab17324afe07","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Instruction:135","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.PointList.getLatitude(0)"},"variableMap":{"points":"points"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:148","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.PointList.getElevation(0)"},"status":0},{"failures":[118,119,120,121,122,22,16,26,123,124,125,126,127,128,2,129,130,4,7,131,132,133,10,134,15,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152],"tindex":"be0adb79-8238-11e5-b484-739bae712bd1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:323","type":"CtIfImpl","sourcecode":"if (int < (int))\n    return ;\n"},"status":-1},{"failures":[],"tindex":"be0b028a-8238-11e5-b484-5f510bc63979","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.SimpleIntDeque:81","type":"CtLocalVariableImpl","sourcecode":"int[] int[] = new int[(int) + 10]"},"variableMap":{"endIndexPlusOne":"read"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:167","type":"CtLocalVariableImpl","sourcecode":"int[] int[] = new int[int]"},"status":0},{"failures":[153,154,155],"tindex":"be0b028b-8238-11e5-b484-83319cb31f58","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:169","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.util.DouglasPeucker.simplify(com.graphhopper.util.PointList, int, int)"},"status":-1},{"failures":[],"tindex":"be0b028c-8238-11e5-b484-1b12ac373ea9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.pbf.PbfBlobDecoder:238","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    break;\n} "},"variableMap":{"keyIndex":"node"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:101","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    int = com.graphhopper.routing.util.AllEdgesIterator.getBaseNode();\n} else {\n    int = com.graphhopper.routing.util.AllEdgesIterator.getAdjNode();\n}"},"status":-2},{"failures":[121,24,38,156,1,2,157,129,158,130,159,4,5,7,160,161,139,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176],"tindex":"be0b028d-8238-11e5-b484-4bf18d80a61f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:139","type":"CtAssignmentImpl","sourcecode":"double = ((int)((double * (double)))) / (double)"},"variableMap":{"precision":"tmp","lat":"tmp"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:242","type":"CtAssignmentImpl","sourcecode":"double = double[][int]"},"status":-1},{"failures":[177,178],"tindex":"be0b028e-8238-11e5-b484-f535b5b7eff9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.CompressedArray:86","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.VLongStorage.writeVLong(long)"},"status":-1},{"failures":[35,36,37,38,39,40,42],"tindex":"be0b028f-8238-11e5-b484-a345661e5aee","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:107","type":"CtLocalVariableImpl","sourcecode":"double double = 360 / ((com.graphhopper.util.DistanceCalcEarth.double) / double)"},"variableMap":{"radiusInMeter":"defaultWeightLimit","com.graphhopper.util.DistanceCalcEarth.C":"defaultWeightLimit"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1022","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.GHRequest.getHints().getDouble(\"defaultWeightLimit\", double)"},"status":-1},{"failures":[],"tindex":"be0b0290-8238-11e5-b484-87a5cad8542e","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:789","type":"CtAssignmentImpl","sourcecode":"double = 1.0E-4"},"variableMap":{"towerNodeDistance":"lon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:129","type":"CtAssignmentImpl","sourcecode":"double[][int] = double"},"status":0},{"failures":[33,40,41,42,179,180,181,182,183,144,184,185,147,186,150,187,188],"tindex":"be0b0291-8238-11e5-b484-6985a0819dcf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:104","type":"CtInvocationImpl","sourcecode":"java.io.RandomAccessFile.writeInt(int)"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"be0ab462-8238-11e5-b484-e5371b0539cb","diffs":[{"methodsDiff":{"delete":["java.lang.Double.parseDouble"]},"type":"staticDiff"}]},{"transformation":"be0adb78-8238-11e5-b484-ab17324afe07","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.PointList.getElevation"]},"type":"staticDiff"},{"branches":{"com.graphhopper.util.InstructionListTest.testCreateGPX":["com.graphhopper.util.PointList_double_getElevation(int).b","com.graphhopper.util.PointList_double_getElevation(int).e2","com.graphhopper.util.PointList_double_getElevation(int).e1"]},"type":"branch"}]}]}
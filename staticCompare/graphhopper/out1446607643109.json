{"failureDictionary":{"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testNoErrorOnEdgeCase_lastIndex":17,"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":46,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":100,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":115,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":123,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":32,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":91,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":112,"com.graphhopper.routing.QueryGraphTest.testOneWay":122,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":18,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":96,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeightMMap":4,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":97,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":99,"com.graphhopper.storage.MMapDataAccessTest.testSegments":14,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":53,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":77,"com.graphhopper.storage.MMapDataAccessTest.testLoadFlush":16,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":43,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":117,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeight":5,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":52,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":140,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testNoErrorOnEdgeCase_lastIndex":20,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":85,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":41,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":51,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":31,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":37,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":88,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":111,"com.graphhopper.storage.MMapDataAccessTest.textMixMMAP2RAM":7,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":89,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":62,"com.graphhopper.GraphHopperTest.testPrepare":133,"com.graphhopper.storage.GraphStorageViaMMapTest.testInfinityWeight":63,"com.graphhopper.util.InstructionListTest.testWayList2":81,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":126,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":59,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":120,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":54,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":93,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":124,"com.graphhopper.util.InstructionListTest.testWayList":80,"com.graphhopper.storage.MMapDataAccessTest.testSet_Get_Short_Long":8,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":79,"com.graphhopper.GraphHopperAPITest.testDisconnected179":139,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":39,"com.graphhopper.storage.MMapDataAccessTest.testLoadClose":15,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":45,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":34,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":87,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":21,"com.graphhopper.storage.MMapDataAccessTest.testRenameFlush":11,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":48,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":76,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":143,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":74,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":3,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":102,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":72,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":49,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":66,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":84,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":90,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":134,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":23,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":131,"com.graphhopper.GraphHopperTest.testLoadOSM":109,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":127,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":58,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":130,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":129,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":57,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":128,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":83,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":98,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":44,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":27,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijection":141,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":64,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":104,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":119,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":29,"com.graphhopper.storage.MMapDataAccessTest.testHeader":13,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":71,"com.graphhopper.storage.MMapDataAccessTest.testCopy":10,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":24,"com.graphhopper.storage.MMapDataAccessTest.textMixRAM2MMAP":6,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":65,"com.graphhopper.storage.MMapDataAccessTest.testRenameNoFlush":12,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":42,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":61,"com.graphhopper.util.BitUtilBigTest.testFromBitString":145,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":105,"com.graphhopper.storage.index.Location2IDFullIndexTest.testNoErrorOnEdgeCase_lastIndex":19,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":67,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":69,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":92,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":114,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":101,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":86,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":28,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":60,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":125,"com.graphhopper.GraphHopperTest.testFootAndCar":135,"com.graphhopper.coll.IntDoubleBinHeapTest.testRekey":106,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":30,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":75,"com.graphhopper.util.BitUtilBigTest.testToBitString":144,"com.graphhopper.storage.MMapDataAccessTest.testSet_GetBytes":9,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":38,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":40,"com.graphhopper.storage.GraphStorageViaMMapTest.testBounds":55,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":121,"com.graphhopper.geohash.SpatialKeyAlgoTest.testDifferentInitialBounds":142,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":35,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":26,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNoErrorOnEdgeCase_lastIndex":25,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":50,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":118,"com.graphhopper.GraphHopperTest.testPrepareOnly":108,"com.graphhopper.GraphHopperTest.testVia":132,"com.graphhopper.coll.IntDoubleBinHeapTest.test0":107,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":110,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":113,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":33,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":70,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":0,"com.graphhopper.GraphHopperAPITest.testLoad":138,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":136,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":116,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":82,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":103,"com.graphhopper.GraphHopperTest.testFootOnly":137,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":1,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":22,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":47,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":73,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":2,"com.graphhopper.util.InstructionListTest.testFind":78,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":56,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":94,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":36,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":95,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":68},"transformations":[{"failures":[],"tindex":"f67d8778-82a3-11e5-a72d-2b5200b17139","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:694","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.coll.GHBitSet com.graphhopper.coll.GHBitSet = new com.graphhopper.coll.GHBitSetImpl((int * 3))"},"variableMap":{"removeNodeCount":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:187","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.coll.GHBitSet com.graphhopper.coll.GHBitSet = new com.graphhopper.coll.GHBitSetImpl(int)"},"status":0},{"failures":[],"tindex":"f67dd599-82a3-11e5-a72d-1151b895232a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:186","type":"CtAssignmentImpl","sourcecode":"int = ((int)((java.lang.Math.log(int)) / (java.lang.Math.log(2))))"},"variableMap":{"segmentSizeInBytes":"visitedCount","segmentSizePower":"visitedCount"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:100","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":0},{"failures":[],"tindex":"f67dd59a-82a3-11e5-a72d-bb00bc5c7232","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.DijkstraOneToMany:114","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.DijkstraOneToMany.int"},"variableMap":{"com.graphhopper.routing.DijkstraOneToMany.NOT_FOUND":"NO_TURN_ENTRY"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.TurnCostExtension:225","type":"CtReturnImpl","sourcecode":"return int"},"status":0},{"failures":[0],"tindex":"f67dd59b-82a3-11e5-a72d-ff952a4614fa","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:283","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"sac_scale\")"},"variableMap":{"way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:161","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"highway\")"},"status":-1},{"failures":[1,2],"tindex":"f67dfcac-82a3-11e5-a72d-7dfe8d977187","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:248","type":"CtReturnImpl","sourcecode":"return int * ((4 + 4) + 4)"},"variableMap":{"factor":"removedEdges"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:247","type":"CtReturnImpl","sourcecode":"return int"},"status":-1},{"failures":[],"tindex":"f67dfcad-82a3-11e5-a72d-2d41977bac6d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:91","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.DAType = com.graphhopper.storage.DAType"},"variableMap":{"type":"daType","defaultType":"daType"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:173","type":"CtAssignmentImpl","sourcecode":"this.com.graphhopper.storage.DAType = com.graphhopper.storage.DAType"},"status":0},{"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"tindex":"f67dfcae-82a3-11e5-a72d-1f1018331700","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:1019","type":"CtAssignmentImpl","sourcecode":"int = (-int) - 1"},"variableMap":{"foundIndex":"segmentsToMap"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:122","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[],"tindex":"f67e23bf-82a3-11e5-a72d-d1ee28bd1b80","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:771","type":"CtAssignmentImpl","sourcecode":"double = double"},"variableMap":{"prevEle":"lonDelta","ele":"minLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.LinearKeyAlgo:58","type":"CtAssignmentImpl","sourcecode":"double = ((com.graphhopper.util.shapes.BBox.double) - (com.graphhopper.util.shapes.BBox.double)) / (int)"},"status":-2},{"failures":[71,72,73,74,75,76,77,78,79,80,81,82,83],"tindex":"f67e23c0-82a3-11e5-a72d-cbc0e2997801","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Dijkstra:76","type":"CtWhileImpl","sourcecode":"while (true) {\n    (int)++;\n    if (com.graphhopper.routing.Dijkstra.(isWeightLimitExceeded()) || com.graphhopper.routing.Dijkstra.(finished()))\n        break;\n    \n    int int = com.graphhopper.storage.EdgeEntry.int;\n    com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        if (!com.graphhopper.routing.AbstractRoutingAlgorithm.(accept(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.EdgeEntry.int)))\n            continue;\n        \n        int int = com.graphhopper.routing.util.TraversalMode.createTraversalId(com.graphhopper.util.EdgeIterator, false);\n        double double = (com.graphhopper.routing.util.Weighting.calcWeight(com.graphhopper.util.EdgeIterator, false, com.graphhopper.storage.EdgeEntry.int)) + (com.graphhopper.storage.EdgeEntry.double);\n        if (java.lang.Double.isInfinite(double))\n            continue;\n        \n        com.graphhopper.storage.EdgeEntry com.graphhopper.storage.EdgeEntry = gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry>.get(int);\n        if (com.graphhopper.storage.EdgeEntry == null) {\n            com.graphhopper.storage.EdgeEntry = new com.graphhopper.storage.EdgeEntry(com.graphhopper.util.EdgeIterator.getEdge() , com.graphhopper.util.EdgeIterator.getAdjNode() , double);\n            com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n            gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry>.put(int, com.graphhopper.storage.EdgeEntry);\n            java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.add(com.graphhopper.storage.EdgeEntry);\n        } else if ((com.graphhopper.storage.EdgeEntry.double) > double) {\n            java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.remove(com.graphhopper.storage.EdgeEntry);\n            com.graphhopper.storage.EdgeEntry.int = com.graphhopper.util.EdgeIterator.getEdge();\n            com.graphhopper.storage.EdgeEntry.double = double;\n            com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n            java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.add(com.graphhopper.storage.EdgeEntry);\n        } else\n            continue;\n        \n        com.graphhopper.routing.AbstractRoutingAlgorithm.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.EdgeEntry, int);\n    }\n    if (java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.isEmpty())\n        break;\n    \n    com.graphhopper.storage.EdgeEntry = java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.poll();\n    if ((com.graphhopper.storage.EdgeEntry) == null)\n        throw new java.lang.AssertionError(\"Empty edge cannot happen\");\n    \n}"},"status":-1},{"failures":[84,85,86,87,88,89,90],"tindex":"f67e4ad1-82a3-11e5-a72d-1bf3660f5cf2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:630","type":"CtContinueImpl","sourcecode":"continue"},"status":-2},{"failures":[86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],"tindex":"f67e4ad2-82a3-11e5-a72d-31f22bc5dcce","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.EdgeAccess:233","type":"CtIfImpl","sourcecode":"if (int <= (com.graphhopper.util.EdgeIterator.int))\n    throw new java.lang.IllegalStateException((((\"edgeId invalid \" + int) + \", \") + (this)));\n"},"variableMap":{"com.graphhopper.util.EdgeIterator.NO_EDGE":"element","edgeId":"element"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:150","type":"CtIfImpl","sourcecode":"if ((int[][int]) == int) {\n    break;\n} "},"status":-1},{"failures":[108,109,110,27,29,30,68],"tindex":"f67e4ad3-82a3-11e5-a72d-0d35846c13b9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:463","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.initStorage()"},"status":-1},{"failures":[],"tindex":"f67e4ad4-82a3-11e5-a72d-871fcf1449a8","series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:663","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"Load graph before importing OSM data\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:321","type":"CtThrowImpl","sourcecode":"throw new java.lang.AssertionError(\"The graph has not yet been initialized.\")"},"status":-2},{"failures":[],"tindex":"f67e71e5-82a3-11e5-a72d-e9d44d1df0fa","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistanceCalc2D:58","type":"CtReturnImpl","sourcecode":"return (double * double) + (double * double)"},"variableMap":{"dX":"java.lang.Double.POSITIVE_INFINITY","dY":"java.lang.Double.POSITIVE_INFINITY"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:646","type":"CtIfImpl","sourcecode":"if ((int) == 1)\n    return (long & (long)) == 0 ? 0 : java.lang.Double.double;\n"},"status":-2},{"failures":[111,112,113,114,115,116,117,118,119,120,121,122,123,124,95,96,97,125,126,105,127,83,128,129,130,131,132,133,134,135,136,109,110,137,138,139,140],"tindex":"f67e71e6-82a3-11e5-a72d-e7ea61cc3bdc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:713","type":"CtReturnImpl","sourcecode":"return (java.util.List<com.graphhopper.storage.index.QueryResult>) != null"},"status":-1},{"failures":[141,142],"tindex":"f67e71e7-82a3-11e5-a72d-95461459bbbd","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:91","type":"CtUnaryOperatorImpl","sourcecode":"(long)++"},"variableMap":{"size":"initialBits"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:98","type":"CtAssignmentImpl","sourcecode":"long = 1L << (int - 1)"},"status":-1},{"failures":[143,3],"tindex":"f67e71e8-82a3-11e5-a72d-53a52cb281a5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:48","type":"CtAssignmentImpl","sourcecode":"double = (double - double) / (double + double)"},"variableMap":{"r":"ele","x":"ele","absY":"prevEle"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:771","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-1},{"failures":[],"tindex":"f67e98f9-82a3-11e5-a72d-d128cccdbe4e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:182","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException(\"already closed\");\n"},"variableMap":{"closed":"initialized"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:168","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException((\"You cannot configure this GraphStorage \" + \"after calling create or loadExisting. Calling one of the methods twice is also not allowed.\"));\n"},"status":0},{"failures":[144,145],"tindex":"f67e98fa-82a3-11e5-a72d-0d11ca29425b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilBig:119","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < 8 ; int++) {\n    if ((byte & byte) == 0)\n        java.lang.StringBuilder.append('0');\n    else\n        java.lang.StringBuilder.append('1');\n    \n    byte <<= 1;\n}"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":19,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"f67e98f9-82a3-11e5-a72d-d128cccdbe4e","diffs":[{"branchesDiff":{"delete":["t0"]},"type":"staticDiff"}]}]}
{"failureDictionary":{"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":17,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":4,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":23,"com.graphhopper.coll.IntIntBinHeapTest.testSize":27,"com.graphhopper.coll.IntIntBinHeapTest.test0":28,"com.graphhopper.util.InstructionListTest.testCreateGPX":30,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":5,"com.graphhopper.storage.RAMIntDataAccessTest.testHeader":19,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":38,"com.graphhopper.coll.IntIntBinHeapTest.testClear":26,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":16,"com.graphhopper.storage.RAMIntDataAccessTest.testSegments":20,"com.graphhopper.coll.GHLongIntBTreeTest.testPut":33,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":37,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":3,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":1,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":7,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":11,"com.graphhopper.GraphHopperTest.testPrepareOnly":8,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":6,"com.graphhopper.GraphHopperTest.testVia":39,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":12,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":14,"com.graphhopper.coll.IntIntBinHeapTest.testSpreading":29,"com.graphhopper.coll.GHLongIntBTreeTest.testTwoSplits":34,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":2,"com.graphhopper.reader.dem.CGIARProviderTest.testDown":36,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":9,"com.graphhopper.storage.RAMIntDataAccessTest.testRenameFlush":18,"com.graphhopper.coll.GHLongIntBTreeTest.testSplitAndOverwrite":32,"com.graphhopper.util.SimpleIntDequeTest.testPush":25,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":31,"com.graphhopper.coll.GHLongIntBTreeTest.testRandom":35,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":15,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":24,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadClose":21,"com.graphhopper.GraphHopperTest.testLoadOSM":10,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":0,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":13,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadFlush":22},"transformations":[{"failures":[0,1,2,3,4,5,6,7],"tindex":"6ca48e3b-827b-11e5-a0f2-3997576e8450","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.UnsafeDataAccess:273","type":"CtIfImpl","sourcecode":"if (int <= 0)\n    int = 1;\n"},"variableMap":{"allSegments":"toNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:142","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.QueryResult.setClosestNode(int)"},"status":-1},{"failures":[],"tindex":"6ca4b54c-827b-11e5-a0f2-07a3bce4f92a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.PillarInfo:93","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.Helper.intToDegree(int)"},"variableMap":{"intVal":"id"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.PillarInfo:112","type":"CtReturnImpl","sourcecode":"return com.graphhopper.reader.PillarInfo.getLongitude(int)"},"status":0},{"failures":[],"tindex":"6ca4b54d-827b-11e5-a0f2-2ffe3f936da6","series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:1135","type":"CtInvocationImpl","sourcecode":"org.slf4j.Logger.info((\"start finding subnetworks, \" + (com.graphhopper.util.Helper.getMemInfo())))"},"variableMap":{"logger":"com.graphhopper.reader.OSMReader.logger"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:157","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.OSMReader.org.slf4j.Logger.info((((((\"time(pass1): \" + ((int)(com.graphhopper.util.StopWatch.getSeconds()))) + \" pass2: \") + ((int)(com.graphhopper.util.StopWatch.getSeconds()))) + \" total:\") + ((int)(((com.graphhopper.util.StopWatch.getSeconds()) + (com.graphhopper.util.StopWatch.getSeconds()))))))"},"status":0},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"tindex":"6ca4b54e-827b-11e5-a0f2-47866a3a20b0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:199","type":"CtTryImpl","sourcecode":"try {\n    long long = com.graphhopper.storage.RAMIntDataAccess.getCapacity();\n    com.graphhopper.storage.AbstractDataAccess.writeHeader(java.io.RandomAccessFile, long, int);\n    java.io.RandomAccessFile.seek(com.graphhopper.storage.AbstractDataAccess.int);\n    for (int int = 0 ; int < (int[][].int) ; int++) {\n        int[] int[] = int[][][int];\n        int int = int[].int;\n        byte[] byte[] = new byte[int * 4];\n        for (int int = 0 ; int < int ; int++) {\n            com.graphhopper.util.BitUtil.fromInt(byte[], int[][int], (int * 4));\n        }\n        java.io.RandomAccessFile.write(byte[]);\n    }\n} finally {\n    java.io.RandomAccessFile.close();\n}"},"status":-1},{"failures":[],"tindex":"6ca4b54f-827b-11e5-a0f2-57c721fae46f","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Downloader:90","type":"CtReturnImpl","sourcecode":"return java.io.InputStream"},"variableMap":{"is":"java.io.InputStream.class"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMInputFile:104","type":"CtIfImpl","sourcecode":"if (((byte[][0]) == 31) && ((byte[][1]) == (-117))) {\n    java.io.InputStream.reset();\n    return new java.util.zip.GZIPInputStream(java.io.InputStream , 50000);\n} else if (((((((byte[][0]) == 0) && ((byte[][1]) == 0)) && ((byte[][2]) == 0)) && ((byte[][4]) == 10)) && ((byte[][5]) == 9)) && (((byte[][3]) == 13) || ((byte[][3]) == 14))) {\n    java.io.InputStream.reset();\n    boolean = true;\n    return java.io.InputStream;\n} else if (((byte[][0]) == 'P') && ((byte[][1]) == 'K')) {\n    java.io.InputStream.reset();\n    java.util.zip.ZipInputStream java.util.zip.ZipInputStream = new java.util.zip.ZipInputStream(java.io.InputStream);\n    java.util.zip.ZipInputStream.getNextEntry();\n    return java.util.zip.ZipInputStream;\n} else if ((java.lang.String.endsWith(\".osm\")) || (java.lang.String.endsWith(\".xml\"))) {\n    java.io.InputStream.reset();\n    return java.io.InputStream;\n} else if ((java.lang.String.endsWith(\".bz2\")) || (java.lang.String.endsWith(\".bzip2\"))) {\n    java.lang.String java.lang.String = \"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream\";\n    try {\n        java.lang.Class java.lang.Class = java.lang.Class.forName(java.lang.String);\n        java.io.InputStream.reset();\n        java.lang.reflect.Constructor<java.io.InputStream> java.lang.reflect.Constructor<java.io.InputStream> = java.lang.Class.getConstructor(java.io.InputStream.java.io.InputStream, boolean.boolean);\n        return java.lang.reflect.Constructor<java.io.InputStream>.newInstance(java.io.InputStream, true);\n    } catch (java.lang.Exception e) {\n        throw new java.lang.IllegalArgumentException((\"Cannot instantiate \" + java.lang.String) , java.lang.Exception);\n    }\n} else {\n    throw new java.lang.IllegalArgumentException((\"Input file is not of valid type \" + (java.io.File.getPath())));\n}"},"status":-2},{"failures":[],"tindex":"6ca4dc60-827b-11e5-a0f2-49dc20b4b792","series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:235","type":"CtIfImpl","sourcecode":"if (long > 1) {\n    long >>>= 1;\n} else {\n    break;\n}"},"variableMap":{"bits":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:662","type":"CtIfImpl","sourcecode":"if (((com.graphhopper.util.CHEdgeIterator.isShortcut()) && ((com.graphhopper.util.CHEdgeIterator.getAdjNode()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) && (com.graphhopper.util.CHEdgeIterator.canBeOverwritten(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long))) {\n    if ((com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double) >= (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.CHEdgeIterator, false, com.graphhopper.util.EdgeIterator.int)))\n        continue NEXT_SC;\n    \n    if (((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) || ((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) {\n        throw new java.lang.IllegalStateException((((((((((((((((((\"Shortcut cannot update itself! \" + (com.graphhopper.util.CHEdgeIterator.getEdge())) + \", skipEdge1:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", skipEdge2:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", edge \") + com.graphhopper.util.CHEdgeIterator) + \":\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.CHEdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", sc:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut) + \", skippedEdge1: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", skippedEdge2: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", neighbors:\") + (com.graphhopper.util.GHUtility.getNeighbors(com.graphhopper.util.CHEdgeIterator))));\n    } \n    com.graphhopper.util.CHEdgeIterator.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n    com.graphhopper.util.CHEdgeIterator.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n    com.graphhopper.util.CHEdgeIterator.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n    com.graphhopper.util.CHEdgeIterator.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n    com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIterator.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n    boolean = true;\n    break;\n} "},"status":-2},{"failures":[25],"tindex":"6ca4dc61-827b-11e5-a0f2-6150ac479232","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.SparseArray:361","type":"CtAssignmentImpl","sourcecode":"int[] = int[]"},"variableMap":{"mKeys":"arr","nkeys":"arr"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.SimpleIntDeque:99","type":"CtAssignmentImpl","sourcecode":"int[] = java.util.Arrays.copyOf(int[], ((int)((int[].int) * (float))))"},"status":-1},{"failures":[26,27,28,29],"tindex":"6ca4dc62-827b-11e5-a0f2-fb41200aa53a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.SparseIntIntArray:118","type":"CtAssignmentImpl","sourcecode":"int[][int] = com.graphhopper.coll.SparseIntIntArray.int"},"variableMap":{"com.graphhopper.coll.SparseIntIntArray.DELETED":"i","i":"i","mValues":"elem"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntIntBinHeap:216","type":"CtAssignmentImpl","sourcecode":"int[][int] = int"},"status":-1},{"failures":[30,31],"tindex":"6ca4dc63-827b-11e5-a0f2-ef8769615c0e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionList:223","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<\/trkpt>\")"},"variableMap":{"track":"output"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:235","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"\\n<rtept lat=\\\"\").append(com.graphhopper.util.Helper.round6(com.graphhopper.util.Instruction.getFirstLat()))"},"status":-1},{"failures":[10,12,13,17,23],"tindex":"6ca50374-827b-11e5-a0f2-cd9087af1be2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:194","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setHeader((1 * 4), int)"},"status":-1},{"failures":[],"tindex":"6ca50375-827b-11e5-a0f2-bb1be72ab668","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:757","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.setWayGeometry_(com.graphhopper.storage.BaseGraph.fetchWayGeometry_(long, true, 0, -1, -1), long, false)"},"variableMap":{"edgePointer":"flags","this":"graph"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:447","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMTurnRelation != null) {\n    com.graphhopper.storage.GraphExtension com.graphhopper.storage.GraphExtension = com.graphhopper.storage.Graph.getExtension();\n    if (com.graphhopper.storage.GraphExtension instanceof com.graphhopper.storage.TurnCostExtension) {\n        com.graphhopper.storage.TurnCostExtension com.graphhopper.storage.TurnCostExtension = ((com.graphhopper.storage.TurnCostExtension)(com.graphhopper.storage.GraphExtension));\n        java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry> java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry> = com.graphhopper.reader.OSMReader.analyzeTurnRelation(com.graphhopper.reader.OSMTurnRelation);\n        for (com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry : java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>) {\n            com.graphhopper.storage.TurnCostExtension.addTurnInfo(com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int, com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int, com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int, com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.long);\n        }\n    } \n} "},"status":-2},{"failures":[32,33,34,35],"tindex":"6ca50376-827b-11e5-a0f2-8713fbcbf934","series":0,"name":"replace","transplant":{"position":"com.graphhopper.search.NameIndex:121","type":"CtIfImpl","sourcecode":"if (long < 0)\n    throw new java.lang.IllegalStateException((\"Pointer to access NameIndex cannot be negative:\" + long));\n"},"variableMap":{"pointer":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHLongIntBTree:88","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.coll.GHLongIntBTree.ReturnValue.int) == (int)) {\n    (long)++;\n    if (((long) % 1000000) == 0)\n        com.graphhopper.coll.GHLongIntBTree.optimize();\n    \n} "},"status":-1},{"failures":[],"tindex":"6ca50377-827b-11e5-a0f2-6bdcea246cef","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:286","type":"CtLocalVariableImpl","sourcecode":"java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:197","type":"CtLocalVariableImpl","sourcecode":"java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(java.lang.String)"},"status":-2},{"failures":[],"tindex":"6ca50378-827b-11e5-a0f2-cb6269a9748d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:587","type":"CtAssignmentImpl","sourcecode":"boolean = com.graphhopper.util.CmdArgs.getBool(\"osmreader.instructions\", boolean)"},"variableMap":{"args":"args","enableInstructions":"removeZipped"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:531","type":"CtAssignmentImpl","sourcecode":"boolean = com.graphhopper.util.CmdArgs.getBool(\"graph.removeZipped\", boolean)"},"status":0},{"failures":[36],"tindex":"6ca52a89-827b-11e5-a0f2-47c63d7df0e6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:94","type":"CtIfImpl","sourcecode":"if (int >= (int))\n    int = (int) - 1;\n"},"variableMap":{"width":"intVal","lonSimilar":"intVal"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.CGIARProvider:270","type":"CtIfImpl","sourcecode":"if (!((double >= 0) || ((int - double) < (double))))\n    int = int - (int);\n"},"status":-1},{"failures":[],"tindex":"6ca52a8a-827b-11e5-a0f2-edffe6d14eca","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:719","type":"CtIfImpl","sourcecode":"if (new java.io.File((java.lang.String + \"-gh\")).exists())\n    java.lang.String += \"-gh\";\n"},"variableMap":{"graphHopperFolder":"com.graphhopper.routing.util.EncodingManager.FOOT"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:156","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.FootFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MotorcycleFlagEncoder(com.graphhopper.util.PMap);\nelse\n    throw new java.lang.IllegalArgumentException((\"entry in encoder list not supported \" + java.lang.String));\n"},"status":-2},{"failures":[],"tindex":"6ca52a8b-827b-11e5-a0f2-c9030be0fd2c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:144","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"variableMap":{"blockByDefault":"updatedInGraph"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:684","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":0},{"failures":[37,38],"tindex":"6ca52a8c-827b-11e5-a0f2-4d5c9ca342e2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:547","type":"CtIfImpl","sourcecode":"if (double == 0) {\n    return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n} else if (double > 1) {\n    return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n} else {\n    return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n}"},"variableMap":{"longTripsSpeed":"otherValue","shortTripsSpeed":"otherValue","this":"this","durationInHours":"otherValue","unknownSpeed":"otherValue"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:147","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(long, double)"},"status":-1},{"failures":[31],"tindex":"6ca52a8d-827b-11e5-a0f2-09a54bf70754","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:250","type":"CtIfImpl","sourcecode":"if (!(java.lang.Double.isNaN(double)))\n    java.lang.StringBuilder.append(\"<gh:azimuth>\").append(com.graphhopper.util.Helper.round2(double)).append(\"<\/gh:azimuth>\");\n"},"status":-1},{"failures":[39],"tindex":"6ca5519e-827b-11e5-a0f2-b3dbd41bdd86","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:112","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GHResponse.setInstructions(com.graphhopper.util.InstructionList)"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"6ca52a8b-827b-11e5-a0f2-c9030be0fd2c","diffs":[{"branches":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":["com.graphhopper.routing.ch.PrepareContractionHierarchies_int_addShortcuts(int).e4"]},"type":"branch"}]},{"transformation":"6ca4b54c-827b-11e5-a0f2-07a3bce4f92a","diffs":[{"methodsDiff":{"delete":["com.graphhopper.reader.PillarInfo.getLongitude"]},"type":"staticDiff"}]},{"transformation":"6ca50378-827b-11e5-a0f2-cb6269a9748d","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.PMap.getBool"]},"type":"staticDiff"}]}]}
{"failureDictionary":{"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":3,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":71,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":19,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":14,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":17,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":40,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":38,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":39,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":45,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":25,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":0,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":70,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":10,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":76,"com.graphhopper.routing.util.EncodingManagerTest.testToDetailsStringIncludesEncoderVersionNumber":47,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":36,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":72,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":18,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":15,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":26,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":2,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":61,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":67,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":54,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":35,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":55,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":24,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":57,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":9,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":37,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":58,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":73,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":62,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":65,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":20,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":46,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":68,"com.graphhopper.storage.StorablePropertiesTest.testVersionCheck":41,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":8,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":33,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":13,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":29,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":12,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":34,"com.graphhopper.GraphHopperTest.testPrepareOnly":48,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":27,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":16,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":56,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":23,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":42,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":63,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":6,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":11,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":66,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":69,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":4,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":74,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":28,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":75,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":7,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":1,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":52,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":59,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":53,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":43,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":44,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":5,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":22,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":21,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":60,"com.graphhopper.GraphHopperTest.testLoadOSM":49,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":64,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":50,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":31,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":51,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":30,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":32},"transformations":[{"failures":[],"tindex":"d50187ac-82a5-11e5-8013-91caa550c351","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:323","type":"CtIfImpl","sourcecode":"if (int < (int))\n    return ;\n"},"variableMap":{"nodeIndex":"length","nodeCount":"length"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:105","type":"CtIfImpl","sourcecode":"if (int <= (double[].int))\n    return ;\n"},"status":-2},{"failures":[],"tindex":"d501aebd-82a5-11e5-8013-cbd679e6a1c5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:104","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:251","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = new byte[(2 * (int)) * (int)]"},"status":-2},{"failures":[],"tindex":"d501aebe-82a5-11e5-8013-cfe23296547c","series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:402","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    throw new java.lang.IllegalArgumentException(\"graphhopper location cannot be null\");\n"},"variableMap":{"ghLocation":"com.graphhopper.routing.util.EncodingManager.MOTORCYCLE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:159","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MotorcycleFlagEncoder(com.graphhopper.util.PMap);\nelse\n    throw new java.lang.IllegalArgumentException((\"entry in encoder list not supported \" + java.lang.String));\n"},"status":0},{"failures":[],"tindex":"d501aebf-82a5-11e5-8013-c1c87e6fe111","series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:883","type":"CtReturnImpl","sourcecode":"return new com.graphhopper.routing.util.ShortestWeighting(com.graphhopper.routing.util.FlagEncoder)"},"variableMap":{"encoder":"encoder"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:887","type":"CtReturnImpl","sourcecode":"return new com.graphhopper.routing.util.PriorityWeighting(com.graphhopper.routing.util.FlagEncoder , com.graphhopper.routing.util.WeightingMap)"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"tindex":"d501aec0-82a5-11e5-8013-8548b6e6c916","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.SparseArray:367","type":"CtAssignmentImpl","sourcecode":"int = int + 1"},"variableMap":{"pos":"toMoveNodes","mSize":"removeNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:662","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.SparseIntIntArray.put(int, int)"},"status":-1},{"failures":[],"tindex":"d501d5d1-82a5-11e5-8013-cb5fbf362d10","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Dijkstra:103","type":"CtInvocationImpl","sourcecode":"java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.remove(com.graphhopper.storage.EdgeEntry)"},"status":0},{"failures":[41],"tindex":"d501d5d2-82a5-11e5-8013-1d3eb3f03b09","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:153","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.storage.StorableProperties.(check(\"nodes\", com.graphhopper.util.Constants.int, boolean)))\n    return false;\n"},"status":-1},{"failures":[42,43,44,45,46],"tindex":"d501d5d3-82a5-11e5-8013-9d1ed482434d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:469","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.MMapDataAccess.loadExisting()"},"variableMap":{"this":"da"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:142","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.ensureCapacity(com.graphhopper.storage.Storable<com.graphhopper.storage.DataAccess>.getCapacity())"},"status":-1},{"failures":[],"tindex":"d501d5d4-82a5-11e5-8013-e34f648324f9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHNodeAccess:105","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.GHNodeAccess.getLatitude(int)"},"variableMap":{"this":"nodeAccess","nodeId":"id"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:551","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.NodeAccess.getLongitude(int)"},"status":-2},{"failures":[],"tindex":"d501d5d5-82a5-11e5-8013-45e2ada3f7f2","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:416","type":"CtReturnImpl","sourcecode":"return 80"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:419","type":"CtReturnImpl","sourcecode":"return 50"},"status":-2},{"failures":[],"tindex":"d501d5d6-82a5-11e5-8013-ad5c6ad86461","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:149","type":"CtIfImpl","sourcecode":"if (((int) * (int)) < int)\n    (int)++;\n"},"variableMap":{"latSize":"com.graphhopper.storage.AbstractDataAccess.HEADER_OFFSET","size":"com.graphhopper.storage.AbstractDataAccess.HEADER_OFFSET","lonSize":"com.graphhopper.storage.AbstractDataAccess.HEADER_OFFSET"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:203","type":"CtInvocationImpl","sourcecode":"java.io.RandomAccessFile.seek(com.graphhopper.storage.AbstractDataAccess.int)"},"status":-2},{"failures":[],"tindex":"d501fce7-82a5-11e5-8013-794f5b4a8c78","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.DijkstraOneToMany:92","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.PathNative"},"variableMap":{"p":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.PathNative:60","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.Path.setFound(true)"},"status":-1},{"failures":[47,48,49,50],"tindex":"d501fce8-82a5-11e5-8013-1fb86b27d024","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:154","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:298","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.routing.util.AbstractFlagEncoder com.graphhopper.routing.util.AbstractFlagEncoder : java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>) {\n    if ((java.lang.StringBuilder.length()) > 0)\n        java.lang.StringBuilder.append(\",\");\n    \n    java.lang.StringBuilder.append(com.graphhopper.routing.util.AbstractFlagEncoder.toString()).append(\"|\").append(com.graphhopper.routing.util.AbstractFlagEncoder.getPropertiesString()).append(\"|version=\").append(com.graphhopper.routing.util.AbstractFlagEncoder.getVersion());\n}"},"status":-1},{"failures":[],"tindex":"d501fce9-82a5-11e5-8013-d16c1ace41ee","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:186","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(2000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:137","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.storage.CHGraphImpl com.graphhopper.storage.CHGraphImpl : java.util.Collection<com.graphhopper.storage.CHGraphImpl>) {\n    java.util.List<com.graphhopper.routing.util.Weighting>.add(com.graphhopper.storage.CHGraphImpl.getWeighting());\n}"},"status":-2},{"failures":[51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"tindex":"d501fcea-82a5-11e5-8013-4ffe686a9ddb","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:369","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int > (int)))\n    throw new java.lang.IllegalArgumentException((((((\"Illegal interval: \" + int) + \", \") + int) + \", size:\") + (int)));\n"},"variableMap":{"size":"maxLevel","from":"maxLevel","end":"u_fromNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:598","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n    if (((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int)) || (int == int))\n        continue;\n    \n    double double = double + (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.EdgeIterator, false, com.graphhopper.util.EdgeIterator.getEdge()));\n    if (java.lang.Double.isNaN(double))\n        throw new java.lang.IllegalStateException(((((((\"Weighting should never return NaN values\" + \", in:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", out:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", dist:\") + (com.graphhopper.util.EdgeIterator.getDistance())));\n    \n    if (java.lang.Double.isInfinite(double))\n        continue;\n    \n    double double = double + (com.graphhopper.util.EdgeIterator.getDistance());\n    com.graphhopper.routing.DijkstraOneToMany.setWeightLimit(double);\n    com.graphhopper.routing.DijkstraOneToMany.setLimitVisitedNodes((((int)(double)) * 100)).setEdgeFilter(com.graphhopper.routing.ch.PrepareContractionHierarchies.IgnoreNodeFilter.setAvoidNode(com.graphhopper.routing.ch.PrepareContractionHierarchies.ShortcutHandler.getNode()));\n    com.graphhopper.util.StopWatch.start();\n    (long)++;\n    int int = com.graphhopper.routing.DijkstraOneToMany.findEndNode(int, int);\n    com.graphhopper.util.StopWatch.stop();\n    if ((int == int) && ((com.graphhopper.routing.DijkstraOneToMany.getWeight(int)) <= double))\n        continue;\n    \n    com.graphhopper.routing.ch.PrepareContractionHierarchies.ShortcutHandler.foundShortcut(int, int, double, double, com.graphhopper.util.EdgeIterator, int, int);\n}"},"status":-1},{"failures":[],"tindex":"d50223fb-82a5-11e5-8013-83457cfeb041","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:361","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.CGIARProvider:279","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(double))"},"status":-2},{"failures":[],"tindex":"d50223fc-82a5-11e5-8013-7732df05a1d7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:547","type":"CtIfImpl","sourcecode":"if (double == 0) {\n    return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n} else if (double > 1) {\n    return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n} else {\n    return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n}"},"variableMap":{"longTripsSpeed":"factor","shortTripsSpeed":"factor","this":"this","durationInHours":"factor","unknownSpeed":"speed"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:313","type":"CtIfImpl","sourcecode":"if (double < ((com.graphhopper.routing.util.EncodedDoubleValue.double) / 2))\n    return com.graphhopper.routing.util.AbstractFlagEncoder.setLowSpeed(long, double, false);\n"},"status":-2},{"failures":[],"tindex":"d50223fd-82a5-11e5-8013-b93203468c3e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:214","type":"CtReturnImpl","sourcecode":"return 5"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeFlagEncoder:79","type":"CtReturnImpl","sourcecode":"return 1"},"status":0},{"failures":[],"tindex":"d50223fe-82a5-11e5-8013-8d67bbb2b726","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.QueryGraph:373","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.routing.QueryGraph.(isInitialized()))\n    throw new java.lang.IllegalStateException(\"QueryGraph.lookup has to be called in before heading enforcement\");\n"},"variableMap":{"this":"g"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.PrinctonReader:58","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    int++;\n    java.lang.String java.lang.String = java.io.BufferedReader.readLine();\n    java.lang.String[] java.lang.String[] = java.lang.String.split(\" \");\n    int int = -1;\n    int int = -1;\n    double double = -1;\n    int int = 0;\n    for (int int = 0 ; int < (java.lang.String[].int) ; int++) {\n        if (com.graphhopper.util.Helper.isEmpty(java.lang.String[][int])) {\n            continue;\n        } \n        if (int == 0) {\n            int = java.lang.Integer.parseInt(java.lang.String[][int]);\n        } else if (int == 1) {\n            int = java.lang.Integer.parseInt(java.lang.String[][int]);\n        } else {\n            double = java.lang.Double.parseDouble(java.lang.String[][int]);\n        }\n        int++;\n    }\n    if (int != 3) {\n        throw new java.lang.RuntimeException((((((\"incorrect read!? from:\" + int) + \", to:\") + int) + \", dist:\") + double));\n    } \n    com.graphhopper.storage.Graph.edge(int, int, double, false);\n}"},"status":-2},{"failures":[],"tindex":"d50223ff-82a5-11e5-8013-9fe8f10dffd7","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.CmdArgs:93","type":"CtIfImpl","sourcecode":"if (int <= 0) {\n    continue;\n} "},"variableMap":{"index":"removedEdges"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:253","type":"CtIfImpl","sourcecode":"if ((gnu.trove.list.TIntList.size()) < int)\n    for (int int = 0 ; int < (gnu.trove.list.TIntList.size()) ; int++) {\n        com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(gnu.trove.list.TIntList.get(int));\n        while (com.graphhopper.util.EdgeIterator.next()) {\n            com.graphhopper.util.EdgeIterator.setFlags(com.graphhopper.routing.util.FlagEncoder.setAccess(com.graphhopper.util.EdgeIterator.getFlags(), false, false));\n            int++;\n        }\n    }\n"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"d501d5d1-82a5-11e5-8013-cb5fbf362d10","diffs":[{"methodsDiff":{"delete":["java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.remove"]},"type":"staticDiff"}]}]}
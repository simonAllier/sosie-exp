{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":11,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":49,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":1,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":79,"com.graphhopper.GraphHopperAPITest.testNoLoad":3,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":48,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":25,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":59,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":34,"com.graphhopper.reader.OSMReaderTest.testFerry":72,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":77,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":64,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":29,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":39,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":55,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":5,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":47,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":12,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":14,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":69,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":58,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":74,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":43,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":6,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":23,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":54,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":68,"com.graphhopper.routing.util.EncodingManagerTest.testWrongEncoders":19,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":18,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":51,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":65,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":62,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":24,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":40,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":42,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":60,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":13,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":57,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":45,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointCount":0,"com.graphhopper.util.DouglasPeuckerTest.testPathSimplify":2,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":32,"com.graphhopper.GraphHopperTest.testFootAndCar":76,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":83,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":84,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":35,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":50,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":28,"com.graphhopper.reader.OSMReaderTest.testFoot":73,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":31,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":7,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":8,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":30,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":44,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":71,"com.graphhopper.reader.OSMReaderTest.testOneWay":75,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibility":17,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":52,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":10,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":27,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":82,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":15,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":26,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":9,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":36,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":38,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":67,"com.graphhopper.GraphHopperTest.testNoNPE_ifLoadNotSuccessful":4,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":16,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":80,"com.graphhopper.routing.util.FootFlagEncoderTest.testCombined":22,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":33,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":66,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":46,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":37,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":70,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":56,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":63,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":78,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":21,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":41,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":81,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":53,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":61},"transformations":[{"failures":[],"tindex":"cb2fbcf2-8286-11e5-9051-739c9cb04f5e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMTurnRelation:103","type":"CtIfImpl","sourcecode":"if (int == (com.graphhopper.util.EdgeIterator.int))\n    return java.util.Collections.emptyList();\n"},"variableMap":{"com.graphhopper.util.EdgeIterator.NO_EDGE":"com.graphhopper.reader.OSMReader.EMPTY","edgeIdFrom":"edgeTo"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMTurnRelation:83","type":"CtTryImpl","sourcecode":"try {\n    if (int == (com.graphhopper.reader.OSMReader.int))\n        return java.util.Collections.emptyList();\n    \n    int int = com.graphhopper.util.EdgeIterator.int;\n    com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        if ((com.graphhopper.reader.OSMReader.getOsmIdOfInternalEdge(com.graphhopper.util.EdgeIterator.getEdge())) == (this.long)) {\n            int = com.graphhopper.util.EdgeIterator.getEdge();\n            break;\n        } \n    }\n    if (int == (com.graphhopper.util.EdgeIterator.int))\n        return java.util.Collections.emptyList();\n    \n    final java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry> java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry> = new java.util.ArrayList<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>();\n    com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        int int = com.graphhopper.util.EdgeIterator.getEdge();\n        long long = com.graphhopper.reader.OSMReader.getOsmIdOfInternalEdge(int);\n        if ((((int != int) && ((this.com.graphhopper.reader.OSMTurnRelation.Type) == (com.graphhopper.reader.OSMTurnRelation.Type.com.graphhopper.reader.OSMTurnRelation.Type))) && (long != (this.long))) || ((((this.com.graphhopper.reader.OSMTurnRelation.Type) == (com.graphhopper.reader.OSMTurnRelation.Type.com.graphhopper.reader.OSMTurnRelation.Type)) && (long == (this.long))) && (long >= 0))) {\n            final com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry = new com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry();\n            com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int = int;\n            com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int = int;\n            com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int = com.graphhopper.util.EdgeIterator.getEdge();\n            com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.long = com.graphhopper.routing.util.TurnCostEncoder.getTurnFlags(true, 0);\n            java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>.add(com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry);\n            if ((this.com.graphhopper.reader.OSMTurnRelation.Type) == (com.graphhopper.reader.OSMTurnRelation.Type.com.graphhopper.reader.OSMTurnRelation.Type))\n                break;\n            \n        } \n    }\n    return java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>;\n} catch (java.lang.Exception e) {\n    throw new java.lang.IllegalStateException((\"Could not built turn table entry for relation of node with osmId:\" + (this.long)) , java.lang.Exception);\n}"},"status":-2},{"failures":[0,1,2],"tindex":"cb2fe403-8286-11e5-9051-670e000fb9b3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.RoundaboutInstruction:59","type":"CtIfImpl","sourcecode":"if ((int) != int) {\n    int = 2;\n} "},"variableMap":{"clockwise2":"removed","clockwise":"removed"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:84","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.DouglasPeucker.compressNew(com.graphhopper.util.PointList, int)"},"status":-1},{"failures":[],"tindex":"cb2fe404-8286-11e5-9051-11993e69a283","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:186","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(2000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:300","type":"CtIfImpl","sourcecode":"if ((java.lang.StringBuilder.length()) > 0)\n    java.lang.StringBuilder.append(\",\");\n"},"status":-2},{"failures":[3,4],"tindex":"cb2fe405-8286-11e5-9051-a387a66b7736","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:943","type":"CtAssertImpl","sourcecode":"assert boolean = true : true"},"variableMap":{"enableIfAssert":"fullyLoaded"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:945","type":"CtIfImpl","sourcecode":"if (((com.graphhopper.storage.GraphHopperStorage) == null) || (!(boolean)))\n    throw new java.lang.IllegalStateException(\"Call load or importOrLoad before routing\");\n"},"status":-1},{"failures":[],"tindex":"cb300b16-8286-11e5-9051-499f319b34b6","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:754","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.EdgeAccess.writeEdge(int, int, int, int, int)"},"variableMap":{"edgeAccess":"this","edgeId":"com.graphhopper.util.EdgeIterator.NO_EDGE","updatedB":"fromNodeId","updatedA":"com.graphhopper.util.EdgeIterator.NO_EDGE","linkA":"fromNodeId","linkB":"fromNodeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:143","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.EdgeAccess.writeEdge(int, int, int, com.graphhopper.util.EdgeIterator.int, com.graphhopper.util.EdgeIterator.int)"},"status":-2},{"failures":[5],"tindex":"cb300b17-8286-11e5-9051-a3e39d2aa291","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:95","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.routing.util.EdgeFilter.accept(com.graphhopper.routing.util.AllEdgesIterator))) {\n    continue;\n} "},"status":-1},{"failures":[],"tindex":"cb300b18-8286-11e5-9051-5b5515f8d43b","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper:176","type":"CtLocalVariableImpl","sourcecode":"int int = 1024 * 8"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:72","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"cb300b19-8286-11e5-9051-0921ac9e5000","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.MapEntry:92","type":"CtLocalVariableImpl","sourcecode":"int int = 7"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:263","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long >>> (int)))"},"status":-2},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,5,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"tindex":"cb300b1a-8286-11e5-9051-99a5f5c397fb","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:63","type":"CtIfImpl","sourcecode":"if ((int) >= (int)) {\n    (int)++;\n    int = 0;\n} "},"variableMap":{"currentBucket":"nextWayBit","currentIndex":"usedBits","bucketSize":"nextWayBit"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:194","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.AbstractFlagEncoder.setWayBitMask((int - (int)), int)"},"status":-1},{"failures":[77,7,78,12,79,80,81],"tindex":"cb30322b-8286-11e5-9051-f7dfcadb3423","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:217","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry.int = com.graphhopper.util.EdgeIterator.getEdge()"},"status":-1},{"failures":[],"tindex":"cb30322c-8286-11e5-9051-090bba8d8096","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:186","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(2000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:52","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.AbstractFlagEncoder.setBlockFords(com.graphhopper.util.PMap.getBool(\"blockFords\", true))"},"status":-2},{"failures":[],"tindex":"cb30322d-8286-11e5-9051-a1726e913cfc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:186","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(2000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:291","type":"CtIfImpl","sourcecode":"if ((short < (-1000)) || (short > 12000))\n    short = java.lang.Short.short;\n"},"status":-2},{"failures":[],"tindex":"cb30322e-8286-11e5-9051-9b8c422cc9b4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:136","type":"CtIfImpl","sourcecode":"if ((double > 60) || (double < (-60)))\n    return 0;\n"},"variableMap":{"lat":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:492","type":"CtReturnImpl","sourcecode":"return (java.lang.Math.round((double * 10000.0))) / 10000.0"},"status":-2},{"failures":[],"tindex":"cb30322f-8286-11e5-9051-05f4f7032df3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:116","type":"CtLocalVariableImpl","sourcecode":"int int = (int) == int ? (int) + 1 : int"},"variableMap":{"currentBucket":"com.graphhopper.util.EdgeIterator.NO_EDGE","retBucket":"com.graphhopper.util.EdgeIterator.NO_EDGE","currentIndex":"com.graphhopper.util.EdgeIterator.NO_EDGE","bucketSize":"com.graphhopper.util.EdgeIterator.NO_EDGE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMTurnRelation:89","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.util.EdgeIterator.int"},"status":-2},{"failures":[21,82,83,84],"tindex":"cb305940-8286-11e5-9051-138d13617ba8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:99","type":"CtAssignmentImpl","sourcecode":"long = super.handleSpeed(com.graphhopper.reader.OSMWay, double, long)"},"status":-1},{"failures":[74],"tindex":"cb305941-8286-11e5-9051-5b4b78bd8d8f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMRelation:54","type":"CtIfImpl","sourcecode":"if (int == (javax.xml.stream.XMLStreamConstants.int)) {\n    java.util.ArrayList<com.graphhopper.reader.OSMRelation.Member>.add(new com.graphhopper.reader.OSMRelation.Member(javax.xml.stream.XMLStreamReader));\n} "},"status":-1},{"failures":[],"tindex":"cb305942-8286-11e5-9051-b7f732e876df","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:656","type":"CtLocalVariableImpl","sourcecode":"int int = -((int) + 3)"},"variableMap":{"nextTowerId":"segmentSizePower"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:263","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long >>> (int)))"},"status":-2},{"failures":[],"tindex":"cb305943-8286-11e5-9051-ed7b08d738ae","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.FastestWeighting:66","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.FlagEncoder.getReverseSpeed(com.graphhopper.util.EdgeIteratorState.getFlags())"},"variableMap":{"edge":"edge","flagEncoder":"flagEncoder"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FastestWeighting:66","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.FlagEncoder.getSpeed(com.graphhopper.util.EdgeIteratorState.getFlags())"},"status":0},{"failures":[],"tindex":"cb305944-8286-11e5-9051-df461421c62f","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.EdgeAccess:85","type":"CtIfImpl","sourcecode":"if (int < 0)\n    throw new java.lang.IllegalArgumentException((((\"Distance cannot be empty: \" + double) + \", maybe overflow issue? integer: \") + int));\n"},"variableMap":{"distance":"ele","integ":"com.graphhopper.reader.OSMReader.PILLAR_NODE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:592","type":"CtIfImpl","sourcecode":"if (int == (com.graphhopper.reader.OSMReader.int)) {\n    com.graphhopper.reader.OSMReader.addTowerNode(com.graphhopper.reader.OSMNode.getId(), double, double, double);\n} else if (int == (com.graphhopper.reader.OSMReader.int)) {\n    com.graphhopper.reader.PillarInfo.setNode(int, double, double, double);\n    com.graphhopper.reader.OSMReader.getNodeMap().put(com.graphhopper.reader.OSMNode.getId(), ((int) + 3));\n    (int)++;\n} "},"status":0},{"failures":[],"tindex":"cb308055-8286-11e5-9051-6de0a57251c5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.StorableProperties:137","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.put(\"locationIndex.version\", com.graphhopper.util.Constants.int)"},"variableMap":{"com.graphhopper.util.Constants.VERSION_LOCATION_IDX":"com.graphhopper.util.Constants.VERSION_NAME_IDX","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:138","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.put(\"nameIndex.version\", com.graphhopper.util.Constants.int)"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
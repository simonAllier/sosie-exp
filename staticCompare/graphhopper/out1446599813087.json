{"failureDictionary":{"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":281,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":330,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":290,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":158,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":176,"com.graphhopper.reader.OSMReaderTest.testFerry":235,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":230,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":231,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":278,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":8,"com.graphhopper.routing.QueryGraphTest.testOneWay":289,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":136,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":17,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":154,"com.graphhopper.reader.OSMReaderTest.testWithBounds":244,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":40,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testInfinityWeight":61,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":267,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":284,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":268,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":102,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":106,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":297,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":0,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":80,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":189,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":247,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":181,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":52,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":135,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":3,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":185,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":305,"com.graphhopper.GraphHopperTest.testPrepare":256,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":46,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":329,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":69,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":87,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":293,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":287,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":312,"com.graphhopper.storage.GraphHopperStorageTest.testInfinityWeight":100,"com.graphhopper.util.InstructionListTest.testWayList":222,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":221,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":321,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":24,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":218,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":126,"com.graphhopper.GraphHopperAPITest.testDisconnected179":215,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":105,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":272,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":23,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":261,"com.graphhopper.storage.RAMIntDataAccessTest.testBoundsCheck":205,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":152,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":269,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":313,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":79,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":318,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":155,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":233,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":347,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":4,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":271,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":63,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":9,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":120,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":339,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":18,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":257,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":75,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":171,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":54,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":60,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":56,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":55,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":308,"com.graphhopper.GraphHopperTest.testLoadOSM":260,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":163,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":306,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":192,"com.graphhopper.storage.RAMIntDataAccessTest.testEnsureCapacity":209,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":92,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":115,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":156,"com.graphhopper.reader.OSMReaderTest.testSort":238,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":91,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":324,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":243,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":270,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":132,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":97,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":67,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":302,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":197,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":198,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":11,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":29,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":286,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":334,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":234,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":66,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":338,"com.graphhopper.routing.PathTest.testWayList":344,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":59,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":202,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":125,"com.graphhopper.storage.RAMIntDataAccessTest.testExceptionIfNoEnsureCapacityWasCalled":208,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":335,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeReturn":144,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":76,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":311,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":101,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":153,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":280,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":319,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":191,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPropertiesWithNoInit":51,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":35,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":129,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":13,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":86,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":30,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":108,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":37,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":74,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":203,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":151,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":84,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":326,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":15,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":19,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":346,"com.graphhopper.util.GHUtilityTest.testSort":228,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":160,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":288,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":316,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":148,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":315,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":44,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":64,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":72,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":291,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":177,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":33,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":50,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":173,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":182,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":107,"com.graphhopper.storage.RAMIntDataAccessTest.testSegments":211,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":14,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":145,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":285,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":180,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":276,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":28,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":262,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":89,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":174,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":41,"com.graphhopper.reader.dem.HeightTileTest.testCalcMean":5,"com.graphhopper.GraphHopperAPITest.testLoad":214,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":259,"com.graphhopper.storage.RAMIntDataAccessTest.testRenameFlush":207,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":47,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":333,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":81,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":266,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":112,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":71,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":31,"com.graphhopper.reader.OSMReaderTest.testBarriers":239,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":273,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadClose":212,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":26,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes":133,"com.graphhopper.routing.PathTest.testFound":340,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":12,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":264,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":186,"com.graphhopper.util.GHUtilityTest.testCopy":227,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":317,"com.graphhopper.routing.PathTest.testFindInstruction":345,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":309,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":32,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":217,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":43,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":25,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":78,"com.graphhopper.util.InstructionListTest.testEmptyList":220,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":320,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":175,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":98,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":85,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":325,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":57,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":88,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":225,"com.graphhopper.storage.GraphHopperStorageCHTest.testFlags":122,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":328,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":143,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":45,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":299,"com.graphhopper.reader.PrinctonReaderTest.testRead":232,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":99,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":124,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":38,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":1,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":111,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":68,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes2":119,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":277,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":304,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":48,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":139,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadFlush":213,"com.graphhopper.util.InstructionListTest.testWayList2":223,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":195,"com.graphhopper.reader.OSMReaderTest.testFoot":236,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":164,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":292,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":161,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":103,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":149,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":162,"com.graphhopper.reader.OSMReaderTest.testOneWay":246,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":36,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":7,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":117,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":62,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":82,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetLocations":130,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":275,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":95,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":121,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":94,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":58,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":42,"com.graphhopper.storage.GraphHopperStorageTest.testPropertiesWithNoInit":90,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":303,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":169,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":70,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":77,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":240,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":343,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":298,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":199,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":332,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":39,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":10,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":140,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":295,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":307,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":183,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":296,"com.graphhopper.routing.PathBidirRefTest.testExtract":336,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":216,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":254,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":274,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":159,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":249,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnsureSize":113,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":65,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":253,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":201,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":252,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":22,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":251,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":250,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":168,"com.graphhopper.util.GHUtilityTest.testSort2":226,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":327,"com.graphhopper.reader.OSMReaderTest.testMain":237,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":146,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":282,"com.graphhopper.storage.GraphHopperStorageCHTest.testInfinityWeight":147,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":49,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":142,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":109,"com.graphhopper.storage.RAMIntDataAccessTest.testTrimTo":210,"com.graphhopper.routing.PathBidirRefTest.testExtract2":337,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":141,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":172,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":310,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":193,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":21,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":165,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":179,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":265,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":204,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":93,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":131,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":134,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":6,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":187,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":53,"com.graphhopper.storage.RAMIntDataAccessTest.testCopy":206,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":245,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":116,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":184,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":331,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":301,"com.graphhopper.storage.GraphHopperStorageTest.testClone":73,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":104,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":157,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":96,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":150,"com.graphhopper.storage.GraphHopperStorageCHTest.testCheckFirstNode":138,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":83,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":2,"com.graphhopper.GraphHopperTest.testFootAndCar":258,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":16,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":114,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":20,"com.graphhopper.routing.PathTest.testTime":341,"com.graphhopper.util.InstructionListTest.testCreateGPX":349,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":123,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":300,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":166,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":190,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":323,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":34,"com.graphhopper.storage.GraphHopperStorageCHTest.testPropertiesWithNoInit":137,"com.graphhopper.util.GHUtilityTest.testSortDirected":229,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":128,"com.graphhopper.GraphHopperTest.testPrepareOnly":248,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":178,"com.graphhopper.GraphHopperTest.testVia":255,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":279,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":322,"com.graphhopper.util.InstructionListTest.testCreateGPXWithEle":348,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":242,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":200,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":188,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":110,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":283,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":224,"com.graphhopper.GraphHopperTest.testFootOnly":263,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":194,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":241,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":170,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":196,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":127,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":342,"com.graphhopper.util.InstructionListTest.testFind":219,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":314,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":294,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":27,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":118,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":167},"transformations":[{"failures":[0,1,2,3,4],"tindex":"bb6d9d8a-8291-11e5-bb8a-0d06dac81365","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.FastestWeighting:74","type":"CtIfImpl","sourcecode":"if (boolean)\n    double += double;\n"},"variableMap":{"penalizeEdge":"is3D","time":"tmp","heading_penalty":"tmp"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:246","type":"CtIfImpl","sourcecode":"if (boolean) {\n    double = double[][int];\n    double[][int] = double[][int];\n    double[][int] = double;\n} "},"status":-1},{"failures":[],"tindex":"bb6dc49b-8291-11e5-bb8a-a5c64bd51e26","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:1106","type":"CtIfImpl","sourcecode":"if ((int) == (com.graphhopper.storage.EdgeAccess.int))\n    continue;\n"},"variableMap":{"baseNode":"maxBits","com.graphhopper.storage.EdgeAccess.NO_NODE":"maxBits"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtil:257","type":"CtIfImpl","sourcecode":"if (long == 0) {\n    long <<= int;\n    break;\n} "},"status":0},{"failures":[],"tindex":"bb6dc49c-8291-11e5-bb8a-67f383f3457f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:81","type":"CtAssignmentImpl","sourcecode":"gnu.trove.map.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge> = new gnu.trove.map.hash.TIntObjectHashMap<com.graphhopper.routing.AStar.AStarEdge>((int / 10))"},"status":-1},{"failures":[],"tindex":"bb6dc49d-8291-11e5-bb8a-4122b7b6a172","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntIntBinHeap:235","type":"CtAssignmentImpl","sourcecode":"this.int = 0"},"variableMap":{"size":"maxLeafEntries"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHLongIntBTree:54","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":0},{"failures":[],"tindex":"bb6dc49e-8291-11e5-bb8a-3de4b89f7de9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.shapes.BBox:55","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.shapes.BBox.this(double, double, double, double, double, double, true)"},"variableMap":{"minLon":"maxLon","maxEle":"minLat","maxLat":"java.lang.Double.NaN","minLat":"minLat","minEle":"java.lang.Double.NaN","this":"this","maxLon":"maxLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.shapes.BBox:50","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.shapes.BBox.this(double, double, double, double, java.lang.Double.double, java.lang.Double.double, false)"},"status":-2},{"failures":[5],"tindex":"bb6dc49f-8291-11e5-bb8a-0b71f0eb2f9d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:110","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.dem.HeightTile.includePoint((int - 2), java.util.concurrent.atomic.AtomicInteger)"},"variableMap":{"daPointer":"daPointer","this":"this","counter":"counter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.HeightTile:113","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.dem.HeightTile.includePoint((int + 2), java.util.concurrent.atomic.AtomicInteger)"},"status":-1},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"tindex":"bb6debb0-8291-11e5-bb8a-71c297230da2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:328","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.routing.util.AbstractFlagEncoder.(isFerry(long))) {\n    double double = com.graphhopper.routing.util.BikeCommonFlagEncoder.getSpeed(com.graphhopper.reader.OSMWay);\n    double = com.graphhopper.routing.util.AbstractFlagEncoder.applyMaxSpeed(com.graphhopper.reader.OSMWay, double, false);\n    long = com.graphhopper.routing.util.BikeCommonFlagEncoder.handleSpeed(com.graphhopper.reader.OSMWay, double, long);\n    long = com.graphhopper.routing.util.BikeCommonFlagEncoder.handleBikeRelated(com.graphhopper.reader.OSMWay, long, (long > (com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())));\n    boolean boolean = com.graphhopper.reader.OSMWay.hasTag(\"junction\", \"roundabout\");\n    if (boolean) {\n        long = com.graphhopper.routing.util.BikeCommonFlagEncoder.setBool(long, com.graphhopper.routing.util.FlagEncoder.int, true);\n    } \n} else {\n    long = com.graphhopper.routing.util.AbstractFlagEncoder.handleFerryTags(com.graphhopper.reader.OSMWay, java.util.Map<java.lang.String, java.lang.Integer>.get(\"living_street\"), java.util.Map<java.lang.String, java.lang.Integer>.get(\"track\"), java.util.Map<java.lang.String, java.lang.Integer>.get(\"primary\"));\n    long |= long;\n}"},"status":-1},{"failures":[25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,1,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,2,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,3,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,4,6,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347],"tindex":"bb6debb1-8291-11e5-bb8a-158f458d0cab","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.RoundaboutInstruction:41","type":"CtOperatorAssignmentImpl","sourcecode":"this.int += 1"},"variableMap":{"exitNumber":"index"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:233","type":"CtAssignmentImpl","sourcecode":"int[][][int][int] = int"},"status":-1},{"failures":[],"tindex":"bb6e12c2-8291-11e5-bb8a-4f09dd1d626e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:675","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.EdgeIterable.setBaseNode(int)"},"variableMap":{"adjNodesToDelIter":"iter","removeNode":"start"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:84","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.EdgeIterator = com.graphhopper.storage.GraphHopperStorage.createEdgeExplorer(com.graphhopper.routing.util.EdgeFilter).setBaseNode(int)"},"status":-2},{"failures":[214,215,249,250,251,252,253,254,257,258,259,262,309,311],"tindex":"bb6e12c3-8291-11e5-bb8a-1d60435f7b84","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:309","type":"CtAssignmentImpl","sourcecode":"this.com.graphhopper.routing.PathBidirRef = com.graphhopper.routing.PathBidirRef"},"variableMap":{"bestPath":"bestPath"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:124","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.PathBidirRef = new com.graphhopper.routing.PathBidirRef(com.graphhopper.storage.Graph , com.graphhopper.routing.util.FlagEncoder)"},"status":-1},{"failures":[],"tindex":"bb6e12c4-8291-11e5-bb8a-ebc6beb332bf","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.PillarInfo:122","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.Helper.intToEle(int)"},"variableMap":{"intVal":"id"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:533","type":"CtIfImpl","sourcecode":"if (int > (-(com.graphhopper.reader.OSMReader.int))) {\n    int = int - 3;\n    return com.graphhopper.reader.PillarInfo.getLatitude(int);\n} else\n    return java.lang.Double.double;\n"},"status":-2},{"failures":[],"tindex":"bb6e12c5-8291-11e5-bb8a-d34b656ec01d","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.MiniPerfTest:44","type":"CtLocalVariableImpl","sourcecode":"long long = java.lang.System.nanoTime()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDMap:111","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.coll.OSMIDMap.com.graphhopper.util.BitUtil.toLong(byte[])"},"status":-2},{"failures":[],"tindex":"bb6e12c6-8291-11e5-bb8a-17c6367276d5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:186","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(2000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.TranslationMap:164","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(java.lang.Object[], \"tmp\")"},"status":-2},{"failures":[],"tindex":"bb6e39d7-8291-11e5-bb8a-cb75aacc7569","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(5);\n} catch (java.lang.InterruptedException iex) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:342","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    int -= int;\n    java.nio.ByteBuffer.put(byte[], 0, int);\n    java.nio.ByteBuffer = java.util.List<java.nio.ByteBuffer>.get((int + 1));\n    java.nio.ByteBuffer.position(0);\n    java.nio.ByteBuffer.put(byte[], int, int);\n} else {\n    java.nio.ByteBuffer.put(byte[], 0, int);\n}"},"status":0},{"failures":[],"tindex":"bb6e39d8-8291-11e5-bb8a-4fecfd9fdb8c","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper7:69","type":"CtInvocationImpl","sourcecode":"javax.xml.stream.XMLStreamReader.close()"},"variableMap":{"r":"parser"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMRelation:54","type":"CtIfImpl","sourcecode":"if (int == (javax.xml.stream.XMLStreamConstants.int)) {\n    java.util.ArrayList<com.graphhopper.reader.OSMRelation.Member>.add(new com.graphhopper.reader.OSMRelation.Member(javax.xml.stream.XMLStreamReader));\n} "},"status":0},{"failures":[],"tindex":"bb6e39d9-8291-11e5-bb8a-79f83887bda6","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:64","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= long"},"variableMap":{"shift":"capacity","tmpValue":"capacity"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:416","type":"CtAssignmentImpl","sourcecode":"long = int"},"status":0},{"failures":[],"tindex":"bb6e39da-8291-11e5-bb8a-7b0a79e6404e","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:105","type":"CtLocalVariableImpl","sourcecode":"java.util.List<com.graphhopper.routing.util.Weighting> java.util.List<com.graphhopper.routing.util.Weighting> = new java.util.ArrayList<com.graphhopper.routing.util.Weighting>()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:136","type":"CtLocalVariableImpl","sourcecode":"java.util.List<com.graphhopper.routing.util.Weighting> java.util.List<com.graphhopper.routing.util.Weighting> = new java.util.ArrayList<com.graphhopper.routing.util.Weighting>(java.util.Collection<com.graphhopper.storage.CHGraphImpl>.size())"},"status":-2},{"failures":[348,349,224],"tindex":"bb6e39db-8291-11e5-bb8a-bde20b38aeac","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Instruction:199","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('(')"},"variableMap":{"sb":"track"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:219","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"\\' lon=\\'\")"},"status":-1},{"failures":[],"tindex":"bb6e60ec-8291-11e5-bb8a-ddc2f2bd6c1a","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.EdgeAccess:52","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"variableMap":{"flagsSizeIsLong":"closed"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:295","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":0},{"failures":[],"tindex":"bb6e60ed-8291-11e5-bb8a-af56db714e14","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DouglasPeucker:147","type":"CtIfImpl","sourcecode":"if (double < double) {\n    int = int;\n    double = double;\n} "},"variableMap":{"maxDist":"dist","dist":"weight","indexWithMaxDist":"skippedEdge2","i":"skippedEdge1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:662","type":"CtIfImpl","sourcecode":"if (((com.graphhopper.util.CHEdgeIterator.isShortcut()) && ((com.graphhopper.util.CHEdgeIterator.getAdjNode()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) && (com.graphhopper.util.CHEdgeIterator.canBeOverwritten(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long))) {\n    if ((com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double) >= (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.CHEdgeIterator, false, com.graphhopper.util.EdgeIterator.int)))\n        continue NEXT_SC;\n    \n    if (((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) || ((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) {\n        throw new java.lang.IllegalStateException((((((((((((((((((\"Shortcut cannot update itself! \" + (com.graphhopper.util.CHEdgeIterator.getEdge())) + \", skipEdge1:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", skipEdge2:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", edge \") + com.graphhopper.util.CHEdgeIterator) + \":\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.CHEdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", sc:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut) + \", skippedEdge1: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", skippedEdge2: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", neighbors:\") + (com.graphhopper.util.GHUtility.getNeighbors(com.graphhopper.util.CHEdgeIterator))));\n    } \n    com.graphhopper.util.CHEdgeIterator.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n    com.graphhopper.util.CHEdgeIterator.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n    com.graphhopper.util.CHEdgeIterator.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n    com.graphhopper.util.CHEdgeIterator.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n    com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIterator.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n    boolean = true;\n    break;\n} "},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"bb6dc49b-8291-11e5-bb8a-a5c64bd51e26","diffs":[{"branchesDiff":{"delete":["t0"]},"type":"staticDiff"},{"branches":{"com.graphhopper.reader.OSMReaderTest.testNegativeIds":["com.graphhopper.util.BitUtil_long_reverse(long,int).e1"],"com.graphhopper.util.BitUtilBigTest.testReverse":["com.graphhopper.util.BitUtil_long_reverse(long,int).e1"],"com.graphhopper.GraphHopperAPITest.testLoad":["com.graphhopper.util.BitUtil_long_reverse(long,int).e1"],"com.graphhopper.util.BitUtilLittleTest.testReverse":["com.graphhopper.util.BitUtil_long_reverse(long,int).e1"],"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":["com.graphhopper.util.BitUtil_long_reverse(long,int).e1"],"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":["com.graphhopper.util.BitUtil_long_reverse(long,int).e1"],"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":["com.graphhopper.util.BitUtil_long_reverse(long,int).e1"],"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":["com.graphhopper.util.BitUtil_long_reverse(long,int).e1"]},"type":"branch"}]},{"transformation":"bb6dc49d-8291-11e5-bb8a-4122b7b6a172","diffs":[{"branches":{"com.graphhopper.reader.OSMReaderTest.testNegativeIds":["com.graphhopper.coll.GHLongIntBTree$BTreeEntry_void_ensureSize(int).e1","com.graphhopper.coll.GHLongIntBTree$BTreeEntry_void_ensureSize(int).e2","com.graphhopper.coll.GHLongIntBTree_com.graphhopper.coll.GHLongIntBTree(int).t3","com.graphhopper.coll.GHLongIntBTree_com.graphhopper.coll.GHLongIntBTree(int).e4","com.graphhopper.coll.GHLongIntBTree_com.graphhopper.coll.GHLongIntBTree(int).e3"],"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":["com.graphhopper.coll.GHLongIntBTree_com.graphhopper.coll.GHLongIntBTree(int).t3","com.graphhopper.coll.GHLongIntBTree_com.graphhopper.coll.GHLongIntBTree(int).e4","com.graphhopper.coll.GHLongIntBTree_com.graphhopper.coll.GHLongIntBTree(int).e3"],"com.graphhopper.GraphHopperTest.testFootAndCar":["com.graphhopper.coll.GHLongIntBTree$BTreeEntry_void_ensureSize(int).e1","com.graphhopper.coll.GHLongIntBTree$BTreeEntry_void_ensureSize(int).e2","com.graphhopper.coll.GHLongIntBTree_com.graphhopper.coll.GHLongIntBTree(int).t3","com.graphhopper.coll.GHLongIntBTree_com.graphhopper.coll.GHLongIntBTree(int).e4","com.graphhopper.coll.GHLongIntBTree_com.graphhopper.coll.GHLongIntBTree(int).e3"]},"type":"branch"}]}]}
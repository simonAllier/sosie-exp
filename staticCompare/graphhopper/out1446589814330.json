{"failureDictionary":{"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":12,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":77,"com.graphhopper.reader.OSMReaderTest.testFerry":22,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":71,"com.graphhopper.routing.QueryGraphTest.testOneWay":15,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":18,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":98,"com.graphhopper.reader.OSMReaderTest.testWithBounds":33,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":13,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":66,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":97,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":47,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":60,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":46,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":11,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":93,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":16,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":68,"com.graphhopper.GraphHopperTest.testPrepare":5,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":49,"com.graphhopper.storage.RAMDirectoryTest.testRequestedDataAccessHasToBeTheIdenticalType":42,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":63,"com.graphhopper.reader.OSMReaderTest.testFoot":23,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":14,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":79,"com.graphhopper.util.InstructionListTest.testWayList":58,"com.graphhopper.reader.OSMReaderTest.testOneWay":35,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":87,"com.graphhopper.storage.StorablePropertiesTest.testVersionCheck":38,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":94,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":80,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":92,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":19,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":65,"com.graphhopper.storage.MMapDirectoryTest.testRequestedDataAccessHasToBeTheIdenticalType":40,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":51,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":27,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":28,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":88,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":6,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":53,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":62,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":61,"com.graphhopper.GraphHopperTest.testLoadOSM":9,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":0,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":3,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":2,"com.graphhopper.reader.OSMReaderTest.testSort":25,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":48,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":91,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":1,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":32,"com.graphhopper.reader.OSMReaderTest.testMain":24,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":70,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":44,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testSetSpeed0_issue367":37,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":50,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":90,"com.graphhopper.util.BitUtilLittleTest.testFromBitString":99,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":75,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":69,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":54,"com.graphhopper.routing.PathTest.testWayList":82,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":86,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":29,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":72,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":34,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":67,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":89,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":95,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":59,"com.graphhopper.storage.RAMDirectoryTest.testNoDuplicates":41,"com.graphhopper.GraphHopperTest.testFootAndCar":7,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":64,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":96,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":56,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":84,"com.graphhopper.storage.MMapDataAccessTest.testSet_GetBytes":45,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":76,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":78,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":55,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":74,"com.graphhopper.GraphHopperTest.testPrepareOnly":17,"com.graphhopper.GraphHopperTest.testVia":4,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":81,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":10,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":31,"com.graphhopper.storage.MMapDirectoryTest.testNoDuplicates":39,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":8,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":73,"com.graphhopper.GraphHopperTest.testFootOnly":20,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":30,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":52,"com.graphhopper.reader.OSMReaderTest.testBarriers":26,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":36,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":21,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":83,"com.graphhopper.util.GHUtilityTest.testCopy":57,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":85,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":43},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"tindex":"73b43902-827a-11e5-aff0-8b0efab7a7ac","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:700","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.clear()"},"variableMap":{"pointList":"clonePL"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:350","type":"CtIfImpl","sourcecode":"if (boolean)\n    for (int int = 0 ; int < (int) ; int++) {\n        com.graphhopper.util.PointList.add(double[][int], double[][int], double[][int]);\n    }\nelse\n    for (int int = 0 ; int < (int) ; int++) {\n        com.graphhopper.util.PointList.add(double[][int], double[][int]);\n    }\n"},"status":-1},{"failures":[16,17,18,4,5,6,7,8,9,19,10,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"tindex":"73b46013-827a-11e5-aff0-1d5348cae6bd","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:171","type":"CtIfImpl","sourcecode":"if (int < 0)\n    throw new java.lang.IllegalArgumentException(\"via node cannot be negative\");\n"},"variableMap":{"nodeVia":"com.graphhopper.reader.OSMReader.TOWER_NODE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:712","type":"CtIfImpl","sourcecode":"if (int > (-(com.graphhopper.reader.OSMReader.int))) {\n    boolean boolean = (int == 0) || (int == int);\n    if (!boolean) {\n        int = int;\n    } \n    int = com.graphhopper.reader.OSMReader.handlePillarNode(int, long, com.graphhopper.util.PointList, boolean);\n} "},"status":-1},{"failures":[],"tindex":"73b46014-827a-11e5-aff0-1d911e98a2ed","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:767","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.storage.NodeAccess.getLat(int)"},"variableMap":{"node":"fromNode","nodeAccess":"nodeAccess"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BeelineWeightApproximator:44","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.storage.NodeAccess.getLongitude(int)"},"status":-2},{"failures":[36,37],"tindex":"73b48725-827a-11e5-aff0-fdc816081a7e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:252","type":"CtReturnImpl","sourcecode":"return \"bike2\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:335","type":"CtReturnImpl","sourcecode":"return \"motorcycle\""},"status":-1},{"failures":[38],"tindex":"73b48726-827a-11e5-aff0-3b942acc0cc1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:181","type":"CtIfImpl","sourcecode":"if (boolean) {\n    return false;\n} "},"status":-1},{"failures":[],"tindex":"73b48727-827a-11e5-aff0-3f5dd49c2402","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:50","type":"CtTryImpl","sourcecode":"try {\n    com.graphhopper.util.EdgeExplorer com.graphhopper.util.EdgeExplorer = com.graphhopper.storage.Graph.createEdgeExplorer();\n    for ( ; int < int ; int++) {\n        double double = com.graphhopper.storage.NodeAccess.getLatitude(int);\n        if ((double > 90) || (double < (-90)))\n            java.util.List<java.lang.String>.add((\"latitude is not within its bounds \" + double));\n        \n        double double = com.graphhopper.storage.NodeAccess.getLongitude(int);\n        if ((double > 180) || (double < (-180)))\n            java.util.List<java.lang.String>.add((\"longitude is not within its bounds \" + double));\n        \n        com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int);\n        while (com.graphhopper.util.EdgeIterator.next()) {\n            if ((com.graphhopper.util.EdgeIterator.getAdjNode()) >= int) {\n                java.util.List<java.lang.String>.add(((((\"edge of \" + int) + \" has a node \") + (com.graphhopper.util.EdgeIterator.getAdjNode())) + \" greater or equal to getNodes\"));\n            } \n            if ((com.graphhopper.util.EdgeIterator.getAdjNode()) < 0) {\n                java.util.List<java.lang.String>.add((((\"edge of \" + int) + \" has a negative node \") + (com.graphhopper.util.EdgeIterator.getAdjNode())));\n            } \n        }\n    }\n} catch (java.lang.Exception ex) {\n    throw new java.lang.RuntimeException((\"problem with node \" + int) , java.lang.Exception);\n}"},"status":0},{"failures":[],"tindex":"73b48728-827a-11e5-aff0-316f30ff082d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:214","type":"CtReturnImpl","sourcecode":"return 5"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:161","type":"CtReturnImpl","sourcecode":"return 0"},"status":0},{"failures":[39,40,41,42],"tindex":"73b48729-827a-11e5-aff0-2f7fd35aa8c0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:100","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.DataAccess != null) {\n    if (!(com.graphhopper.storage.DAType.equals(com.graphhopper.storage.DataAccess.getType())))\n        throw new java.lang.IllegalStateException((((((\"Found existing DataAccess object \\'\" + java.lang.String) + \"\\' but types did not match. Requested:\") + com.graphhopper.storage.DAType) + \", was:\") + (com.graphhopper.storage.DataAccess.getType())));\n    \n    return com.graphhopper.storage.DataAccess;\n} "},"status":-1},{"failures":[],"tindex":"73b4872a-827a-11e5-aff0-15e92f8fbf3c","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.SynchedDAWrapper:117","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.DataAccess.copyTo(com.graphhopper.storage.DataAccess)"},"variableMap":{"inner":"da","da":"da"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:174","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.DataAccess"},"status":-2},{"failures":[43,44,45,46,47,48,49,50,51,52,53,54,55,56],"tindex":"73b4ae3b-827a-11e5-aff0-4585cbcc1aab","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:362","type":"CtInvocationImpl","sourcecode":"java.nio.ByteBuffer.position(int)"},"status":-1},{"failures":[],"tindex":"73b4ae3c-827a-11e5-aff0-3d654db58f79","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.Path:246","type":"CtIfImpl","sourcecode":"if (double == 0)\n    throw new java.lang.IllegalStateException(\"Speed cannot be 0 for unblocked edge, use access properties to mark edge blocked! Should only occur for shortest path calculation. See #242.\");\n"},"variableMap":{"speed":"subqueryLatA"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:735","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.LocationIndexTree.findNetworkEntriesSingleRegion(gnu.trove.set.hash.TIntHashSet, double, double)"},"status":0},{"failures":[],"tindex":"73b4ae3d-827a-11e5-aff0-b30aa6117e54","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:288","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"srtm_\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:362","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"highway\")"},"status":-2},{"failures":[],"tindex":"73b4ae3e-827a-11e5-aff0-934d316e4a6e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:71","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.saveProperties(java.util.Map<java.lang.String, java.lang.String>, java.io.StringWriter)"},"status":-2},{"failures":[],"tindex":"73b4ae3f-827a-11e5-aff0-db9fe79a2ad2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:108","type":"CtAssignmentImpl","sourcecode":"long = (long + long) >>> 1"},"variableMap":{"high":"flags","guess":"flags","low":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:104","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(long, double)"},"status":0},{"failures":[57,58,43,59,60,61,62,44,63,64,65,66,46,47,48,49,56,67,68,69,70,11,71,72,12,73,13,74,75,14,76,77,78,79,80,81,82,27,28],"tindex":"73b4ae40-827a-11e5-aff0-fbd0c10781e9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:123","type":"CtAssignmentImpl","sourcecode":"int = (int * (int)) + int"},"variableMap":{"ret":"tmpOffset","retBucket":"tmpOffset","i":"tmpOffset","bucketSize":"tmpOffset"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:849","type":"CtOperatorAssignmentImpl","sourcecode":"int += 4"},"status":-1},{"failures":[],"tindex":"73b4d551-827a-11e5-aff0-3761154cc3a1","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtil:255","type":"CtOperatorAssignmentImpl","sourcecode":"long |= long & 1"},"variableMap":{"res":"osmWayId","value":"osmWayId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:818","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.OSMReader.getEdgeIdToOsmWayIdMap().put(int, long)"},"status":0},{"failures":[83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,23,28],"tindex":"73b4d552-827a-11e5-aff0-2913a2696dc6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:708","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException(\"graph is already successfully loaded\");\n"},"variableMap":{"fullyLoaded":"isPusingSection"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:599","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"bicycle\", java.util.Set<java.lang.String>)) {\n    if (boolean && (!(com.graphhopper.reader.OSMWay.hasTag(\"bicycle\", \"designated\"))))\n        com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\n    else\n        com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\n    \n} else if (\"cycleway\".equals(java.lang.String))\n    com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\nelse if (java.util.Set<java.lang.String>.contains(java.lang.String))\n    com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\n"},"status":-1},{"failures":[9,10],"tindex":"73b4d553-827a-11e5-aff0-5db753187ee0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:773","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GraphHopper.postProcessing()"},"status":-1},{"failures":[99],"tindex":"73b4d554-827a-11e5-aff0-17246927bcbf","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtilBig:57","type":"CtAssignmentImpl","sourcecode":"byte[][++int] = ((byte)(int))"},"variableMap":{"offset":"b","bytes":"bytes","value":"b"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilLittle:107","type":"CtAssignmentImpl","sourcecode":"byte[][int] = byte"},"status":-1},{"failures":[],"tindex":"73b4d555-827a-11e5-aff0-e53785f1b2e8","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:229","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.OSMReader.getOsmWayIdSet().add(com.graphhopper.reader.OSMTurnRelation.getOsmIdTo())"},"variableMap":{"turnRelation":"turnRelation","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:228","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.OSMReader.getOsmWayIdSet().add(com.graphhopper.reader.OSMTurnRelation.getOsmIdFrom())"},"status":0}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"73b48727-827a-11e5-aff0-3f5dd49c2402","diffs":[{"branches":{"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":["com.graphhopper.storage.GHNodeAccess_double_getLongitude(int).b"],"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":["com.graphhopper.storage.GHNodeAccess_double_getLongitude(int).b","com.graphhopper.util.Helper_double_intToDegree(int).b","com.graphhopper.storage.GHNodeAccess_double_getLatitude(int).b","com.graphhopper.util.Helper_double_intToDegree(int).e1","com.graphhopper.util.Helper_double_intToDegree(int).e2"],"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":["com.graphhopper.storage.GHNodeAccess_double_getLongitude(int).b"],"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":["com.graphhopper.storage.GHNodeAccess_double_getLongitude(int).b","com.graphhopper.util.Helper_double_intToDegree(int).b","com.graphhopper.storage.GHNodeAccess_double_getLatitude(int).b","com.graphhopper.util.Helper_double_intToDegree(int).e1","com.graphhopper.util.Helper_double_intToDegree(int).e2"]},"type":"branch"},{"methodsDiff":{"delete":["com.graphhopper.util.EdgeIteratorState.getAdjNode","com.graphhopper.util.PointAccess.getLatitude","com.graphhopper.util.PointAccess.getLongitude","com.graphhopper.util.EdgeIterator.next","java.util.List<java.lang.String>.add","com.graphhopper.util.EdgeExplorer.setBaseNode"]},"branchesDiff":{"delete":["c6","l4","l5","t0","t1","t2","t3"]},"type":"staticDiff"}]},{"transformation":"73b4ae3f-827a-11e5-aff0-db9fe79a2ad2","diffs":[{"methodsDiff":{"delete":["com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed"]},"type":"staticDiff"}]},{"transformation":"73b4ae3c-827a-11e5-aff0-3d654db58f79","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.index.LocationIndexTree.findNetworkEntriesSingleRegion"]},"type":"staticDiff"}]}]}
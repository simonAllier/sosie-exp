{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":85,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidTunnel":34,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":74,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":57,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTram":39,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPreferenceForSlowSpeed":28,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":10,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":7,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":68,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testService":47,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":73,"com.graphhopper.routing.PathTest.testWayList":71,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":61,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTram":48,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":84,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":22,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":13,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":5,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidanceOfHighMaxSpeed":46,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":63,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":69,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":65,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":42,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":0,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":80,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":20,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":51,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidMotorway":26,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":1,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":75,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":81,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTram":24,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":64,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":72,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":77,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPreferenceForSlowSpeed":43,"com.graphhopper.GraphHopperTest.testFootAndCar":54,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":78,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidTunnel":40,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":66,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":3,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":4,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":11,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":21,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":27,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":12,"com.graphhopper.routing.util.BikeFlagEncoderTest.testclassBicycle":32,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":70,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":58,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidMotorway":41,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidMotorway":35,"com.graphhopper.routing.util.BikeFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":31,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":6,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":62,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":16,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":30,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":15,"com.graphhopper.reader.OSMReaderTest.testRelation":19,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":2,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":29,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":79,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPreferenceForSlowSpeed":37,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidMotorway":49,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":36,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":59,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidTunnel":25,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":38,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":55,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":8,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":67,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":18,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":9,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidTunnel":44,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTram":33,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":83,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testclassBicycle":23,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":52,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":82,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":17,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testclassBicycle":45,"com.graphhopper.util.GHUtilityTest.testCopy":56,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":60,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":14,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":76,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPreferenceForSlowSpeed":50,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":53},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],"tindex":"78806853-794a-11e5-a93e-f938063441b1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:171","type":"CtIfImpl","sourcecode":"if (int < 0)\n    throw new java.lang.IllegalArgumentException(\"via node cannot be negative\");\n"},"variableMap":{"nodeVia":"com.graphhopper.routing.util.FlagEncoder.K_ROUNDABOUT"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:328","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.routing.util.AbstractFlagEncoder.(isFerry(long))) {\n    double double = com.graphhopper.routing.util.BikeCommonFlagEncoder.getSpeed(com.graphhopper.reader.OSMWay);\n    double = com.graphhopper.routing.util.AbstractFlagEncoder.applyMaxSpeed(com.graphhopper.reader.OSMWay, double, false);\n    long = com.graphhopper.routing.util.BikeCommonFlagEncoder.handleSpeed(com.graphhopper.reader.OSMWay, double, long);\n    long = com.graphhopper.routing.util.BikeCommonFlagEncoder.handleBikeRelated(com.graphhopper.reader.OSMWay, long, (long > (com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())));\n    boolean boolean = com.graphhopper.reader.OSMWay.hasTag(\"junction\", \"roundabout\");\n    if (boolean) {\n        long = com.graphhopper.routing.util.BikeCommonFlagEncoder.setBool(long, com.graphhopper.routing.util.FlagEncoder.int, true);\n    } \n} else {\n    long = com.graphhopper.routing.util.AbstractFlagEncoder.handleFerryTags(com.graphhopper.reader.OSMWay, java.util.Map<java.lang.String, java.lang.Integer>.get(\"living_street\"), java.util.Map<java.lang.String, java.lang.Integer>.get(\"track\"), java.util.Map<java.lang.String, java.lang.Integer>.get(\"primary\"));\n    long |= long;\n}"},"status":-1},{"failures":[],"tindex":"78808f64-794a-11e5-a93e-c59eea165460","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.CompressedArray:106","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:190","type":"CtReturnImpl","sourcecode":"return new com.graphhopper.util.shapes.GHPoint(double , double)"},"status":-2},{"failures":[19,20,21,22,23,2,3,24,25,26,5,27,28,29,30,31,32,7,8,33,34,35,10,36,37,38,12,39,40,41,13,42,43,44,45,15,46,47,48,49,16,50,51,52],"tindex":"7880b675-794a-11e5-a93e-f1ce54f6b138","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:155","type":"CtAssignmentImpl","sourcecode":"int = 64"},"variableMap":{"tmpNo":"nextRelBit"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:197","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.routing.util.AbstractFlagEncoder.defineRelationBits(int, int)"},"status":-1},{"failures":[53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"tindex":"7880b676-794a-11e5-a93e-514a1e2d8a6b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:242","type":"CtAssignmentImpl","sourcecode":"double = double[][int]"},"status":-1},{"failures":[],"tindex":"7880b677-794a-11e5-a93e-9dd5d4dbff53","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Downloader:119","type":"CtLocalVariableImpl","sourcecode":"int int = 8 * 1024"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:49","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(double))"},"status":-2},{"failures":[],"tindex":"7880b678-794a-11e5-a93e-0b9e9a4b1e90","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:561","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"railway\", \"tram\"))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(50.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"variableMap":{"weightToPrioMap":"weightToPrioMap","com.graphhopper.routing.util.PriorityCode.AVOID_AT_ALL_COSTS":"com.graphhopper.routing.util.PriorityCode.UNCHANGED","way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:555","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"bicycle\", \"yes\"))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(100.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\nelse\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(50.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"status":-2},{"failures":[],"tindex":"7880dd89-794a-11e5-a93e-c33eb74a48ab","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:191","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(5)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.CompressedArray:179","type":"CtWhileImpl","sourcecode":"while (!(java.util.zip.Deflater.finished())) {\n    int int = java.util.zip.Deflater.deflate(byte[]);\n    java.io.ByteArrayOutputStream.write(byte[], 0, int);\n}"},"status":-2},{"failures":[84,58,62,85,69],"tindex":"7880dd8a-794a-11e5-a93e-cd2042455c3a","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:197","type":"CtAssignmentImpl","sourcecode":"double = double * 0.9"},"variableMap":{"maxMCSpeed":"dist","speed":"dist"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:54","type":"CtOperatorAssignmentImpl","sourcecode":"double += double"},"status":-1},{"failures":[],"tindex":"7880dd8b-794a-11e5-a93e-b9f7e308216b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:52","type":"CtOperatorAssignmentImpl","sourcecode":"double += (((0.1963 * double) * double) - 0.9817) * double"},"variableMap":{"r":"minLat","angle":"maxLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:183","type":"CtAssignmentImpl","sourcecode":"double = ((com.graphhopper.util.shapes.BBox.double) - (com.graphhopper.util.shapes.BBox.double)) / long"},"status":-2},{"failures":[],"tindex":"7880dd8c-794a-11e5-a93e-1d75bbd53871","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PathMerger:91","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.PointList.isEmpty())\n    com.graphhopper.util.PointList = new com.graphhopper.util.PointList(com.graphhopper.util.PointList.size() , com.graphhopper.util.PointList.is3D());\n"},"variableMap":{"tmpPoints":"pillarNodes","fullPoints":"pillarNodes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:839","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.reverse()"},"status":-2},{"failures":[],"tindex":"7881049d-794a-11e5-a93e-9de527b8bf26","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:220","type":"CtLocalVariableImpl","sourcecode":"double double = double * double"},"variableMap":{"a_lon_deg":"maxLonTmp","shrinkFactor":"minLonTmp"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:184","type":"CtLocalVariableImpl","sourcecode":"double double = (double + double) / 2"},"status":-2},{"failures":[],"tindex":"7881049e-794a-11e5-a93e-fdce43fa762e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistancePlaneProjection:57","type":"CtLocalVariableImpl","sourcecode":"double double = double / (com.graphhopper.util.DistanceCalcEarth.double)"},"variableMap":{"dist":"lat","com.graphhopper.util.DistanceCalcEarth.R":"deltaLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:653","type":"CtLocalVariableImpl","sourcecode":"double double = (com.graphhopper.util.shapes.GHPoint.double) + ((0.5 + int) * (double))"},"status":-2},{"failures":[],"tindex":"7881049f-794a-11e5-a93e-6f3597516a2b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:67","type":"CtReturnImpl","sourcecode":"return java.lang.Math.atan2((double - double), (double * (double - double)))"},"variableMap":{"lat1":"maxSpeed","lat2":"maxSpeed","lon1":"maxSpeed","lon2":"maxSpeed","shrinkFactor":"maxSpeed"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:822","type":"CtReturnImpl","sourcecode":"return double * 0.9"},"status":-2},{"failures":[],"tindex":"788104a0-794a-11e5-a93e-170044b3706a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:174","type":"CtIfImpl","sourcecode":"if (java.lang.Integer != null)\n    java.lang.Integer = java.lang.Integer;\n"},"variableMap":{"tInt":"value","speed":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntIntBinHeap:200","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.IntIntBinHeap.insert_(java.lang.Number.intValue(), java.lang.Integer)"},"status":-2},{"failures":[],"tindex":"78812bb1-794a-11e5-a93e-23e0b2dd607f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:169","type":"CtIfImpl","sourcecode":"if (int > int) {\n    int = int;\n} "},"variableMap":{"min":"from","tmpSize":"from"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:106","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.ConsistentWeightApproximator.setSourceNode(int)"},"status":-2},{"failures":[],"tindex":"78812bb2-794a-11e5-a93e-21b3016a43c0","series":0,"name":"add","transplant":{"position":"com.graphhopper.search.NameIndex:147","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.close()"},"variableMap":{"names":"nodes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:202","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setHeader((7 * 4), com.graphhopper.util.Helper.eleToInt(com.graphhopper.util.shapes.BBox.double))"},"status":-2},{"failures":[],"tindex":"78812bb3-794a-11e5-a93e-b74aed219d88","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:173","type":"CtIfImpl","sourcecode":"if (int < int) {\n    int = int;\n} "},"variableMap":{"max":"len","tmpSize":"len"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:54","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.getBytes(0, byte[], int)"},"status":-2},{"failures":[],"tindex":"78812bb4-794a-11e5-a93e-4fc224df4ffa","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:731","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long))"},"status":-2},{"failures":[],"tindex":"78812bb5-794a-11e5-a93e-bd97f61a2a57","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DouglasPeucker:154","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    throw new java.lang.IllegalStateException(((((\"maximum not found in [\" + int) + \",\") + int) + \"]\"));\n} "},"variableMap":{"indexWithMaxDist":"newIndex","lastIndex":"old","fromIndex":"newIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:269","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.NodeAccess.setNode(int, com.graphhopper.storage.NodeAccess.getLatitude(int), com.graphhopper.storage.NodeAccess.getLongitude(int))"},"status":-2},{"failures":[],"tindex":"788152c6-794a-11e5-a93e-e536ef2a4438","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:369","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int > (int)))\n    throw new java.lang.IllegalArgumentException((((((\"Illegal interval: \" + int) + \", \") + int) + \", size:\") + (int)));\n"},"variableMap":{"size":"index","from":"index","end":"index"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:142","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(com.graphhopper.util.PointAccess.getLatitude(int), com.graphhopper.util.PointAccess.getLongitude(int))"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
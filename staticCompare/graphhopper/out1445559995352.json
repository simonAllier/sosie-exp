{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":200,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":27,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":36,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":49,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":58,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":195,"com.graphhopper.reader.OSMReaderTest.testFerry":114,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":125,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":24,"com.graphhopper.routing.QueryGraphTest.testOneWay":35,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":54,"com.graphhopper.reader.OSMReaderTest.testWithBounds":120,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":106,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":30,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":96,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":167,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":40,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":211,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":42,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":46,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":143,"com.graphhopper.GraphHopperTest.testPrepare":7,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":203,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":224,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":21,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":206,"com.graphhopper.search.NameIndexTest.testFlush":111,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":133,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":33,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":149,"com.graphhopper.util.InstructionListTest.testWayList":128,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":127,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":156,"com.graphhopper.GraphHopperAPITest.testDisconnected179":39,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":88,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":169,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":179,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":197,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":53,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":168,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":150,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":100,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":154,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":55,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":113,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":178,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":86,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":172,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":204,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":8,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":208,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":67,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":227,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":110,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":109,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":145,"com.graphhopper.GraphHopperTest.testLoadOSM":11,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":61,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":73,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":56,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":213,"com.graphhopper.reader.OSMReaderTest.testSort":15,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":158,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":85,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":119,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":189,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":140,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":205,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":77,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":32,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":163,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":171,"com.graphhopper.routing.PathTest.testWayList":175,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":81,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":95,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":187,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":22,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":148,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":26,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":155,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":72,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":90,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":218,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":180,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":82,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":20,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":177,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":198,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":34,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":59,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":153,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":152,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":228,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":50,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":43,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":31,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":41,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":164,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":12,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":47,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":223,"com.graphhopper.GraphHopperAPITest.testLoad":38,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":10,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":162,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":101,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":166,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":99,"com.graphhopper.reader.OSMReaderTest.testBarriers":16,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":170,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":219,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":68,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":17,"com.graphhopper.util.GHUtilityTest.testCopy":123,"com.graphhopper.routing.PathTest.testFindInstruction":176,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":146,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":105,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":108,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":199,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":210,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":18,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":48,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":212,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":19,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":226,"com.graphhopper.storage.GraphHopperStorageCHTest.testFlags":185,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":160,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":191,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":138,"com.graphhopper.reader.PrinctonReaderTest.testRead":112,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":215,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":186,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":221,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":94,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":194,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":23,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":142,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":196,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":190,"com.graphhopper.util.InstructionListTest.testWayList2":129,"com.graphhopper.reader.OSMReaderTest.testFoot":115,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":202,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":37,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":62,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":201,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":216,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":60,"com.graphhopper.reader.OSMReaderTest.testOneWay":122,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":220,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":184,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":102,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":104,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":103,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":107,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":141,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":207,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":209,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":174,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":137,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":78,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":161,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":222,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":135,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":144,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":44,"com.graphhopper.routing.PathBidirRefTest.testExtract":131,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":136,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":5,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":124,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":165,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":0,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":98,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":4,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":3,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":80,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":2,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":97,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":1,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":66,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":159,"com.graphhopper.reader.OSMReaderTest.testMain":14,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":28,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":192,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":92,"com.graphhopper.routing.PathBidirRefTest.testExtract2":132,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":91,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":147,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":74,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":52,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":63,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":84,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":83,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":69,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":116,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":225,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":121,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":45,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":183,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":139,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":57,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":193,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":214,"com.graphhopper.GraphHopperTest.testFootAndCar":9,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":182,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":64,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":71,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":157,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":89,"com.graphhopper.GraphHopperTest.testVia":6,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":51,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":25,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":93,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":118,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":79,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":70,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":29,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":181,"com.graphhopper.GraphHopperTest.testFootOnly":13,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":130,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":75,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":117,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":76,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":173,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":188,"com.graphhopper.util.InstructionListTest.testFind":126,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":151,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":134,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":65,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":87,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":217},"transformations":[{"failures":[],"tindex":"b7c31a46-791c-11e5-83bf-43877897fd6d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GHResponse:209","type":"CtAssignmentImpl","sourcecode":"this.com.graphhopper.util.InstructionList = com.graphhopper.util.InstructionList"},"variableMap":{"instructions":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:34","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.InstructionList.this(0, null)"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"tindex":"b7c34157-791c-11e5-83bf-a9bb6e2499de","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:476","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.EdgeIteratorState.setDistance(com.graphhopper.storage.BaseGraph.CommonEdgeIterator.getDistance()).setName(com.graphhopper.storage.BaseGraph.CommonEdgeIterator.getName())"},"variableMap":{"from":"closestEdge","to":"detach"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.QueryResult:131","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.EdgeIteratorState = com.graphhopper.util.EdgeIteratorState"},"status":-1},{"failures":[84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],"tindex":"b7c34158-791c-11e5-83bf-8178d25d9d71","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:802","type":"CtOperatorAssignmentImpl","sourcecode":"int -= int"},"variableMap":{"edgeId":"i","maxEdgesCount":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:201","type":"CtAssignmentImpl","sourcecode":"int[][int] = int"},"status":-1},{"failures":[111,0,1,2,3,4,5,6,7,8,9,10,11,12,13,112,113,114,115,14,16,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,17,154,155,18,156,157,158,19,20,159,160,21,161,162,163,22,164,165,166,167,168,85,86,169,170,32,34,171,172,173,174,175,176,177,178,38,179,180,181,182,183,184,87,185,186,187,188,189,190,191,192,193,46,52,58,66,75,83,194,195,93,196,197,198,199,200,201,202,203,204,205,206,207,99,208,209,210,211,212,213,214,215,216,217,218,219,105,220,221,222,223,224,225,226,227,228],"tindex":"b7c34159-791c-11e5-83bf-bdf1e5e63354","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:68","type":"CtReturnImpl","sourcecode":"return 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtil:268","type":"CtReturnImpl","sourcecode":"return ((int)(long & 4294967295L))"},"status":-1},{"failures":[],"tindex":"b7c3686a-791c-11e5-83bf-6d0385a15e82","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper:447","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:261","type":"CtIfImpl","sourcecode":"if ((!(java.util.List<java.nio.ByteBuffer>.isEmpty())) && ((java.util.List<java.nio.ByteBuffer>.get(0)) instanceof java.nio.MappedByteBuffer)) {\n    for (java.nio.ByteBuffer java.nio.ByteBuffer : java.util.List<java.nio.ByteBuffer>) {\n        ((java.nio.MappedByteBuffer)(java.nio.ByteBuffer)).force();\n    }\n} "},"status":0},{"failures":[126,176],"tindex":"b7c3686b-791c-11e5-83bf-21e754bd2514","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.Path:110","type":"CtIfImpl","sourcecode":"if ((int) < 0)\n    throw new java.lang.IllegalStateException(\"Call extract() before retrieving fromNode\");\n"},"variableMap":{"fromNode":"foundInstruction"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:320","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double = double;\n    int = int;\n} "},"status":-1},{"failures":[],"tindex":"b7c3686c-791c-11e5-83bf-798559dd869f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(5);\n} catch (java.lang.InterruptedException iex) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHSortedCollection:139","type":"CtIfImpl","sourcecode":"if (com.graphhopper.coll.TIntHashSet.isEmpty()) {\n    java.util.TreeMap<java.lang.Integer, com.graphhopper.coll.TIntHashSet>.remove(java.util.Map.Entry<java.lang.Integer, com.graphhopper.coll.TIntHashSet>.getKey());\n} "},"status":-2},{"failures":[],"tindex":"b7c38f7d-791c-11e5-83bf-ad3dc53b47fb","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:210","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.reader.OSMWay.hasTag(\"impassable\", \"yes\")) || (com.graphhopper.reader.OSMWay.hasTag(\"status\", \"impassable\")))\n    return 0;\n"},"variableMap":{"way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:280","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.reader.OSMWay.hasTag(\"railway\")) && (!(com.graphhopper.reader.OSMWay.hasTag(\"railway\", java.util.Set<java.lang.String>))))\n    return 0;\n"},"status":-2},{"failures":[],"tindex":"b7c38f7e-791c-11e5-83bf-c533ec966d60","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GHDirectory:197","type":"CtInvocationImpl","sourcecode":"new java.io.File(java.lang.String).mkdirs()"},"variableMap":{"location":"location"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:173","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.removeDir(new java.io.File(((java.lang.String) + java.lang.String)))"},"status":-2},{"failures":[],"tindex":"b7c38f7f-791c-11e5-83bf-35c44ebaaff3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DouglasPeucker:77","type":"CtOperatorAssignmentImpl","sourcecode":"int += int"},"variableMap":{"start":"allSegments","delta":"allSegments"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:272","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-2},{"failures":[],"tindex":"b7c38f80-791c-11e5-83bf-a38dc9971543","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Downloader:119","type":"CtLocalVariableImpl","sourcecode":"int int = 8 * 1024"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:671","type":"CtLocalVariableImpl","sourcecode":"int int = -1"},"status":-2},{"failures":[],"tindex":"b7c38f81-791c-11e5-83bf-878c38ccfe80","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:191","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(5)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1061","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.QueryGraph.clearUnfavoredStatus()"},"status":-2},{"failures":[],"tindex":"b7c38f82-791c-11e5-83bf-13e2ccab5601","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:126","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"status":-2},{"failures":[],"tindex":"b7c38f83-791c-11e5-83bf-a9261b67d8c4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntIntBinHeap:143","type":"CtForImpl","sourcecode":"for (int = 1 ; int <= (int) ; int++) {\n    if ((int[][int]) == int) {\n        break;\n    } \n}"},"status":-2},{"failures":[],"tindex":"b7c3b694-791c-11e5-83bf-ef8af256b60d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:436","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.util.EdgeIteratorState com.graphhopper.util.EdgeIteratorState : java.util.List<com.graphhopper.util.EdgeIteratorState>) {\n    com.graphhopper.routing.util.EncodingManager.applyWayTags(com.graphhopper.reader.OSMWay, com.graphhopper.util.EdgeIteratorState);\n}"},"status":-2},{"failures":[],"tindex":"b7c3b695-791c-11e5-83bf-d54fd89f47e9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:214","type":"CtReturnImpl","sourcecode":"return 5"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:603","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"b7c3b696-791c-11e5-83bf-713e83d6acf5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.VirtualEdgeIterator:64","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException(\"Not yet supported\");\n"},"variableMap":{"reverse":"updatedInGraph"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:662","type":"CtIfImpl","sourcecode":"if (((com.graphhopper.util.CHEdgeIterator.isShortcut()) && ((com.graphhopper.util.CHEdgeIterator.getAdjNode()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) && (com.graphhopper.util.CHEdgeIterator.canBeOverwritten(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long))) {\n    if ((com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double) >= (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.CHEdgeIterator, false, com.graphhopper.util.EdgeIterator.int)))\n        continue NEXT_SC;\n    \n    if (((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) || ((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) {\n        throw new java.lang.IllegalStateException((((((((((((((((((\"Shortcut cannot update itself! \" + (com.graphhopper.util.CHEdgeIterator.getEdge())) + \", skipEdge1:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", skipEdge2:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", edge \") + com.graphhopper.util.CHEdgeIterator) + \":\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.CHEdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", sc:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut) + \", skippedEdge1: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", skippedEdge2: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", neighbors:\") + (com.graphhopper.util.GHUtility.getNeighbors(com.graphhopper.util.CHEdgeIterator))));\n    } \n    com.graphhopper.util.CHEdgeIterator.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n    com.graphhopper.util.CHEdgeIterator.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n    com.graphhopper.util.CHEdgeIterator.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n    com.graphhopper.util.CHEdgeIterator.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n    com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIterator.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n    boolean = true;\n    break;\n} "},"status":-2},{"failures":[],"tindex":"b7c3b697-791c-11e5-83bf-1137c4674bdf","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:191","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(5)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:168","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException((\"You cannot configure this GraphStorage \" + \"after calling create or loadExisting. Calling one of the methods twice is also not allowed.\"));\n"},"status":-2},{"failures":[],"tindex":"b7c3dda8-791c-11e5-83bf-a5a267fc260d","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.CmdArgs:60","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(2)"},"variableMap":{"systemProperty":"name"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:354","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String"},"status":-2},{"failures":[],"tindex":"b7c3dda9-791c-11e5-83bf-8d3313d31aa3","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:87","type":"CtOperatorAssignmentImpl","sourcecode":"long += 4"},"variableMap":{"size":"encoded"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:345","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.AbstractFlagEncoder.handleFerryTags(com.graphhopper.reader.OSMWay, java.util.Map<java.lang.String, java.lang.Integer>.get(\"living_street\"), java.util.Map<java.lang.String, java.lang.Integer>.get(\"track\"), java.util.Map<java.lang.String, java.lang.Integer>.get(\"primary\"))"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
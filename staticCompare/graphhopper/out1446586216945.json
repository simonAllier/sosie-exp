{"failureDictionary":{"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":137,"com.graphhopper.search.NameIndexTest.testCreate":150,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":143,"com.graphhopper.routing.PathTest.testFindInstruction":48,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":22,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":135,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":77,"com.graphhopper.search.NameIndexTest.testNoErrorOnLargeName":149,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":32,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":34,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":104,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":84,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":37,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":78,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":72,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":118,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":139,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":90,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":120,"com.graphhopper.coll.OSMIDMapTest.testUpdateOfLowerKeys":128,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":109,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":156,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":155,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":65,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":20,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":134,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":69,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":97,"com.graphhopper.GraphHopperTest.testPrepare":8,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":157,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":38,"com.graphhopper.util.InstructionListTest.testWayList2":56,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":116,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":15,"com.graphhopper.search.NameIndexTest.testFlush":148,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":141,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":25,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":144,"com.graphhopper.util.InstructionListTest.testWayList":55,"com.graphhopper.reader.OSMReaderTest.testOneWay":87,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":100,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":54,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":111,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":82,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":145,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":64,"com.graphhopper.storage.SynchedDAWrapperTest.testSet_GetBytes":113,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":86,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":85,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":123,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":73,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":19,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":26,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":58,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":31,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":105,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":50,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":132,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":46,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":92,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":133,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":112,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":39,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":44,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":74,"com.graphhopper.coll.OSMIDMapTest.testGet":124,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":9,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":16,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":66,"com.graphhopper.routing.PathBidirRefTest.testExtract":51,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":60,"com.graphhopper.coll.OSMIDMapTest.testBinSearch":126,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":110,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":6,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":81,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":21,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":80,"com.graphhopper.GraphHopperTest.testLoadOSM":12,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":1,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":76,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":103,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":106,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":5,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":4,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":3,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":75,"com.graphhopper.reader.OSMReaderTest.testSort":130,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":2,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":33,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":91,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":36,"com.graphhopper.reader.OSMReaderTest.testMain":129,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":98,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":18,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":115,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":79,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":41,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":140,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":71,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":94,"com.graphhopper.routing.PathBidirRefTest.testExtract2":52,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":70,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":43,"com.graphhopper.routing.PathTest.testWayList":47,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":61,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":158,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":23,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":88,"com.graphhopper.coll.OSMIDMapTest.testGet2":125,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":42,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":68,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":24,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":119,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":136,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":102,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":67,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":96,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":17,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":108,"com.graphhopper.storage.StorablePropertiesTest.testStore":121,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":93,"com.graphhopper.storage.RAMDataAccessTest.testSet_GetBytes":114,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":154,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":83,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":35,"com.graphhopper.GraphHopperTest.testFootAndCar":10,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":117,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":49,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":95,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":142,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":29,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":28,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":99,"com.graphhopper.coll.OSMIDMapTest.testGetLong":127,"com.graphhopper.search.NameIndexTest.testPut":147,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":63,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNoErrorOnEdgeCase_lastIndex":62,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":101,"com.graphhopper.GraphHopperTest.testPrepareOnly":122,"com.graphhopper.GraphHopperTest.testVia":7,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":146,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":13,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":153,"com.graphhopper.GraphHopperAPITest.testLoad":0,"com.graphhopper.reader.OSMElementTest.testHasTag":152,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":11,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":138,"com.graphhopper.GraphHopperTest.testFootOnly":14,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":40,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":57,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":89,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":59,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":45,"com.graphhopper.util.InstructionListTest.testFind":53,"com.graphhopper.reader.OSMReaderTest.testBarriers":131,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":27,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":30,"com.graphhopper.util.GHUtilityTest.testCopy":151,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":107},"transformations":[{"failures":[],"tindex":"1383b81a-8272-11e5-8e2f-4f8818f28eb0","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:230","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"tindex":"1384063b-8272-11e5-8e2f-051a7b187626","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:1129","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.BaseGraph.AllEdgeIterator.int = int"},"variableMap":{"edgeId":"tmpNode","iter":"edgeBase"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:278","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.util.EdgeIteratorState.getBaseNode()"},"status":-1},{"failures":[58,59,60,61,62,63],"tindex":"1384063c-8272-11e5-8e2f-b3b65f228edb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:195","type":"CtIfImpl","sourcecode":"if (com.graphhopper.coll.GHBitSet.contains(int)) {\n    int int = com.graphhopper.storage.DataAccess.getInt(long);\n    com.graphhopper.geohash.KeyAlgo.decode(int, com.graphhopper.util.shapes.GHPoint);\n    double double = com.graphhopper.util.DistanceCalc.calcNormalizedDist(com.graphhopper.util.shapes.GHPoint.double, com.graphhopper.util.shapes.GHPoint.double, double, double);\n    double double = com.graphhopper.storage.NodeAccess.getLatitude(int);\n    double double = com.graphhopper.storage.NodeAccess.getLongitude(int);\n    double double = com.graphhopper.util.DistanceCalc.calcNormalizedDist(com.graphhopper.util.shapes.GHPoint.double, com.graphhopper.util.shapes.GHPoint.double, double, double);\n    if (double < double) {\n        com.graphhopper.storage.DataAccess.setInt(long, int);\n    } \n} else {\n    com.graphhopper.storage.DataAccess.setInt(long, int);\n    com.graphhopper.coll.GHBitSet.add(int);\n}"},"status":-1},{"failures":[64,65,66,23],"tindex":"13842d4d-8272-11e5-8e2f-9f9b314bc92c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:403","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.BaseGraph.edge(int, int)"},"variableMap":{"a":"a","b":"a","baseGraph":"baseGraph"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:204","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.CHGraphImpl.edge(int, int).setDistance(double).setFlags(com.graphhopper.storage.BaseGraph.com.graphhopper.routing.util.EncodingManager.flagsDefault(true, boolean))"},"status":-1},{"failures":[],"tindex":"13842d4e-8272-11e5-8e2f-439b5137470f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:148","type":"CtForImpl","sourcecode":"for (int = 1 ; int <= (int) ; int++) {\n    if ((int[][int]) == int) {\n        break;\n    } \n}"},"variableMap":{"elem":"nodeIndex","size":"start","i":"start","element":"start"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:98","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n    if ((int[][int]) == 0) {\n        java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>.push(com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.resumeState(int, com.graphhopper.util.EdgeIterator));\n        java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>.push(com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.startState(int));\n        continue nextState;\n    } else if (com.graphhopper.coll.GHBitSetImpl.contains(int)) {\n        int[][int] = java.lang.Math.min(int[][int], int[][int]);\n    } \n}"},"status":-2},{"failures":[67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"tindex":"13842d4f-8272-11e5-8e2f-9d67eed7789a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:116","type":"CtLocalVariableImpl","sourcecode":"int int = (int) == int ? (int) + 1 : int"},"variableMap":{"currentBucket":"nodeA","retBucket":"nodeA","currentIndex":"nodeA","bucketSize":"nodeA"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:741","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.coll.SparseIntIntArray.get(int)"},"status":-1},{"failures":[],"tindex":"13845460-8272-11e5-8e2f-95f76fa80f89","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:191","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(5)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMRelation:40","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.OSMRelation.readTags(javax.xml.stream.XMLStreamReader)"},"status":-2},{"failures":[],"tindex":"13845461-8272-11e5-8e2f-437974f9b897","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:442","type":"CtReturnImpl","sourcecode":"return true"},"status":0},{"failures":[],"tindex":"13845462-8272-11e5-8e2f-331777833d03","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:137","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch().start()"},"variableMap":{"sw":"extractSW"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:194","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.StopWatch.stop()"},"status":-2},{"failures":[93,94,95,96,97,70,98,99,100,101,102,103,104,105,106,107,108,109,80,110,111,112,113,114,115,116,117,85,118,119,120,121,122,7,8,9,10,11,12,123,13,14,124,125,126,127,128,129,130,131,132,133,39,43,44,45,46,47,48,49,50,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,53,54,55,56,57,151],"tindex":"13845463-8272-11e5-8e2f-c3fa75b269e5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.Path:460","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.util.Instruction.int"},"variableMap":{"com.graphhopper.util.Instruction.USE_ROUNDABOUT":"segmentSizeInBytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:287","type":"CtLocalVariableImpl","sourcecode":"int int = (int + int) - (int)"},"status":-1},{"failures":[],"tindex":"13847b74-8272-11e5-8e2f-f9b55c1ecb6e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:579","type":"CtUnaryOperatorImpl","sourcecode":"(long)++"},"status":0},{"failures":[],"tindex":"13847b75-8272-11e5-8e2f-e9c2abcaa05a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Instruction:192","type":"CtReturnImpl","sourcecode":"return long + (this.long)"},"variableMap":{"time":"com.graphhopper.routing.ch.PrepareEncoder.scFwdDir"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareEncoder:40","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.ch.PrepareEncoder.long"},"status":-2},{"failures":[],"tindex":"13847b76-8272-11e5-8e2f-494551454be6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:191","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.DAType.isStoring()"},"variableMap":{"defaultType":"osmValue"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:153","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(java.lang.Object))\n    return true;\n"},"status":-2},{"failures":[152],"tindex":"1384a287-8272-11e5-8e2f-fbc1de3608a9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:154","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[],"tindex":"1384a288-8272-11e5-8e2f-e73bf260c2bc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:288","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"srtm_\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:239","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"highway\")"},"status":-2},{"failures":[],"tindex":"1384a289-8272-11e5-8e2f-bd1e5981b431","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:148","type":"CtAssignmentImpl","sourcecode":"int = int = ((int)(java.lang.Math.sqrt(int)))"},"variableMap":{"latSize":"to1","size":"to","lonSize":"to1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:81","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-1},{"failures":[93,94,95,107,153,115,154,121,122,11,12,123,13],"tindex":"1384a28a-8272-11e5-8e2f-a34d8f9e5df3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:143","type":"CtInvocationImpl","sourcecode":"java.io.BufferedWriter.append('\\n')"},"status":-1},{"failures":[95,96,97,70,98,100,155,156,75,157,158,103,106,107,108,109,80,110,112,115,116,117,85,118,120,14,129,132,133,39,47,136,137,139,141,144,55,56,151],"tindex":"1384a28b-8272-11e5-8e2f-b1b07ce2d869","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:184","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"variableMap":{"shift":"count"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:873","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.storage.DataAccess.getInt(long)"},"status":-1},{"failures":[],"tindex":"1384c99c-8272-11e5-8e2f-6194980907d0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GHRequest:69","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GHRequest.this(new com.graphhopper.util.shapes.GHPoint(double , double), new com.graphhopper.util.shapes.GHPoint(double , double), double, double)"},"variableMap":{"endHeading":"java.lang.Double.NaN","toLat":"java.lang.Double.NaN","fromLon":"java.lang.Double.NaN","startHeading":"java.lang.Double.NaN","toLon":"java.lang.Double.NaN","fromLat":"java.lang.Double.NaN","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GHRequest:137","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GHRequest.this(java.util.List<com.graphhopper.util.shapes.GHPoint>, java.util.Collections.nCopies(java.util.List<com.graphhopper.util.shapes.GHPoint>.size(), java.lang.Double.double))"},"status":-2},{"failures":[],"tindex":"1384c99d-8272-11e5-8e2f-171bfccaff05","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:129","type":"CtIfImpl","sourcecode":"if (java.lang.String.isEmpty())\n    continue;\n"},"variableMap":{"entry":"com.graphhopper.routing.util.EncodingManager.RACINGBIKE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:141","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.CarFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.BikeFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.Bike2WeightFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.RacingBikeFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MountainBikeFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.FootFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MotorcycleFlagEncoder(com.graphhopper.util.PMap);\nelse\n    throw new java.lang.IllegalArgumentException((\"entry in encoder list not supported \" + java.lang.String));\n"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":22,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":32,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":8,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":53,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":54,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":27,"com.graphhopper.storage.UnsafeDataAccessTest.testSet_GetBytes":3,"com.graphhopper.routing.PathBidirRefTest.testExtract2":7,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":18,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":9,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":28,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":23,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":10,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":31,"com.graphhopper.storage.RAMDataAccessTest.testSet_GetBytes":2,"com.graphhopper.util.BitUtilBigTest.testReverse":56,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":21,"com.graphhopper.GraphHopperTest.testPrepare":42,"com.graphhopper.GraphHopperTest.testFootAndCar":44,"com.graphhopper.util.BitUtilBigTest.testToFloat":5,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":24,"com.graphhopper.util.BitUtilBigTest.testToBitString":4,"com.graphhopper.storage.MMapDataAccessTest.testSet_GetBytes":0,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":29,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":11,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":15,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":14,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":50,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":51,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":19,"com.graphhopper.util.BitUtilBigTest.testToInt":6,"com.graphhopper.storage.SynchedDAWrapperTest.testSet_GetBytes":1,"com.graphhopper.util.BitUtilLittleTest.testReverse":55,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":49,"com.graphhopper.GraphHopperTest.testVia":41,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":33,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":47,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":12,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":17,"com.graphhopper.GraphHopperAPITest.testLoad":48,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":45,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":25,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":52,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":26,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":30,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":43,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":40,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":34,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":13,"com.graphhopper.GraphHopperTest.testLoadOSM":46,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":35,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":16,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":39,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":38,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":37,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":36},"transformations":[{"failures":[0,1,2,3,4,5,6],"tindex":"5dce55e8-790c-11e5-a712-d3000930b8a4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtilLittle:56","type":"CtAssignmentImpl","sourcecode":"byte[][(int + 1)] = ((byte)(int >>> 8))"},"variableMap":{"offset":"offset","bytes":"bytes","value":"offset"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilBig:57","type":"CtAssignmentImpl","sourcecode":"byte[][++int] = ((byte)(int))"},"status":-1},{"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"tindex":"5dcea409-790c-11e5-a712-ef3f62a6c26a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.PathBidirRef:92","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.Path.processEdge(int, com.graphhopper.storage.EdgeEntry.int)"},"status":-1},{"failures":[49,50,51,52,53,54,55,56],"tindex":"5dcea40a-790c-11e5-a712-51ce9b9c65a0","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:597","type":"CtUnaryOperatorImpl","sourcecode":"long++"},"variableMap":{"tmpDegreeCounter":"res"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtil:259","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= int"},"status":-1},{"failures":[],"tindex":"5dcea40b-790c-11e5-a712-8340cffc0e02","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:128","type":"CtLocalVariableImpl","sourcecode":"double double = 360.0 / 16"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:169","type":"CtLocalVariableImpl","sourcecode":"double double = 0"},"status":-2},{"failures":[],"tindex":"5dcecb1c-790c-11e5-a712-0ddccb70c40c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:700","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.clear()"},"status":-2},{"failures":[],"tindex":"5dcecb1d-790c-11e5-a712-9b0be24418d7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:515","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.util.Helper.isEmpty(java.lang.String)) && (com.graphhopper.util.Helper.isEmpty(java.lang.String))) {\n    if (com.graphhopper.util.Helper.isEmpty(java.lang.String))\n        throw new java.lang.IllegalArgumentException(\"You need to specify an OSM file.\");\n    \n    java.lang.String = (com.graphhopper.util.Helper.pruneFileEnd(java.lang.String)) + \"-gh\";\n} "},"variableMap":{"graphHopperFolder":"highway","ghLocation":"highway","osmFile":"highway"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:605","type":"CtIfImpl","sourcecode":"if (\"cycleway\".equals(java.lang.String))\n    com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\nelse if (java.util.Set<java.lang.String>.contains(java.lang.String))\n    com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\n"},"status":-2},{"failures":[],"tindex":"5dcecb1e-790c-11e5-a712-33cf2584dca0","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:526","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.ensureCapacity(((((long)(int)) + 1) * (int)))"},"variableMap":{"edgeCount":"nodeIndex","edges":"turnCosts","edgeEntryBytes":"turnCostsEntryBytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.TurnCostExtension:206","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.ensureCapacity(((((long)(int)) + 4) * (int)))"},"status":-2},{"failures":[],"tindex":"5dcecb1f-790c-11e5-a712-93cfb35ef862","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:219","type":"CtLocalVariableImpl","sourcecode":"double double = double > 1 ? double / double : 0"},"variableMap":{"incEleSum":"sinDeltaLon","incDist2DSum":"sinDeltaLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:55","type":"CtLocalVariableImpl","sourcecode":"double double = (double * double) + (((double * double) * java.lang.Math.(java.lang.Math.cos(java.lang.Math.java.lang.Math.toRadians(double)))) * java.lang.Math.(java.lang.Math.cos(java.lang.Math.java.lang.Math.toRadians(double))))"},"status":-2},{"failures":[],"tindex":"5dcef230-790c-11e5-a712-934fa4bb1dee","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.pbf.PbfBlobDecoder:87","type":"CtLocalVariableImpl","sourcecode":"java.util.List<java.lang.String> java.util.List<java.lang.String> = java.util.Arrays.asList(\"OsmSchema-V0.6\", \"DenseNodes\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Constants:81","type":"CtLocalVariableImpl","sourcecode":"java.util.List<java.lang.String> java.util.List<java.lang.String> = com.graphhopper.util.Helper.com.graphhopper.util.Helper.readFile(new java.io.InputStreamReader(com.graphhopper.GraphHopper.com.graphhopper.GraphHopper.getResourceAsStream(\"version\") , com.graphhopper.util.Helper.java.nio.charset.Charset))"},"status":-2},{"failures":[],"tindex":"5dcef231-790c-11e5-a712-69a57d1f63a7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:596","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.BikeCommonFlagEncoder.setBool(long, com.graphhopper.routing.util.BikeCommonFlagEncoder.int, true)"},"status":-2},{"failures":[],"tindex":"5dcef232-790c-11e5-a712-b1c5cc27a38c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:422","type":"CtReturnImpl","sourcecode":"return 6"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHNodeAccess:84","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.Helper.intToDegree(com.graphhopper.storage.BaseGraph.com.graphhopper.storage.DataAccess.getInt(((((long)(int)) * (com.graphhopper.storage.BaseGraph.int)) + (com.graphhopper.storage.BaseGraph.int))))"},"status":-2},{"failures":[],"tindex":"5dcef233-790c-11e5-a712-dbed9130f433","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.GHUtility:123","type":"CtLocalVariableImpl","sourcecode":"java.util.List<java.lang.Integer> java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer>()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:386","type":"CtLocalVariableImpl","sourcecode":"java.util.List<java.lang.Integer> java.util.List<java.lang.Integer> = boolean ? java.util.Arrays.asList(com.graphhopper.routing.QueryGraph.int, com.graphhopper.routing.QueryGraph.int) : java.util.Arrays.asList(com.graphhopper.routing.QueryGraph.int, com.graphhopper.routing.QueryGraph.int)"},"status":-2},{"failures":[],"tindex":"5dcf1944-790c-11e5-a712-cf4b351029fd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:756","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.PointList.getLatitude(0)"},"variableMap":{"pointList":"pillarNodes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:845","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.PointList.getLatitude(int)"},"status":-2},{"failures":[],"tindex":"5dcf1945-790c-11e5-a712-a79440f206c3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHBitSetImpl:71","type":"CtInvocationImpl","sourcecode":"((com.graphhopper.coll.GHBitSetImpl)(com.graphhopper.coll.GHBitSet)).or(this)"},"variableMap":{"bs":"filledIndices"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:230","type":"CtForImpl","sourcecode":"for (int int = com.graphhopper.coll.GHBitSet.next(0) ; int >= 0 ; int = com.graphhopper.coll.GHBitSet.next((int + 1))) {\n    int[][int] = int;\n}"},"status":-2},{"failures":[],"tindex":"5dcf1946-790c-11e5-a712-77a70cf1d6d8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:447","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:162","type":"CtIfImpl","sourcecode":"if (\"track\".equals(java.lang.String)) {\n    java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"tracktype\");\n    if (\"grade1\".equals(java.lang.String))\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(50.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    else if (java.lang.String == null)\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(90.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    else if (java.lang.String.startsWith(\"grade\"))\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(100.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    \n} "},"status":-2},{"failures":[],"tindex":"5dcf4057-790c-11e5-a712-1535d4b79cbc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:124","type":"CtIfImpl","sourcecode":"if (int == 0)\n    throw new java.lang.IllegalStateException(\"0 segments are not allowed.\");\n"},"variableMap":{"segmentsToMap":"w_toNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:602","type":"CtIfImpl","sourcecode":"if (((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int)) || (int == int))\n    continue;\n"},"status":-2},{"failures":[],"tindex":"5dcf4058-790c-11e5-a712-b3c7aa3732ef","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:210","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.reader.OSMWay.hasTag(\"impassable\", \"yes\")) || (com.graphhopper.reader.OSMWay.hasTag(\"status\", \"impassable\")))\n    return 0;\n"},"variableMap":{"way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:268","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"motorroad\", \"yes\"))\n    return 0;\n"},"status":-2},{"failures":[],"tindex":"5dcf4059-790c-11e5-a712-03a92b2db52e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:225","type":"CtLocalVariableImpl","sourcecode":"long long = 1L << 63"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:172","type":"CtLocalVariableImpl","sourcecode":"long long = 1"},"status":-2},{"failures":[],"tindex":"5dcf405a-790c-11e5-a712-9533536cafdf","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:149","type":"CtOperatorAssignmentImpl","sourcecode":"double /= 4"},"variableMap":{"tmp":"nextLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:237","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.Instruction.com.graphhopper.util.PointList.getLatitude(0)"},"status":-2},{"failures":[],"tindex":"5dcf676b-790c-11e5-a712-3d39929468ab","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:203","type":"CtIfImpl","sourcecode":"if (double < 0)\n    double = 0;\n"},"variableMap":{"factor":"weight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Dijkstra:76","type":"CtWhileImpl","sourcecode":"while (true) {\n    (int)++;\n    if (com.graphhopper.routing.Dijkstra.(isWeightLimitExceeded()) || com.graphhopper.routing.Dijkstra.(finished()))\n        break;\n    \n    int int = com.graphhopper.storage.EdgeEntry.int;\n    com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        if (!com.graphhopper.routing.AbstractRoutingAlgorithm.(accept(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.EdgeEntry.int)))\n            continue;\n        \n        int int = com.graphhopper.routing.util.TraversalMode.createTraversalId(com.graphhopper.util.EdgeIterator, false);\n        double double = (com.graphhopper.routing.util.Weighting.calcWeight(com.graphhopper.util.EdgeIterator, false, com.graphhopper.storage.EdgeEntry.int)) + (com.graphhopper.storage.EdgeEntry.double);\n        if (java.lang.Double.isInfinite(double))\n            continue;\n        \n        com.graphhopper.storage.EdgeEntry com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.TIntObjectMap<com.graphhopper.storage.EdgeEntry>.get(int);\n        if (com.graphhopper.storage.EdgeEntry == null) {\n            com.graphhopper.storage.EdgeEntry = new com.graphhopper.storage.EdgeEntry(com.graphhopper.util.EdgeIterator.getEdge() , com.graphhopper.util.EdgeIterator.getAdjNode() , double);\n            com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n            com.graphhopper.routing.TIntObjectMap<com.graphhopper.storage.EdgeEntry>.put(int, com.graphhopper.storage.EdgeEntry);\n            java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.add(com.graphhopper.storage.EdgeEntry);\n        } else if ((com.graphhopper.storage.EdgeEntry.double) > double) {\n            java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.remove(com.graphhopper.storage.EdgeEntry);\n            com.graphhopper.storage.EdgeEntry.int = com.graphhopper.util.EdgeIterator.getEdge();\n            com.graphhopper.storage.EdgeEntry.double = double;\n            com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n            java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.add(com.graphhopper.storage.EdgeEntry);\n        } else\n            continue;\n        \n        com.graphhopper.routing.AbstractRoutingAlgorithm.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.EdgeEntry, int);\n    }\n    if (java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.isEmpty())\n        break;\n    \n    com.graphhopper.storage.EdgeEntry = java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.poll();\n    if ((com.graphhopper.storage.EdgeEntry) == null)\n        throw new java.lang.AssertionError(\"Empty edge cannot happen\");\n    \n}"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
{"failureDictionary":{"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":13,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":74,"com.graphhopper.util.DistanceCalcEarthTest.testEdgeDistance":76,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":80,"com.graphhopper.reader.OSMReaderTest.testMain":26,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidTunnel":37,"com.graphhopper.routing.PathTest.testFindInstruction":92,"com.graphhopper.util.DistanceCalcEarthTest.testPrecisionBug":75,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPreferenceForSlowSpeed":47,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":38,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":5,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":88,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":0,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":60,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":57,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":63,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":34,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":62,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidanceOfHighMaxSpeed":41,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":45,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":89,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":66,"com.graphhopper.coll.IntIntBinHeapTest.testRekey":51,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":4,"com.graphhopper.reader.OSMReaderTest.testWithBounds":29,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":35,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":10,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":53,"com.graphhopper.util.DistanceCalcEarthTest.testPrecisionBug2":77,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":12,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":55,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":48,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":61,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":69,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":7,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":90,"com.graphhopper.routing.util.FastestWeightingTest.testWeightWrongHeading":23,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointCount":79,"com.graphhopper.util.DouglasPeuckerTest.testPathSimplify":81,"com.graphhopper.GraphHopperTest.testPrepare":83,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPreferenceForSlowSpeed":36,"com.graphhopper.GraphHopperTest.testFootAndCar":85,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadFlush":16,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidTunnel":33,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":91,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":46,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":50,"com.graphhopper.storage.MMapDataAccessTest.testSet_GetBytes":24,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":32,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":70,"com.graphhopper.coll.IntIntBinHeapTest.test0":52,"com.graphhopper.reader.OSMReaderTest.testOneWay":15,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":64,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":42,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":49,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":72,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":54,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":8,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":3,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPreferenceForSlowSpeed":40,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":1,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":65,"com.graphhopper.GraphHopperTest.testVia":82,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":9,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":39,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":87,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidTunnel":44,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":67,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":27,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":31,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":14,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":28,"com.graphhopper.reader.dem.HeightTileTest.testCalcMean":30,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":86,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":59,"com.graphhopper.GraphHopperTest.testFootOnly":25,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":6,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":84,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":58,"com.graphhopper.util.InstructionListTest.testFind":78,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":11,"com.graphhopper.GraphHopperTest.testLoadOSM":17,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":18,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":71,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":2,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":56,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":68,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":22,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":21,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":20,"com.graphhopper.reader.OSMReaderTest.testSort":93,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":19,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPreferenceForSlowSpeed":43,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":73},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"tindex":"e5caa4d0-8277-11e5-8212-7bb1e7b103b6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:235","type":"CtIfImpl","sourcecode":"if (long > 1) {\n    long >>>= 1;\n} else {\n    break;\n}"},"variableMap":{"bits":"edgeToRemovePointer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:686","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.EdgeAccess.invalidateEdge(long)"},"status":-1},{"failures":[16,17],"tindex":"e5cacbe1-8277-11e5-8212-55ec3ccdc8d7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:293","type":"CtInvocationImpl","sourcecode":"super.close()"},"status":-1},{"failures":[18,19,20,21,22,23],"tindex":"e5cacbe2-8277-11e5-8212-3b9a9030cb65","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:196","type":"CtIfImpl","sourcecode":"if ((double > 0) && (double < double))\n    double = double * 0.9;\n"},"variableMap":{"maxMCSpeed":"time","speed":"time"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FastestWeighting:74","type":"CtIfImpl","sourcecode":"if (boolean)\n    double += double;\n"},"status":-1},{"failures":[24],"tindex":"e5cacbe3-8277-11e5-8212-8db88b8dad7b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:369","type":"CtInvocationImpl","sourcecode":"java.nio.ByteBuffer.position(0)"},"status":-1},{"failures":[25,26,27,28,29],"tindex":"e5cacbe4-8277-11e5-8212-312eb0e15eff","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:842","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.PointList.is3D())\n    com.graphhopper.util.PointList.add(double, double, double);\nelse\n    com.graphhopper.util.PointList.add(double, double);\n"},"status":-1},{"failures":[],"tindex":"e5cacbe5-8277-11e5-8212-c58b180a4161","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:138","type":"CtIfImpl","sourcecode":"if (double < (double * 7)) {\n    java.lang.String = \"SE\";\n} else if (double < (double * 9)) {\n    java.lang.String = \"S\";\n} else if (double < (double * 11)) {\n    java.lang.String = \"SW\";\n} else if (double < (double * 13)) {\n    java.lang.String = \"W\";\n} else if (double < (double * 15)) {\n    java.lang.String = \"NW\";\n} else {\n    java.lang.String = \"N\";\n}"},"status":-2},{"failures":[],"tindex":"e5cacbe6-8277-11e5-8212-e77df43c0c14","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.GHUtility:123","type":"CtLocalVariableImpl","sourcecode":"java.util.List<java.lang.Integer> java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer>()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:386","type":"CtLocalVariableImpl","sourcecode":"java.util.List<java.lang.Integer> java.util.List<java.lang.Integer> = boolean ? java.util.Arrays.asList(com.graphhopper.routing.QueryGraph.int, com.graphhopper.routing.QueryGraph.int) : java.util.Arrays.asList(com.graphhopper.routing.QueryGraph.int, com.graphhopper.routing.QueryGraph.int)"},"status":-2},{"failures":[],"tindex":"e5caf2f7-8277-11e5-8212-9f96c187794f","series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:1083","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.LocationIndexTree.setMaxRegionSearch(int)"},"variableMap":{"tmpIndex":"this","maxRegionSearch":"minResolutionInMeter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:255","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.LocationIndexTree.setMinResolutionInMeter(int)"},"status":0},{"failures":[],"tindex":"e5caf2f8-8277-11e5-8212-dfea64f7b124","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:394","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.Helper.isEmpty(java.lang.String))\n    java.lang.String = java.lang.String;\nelse\n    java.lang.String += \", \" + java.lang.String;\n"},"variableMap":{"name":"value","refName":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.TranslationMap:165","type":"CtTryImpl","sourcecode":"try {\n    java.lang.String.format(java.lang.String, java.lang.Object[]);\n} catch (java.lang.Exception ex) {\n    java.lang.StringBuilder.append(com.graphhopper.util.Translation.getLocale()).append(\" - error \").append(java.lang.Exception.getMessage()).append(\"in \").append(java.util.Map.Entry<java.lang.String, java.lang.String>.getKey()).append(\"->\").append(java.lang.String).append(\"\\n\");\n}"},"status":0},{"failures":[30],"tindex":"e5caf2f9-8277-11e5-8212-d1517870b671","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.HeightTile:113","type":"CtOperatorAssignmentImpl","sourcecode":"int += com.graphhopper.reader.dem.HeightTile.includePoint((int + 2), java.util.concurrent.atomic.AtomicInteger)"},"status":-1},{"failures":[31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"tindex":"e5caf2fa-8277-11e5-8212-77820a4e5963","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:118","type":"CtIfImpl","sourcecode":"if (int < 0)\n    throw new java.lang.IllegalStateException(\"Too many segments needs to be allocated. Increase segmentSize.\");\n"},"variableMap":{"segmentsToMap":"avoidSpeedLimit"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:534","type":"CtIfImpl","sourcecode":"if (double < (int)) {\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(40.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    if (com.graphhopper.reader.OSMWay.hasTag(\"tunnel\", java.util.Set<java.lang.String>))\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(40.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    \n} "},"status":-1},{"failures":[],"tindex":"e5caf2fb-8277-11e5-8212-ebd9c2cab882","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:669","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.EncodingManager.setEnableInstructions(boolean)"},"status":0},{"failures":[],"tindex":"e5caf2fc-8277-11e5-8212-ff2ab3bad9c7","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:191","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(5)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:425","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"status":-2},{"failures":[],"tindex":"e5cb1a0d-8277-11e5-8212-9fdd4aa6cafd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:173","type":"CtIfImpl","sourcecode":"if (int < int) {\n    int = int;\n} "},"variableMap":{"max":"to","tmpSize":"adjNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:103","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.storage.EdgeEntry) != null) {\n    gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry> = gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry>;\n    com.graphhopper.routing.DijkstraBidirectionRef.updateBestPath(com.graphhopper.util.GHUtility.getEdge(com.graphhopper.storage.Graph, com.graphhopper.storage.EdgeEntry.int, int), com.graphhopper.storage.EdgeEntry, int);\n} "},"status":-2},{"failures":[],"tindex":"e5cb1a0e-8277-11e5-8212-7beaa7f2cf4a","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.RacingBikeFlagEncoder:157","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(110.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"variableMap":{"weightToPrioMap":"weightToPrioMap","com.graphhopper.routing.util.PriorityCode.PREFER":"com.graphhopper.routing.util.PriorityCode.UNCHANGED"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:556","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(100.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"status":-2},{"failures":[48,49,50],"tindex":"e5cb1a0f-8277-11e5-8212-01704739a4b3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.RoundaboutInstruction:59","type":"CtIfImpl","sourcecode":"if ((int) != int) {\n    int = 2;\n} "},"variableMap":{"clockwise2":"priorityFromRelation","clockwise":"priorityFromRelation"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:352","type":"CtIfImpl","sourcecode":"if (long != 0)\n    int = ((int)(com.graphhopper.routing.util.EncodedValue.getValue(long)));\n"},"status":-1},{"failures":[],"tindex":"e5cb1a10-8277-11e5-8212-7b74b12a2231","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1047","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch().start()"},"status":0},{"failures":[51,52],"tindex":"e5cb1a11-8277-11e5-8212-576c7ba9b519","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:118","type":"CtIfImpl","sourcecode":"if (int < 0)\n    throw new java.lang.IllegalStateException(\"Too many segments needs to be allocated. Increase segmentSize.\");\n"},"variableMap":{"segmentsToMap":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntIntBinHeap:155","type":"CtIfImpl","sourcecode":"if (int > (int[][int])) {\n    while ((int * 2) <= (int)) {\n        int int = int * 2;\n        if ((int != (int)) && ((int[][(int + 1)]) < (int[][int]))) {\n            int++;\n        } \n        if (int > (int[][int])) {\n            int[][int] = int[][int];\n            int[][int] = int[][int];\n            int = int;\n        } else {\n            break;\n        }\n    }\n    int[][int] = int;\n    int[][int] = int;\n} else {\n    while ((int[][(int / 2)]) > int) {\n        int[][int] = int[][(int / 2)];\n        int[][int] = int[][(int / 2)];\n        int /= 2;\n    }\n    int[][int] = int;\n    int[][int] = int;\n}"},"status":-1},{"failures":[53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,18,19,20,21,22,82,83,84,85,86,17,87,88,89,90,91,92,26,93],"tindex":"e5cb4122-8277-11e5-8212-897a069b2ef8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:108","type":"CtReturnImpl","sourcecode":"return double + 0.1"},"variableMap":{"val":"a_lat_deg"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:118","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.DistanceCalcEarth.calcNormalizedEdgeDistanceNew(double, double, double, double, double, double, false)"},"status":-1},{"failures":[],"tindex":"e5cb4123-8277-11e5-8212-29b482024b6c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:614","type":"CtIfImpl","sourcecode":"if (java.lang.Double.isInfinite(double))\n    continue;\n"},"variableMap":{"existingDirectWeight":"lon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:664","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double = com.graphhopper.util.DistanceCalc.calcDist(com.graphhopper.util.shapes.GHPoint.double, com.graphhopper.util.shapes.GHPoint.double, double, com.graphhopper.util.shapes.GHPoint.double);\n} else {\n    double = com.graphhopper.util.DistanceCalc.calcDist(com.graphhopper.util.shapes.GHPoint.double, com.graphhopper.util.shapes.GHPoint.double, double, com.graphhopper.util.shapes.GHPoint.double);\n}"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"e5cb1a10-8277-11e5-8212-7b74b12a2231","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.StopWatch.start"]},"type":"staticDiff"}]},{"transformation":"e5caf2fb-8277-11e5-8212-ebd9c2cab882","diffs":[{"branches":{"com.graphhopper.GraphHopperTest.testFootAndCar":["com.graphhopper.routing.util.EncodingManager_com.graphhopper.routing.util.EncodingManager_setEnableInstructions(boolean).b"]},"type":"branch"},{"methodsDiff":{"delete":["com.graphhopper.routing.util.EncodingManager.setEnableInstructions"]},"type":"staticDiff"}]},{"transformation":"e5caf2f8-8277-11e5-8212-dfea64f7b124","diffs":[{"methodsDiff":{"delete":["java.lang.StringBuilder.append","java.lang.Throwable.getMessage","com.graphhopper.util.Translation.getLocale","java.util.Map.Entry<java.lang.String, java.lang.String>.getKey"]},"branchesDiff":{"delete":["c0"]},"type":"staticDiff"}]}]}
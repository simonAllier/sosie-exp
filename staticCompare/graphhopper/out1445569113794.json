{"failureDictionary":{"com.graphhopper.util.InstructionListTest.testWayList2":40,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":11,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":2,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":16,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":23,"com.graphhopper.storage.MMapDataAccessTest.testSet_GetBytes":3,"com.graphhopper.reader.OSMReaderTest.testMain":20,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":14,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":15,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":17,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":34,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":0,"com.graphhopper.util.InstructionListTest.testWayList":39,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":8,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":13,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":33,"com.graphhopper.routing.PathTest.testWayList":18,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":35,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":25,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":37,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":21,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":12,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":26,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":10,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":22,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":19,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":31,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":27,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":5,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":28,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":4,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":30,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":9,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":29,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":36,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":38,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":32,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":7,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":6,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":24,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":1},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8],"tindex":"f2c6a115-7931-11e5-91c5-e947c49e2fcf","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:369","type":"CtInvocationImpl","sourcecode":"java.nio.ByteBuffer.position(0)"},"variableMap":{"bb":"bb"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:362","type":"CtInvocationImpl","sourcecode":"java.nio.ByteBuffer.position(int)"},"status":-1},{"failures":[],"tindex":"f2c6c826-7931-11e5-91c5-fd3e9498fb45","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.DAType:180","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.DAType = new com.graphhopper.storage.DAType(com.graphhopper.storage.DAType , true)"},"variableMap":{"type":"com.graphhopper.storage.DAType.RAM_STORE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.DAType:174","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.DAType = com.graphhopper.storage.DAType.com.graphhopper.storage.DAType"},"status":-2},{"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,0,23,24,25,26,1,27,28,29,30,2,31,32,33,34,35,36,37,38,4,5,6,7,39,40],"tindex":"f2c6c827-7931-11e5-91c5-e1eb5af7205c","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:69","type":"CtAssignmentImpl","sourcecode":"int = int / 10"},"variableMap":{"initLeafSize":"maxGeoRef","maxLeafEntries":"maxGeoRef"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:399","type":"CtAssignmentImpl","sourcecode":"int = 4"},"status":-1},{"failures":[],"tindex":"f2c6c828-7931-11e5-91c5-d3f667367858","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:664","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double) >= (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.CHEdgeIterator, false, com.graphhopper.util.EdgeIterator.int)))\n    continue NEXT_SC;\n"},"status":-2},{"failures":[],"tindex":"f2c6c829-7931-11e5-91c5-4d9bf8be2067","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:265","type":"CtIfImpl","sourcecode":"if ((\"motorway\".equals(java.lang.String)) || (\"motorway_link\".equals(java.lang.String)))\n    return 0;\n"},"variableMap":{"highwayValue":"highwayValue"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:224","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.util.AbstractFlagEncoder.(isBlockFords()) && ((\"ford\".equals(java.lang.String)) || (com.graphhopper.reader.OSMWay.hasTag(\"ford\"))))\n    return 0;\n"},"status":-2},{"failures":[],"tindex":"f2c6c82a-7931-11e5-91c5-7329926768dc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DouglasPeucker:102","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    continue;\n} "},"variableMap":{"freeIndex":"capacity"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:207","type":"CtIfImpl","sourcecode":"if ((int) > (int)) {\n    com.graphhopper.coll.IntDoubleBinHeap.ensureCapacity(((int)((int) * (com.graphhopper.coll.IntDoubleBinHeap.double))));\n} "},"status":-2},{"failures":[],"tindex":"f2c6ef3b-7931-11e5-91c5-d3269cd206ac","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.AbstractBidirAlgo:90","type":"CtReturnImpl","sourcecode":"return (int) + (int)"},"variableMap":{"visitedCountFrom":"closestNode","visitedCountTo":"closestNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.QueryResult:76","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"f2c6ef3c-7931-11e5-91c5-abaa42f970be","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:538","type":"CtAssignmentImpl","sourcecode":"double = java.lang.Math.round(((double / double) / 1.4))"},"variableMap":{"val":"fullWeight","shortTripsSpeed":"fullWeight","durationInHours":"fullWeight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:54","type":"CtOperatorAssignmentImpl","sourcecode":"double += com.graphhopper.routing.Path.getWeight()"},"status":-2},{"failures":[],"tindex":"f2c6ef3d-7931-11e5-91c5-85e17ba7e7ad","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:61","type":"CtIfImpl","sourcecode":"if ((int) > 0)\n    throw new java.lang.AssertionError(\"The turn cost storage must be initialized only once.\");\n"},"variableMap":{"turnCostsCount":"cap"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:113","type":"CtIfImpl","sourcecode":"if (boolean)\n    double[] = java.util.Arrays.copyOf(double[], int);\n"},"status":-2},{"failures":[],"tindex":"f2c6ef3e-7931-11e5-91c5-833767ffef67","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:416","type":"CtReturnImpl","sourcecode":"return 80"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:307","type":"CtReturnImpl","sourcecode":"return (int * int) + (int * int)"},"status":-2},{"failures":[],"tindex":"f2c6ef3f-7931-11e5-91c5-a11d4fd39f6d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:694","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.coll.GHBitSet com.graphhopper.coll.GHBitSet = new com.graphhopper.coll.GHBitSetImpl((int * 3))"},"variableMap":{"removeNodeCount":"removeNodeCount"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:639","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.coll.GHBitSet com.graphhopper.coll.GHBitSet = new com.graphhopper.coll.GHBitSetImpl(int)"},"status":-2},{"failures":[],"tindex":"f2c6ef40-7931-11e5-91c5-33e6d1200a1e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:889","type":"CtReturnImpl","sourcecode":"return new com.graphhopper.routing.util.FastestWeighting(com.graphhopper.routing.util.FlagEncoder , com.graphhopper.routing.util.WeightingMap)"},"variableMap":{"weightingMap":"weightingMap","encoder":"encoder"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:887","type":"CtReturnImpl","sourcecode":"return new com.graphhopper.routing.util.PriorityWeighting(com.graphhopper.routing.util.FlagEncoder , com.graphhopper.routing.util.WeightingMap)"},"status":-2},{"failures":[],"tindex":"f2c71651-7931-11e5-91c5-51567d168520","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:178","type":"CtIfImpl","sourcecode":"if (int > 64)\n    throw new java.lang.IllegalStateException(\"sum of all shifts does not fit into a long variable\");\n"},"variableMap":{"shiftSum":"endNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:313","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.Path.isFound()) {\n    com.graphhopper.routing.TIntArrayList.add(int);\n} "},"status":-2},{"failures":[],"tindex":"f2c71652-7931-11e5-91c5-619304e10c0a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.FootFlagEncoder:362","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"sidewalk\", \"no\"))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(40.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\nelse\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(40.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"variableMap":{"weightToPrioMap":"weightToPrioMap","com.graphhopper.routing.util.PriorityCode.UNCHANGED":"com.graphhopper.routing.util.PriorityCode.AVOID_AT_ALL_COSTS","com.graphhopper.routing.util.PriorityCode.REACH_DEST":"com.graphhopper.routing.util.PriorityCode.AVOID_AT_ALL_COSTS","way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:546","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"tunnel\", java.util.Set<java.lang.String>))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(50.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"status":-2},{"failures":[],"tindex":"f2c71653-7931-11e5-91c5-8ffe55278c1a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.RoundaboutInstruction:97","type":"CtIfImpl","sourcecode":"if ((java.lang.Math.abs(int)) != 1)\n    return java.lang.Double.double;\nelse\n    return ((java.lang.Math.double) * (int)) - (double);\n"},"variableMap":{"java.lang.Double.NaN":"lat","clockwise":"intKey","java.lang.Math.PI":"precision","radian":"precision"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:224","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.dem.HeightTile == null) {\n    if (!(java.io.File.exists()))\n        java.io.File.mkdirs();\n    \n    java.lang.String java.lang.String = com.graphhopper.reader.dem.SRTMProvider.getFileString(double, double);\n    if (java.lang.String == null)\n        return 0;\n    \n    int int = com.graphhopper.reader.dem.SRTMProvider.down(double);\n    int int = com.graphhopper.reader.dem.SRTMProvider.down(double);\n    com.graphhopper.reader.dem.HeightTile = new com.graphhopper.reader.dem.HeightTile(int , int , int , double , 1);\n    com.graphhopper.reader.dem.HeightTile.setCalcMean(boolean);\n    com.graphhopper.reader.dem.TIntObjectHashMap<com.graphhopper.reader.dem.HeightTile>.put(int, com.graphhopper.reader.dem.HeightTile);\n    com.graphhopper.storage.DataAccess com.graphhopper.storage.DataAccess = com.graphhopper.reader.dem.SRTMProvider.getDirectory().find((\"dem\" + int));\n    com.graphhopper.reader.dem.HeightTile.setHeights(com.graphhopper.storage.DataAccess);\n    boolean boolean = false;\n    try {\n        boolean = com.graphhopper.storage.DataAccess.loadExisting();\n    } catch (java.lang.Exception ex) {\n        com.graphhopper.reader.dem.Logger.warn((((\"cannot load dem\" + int) + \", error:\") + (java.lang.Exception.getMessage())));\n    }\n    if (!boolean) {\n        byte[] byte[] = new byte[(2 * (int)) * (int)];\n        com.graphhopper.storage.DataAccess.create(byte[].int);\n        try {\n            java.lang.String java.lang.String = (((java.lang.String) + \"/\") + java.lang.String) + \".hgt.zip\";\n            java.io.File java.io.File = new java.io.File(java.io.File , new java.io.File(java.lang.String).getName());\n            java.io.InputStream java.io.InputStream;\n            if (!(java.io.File.exists())) {\n                for (int int = 0 ; int < 3 ; int++) {\n                    try {\n                        com.graphhopper.util.Downloader.downloadFile(java.lang.String, java.io.File.getAbsolutePath());\n                        break;\n                    } catch (java.net.SocketTimeoutException ex) {\n                        java.lang.Thread.sleep(2000);\n                        continue;\n                    } catch (java.io.FileNotFoundException ex) {\n                        java.lang.String = (((java.lang.String) + \"/\") + java.lang.String) + \"hgt.zip\";\n                        continue;\n                    }\n                }\n            } \n            java.io.InputStream = new java.io.FileInputStream(java.io.File);\n            java.util.zip.ZipInputStream java.util.zip.ZipInputStream = new java.util.zip.ZipInputStream(java.io.InputStream);\n            java.util.zip.ZipInputStream.getNextEntry();\n            java.io.BufferedInputStream java.io.BufferedInputStream = new java.io.BufferedInputStream(java.util.zip.ZipInputStream);\n            int int;\n            while ((int = java.io.BufferedInputStream.read(byte[])) > 0) {\n                for (int int = 0 ; int < int ; int += 2) {\n                    short short = com.graphhopper.reader.dem.SRTMProvider.com.graphhopper.util.BitUtil.toShort(byte[], int);\n                    if ((short < (-1000)) || (short > 12000))\n                        short = java.lang.Short.short;\n                    \n                    com.graphhopper.storage.DataAccess.setShort(int, short);\n                }\n            }\n            com.graphhopper.storage.DataAccess.flush();\n        } catch (java.lang.Exception ex) {\n            throw new java.lang.RuntimeException(java.lang.Exception);\n        }\n    } \n} "},"status":-2},{"failures":[],"tindex":"f2c73d64-7931-11e5-91c5-eb26d863e504","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.Path:641","type":"CtIfImpl","sourcecode":"if (int > 0)\n    java.lang.String += \"->\";\n"},"variableMap":{"str":"com.graphhopper.routing.util.EncodingManager.ERR","i":"usedBits"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:192","type":"CtIfImpl","sourcecode":"if (int > (int))\n    throw new java.lang.IllegalArgumentException(((java.lang.String.format(com.graphhopper.routing.util.EncodingManager.java.lang.String, int, \"way\")) + (com.graphhopper.routing.util.EncodingManager.java.lang.String)));\n"},"status":-2},{"failures":[],"tindex":"f2c73d65-7931-11e5-91c5-63c674ff2c1a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:125","type":"CtAssignmentImpl","sourcecode":"int[][int] = java.io.RandomAccessFile.readInt()"},"status":-2},{"failures":[],"tindex":"f2c73d66-7931-11e5-91c5-df059a91dfc7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:848","type":"CtReturnImpl","sourcecode":"return ((int)(int))"},"variableMap":{"tmpNode":"nodeA"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:157","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"f2c73d67-7931-11e5-91c5-cf73f3677a9d","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.SRTMProvider:257","type":"CtLocalVariableImpl","sourcecode":"java.io.InputStream java.io.InputStream"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMInputFile:84","type":"CtLocalVariableImpl","sourcecode":"java.io.InputStream java.io.InputStream = null"},"status":-2},{"failures":[],"tindex":"f2c73d68-7931-11e5-91c5-6396b6fdde0c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:421","type":"CtIfImpl","sourcecode":"if ((java.lang.String.equals(\"walk\")) || (java.lang.String.endsWith(\":living_street\")))\n    return 6;\n"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
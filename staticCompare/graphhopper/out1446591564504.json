{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":158,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":45,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":51,"com.graphhopper.routing.util.EncodedDoubleValueTest.testMaxValueAndSwap":121,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":153,"com.graphhopper.reader.OSMReaderTest.testFerry":184,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":117,"com.graphhopper.routing.QueryGraphTest.testOneWay":50,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":196,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":114,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidanceOfHighMaxSpeed":126,"com.graphhopper.geohash.SpatialKeyAlgoTest.testOddBits":193,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":31,"com.graphhopper.routing.util.FootFlagEncoderTest.testBasics":97,"com.graphhopper.coll.CompressedArrayTest.testCompress":190,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":72,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":98,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":166,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":192,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":174,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":149,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":7,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":49,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":4,"com.graphhopper.util.InstructionListTest.testWayList":187,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":87,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":186,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":127,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":125,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":155,"com.graphhopper.geohash.SpatialKeyAlgoTest.testNoFurtherIterationIfBitsIs1":197,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":28,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":115,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":58,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed0_issue367":131,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":5,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":143,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":33,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":118,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":137,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":128,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":161,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":83,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":16,"com.graphhopper.GraphHopperTest.testLoadOSM":27,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":60,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":168,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":90,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":32,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":180,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":19,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testSetSpeed0_issue367":106,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijection":198,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":120,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":136,"com.graphhopper.routing.PathTest.testWayList":141,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":70,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":178,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":10,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":3,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":191,"com.graphhopper.routing.util.EncodedDoubleValueTest.testMaxValue":123,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":110,"com.graphhopper.routing.util.FootFlagEncoderTest.testGetSpeed":93,"com.graphhopper.util.DistanceCalcEarthTest.testValidEdgeDistance":74,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":71,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":56,"com.graphhopper.coll.IntDoubleBinHeapTest.testRekey":39,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":112,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":102,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":142,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":156,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":59,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":6,"com.graphhopper.routing.util.EncodedDoubleValueTest.testSetDoubleValue":122,"com.graphhopper.geohash.SpatialKeyAlgoTest.testDifferentInitialBounds":200,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":152,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":64,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":111,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":48,"com.graphhopper.coll.CompressedArrayTest.testCompress2":189,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":108,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":29,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":18,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":101,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSetSpeed0_issue367":107,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":148,"com.graphhopper.routing.util.FastestWeightingTest.testSpeed0":92,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":26,"com.graphhopper.GHRequestTest.testGetHint":43,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":9,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":30,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":163,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":34,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":144,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":100,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":53,"com.graphhopper.routing.PathTest.testFindInstruction":57,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":85,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":145,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":157,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":96,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":165,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":54,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":63,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":167,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":55,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":151,"com.graphhopper.storage.GraphHopperStorageCHTest.testFlags":84,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":182,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":177,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":146,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":194,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":14,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":44,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":82,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":181,"com.graphhopper.util.InstructionListTest.testWayList2":188,"com.graphhopper.reader.OSMReaderTest.testFoot":35,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":160,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":52,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":159,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":199,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":170,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijectionBug2":195,"com.graphhopper.reader.OSMReaderTest.testOneWay":37,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":81,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":116,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":175,"com.graphhopper.routing.util.FastestWeightingTest.testMinWeightHasSameUnitAs_getWeight":91,"com.graphhopper.routing.util.CarFlagEncoderTest.testMilitaryAccess":0,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":13,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":162,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":164,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":140,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":8,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":69,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":147,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":11,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":15,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":119,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxValue":133,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":75,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":79,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":78,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":77,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":124,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":76,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":171,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":46,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":130,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":23,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":129,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":86,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":104,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":172,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":173,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":36,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":66,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":94,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":150,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":109,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":185,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":12,"com.graphhopper.storage.StorablePropertiesTest.testStore":21,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":22,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":169,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":183,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":2,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":132,"com.graphhopper.GraphHopperTest.testFootAndCar":38,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":113,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":24,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":103,"com.graphhopper.routing.PathTest.testTime":138,"com.graphhopper.util.InstructionListTest.testCreateGPX":41,"com.graphhopper.routing.util.CarFlagEncoderTest.testOneway":134,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed":135,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":61,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":89,"com.graphhopper.GraphHopperTest.testPrepareOnly":25,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":65,"com.graphhopper.GraphHopperTest.testVia":80,"com.graphhopper.coll.IntDoubleBinHeapTest.test0":40,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":154,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":88,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":67,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":47,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":42,"com.graphhopper.routing.util.FootFlagEncoderTest.testCombined":95,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":1,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":68,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":139,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":179,"com.graphhopper.util.InstructionListTest.testFind":73,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":99,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":105,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":17,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":62,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":176},"transformations":[{"failures":[0,1,2],"tindex":"86e394c5-827e-11e5-bf01-3d083b85fa8a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:215","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.isEmpty())) {\n    if (java.util.Set<java.lang.String>.contains(java.lang.String))\n        return 0;\n    \n    if (java.util.Set<java.lang.String>.contains(java.lang.String))\n        return long;\n    \n} "},"status":-1},{"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16],"tindex":"86e3bbd6-827e-11e5-bf01-49612419a0dd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:693","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.CHEdgeIteratorState.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long)"},"status":-1},{"failures":[],"tindex":"86e3bbd7-827e-11e5-bf01-83e0a077412a","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtil:233","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= 1"},"variableMap":{"value":"wayStart"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:301","type":"CtAssignmentImpl","sourcecode":"long = long"},"status":0},{"failures":[],"tindex":"86e3bbd8-827e-11e5-bf01-e969aaf6302f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Instruction:268","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:245","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.util.Instruction.calcDirection(com.graphhopper.util.Instruction)"},"status":-2},{"failures":[],"tindex":"86e3e2e9-827e-11e5-bf01-031e1eb7f8c4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PMap:34","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PMap.this(5)"},"variableMap":{"this":"properties"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeFlagEncoder:46","type":"CtAssignmentImpl","sourcecode":"this.com.graphhopper.util.PMap = com.graphhopper.util.PMap"},"status":-2},{"failures":[],"tindex":"86e3e2ea-827e-11e5-bf01-49f951484168","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.CmdArgs:99","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(\"-\")) {\n    java.lang.String = java.lang.String.substring(1);\n} "},"variableMap":{"key":"com.graphhopper.routing.util.EncodingManager.FOOT"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:144","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.BikeFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.Bike2WeightFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.RacingBikeFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MountainBikeFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.FootFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MotorcycleFlagEncoder(com.graphhopper.util.PMap);\nelse\n    throw new java.lang.IllegalArgumentException((\"entry in encoder list not supported \" + java.lang.String));\n"},"status":-2},{"failures":[17,18,19,20,21,22,23,24,25,26,27,28,29],"tindex":"86e3e2eb-827e-11e5-bf01-43ca9d91f45e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:143","type":"CtInvocationImpl","sourcecode":"java.io.BufferedWriter.append('\\n')"},"variableMap":{"writer":"writer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:141","type":"CtInvocationImpl","sourcecode":"java.io.BufferedWriter.append('=')"},"status":-1},{"failures":[30,31,32,33,34,35,36,37,38],"tindex":"86e3e2ec-827e-11e5-bf01-3bdb756d0660","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:291","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int)"},"variableMap":{"nodeIndex":"i","edgeExplorerAllEdges":"explorer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:256","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(gnu.trove.list.TIntList.get(int))"},"status":-1},{"failures":[],"tindex":"86e409fd-827e-11e5-bf01-d1945afafe3c","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.RoundaboutInstruction:115","type":"CtLocalVariableImpl","sourcecode":"java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new java.util.HashMap<java.lang.String, java.lang.Object>(2)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:78","type":"CtLocalVariableImpl","sourcecode":"java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new java.util.HashMap<java.lang.String, java.lang.Object>()"},"status":-2},{"failures":[39,40],"tindex":"86e409fe-827e-11e5-bf01-3598e264f497","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.Path:243","type":"CtIfImpl","sourcecode":"if (((java.lang.Double.isInfinite(double)) || (java.lang.Double.isNaN(double))) || (double < 0))\n    throw new java.lang.IllegalStateException((\"Invalid speed stored in edge! \" + double));\n"},"variableMap":{"speed":"key"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:160","type":"CtIfImpl","sourcecode":"if (double > (float[][int])) {\n    while ((int * 2) <= (int)) {\n        int int = int * 2;\n        if ((int != (int)) && ((float[][(int + 1)]) < (float[][int]))) {\n            int++;\n        } \n        if (double > (float[][int])) {\n            int[][int] = int[][int];\n            float[][int] = float[][int];\n            int = int;\n        } else {\n            break;\n        }\n    }\n    int[][int] = int;\n    float[][int] = ((float)(double));\n} else {\n    while ((float[][(int / 2)]) > double) {\n        int[][int] = int[][(int / 2)];\n        float[][int] = float[][(int / 2)];\n        int /= 2;\n    }\n    int[][int] = int;\n    float[][int] = ((float)(double));\n}"},"status":-1},{"failures":[],"tindex":"86e409ff-827e-11e5-bf01-edebab86db01","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:966","type":"CtLocalVariableImpl","sourcecode":"int int = 5"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.RoundaboutInstruction:58","type":"CtLocalVariableImpl","sourcecode":"int int = double > 0 ? 1 : -1"},"status":-2},{"failures":[41,42],"tindex":"86e40a00-827e-11e5-bf01-31b936e13b34","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionList:229","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<\/gpx>\")"},"variableMap":{"track":"output"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:235","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"\\n<rtept lat=\\\"\").append(com.graphhopper.util.Helper.round6(com.graphhopper.util.Instruction.getFirstLat()))"},"status":-1},{"failures":[43,27],"tindex":"86e40a01-827e-11e5-bf01-dd87a974edd8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:307","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PMap:100","type":"CtReturnImpl","sourcecode":"return java.lang.Integer.parseInt(java.lang.String)"},"status":-1},{"failures":[44,45,46,47,48,49,50,51,52,53,54,55,56,7,10,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,38],"tindex":"86e43112-827e-11e5-bf01-8dd59870ca5d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.shapes.BBox:181","type":"CtReturnImpl","sourcecode":"return (((double < (double)) && (double >= (double))) && (double < (double))) && (double >= (double))"},"variableMap":{"minLon":"ab_ar","maxLat":"ab_ar","minLat":"ab_rb","maxLon":"ab_ar","lon":"ab_ar","lat":"ab_rb"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:242","type":"CtReturnImpl","sourcecode":"return (double > 0) && (double > 0)"},"status":-1},{"failures":[81,82,83,84],"tindex":"86e43113-827e-11e5-bf01-b551515f4e31","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:133","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((\"This is a 2D list we cannot store elevation: \" + double))"},"variableMap":{"ele":"distance"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:86","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((((\"Distance cannot be empty: \" + double) + \", maybe overflow issue? integer: \") + int))"},"status":-1},{"failures":[36],"tindex":"86e43114-827e-11e5-bf01-c3027a0881c2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:428","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.routing.util.FlagEncoder com.graphhopper.routing.util.FlagEncoder : java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>) {\n    if (com.graphhopper.routing.util.FlagEncoder.supports(com.graphhopper.routing.util.TurnWeighting.com.graphhopper.routing.util.TurnWeighting))\n        return true;\n    \n}"},"status":-1},{"failures":[],"tindex":"86e43115-827e-11e5-bf01-f3c3206d51ab","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:300","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.OSMReader.org.slf4j.Logger.info((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \", now parsing ways\"))"},"status":0},{"failures":[85,86,3,4,87,88,89,90,55,56,10,13,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,31,128,129,130,1,131,132,133,134,135,136,137,138,139,140,141,57,142,143,17,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,19,162,163,164,165,166,167,168,169,170,171,172,173,174,24,175,176,177,178,179,180,181,182,183,184,35,36,185,37,73,186,187,188,42,80,38],"tindex":"86e43116-827e-11e5-bf01-d527670f5758","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.StopWatch:58","type":"CtAssignmentImpl","sourcecode":"long = -1"},"variableMap":{"lastTime":"tmpValue"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:64","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= long"},"status":-1},{"failures":[189,190,191,192,193,194,195,196,197,198,199,200],"tindex":"86e45827-827e-11e5-bf01-c56a85aaeac8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:248","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.shapes.GHPoint.double = double"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":19,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"86e43115-827e-11e5-bf01-f3c3206d51ab","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.Helper.nf","org.slf4j.Logger.info"]},"type":"staticDiff"}]}]}
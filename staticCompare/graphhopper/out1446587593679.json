{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":123,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":316,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":340,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":348,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":8,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":204,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":117,"com.graphhopper.reader.OSMReaderTest.testFerry":45,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":281,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":282,"com.graphhopper.storage.GraphHopperStorageCHTest.testDoThrowExceptionIfDimDoesNotMatch":249,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":337,"com.graphhopper.routing.QueryGraphTest.testOneWay":347,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":17,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":263,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":67,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSortHighLevelFirst":195,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":4,"com.graphhopper.reader.OSMReaderTest.testWithBounds":56,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":125,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":179,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testInfinityWeight":192,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":293,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":343,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":294,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":239,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":243,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testNoErrorOnEdgeCase_lastIndex":37,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":325,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":367,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":157,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":23,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":59,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":209,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":95,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":262,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":213,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":264,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":333,"com.graphhopper.GraphHopperTest.testPrepare":69,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":369,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":93,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":83,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":219,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":228,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":322,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":345,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":302,"com.graphhopper.storage.GraphHopperStorageTest.testInfinityWeight":237,"com.graphhopper.util.InstructionListTest.testWayList":278,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":277,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":310,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNormedDist":196,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":289,"com.graphhopper.GraphHopperAPITest.testDisconnected179":79,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":257,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":85,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":132,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":74,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBounds":1,"com.graphhopper.storage.RAMIntDataAccessTest.testBoundsCheck":162,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":2,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":295,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":119,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":303,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":224,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":308,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":5,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":151,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":362,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":51,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":297,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":194,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":138,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":354,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":130,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":70,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":220,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":199,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":188,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":191,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":97,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":154,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":189,"com.graphhopper.GraphHopperTest.testLoadOSM":73,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":13,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":334,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":26,"com.graphhopper.storage.RAMIntDataAccessTest.testEnsureCapacity":165,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":6,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":111,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":251,"com.graphhopper.reader.OSMReaderTest.testSort":48,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":110,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":313,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":55,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":296,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":141,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":170,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":235,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":40,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":330,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":31,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":32,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":370,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":173,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":155,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":320,"com.graphhopper.storage.RAMIntDataAccessTest.testRenameNoFlush":166,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":273,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":214,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":353,"com.graphhopper.routing.PathTest.testWayList":359,"com.graphhopper.storage.MMapDataAccessTest.testCopy":365,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":99,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":371,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":36,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":256,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":321,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeReturn":268,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":221,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":301,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":3,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":238,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":309,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":339,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":25,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPropertiesWithNoInit":187,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":91,"com.graphhopper.storage.GraphHopperStorageCHTest.testPrios":241,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":259,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":109,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":174,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":245,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":106,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":176,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":38,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":216,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":149,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":107,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":82,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":361,"com.graphhopper.util.GHUtilityTest.testSort":286,"com.graphhopper.storage.MMapDataAccessTest.testSet_GetBytes":364,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":10,"com.graphhopper.storage.GraphStorageViaMMapTest.testBounds":42,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":346,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":306,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":271,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":305,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":100,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":104,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":182,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":349,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":205,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":89,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":185,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":201,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":210,"com.graphhopper.storage.RAMIntDataAccessTest.testSegments":168,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":244,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":147,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":344,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":208,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":291,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":75,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":169,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":171,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":230,"com.graphhopper.storage.GraphHopperStorageCHTest.testBigDataEdge":250,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":202,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":156,"com.graphhopper.GraphHopperAPITest.testLoad":78,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":72,"com.graphhopper.storage.RAMIntDataAccessTest.testRenameFlush":164,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":94,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":319,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":225,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":84,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":247,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":103,"com.graphhopper.reader.OSMReaderTest.testBarriers":49,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":86,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":87,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes":142,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":240,"com.graphhopper.routing.PathTest.testFound":355,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":77,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":20,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":121,"com.graphhopper.util.GHUtilityTest.testCopy":285,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":307,"com.graphhopper.routing.PathTest.testFindInstruction":360,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":299,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":88,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":288,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":181,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":158,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":223,"com.graphhopper.util.InstructionListTest.testEmptyList":276,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":80,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":203,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":114,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":108,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":81,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":98,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":229,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":283,"com.graphhopper.storage.GraphHopperStorageCHTest.testFlags":253,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":315,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":146,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":92,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":327,"com.graphhopper.reader.PrinctonReaderTest.testRead":150,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":236,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":255,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":177,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":186,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":366,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":134,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes2":137,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":218,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":332,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":336,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":183,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":144,"com.graphhopper.storage.GraphHopperStorageCHTest.testBounds":44,"com.graphhopper.util.InstructionListTest.testWayList2":279,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":29,"com.graphhopper.reader.OSMReaderTest.testFoot":46,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":128,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":14,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":126,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":350,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":11,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":115,"com.graphhopper.coll.IntIntBinHeapTest.test0":161,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":12,"com.graphhopper.reader.OSMReaderTest.testOneWay":58,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":272,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":175,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":135,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":193,"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":215,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":226,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetLocations":260,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":290,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":112,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":139,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":234,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":190,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":122,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":180,"com.graphhopper.storage.GraphHopperStorageTest.testPropertiesWithNoInit":232,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":331,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":197,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":102,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":222,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":50,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":358,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":326,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":33,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":318,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":178,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":153,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":266,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":335,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":211,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":324,"com.graphhopper.routing.PathBidirRefTest.testExtract":351,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":66,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":152,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":298,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":9,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":61,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":127,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnsureSize":248,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":65,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":101,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":35,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":64,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":63,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":368,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":62,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":19,"com.graphhopper.util.GHUtilityTest.testSort2":284,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":314,"com.graphhopper.reader.OSMReaderTest.testMain":47,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":269,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":341,"com.graphhopper.storage.GraphHopperStorageCHTest.testInfinityWeight":270,"com.graphhopper.storage.GraphHopperStorageTest.testBigDataEdge":217,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":184,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":145,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":133,"com.graphhopper.storage.RAMIntDataAccessTest.testTrimTo":167,"com.graphhopper.routing.PathBidirRefTest.testExtract2":352,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":267,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":363,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":200,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":129,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBigDataEdge":172,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":300,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":27,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":15,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":207,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":292,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":39,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":233,"com.graphhopper.coll.IntIntBinHeapTest.testRekey":160,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":140,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":261,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":21,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":52,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":131,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":96,"com.graphhopper.storage.RAMIntDataAccessTest.testCopy":163,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":57,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":212,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":252,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":317,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":329,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":242,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":7,"com.graphhopper.storage.GraphHopperStorageTest.testClone":105,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":116,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":113,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":148,"com.graphhopper.storage.GraphHopperStorageCHTest.testCheckFirstNode":143,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":227,"com.graphhopper.GraphHopperTest.testFootAndCar":71,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":231,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":43,"com.graphhopper.routing.PathTest.testTime":356,"com.graphhopper.util.InstructionListTest.testCreateGPX":372,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":120,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":254,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":328,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":16,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":24,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":312,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":90,"com.graphhopper.storage.GraphHopperStorageCHTest.testPropertiesWithNoInit":265,"com.graphhopper.util.GHUtilityTest.testSortDirected":287,"com.graphhopper.GraphHopperTest.testPrepareOnly":60,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":258,"com.graphhopper.GraphHopperTest.testVia":68,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":206,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":338,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":118,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":311,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":54,"com.graphhopper.reader.OSMReaderTest.testTurnFlagCombination":274,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":34,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":22,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":246,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":342,"com.graphhopper.storage.GraphHopperStorageTest.testBounds":41,"com.graphhopper.GraphHopperTest.testFootOnly":76,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":280,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":28,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":53,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":198,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":30,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":124,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":159,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":357,"com.graphhopper.util.InstructionListTest.testFind":275,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":304,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":323,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":0,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":18,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":136},"transformations":[{"failures":[],"tindex":"481972d3-8275-11e5-9384-c90b02c65d08","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:77","type":"CtAssignmentImpl","sourcecode":"boolean = boolean"},"variableMap":{"calcMean":"enableInstructions","eleCalcMean":"enableInstructions"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:378","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"status":0},{"failures":[],"tindex":"481999e4-8275-11e5-9384-a5c015298726","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.NativeFSLockFactory:171","type":"CtReturnImpl","sourcecode":"return !boolean"},"variableMap":{"obtained":"allowWrites"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.DAType:101","type":"CtReturnImpl","sourcecode":"return boolean"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"tindex":"4819c0f5-8275-11e5-9384-4fae1cfb7db5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.shapes.BBox:104","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-1},{"failures":[],"tindex":"4819c0f6-8275-11e5-9384-a7e4dadddbab","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:112","type":"CtTryImpl","sourcecode":"try {\n    int[][] int[][] = java.util.Arrays.copyOf(int[][], ((int[][].int) + int));\n    for (int int = int[][].int ; int < (int[][].int) ; int++) {\n        int[][][int] = new int[1 << (int)];\n    }\n    int[][] = int[][];\n    return true;\n} catch (java.lang.OutOfMemoryError err) {\n    throw new java.lang.OutOfMemoryError((((((((((((java.lang.OutOfMemoryError.getMessage()) + \" - problem when allocating new memory. Old capacity: \") + long) + \", new bytes:\") + long) + \", segmentSizeIntsPower:\") + (int)) + \", new segments:\") + int) + \", existing:\") + (int[][].int)));\n}"},"status":-2},{"failures":[45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,67,68,69,70,71,72,73,74,75,76,77],"tindex":"4819c0f7-8275-11e5-9384-61c634258a72","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DouglasPeucker:154","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    throw new java.lang.IllegalStateException(((((\"maximum not found in [\" + int) + \",\") + int) + \"]\"));\n} "},"variableMap":{"indexWithMaxDist":"firstNode","lastIndex":"firstNode","fromIndex":"lastInBoundsPillarNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:672","type":"CtTryImpl","sourcecode":"try {\n    for (int int = 0 ; int < (gnu.trove.list.TLongList.size()) ; int++) {\n        long long = gnu.trove.list.TLongList.get(int);\n        int int = com.graphhopper.reader.OSMReader.getNodeMap().get(long);\n        if (int == (com.graphhopper.reader.OSMReader.int))\n            continue;\n        \n        if (int == (com.graphhopper.reader.OSMReader.int))\n            continue;\n        \n        if (int == (com.graphhopper.reader.OSMReader.int)) {\n            if ((!(com.graphhopper.util.PointList.isEmpty())) && (int > (-(com.graphhopper.reader.OSMReader.int)))) {\n                int = int;\n                int = com.graphhopper.reader.OSMReader.handlePillarNode(int, long, null, true);\n                int = (-int) - 3;\n                if (((com.graphhopper.util.PointList.getSize()) > 1) && (int >= 0)) {\n                    java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long));\n                    com.graphhopper.util.PointList.clear();\n                    com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n                } \n                int = int;\n                int = -1;\n            } \n            continue;\n        } \n        if ((int <= (-(com.graphhopper.reader.OSMReader.int))) && (int >= (com.graphhopper.reader.OSMReader.int)))\n            throw new java.lang.AssertionError((((\"Mapped index not in correct bounds \" + int) + \", \") + long));\n        \n        if (int > (-(com.graphhopper.reader.OSMReader.int))) {\n            boolean boolean = (int == 0) || (int == int);\n            if (!boolean) {\n                int = int;\n            } \n            int = com.graphhopper.reader.OSMReader.handlePillarNode(int, long, com.graphhopper.util.PointList, boolean);\n        } \n        if (int < (com.graphhopper.reader.OSMReader.int)) {\n            int = (-int) - 3;\n            com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n            if (int >= 0) {\n                java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long));\n                com.graphhopper.util.PointList.clear();\n                com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n            } \n            int = int;\n        } \n    }\n} catch (java.lang.RuntimeException ex) {\n    com.graphhopper.reader.OSMReader.org.slf4j.Logger.error((\"Couldn\\'t properly add edge with osm ids:\" + gnu.trove.list.TLongList), java.lang.RuntimeException);\n    if (boolean)\n        throw java.lang.RuntimeException;\n    \n}"},"status":-1},{"failures":[],"tindex":"4819e808-8275-11e5-9384-7b2bb554bca3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtilBig:116","type":"CtLocalVariableImpl","sourcecode":"byte byte = ((byte)(1 << 7))"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:60","type":"CtLocalVariableImpl","sourcecode":"byte byte = byte[][int]"},"status":-2},{"failures":[84,85,86],"tindex":"481a0f19-8275-11e5-9384-3737320c1dd5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:116","type":"CtIfImpl","sourcecode":"if ((int[][int]) == (int[][int])) {\n    gnu.trove.list.array.TIntArrayList gnu.trove.list.array.TIntArrayList = new gnu.trove.list.array.TIntArrayList();\n    int int;\n    while ((int = gnu.trove.stack.array.TIntArrayStack.pop()) != int) {\n        gnu.trove.list.array.TIntArrayList.add(int);\n        com.graphhopper.coll.GHBitSetImpl.clear(int);\n    }\n    gnu.trove.list.array.TIntArrayList.add(int);\n    gnu.trove.list.array.TIntArrayList.trimToSize();\n    com.graphhopper.coll.GHBitSetImpl.clear(int);\n    java.util.ArrayList<gnu.trove.list.array.TIntArrayList>.add(gnu.trove.list.array.TIntArrayList);\n} "},"status":-1},{"failures":[0,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,40,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,43,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,47,53,56,58,152,153,154,155],"tindex":"481a0f1a-8275-11e5-9384-191691fda3cb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:95","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[],"tindex":"481a0f1b-8275-11e5-9384-ab4c7491045a","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:246","type":"CtLocalVariableImpl","sourcecode":"int int = -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:178","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[156,157,158,159],"tindex":"481a0f1c-8275-11e5-9384-dd0ad90cc9cb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:133","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt(((long + (int)) + 4), com.graphhopper.util.BitUtil.getIntHigh(long))"},"status":-1},{"failures":[160,161],"tindex":"481a362d-8275-11e5-9384-adeff50e8c49","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntIntBinHeap:187","type":"CtAssignmentImpl","sourcecode":"int[][int] = int"},"status":-1},{"failures":[162,163,164,165,166,167,168,0,169,170,171,172,173,174,87,88,89,90,91,175,176,177,178,179,156,180,181,182,92,93,94,183,184,185,186,187,95,96,1,188,189,97,98,190,99,191,192,193,194,100,101,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,195,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,39,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,40,215,216,217,218,219,102,103,104,105,106,220,221,222,223,224,157,225,226,227,107,108,109,228,229,230,231,232,110,111,41,233,234,112,113,235,114,236,237,238,239,115,116,158,240,132,241,242,243,244,245,133,246,134,247,248,43,249,250,251,252,135,136,137,138,139,253,254,255,256,257,159,258,259,260,140,141,142,261,262,263,264,265,143,144,44,266,267,145,146,268,147,269,270,271,272,148,149,273,150,151,45,46,47,48,49,50,51,52,53,274,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,275,276,277,278,279,280,281,282,152,283,284,285,286,287,288,289,78,79,290,291,292,84,293,294,295,296,297,85,86,298,299,300,301,302,303,304,305,306,307,308,309,80,310,311,312,313,81,82,314,315,83,316,317,318,319,320,321,322,323,153,324,325,326,327,328,329,330,331,332,333,334,335,154,336,336,337,337,338,338,339,339,340,340,341,341,342,342,343,343,344,344,155,155,345,345,346,346,347,347,348,348,349,349,350,350,351,352,353,354,355,356,357,358,359,360,361,362],"tindex":"481a362e-8275-11e5-9384-f5cd0032b439","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMTurnRelation:158","type":"CtReturnImpl","sourcecode":"return (((long)(int)) << 32) | ((long)(int))"},"variableMap":{"edgeTo":"segmentSizeInBytes","edgeFrom":"segmentSizeInBytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:301","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.RAMIntDataAccess.((long)(getSegments())) * (int)"},"status":-1},{"failures":[363],"tindex":"481a5d3f-8275-11e5-9384-190f5152f0e6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GHRequest:208","type":"CtIfImpl","sourcecode":"if (java.lang.String != null)\n    this.java.lang.String = java.lang.String;\n"},"variableMap":{"algo":"highwayValue"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:168","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(\"track\")) {\n    java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"tracktype\");\n    if (!(com.graphhopper.util.Helper.isEmpty(java.lang.String))) {\n        java.lang.Integer java.lang.Integer = java.util.Map<java.lang.String, java.lang.Integer>.get(java.lang.String);\n        if (java.lang.Integer != null)\n            java.lang.Integer = java.lang.Integer;\n        \n    } \n} "},"status":-1},{"failures":[61,62,65,336],"tindex":"481a5d40-8275-11e5-9384-d91a15f2af5f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:410","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.VirtualEdgeIteratorState.setVirtualEdgePreference(true)"},"status":-1},{"failures":[364,365,0,40,366,367,368,369,370,371,43],"tindex":"481a8451-8275-11e5-9384-ab87d2b58db1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:71","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)((int) * 1.5F))"},"variableMap":{"currentBucket":"segmentSizePower"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:336","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long >>> (int)))"},"status":-1},{"failures":[61,62,63,65,68,69,70,71,72,73,75,336,340,343,345,347],"tindex":"481a8452-8275-11e5-9384-e16653ffde63","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:163","type":"CtIfImpl","sourcecode":"if (int > 255)\n    int = 255;\n"},"variableMap":{"red":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:358","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(double[][int], double[][int])"},"status":-1},{"failures":[58,84,294,296,297,86],"tindex":"481a8453-8275-11e5-9384-07dac3f10a9f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:259","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.EdgeIterator.setFlags(com.graphhopper.routing.util.FlagEncoder.setAccess(com.graphhopper.util.EdgeIterator.getFlags(), false, false))"},"status":-1},{"failures":[],"tindex":"481a8454-8275-11e5-9384-219dfa166e14","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:491","type":"CtReturnImpl","sourcecode":"return ~(int + int)"},"variableMap":{"len":"length","start":"length"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:317","type":"CtReturnImpl","sourcecode":"return byte[][].int"},"status":-2},{"failures":[372,280],"tindex":"481aab65-8275-11e5-9384-a9d47e31ddb8","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.InstructionList:218","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"\\n<trkpt lat=\\'\")"},"variableMap":{"track":"output"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:251","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<gh:azimuth>\").append(com.graphhopper.util.Helper.round2(double)).append(\"<\/gh:azimuth>\")"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":19,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
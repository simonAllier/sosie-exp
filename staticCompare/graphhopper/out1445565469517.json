{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":12,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":39,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":4,"com.graphhopper.reader.OSMReaderTest.testFerry":211,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":119,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":120,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":170,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":145,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":37,"com.graphhopper.reader.OSMReaderTest.testWithBounds":137,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":10,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":163,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":172,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":164,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":201,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testSacScale":0,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":139,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":105,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":28,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":208,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":22,"com.graphhopper.GraphHopperTest.testPrepare":147,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":77,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":191,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":45,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":55,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":197,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":178,"com.graphhopper.util.InstructionListTest.testWayList":117,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":116,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":186,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":122,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":89,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":168,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":8,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":152,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":36,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":165,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":5,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":179,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":38,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":128,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":160,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":134,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":167,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":97,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":156,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":14,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":23,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":148,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":26,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":81,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":86,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":83,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":82,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":210,"com.graphhopper.GraphHopperTest.testLoadOSM":151,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":57,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":93,"com.graphhopper.reader.OSMReaderTest.testSort":131,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":166,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":213,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":103,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":43,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":205,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":33,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":67,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":195,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":126,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":155,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":85,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":9,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":196,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":177,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":184,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":31,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":72,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":101,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":68,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":49,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":35,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":114,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":53,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":188,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":159,"com.graphhopper.util.GHUtilityTest.testSort":125,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":182,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":181,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":47,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":87,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":70,"com.graphhopper.routing.util.FootFlagEncoderTest.testRailPlatformIssue366":2,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":90,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":111,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":173,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":153,"com.graphhopper.GraphHopperAPITest.testLoad":217,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":150,"com.graphhopper.util.BitUtilBigTest.testToShort":1,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":194,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":51,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":162,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":69,"com.graphhopper.reader.OSMReaderTest.testBarriers":132,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":17,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":154,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":7,"com.graphhopper.util.GHUtilityTest.testCopy":124,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":183,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":175,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":121,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":75,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":185,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":62,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":54,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":187,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":56,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":84,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":190,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":110,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":76,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":203,"com.graphhopper.reader.PrinctonReaderTest.testRead":127,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":63,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":99,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":73,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":3,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":91,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":44,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes2":96,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":207,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":78,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":106,"com.graphhopper.util.InstructionListTest.testWayList2":118,"com.graphhopper.reader.OSMReaderTest.testFoot":129,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":20,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":16,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":174,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":40,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":64,"com.graphhopper.reader.OSMReaderTest.testOneWay":138,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":95,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":52,"com.graphhopper.util.PointListTest.testAddPL":218,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":60,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":98,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":59,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":11,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":74,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":206,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":13,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":46,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":50,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":133,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":158,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":202,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":193,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":107,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":199,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":209,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":200,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":115,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":144,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":169,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":19,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":88,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":143,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":34,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":142,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":18,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":141,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":140,"com.graphhopper.util.GHUtilityTest.testSort2":123,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":189,"com.graphhopper.reader.OSMReaderTest.testMain":130,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":112,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":79,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":109,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":108,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":21,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":176,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":27,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":41,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":161,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":58,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":102,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":104,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":135,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":24,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":80,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":214,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":94,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":192,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":204,"com.graphhopper.storage.GraphHopperStorageTest.testClone":48,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":65,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":61,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":113,"com.graphhopper.GraphHopperTest.testFootAndCar":149,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":92,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":6,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":30,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":15,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":71,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":100,"com.graphhopper.GraphHopperTest.testPrepareOnly":215,"com.graphhopper.GraphHopperTest.testVia":146,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":212,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":29,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":171,"com.graphhopper.GraphHopperTest.testFootOnly":216,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":32,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":136,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":25,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":157,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":180,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":198,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":42,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":66},"transformations":[{"failures":[0],"tindex":"769dc8a5-7929-11e5-8230-7990da23035e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:192","type":"CtReturnImpl","sourcecode":"return (((\"hiking\".equals(java.lang.String)) || (\"mountain_hiking\".equals(java.lang.String))) || (\"demanding_mountain_hiking\".equals(java.lang.String))) || (\"alpine_hiking\".equals(java.lang.String))"},"status":-1},{"failures":[1],"tindex":"769defb6-7929-11e5-8230-275362dc6a57","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtilLittle:47","type":"CtAssignmentImpl","sourcecode":"byte[][(int + 1)] = ((byte)(short >>> 8))"},"variableMap":{"offset":"offset","bytes":"bytes","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilBig:47","type":"CtAssignmentImpl","sourcecode":"byte[][int] = ((byte)(short >> 8))"},"status":-1},{"failures":[2],"tindex":"769defb7-7929-11e5-8230-b50a4d3f136e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Instruction:192","type":"CtReturnImpl","sourcecode":"return long + (this.long)"},"variableMap":{"time":"acceptBit"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:218","type":"CtReturnImpl","sourcecode":"return long"},"status":-1},{"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210],"tindex":"769defb8-7929-11e5-8230-f96b6638dae9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:326","type":"CtLocalVariableImpl","sourcecode":"long long = int"},"variableMap":{"nodeCount":"newOrExistingEdge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:175","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.storage.EdgeAccess.toPointer(int)"},"status":-1},{"failures":[],"tindex":"769defb9-7929-11e5-8230-415405dece0c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMInputFile:184","type":"CtIfImpl","sourcecode":"if (int == (javax.xml.stream.XMLStreamConstants.int)) {\n    java.lang.String java.lang.String = javax.xml.stream.XMLStreamReader.getAttributeValue(null, \"id\");\n    if (java.lang.String != null) {\n        java.lang.String java.lang.String = javax.xml.stream.XMLStreamReader.getLocalName();\n        long long = 0;\n        switch (java.lang.String.charAt(0)) {\n            case 'n' :\n                if (\"node\".equals(java.lang.String)) {\n                    long = java.lang.Long.parseLong(java.lang.String);\n                    return com.graphhopper.reader.OSMNode.create(long, javax.xml.stream.XMLStreamReader);\n                } \n                break;\n            case 'w' :\n                {\n                    long = java.lang.Long.parseLong(java.lang.String);\n                    return com.graphhopper.reader.OSMWay.create(long, javax.xml.stream.XMLStreamReader);\n                }\n            case 'r' :\n                long = java.lang.Long.parseLong(java.lang.String);\n                return com.graphhopper.reader.OSMRelation.create(long, javax.xml.stream.XMLStreamReader);\n        }\n    } \n} "},"variableMap":{"javax.xml.stream.XMLStreamConstants.START_ELEMENT":"javax.xml.stream.XMLStreamConstants.END_DOCUMENT","parser":"parser","event":"javax.xml.stream.XMLStreamConstants.END_DOCUMENT"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMInputFile:182","type":"CtWhileImpl","sourcecode":"while (int != (javax.xml.stream.XMLStreamConstants.int)) {\n    if (int == (javax.xml.stream.XMLStreamConstants.int)) {\n        java.lang.String java.lang.String = javax.xml.stream.XMLStreamReader.getAttributeValue(null, \"id\");\n        if (java.lang.String != null) {\n            java.lang.String java.lang.String = javax.xml.stream.XMLStreamReader.getLocalName();\n            long long = 0;\n            switch (java.lang.String.charAt(0)) {\n                case 'n' :\n                    if (\"node\".equals(java.lang.String)) {\n                        long = java.lang.Long.parseLong(java.lang.String);\n                        return com.graphhopper.reader.OSMNode.create(long, javax.xml.stream.XMLStreamReader);\n                    } \n                    break;\n                case 'w' :\n                    {\n                        long = java.lang.Long.parseLong(java.lang.String);\n                        return com.graphhopper.reader.OSMWay.create(long, javax.xml.stream.XMLStreamReader);\n                    }\n                case 'r' :\n                    long = java.lang.Long.parseLong(java.lang.String);\n                    return com.graphhopper.reader.OSMRelation.create(long, javax.xml.stream.XMLStreamReader);\n            }\n        } \n    } \n    int = javax.xml.stream.XMLStreamReader.next();\n}"},"status":-2},{"failures":[211,129,130,131,132,133,134,135,136,212,213,137,214,138,139,215,145,146,147,148,149,150,151,152,153,216,154],"tindex":"769e16ca-7929-11e5-8230-79bf10e12db2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:665","type":"CtIfImpl","sourcecode":"if ((java.lang.String) == null)\n    throw new java.lang.IllegalStateException(((\"Couldn\\'t load from existing folder: \" + (java.lang.String)) + \" but also cannot import from OSM file as it wasn\\'t specified!\"));\n"},"variableMap":{"ghLocation":"value","osmFile":"key"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:66","type":"CtIfImpl","sourcecode":"if ((java.lang.String != null) && ((java.lang.String.length()) > 0))\n    com.graphhopper.reader.OSMElement.setTag(java.lang.String, java.lang.String);\n"},"status":-1},{"failures":[],"tindex":"769e16cb-7929-11e5-8230-43e999202775","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.PathBidir:70","type":"CtIfImpl","sourcecode":"if (int < 0)\n    break;\n"},"variableMap":{"edgeId":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:101","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    int = com.graphhopper.routing.util.AllEdgesIterator.getBaseNode();\n} else {\n    int = com.graphhopper.routing.util.AllEdgesIterator.getAdjNode();\n}"},"status":0},{"failures":[217,218,146,147,148,149,150,151,153],"tindex":"769e16cc-7929-11e5-8230-4368b3d9b861","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.GHUtility:523","type":"CtAssignmentImpl","sourcecode":"int = int << 1"},"variableMap":{"edgeId":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:165","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-1},{"failures":[],"tindex":"769e16cd-7929-11e5-8230-19cbb3318721","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:112","type":"CtIfImpl","sourcecode":"if (double < 0)\n    continue;\n"},"variableMap":{"fromDist":"lastLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:363","type":"CtIfImpl","sourcecode":"if ((((!(java.lang.Double.isNaN(double))) && (!(java.lang.Double.isNaN(double)))) && (!(java.lang.Double.isNaN(double)))) && (!(java.lang.Double.isNaN(double)))) {\n    double double = com.graphhopper.util.DistanceCalc.calcDist(double, double, double, double);\n    com.graphhopper.reader.OSMWay.setTag(\"estimated_distance\", double);\n    com.graphhopper.reader.OSMWay.setTag(\"estimated_center\", new com.graphhopper.util.shapes.GHPoint(((double + double) / 2) , ((double + double) / 2)));\n} "},"status":-2},{"failures":[],"tindex":"769e16ce-7929-11e5-8230-53a580a0f15d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:103","type":"CtAssignmentImpl","sourcecode":"double = double - (2 * (java.lang.Math.double))"},"status":-2},{"failures":[],"tindex":"769e3ddf-7929-11e5-8230-a1012755da7d","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:100","type":"CtIfImpl","sourcecode":"if (double <= 0)\n    throw new java.lang.IllegalArgumentException((((((\"Distance must not be zero or negative! \" + double) + \" lat,lon:\") + double) + \",\") + double));\n"},"variableMap":{"radiusInMeter":"distEdge","lon":"distEdge","lat":"distEdge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:138","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.QueryResult.setQueryDistance(double)"},"status":-2},{"failures":[],"tindex":"769e3de0-7929-11e5-8230-e3f3d7d4d023","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.PillarInfo:122","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.Helper.intToEle(int)"},"variableMap":{"intVal":"id"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.PillarInfo:112","type":"CtReturnImpl","sourcecode":"return com.graphhopper.reader.PillarInfo.getLongitude(int)"},"status":-2},{"failures":[],"tindex":"769e3de1-7929-11e5-8230-176af845ab0a","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DouglasPeucker:115","type":"CtIfImpl","sourcecode":"if (java.lang.Double.isNaN(com.graphhopper.util.PointList.getLatitude(int))) {\n    int = int;\n    break;\n} "},"variableMap":{"freeIndex":"tmpNode","searchIndex":"tmpNode","points":"pointList"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:728","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int)"},"status":-2},{"failures":[],"tindex":"769e3de2-7929-11e5-8230-77c0d1f511b1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:121","type":"CtLocalVariableImpl","sourcecode":"long long = java.io.RandomAccessFile.readLong()"},"variableMap":{"raFile":"raFile"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:140","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.storage.AbstractDataAccess.(readHeader(java.io.RandomAccessFile)) - (com.graphhopper.storage.AbstractDataAccess.int)"},"status":-2},{"failures":[],"tindex":"769e3de3-7929-11e5-8230-c5903cb848eb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMRelation:52","type":"CtWhileImpl","sourcecode":"while ((int != (javax.xml.stream.XMLStreamConstants.int)) && (javax.xml.stream.XMLStreamReader.getLocalName().equalsIgnoreCase(\"member\"))) {\n    if (int == (javax.xml.stream.XMLStreamConstants.int)) {\n        java.util.ArrayList<com.graphhopper.reader.OSMRelation.Member>.add(new com.graphhopper.reader.OSMRelation.Member(javax.xml.stream.XMLStreamReader));\n    } \n    int = javax.xml.stream.XMLStreamReader.nextTag();\n}"},"status":-2},{"failures":[],"tindex":"769e3de4-7929-11e5-8230-257cc7cf4c36","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Dijkstra:78","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-2},{"failures":[],"tindex":"769e3de5-7929-11e5-8230-63483f069d1d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:494","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.BaseGraph.isFrozen())\n    throw new java.lang.IllegalStateException(\"Cannot create edge if graph is already frozen\");\n"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:934","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.coll.GHBitSet) == null)\n    com.graphhopper.coll.GHBitSet = new com.graphhopper.coll.GHBitSetImpl(com.graphhopper.storage.BaseGraph.getNodes());\n"},"status":-2},{"failures":[],"tindex":"769e3de6-7929-11e5-8230-d5f39f776364","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:265","type":"CtAssignmentImpl","sourcecode":"java.lang.String = com.graphhopper.util.Helper.isEmpty(java.lang.String) ? com.graphhopper.util.Translation.tr(\"continue\") : com.graphhopper.util.Translation.tr(\"continue_onto\", java.lang.String)"},"status":-2},{"failures":[],"tindex":"769e64f7-7929-11e5-8230-4df1875ca6f9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:225","type":"CtIfImpl","sourcecode":"if (long <= 0) {\n    throw new java.lang.IllegalStateException((\"invalid bitmask:\" + long));\n} "},"variableMap":{"bm":"spatialKey"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:220","type":"CtWhileImpl","sourcecode":"while (true) {\n    if ((long & long) != 0) {\n        double += double;\n    } \n    double /= 2;\n    long >>>= 1;\n    if ((long & long) != 0) {\n        double += double;\n    } \n    double /= 2;\n    if (long > 1) {\n        long >>>= 1;\n    } else {\n        break;\n    }\n}"},"status":-2},{"failures":[],"tindex":"769e64f8-7929-11e5-8230-3b2b90a3cf76","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:576","type":"CtUnaryOperatorImpl","sourcecode":"(long)++"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
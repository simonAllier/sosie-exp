{"failureDictionary":{"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":61,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":19,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":107,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":100,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":11,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSortHighLevelFirst":131,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":5,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":12,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":15,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":112,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":79,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":91,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":92,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":116,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":68,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":72,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":71,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":59,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":119,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":82,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":120,"com.graphhopper.GraphHopperTest.testPrepare":52,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":74,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":14,"com.graphhopper.util.InstructionListTest.testWayList2":89,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":76,"com.graphhopper.reader.OSMReaderTest.testFoot":98,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":62,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":22,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":63,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":108,"com.graphhopper.util.InstructionListTest.testWayList":88,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":6,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":111,"com.graphhopper.coll.IntIntBinHeapTest.testClear":127,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":10,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":101,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":9,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":78,"com.graphhopper.coll.IntIntBinHeapTest.testBasic":126,"com.graphhopper.routing.util.CarFlagEncoderTest.testMilitaryAccess":123,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":118,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":109,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":16,"com.graphhopper.coll.IntIntBinHeapTest.testSpreading":130,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":85,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":86,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":94,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":7,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":35,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":64,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":53,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":115,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":121,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":96,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":70,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":50,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":69,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":122,"com.graphhopper.GraphHopperTest.testLoadOSM":56,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":21,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":45,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":31,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":17,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":49,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":37,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":48,"com.graphhopper.reader.OSMReaderTest.testSort":43,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":47,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":73,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":46,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":26,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":93,"com.graphhopper.reader.OSMReaderTest.testMain":42,"com.graphhopper.routing.util.EncodingManagerTest.testSupportFords":103,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":84,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":104,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":75,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":8,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":113,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":83,"com.graphhopper.routing.PathTest.testWayList":65,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":97,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":38,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":32,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":2,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":23,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":40,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":114,"com.graphhopper.coll.IntIntBinHeapTest.testRekey":128,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":28,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":99,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":60,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":30,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":81,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":117,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":3,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":67,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":18,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":39,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":125,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":13,"com.graphhopper.GraphHopperTest.testFootAndCar":54,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":77,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":4,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":0,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":80,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":1,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":20,"com.graphhopper.coll.IntIntBinHeapTest.testSize":129,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":106,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":24,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":29,"com.graphhopper.GraphHopperTest.testVia":51,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":105,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":57,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":36,"com.graphhopper.GraphHopperAPITest.testLoad":41,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":55,"com.graphhopper.GraphHopperTest.testFootOnly":58,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":33,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":95,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":124,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":34,"com.graphhopper.reader.OSMReaderTest.testBarriers":44,"com.graphhopper.util.InstructionListTest.testFind":87,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":102,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":27,"com.graphhopper.util.GHUtilityTest.testCopy":90,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":110,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":25,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":66},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10],"tindex":"30bd6461-8279-11e5-b835-a3821916ae79","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GHRequest:278","type":"CtReturnImpl","sourcecode":"return ((java.lang.String + \"(\") + (java.lang.String)) + \")\""},"variableMap":{"res":"wayTypeName","algo":"pavementName"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:461","type":"CtReturnImpl","sourcecode":"return (java.lang.String + \", \") + java.lang.String"},"status":-1},{"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"tindex":"30bd8b72-8279-11e5-b835-e1b0d23bd3a8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:89","type":"CtIfImpl","sourcecode":"if (int > 64)\n    throw new java.lang.IllegalStateException(\"allBits is too big and does not fit into 8 bytes\");\n"},"variableMap":{"allBits":"com.graphhopper.storage.index.LocationIndexTree.START_POINTER"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:321","type":"CtTryImpl","sourcecode":"try {\n    com.graphhopper.storage.index.LocationIndexTree.InMemConstructionIndex.store(com.graphhopper.storage.index.LocationIndexTree.InMemConstructionIndex.com.graphhopper.storage.index.LocationIndexTree.InMemTreeEntry, com.graphhopper.storage.index.LocationIndexTree.int);\n    com.graphhopper.storage.index.LocationIndexTree.flush();\n} catch (java.lang.Exception ex) {\n    throw new java.lang.IllegalStateException((\"Problem while storing location index. \" + (com.graphhopper.util.Helper.getMemInfo())) , java.lang.Exception);\n}"},"status":-1},{"failures":[59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,15,29,80,81,82,83,84,42,85,86,87,88,89,90,58],"tindex":"30bdb283-8279-11e5-b835-ef0e928650d2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:896","type":"CtOperatorAssignmentImpl","sourcecode":"int += 4"},"status":-1},{"failures":[91,92,93,94,95,96,97,98,86,99,100,101,54,102],"tindex":"30bdb284-8279-11e5-b835-33939c49617f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:447","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BreadthFirstSearch:50","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.SimpleIntDeque.push(int)"},"status":-1},{"failures":[103],"tindex":"30bdb285-8279-11e5-b835-9df8a3ad3eb5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:447","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeFlagEncoder:47","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.AbstractFlagEncoder.setBlockFords(com.graphhopper.util.PMap.getBool(\"blockFords\", true))"},"status":-1},{"failures":[104,105,66,68,72,75,77,80,82,85,86],"tindex":"30bdb286-8279-11e5-b835-03e8d939746f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHNodeAccess:62","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.com.graphhopper.storage.DataAccess.setInt((long + (com.graphhopper.storage.BaseGraph.int)), com.graphhopper.util.Helper.eleToInt(double))"},"status":-1},{"failures":[],"tindex":"30bdb287-8279-11e5-b835-057b48cf65fa","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:201","type":"CtIfImpl","sourcecode":"if (double > 1)\n    double = 1;\nelse if (double < 0)\n    double = 0;\n"},"variableMap":{"factor":"currLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:308","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.DistanceCalc.validEdgeDistance(double, double, double, double, double, double)) {\n    double = com.graphhopper.util.DistanceCalc.calcNormalizedEdgeDistance(double, double, double, double, double, double);\n    if (int > 0)\n        int++;\n    \n} else {\n    double = com.graphhopper.util.DistanceCalc.calcNormalizedDist(double, double, double, double);\n    if (int > 0)\n        int++;\n    \n}"},"status":-2},{"failures":[95,96,97,106],"tindex":"30bdb288-8279-11e5-b835-61bff687b38b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.UnsafeDataAccess:273","type":"CtIfImpl","sourcecode":"if (int <= 0)\n    int = 1;\n"},"variableMap":{"allSegments":"nodeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:211","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt(long, int)"},"status":-1},{"failures":[],"tindex":"30bdd999-8279-11e5-b835-29259bd13abd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:248","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry"},"variableMap":{"parent":"currTo","entryCurrent":"currTo"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:114","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.PathBidirRef.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry"},"status":-1},{"failures":[],"tindex":"30bdd99a-8279-11e5-b835-bf3a1589447c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:252","type":"CtReturnImpl","sourcecode":"return \"bike2\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:633","type":"CtReturnImpl","sourcecode":"return ((\"distance:\" + com.graphhopper.routing.Path.(getDistance())) + \", edges:\") + (gnu.trove.list.TIntList.size())"},"status":0},{"failures":[107,108,109,110,11,111,12,13,112,14,64,113,114,48,49,51],"tindex":"30bdd99b-8279-11e5-b835-475b429e78d1","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:149","type":"CtOperatorAssignmentImpl","sourcecode":"double /= 4"},"variableMap":{"tmp":"prevLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:416","type":"CtAssignmentImpl","sourcecode":"double = double[][int]"},"status":-1},{"failures":[],"tindex":"30bdd99c-8279-11e5-b835-ebd944c5bc09","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:196","type":"CtIfImpl","sourcecode":"if ((double > 0) && (double < double))\n    double = double * 0.9;\n"},"variableMap":{"maxMCSpeed":"com.graphhopper.storage.CHGraphImpl.MAX_WEIGHT","speed":"com.graphhopper.storage.CHGraphImpl.MAX_WEIGHT"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:593","type":"CtIfImpl","sourcecode":"if (double > (com.graphhopper.storage.CHGraphImpl.double))\n    long = com.graphhopper.storage.CHGraphImpl.long;\nelse\n    long = ((long)((double * (com.graphhopper.storage.CHGraphImpl.double)))) << 2;\n"},"status":-2},{"failures":[],"tindex":"30bdd99d-8279-11e5-b835-6170402ffe3c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:100","type":"CtTryImpl","sourcecode":"try {\n    java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"Africa\" , \"Australia\" , \"Eurasia\" , \"Islands\" , \"North_America\" , \"South_America\" };\n    for (java.lang.String java.lang.String : java.lang.String[]) {\n        java.io.InputStream java.io.InputStream = java.lang.Object.getClass().getResourceAsStream((java.lang.String + \"_names.txt\"));\n        for (java.lang.String java.lang.String : com.graphhopper.util.Helper.readFile(new java.io.InputStreamReader(java.io.InputStream , com.graphhopper.util.Helper.java.nio.charset.Charset))) {\n            int int = java.lang.Integer.parseInt(java.lang.String.substring(1, 3));\n            if ((java.lang.String.substring(0, 1).charAt(0)) == 'S')\n                int = -int;\n            \n            int int = java.lang.Integer.parseInt(java.lang.String.substring(4, 7));\n            if ((java.lang.String.substring(3, 4).charAt(0)) == 'W')\n                int = -int;\n            \n            int int = com.graphhopper.reader.dem.SRTMProvider.calcIntKey(int, int);\n            java.lang.String java.lang.String = gnu.trove.map.hash.TIntObjectHashMap<java.lang.String>.put(int, java.lang.String);\n            if (java.lang.String != null)\n                throw new java.lang.IllegalStateException((((((\"do not overwrite existing! key \" + int) + \" \") + java.lang.String) + \" vs. \") + java.lang.String));\n            \n        }\n    }\n    return this;\n} catch (java.lang.Exception ex) {\n    throw new java.lang.IllegalStateException(\"Cannot load area names from classpath\" , java.lang.Exception);\n}"},"status":-2},{"failures":[],"tindex":"30be00ae-8279-11e5-b835-ff771cd82db2","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:129","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.DistanceCalc.calcNormalizedDist(0.1)"},"variableMap":{"distCalc":"calc","equalNormedDelta":"dist"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:55","type":"CtAssignmentImpl","sourcecode":"this.double = com.graphhopper.util.DistanceCalc.calcNormalizedDist(double)"},"status":0},{"failures":[],"tindex":"30be00af-8279-11e5-b835-a7ecd129abc4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:214","type":"CtReturnImpl","sourcecode":"return 5"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:207","type":"CtReturnImpl","sourcecode":"return 10"},"status":0},{"failures":[115,116,117,118,119,120,121,122],"tindex":"30be00b0-8279-11e5-b835-b1aa20d4b994","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:220","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.GHTreeMapComposed.insert(int, int)"},"status":-1},{"failures":[123,124,125],"tindex":"30be00b1-8279-11e5-b835-ad6f4c2d9228","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:217","type":"CtIfImpl","sourcecode":"if (java.util.Set<java.lang.String>.contains(java.lang.String))\n    return 0;\n"},"status":-1},{"failures":[126,127,128,129,130],"tindex":"30be00b2-8279-11e5-b835-9de88c320bf5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntIntBinHeap:63","type":"CtReturnImpl","sourcecode":"return com.graphhopper.coll.IntIntBinHeap.peek_key()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntIntBinHeap:97","type":"CtReturnImpl","sourcecode":"return com.graphhopper.coll.IntIntBinHeap.poll_element()"},"status":-1},{"failures":[],"tindex":"30be00b3-8279-11e5-b835-3bdfb20e7741","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:117","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.Helper.round4((double + ((java.lang.Math.double) / 2)))"},"variableMap":{"orientation":"nextLat","java.lang.Math.PI":"nextLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:237","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.Instruction.com.graphhopper.util.PointList.getLatitude(0)"},"status":-2},{"failures":[131],"tindex":"30be27c4-8279-11e5-b835-4d1109b0799e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:58","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    java.util.ArrayList<java.lang.Integer>.add(gnu.trove.list.TIntList.get(int));\n}"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"30bdd99a-8279-11e5-b835-bf3a1589447c","diffs":[{"methodsDiff":{"delete":["gnu.trove.list.TIntList.size","com.graphhopper.routing.Path.getDistance"]},"type":"staticDiff"}]}]}
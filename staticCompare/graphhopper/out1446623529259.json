{"failureDictionary":{"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":10,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":30,"com.graphhopper.reader.OSMReaderTest.testMain":2,"com.graphhopper.reader.OSMReaderTest.testFerry":0,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":56,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":53,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":54,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":38,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":36,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":37,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":16,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":78,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":27,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":49,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":75,"com.graphhopper.reader.OSMReaderTest.testWithBounds":11,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":34,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":7,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":55,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":40,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":77,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":29,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":68,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":12,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":61,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":33,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":62,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":64,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":14,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":48,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":35,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":65,"com.graphhopper.GraphHopperTest.testPrepare":18,"com.graphhopper.GraphHopperTest.testFootAndCar":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":72,"com.graphhopper.reader.OSMReaderTest.testFoot":1,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":69,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":71,"com.graphhopper.reader.OSMReaderTest.testOneWay":13,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":57,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":80,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":47,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":43,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":52,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":23,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":51,"com.graphhopper.GraphHopperTest.testPrepareOnly":15,"com.graphhopper.GraphHopperTest.testVia":17,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":41,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":24,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":63,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":39,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":70,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":50,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":9,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":5,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":6,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":31,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":21,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":73,"com.graphhopper.GraphHopperTest.testFootOnly":25,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":42,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":74,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":19,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":28,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":60,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":66,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":8,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":46,"com.graphhopper.reader.OSMReaderTest.testBarriers":4,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":59,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":58,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":67,"com.graphhopper.GraphHopperTest.testLoadOSM":22,"com.graphhopper.routing.util.FootFlagEncoderTest.handleWayTagsRoundabout":76,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":26,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":79,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":45,"com.graphhopper.reader.OSMReaderTest.testSort":3,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":44,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":32},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"tindex":"f3601b87-82c8-11e5-bd05-651aff15f0f5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:517","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.Helper.isEmpty(java.lang.String))\n    throw new java.lang.IllegalArgumentException(\"You need to specify an OSM file.\");\n"},"variableMap":{"osmFile":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:66","type":"CtIfImpl","sourcecode":"if ((java.lang.String != null) && ((java.lang.String.length()) > 0))\n    com.graphhopper.reader.OSMElement.setTag(java.lang.String, java.lang.String);\n"},"status":-1},{"failures":[27,28,29,30,31,13,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"tindex":"f36069a8-82c8-11e5-bd05-631aa60b260d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:262","type":"CtIfImpl","sourcecode":"if (int > (int))\n    throw new java.lang.IllegalArgumentException(\"new size needs be smaller than old size\");\n"},"variableMap":{"size":"nodeA","newSize":"nodeB"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:736","type":"CtIfImpl","sourcecode":"if ((!(com.graphhopper.coll.GHBitSet.contains(int))) && (!(com.graphhopper.coll.GHBitSet.contains(int))))\n    continue;\n"},"status":-1},{"failures":[],"tindex":"f36069a9-82c8-11e5-bd05-5bab8e890d4d","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:71","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)((int) * 1.5F))"},"variableMap":{"currentBucket":"err"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:132","type":"CtLocalVariableImpl","sourcecode":"int int = 2 * int"},"status":-2},{"failures":[15,16,17,18,21,22,23,25],"tindex":"f36090ba-82c8-11e5-bd05-a5189ae89deb","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:310","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.storage.CHGraphImpl com.graphhopper.storage.CHGraphImpl : java.util.Collection<com.graphhopper.storage.CHGraphImpl>) {\n    com.graphhopper.storage.CHGraphImpl.close();\n}"},"variableMap":{"chGraphs":"chGraphs"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:158","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.storage.CHGraphImpl com.graphhopper.storage.CHGraphImpl : java.util.Collection<com.graphhopper.storage.CHGraphImpl>) {\n    com.graphhopper.storage.CHGraphImpl.setSegmentSize(int);\n}"},"status":-1},{"failures":[],"tindex":"f36090bb-82c8-11e5-bd05-95862f1b5666","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:825","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.ch.PrepareContractionHierarchies.setPeriodicUpdates(int).setLazyUpdates(int).setNeighborUpdates(int).setLogMessages(double)"},"status":0},{"failures":[],"tindex":"f36090bc-82c8-11e5-bd05-4f50e87a9e82","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:184","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.shapes.BBox.double = com.graphhopper.util.Helper.intToEle(com.graphhopper.storage.DataAccess.getHeader((7 * 4)))"},"variableMap":{"nodes":"nodes","minEle":"minLat","bounds":"bounds"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:179","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.shapes.BBox.double = com.graphhopper.util.Helper.intToDegree(com.graphhopper.storage.DataAccess.getHeader((5 * 4)))"},"status":-2},{"failures":[],"tindex":"f36090bd-82c8-11e5-bd05-4f582c96c3af","series":0,"name":"add","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:116","type":"CtReturnImpl","sourcecode":"return ((int)(java.lang.Math.log10(int)))"},"variableMap":{"p":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:90","type":"CtIfImpl","sourcecode":"if ((int) > 0) {\n    return int[][1];\n} else {\n    throw new java.lang.IllegalStateException(\"An empty queue does not have a minimum value.\");\n}"},"status":-2},{"failures":[60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"tindex":"f360b7ce-82c8-11e5-bd05-91739b7db225","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:297","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.CHGraphImpl.flush()"},"variableMap":{"cg":"prepareGraph"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:655","type":"CtForEachImpl","sourcecode":"NEXT_SC : for (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut : java.util.Map<com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut>.keySet()) {\n    boolean boolean = false;\n    com.graphhopper.util.CHEdgeIterator com.graphhopper.util.CHEdgeIterator = com.graphhopper.util.CHEdgeExplorer.setBaseNode(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n    while (com.graphhopper.util.CHEdgeIterator.next()) {\n        if (((com.graphhopper.util.CHEdgeIterator.isShortcut()) && ((com.graphhopper.util.CHEdgeIterator.getAdjNode()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) && (com.graphhopper.util.CHEdgeIterator.canBeOverwritten(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long))) {\n            if ((com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double) >= (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.CHEdgeIterator, false, com.graphhopper.util.EdgeIterator.int)))\n                continue NEXT_SC;\n            \n            if (((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) || ((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) {\n                throw new java.lang.IllegalStateException((((((((((((((((((\"Shortcut cannot update itself! \" + (com.graphhopper.util.CHEdgeIterator.getEdge())) + \", skipEdge1:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", skipEdge2:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", edge \") + com.graphhopper.util.CHEdgeIterator) + \":\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.CHEdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", sc:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut) + \", skippedEdge1: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", skippedEdge2: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", neighbors:\") + (com.graphhopper.util.GHUtility.getNeighbors(com.graphhopper.util.CHEdgeIterator))));\n            } \n            com.graphhopper.util.CHEdgeIterator.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n            com.graphhopper.util.CHEdgeIterator.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n            com.graphhopper.util.CHEdgeIterator.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n            com.graphhopper.util.CHEdgeIterator.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n            com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIterator.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n            boolean = true;\n            break;\n        } \n    }\n    if (!boolean) {\n        com.graphhopper.util.CHEdgeIteratorState com.graphhopper.util.CHEdgeIteratorState = com.graphhopper.storage.CHGraphImpl.shortcut(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        com.graphhopper.util.CHEdgeIteratorState.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n        com.graphhopper.util.CHEdgeIteratorState.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIteratorState.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIteratorState.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIteratorState.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        int++;\n    } \n}"},"status":-1},{"failures":[76,77,78,79,1,15,20,25],"tindex":"f360dedf-82c8-11e5-bd05-e77cc58c968a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:224","type":"CtIfImpl","sourcecode":"if (int < (int)) {\n    throw new java.lang.IllegalStateException(\"BinHeap contains too many elements to fit in new capacity.\");\n} "},"variableMap":{"size":"com.graphhopper.routing.util.FlagEncoder.K_ROUNDABOUT","capacity":"com.graphhopper.routing.util.FlagEncoder.K_ROUNDABOUT"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:287","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.routing.util.AbstractFlagEncoder.(isFerry(long))) {\n    java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"sac_scale\");\n    if (java.lang.String != null) {\n        if (\"hiking\".equals(java.lang.String))\n            long = com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(long, com.graphhopper.routing.util.FootFlagEncoder.int);\n        else\n            long = com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(long, com.graphhopper.routing.util.FootFlagEncoder.int);\n        \n    } else {\n        long = com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(long, com.graphhopper.routing.util.FootFlagEncoder.int);\n    }\n    long |= long;\n    boolean boolean = com.graphhopper.reader.OSMWay.hasTag(\"junction\", \"roundabout\");\n    if (boolean)\n        long = com.graphhopper.routing.util.AbstractFlagEncoder.setBool(long, com.graphhopper.routing.util.FlagEncoder.int, true);\n    \n} else {\n    long = long | com.graphhopper.routing.util.AbstractFlagEncoder.(handleFerryTags(com.graphhopper.reader.OSMWay, com.graphhopper.routing.util.FootFlagEncoder.int, com.graphhopper.routing.util.FootFlagEncoder.int, com.graphhopper.routing.util.FootFlagEncoder.int));\n    long |= long;\n}"},"status":-1},{"failures":[],"tindex":"f36105f0-82c8-11e5-bd05-cb6e63c1c1ed","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:659","type":"CtAssignmentImpl","sourcecode":"int = (int) + 4"},"variableMap":{"S_SKIP_EDGE1":"offset","S_SKIP_EDGE2":"offset"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilBig:82","type":"CtUnaryOperatorImpl","sourcecode":"++int"},"status":0},{"failures":[],"tindex":"f36105f1-82c8-11e5-bd05-f5e5a67a66b8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:148","type":"CtAssignmentImpl","sourcecode":"int = int = ((int)(java.lang.Math.sqrt(int)))"},"variableMap":{"latSize":"id","size":"id","lonSize":"id"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:555","type":"CtAssignmentImpl","sourcecode":"int = int - 3"},"status":0},{"failures":[],"tindex":"f36105f2-82c8-11e5-bd05-adb23f66897f","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:177","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.put(\"graph.bytesForFlags\", com.graphhopper.routing.util.EncodingManager.getBytesForFlags())"},"variableMap":{"encodingManager":"encodingManager","properties":"properties"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:178","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.put(\"graph.flagEncoders\", com.graphhopper.routing.util.EncodingManager.toDetailsString())"},"status":0},{"failures":[80],"tindex":"f36105f3-82c8-11e5-bd05-f7b4ca2a5d21","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:285","type":"CtIfImpl","sourcecode":"if ((long == (long)) || (long == 0))\n    return long;\n"},"variableMap":{"directionBitMask":"flags","flags":"flags","dir":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:122","type":"CtIfImpl","sourcecode":"if (boolean)\n    return com.graphhopper.routing.util.EncodedDoubleValue.setDefaultValue(long);\n"},"status":-1},{"failures":[],"tindex":"f3612d04-82c8-11e5-bd05-273fc1796c4c","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:120","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[],"tindex":"f3612d05-82c8-11e5-bd05-bf0d9957c325","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:597","type":"CtUnaryOperatorImpl","sourcecode":"long++"},"variableMap":{"tmpDegreeCounter":"encoded"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:309","type":"CtOperatorAssignmentImpl","sourcecode":"long |= long"},"status":0},{"failures":[],"tindex":"f3612d06-82c8-11e5-bd05-63a68db76a52","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.StorableProperties:136","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.put(\"geometry.version\", com.graphhopper.util.Constants.int)"},"variableMap":{"com.graphhopper.util.Constants.VERSION_GEOMETRY":"com.graphhopper.util.Constants.VERSION_LOCATION_IDX","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:137","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.put(\"locationIndex.version\", com.graphhopper.util.Constants.int)"},"status":-2},{"failures":[],"tindex":"f3612d07-82c8-11e5-bd05-71fc63374f13","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:168","type":"CtLocalVariableImpl","sourcecode":"double double = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:145","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.routing.util.EncodedDoubleValue.getDoubleValue(long)"},"status":-2},{"failures":[],"tindex":"f3615418-82c8-11e5-bd05-d365dddea7cf","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.pbf.PbfBlobDecoder:53","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.search.NameIndex:97","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = null"},"status":-2},{"failures":[],"tindex":"f3615419-82c8-11e5-bd05-ed31d6857ce7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Dijkstra:86","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.routing.AbstractRoutingAlgorithm.(accept(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.EdgeEntry.int)))\n    continue;\n"},"status":0}],"header":{"groupId":"com.graphhopper","transformationCount":19,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"f3615419-82c8-11e5-bd05-ed31d6857ce7","diffs":[{"branchesDiff":{"delete":["t0"]},"type":"staticDiff"},{"branches":{"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":["com.graphhopper.routing.AbstractRoutingAlgorithm_boolean_accept(com.graphhopper.util.EdgeIterator,int).t1"],"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":["com.graphhopper.routing.util.TraversalMode_boolean_hasUTurnSupport().b","com.graphhopper.routing.AbstractRoutingAlgorithm_boolean_accept(com.graphhopper.util.EdgeIterator,int).t1","com.graphhopper.routing.AbstractRoutingAlgorithm_boolean_accept(com.graphhopper.util.EdgeIterator,int).e1","com.graphhopper.routing.AbstractRoutingAlgorithm_boolean_accept(com.graphhopper.util.EdgeIterator,int).b"],"com.graphhopper.util.InstructionListTest.testFind":["com.graphhopper.routing.util.TraversalMode_boolean_hasUTurnSupport().b","com.graphhopper.routing.AbstractRoutingAlgorithm_boolean_accept(com.graphhopper.util.EdgeIterator,int).t1","com.graphhopper.routing.AbstractRoutingAlgorithm_boolean_accept(com.graphhopper.util.EdgeIterator,int).e1","com.graphhopper.routing.AbstractRoutingAlgorithm_boolean_accept(com.graphhopper.util.EdgeIterator,int).b"]},"type":"branch"}]},{"transformation":"f36090bb-82c8-11e5-bd05-95862f1b5666","diffs":[{"branches":{"com.graphhopper.GraphHopperTest.testPrepare":["com.graphhopper.routing.ch.PrepareContractionHierarchies_com.graphhopper.routing.ch.PrepareContractionHierarchies_setPeriodicUpdates(int).b","com.graphhopper.routing.ch.PrepareContractionHierarchies_com.graphhopper.routing.ch.PrepareContractionHierarchies_setPeriodicUpdates(int).t1","com.graphhopper.routing.ch.PrepareContractionHierarchies_com.graphhopper.routing.ch.PrepareContractionHierarchies_setLazyUpdates(int).t1","com.graphhopper.routing.ch.PrepareContractionHierarchies_com.graphhopper.routing.ch.PrepareContractionHierarchies_setLazyUpdates(int).b","com.graphhopper.routing.ch.PrepareContractionHierarchies_com.graphhopper.routing.ch.PrepareContractionHierarchies_setLogMessages(double).e1","com.graphhopper.routing.ch.PrepareContractionHierarchies_com.graphhopper.routing.ch.PrepareContractionHierarchies_setNeighborUpdates(int).t1","com.graphhopper.routing.ch.PrepareContractionHierarchies_com.graphhopper.routing.ch.PrepareContractionHierarchies_setNeighborUpdates(int).b","com.graphhopper.routing.ch.PrepareContractionHierarchies_com.graphhopper.routing.ch.PrepareContractionHierarchies_setLogMessages(double).b"]},"type":"branch"},{"methodsDiff":{"delete":["com.graphhopper.routing.ch.PrepareContractionHierarchies.setPeriodicUpdates","com.graphhopper.routing.ch.PrepareContractionHierarchies.setLogMessages","com.graphhopper.routing.ch.PrepareContractionHierarchies.setLazyUpdates","com.graphhopper.routing.ch.PrepareContractionHierarchies.setNeighborUpdates"]},"type":"staticDiff"}]}]}
{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":188,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":117,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":126,"com.graphhopper.routing.util.EncodedDoubleValueTest.testMaxValueAndSwap":13,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":251,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":262,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":177,"com.graphhopper.reader.OSMReaderTest.testFerry":52,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":142,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":143,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":123,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":40,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":295,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":338,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":12,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidanceOfHighMaxSpeed":34,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":247,"com.graphhopper.reader.OSMReaderTest.testWithBounds":158,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":79,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":128,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":186,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":22,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":275,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":2,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":91,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":70,"com.graphhopper.storage.SynchedDAWrapperTest.testBoundsCheck":339,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":160,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":271,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":294,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":66,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":99,"com.graphhopper.GraphHopperTest.testPrepare":168,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":198,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":216,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":116,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":308,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":87,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":321,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":131,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":47,"com.graphhopper.util.InstructionListTest.testWayList":146,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":111,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":145,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":35,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":141,"com.graphhopper.GraphHopperAPITest.testDisconnected179":135,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":83,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":33,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":59,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":38,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":172,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":246,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":80,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed0_issue367":27,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":179,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":103,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":108,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":248,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":76,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":150,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":82,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":155,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":41,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":72,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":284,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":23,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":190,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":200,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":169,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":314,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":267,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":221,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":226,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":223,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":102,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":222,"com.graphhopper.GraphHopperTest.testLoadOSM":171,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":100,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":255,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":235,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":249,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":279,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":324,"com.graphhopper.reader.OSMReaderTest.testSort":152,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":49,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":81,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":337,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":292,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":96,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":306,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":239,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testSetSpeed0_issue367":19,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":240,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":43,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":199,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":203,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":121,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":130,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":159,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":71,"com.graphhopper.routing.PathTest.testWayList":0,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":225,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":185,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":244,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":288,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":122,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":315,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":46,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":109,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":125,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":331,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":234,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":209,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":290,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":8,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":204,"com.graphhopper.routing.util.FootFlagEncoderTest.testGetSpeed":36,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":211,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":313,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":245,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":305,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":319,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":113,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":10,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":15,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":75,"com.graphhopper.util.GHUtilityTest.testSort":138,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":184,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":252,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":106,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":105,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":303,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":132,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":228,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":311,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":263,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":207,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":219,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":269,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":272,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":276,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":9,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":129,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":301,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":6,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":270,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":173,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":323,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":14,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSetSpeed0_issue367":5,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":260,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":62,"com.graphhopper.routing.util.FastestWeightingTest.testSpeed0":21,"com.graphhopper.GraphHopperAPITest.testLoad":134,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":170,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":120,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":317,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":78,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":310,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":84,"com.graphhopper.reader.OSMReaderTest.testBarriers":153,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":205,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":193,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":4,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":175,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":230,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":107,"com.graphhopper.util.GHUtilityTest.testCopy":137,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":181,"com.graphhopper.storage.SynchedDAWrapperTest.testExceptionIfNoEnsureCapacityWasCalled":341,"com.graphhopper.routing.PathTest.testFindInstruction":1,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":44,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":140,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":206,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":214,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":60,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":316,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":110,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":261,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":329,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":320,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":50,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":224,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":322,"com.graphhopper.storage.GraphHopperStorageCHTest.testFlags":286,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":115,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":300,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":93,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":215,"com.graphhopper.reader.PrinctonReaderTest.testRead":149,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":330,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":67,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":61,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":176,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":277,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":98,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":182,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes2":283,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":307,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":217,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":296,"com.graphhopper.util.InstructionListTest.testWayList2":147,"com.graphhopper.reader.OSMReaderTest.testFoot":53,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":196,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":133,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":192,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":256,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":253,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":332,"com.graphhopper.reader.OSMReaderTest.testOneWay":56,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":254,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":210,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":39,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":281,"com.graphhopper.routing.util.FastestWeightingTest.testMinWeightHasSameUnitAs_getWeight":20,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":227,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":318,"com.graphhopper.storage.SynchedDAWrapperTest.testSet_GetBytes":340,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":285,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":327,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":326,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":187,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":97,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":213,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":265,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":69,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":189,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":309,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":154,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":74,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":92,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":119,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":241,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":212,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxValue":29,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":42,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":89,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":101,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":297,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":90,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":273,"com.graphhopper.routing.PathBidirRefTest.testExtract":336,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":148,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":167,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":85,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":162,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":195,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":166,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":229,"com.graphhopper.storage.VLongStorageTest.testWriteWithTrim":335,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":165,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":243,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":32,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":164,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":194,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":163,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":64,"com.graphhopper.util.GHUtilityTest.testSort2":136,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":114,"com.graphhopper.reader.OSMReaderTest.testMain":151,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":302,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":25,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":218,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":299,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":334,"com.graphhopper.routing.PathBidirRefTest.testExtract2":86,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":298,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":24,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":268,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":45,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":197,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":236,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":17,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":65,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":77,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":257,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":63,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":325,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":291,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":293,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":54,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":231,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":201,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":220,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":7,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":55,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":118,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":274,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":280,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":95,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":250,"com.graphhopper.storage.GraphHopperStorageTest.testClone":312,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":333,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":304,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":328,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":28,"com.graphhopper.GraphHopperTest.testFootAndCar":58,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":11,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":278,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":16,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":183,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":180,"com.graphhopper.routing.util.CarFlagEncoderTest.testOneway":30,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":287,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed":31,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":94,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":258,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":233,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":112,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":191,"com.graphhopper.util.GHUtilityTest.testSortDirected":139,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":208,"com.graphhopper.GraphHopperTest.testPrepareOnly":161,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":289,"com.graphhopper.GraphHopperTest.testVia":57,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":264,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":124,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":178,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":48,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":157,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":242,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":232,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":127,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":51,"com.graphhopper.GraphHopperTest.testFootOnly":174,"com.graphhopper.routing.util.FootFlagEncoderTest.testCombined":37,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":237,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":156,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":26,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":266,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":238,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":68,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":73,"com.graphhopper.util.InstructionListTest.testFind":144,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":3,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":18,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":104,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":88,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":202,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":259,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":282},"transformations":[{"failures":[],"tindex":"25b7eb26-82c0-11e5-9e0b-7ff02a1afc35","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMInputFile:128","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:82","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.util.Instruction.getTurnDescription(com.graphhopper.util.Translation)"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"tindex":"25b81237-82c0-11e5-9e0b-8b586f8fb5af","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:118","type":"CtIfImpl","sourcecode":"if (long == (long + long))\n    return ~(long + long);\n"},"variableMap":{"high":"flags","len":"flags","start":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:313","type":"CtIfImpl","sourcecode":"if (double < ((com.graphhopper.routing.util.EncodedDoubleValue.double) / 2))\n    return com.graphhopper.routing.util.AbstractFlagEncoder.setLowSpeed(long, double, false);\n"},"status":-1},{"failures":[],"tindex":"25b81238-82c0-11e5-9e0b-a12c843fab63","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:137","type":"CtAssignmentImpl","sourcecode":"java.lang.String = \"E\""},"status":-2},{"failures":[71,72,73,74,0,1,75,76,77,78,79,22,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,44,45,46,47,103,104,105,106,107,108,109,110,111,48,112,49,50,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,51,148,149,150,52,53,151,152,153,154,155,54,156,157,158,56,159,160,161,162,163,164,165,166,167,57,168,169,58,170,171,172,173,174,175,176,177,178,179,180,181,182,183,59,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,61,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,63,246,247,248,249,250,251,252,253,254,255,256,257,258,259,64,260,261,262,263,264,65,265,266,267,268,269,270,271,272,273,274,66,275,276,277,278,279,280,281,282,283,284,285,286,287,67,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,69,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333],"tindex":"25b81239-82c0-11e5-9e0b-25c263a179df","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:124","type":"CtLocalVariableImpl","sourcecode":"int int = int - int"},"variableMap":{"dLat":"edgeCount","dLon":"edgeCount"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:521","type":"CtLocalVariableImpl","sourcecode":"int int = int"},"status":-1},{"failures":[],"tindex":"25b8394a-82c0-11e5-9e0b-95294d067738","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:124","type":"CtIfImpl","sourcecode":"if (long == long)\n    return long;\nelse\n    return ~long;\n"},"variableMap":{"high":"directionBitMask","highKey":"directionBitMask","key":"directionBitMask"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:251","type":"CtReturnImpl","sourcecode":"return long"},"status":-2},{"failures":[161,175],"tindex":"25b8394b-82c0-11e5-9e0b-11d4c29085f0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:252","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.routing.util.EncodingManager) == null) {\n    if (java.lang.String.isEmpty())\n        throw new java.lang.IllegalStateException((\"No EncodingManager was configured. And no one was found in the graph: \" + (com.graphhopper.storage.Directory.getLocation())));\n    \n    int int = 4;\n    if (\"8\".equals(com.graphhopper.storage.StorableProperties.get(\"graph.bytesForFlags\")))\n        int = 8;\n    \n    com.graphhopper.routing.util.EncodingManager = new com.graphhopper.routing.util.EncodingManager(java.lang.String , int);\n} else if ((!(java.lang.String.isEmpty())) && (!(com.graphhopper.routing.util.EncodingManager.toDetailsString().equalsIgnoreCase(java.lang.String)))) {\n    throw new java.lang.IllegalStateException((((((\"Encoding does not match:\\nGraphhopper config: \" + (com.graphhopper.routing.util.EncodingManager.toDetailsString())) + \"\\nGraph: \") + java.lang.String) + \", dir:\") + (com.graphhopper.storage.Directory.getLocation())));\n} "},"status":-1},{"failures":[161,171,173,202,334,278,306],"tindex":"25b8394c-82c0-11e5-9e0b-7ba706d720c1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:416","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.setEdgesHeader()"},"status":-1},{"failures":[],"tindex":"25b8394d-82c0-11e5-9e0b-4df95ddd942d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntIntBinHeap:236","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(int[], 0)"},"status":0},{"failures":[],"tindex":"25b8605e-82c0-11e5-9e0b-ad32f06495f4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.shapes.BBox:55","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.shapes.BBox.this(double, double, double, double, double, double, true)"},"status":-2},{"failures":[335],"tindex":"25b8605f-82c0-11e5-9e0b-e336522a033e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:118","type":"CtIfImpl","sourcecode":"if (long == (long + long))\n    return ~(long + long);\n"},"variableMap":{"high":"i","len":"i","start":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:140","type":"CtIfImpl","sourcecode":"if (byte >= 0) {\n    return long;\n} "},"status":-1},{"failures":[71,72,73,74,0,1,75,76,336,86,92,93,44,46,134,144,145,146,147,51,162,163,164,165,166,167,58,191,196,199,202,219,224,227,278,295,300,303,306,323,328,331],"tindex":"25b86060-82c0-11e5-9e0b-27e17a0bffeb","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:403","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.BaseGraph.edge(int, int)"},"variableMap":{"a":"adjNode","b":"adjNode","baseGraph":"baseGraph"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:415","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.BaseGraph.getEdgeIteratorState(int, int)"},"status":-1},{"failures":[],"tindex":"25b86061-82c0-11e5-9e0b-2545c85d219f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:89","type":"CtIfImpl","sourcecode":"if (int > 64)\n    throw new java.lang.IllegalStateException(\"allBits is too big and does not fit into 8 bytes\");\n"},"variableMap":{"allBits":"com.graphhopper.reader.OSMElement.WAY"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:280","type":"CtTryImpl","sourcecode":"try {\n    com.graphhopper.reader.OSMInputFile = new com.graphhopper.reader.OSMInputFile(java.io.File).setWorkerThreads(int).open();\n    com.graphhopper.coll.LongIntMap com.graphhopper.coll.LongIntMap = com.graphhopper.reader.OSMReader.getNodeMap();\n    com.graphhopper.reader.OSMElement com.graphhopper.reader.OSMElement;\n    while ((com.graphhopper.reader.OSMElement = com.graphhopper.reader.OSMInputFile.getNext()) != null) {\n        switch (com.graphhopper.reader.OSMElement.getType()) {\n            case com.graphhopper.reader.OSMElement.int :\n                if ((com.graphhopper.coll.LongIntMap.get(com.graphhopper.reader.OSMElement.getId())) != (-1)) {\n                    com.graphhopper.reader.OSMReader.processNode(((com.graphhopper.reader.OSMNode)(com.graphhopper.reader.OSMElement)));\n                } \n                break;\n            case com.graphhopper.reader.OSMElement.int :\n                if (long < 0) {\n                    com.graphhopper.reader.OSMReader.org.slf4j.Logger.info((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \", now parsing ways\"));\n                    long = long;\n                } \n                com.graphhopper.reader.OSMReader.processWay(((com.graphhopper.reader.OSMWay)(com.graphhopper.reader.OSMElement)));\n                break;\n            case com.graphhopper.reader.OSMElement.int :\n                if (long < 0) {\n                    com.graphhopper.reader.OSMReader.org.slf4j.Logger.info((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \", now parsing relations\"));\n                    long = long;\n                } \n                com.graphhopper.reader.OSMReader.processRelation(((com.graphhopper.reader.OSMRelation)(com.graphhopper.reader.OSMElement)));\n                break;\n        }\n        if (((++long) % 100000000) == 0) {\n            com.graphhopper.reader.OSMReader.org.slf4j.Logger.info(((((((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \", locs:\") + com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long))) + \" (\") + (long)) + \") \") + (com.graphhopper.util.Helper.getMemInfo())));\n        } \n    }\n} catch (java.lang.Exception ex) {\n    throw new java.lang.RuntimeException((((\"Couldn\\'t process file \" + java.io.File) + \", error: \") + (java.lang.Exception.getMessage())) , java.lang.Exception);\n} finally {\n    com.graphhopper.util.Helper.close(com.graphhopper.reader.OSMInputFile);\n}"},"status":-2},{"failures":[77,78,22,80,81,82,53,151,152,154,155,54,156,337,158,56,160,161,338,57,168,169,58,170,171,172,173,174,175],"tindex":"25b88772-82c0-11e5-9e0b-513769a285b0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:299","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"25b88773-82c0-11e5-9e0b-554395edf7ee","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PointList:262","type":"CtIfImpl","sourcecode":"if (int > (int))\n    throw new java.lang.IllegalArgumentException(\"new size needs be smaller than old size\");\n"},"variableMap":{"size":"origPoints","newSize":"origPoints"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:59","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.util.InstructionList.isEmpty())) {\n    if (com.graphhopper.util.PointList.isEmpty()) {\n        com.graphhopper.util.PointList com.graphhopper.util.PointList = com.graphhopper.util.InstructionList.get(0).getPoints();\n        com.graphhopper.util.PointList = new com.graphhopper.util.PointList(((com.graphhopper.util.InstructionList.size()) * (java.lang.Math.min(10, com.graphhopper.util.PointList.size()))) , com.graphhopper.util.PointList.is3D());\n    } \n    for (com.graphhopper.util.Instruction com.graphhopper.util.Instruction : com.graphhopper.util.InstructionList) {\n        if (boolean) {\n            int += com.graphhopper.util.Instruction.getPoints().size();\n            com.graphhopper.util.DouglasPeucker.simplify(com.graphhopper.util.Instruction.getPoints());\n        } \n        com.graphhopper.util.InstructionList.add(com.graphhopper.util.Instruction);\n        com.graphhopper.util.PointList.add(com.graphhopper.util.Instruction.getPoints());\n    }\n    if ((int + 1) < (java.util.List<com.graphhopper.routing.Path>.size())) {\n        com.graphhopper.util.ViaInstruction com.graphhopper.util.ViaInstruction = new com.graphhopper.util.ViaInstruction(com.graphhopper.util.InstructionList.get(((com.graphhopper.util.InstructionList.size()) - 1)));\n        com.graphhopper.util.ViaInstruction.setViaCount((int + 1));\n        com.graphhopper.util.InstructionList.replaceLast(com.graphhopper.util.ViaInstruction);\n    } \n} "},"status":0},{"failures":[],"tindex":"25b88774-82c0-11e5-9e0b-2d794000de2b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:663","type":"CtAssignmentImpl","sourcecode":"int = 0"},"status":0},{"failures":[],"tindex":"25b88775-82c0-11e5-9e0b-07e4c71b8b73","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:34","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.InstructionList.this(0, null)"},"status":-2},{"failures":[],"tindex":"25b88776-82c0-11e5-9e0b-216af9c6a292","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.VirtualEdgeIteratorState:90","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.PointList.copy(0, ((com.graphhopper.util.PointList.getSize()) - 1))"},"variableMap":{"pointList":"com.graphhopper.util.PointList.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:878","type":"CtIfImpl","sourcecode":"if (int == 0)\n    return com.graphhopper.util.PointList.com.graphhopper.util.PointList;\n"},"status":-2},{"failures":[158],"tindex":"25b88777-82c0-11e5-9e0b-b15b9b836211","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:314","type":"CtAssignmentImpl","sourcecode":"int = ((int)((java.lang.Math.log(((int) / 4))) / (java.lang.Math.log(2))))"},"variableMap":{"segmentSizeInBytes":"tmpNode","segmentSizeIntsPower":"tmpNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:695","type":"CtAssignmentImpl","sourcecode":"int = (-int) - 3"},"status":-1},{"failures":[339,340,341],"tindex":"25b8ae88-82c0-11e5-9e0b-bd1a3c66afc1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:174","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.DataAccess"},"variableMap":{"da":"inner"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.SynchedDAWrapper:123","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.DataAccess.setSegmentSize(int)"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":19,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"25b8394d-82c0-11e5-9e0b-4df95ddd942d","diffs":[{"methodsDiff":{"delete":["java.util.Arrays.fill"]},"type":"staticDiff"}]}]}
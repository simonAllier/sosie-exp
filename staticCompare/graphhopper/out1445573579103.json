{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":85,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":78,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":80,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":12,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":13,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":94,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":110,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":22,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":116,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":111,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":102,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":26,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":71,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":36,"com.graphhopper.reader.PrinctonReaderTest.testRead":6,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":46,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":47,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":34,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":39,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":99,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":69,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":40,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":75,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":98,"com.graphhopper.util.InstructionListTest.testWayList2":10,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":27,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":112,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":89,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":87,"com.graphhopper.util.InstructionListTest.testWayList":9,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":117,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":8,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":23,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":62,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":51,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":59,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":65,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":48,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":38,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":15,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":20,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":86,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":106,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":57,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":55,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":35,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":50,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":28,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":53,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":64,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":91,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":97,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":32,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":41,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":70,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":33,"com.graphhopper.routing.PathBidirRefTest.testExtract":43,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":101,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":5,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":42,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":0,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":113,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":4,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":3,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":2,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":1,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":49,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":79,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":25,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":67,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":105,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":30,"com.graphhopper.routing.PathBidirRefTest.testExtract2":44,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":52,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":103,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":14,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":90,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":66,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":74,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":77,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":114,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":31,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":68,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":21,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":100,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":96,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":37,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":109,"com.graphhopper.storage.GraphHopperStorageTest.testClone":108,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":73,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":115,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":24,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":56,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":61,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":84,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":58,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":18,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":17,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":104,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":82,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":60,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":72,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":95,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":81,"com.graphhopper.GraphHopperAPITest.testLoad":118,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":29,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":45,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":76,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":107,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":54,"com.graphhopper.util.InstructionListTest.testFind":7,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":93,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":16,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":88,"com.graphhopper.util.GHUtilityTest.testCopy":11,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":19,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":83,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":63,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":92},"transformations":[{"failures":[],"tindex":"58503c1e-793c-11e5-8d74-1516463de834","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:288","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"srtm_\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:424","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.routing.util.BikeCommonFlagEncoder.getWayName(int, int, com.graphhopper.util.Translation)"},"status":-2},{"failures":[],"tindex":"58508a3f-793c-11e5-8d74-85e6ef198f5f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.StorableProperties:181","type":"CtIfImpl","sourcecode":"if (boolean) {\n    return false;\n} "},"variableMap":{"silent":"edgeBased"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TraversalMode:126","type":"CtReturnImpl","sourcecode":"return boolean"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118],"tindex":"58508a40-793c-11e5-8d74-27c8c7348bf6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:127","type":"CtReturnImpl","sourcecode":"return ~long"},"variableMap":{"high":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:320","type":"CtReturnImpl","sourcecode":"return long"},"status":-1},{"failures":[],"tindex":"58508a41-793c-11e5-8d74-b79256ce9825","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:191","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(5)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:120","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.util.EncodingManager.needsTurnCostsSupport())\n    com.graphhopper.routing.util.TraversalMode = com.graphhopper.routing.util.TraversalMode.com.graphhopper.routing.util.TraversalMode;\n"},"status":-2},{"failures":[],"tindex":"5850b152-793c-11e5-8d74-8569ffa170d5","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:422","type":"CtReturnImpl","sourcecode":"return 6"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.ShortestWeighting:52","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.EdgeIteratorState.getDistance()"},"status":-2},{"failures":[],"tindex":"5850b153-793c-11e5-8d74-8b48cf1cd06a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Downloader:119","type":"CtLocalVariableImpl","sourcecode":"int int = 8 * 1024"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.TurnCostExtension:142","type":"CtLocalVariableImpl","sourcecode":"int int = int"},"status":-2},{"failures":[],"tindex":"5850b154-793c-11e5-8d74-5f90f3052f36","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:139","type":"CtOperatorAssignmentImpl","sourcecode":"long |= (byte & 127L) << 28"},"status":-2},{"failures":[],"tindex":"5850b155-793c-11e5-8d74-ed3c9eb08c6d","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper:379","type":"CtIfImpl","sourcecode":"if (int == (java.lang.Integer.int))\n    return java.lang.Double.double;\n"},"variableMap":{"java.lang.Double.MAX_VALUE":"java.lang.Double.MAX_VALUE","java.lang.Integer.MAX_VALUE":"java.lang.Integer.MAX_VALUE","storedInt":"storedInt"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:381","type":"CtIfImpl","sourcecode":"if (int == (-(java.lang.Integer.int)))\n    return -(java.lang.Double.double);\n"},"status":-2},{"failures":[],"tindex":"5850d866-793c-11e5-8d74-6bf643ffae21","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMInputFile:249","type":"CtIfImpl","sourcecode":"if ((int) <= 0)\n    int = 2;\n"},"variableMap":{"workerThreads":"toMoveNodes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:657","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.coll.GHBitSet.contains(int)))\n    break;\n"},"status":-2},{"failures":[],"tindex":"5850d867-793c-11e5-8d74-195831c033e5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:124","type":"CtLocalVariableImpl","sourcecode":"int int = int - int"},"variableMap":{"dLat":"segmentSizePower","dLon":"segmentSizePower"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:252","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long >>> (int)))"},"status":-2},{"failures":[],"tindex":"5850d868-793c-11e5-8d74-91249243f504","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:915","type":"CtLocalVariableImpl","sourcecode":"long long = -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHTreeMapComposed:48","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.util.BitUtil.toLong(int, int)"},"status":-2},{"failures":[],"tindex":"5850d869-793c-11e5-8d74-7b662c8927fb","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:683","type":"CtIfImpl","sourcecode":"if ((double >= (int)) || boolean)\n    double = int;\n"},"variableMap":{"maxTurnCosts":"traversalId","costs":"weight","restricted":"reverse"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:260","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.routing.AStar.AStarEdge == null) || ((com.graphhopper.routing.AStar.AStarEdge.double) > float)) {\n    double double = com.graphhopper.routing.util.ConsistentWeightApproximator.approximate(int, boolean);\n    double double = float + double;\n    if (com.graphhopper.routing.AStar.AStarEdge == null) {\n        com.graphhopper.routing.AStar.AStarEdge = new com.graphhopper.routing.AStar.AStarEdge(com.graphhopper.util.EdgeIterator.getEdge() , int , double , float);\n        com.graphhopper.routing.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.put(int, com.graphhopper.routing.AStar.AStarEdge);\n    } else {\n        assert (com.graphhopper.routing.AStar.AStarEdge.double) > double : \"Inconsistent distance estimate\";\n        java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.remove(com.graphhopper.routing.AStar.AStarEdge);\n        com.graphhopper.routing.AStar.AStarEdge.int = com.graphhopper.util.EdgeIterator.getEdge();\n        com.graphhopper.routing.AStar.AStarEdge.double = double;\n        com.graphhopper.routing.AStar.AStarEdge.double = float;\n    }\n    com.graphhopper.routing.AStar.AStarEdge.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge;\n    java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.add(com.graphhopper.routing.AStar.AStarEdge);\n    com.graphhopper.routing.AStarBidirection.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge, int);\n} "},"status":-2},{"failures":[],"tindex":"5850ff7a-793c-11e5-8d74-d35806e09c6d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.PathBidirRef:71","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.StopWatch.start()"},"status":-2},{"failures":[],"tindex":"5850ff7b-793c-11e5-8d74-c5df5b3b86c4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:803","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.DouglasPeucker.simplify(com.graphhopper.util.PointList)"},"status":-2},{"failures":[],"tindex":"5850ff7c-793c-11e5-8d74-3b267941d2c6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:191","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(5)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:113","type":"CtInvocationImpl","sourcecode":"java.io.RandomAccessFile.seek(0)"},"status":-2},{"failures":[],"tindex":"5850ff7d-793c-11e5-8d74-6f125c679c7a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:314","type":"CtAssignmentImpl","sourcecode":"int = ((int)((java.lang.Math.log(((int) / 4))) / (java.lang.Math.log(2))))"},"variableMap":{"segmentSizeInBytes":"charI","segmentSizeIntsPower":"charI"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilBig:105","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-2},{"failures":[],"tindex":"5851268e-793c-11e5-8d74-4f4d6077f51a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:886","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.util.FlagEncoder.supports(com.graphhopper.routing.util.PriorityWeighting.com.graphhopper.routing.util.PriorityWeighting))\n    return new com.graphhopper.routing.util.PriorityWeighting(com.graphhopper.routing.util.FlagEncoder , com.graphhopper.routing.util.WeightingMap);\nelse\n    return new com.graphhopper.routing.util.FastestWeighting(com.graphhopper.routing.util.FlagEncoder , com.graphhopper.routing.util.WeightingMap);\n"},"variableMap":{"com.graphhopper.routing.util.PriorityWeighting.class":"com.graphhopper.routing.util.PriorityWeighting.class","weightingMap":"weightingMap","encoder":"encoder"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:884","type":"CtIfImpl","sourcecode":"if ((\"fastest\".equalsIgnoreCase(java.lang.String)) || (java.lang.String.isEmpty())) {\n    if (com.graphhopper.routing.util.FlagEncoder.supports(com.graphhopper.routing.util.PriorityWeighting.com.graphhopper.routing.util.PriorityWeighting))\n        return new com.graphhopper.routing.util.PriorityWeighting(com.graphhopper.routing.util.FlagEncoder , com.graphhopper.routing.util.WeightingMap);\n    else\n        return new com.graphhopper.routing.util.FastestWeighting(com.graphhopper.routing.util.FlagEncoder , com.graphhopper.routing.util.WeightingMap);\n    \n} "},"status":-2},{"failures":[],"tindex":"5851268f-793c-11e5-8d74-edfdf953214a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:607","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.loadWayGeometryHeader()"},"variableMap":{"clonedG":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:415","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.setNodesHeader()"},"status":-2},{"failures":[],"tindex":"58512690-793c-11e5-8d74-f16f49e08a67","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PointList:236","type":"CtLocalVariableImpl","sourcecode":"int int = ((int) - int) - 1"},"variableMap":{"size":"com.graphhopper.util.EdgeIterator.NO_EDGE","i":"com.graphhopper.util.EdgeIterator.NO_EDGE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMTurnRelation:89","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.util.EdgeIterator.int"},"status":-2},{"failures":[],"tindex":"58514da1-793c-11e5-8d74-21892d382cce","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:197","type":"CtAssignmentImpl","sourcecode":"double = double * 0.9"},"variableMap":{"maxMCSpeed":"prevEle","speed":"dist"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:411","type":"CtOperatorAssignmentImpl","sourcecode":"double += com.graphhopper.util.PointList.com.graphhopper.util.DistanceCalc3D.calcDist(double, double, double, double[][int], double[][int], double[][int])"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
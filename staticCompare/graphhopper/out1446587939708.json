{"failureDictionary":{"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":120,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":110,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":129,"com.graphhopper.routing.util.EncodedDoubleValueTest.testMaxValueAndSwap":42,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidTunnel":88,"com.graphhopper.routing.PathTest.testFindInstruction":134,"com.graphhopper.reader.OSMReaderTest.testFerry":2,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPreferenceForSlowSpeed":65,"com.graphhopper.storage.GraphHopperStorageCHTest.testDoThrowExceptionIfDimDoesNotMatch":38,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":118,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":43,"com.graphhopper.routing.QueryGraphTest.testOneWay":128,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testService":98,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":18,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":137,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTram":99,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":53,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidanceOfHighMaxSpeed":44,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":62,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeightMMap":106,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":138,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetToMaxSpeed":46,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":144,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":64,"com.graphhopper.reader.OSMReaderTest.testWithBounds":13,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":123,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":157,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":61,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeight":108,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":162,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":77,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":151,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":159,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":158,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":117,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTram":58,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":101,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":16,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":103,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":164,"com.graphhopper.GraphHopperTest.testPrepare":20,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":161,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPreferenceForSlowSpeed":76,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidTunnel":70,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":140,"com.graphhopper.util.InstructionListTest.testWayList2":143,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":52,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":63,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":154,"com.graphhopper.routing.util.BikeFlagEncoderTest.testclassBicycle":84,"com.graphhopper.reader.OSMReaderTest.testFoot":3,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":126,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":130,"com.graphhopper.util.InstructionListTest.testWayList":142,"com.graphhopper.reader.OSMReaderTest.testOneWay":15,"com.graphhopper.routing.util.BikeFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":82,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":0,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":83,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":81,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":102,"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":33,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":97,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":25,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":80,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":156,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPreferenceForSlowSpeed":94,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidMotorway":100,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidTunnel":59,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":7,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":132,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":8,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":85,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":141,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":105,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":21,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxValue":49,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":86,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTram":87,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":153,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":152,"com.graphhopper.GraphHopperTest.testLoadOSM":24,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":112,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":148,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":145,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":116,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":115,"com.graphhopper.reader.OSMReaderTest.testSort":5,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":95,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":114,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":160,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":113,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":12,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":30,"com.graphhopper.reader.OSMReaderTest.testMain":4,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":121,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":166,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":32,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTram":69,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":91,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":125,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":36,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":93,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":165,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":47,"com.graphhopper.routing.PathTest.testWayList":133,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testAcceptsCar":40,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":73,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":1,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":74,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":9,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":119,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":51,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":14,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":163,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidMotorway":60,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":90,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":54,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":150,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":75,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":35,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":34,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":139,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":48,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointCount":109,"com.graphhopper.util.DouglasPeuckerTest.testPathSimplify":111,"com.graphhopper.GraphHopperTest.testFootAndCar":22,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":155,"com.graphhopper.reader.dem.SRTMProviderTest.testGetFileString":107,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":56,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":57,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":37,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":67,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":135,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":68,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":127,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":146,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidMotorway":71,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidMotorway":89,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":147,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":41,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":124,"com.graphhopper.GraphHopperTest.testPrepareOnly":17,"com.graphhopper.GraphHopperTest.testVia":19,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":26,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":92,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":31,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":11,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":66,"com.graphhopper.GraphHopperAPITest.testLoad":39,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":23,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":122,"com.graphhopper.GraphHopperTest.testFootOnly":27,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":50,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":10,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidTunnel":96,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":149,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":131,"com.graphhopper.reader.OSMReaderTest.testBarriers":6,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":45,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testclassBicycle":55,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":78,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":28,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":79,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":136,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":72,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":29,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPreferenceForSlowSpeed":104},"transformations":[{"failures":[0,1],"tindex":"167b4fc0-8276-11e5-b2ba-0d4425b3c40d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:411","type":"CtOperatorAssignmentImpl","sourcecode":"double += com.graphhopper.util.PointList.com.graphhopper.util.DistanceCalc3D.calcDist(double, double, double, double[][int], double[][int], double[][int])"},"status":-1},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],"tindex":"167b9de1-8276-11e5-b2ba-87358ba665d6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:102","type":"CtLocalVariableImpl","sourcecode":"long long = long - long"},"variableMap":{"cap":"relationFlags","bytes":"relationFlags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:371","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.routing.util.EncodingManager.handleWayTags(com.graphhopper.reader.OSMWay, long, long)"},"status":-1},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,22,23,24,26,28,29,30,31,32,33,34,35,36,37,38],"tindex":"167b9de2-8276-11e5-b2ba-cd1c508e1493","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:306","type":"CtAssertImpl","sourcecode":"assert com.graphhopper.storage.BaseGraph.isFrozen() : \"Traversal CHGraph is only possible if BaseGraph is frozen\""},"variableMap":{"baseGraph":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:206","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setHeader((9 * 4), (com.graphhopper.storage.BaseGraph.isFrozen() ? 1 : 0))"},"status":-1},{"failures":[39,19,20,21,22,23,24,26],"tindex":"167b9de3-8276-11e5-b2ba-d71724f241f3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GHResponse:92","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.PointList = com.graphhopper.util.PointList"},"variableMap":{"list":"fullPoints","points":"fullPoints"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:65","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.PointList = new com.graphhopper.util.PointList(((com.graphhopper.util.InstructionList.size()) * (java.lang.Math.min(10, com.graphhopper.util.PointList.size()))) , com.graphhopper.util.PointList.is3D())"},"status":-1},{"failures":[],"tindex":"167bc4f4-8276-11e5-b2ba-5d8a670775cb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:213","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"\\n<trk><name>\").append(java.lang.String)"},"status":0},{"failures":[],"tindex":"167bc4f5-8276-11e5-b2ba-234f23d23ad0","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.VLongStorage:86","type":"CtAssertImpl","sourcecode":"assert long >= 0L"},"variableMap":{"i":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:89","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.VLongStorage.writeByte(((byte)((long & 127L) | 128L)))"},"status":0},{"failures":[40,41,42,43,44,45,46,47,48,49,50],"tindex":"167bc4f6-8276-11e5-b2ba-e1c7fb1eecba","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:419","type":"CtReturnImpl","sourcecode":"return 50"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:409","type":"CtReturnImpl","sourcecode":"return -1"},"status":-1},{"failures":[2,3,4,5,7,8,9,10,13,14,15,51,52,53,54,55,41,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,43,85,86,87,88,89,90,91,92,93,94,95,96,97,44,98,99,100,101,102,103,104,105],"tindex":"167bc4f7-8276-11e5-b2ba-b38eb6fdc8d0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:133","type":"CtIfImpl","sourcecode":"if (java.lang.String.contains(\"|\")) {\n    java.lang.String = java.lang.String;\n    java.lang.String = java.lang.String.split(\"\\\\|\")[0];\n} "},"variableMap":{"entry":"classBicycle","entryVal":"classBicycle"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:572","type":"CtIfImpl","sourcecode":"if (java.lang.String != null)\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(100.0, com.graphhopper.routing.util.BikeCommonFlagEncoder.convertCallValueToPriority(java.lang.String).getValue());\n"},"status":-1},{"failures":[],"tindex":"167bec08-8276-11e5-b2ba-554ae232898a","series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:1008","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"Heading is not (fully) supported for CHGraph. See issue #483\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHLongIntBTree:79","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Illegal key \" + long))"},"status":-2},{"failures":[],"tindex":"167bec09-8276-11e5-b2ba-89cc33644c1d","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:239","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.trimToSize()"},"variableMap":{"baseGraph":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:397","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.initStorage()"},"status":0},{"failures":[106,106,107,107,108,108,8],"tindex":"167bec0a-8276-11e5-b2ba-39e2a4598d60","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:155","type":"CtAssignmentImpl","sourcecode":"int = 64"},"variableMap":{"tmpNo":"lon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:117","type":"CtAssignmentImpl","sourcecode":"int = -int"},"status":-1},{"failures":[],"tindex":"167c131b-8276-11e5-b2ba-7968e9312c63","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Downloader:119","type":"CtLocalVariableImpl","sourcecode":"int int = 8 * 1024"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:773","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.util.EdgeIterator.getBaseNode()"},"status":-2},{"failures":[],"tindex":"167c131c-8276-11e5-b2ba-dfecd2203eb7","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.StopWatch:57","type":"CtOperatorAssignmentImpl","sourcecode":"long += (java.lang.System.nanoTime()) - (long)"},"variableMap":{"lastTime":"mask","nanoTime":"mask"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:67","type":"CtUnaryOperatorImpl","sourcecode":"~(long)"},"status":0},{"failures":[109,110,111],"tindex":"167c131d-8276-11e5-b2ba-17c3f403f274","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:147","type":"CtIfImpl","sourcecode":"if ((int++) > 1000) {\n    throw new java.lang.IllegalStateException(\"Something unexpected happened. A node probably will not have 1000+ relations.\");\n} "},"variableMap":{"i":"removed"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:84","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.DouglasPeucker.compressNew(com.graphhopper.util.PointList, int)"},"status":-1},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],"tindex":"167c131e-8276-11e5-b2ba-359cc6d388fb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:168","type":"CtTryImpl","sourcecode":"try {\n    com.graphhopper.reader.OSMInputFile = new com.graphhopper.reader.OSMInputFile(java.io.File).setWorkerThreads(int).open();\n    long long = 1;\n    long long = 1;\n    com.graphhopper.reader.OSMElement com.graphhopper.reader.OSMElement;\n    while ((com.graphhopper.reader.OSMElement = com.graphhopper.reader.OSMInputFile.getNext()) != null) {\n        if (com.graphhopper.reader.OSMElement.isType(com.graphhopper.reader.OSMElement.int)) {\n            final com.graphhopper.reader.OSMWay com.graphhopper.reader.OSMWay = ((com.graphhopper.reader.OSMWay)(com.graphhopper.reader.OSMElement));\n            boolean boolean = com.graphhopper.reader.OSMReader.filterWay(com.graphhopper.reader.OSMWay);\n            if (boolean) {\n                gnu.trove.list.TLongList gnu.trove.list.TLongList = com.graphhopper.reader.OSMWay.getNodes();\n                int int = gnu.trove.list.TLongList.size();\n                for (int int = 0 ; int < int ; int++) {\n                    com.graphhopper.reader.OSMReader.prepareHighwayNode(gnu.trove.list.TLongList.get(int));\n                }\n                if (((++long) % 5000000) == 0) {\n                    com.graphhopper.reader.OSMReader.org.slf4j.Logger.info(((((((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \" (preprocess), osmIdMap:\") + com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(com.graphhopper.reader.OSMReader.getNodeMap().getSize()))) + \" (\") + (com.graphhopper.reader.OSMReader.getNodeMap().getMemoryUsage())) + \"MB) \") + (com.graphhopper.util.Helper.getMemInfo())));\n                } \n            } \n        } \n        if (com.graphhopper.reader.OSMElement.isType(com.graphhopper.reader.OSMElement.int)) {\n            final com.graphhopper.reader.OSMRelation com.graphhopper.reader.OSMRelation = ((com.graphhopper.reader.OSMRelation)(com.graphhopper.reader.OSMElement));\n            if ((!(com.graphhopper.reader.OSMRelation.isMetaRelation())) && (com.graphhopper.reader.OSMRelation.hasTag(\"type\", \"route\")))\n                com.graphhopper.reader.OSMReader.prepareWaysWithRelationInfo(com.graphhopper.reader.OSMRelation);\n            \n            if (com.graphhopper.reader.OSMRelation.hasTag(\"type\", \"restriction\"))\n                com.graphhopper.reader.OSMReader.prepareRestrictionRelation(com.graphhopper.reader.OSMRelation);\n            \n            if (((++long) % 50000) == 0) {\n                com.graphhopper.reader.OSMReader.org.slf4j.Logger.info(((((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \" (preprocess), osmWayMap:\") + com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(com.graphhopper.reader.OSMReader.getRelFlagsMap().size()))) + \" \") + (com.graphhopper.util.Helper.getMemInfo())));\n            } \n        } \n    }\n} catch (java.lang.Exception ex) {\n    throw new java.lang.RuntimeException(\"Problem while parsing file\" , java.lang.Exception);\n} finally {\n    com.graphhopper.util.Helper.close(com.graphhopper.reader.OSMInputFile);\n}"},"status":-1},{"failures":[0],"tindex":"167c3a2f-8276-11e5-b2ba-1b74b3603f5f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareEncoder:45","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.ch.PrepareEncoder.long"},"variableMap":{"com.graphhopper.routing.ch.PrepareEncoder.scBwdDir":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:123","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.EncodedDoubleValue.setDefaultValue(long)"},"status":-1},{"failures":[],"tindex":"167c3a30-8276-11e5-b2ba-69122fa591b8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:184","type":"CtIfImpl","sourcecode":"if (double > 0.1) {\n    double = double;\n    double = double;\n} else if (double < (-0.1)) {\n    double = -double;\n    double = double;\n} "},"variableMap":{"incEleSum":"slice","eleDelta":"azimuth","incDist2DSum":"slice","decEleSum":"slice","fullDist2D":"azimuth","decDist2DSum":"slice"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:129","type":"CtIfImpl","sourcecode":"if (double < double) {\n    java.lang.String = \"N\";\n} else if (double < (double * 3)) {\n    java.lang.String = \"NE\";\n} else if (double < (double * 5)) {\n    java.lang.String = \"E\";\n} else if (double < (double * 7)) {\n    java.lang.String = \"SE\";\n} else if (double < (double * 9)) {\n    java.lang.String = \"S\";\n} else if (double < (double * 11)) {\n    java.lang.String = \"SW\";\n} else if (double < (double * 13)) {\n    java.lang.String = \"W\";\n} else if (double < (double * 15)) {\n    java.lang.String = \"NW\";\n} else {\n    java.lang.String = \"N\";\n}"},"status":-2},{"failures":[],"tindex":"167c6141-8276-11e5-b2ba-855c7ee7d786","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:151","type":"CtLocalVariableImpl","sourcecode":"int int = java.lang.Math.abs(com.graphhopper.storage.DataAccess.getShort((int * 2)))"},"variableMap":{"heights":"edges","i":"E_FLAGS"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:112","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.storage.DataAccess.getInt((long + (int)))"},"status":-2},{"failures":[],"tindex":"167c6142-8276-11e5-b2ba-870f21b18bc6","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:219","type":"CtLocalVariableImpl","sourcecode":"double double = double > 1 ? double / double : 0"},"variableMap":{"incEleSum":"tmp","incDist2DSum":"tmp"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistancePlaneProjection:44","type":"CtLocalVariableImpl","sourcecode":"double double = (double * double) + (double * double)"},"status":-2},{"failures":[4,7,8,39,112,113,114,115,116,19,20,21,22,23,24,26,27,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,50,144,145,146,147,148,149,29,150,151,152,153,32,154,155,156,157,158,159,160,161,162,37,163,164,165,166],"tindex":"167c6143-8276-11e5-b2ba-c3fe0431f011","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PathMerger:99","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(com.graphhopper.util.PointList)"},"variableMap":{"tmpPoints":"pillarNodes","fullPoints":"pillarNodes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:893","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    double double = com.graphhopper.util.Helper.intToDegree(com.graphhopper.util.BitUtil.toInt(byte[], int));\n    int += 4;\n    double double = com.graphhopper.util.Helper.intToDegree(com.graphhopper.util.BitUtil.toInt(byte[], int));\n    int += 4;\n    if (com.graphhopper.storage.NodeAccess.is3D()) {\n        com.graphhopper.util.PointList.add(double, double, com.graphhopper.util.Helper.intToEle(com.graphhopper.util.BitUtil.toInt(byte[], int)));\n        int += 4;\n    } else {\n        com.graphhopper.util.PointList.add(double, double);\n    }\n}"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"167bc4f4-8276-11e5-b2ba-5d8a670775cb","diffs":[{"methodsDiff":{"delete":["java.lang.StringBuilder.append"]},"type":"staticDiff"}]}]}
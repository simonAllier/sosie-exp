{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":27,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":6,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":22,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":38,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":15,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":34,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":0,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":18,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":13,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":5,"com.graphhopper.storage.MMapDataAccessTest.testCopy":7,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":12,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":24,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":39,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":21,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":31,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":26,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":17,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":4,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":9,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":16,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":29,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":33,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":25,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":42,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":3,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":30,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":41,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":23,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":32,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":10,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":11,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":14,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":28,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":1,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":20,"com.graphhopper.storage.MMapDataAccessTest.testTrimTo":8,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":35,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":37,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":19,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":40,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":36,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":2},"transformations":[{"failures":[],"tindex":"0b27e614-791b-11e5-a182-517ca6b80e88","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:182","type":"CtLocalVariableImpl","sourcecode":"java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.CompressedArray:197","type":"CtLocalVariableImpl","sourcecode":"java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream(byte[].int)"},"status":-2},{"failures":[],"tindex":"0b27e615-791b-11e5-a182-f3f1f2cce5c5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:362","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.checkInit()"},"status":0},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"tindex":"0b280d26-791b-11e5-a182-efc03f9662d2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHTreeMapComposed:32","type":"CtUnaryOperatorImpl","sourcecode":"-3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:383","type":"CtInvocationImpl","sourcecode":"java.nio.ByteBuffer.capacity()"},"status":-1},{"failures":[],"tindex":"0b280d27-791b-11e5-a182-f138a7f27261","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:967","type":"CtAssignmentImpl","sourcecode":"int = (23 * int) + (int)"},"variableMap":{"from":"visitedCount","hash":"visitedCount"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:100","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-2},{"failures":[],"tindex":"0b280d28-791b-11e5-a182-f76a1b28c813","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.UnsafeDataAccess:267","type":"CtIfImpl","sourcecode":"if (long > (this.long))\n    throw new java.lang.IllegalStateException(\"Use ensureCapacity to increase capacity!\");\n"},"variableMap":{"bytes":"value","capacity":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtil:159","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.BitUtil.fromLong(byte[], long, 0)"},"status":-2},{"failures":[],"tindex":"0b280d29-791b-11e5-a182-6d12c208be51","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:140","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.QueryResult.setClosestEdge(com.graphhopper.routing.util.AllEdgesIterator)"},"variableMap":{"res":"res","iter":"iter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:93","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.routing.util.AllEdgesIterator.next()) {\n    if (!(com.graphhopper.routing.util.EdgeFilter.accept(com.graphhopper.routing.util.AllEdgesIterator))) {\n        continue;\n    } \n    for (int int = 0, int int ; int < 2 ; int++) {\n        if (int == 0) {\n            int = com.graphhopper.routing.util.AllEdgesIterator.getBaseNode();\n        } else {\n            int = com.graphhopper.routing.util.AllEdgesIterator.getAdjNode();\n        }\n        double double = com.graphhopper.storage.NodeAccess.getLatitude(int);\n        double double = com.graphhopper.storage.NodeAccess.getLongitude(int);\n        double double = com.graphhopper.util.DistanceCalc.calcDist(double, double, double, double);\n        if (double < 0)\n            continue;\n        \n        if (double < double) {\n            com.graphhopper.storage.index.QueryResult.setQueryDistance(double);\n            com.graphhopper.storage.index.QueryResult.setClosestEdge(com.graphhopper.routing.util.AllEdgesIterator.detach(false));\n            com.graphhopper.storage.index.QueryResult.setClosestNode(int);\n            double = double;\n        } \n        if (int > 0)\n            continue;\n        \n        int int = com.graphhopper.routing.util.AllEdgesIterator.getAdjNode();\n        double double = com.graphhopper.storage.NodeAccess.getLatitude(int);\n        double double = com.graphhopper.storage.NodeAccess.getLongitude(int);\n        if (com.graphhopper.util.DistanceCalc.validEdgeDistance(double, double, double, double, double, double)) {\n            double double = com.graphhopper.util.DistanceCalc.calcDenormalizedDist(com.graphhopper.util.DistanceCalc.calcNormalizedEdgeDistance(double, double, double, double, double, double));\n            if (double < double) {\n                com.graphhopper.storage.index.QueryResult.setQueryDistance(double);\n                com.graphhopper.storage.index.QueryResult.setClosestNode(int);\n                com.graphhopper.storage.index.QueryResult.setClosestEdge(com.graphhopper.routing.util.AllEdgesIterator);\n                if (double > (com.graphhopper.util.DistanceCalc.calcDist(double, double, double, double)))\n                    com.graphhopper.storage.index.QueryResult.setClosestNode(int);\n                \n                double = double;\n            } \n        } \n    }\n}"},"status":-2},{"failures":[],"tindex":"0b28343a-791b-11e5-a182-07cb6fea2cf5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:270","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.StopWatch.start()"},"variableMap":{"periodSW":"lazySW"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:305","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch()"},"status":-2},{"failures":[],"tindex":"0b28343b-791b-11e5-a182-d78c874a1a0e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:157","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.create((((int) * (int)) * 4))"},"status":-2},{"failures":[],"tindex":"0b28343c-791b-11e5-a182-fb3ccade0b44","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:495","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring((int + 1))"},"variableMap":{"minStr":"str","index":"mpInteger"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:431","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(0, int).trim()"},"status":-2},{"failures":[],"tindex":"0b28343d-791b-11e5-a182-bf0047a67d8c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:475","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(0.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"variableMap":{"weightToPrioMap":"weightToPrioMap","com.graphhopper.routing.util.PriorityCode.UNCHANGED":"com.graphhopper.routing.util.PriorityCode.PREFER"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.RacingBikeFlagEncoder:157","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(110.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"status":-2},{"failures":[],"tindex":"0b28343e-791b-11e5-a182-e9f044841e49","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:70","type":"CtReturnImpl","sourcecode":"return long | long"},"variableMap":{"flags":"len","tmpValue":"start"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDMap:119","type":"CtReturnImpl","sourcecode":"return ~(long + long)"},"status":-2},{"failures":[],"tindex":"0b28343f-791b-11e5-a182-a33264287d3d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.SRTMProvider:102","type":"CtLocalVariableImpl","sourcecode":"java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"Africa\" , \"Australia\" , \"Eurasia\" , \"Islands\" , \"North_America\" , \"South_America\" }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.PrinctonReader:62","type":"CtLocalVariableImpl","sourcecode":"java.lang.String[] java.lang.String[] = java.lang.String.split(\" \")"},"status":-2},{"failures":[],"tindex":"0b285b50-791b-11e5-a182-790385f3d175","series":0,"name":"add","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:92","type":"CtIfImpl","sourcecode":"if (int <= 0)\n    throw new java.lang.IllegalStateException(\"allBits must be positive\");\n"},"variableMap":{"allBits":"connectedId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BreadthFirstSearch:47","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.XFirstSearch.(checkAdjacent(com.graphhopper.util.EdgeIterator)) && (!(com.graphhopper.coll.GHBitSet.contains(int)))) {\n    com.graphhopper.coll.GHBitSet.add(int);\n    com.graphhopper.util.SimpleIntDeque.push(int);\n} "},"status":-2},{"failures":[],"tindex":"0b285b51-791b-11e5-a182-392b76dcb905","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.pbf.PbfBlobDecoder:88","type":"CtLocalVariableImpl","sourcecode":"java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Constants:81","type":"CtLocalVariableImpl","sourcecode":"java.util.List<java.lang.String> java.util.List<java.lang.String> = com.graphhopper.util.Helper.com.graphhopper.util.Helper.readFile(new java.io.InputStreamReader(com.graphhopper.GraphHopper.com.graphhopper.GraphHopper.getResourceAsStream(\"version\") , com.graphhopper.util.Helper.java.nio.charset.Charset))"},"status":-2},{"failures":[],"tindex":"0b285b52-791b-11e5-a182-4d1af01bca50","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMInputFile:249","type":"CtIfImpl","sourcecode":"if ((int) <= 0)\n    int = 2;\n"},"variableMap":{"workerThreads":"skippedEdge2"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:655","type":"CtForEachImpl","sourcecode":"NEXT_SC : for (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut : java.util.Map<com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut>.keySet()) {\n    boolean boolean = false;\n    com.graphhopper.util.CHEdgeIterator com.graphhopper.util.CHEdgeIterator = com.graphhopper.util.CHEdgeExplorer.setBaseNode(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n    while (com.graphhopper.util.CHEdgeIterator.next()) {\n        if (((com.graphhopper.util.CHEdgeIterator.isShortcut()) && ((com.graphhopper.util.CHEdgeIterator.getAdjNode()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) && (com.graphhopper.util.CHEdgeIterator.canBeOverwritten(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long))) {\n            if ((com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double) >= (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.CHEdgeIterator, false, com.graphhopper.util.EdgeIterator.int)))\n                continue NEXT_SC;\n            \n            if (((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) || ((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) {\n                throw new java.lang.IllegalStateException((((((((((((((((((\"Shortcut cannot update itself! \" + (com.graphhopper.util.CHEdgeIterator.getEdge())) + \", skipEdge1:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", skipEdge2:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", edge \") + com.graphhopper.util.CHEdgeIterator) + \":\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.CHEdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", sc:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut) + \", skippedEdge1: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", skippedEdge2: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", neighbors:\") + (com.graphhopper.util.GHUtility.getNeighbors(com.graphhopper.util.CHEdgeIterator))));\n            } \n            com.graphhopper.util.CHEdgeIterator.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n            com.graphhopper.util.CHEdgeIterator.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n            com.graphhopper.util.CHEdgeIterator.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n            com.graphhopper.util.CHEdgeIterator.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n            com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIterator.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n            boolean = true;\n            break;\n        } \n    }\n    if (!boolean) {\n        com.graphhopper.util.CHEdgeIteratorState com.graphhopper.util.CHEdgeIteratorState = com.graphhopper.storage.CHGraphImpl.shortcut(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        com.graphhopper.util.CHEdgeIteratorState.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n        com.graphhopper.util.CHEdgeIteratorState.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIteratorState.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIteratorState.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIteratorState.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        int++;\n    } \n}"},"status":-2},{"failures":[],"tindex":"0b288263-791b-11e5-a182-f7c27b40c41e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:272","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-2},{"failures":[],"tindex":"0b288264-791b-11e5-a182-57d6d7832ab5","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:183","type":"CtIfImpl","sourcecode":"if (int == (int))\n    break;\n"},"variableMap":{"turnCostIndex":"speed","NO_TURN_ENTRY":"speed"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:388","type":"CtIfImpl","sourcecode":"if (java.lang.Integer != null)\n    int = java.lang.Integer;\n"},"status":-2},{"failures":[],"tindex":"0b288265-791b-11e5-a182-ff807cf78ebb","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(5);\n} catch (java.lang.InterruptedException iex) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:589","type":"CtIfImpl","sourcecode":"if ((boolean && (!boolean)) || (\"steps\".equals(java.lang.String)))\n    com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\n"},"status":-2},{"failures":[],"tindex":"0b288266-791b-11e5-a182-d162072c14ae","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:149","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.util.StopWatch com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch().start()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:255","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.util.StopWatch com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch()"},"status":-2},{"failures":[],"tindex":"0b288267-791b-11e5-a182-f993fce0bdad","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.VLongStorage:86","type":"CtAssertImpl","sourcecode":"assert long >= 0L"},"variableMap":{"i":"key"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseLongLongArray:406","type":"CtIfImpl","sourcecode":"if ((long[][int]) < long) {\n    int = int;\n} else {\n    int = int;\n}"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
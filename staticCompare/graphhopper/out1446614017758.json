{"failureDictionary":{"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":174,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":190,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":180,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":95,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":112,"com.graphhopper.reader.OSMReaderTest.testFerry":151,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":172,"com.graphhopper.routing.QueryGraphTest.testOneWay":179,"com.graphhopper.storage.VLongStorageTest.testWrite":5,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":91,"com.graphhopper.reader.OSMReaderTest.testWithBounds":161,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":47,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":26,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":35,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":204,"com.graphhopper.coll.CompressedArrayTest.testCompress":8,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":14,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":39,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":125,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":164,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":117,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":82,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":83,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":121,"com.graphhopper.GraphHopperTest.testPrepare":20,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":43,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":29,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":66,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":178,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":183,"com.graphhopper.util.InstructionListTest.testWayList":144,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":143,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":186,"com.graphhopper.util.InstructionTest.testCalcAzimuthAndGetDirection":9,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":77,"com.graphhopper.GraphHopperAPITest.testDisconnected179":141,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":168,"com.graphhopper.storage.RAMIntDataAccessTest.testBoundsCheck":3,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":89,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":205,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":184,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":62,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":92,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":201,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":157,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":207,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":76,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":195,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":38,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":21,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":107,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":54,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":57,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":56,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":55,"com.graphhopper.GraphHopperTest.testLoadOSM":24,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":99,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":128,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":93,"com.graphhopper.reader.OSMReaderTest.testSort":154,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":160,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":206,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":59,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":132,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":133,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":177,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":193,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":194,"com.graphhopper.routing.PathTest.testWayList":198,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":34,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":137,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":30,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":11,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":90,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":173,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":127,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":79,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":138,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":88,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":65,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":188,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":200,"com.graphhopper.util.GHUtilityTest.testSort":149,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":27,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":96,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":113,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":109,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":118,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":176,"com.graphhopper.coll.CompressedArrayTest.testCompress2":7,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":116,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":25,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":110,"com.graphhopper.GraphHopperAPITest.testLoad":140,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":23,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":63,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":203,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":60,"com.graphhopper.reader.OSMReaderTest.testBarriers":155,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":40,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":170,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":122,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":28,"com.graphhopper.util.GHUtilityTest.testCopy":148,"com.graphhopper.routing.PathTest.testFindInstruction":199,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":182,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":45,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":49,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":185,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":111,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":187,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":67,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":189,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":50,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":72,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":33,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":53,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":2,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":171,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":51,"com.graphhopper.util.InstructionListTest.testWayList2":145,"com.graphhopper.reader.OSMReaderTest.testFoot":152,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":100,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":181,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":97,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":98,"com.graphhopper.reader.OSMReaderTest.testOneWay":163,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":64,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":71,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":70,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":36,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":1,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":48,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":105,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":37,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":156,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":197,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":134,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":192,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":84,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":119,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":166,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":15,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":42,"com.graphhopper.storage.VLongStorageTest.testWriteWithTrim":6,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":19,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":58,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":18,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":136,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":17,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":41,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":16,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":104,"com.graphhopper.util.GHUtilityTest.testSort2":147,"com.graphhopper.reader.OSMReaderTest.testMain":153,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":87,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":52,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":86,"com.graphhopper.storage.RAMIntDataAccessTest.testTrimTo":4,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":85,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":108,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":129,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":101,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":115,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":202,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":139,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":69,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":80,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":81,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":12,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":123,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":44,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":162,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":120,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":191,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":0,"com.graphhopper.storage.GraphHopperStorageTest.testClone":61,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":73,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":94,"com.graphhopper.GraphHopperTest.testFootAndCar":22,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":68,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":74,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":32,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":102,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":126,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":46,"com.graphhopper.util.GHUtilityTest.testSortDirected":150,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":78,"com.graphhopper.GraphHopperTest.testPrepareOnly":165,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":114,"com.graphhopper.GraphHopperTest.testVia":167,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":13,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":31,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":159,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":135,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":124,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":175,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":146,"com.graphhopper.GraphHopperTest.testFootOnly":169,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":130,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":158,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":106,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":131,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":196,"com.graphhopper.util.InstructionListTest.testFind":142,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":10,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":75,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":103},"transformations":[{"failures":[0,1,2],"tindex":"ce123fa8-82b2-11e5-b73a-93a18e40cd8c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:742","type":"CtIfImpl","sourcecode":"if (int < 0)\n    int = int;\n"},"variableMap":{"updatedA":"key","nodeA":"oldValue"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHTreeMapComposed:58","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.GHTreeMapComposed.remove(int, int)"},"status":-1},{"failures":[],"tindex":"ce1266b9-82b2-11e5-b73a-f76d176fb5ef","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper:177","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"UTF-8\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:424","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.routing.util.BikeCommonFlagEncoder.getWayName(int, int, com.graphhopper.util.Translation)"},"status":-2},{"failures":[3,4],"tindex":"ce1266ba-82b2-11e5-b73a-5d04c4c26dfc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:332","type":"CtAssignmentImpl","sourcecode":"int[][] = java.util.Arrays.copyOf(int[][], int)"},"status":-1},{"failures":[],"tindex":"ce1266bb-82b2-11e5-b73a-af5ecf9e5afb","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:742","type":"CtIfImpl","sourcecode":"if (int < 0)\n    int = int;\n"},"variableMap":{"updatedA":"endNode","nodeA":"endNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.PathNative:50","type":"CtWhileImpl","sourcecode":"while (true) {\n    int int = int[][int];\n    if (!(com.graphhopper.util.EdgeIterator.Edge.isValid(int)))\n        break;\n    \n    com.graphhopper.routing.Path.processEdge(int, int);\n    int = int[][int];\n}"},"status":-1},{"failures":[],"tindex":"ce1266bc-82b2-11e5-b73a-5599126dac65","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.RoundaboutInstruction:59","type":"CtIfImpl","sourcecode":"if ((int) != int) {\n    int = 2;\n} "},"variableMap":{"clockwise2":"entriesPerSegment","clockwise":"entriesPerSegment"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.CompressedArray:78","type":"CtTryImpl","sourcecode":"try {\n    if ((com.graphhopper.storage.VLongStorage) == null)\n        com.graphhopper.storage.VLongStorage = new com.graphhopper.storage.VLongStorage(((int) * (int)));\n    \n    long long = com.graphhopper.geohash.SpatialKeyAlgo.encode(new com.graphhopper.util.shapes.GHPoint(double , double));\n    com.graphhopper.storage.VLongStorage.writeVLong(long);\n    (int)++;\n    if ((int) >= (int)) {\n        com.graphhopper.coll.CompressedArray.flush();\n    } \n} catch (java.lang.Exception ex) {\n    throw new java.lang.RuntimeException(java.lang.Exception);\n}"},"status":0},{"failures":[5,6,7,8],"tindex":"ce128dcd-82b2-11e5-b73a-d72ac4631aa4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:288","type":"CtIfImpl","sourcecode":"if ((long & long) != 0)\n    long |= 1;\n"},"variableMap":{"res":"i","maxBit":"i","value":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:89","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.VLongStorage.writeByte(((byte)((long & 127L) | 128L)))"},"status":-1},{"failures":[9],"tindex":"ce128dce-82b2-11e5-b73a-998202a924cc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:140","type":"CtAssignmentImpl","sourcecode":"java.lang.String = \"SE\""},"variableMap":{"cp":"cp"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:134","type":"CtAssignmentImpl","sourcecode":"java.lang.String = \"NE\""},"status":-1},{"failures":[10,11,12,13],"tindex":"ce128dcf-82b2-11e5-b73a-29c7cdd5aa23","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:57","type":"CtIfImpl","sourcecode":"if (long <= (long)) {\n    throw new java.lang.IllegalStateException((((\"Not supported: key \" + long) + \" is lower than last one \") + (long)));\n} "},"variableMap":{"lastKey":"costsBase","key":"costsBase"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.TurnCostExtension:158","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt((long + (int)), int)"},"status":-1},{"failures":[],"tindex":"ce128dd0-82b2-11e5-b73a-f5f071fc5108","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1166","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.LockFactory.forceRemove(java.lang.String, true)"},"status":0},{"failures":[],"tindex":"ce128dd1-82b2-11e5-b73a-33a3d8ace294","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:55","type":"CtLocalVariableImpl","sourcecode":"double double = double / (java.lang.Math.abs((double - double)))"},"variableMap":{"gridCellWidth":"dMinLat","x1":"dMinLon","x2":"dMinLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:680","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Math.min(double, double)"},"status":0},{"failures":[],"tindex":"ce128dd2-82b2-11e5-b73a-2599af5cf3db","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AbstractBidirAlgo:77","type":"CtIfImpl","sourcecode":"if (!(boolean)) {\n    boolean = !com.graphhopper.routing.AbstractBidirAlgo.(fillEdgesFrom());\n} else {\n    boolean = !com.graphhopper.routing.AbstractBidirAlgo.(fillEdgesTo());\n}"},"status":-2},{"failures":[],"tindex":"ce12b4e3-82b2-11e5-b73a-eda48a353cd9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.shapes.BBox:230","type":"CtLocalVariableImpl","sourcecode":"int int = 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.search.NameIndex:130","type":"CtLocalVariableImpl","sourcecode":"int int = (byte[][0]) & 255"},"status":-2},{"failures":[],"tindex":"ce12b4e4-82b2-11e5-b73a-9f90ae07ecf2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:186","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(2000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:294","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.storage.CHGraphImpl com.graphhopper.storage.CHGraphImpl : java.util.Collection<com.graphhopper.storage.CHGraphImpl>) {\n    com.graphhopper.storage.CHGraphImpl.setEdgesHeader();\n    com.graphhopper.storage.CHGraphImpl.flush();\n}"},"status":-2},{"failures":[],"tindex":"ce12b4e5-82b2-11e5-b73a-1bbf65cfb248","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:236","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.AbstractDataAccess.(isStoring()) && (new java.io.File(((java.lang.String) + java.lang.String)).exists()))\n    throw new java.lang.IllegalArgumentException(\"file newName already exists!\");\n"},"variableMap":{"newName":"name","this":"this","location":"name"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:209","type":"CtTryImpl","sourcecode":"try {\n    if (!(java.io.File.renameTo(new java.io.File(((java.lang.String) + java.lang.String))))) {\n        throw new java.lang.IllegalStateException((((\"Couldn\\'t rename this \" + com.graphhopper.storage.DataAccess.(getType())) + \" object to \") + java.lang.String));\n    } \n    java.lang.String = java.lang.String;\n} catch (java.lang.Exception ex) {\n    throw new java.lang.IllegalStateException(((\"Couldn\\'t rename this \" + com.graphhopper.storage.DataAccess.(getType())) + \" object!\") , java.lang.Exception);\n}"},"status":0},{"failures":[14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],"tindex":"ce12b4e6-82b2-11e5-b73a-917337a50877","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:69","type":"CtAssignmentImpl","sourcecode":"int = int / 10"},"variableMap":{"initLeafSize":"towerNode","maxLeafEntries":"towerNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:636","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.util.EdgeIteratorState.getAdjNode()"},"status":-1},{"failures":[],"tindex":"ce12b4e7-82b2-11e5-b73a-4b466b3f0b9b","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.Path4CH:61","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.util.CHEdgeIteratorState.getSkippedEdge1()"},"variableMap":{"mainEdgeState":"mainEdgeState"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:63","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.util.CHEdgeIteratorState.getBaseNode()"},"status":-2},{"failures":[],"tindex":"ce12b4e8-82b2-11e5-b73a-499ca61c418d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:259","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(float[], int, ((int) + 1), 0.0F)"},"status":0},{"failures":[31,32,33,34,35,36,37,38,39,40,41,42,43,44,10,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,14,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,12,158,159,160,161,162,163,164,165,15,16,17,18,19,166,167,20,21,22,23,24,168,25,169,170,171,172,13,173,174,175,26,176,177,178,27,179,180,181,182,183,184,28,185,186,187,188,189,29,190,191,192,193,30,194,195,196,197,198,199,200,201],"tindex":"ce12dbf9-82b2-11e5-b73a-47cc04b78b63","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:258","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.storage.BaseGraph.nextNodeEntryIndex(4)"},"status":-1},{"failures":[],"tindex":"ce12dbfa-82b2-11e5-b73a-bf69aca7c9e6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:297","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.CHGraphImpl.flush()"},"variableMap":{"cg":"routingGraph"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:74","type":"CtIfImpl","sourcecode":"if (boolean) {\n    com.graphhopper.util.CHEdgeIteratorState com.graphhopper.util.CHEdgeIteratorState = ((com.graphhopper.util.CHEdgeIteratorState)(com.graphhopper.storage.Graph.getEdgeIteratorState(int, int)));\n    boolean boolean = com.graphhopper.util.CHEdgeIteratorState == null;\n    if (boolean)\n        com.graphhopper.util.CHEdgeIteratorState = ((com.graphhopper.util.CHEdgeIteratorState)(com.graphhopper.storage.Graph.getEdgeIteratorState(int, int)));\n    \n    com.graphhopper.routing.ch.Path4CH.expandEdge(com.graphhopper.util.CHEdgeIteratorState, false);\n    if (boolean)\n        com.graphhopper.util.CHEdgeIteratorState = ((com.graphhopper.util.CHEdgeIteratorState)(com.graphhopper.storage.Graph.getEdgeIteratorState(int, int)));\n    else\n        com.graphhopper.util.CHEdgeIteratorState = ((com.graphhopper.util.CHEdgeIteratorState)(com.graphhopper.storage.Graph.getEdgeIteratorState(int, int)));\n    \n    com.graphhopper.routing.ch.Path4CH.expandEdge(com.graphhopper.util.CHEdgeIteratorState, true);\n} else {\n    com.graphhopper.util.CHEdgeIteratorState com.graphhopper.util.CHEdgeIteratorState = ((com.graphhopper.util.CHEdgeIteratorState)(com.graphhopper.storage.Graph.getEdgeIteratorState(int, int)));\n    boolean boolean = com.graphhopper.util.CHEdgeIteratorState == null;\n    if (boolean)\n        com.graphhopper.util.CHEdgeIteratorState = ((com.graphhopper.util.CHEdgeIteratorState)(com.graphhopper.storage.Graph.getEdgeIteratorState(int, int)));\n    \n    com.graphhopper.routing.ch.Path4CH.expandEdge(com.graphhopper.util.CHEdgeIteratorState, true);\n    if (boolean)\n        com.graphhopper.util.CHEdgeIteratorState = ((com.graphhopper.util.CHEdgeIteratorState)(com.graphhopper.storage.Graph.getEdgeIteratorState(int, int)));\n    else\n        com.graphhopper.util.CHEdgeIteratorState = ((com.graphhopper.util.CHEdgeIteratorState)(com.graphhopper.storage.Graph.getEdgeIteratorState(int, int)));\n    \n    com.graphhopper.routing.ch.Path4CH.expandEdge(com.graphhopper.util.CHEdgeIteratorState, false);\n}"},"status":-2},{"failures":[202,203,204,205,206,207],"tindex":"ce12dbfb-82b2-11e5-b73a-496adf16dba1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:295","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.routing.util.FlagEncoder com.graphhopper.routing.util.FlagEncoder : java.util.List<com.graphhopper.routing.util.FlagEncoder>) {\n    if ((com.graphhopper.routing.util.FlagEncoder.isBackward(com.graphhopper.util.EdgeIterator.getFlags())) || (com.graphhopper.routing.util.FlagEncoder.isForward(com.graphhopper.util.EdgeIterator.getFlags())))\n        return false;\n    \n}"},"variableMap":{"encoders":"encoders","iter":"iter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:292","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    for (com.graphhopper.routing.util.FlagEncoder com.graphhopper.routing.util.FlagEncoder : java.util.List<com.graphhopper.routing.util.FlagEncoder>) {\n        if ((com.graphhopper.routing.util.FlagEncoder.isBackward(com.graphhopper.util.EdgeIterator.getFlags())) || (com.graphhopper.routing.util.FlagEncoder.isForward(com.graphhopper.util.EdgeIterator.getFlags())))\n            return false;\n        \n    }\n}"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"ce128dd0-82b2-11e5-b73a-f5f071fc5108","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.LockFactory.forceRemove"]},"type":"staticDiff"},{"branches":{"com.graphhopper.GraphHopperAPITest.testLoad":["com.graphhopper.GraphHopper_void_close().c3","com.graphhopper.storage.NativeFSLockFactory_void_forceRemove(java.lang.String,boolean).b"],"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":["com.graphhopper.storage.NativeFSLockFactory_void_forceRemove(java.lang.String,boolean).t1","com.graphhopper.storage.NativeFSLockFactory_void_forceRemove(java.lang.String,boolean).e2","com.graphhopper.storage.NativeFSLockFactory$NativeLock_void_release().e1","com.graphhopper.storage.NativeFSLockFactory_void_forceRemove(java.lang.String,boolean).b"]},"type":"branch"}]},{"transformation":"ce12b4e5-82b2-11e5-b73a-1bbf65cfb248","diffs":[{"branches":{"com.graphhopper.storage.UnsafeDataAccessTest.testRenameFlush":["com.graphhopper.storage.AbstractDataAccess_boolean_isStoring().b"]},"type":"branch"}]},{"transformation":"ce128dd1-82b2-11e5-b73a-33a3d8ace294","diffs":[{"methodsDiff":{"delete":["java.lang.Math.min"]},"type":"staticDiff"},{"branches":{"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":["com.graphhopper.storage.index.LocationIndexTree_boolean_findNetworkEntries(double,double,gnu.trove.set.hash.TIntHashSet,int).t4","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":["com.graphhopper.storage.index.LocationIndexTree_boolean_findNetworkEntries(double,double,gnu.trove.set.hash.TIntHashSet,int).t4","com.graphhopper.storage.index.LocationIndexTree_boolean_findNetworkEntries(double,double,gnu.trove.set.hash.TIntHashSet,int).e4","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":["com.graphhopper.storage.index.LocationIndexTree_boolean_findNetworkEntries(double,double,gnu.trove.set.hash.TIntHashSet,int).t4","com.graphhopper.storage.index.LocationIndexTree_boolean_findNetworkEntries(double,double,gnu.trove.set.hash.TIntHashSet,int).e4","com.graphhopper.storage.index.LocationIndexTree_void_fillIDs(long,int,gnu.trove.set.hash.TIntHashSet,int).e3","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":["com.graphhopper.storage.index.LocationIndexTree_boolean_findNetworkEntries(double,double,gnu.trove.set.hash.TIntHashSet,int).t4","com.graphhopper.storage.index.LocationIndexTree_boolean_findNetworkEntries(double,double,gnu.trove.set.hash.TIntHashSet,int).e4","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"]},"type":"branch"}]},{"transformation":"ce12b4e8-82b2-11e5-b73a-499ca61c418d","diffs":[{"methodsDiff":{"delete":["java.util.Arrays.fill"]},"type":"staticDiff"}]}]}
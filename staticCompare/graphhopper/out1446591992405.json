{"failureDictionary":{"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":86,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":56,"com.graphhopper.reader.OSMReaderTest.testFerry":57,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":105,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":47,"com.graphhopper.storage.GraphHopperStorageCHTest.testDoThrowExceptionIfDimDoesNotMatch":78,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":48,"com.graphhopper.routing.QueryGraphTest.testOneWay":89,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":30,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":70,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":111,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeightMMap":120,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":13,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":43,"com.graphhopper.reader.OSMReaderTest.testWithBounds":66,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":49,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":34,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":87,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":22,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeight":121,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":55,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":85,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":101,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":68,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":29,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":102,"com.graphhopper.GraphHopperTest.testPrepare":5,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":1,"com.graphhopper.reader.OSMReaderTest.testFoot":58,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":95,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":88,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":108,"com.graphhopper.reader.dem.HeightTileTest.testGetHeight":119,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":14,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":15,"com.graphhopper.reader.OSMReaderTest.testOneWay":25,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":41,"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":80,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":116,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":46,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":45,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":72,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":12,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":35,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":100,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":109,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":60,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":24,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":61,"com.graphhopper.GraphHopperTest.testNoNPE_ifLoadNotSuccessful":74,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":36,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":6,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":97,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":103,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":53,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":52,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":104,"com.graphhopper.GraphHopperTest.testLoadOSM":9,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":90,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":39,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":93,"com.graphhopper.reader.OSMReaderTest.testSort":3,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":38,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":92,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":91,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":23,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":65,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":113,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":83,"com.graphhopper.reader.OSMReaderTest.testMain":2,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":79,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":99,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":18,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testSetSpeed0_issue367":0,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":19,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":50,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":32,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":76,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":31,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":106,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":115,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":28,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":62,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":107,"com.graphhopper.reader.dem.HeightTileTest.testGetHeightForNegativeTile":117,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":54,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":110,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":67,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":27,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":98,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":75,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":81,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":42,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":112,"com.graphhopper.GraphHopperTest.testFootAndCar":7,"com.graphhopper.GraphHopperTest.testFailsForMissingParameters":71,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":77,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":51,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":17,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":37,"com.graphhopper.GraphHopperTest.testPrepareOnly":69,"com.graphhopper.coll.CompressedArrayTest.testCompress2":94,"com.graphhopper.GraphHopperTest.testVia":4,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":10,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":33,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":84,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":44,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":64,"com.graphhopper.reader.dem.HeightTileTest.testCalcMean":118,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":8,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":16,"com.graphhopper.GraphHopperTest.testFootOnly":11,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":114,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":21,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":63,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":40,"com.graphhopper.reader.OSMReaderTest.testBarriers":59,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":73,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":96,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":26,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":82},"transformations":[{"failures":[],"tindex":"85f1c596-827f-11e5-90e5-e9a29eb56226","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.InstructionAnnotation:43","type":"CtAssignmentImpl","sourcecode":"this.boolean = false"},"variableMap":{"empty":"reverseOrder"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:132","type":"CtAssignmentImpl","sourcecode":"boolean = false"},"status":0},{"failures":[],"tindex":"85f1eca7-827f-11e5-90e5-8dc3c70156f5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:172","type":"CtLocalVariableImpl","sourcecode":"long long = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:42","type":"CtLocalVariableImpl","sourcecode":"long long = 0"},"status":-2},{"failures":[],"tindex":"85f1eca8-827f-11e5-90e5-31317b98592b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:231","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.AbstractDataAccess.isClosed())\n    throw new java.lang.IllegalStateException(\"already closed\");\n"},"variableMap":{"this":"turnCosts"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.TurnCostExtension:92","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.flush()"},"status":-2},{"failures":[0],"tindex":"85f213b9-827f-11e5-90e5-435831d4c727","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMTurnRelation:158","type":"CtReturnImpl","sourcecode":"return (((long)(int)) << 32) | ((long)(int))"},"variableMap":{"edgeTo":"com.graphhopper.routing.util.AbstractFlagEncoder.K_FORWARD","edgeFrom":"com.graphhopper.routing.util.AbstractFlagEncoder.K_FORWARD"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:263","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.AbstractFlagEncoder.setBool(com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(long, 0), com.graphhopper.routing.util.AbstractFlagEncoder.int, false)"},"status":-1},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"tindex":"85f213ba-827f-11e5-90e5-b7dd430eadb4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Instruction:192","type":"CtReturnImpl","sourcecode":"return long + (this.long)"},"variableMap":{"time":"key"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:626","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.BitUtil.com.graphhopper.util.BitUtil.reverse(long, com.graphhopper.geohash.SpatialKeyAlgo.getBits())"},"status":-1},{"failures":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"tindex":"85f213bb-827f-11e5-90e5-9148592280d8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:220","type":"CtLocalVariableImpl","sourcecode":"int int = (int) * (int)"},"variableMap":{"latSize":"nodeB","lonSize":"nodeB"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:745","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.coll.SparseIntIntArray.get(int)"},"status":-1},{"failures":[],"tindex":"85f23acc-827f-11e5-90e5-2959167fc0bc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.EdgeWrapper:54","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[54,55],"tindex":"85f23acd-827f-11e5-90e5-dff59ae3ce9f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:55","type":"CtLocalVariableImpl","sourcecode":"double double = double / (java.lang.Math.abs((double - double)))"},"variableMap":{"gridCellWidth":"queryLon","x1":"lon","x2":"lat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:769","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.DistanceCalc.calcDist(double, double, double, double)"},"status":-1},{"failures":[56],"tindex":"85f23ace-827f-11e5-90e5-4978bd93bd53","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:280","type":"CtAssignmentImpl","sourcecode":"double = 1 + ((60 - double) / (int))"},"variableMap":{"degree":"index","lat":"lon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:96","type":"CtAssignmentImpl","sourcecode":"double[][int] = double"},"status":-1},{"failures":[],"tindex":"85f23acf-827f-11e5-90e5-fb7c63a2ade0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:108","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    if (!com.graphhopper.routing.AbstractRoutingAlgorithm.(accept(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge.int)))\n        continue;\n    \n    int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n    int int = com.graphhopper.routing.util.TraversalMode.createTraversalId(com.graphhopper.util.EdgeIterator, false);\n    float float = ((float)((com.graphhopper.routing.util.Weighting.calcWeight(com.graphhopper.util.EdgeIterator, false, com.graphhopper.routing.AStar.AStarEdge.int)) + (com.graphhopper.routing.AStar.AStarEdge.double)));\n    if (java.lang.Double.isInfinite(float))\n        continue;\n    \n    com.graphhopper.routing.AStar.AStarEdge com.graphhopper.routing.AStar.AStarEdge = gnu.trove.map.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.get(int);\n    if ((com.graphhopper.routing.AStar.AStarEdge == null) || ((com.graphhopper.routing.AStar.AStarEdge.double) > float)) {\n        double = com.graphhopper.routing.util.WeightApproximator.approximate(int);\n        double = float + double;\n        if (com.graphhopper.routing.AStar.AStarEdge == null) {\n            com.graphhopper.routing.AStar.AStarEdge = new com.graphhopper.routing.AStar.AStarEdge(com.graphhopper.util.EdgeIterator.getEdge() , int , double , float);\n            gnu.trove.map.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.put(int, com.graphhopper.routing.AStar.AStarEdge);\n        } else {\n            assert (com.graphhopper.routing.AStar.AStarEdge.double) > double : \"Inconsistent distance estimate\";\n            java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.remove(com.graphhopper.routing.AStar.AStarEdge);\n            com.graphhopper.routing.AStar.AStarEdge.int = com.graphhopper.util.EdgeIterator.getEdge();\n            com.graphhopper.routing.AStar.AStarEdge.double = double;\n            com.graphhopper.routing.AStar.AStarEdge.double = float;\n        }\n        com.graphhopper.routing.AStar.AStarEdge.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge;\n        java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.add(com.graphhopper.routing.AStar.AStarEdge);\n        com.graphhopper.routing.AbstractRoutingAlgorithm.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge, int);\n    } \n}"},"status":-1},{"failures":[57,58,2,3,59,60,61,62,63,64,65,66,67,25,68,69,70,4,5,6,7,8,9,71,72,10,11,73,74,75,76,77,78,79,80,81,82,83,84],"tindex":"85f261e0-827f-11e5-90e5-ef80cfb2f789","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:770","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.storage.GraphHopperStorage.loadExisting()))\n    return false;\n"},"variableMap":{"ghStorage":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:246","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.StorableProperties.loadExisting()) {\n    com.graphhopper.storage.StorableProperties.checkVersions(false);\n    java.lang.String java.lang.String = com.graphhopper.storage.StorableProperties.get(\"graph.flagEncoders\");\n    if ((com.graphhopper.routing.util.EncodingManager) == null) {\n        if (java.lang.String.isEmpty())\n            throw new java.lang.IllegalStateException((\"No EncodingManager was configured. And no one was found in the graph: \" + (com.graphhopper.storage.Directory.getLocation())));\n        \n        int int = 4;\n        if (\"8\".equals(com.graphhopper.storage.StorableProperties.get(\"graph.bytesForFlags\")))\n            int = 8;\n        \n        com.graphhopper.routing.util.EncodingManager = new com.graphhopper.routing.util.EncodingManager(java.lang.String , int);\n    } else if ((!(java.lang.String.isEmpty())) && (!(com.graphhopper.routing.util.EncodingManager.toDetailsString().equalsIgnoreCase(java.lang.String)))) {\n        throw new java.lang.IllegalStateException((((((\"Encoding does not match:\\nGraphhopper config: \" + (com.graphhopper.routing.util.EncodingManager.toDetailsString())) + \"\\nGraph: \") + java.lang.String) + \", dir:\") + (com.graphhopper.storage.Directory.getLocation())));\n    } \n    java.lang.String java.lang.String = com.graphhopper.storage.StorableProperties.get(\"graph.byteOrder\");\n    if (!(java.lang.String.equalsIgnoreCase((\"\" + (com.graphhopper.storage.Directory.getByteOrder())))))\n        throw new java.lang.IllegalStateException(((((\"Configured byteOrder (\" + java.lang.String) + \") is not equal to byteOrder of loaded graph (\") + (com.graphhopper.storage.Directory.getByteOrder())) + \")\"));\n    \n    java.lang.String java.lang.String = com.graphhopper.storage.StorableProperties.get(\"graph.dimension\");\n    com.graphhopper.storage.BaseGraph.loadExisting(java.lang.String);\n    java.lang.String java.lang.String = com.graphhopper.storage.StorableProperties.get(\"graph.chWeightings\");\n    java.lang.String java.lang.String = com.graphhopper.storage.GraphHopperStorage.getCHWeightings().toString();\n    if (!(java.lang.String.equals(java.lang.String)))\n        throw new java.lang.IllegalStateException((((\"Configured graph.chWeightings: \" + java.lang.String) + \" is not equal to loaded \") + java.lang.String));\n    \n    for (com.graphhopper.storage.CHGraphImpl com.graphhopper.storage.CHGraphImpl : java.util.Collection<com.graphhopper.storage.CHGraphImpl>) {\n        if (!(com.graphhopper.storage.CHGraphImpl.loadExisting()))\n            throw new java.lang.IllegalStateException((\"Cannot load \" + com.graphhopper.storage.CHGraphImpl));\n        \n    }\n    return true;\n} "},"status":-1},{"failures":[85,86,87,88,89,90,91,92,93,4,5,6,7,8,9,10],"tindex":"85f288f1-827f-11e5-90e5-69eb9ae5c01d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.VirtualEdgeIteratorState:90","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.PointList.copy(0, ((com.graphhopper.util.PointList.getSize()) - 1))"},"variableMap":{"pointList":"clonePL"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:362","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.PointList"},"status":-1},{"failures":[94],"tindex":"85f288f2-827f-11e5-90e5-475afb1ee8a5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.CompressedArray:144","type":"CtAssignmentImpl","sourcecode":"int = 0"},"status":-1},{"failures":[],"tindex":"85f288f3-827f-11e5-90e5-3789487f1ee7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.MiniPerfTest:44","type":"CtLocalVariableImpl","sourcecode":"long long = java.lang.System.nanoTime()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:750","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.storage.EdgeAccess.toPointer(int)"},"status":-2},{"failures":[95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,1,114,115,116],"tindex":"85f288f4-827f-11e5-90e5-c74f5c60e8ae","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:233","type":"CtLocalVariableImpl","sourcecode":"int int = (int) / 2"},"variableMap":{"size":"shortcutCount"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:192","type":"CtLocalVariableImpl","sourcecode":"int int = int"},"status":-1},{"failures":[],"tindex":"85f2b005-827f-11e5-90e5-771c7d360fbd","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:224","type":"CtLocalVariableImpl","sourcecode":"long long = (1L << int) - 1"},"variableMap":{"shift":"E_LINKB"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:224","type":"CtLocalVariableImpl","sourcecode":"long long = (com.graphhopper.storage.DataAccess.getInt((long + (int)))) == int ? long + (int) : long + (int)"},"status":-2},{"failures":[],"tindex":"85f2b006-827f-11e5-90e5-47af79636800","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:926","type":"CtIfImpl","sourcecode":"if (int < 0)\n    throw new java.lang.IllegalStateException(\"Too many names are stored, currently limited to int pointer\");\n"},"variableMap":{"nameIndexRef":"edge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.PathBidirRef:82","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.Path.processEdge(com.graphhopper.storage.EdgeEntry.int, com.graphhopper.storage.EdgeEntry.int)"},"status":-2},{"failures":[61,117,118,119,120,121],"tindex":"85f2b007-827f-11e5-90e5-9bdc76fd9778","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:361","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.routing.util.BikeCommonFlagEncoder.int"},"variableMap":{"com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED":"width"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.HeightTile:92","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(((int) / (int)) * double))"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":18,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
{"failureDictionary":{"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":44,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":19,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":4,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidTunnel":59,"com.graphhopper.reader.OSMReaderTest.testFerry":109,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPreferenceForSlowSpeed":108,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":55,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testService":82,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTram":83,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":95,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":11,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidanceOfHighMaxSpeed":81,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":105,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":107,"com.graphhopper.reader.OSMReaderTest.testWithBounds":115,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":39,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":104,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":1,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":89,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":27,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":32,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":26,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":14,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":85,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTram":101,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":87,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":23,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":29,"com.graphhopper.GraphHopperTest.testPrepare":122,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPreferenceForSlowSpeed":76,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidTunnel":70,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":12,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":36,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":94,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":106,"com.graphhopper.routing.util.BikeFlagEncoderTest.testclassBicycle":54,"com.graphhopper.reader.OSMReaderTest.testFoot":110,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":18,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":20,"com.graphhopper.coll.IntIntBinHeapTest.test0":0,"com.graphhopper.util.InstructionListTest.testWayList":41,"com.graphhopper.reader.OSMReaderTest.testOneWay":117,"com.graphhopper.routing.util.BikeFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":52,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":53,"com.graphhopper.util.InstructionTest.testCalcAzimuthAndGetDirection":120,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":51,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":86,"com.graphhopper.GraphHopperAPITest.testDisconnected179":127,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":80,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":38,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":50,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPreferenceForSlowSpeed":65,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidMotorway":84,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidTunnel":102,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":45,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":46,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":56,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":92,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":57,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":123,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTram":58,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":34,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":33,"com.graphhopper.GraphHopperTest.testLoadOSM":49,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":5,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testclassBicycle":79,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":9,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":8,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":7,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":28,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":77,"com.graphhopper.reader.OSMReaderTest.testSort":112,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":6,"com.graphhopper.reader.OSMReaderTest.testMain":111,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":25,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":35,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTram":69,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":62,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":48,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":24,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":64,"com.graphhopper.routing.PathTest.testWayList":42,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":73,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":13,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":74,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":2,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":113,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":43,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":93,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":116,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":22,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":61,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidMotorway":103,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":96,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":31,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":75,"com.graphhopper.GraphHopperTest.testFootAndCar":10,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":37,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":99,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":100,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":21,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":67,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":68,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidMotorway":71,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidMotorway":60,"com.graphhopper.util.AngleCalcTest.checkAzimuthConsitency":118,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":98,"com.graphhopper.util.AngleCalcTest.testCalcAzimuth":119,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":17,"com.graphhopper.GraphHopperTest.testVia":121,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":15,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":63,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":125,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":66,"com.graphhopper.GraphHopperAPITest.testLoad":126,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":124,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":16,"com.graphhopper.GraphHopperTest.testFootOnly":47,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":3,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidTunnel":78,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":114,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":90,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testclassBicycle":97,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":91,"com.graphhopper.util.GHUtilityTest.testCopy":40,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":72,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":30,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPreferenceForSlowSpeed":88},"transformations":[{"failures":[0],"tindex":"fa28ffc4-829f-11e5-83e9-a946da89b54f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:229","type":"CtReturnImpl","sourcecode":"return 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntIntBinHeap:68","type":"CtIfImpl","sourcecode":"if ((int) > 0) {\n    return int[][1];\n} else {\n    throw new java.lang.IllegalStateException(\"An empty queue does not have a minimum key.\");\n}"},"status":-1},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"tindex":"fa2926d5-829f-11e5-83e9-eb0e608b9191","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.CompressedArray:106","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:194","type":"CtReturnImpl","sourcecode":"return new com.graphhopper.util.shapes.GHPoint(double , double)"},"status":-1},{"failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,14,43,44,18,20,45,46],"tindex":"fa2926d6-829f-11e5-83e9-a1f0c46efc2f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:898","type":"CtOperatorAssignmentImpl","sourcecode":"int += 4"},"status":-1},{"failures":[],"tindex":"fa2926d7-829f-11e5-83e9-ddb5ba717396","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:956","type":"CtOperatorAssignmentImpl","sourcecode":"int += int + 1"},"variableMap":{"arrayLength":"node","maxGeoRef":"node"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullIndex:96","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.routing.util.AllEdgesIterator.getAdjNode()"},"status":-2},{"failures":[42],"tindex":"fa2926d8-829f-11e5-83e9-d597cc548c3a","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:65","type":"CtAssignmentImpl","sourcecode":"int = 4"},"variableMap":{"initLeafSize":"counter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:105","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[],"tindex":"fa2926d9-829f-11e5-83e9-9920bcaad183","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:238","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.MMapDataAccess.initRandomAccessFile()"},"variableMap":{"this":"da"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:110","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.DAType.isInteg()) {\n    if (com.graphhopper.storage.DAType.isStoring())\n        com.graphhopper.storage.DataAccess = new com.graphhopper.storage.RAMIntDataAccess(java.lang.String , java.lang.String , true , java.nio.ByteOrder);\n    else\n        com.graphhopper.storage.DataAccess = new com.graphhopper.storage.RAMIntDataAccess(java.lang.String , java.lang.String , false , java.nio.ByteOrder);\n    \n} else {\n    if (com.graphhopper.storage.DAType.isStoring())\n        com.graphhopper.storage.DataAccess = new com.graphhopper.storage.RAMDataAccess(java.lang.String , java.lang.String , true , java.nio.ByteOrder);\n    else\n        com.graphhopper.storage.DataAccess = new com.graphhopper.storage.RAMDataAccess(java.lang.String , java.lang.String , false , java.nio.ByteOrder);\n    \n}"},"status":-2},{"failures":[47],"tindex":"fa294dea-829f-11e5-83e9-5109a4772e21","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:73","type":"CtOperatorAssignmentImpl","sourcecode":"double += double"},"variableMap":{"deltaX":"lon","maxX":"prevLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:775","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-1},{"failures":[48,49],"tindex":"fa294deb-829f-11e5-83e9-0931bfe287a6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:310","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.storage.CHGraphImpl com.graphhopper.storage.CHGraphImpl : java.util.Collection<com.graphhopper.storage.CHGraphImpl>) {\n    com.graphhopper.storage.CHGraphImpl.close();\n}"},"variableMap":{"chGraphs":"chGraphs"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:280","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.storage.CHGraphImpl com.graphhopper.storage.CHGraphImpl : java.util.Collection<com.graphhopper.storage.CHGraphImpl>) {\n    if (!(com.graphhopper.storage.CHGraphImpl.loadExisting()))\n        throw new java.lang.IllegalStateException((\"Cannot load \" + com.graphhopper.storage.CHGraphImpl));\n    \n}"},"status":-1},{"failures":[],"tindex":"fa294dec-829f-11e5-83e9-6d70ded82e3b","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:103","type":"CtLocalVariableImpl","sourcecode":"long long"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:173","type":"CtLocalVariableImpl","sourcecode":"long long = 1"},"status":-2},{"failures":[50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,45,46,113,114,115,116,117],"tindex":"fa294ded-829f-11e5-83e9-bf9fe04e95f9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:193","type":"CtIfImpl","sourcecode":"if (int == int)\n    throw new java.lang.IllegalStateException(\"something went wrong: next entry would be the same\");\n"},"variableMap":{"turnCostIndex":"priorityFromRelation","nextTurnCostIndex":"priorityFromRelation"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:474","type":"CtIfImpl","sourcecode":"if (int == 0)\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(0.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\nelse\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(110.0, int);\n"},"status":-1},{"failures":[],"tindex":"fa294dee-829f-11e5-83e9-b13f873af50c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1121","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.GraphHopperStorage.getProperties()"},"status":0},{"failures":[],"tindex":"fa294def-829f-11e5-83e9-799306174fa2","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.QueryGraph:614","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.util.EdgeIteratorState com.graphhopper.util.EdgeIteratorState = java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.get(((int * 4) + (com.graphhopper.routing.QueryGraph.int)))"},"variableMap":{"com.graphhopper.routing.QueryGraph.VE_BASE_REV":"virtNode","virtualEdges":"virtualEdges","i":"virtNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:683","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.util.EdgeIteratorState com.graphhopper.util.EdgeIteratorState = boolean ? java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.get(((int * 4) + (com.graphhopper.routing.QueryGraph.int))) : java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.get(((int * 4) + (com.graphhopper.routing.QueryGraph.int)))"},"status":-2},{"failures":[],"tindex":"fa297500-829f-11e5-83e9-935663eab375","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:186","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(2000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:204","type":"CtIfImpl","sourcecode":"if (null != com.graphhopper.util.Instruction)\n    com.graphhopper.util.InstructionList.createRteptBlock(java.lang.StringBuilder, com.graphhopper.util.Instruction, com.graphhopper.util.Instruction);\n"},"status":-2},{"failures":[118,119,120],"tindex":"fa297501-829f-11e5-83e9-8bbc2933fea1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:103","type":"CtAssignmentImpl","sourcecode":"double = double - (2 * (java.lang.Math.double))"},"variableMap":{"resultOrientation":"orientation","orientation":"orientation","java.lang.Math.PI":"orientation"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:119","type":"CtOperatorAssignmentImpl","sourcecode":"double += 2 * (java.lang.Math.double)"},"status":-1},{"failures":[121,122,123,10,124,49,125,47,126,127],"tindex":"fa297502-829f-11e5-83e9-3dda294967ba","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:225","type":"CtIfImpl","sourcecode":"if (long <= 0) {\n    throw new java.lang.IllegalStateException((\"invalid bitmask:\" + long));\n} "},"variableMap":{"bm":"fullTimeInMillis"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:49","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (java.util.List<com.graphhopper.routing.Path>.size()) ; int++) {\n    com.graphhopper.routing.Path com.graphhopper.routing.Path = java.util.List<com.graphhopper.routing.Path>.get(int);\n    long += com.graphhopper.routing.Path.getTime();\n    double += com.graphhopper.routing.Path.getDistance();\n    double += com.graphhopper.routing.Path.getWeight();\n    if (boolean) {\n        com.graphhopper.util.InstructionList com.graphhopper.util.InstructionList = com.graphhopper.routing.Path.calcInstructions(com.graphhopper.util.Translation);\n        if (!(com.graphhopper.util.InstructionList.isEmpty())) {\n            if (com.graphhopper.util.PointList.isEmpty()) {\n                com.graphhopper.util.PointList com.graphhopper.util.PointList = com.graphhopper.util.InstructionList.get(0).getPoints();\n                com.graphhopper.util.PointList = new com.graphhopper.util.PointList(((com.graphhopper.util.InstructionList.size()) * (java.lang.Math.min(10, com.graphhopper.util.PointList.size()))) , com.graphhopper.util.PointList.is3D());\n            } \n            for (com.graphhopper.util.Instruction com.graphhopper.util.Instruction : com.graphhopper.util.InstructionList) {\n                if (boolean) {\n                    int += com.graphhopper.util.Instruction.getPoints().size();\n                    com.graphhopper.util.DouglasPeucker.simplify(com.graphhopper.util.Instruction.getPoints());\n                } \n                com.graphhopper.util.InstructionList.add(com.graphhopper.util.Instruction);\n                com.graphhopper.util.PointList.add(com.graphhopper.util.Instruction.getPoints());\n            }\n            if ((int + 1) < (java.util.List<com.graphhopper.routing.Path>.size())) {\n                com.graphhopper.util.ViaInstruction com.graphhopper.util.ViaInstruction = new com.graphhopper.util.ViaInstruction(com.graphhopper.util.InstructionList.get(((com.graphhopper.util.InstructionList.size()) - 1)));\n                com.graphhopper.util.ViaInstruction.setViaCount((int + 1));\n                com.graphhopper.util.InstructionList.replaceLast(com.graphhopper.util.ViaInstruction);\n            } \n        } \n    } else if (boolean) {\n        com.graphhopper.util.PointList com.graphhopper.util.PointList = com.graphhopper.routing.Path.calcPoints();\n        if (com.graphhopper.util.PointList.isEmpty())\n            com.graphhopper.util.PointList = new com.graphhopper.util.PointList(com.graphhopper.util.PointList.size() , com.graphhopper.util.PointList.is3D());\n        \n        if (boolean) {\n            int = com.graphhopper.util.PointList.getSize();\n            com.graphhopper.util.DouglasPeucker.simplify(com.graphhopper.util.PointList);\n        } \n        com.graphhopper.util.PointList.add(com.graphhopper.util.PointList);\n    } \n    boolean = boolean && (com.graphhopper.routing.Path.isFound());\n}"},"status":-1},{"failures":[],"tindex":"fa299c13-829f-11e5-83e9-1b2b478f4ce7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AbstractRoutingAlgorithm:76","type":"CtReturnImpl","sourcecode":"return false"},"status":0},{"failures":[],"tindex":"fa299c14-829f-11e5-83e9-25297c6c182a","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:214","type":"CtReturnImpl","sourcecode":"return 5"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TraversalMode:93","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.EdgeIteratorState.getAdjNode()"},"status":-2},{"failures":[],"tindex":"fa299c15-829f-11e5-83e9-dd2d8dc0720f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:124","type":"CtIfImpl","sourcecode":"if (long == long)\n    return long;\nelse\n    return ~long;\n"},"variableMap":{"high":"edgePointer","highKey":"edgePointer","key":"edgePointer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:162","type":"CtReturnImpl","sourcecode":"return int <= int ? long + (int) : long + (int)"},"status":-2},{"failures":[],"tindex":"fa299c16-829f-11e5-83e9-f9e18012c6ff","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:432","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += \"\\n\""},"variableMap":{"str":"debug"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1050","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += (\", algoInit:\" + (com.graphhopper.util.StopWatch.stop().getSeconds())) + \"s\""},"status":0},{"failures":[],"tindex":"fa299c17-829f-11e5-83e9-a7c1c35e3cbc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:577","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.CHGraphImpl.this.getWeight(this)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:441","type":"CtReturnImpl","sourcecode":"return int * 1.852"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"fa294dee-829f-11e5-83e9-b13f873af50c","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.GraphHopperStorage.getProperties"]},"type":"staticDiff"}]},{"transformation":"fa299c13-829f-11e5-83e9-1b2b478f4ce7","diffs":[{"branches":{"com.graphhopper.GraphHopperAPITest.testDisconnected179":["com.graphhopper.routing.DijkstraBidirectionRef_void_fillEdges(com.graphhopper.storage.EdgeEntry,java.util.PriorityQueue,gnu.trove.map.TIntObjectMap,com.graphhopper.util.EdgeExplorer,boolean).t1","com.graphhopper.routing.DijkstraBidirectionRef_void_fillEdges(com.graphhopper.storage.EdgeEntry,java.util.PriorityQueue,gnu.trove.map.TIntObjectMap,com.graphhopper.util.EdgeExplorer,boolean).e3","com.graphhopper.routing.DijkstraBidirectionRef_void_fillEdges(com.graphhopper.storage.EdgeEntry,java.util.PriorityQueue,gnu.trove.map.TIntObjectMap,com.graphhopper.util.EdgeExplorer,boolean).e4"],"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":["com.graphhopper.routing.Dijkstra_void_runAlgo().t2"],"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":["com.graphhopper.routing.Dijkstra_void_runAlgo().t2"],"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":["com.graphhopper.routing.Dijkstra_void_runAlgo().e4","com.graphhopper.routing.Dijkstra_void_runAlgo().t2","com.graphhopper.routing.Dijkstra_void_runAlgo().e5"],"com.graphhopper.GraphHopperTest.testFootAndCar":["com.graphhopper.routing.DijkstraBidirectionRef_void_fillEdges(com.graphhopper.storage.EdgeEntry,java.util.PriorityQueue,gnu.trove.map.TIntObjectMap,com.graphhopper.util.EdgeExplorer,boolean).t1"]},"type":"branch"}]},{"transformation":"fa299c16-829f-11e5-83e9-f9e18012c6ff","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.StopWatch.stop","com.graphhopper.util.StopWatch.getSeconds"]},"type":"staticDiff"}]}]}
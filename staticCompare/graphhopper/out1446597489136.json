{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":63,"com.graphhopper.routing.util.EncodedDoubleValueTest.testMaxValueAndSwap":11,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidTunnel":3,"com.graphhopper.routing.PathTest.testFindInstruction":83,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":59,"com.graphhopper.reader.OSMReaderTest.testFerry":21,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":49,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":51,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidanceOfHighMaxSpeed":4,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":89,"com.graphhopper.reader.OSMReaderTest.testWithBounds":32,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":50,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":44,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":62,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":61,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":71,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":15,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":77,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":95,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":68,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":52,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidTunnel":1,"com.graphhopper.reader.OSMReaderTest.testFoot":22,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":64,"com.graphhopper.reader.OSMReaderTest.testOneWay":34,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":73,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":39,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":75,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":42,"com.graphhopper.coll.IntIntBinHeapTest.testBasic":7,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":41,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":56,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed0_issue367":14,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":90,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":98,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidTunnel":2,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":38,"com.graphhopper.coll.IntIntBinHeapTest.testSpreading":10,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":36,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":26,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":27,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":87,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":93,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":16,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":100,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":57,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":55,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":54,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":66,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnsureSize":72,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":40,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":58,"com.graphhopper.reader.OSMReaderTest.testSort":24,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":65,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":31,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":86,"com.graphhopper.reader.OSMReaderTest.testMain":23,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":43,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":81,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testSetSpeed0_issue367":13,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":91,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":79,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":78,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":35,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":101,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":92,"com.graphhopper.util.BitUtilBigTest.testFromBitString":6,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":85,"com.graphhopper.coll.IntIntBinHeapTest.testRekey":8,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeReturn":80,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":28,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":69,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":46,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":53,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":33,"com.graphhopper.storage.GraphHopperStorageCHTest.testPrios":70,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":76,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":45,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":67,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":82,"com.graphhopper.GraphHopperTest.testFootAndCar":17,"com.graphhopper.util.BitUtilBigTest.testToBitString":5,"com.graphhopper.coll.IntIntBinHeapTest.testSize":9,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":102,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":94,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":0,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":19,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":47,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":60,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":30,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSetSpeed0_issue367":12,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":18,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":88,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":96,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":29,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":99,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":37,"com.graphhopper.reader.OSMReaderTest.testBarriers":25,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":48,"com.graphhopper.util.InstructionListTest.testFind":84,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":97,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":20,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":74},"transformations":[{"failures":[0],"tindex":"523eaf1a-828c-11e5-86a3-ffc0887ba9ac","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:349","type":"CtIfImpl","sourcecode":"if (long == 0)\n    return ;\n"},"variableMap":{"includeWay":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:159","type":"CtIfImpl","sourcecode":"if (((com.graphhopper.reader.OSMWay.hasTag(\"tunnel\", \"yes\")) || (com.graphhopper.reader.OSMWay.hasTag(\"bridge\", \"yes\"))) || (com.graphhopper.reader.OSMWay.hasTag(\"highway\", \"steps\"))) {\n} else {\n    double double = 0;\n    double double = 0;\n    double double = 0;\n    double double = 0;\n    double double = com.graphhopper.util.PointList.getElevation(0);\n    double double = com.graphhopper.util.EdgeIteratorState.getDistance();\n    if (java.lang.Double.isInfinite(double)) {\n        java.lang.System.java.io.PrintStream.println((\"infinity distance? for way:\" + (com.graphhopper.reader.OSMWay.getId())));\n        return ;\n    } \n    if (double < 1)\n        return ;\n    \n    double double = (com.graphhopper.util.PointList.getElevation(((com.graphhopper.util.PointList.size()) - 1))) - double;\n    if (double > 0.1) {\n        double = double;\n        double = double;\n    } else if (double < (-0.1)) {\n        double = -double;\n        double = double;\n    } \n    double double = double > 1 ? double / double : 0;\n    double double = double > 1 ? double / double : 0;\n    double double = (double - double) - double;\n    double double = com.graphhopper.routing.util.BikeCommonFlagEncoder.getHighwaySpeed(\"cycleway\");\n    if (com.graphhopper.routing.util.AbstractFlagEncoder.isForward(long)) {\n        double double = com.graphhopper.routing.util.AbstractFlagEncoder.getSpeed(long);\n        double double = 1 + (2 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double double = 1 - (5 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double = (double * (((double * double) + (double * double)) + (1 * double))) / double;\n        long = com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(long, com.graphhopper.util.Helper.com.graphhopper.util.Helper.keepIn(double, ((com.graphhopper.routing.util.BikeCommonFlagEncoder.int) / 2), double));\n    } \n    if (com.graphhopper.routing.util.AbstractFlagEncoder.isBackward(long)) {\n        double double = com.graphhopper.routing.util.Bike2WeightFlagEncoder.getReverseSpeed(long);\n        double double = 1 + (2 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double double = 1 - (5 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double = (double * (((double * double) + (double * double)) + (1 * double))) / double;\n        long = com.graphhopper.routing.util.Bike2WeightFlagEncoder.setReverseSpeed(long, com.graphhopper.util.Helper.com.graphhopper.util.Helper.keepIn(double, ((com.graphhopper.routing.util.BikeCommonFlagEncoder.int) / 2), double));\n    } \n}"},"status":-1},{"failures":[],"tindex":"523efd3b-828c-11e5-86a3-53e2034c91a8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:306","type":"CtIfImpl","sourcecode":"if (long < 0) {\n    com.graphhopper.reader.OSMReader.org.slf4j.Logger.info((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \", now parsing relations\"));\n    long = long;\n} "},"status":0},{"failures":[1,2,3,4],"tindex":"523efd3c-828c-11e5-86a3-6d9b2c1e9bd2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:546","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"tunnel\", java.util.Set<java.lang.String>))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(50.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"status":-1},{"failures":[],"tindex":"523efd3d-828c-11e5-86a3-47aa62107ea3","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper:176","type":"CtLocalVariableImpl","sourcecode":"int int = 1024 * 8"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHLongIntBTree:474","type":"CtLocalVariableImpl","sourcecode":"int int"},"status":-2},{"failures":[5,6],"tindex":"523efd3e-828c-11e5-86a3-895e2555e023","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilBig:122","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('0')"},"status":-1},{"failures":[],"tindex":"523efd3f-828c-11e5-86a3-db280c6cc1b1","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistanceCalc2D:58","type":"CtReturnImpl","sourcecode":"return (double * double) + (double * double)"},"variableMap":{"dX":"java.lang.Double.POSITIVE_INFINITY","dY":"java.lang.Double.POSITIVE_INFINITY"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:651","type":"CtReturnImpl","sourcecode":"return java.lang.Double.double"},"status":-2},{"failures":[7,8,9,10],"tindex":"523efd40-828c-11e5-86a3-b3e422762caf","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntIntBinHeap:80","type":"CtReturnImpl","sourcecode":"return com.graphhopper.coll.IntIntBinHeap.peek_element()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntIntBinHeap:97","type":"CtReturnImpl","sourcecode":"return com.graphhopper.coll.IntIntBinHeap.poll_element()"},"status":-1},{"failures":[11,12,0,13,14],"tindex":"523f9881-828c-11e5-86a3-db0e0f060905","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:67","type":"CtOperatorAssignmentImpl","sourcecode":"long &= ~(long)"},"status":-1},{"failures":[],"tindex":"523f9882-828c-11e5-86a3-236393fc4b86","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:657","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:328","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = com.graphhopper.storage.DataAccess.ensureCapacity((((long)(int)) * (int)))"},"status":-2},{"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"tindex":"523f9883-828c-11e5-86a3-49ffa03c1a72","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:849","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.GraphHopperStorage = com.graphhopper.storage.GraphHopperStorage"},"variableMap":{"ghStorage":"ghStorage","newGraph":"ghStorage"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:753","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.GraphHopperStorage = new com.graphhopper.storage.GraphHopperStorage(com.graphhopper.storage.GHDirectory , com.graphhopper.routing.util.EncodingManager , com.graphhopper.GraphHopper.hasElevation() , com.graphhopper.storage.GraphExtension)"},"status":-1},{"failures":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"tindex":"523f9884-828c-11e5-86a3-11b27f7133f2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:254","type":"CtAssertImpl","sourcecode":"assert (int + 2) <= (int) : \"integer cannot be distributed over two segments\""},"variableMap":{"segmentSizeInBytes":"nodeEntryBytes","index":"nodeEntryBytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:332","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.initNodeRefs((long * (int)), long)"},"status":-1},{"failures":[83,84],"tindex":"523fbf95-828c-11e5-86a3-e74334487346","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:778","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.PointList.is3D())\n    com.graphhopper.util.PointList.add(double, double, double);\nelse\n    com.graphhopper.util.PointList.add(double, double);\n"},"variableMap":{"pillarNodes":"points","lon":"prevLon","lat":"lon","ele":"lat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:293","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.InstructionList.(getSize()) > 1) {\n    for (int int = 0 ; int < com.graphhopper.util.InstructionList.(getSize()) ; int++) {\n        com.graphhopper.util.PointList = com.graphhopper.util.InstructionList.get(int).getPoints();\n        for (int int = 0 ; int < (com.graphhopper.util.PointList.size()) ; int++) {\n            double double = com.graphhopper.util.PointList.getLatitude(int);\n            double double = com.graphhopper.util.PointList.getLongitude(int);\n            if (!((int == 0) && (int == 0))) {\n                double double;\n                int int = int;\n                if (com.graphhopper.util.DistanceCalc.validEdgeDistance(double, double, double, double, double, double)) {\n                    double = com.graphhopper.util.DistanceCalc.calcNormalizedEdgeDistance(double, double, double, double, double, double);\n                    if (int > 0)\n                        int++;\n                    \n                } else {\n                    double = com.graphhopper.util.DistanceCalc.calcNormalizedDist(double, double, double, double);\n                    if (int > 0)\n                        int++;\n                    \n                }\n                if (double < double) {\n                    double = double;\n                    int = int;\n                } \n            } \n            double = double;\n            double = double;\n        }\n    }\n} "},"status":-1},{"failures":[85,86,87,37,38,88,39,89,41,42,49,50,90,51,91,54,55,60,61,92,62,93,65,66,74,75,94,76,95,78,79],"tindex":"523fbf96-828c-11e5-86a3-d3a7c704131a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:722","type":"CtForImpl","sourcecode":"for (long long = 0 ; long < (int) ; long += 4) {\n    com.graphhopper.storage.DataAccess.setInt((long + long), com.graphhopper.storage.DataAccess.getInt((long + long)));\n}"},"status":-1},{"failures":[],"tindex":"523fbf97-828c-11e5-86a3-cde623821329","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:119","type":"CtReturnImpl","sourcecode":"return ~(long + long)"},"variableMap":{"len":"flags","start":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:113","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.BikeCommonFlagEncoder.setBool(com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(long, 0), com.graphhopper.routing.util.AbstractFlagEncoder.int, false)"},"status":-2},{"failures":[96,97],"tindex":"523fbf98-828c-11e5-86a3-1b30a5981457","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:1019","type":"CtAssignmentImpl","sourcecode":"int = (-int) - 1"},"variableMap":{"foundIndex":"minOnewayNetworkSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:65","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"status":-1},{"failures":[],"tindex":"523fbf99-828c-11e5-86a3-79b39f80c54a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.CmdArgs:60","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(2)"},"variableMap":{"systemProperty":"com.graphhopper.util.Constants.BUILD_DATE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Constants:116","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.Constants.java.lang.String = java.lang.String"},"status":-2},{"failures":[],"tindex":"523fbf9a-828c-11e5-86a3-3dd0b64bc6d6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalc3D:38","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Math.abs((double - double))"},"variableMap":{"fromHeight":"lat","toHeight":"lat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.QueryResult:178","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.storage.index.QueryResult.getQueryPoint().double"},"status":-2},{"failures":[98,99,100,101,102],"tindex":"523fbf9b-828c-11e5-86a3-9f0811a8010e","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:193","type":"CtIfImpl","sourcecode":"if (int == int)\n    throw new java.lang.IllegalStateException(\"something went wrong: next entry would be the same\");\n"},"variableMap":{"turnCostIndex":"from","nextTurnCostIndex":"to"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:255","type":"CtIfImpl","sourcecode":"if (((int + (int)) < int) && (!(com.graphhopper.coll.GHBitSet.contains((int + (int)))))) {\n    int = int;\n    int = int + (int);\n} "},"status":-1},{"failures":[],"tindex":"523fbf9c-828c-11e5-86a3-09974dd208cf","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:848","type":"CtReturnImpl","sourcecode":"return ((int)(int))"},"variableMap":{"tmpNode":"capacity"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:235","type":"CtReturnImpl","sourcecode":"return int"},"status":0}],"header":{"groupId":"com.graphhopper","transformationCount":19,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"523efd3b-828c-11e5-86a3-53e2034c91a8","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.Helper.nf","org.slf4j.Logger.info"]},"branchesDiff":{"delete":["t0"]},"type":"staticDiff"}]}]}
{"failureDictionary":{"com.graphhopper.routing.util.FootFlagEncoderTest.testPriority":1,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":22,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":60,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":35,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":38,"com.graphhopper.reader.OSMReaderTest.testMain":52,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":43,"com.graphhopper.reader.OSMReaderTest.testFerry":50,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":65,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":74,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":27,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":31,"com.graphhopper.routing.QueryGraphTest.testOneWay":34,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":79,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":47,"com.graphhopper.routing.PathTest.testWayList":25,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":15,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":67,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":16,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":76,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":19,"com.graphhopper.reader.OSMReaderTest.testWithBounds":61,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":57,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":29,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":21,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":23,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":62,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testNoErrorOnEdgeCase_lastIndex":75,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":26,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":45,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":17,"com.graphhopper.GraphHopperTest.testPrepare":8,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointCount":37,"com.graphhopper.util.DouglasPeuckerTest.testPathSimplify":39,"com.graphhopper.GraphHopperTest.testFootAndCar":10,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":18,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":73,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":41,"com.graphhopper.reader.OSMReaderTest.testFoot":51,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":64,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":32,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":33,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":36,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":68,"com.graphhopper.reader.OSMReaderTest.testOneWay":63,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":78,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":44,"com.graphhopper.GraphHopperAPITest.testDisconnected179":71,"com.graphhopper.util.PointListTest.testAddPL":40,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":72,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":48,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":30,"com.graphhopper.GraphHopperTest.testPrepareOnly":46,"com.graphhopper.GraphHopperTest.testVia":7,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":13,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":20,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":66,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":59,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":55,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":56,"com.graphhopper.GraphHopperAPITest.testLoad":70,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":11,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":24,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":28,"com.graphhopper.GraphHopperTest.testFootOnly":0,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":69,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":9,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":58,"com.graphhopper.reader.OSMReaderTest.testBarriers":54,"com.graphhopper.GraphHopperTest.testLoadOSM":12,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":2,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":49,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":77,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":14,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":6,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":5,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":4,"com.graphhopper.reader.OSMReaderTest.testSort":53,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":3,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":42},"transformations":[{"failures":[],"tindex":"bf728f80-8287-11e5-98ac-0927900ae175","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:262","type":"CtIfImpl","sourcecode":"if (int > (int))\n    throw new java.lang.IllegalArgumentException(\"new size needs be smaller than old size\");\n"},"variableMap":{"size":"high","newSize":"guess"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHLongIntBTree:475","type":"CtWhileImpl","sourcecode":"while ((int - int) > 1) {\n    int = (int + int) >>> 1;\n    long long = long[][int];\n    if (long < long) {\n        int = int;\n    } else {\n        int = int;\n    }\n}"},"status":-2},{"failures":[],"tindex":"bf72b691-8287-11e5-98ac-650d8a91599b","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:680","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Math.min(double, double)"},"variableMap":{"dMinLon":"deltaLon","dMinLat":"lon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:655","type":"CtLocalVariableImpl","sourcecode":"double double = (com.graphhopper.util.shapes.GHPoint.double) + ((0.5 + int) * (double))"},"status":-2},{"failures":[0,1],"tindex":"bf72dda2-8287-11e5-98ac-8db6a3dc9008","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:369","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"sidewalk\", \"no\"))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(45.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\nelse\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(45.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"status":-1},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"tindex":"bf72dda3-8287-11e5-98ac-d5c7b16dbe11","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:334","type":"CtReturnImpl","sourcecode":"return int"},"variableMap":{"noNumberValue":"current"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.VirtualEdgeIterator:72","type":"CtReturnImpl","sourcecode":"return java.util.List<com.graphhopper.util.EdgeIteratorState>.get(int).getEdge()"},"status":-1},{"failures":[],"tindex":"bf72dda4-8287-11e5-98ac-b11a7c0dbcb1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PMap:195","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PMap.getMap()"},"status":0},{"failures":[23,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,24,19,25,26,27,20,21,22,28,29,30,31,32,33,34,35,36,37,38,39,40],"tindex":"bf72dda5-8287-11e5-98ac-cde798588ce3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:112","type":"CtAssignmentImpl","sourcecode":"double[] = java.util.Arrays.copyOf(double[], int)"},"status":-1},{"failures":[41,42,43],"tindex":"bf7304b6-8287-11e5-98ac-6d8d0e6779a6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:597","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.setEdgesHeader()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:468","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.loadWayGeometryHeader()"},"status":-1},{"failures":[],"tindex":"bf7304b7-8287-11e5-98ac-274b37d0ecd5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1146","type":"CtInvocationImpl","sourcecode":"org.slf4j.Logger.info(((((((\"flushing graph \" + (com.graphhopper.storage.GraphHopperStorage.toString())) + \", details:\") + (com.graphhopper.storage.GraphHopperStorage.toDetailsString())) + \", \") + (com.graphhopper.util.Helper.getMemInfo())) + \")\"))"},"status":0},{"failures":[44,19],"tindex":"bf7304b8-8287-11e5-98ac-6d607a5aa3a8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:411","type":"CtOperatorAssignmentImpl","sourcecode":"double += com.graphhopper.util.PointList.com.graphhopper.util.DistanceCalc3D.calcDist(double, double, double, double[][int], double[][int], double[][int])"},"status":-1},{"failures":[],"tindex":"bf7304b9-8287-11e5-98ac-f78a36c1fc6b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:703","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":0},{"failures":[45,46,47,7,8,9,10,11,12,48,13,0,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"tindex":"bf732bca-8287-11e5-98ac-39474dd7361d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMInputFile:167","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.reader.OSMElement = com.graphhopper.reader.OSMInputFile.getNextPBF()"},"variableMap":{"item":"item","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMInputFile:169","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.reader.OSMElement = com.graphhopper.reader.OSMInputFile.getNextXML()"},"status":-1},{"failures":[],"tindex":"bf732bcb-8287-11e5-98ac-23916fe98c72","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.PathBidirRef:65","type":"CtIfImpl","sourcecode":"if (((com.graphhopper.storage.EdgeEntry) == null) || ((com.graphhopper.storage.EdgeEntry) == null))\n    return this;\n"},"variableMap":{"edgeTo":"parent","edgeEntry":"parent"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:97","type":"CtWhileImpl","sourcecode":"while (true) {\n    int int = com.graphhopper.routing.AStar.AStarEdge.int;\n    (int)++;\n    if (com.graphhopper.routing.AStar.isWeightLimitExceeded())\n        return com.graphhopper.routing.AbstractRoutingAlgorithm.createEmptyPath();\n    \n    if (com.graphhopper.routing.AStar.finished())\n        break;\n    \n    com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        if (!com.graphhopper.routing.AbstractRoutingAlgorithm.(accept(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge.int)))\n            continue;\n        \n        int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n        int int = com.graphhopper.routing.util.TraversalMode.createTraversalId(com.graphhopper.util.EdgeIterator, false);\n        float float = ((float)((com.graphhopper.routing.util.Weighting.calcWeight(com.graphhopper.util.EdgeIterator, false, com.graphhopper.routing.AStar.AStarEdge.int)) + (com.graphhopper.routing.AStar.AStarEdge.double)));\n        if (java.lang.Double.isInfinite(float))\n            continue;\n        \n        com.graphhopper.routing.AStar.AStarEdge com.graphhopper.routing.AStar.AStarEdge = gnu.trove.map.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.get(int);\n        if ((com.graphhopper.routing.AStar.AStarEdge == null) || ((com.graphhopper.routing.AStar.AStarEdge.double) > float)) {\n            double = com.graphhopper.routing.util.WeightApproximator.approximate(int);\n            double = float + double;\n            if (com.graphhopper.routing.AStar.AStarEdge == null) {\n                com.graphhopper.routing.AStar.AStarEdge = new com.graphhopper.routing.AStar.AStarEdge(com.graphhopper.util.EdgeIterator.getEdge() , int , double , float);\n                gnu.trove.map.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.put(int, com.graphhopper.routing.AStar.AStarEdge);\n            } else {\n                assert (com.graphhopper.routing.AStar.AStarEdge.double) > double : \"Inconsistent distance estimate\";\n                java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.remove(com.graphhopper.routing.AStar.AStarEdge);\n                com.graphhopper.routing.AStar.AStarEdge.int = com.graphhopper.util.EdgeIterator.getEdge();\n                com.graphhopper.routing.AStar.AStarEdge.double = double;\n                com.graphhopper.routing.AStar.AStarEdge.double = float;\n            }\n            com.graphhopper.routing.AStar.AStarEdge.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge;\n            java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.add(com.graphhopper.routing.AStar.AStarEdge);\n            com.graphhopper.routing.AbstractRoutingAlgorithm.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge, int);\n        } \n    }\n    if (java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.isEmpty())\n        return com.graphhopper.routing.AbstractRoutingAlgorithm.createEmptyPath();\n    \n    com.graphhopper.routing.AStar.AStarEdge = java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.poll();\n    if ((com.graphhopper.routing.AStar.AStarEdge) == null)\n        throw new java.lang.AssertionError(\"Empty edge cannot happen\");\n    \n}"},"status":-2},{"failures":[],"tindex":"bf7352dc-8287-11e5-98ac-6f8e3b022034","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:248","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.checkVersions(false)"},"status":0},{"failures":[],"tindex":"bf7352dd-8287-11e5-98ac-89436b14d291","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:749","type":"CtReturnImpl","sourcecode":"return true"},"status":0},{"failures":[],"tindex":"bf7352de-8287-11e5-98ac-3995872082b6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:873","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.reader.OSMNode = new com.graphhopper.reader.OSMNode(com.graphhopper.reader.OSMReader.createNewNodeId() , com.graphhopper.storage.NodeAccess , int)"},"status":-2},{"failures":[64,65,66,67,68,69,19],"tindex":"bf7352df-8287-11e5-98ac-c12e4bf74e39","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:236","type":"CtLocalVariableImpl","sourcecode":"int int = ((int) - int) - 1"},"variableMap":{"size":"from","i":"from"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:68","type":"CtLocalVariableImpl","sourcecode":"int int = int"},"status":-1},{"failures":[],"tindex":"bf7379f0-8287-11e5-98ac-9f02d2ca4665","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:313","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.StopWatch.start()"},"variableMap":{"lazySW":"sw2"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:155","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.StopWatch.stop()"},"status":0},{"failures":[70,71,72,73,74,75,76,77,78,79,45,46,7,8,9,10,11,12,48,13,0,49,50,51,52,53,54,55,57,58,59,60,61,62,63,18],"tindex":"bf7379f1-8287-11e5-98ac-670433f3d9cf","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:271","type":"CtAssignmentImpl","sourcecode":"int = int - (int)"},"variableMap":{"intVal":"tmpNo","degree":"tmpNo"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:155","type":"CtAssignmentImpl","sourcecode":"int = 64"},"status":-1},{"failures":[],"tindex":"bf7379f2-8287-11e5-98ac-5ddbfd807d8e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.AStarBidirection:220","type":"CtAssignmentImpl","sourcecode":"gnu.trove.map.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge> = gnu.trove.map.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>"},"variableMap":{"bestWeightMapTo":"fromMap","bestWeightMapOther":"fromMap"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:73","type":"CtAssignmentImpl","sourcecode":"gnu.trove.map.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge> = new gnu.trove.map.hash.TIntObjectHashMap<com.graphhopper.routing.AStar.AStarEdge>()"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":19,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"bf7379f0-8287-11e5-98ac-9f02d2ca4665","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.StopWatch.stop"]},"type":"staticDiff"}]},{"transformation":"bf7352dd-8287-11e5-98ac-89436b14d291","diffs":[{"branches":{"com.graphhopper.reader.OSMReaderTest.testBarriers":["com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.GraphHopperAPITest.testLoad":["com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":["com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":["com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":["com.graphhopper.storage.index.LocationIndexTree_void_fillIDs(long,int,gnu.trove.set.hash.TIntHashSet,int).e3","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":["com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"]},"type":"branch"}]},{"transformation":"bf7352dc-8287-11e5-98ac-6f8e3b022034","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.StorableProperties.checkVersions"]},"type":"staticDiff"},{"branches":{"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":["com.graphhopper.storage.StorableProperties_boolean_check(java.lang.String,int,boolean).b","com.graphhopper.storage.StorableProperties_boolean_checkVersions(boolean).e6","com.graphhopper.storage.StorableProperties_boolean_checkVersions(boolean).b","com.graphhopper.storage.StorableProperties_boolean_checkVersions(boolean).e2","com.graphhopper.storage.StorableProperties_boolean_checkVersions(boolean).e3","com.graphhopper.storage.StorableProperties_boolean_checkVersions(boolean).e4","com.graphhopper.storage.StorableProperties_boolean_checkVersions(boolean).e5","com.graphhopper.storage.StorableProperties_boolean_check(java.lang.String,int,boolean).e1","com.graphhopper.storage.StorableProperties_boolean_checkVersions(boolean).e1"],"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":["com.graphhopper.storage.StorableProperties_boolean_check(java.lang.String,int,boolean).b","com.graphhopper.storage.StorableProperties_boolean_checkVersions(boolean).e6","com.graphhopper.storage.StorableProperties_boolean_checkVersions(boolean).b","com.graphhopper.storage.StorableProperties_boolean_checkVersions(boolean).e2","com.graphhopper.storage.StorableProperties_boolean_checkVersions(boolean).e3","com.graphhopper.storage.StorableProperties_boolean_checkVersions(boolean).e4","com.graphhopper.storage.StorableProperties_boolean_checkVersions(boolean).e5","com.graphhopper.storage.StorableProperties_boolean_check(java.lang.String,int,boolean).e1","com.graphhopper.storage.StorableProperties_boolean_checkVersions(boolean).e1"],"com.graphhopper.storage.GraphHopperStorageCHTest.testDoThrowExceptionIfDimDoesNotMatch":["com.graphhopper.storage.StorableProperties_boolean_check(java.lang.String,int,boolean).b","com.graphhopper.storage.StorableProperties_boolean_checkVersions(boolean).e6","com.graphhopper.storage.StorableProperties_boolean_checkVersions(boolean).b","com.graphhopper.storage.StorableProperties_boolean_checkVersions(boolean).e2","com.graphhopper.storage.StorableProperties_boolean_checkVersions(boolean).e3","com.graphhopper.storage.StorableProperties_boolean_checkVersions(boolean).e4","com.graphhopper.storage.StorableProperties_boolean_checkVersions(boolean).e5","com.graphhopper.storage.StorableProperties_boolean_check(java.lang.String,int,boolean).e1","com.graphhopper.storage.StorableProperties_boolean_checkVersions(boolean).e1"]},"type":"branch"}]},{"transformation":"bf7304b7-8287-11e5-98ac-274b37d0ecd5","diffs":[{"branches":{"com.graphhopper.reader.OSMReaderTest.testNegativeIds":["com.graphhopper.storage.StorableProperties_java.lang.String_get(java.lang.String).e1"],"com.graphhopper.GraphHopperTest.testFootAndCar":["com.graphhopper.storage.StorableProperties_java.lang.String_get(java.lang.String).e1"]},"type":"branch"},{"methodsDiff":{"delete":["com.graphhopper.storage.GraphHopperStorage.toString","com.graphhopper.util.Helper.getMemInfo","com.graphhopper.storage.GraphHopperStorage.toDetailsString","org.slf4j.Logger.info"]},"type":"staticDiff"}]},{"transformation":"bf72dda4-8287-11e5-98ac-b11a7c0dbcb1","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.PMap.getMap"]},"type":"staticDiff"}]}]}
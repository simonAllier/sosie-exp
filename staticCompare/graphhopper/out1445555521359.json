{"failureDictionary":{"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":14,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":58,"com.graphhopper.reader.OSMReaderTest.testMain":6,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":47,"com.graphhopper.reader.OSMReaderTest.testFerry":4,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":39,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":70,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":71,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":56,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":26,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":0,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":75,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":66,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":54,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":78,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":1,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":43,"com.graphhopper.reader.OSMReaderTest.testWithBounds":15,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":11,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":60,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":42,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":64,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":16,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testNoErrorOnEdgeCase_lastIndex":76,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":46,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":62,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":77,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":18,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":2,"com.graphhopper.GraphHopperTest.testPrepare":28,"com.graphhopper.GraphHopperTest.testFootAndCar":30,"com.graphhopper.storage.GraphHopperStorageCHTest.testBounds":83,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":3,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":68,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":82,"com.graphhopper.reader.OSMReaderTest.testFoot":5,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":49,"com.graphhopper.storage.GraphStorageViaMMapTest.testBounds":79,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":53,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":50,"com.graphhopper.reader.OSMReaderTest.testOneWay":17,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":51,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":55,"com.graphhopper.GraphHopperAPITest.testDisconnected179":38,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":63,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":33,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBounds":81,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":41,"com.graphhopper.GraphHopperTest.testPrepareOnly":19,"com.graphhopper.GraphHopperTest.testVia":27,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":34,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":13,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":44,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":9,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":73,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":10,"com.graphhopper.GraphHopperAPITest.testLoad":37,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":31,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":72,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":61,"com.graphhopper.GraphHopperTest.testFootOnly":35,"com.graphhopper.storage.GraphHopperStorageTest.testBounds":40,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":29,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":67,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":12,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":69,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":25,"com.graphhopper.reader.OSMReaderTest.testBarriers":8,"com.graphhopper.GraphHopperTest.testLoadOSM":32,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":20,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":36,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":48,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":52,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":59,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":65,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":45,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":24,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":23,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":74,"com.graphhopper.reader.OSMReaderTest.testSort":7,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":22,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":21,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":57,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":80},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"tindex":"4d0da4dd-7912-11e5-bcc6-33b30f2c6821","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.shapes.BBox:104","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-1},{"failures":[],"tindex":"4d0da4de-7912-11e5-bcc6-f529f7711426","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:184","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"variableMap":{"shift":"offset"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilBig:76","type":"CtUnaryOperatorImpl","sourcecode":"++int"},"status":0},{"failures":[],"tindex":"4d0dcbef-7912-11e5-bcc6-ab21735bb462","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:97","type":"CtIfImpl","sourcecode":"if (int < 0)\n    int = 0;\n"},"variableMap":{"latSimilar":"to"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:110","type":"CtIfImpl","sourcecode":"if (((com.graphhopper.storage.EdgeEntry) != null) && ((com.graphhopper.storage.EdgeEntry.int) == int)) {\n    com.graphhopper.routing.PathBidirRef.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n    com.graphhopper.routing.PathBidirRef.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n    boolean = true;\n    boolean = true;\n} "},"status":-2},{"failures":[],"tindex":"4d0dcbf0-7912-11e5-bcc6-2bb12a798cb5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:153","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.storage.StorableProperties.(check(\"nodes\", com.graphhopper.util.Constants.int, boolean)))\n    return false;\n"},"status":-2},{"failures":[],"tindex":"4d0dcbf1-7912-11e5-bcc6-f1cdec7e85ee","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.ViaInstruction:33","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Instruction.setDistance(com.graphhopper.util.Instruction.getDistance())"},"variableMap":{"instr":"instr","this":"instr"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.ViaInstruction:34","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Instruction.setTime(com.graphhopper.util.Instruction.getTime())"},"status":-2},{"failures":[],"tindex":"4d0dcbf2-7912-11e5-bcc6-8fdd8990b717","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:295","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.routing.util.FlagEncoder com.graphhopper.routing.util.FlagEncoder : java.util.List<com.graphhopper.routing.util.FlagEncoder>) {\n    if ((com.graphhopper.routing.util.FlagEncoder.isBackward(com.graphhopper.util.EdgeIterator.getFlags())) || (com.graphhopper.routing.util.FlagEncoder.isForward(com.graphhopper.util.EdgeIterator.getFlags())))\n        return false;\n    \n}"},"status":-2},{"failures":[],"tindex":"4d0dcbf3-7912-11e5-bcc6-47546243b82e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:326","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-2},{"failures":[],"tindex":"4d0dcbf4-7912-11e5-bcc6-abb4da2591dd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:198","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GraphHopper.setSimplifyResponse(true)"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:628","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GraphHopper.setGraphHopperLocation(java.lang.String)"},"status":-2},{"failures":[],"tindex":"4d0df305-7912-11e5-bcc6-bb72b4056b18","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:489","type":"CtIfImpl","sourcecode":"if (int == (int + int)) {\n    return ~(int + int);\n} "},"variableMap":{"high":"nodeThis","len":"E_NODEB","start":"nodeA"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:153","type":"CtIfImpl","sourcecode":"if (int == int)\n    return com.graphhopper.storage.DataAccess.getInt((long + (int)));\n"},"status":-2},{"failures":[],"tindex":"4d0df306-7912-11e5-bcc6-23ee526a11a8","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:434","type":"CtInvocationImpl","sourcecode":"java.io.RandomAccessFile.setLength(((com.graphhopper.storage.AbstractDataAccess.int) + (int * (int))))"},"variableMap":{"remainingSegNo":"com.graphhopper.storage.AbstractDataAccess.HEADER_OFFSET","segmentSizeInBytes":"com.graphhopper.storage.AbstractDataAccess.HEADER_OFFSET","com.graphhopper.storage.AbstractDataAccess.HEADER_OFFSET":"com.graphhopper.storage.AbstractDataAccess.HEADER_OFFSET","raFile":"raFile"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:195","type":"CtInvocationImpl","sourcecode":"java.io.RandomAccessFile.seek(com.graphhopper.storage.AbstractDataAccess.int)"},"status":-2},{"failures":[],"tindex":"4d0df307-7912-11e5-bcc6-d3c965b53de0","series":0,"name":"add","transplant":{"position":"com.graphhopper.GHRequest:208","type":"CtIfImpl","sourcecode":"if (java.lang.String != null)\n    this.java.lang.String = java.lang.String;\n"},"variableMap":{"algo":"com.graphhopper.routing.util.EncodingManager.MOUNTAINBIKE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:144","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.BikeFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.Bike2WeightFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.RacingBikeFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MountainBikeFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.FootFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MotorcycleFlagEncoder(com.graphhopper.util.PMap);\nelse\n    throw new java.lang.IllegalArgumentException((\"entry in encoder list not supported \" + java.lang.String));\n"},"status":-2},{"failures":[],"tindex":"4d0df308-7912-11e5-bcc6-652ddb0387a3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:912","type":"CtIfImpl","sourcecode":"if (double < (double))\n    int = int;\n"},"variableMap":{"tmpClosestNode":"maxLevel","adjNode":"skippedEdge1","adjDist":"v_u_dist","currNormedDist":"v_u_weight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:598","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n    if (((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int)) || (int == int))\n        continue;\n    \n    double double = double + (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.EdgeIterator, false, com.graphhopper.util.EdgeIterator.getEdge()));\n    if (java.lang.Double.isNaN(double))\n        throw new java.lang.IllegalStateException(((((((\"Weighting should never return NaN values\" + \", in:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", out:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", dist:\") + (com.graphhopper.util.EdgeIterator.getDistance())));\n    \n    if (java.lang.Double.isInfinite(double))\n        continue;\n    \n    double double = double + (com.graphhopper.util.EdgeIterator.getDistance());\n    com.graphhopper.routing.DijkstraOneToMany.setWeightLimit(double);\n    com.graphhopper.routing.DijkstraOneToMany.setLimitVisitedNodes((((int)(double)) * 100)).setEdgeFilter(com.graphhopper.routing.ch.PrepareContractionHierarchies.IgnoreNodeFilter.setAvoidNode(com.graphhopper.routing.ch.PrepareContractionHierarchies.ShortcutHandler.getNode()));\n    com.graphhopper.util.StopWatch.start();\n    (long)++;\n    int int = com.graphhopper.routing.DijkstraOneToMany.findEndNode(int, int);\n    com.graphhopper.util.StopWatch.stop();\n    if ((int == int) && ((com.graphhopper.routing.DijkstraOneToMany.getWeight(int)) <= double))\n        continue;\n    \n    com.graphhopper.routing.ch.PrepareContractionHierarchies.ShortcutHandler.foundShortcut(int, int, double, double, com.graphhopper.util.EdgeIterator, int, int);\n}"},"status":-2},{"failures":[],"tindex":"4d0e1a19-7912-11e5-bcc6-030abbecee19","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:176","type":"CtAssignmentImpl","sourcecode":"this.double = double"},"variableMap":{"nodesContracted":"nextLon","nodesContractedPercentage":"nextLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:234","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.PointList.getLongitude(1)"},"status":-2},{"failures":[],"tindex":"4d0e1a1a-7912-11e5-bcc6-db4534aa7f2d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:175","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    java.util.List<com.graphhopper.util.GPXEntry>.add(new com.graphhopper.util.GPXEntry(double , double , double , long));\n    boolean boolean = (int + 1) == int;\n    double double = boolean ? com.graphhopper.util.Instruction.getFirstLat() : com.graphhopper.util.PointList.getLatitude((int + 1));\n    double double = boolean ? com.graphhopper.util.Instruction.getFirstLon() : com.graphhopper.util.PointList.getLongitude((int + 1));\n    double double = boolean ? boolean ? com.graphhopper.util.Instruction.getFirstEle() : com.graphhopper.util.PointList.getElevation((int + 1)) : java.lang.Double.double;\n    if (boolean)\n        long = java.lang.Math.round((long + (((this.long) * (com.graphhopper.util.Helper.com.graphhopper.util.DistanceCalc3D.calcDist(double, double, double, double, double, double))) / (double))));\n    else\n        long = java.lang.Math.round((long + (((this.long) * (com.graphhopper.util.Helper.com.graphhopper.util.DistanceCalc3D.calcDist(double, double, double, double))) / (double))));\n    \n    double = double;\n    double = double;\n    double = double;\n}"},"status":-2},{"failures":[],"tindex":"4d0e1a1b-7912-11e5-bcc6-55a4e282bd0f","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper:206","type":"CtReturnImpl","sourcecode":"return (1 << int) - 12"},"variableMap":{"i":"wayIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.QueryResult:105","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"4d0e1a1c-7912-11e5-bcc6-597e48707bc5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:97","type":"CtIfImpl","sourcecode":"if (int < 0)\n    int = 0;\n"},"variableMap":{"latSimilar":"usedBits"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:200","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.AbstractFlagEncoder.setRelBitMask((int - (int)), int)"},"status":-2},{"failures":[],"tindex":"4d0e412d-7912-11e5-bcc6-fb0403008bb8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.FootFlagEncoder:353","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"foot\", \"designated\"))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(100.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"variableMap":{"weightToPrioMap":"weightToPrioMap","com.graphhopper.routing.util.PriorityCode.PREFER":"com.graphhopper.routing.util.PriorityCode.WORST","way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:367","type":"CtIfImpl","sourcecode":"if ((double > 50) || (java.util.Set<java.lang.String>.contains(java.lang.String))) {\n    if (com.graphhopper.reader.OSMWay.hasTag(\"sidewalk\", \"no\"))\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(45.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    else\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(45.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    \n} "},"status":-2},{"failures":[],"tindex":"4d0e412e-7912-11e5-bcc6-b18b97849b82","series":0,"name":"replace","transplant":{"position":"com.graphhopper.search.NameIndex:97","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:175","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = new byte[int]"},"status":-2},{"failures":[],"tindex":"4d0e412f-7912-11e5-bcc6-7f0dfa94d7e4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHNodeAccess:56","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.com.graphhopper.storage.DataAccess.setInt((long + (com.graphhopper.storage.BaseGraph.int)), com.graphhopper.util.Helper.degreeToInt(double))"},"status":-2},{"failures":[],"tindex":"4d0e4130-7912-11e5-bcc6-2d346d82d678","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper7:50","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.Helper7.boolean = boolean"},"variableMap":{"com.graphhopper.util.Helper7.UNMAP_SUPPORTED":"loadExisting","v":"loadExisting"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:243","type":"CtAssignmentImpl","sourcecode":"boolean = com.graphhopper.storage.DataAccess.loadExisting()"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
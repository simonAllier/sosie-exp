{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":50,"com.graphhopper.routing.util.EncodedDoubleValueTest.testMaxValueAndSwap":42,"com.graphhopper.reader.OSMReaderTest.testFerry":7,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":45,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testSetSpeed0_issue367":18,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPreferenceForSlowSpeed":33,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":14,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":0,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":37,"com.graphhopper.routing.PathTest.testWayList":10,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":26,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":46,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidanceOfHighMaxSpeed":21,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":51,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":24,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":47,"com.graphhopper.routing.util.FootFlagEncoderTest.testBasics":27,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":30,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":8,"com.graphhopper.routing.util.EncodedDoubleValueTest.testMaxValue":44,"com.graphhopper.routing.util.FootFlagEncoderTest.testGetSpeed":23,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":2,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":53,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":39,"com.graphhopper.GraphHopperTest.testFootAndCar":5,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPreferenceForSlowSpeed":36,"com.graphhopper.util.BitUtilBigTest.testToFloat":57,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":32,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":35,"com.graphhopper.routing.PathTest.testTime":9,"com.graphhopper.routing.util.EncodedDoubleValueTest.testSetDoubleValue":43,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":48,"com.graphhopper.util.BitUtilLittleTest.testToFloat":56,"com.graphhopper.util.InstructionListTest.testWayList":54,"com.graphhopper.util.InstructionListTest.testCreateGPX":55,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":49,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed":41,"com.graphhopper.routing.util.FastestWeightingTest.testMinWeightHasSameUnitAs_getWeight":12,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":20,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":13,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":31,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPreferenceForSlowSpeed":16,"com.graphhopper.GraphHopperTest.testVia":4,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":29,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":52,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":34,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSetSpeed0_issue367":28,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":1,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":15,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":6,"com.graphhopper.routing.util.FootFlagEncoderTest.testCombined":25,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxValue":40,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":38,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":3,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":17,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":11,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":19,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPreferenceForSlowSpeed":22},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"tindex":"43c7ff4f-793b-11e5-a3c3-75474551d9d2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:72","type":"CtOperatorAssignmentImpl","sourcecode":"long *= 4"},"variableMap":{"oldValueIndex":"tmpValue"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:64","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= long"},"status":-1},{"failures":[54,55,6],"tindex":"43c82660-793b-11e5-a3c3-17d5b7a0461b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionList:140","type":"CtReturnImpl","sourcecode":"return java.util.Collections.emptyList()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:159","type":"CtReturnImpl","sourcecode":"return java.util.List<com.graphhopper.util.GPXEntry>"},"status":-1},{"failures":[56,57],"tindex":"43c82661-793b-11e5-a3c3-61a2b891fd51","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:199","type":"CtIfImpl","sourcecode":"if (int > 1000)\n    throw new java.lang.IllegalStateException(\"something went wrong: there seems to be no end of the turn cost-list!?\");\n"},"variableMap":{"i":"offset"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtil:102","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.BitUtil.fromInt(byte[], java.lang.Float.floatToRawIntBits(float), int)"},"status":-1},{"failures":[],"tindex":"43c84d72-793b-11e5-a3c3-51b7a65e2557","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:805","type":"CtIfImpl","sourcecode":"if (java.util.Map<com.graphhopper.routing.util.Weighting, com.graphhopper.routing.RoutingAlgorithmFactory>.isEmpty())\n    for (com.graphhopper.routing.util.FlagEncoder com.graphhopper.routing.util.FlagEncoder : com.graphhopper.routing.util.EncodingManager.fetchEdgeEncoders()) {\n        com.graphhopper.routing.util.Weighting com.graphhopper.routing.util.Weighting = com.graphhopper.GraphHopper.createWeighting(new com.graphhopper.routing.util.WeightingMap(java.lang.String), com.graphhopper.routing.util.FlagEncoder);\n        java.util.Map<com.graphhopper.routing.util.Weighting, com.graphhopper.routing.RoutingAlgorithmFactory>.put(com.graphhopper.routing.util.Weighting, null);\n    }\n"},"status":-2},{"failures":[],"tindex":"43c84d73-793b-11e5-a3c3-0bfa266dfdb7","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.CompressedArray:136","type":"CtReturnImpl","sourcecode":"return "},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMNode:89","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.String java.lang.String = ((java.lang.String)(java.lang.Object));\n    java.lang.String = java.lang.String.trim().replaceAll(\"\\\\,\", \".\");\n    if (java.lang.String.isEmpty())\n        java.lang.Object = null;\n    else\n        try {\n            java.lang.Object = java.lang.Double.parseDouble(java.lang.String);\n        } catch (java.lang.NumberFormatException ex) {\n            return ;\n        }\n    \n} else\n    java.lang.Object = ((java.lang.Number)(java.lang.Object)).doubleValue();\n"},"status":-2},{"failures":[],"tindex":"43c84d74-793b-11e5-a3c3-81a86706e21f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:241","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<extensions>\")"},"status":-2},{"failures":[],"tindex":"43c84d75-793b-11e5-a3c3-358632ee4f7f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionList:140","type":"CtReturnImpl","sourcecode":"return java.util.Collections.emptyList()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:176","type":"CtReturnImpl","sourcecode":"return java.util.List<com.graphhopper.routing.util.FlagEncoder>"},"status":-2},{"failures":[],"tindex":"43c84d76-793b-11e5-a3c3-4b1d34b3f08c","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.MiniPerfTest:44","type":"CtLocalVariableImpl","sourcecode":"long long = java.lang.System.nanoTime()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.TurnCostExtension:156","type":"CtLocalVariableImpl","sourcecode":"long long = ((long)(int)) * (int)"},"status":-2},{"failures":[],"tindex":"43c87487-793b-11e5-a3c3-33bd3768745e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:684","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":-2},{"failures":[],"tindex":"43c87488-793b-11e5-a3c3-455f970ba661","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.AStar:139","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.AStar.AStarEdge.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge"},"variableMap":{"parent":"currEdge","ase":"currEdge","currEdge":"currEdge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Dijkstra:64","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AbstractRoutingAlgorithm.createEdgeEntry(int, 0)"},"status":-2},{"failures":[],"tindex":"43c87489-793b-11e5-a3c3-dfbdbe3c1b58","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:191","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(5)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:195","type":"CtIfImpl","sourcecode":"if (int < (int))\n    long <<= 1;\nelse\n    break;\n"},"status":-2},{"failures":[],"tindex":"43c8748a-793b-11e5-a3c3-977e57b97284","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalc3D:39","type":"CtReturnImpl","sourcecode":"return java.lang.Math.sqrt(((double * double) + (double * double)))"},"variableMap":{"len":"java.lang.Double.NaN","delta":"java.lang.Double.NaN"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:533","type":"CtIfImpl","sourcecode":"if (int > (-(com.graphhopper.reader.OSMReader.int))) {\n    int = int - 3;\n    return com.graphhopper.reader.PillarInfo.getLatitude(int);\n} else\n    return java.lang.Double.double;\n"},"status":-2},{"failures":[],"tindex":"43c8748b-793b-11e5-a3c3-25498ea913d6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:177","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"UTF-8\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:582","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.util.CmdArgs.get(\"graph.flagEncoders\", \"\")"},"status":-2},{"failures":[],"tindex":"43c8748c-793b-11e5-a3c3-a73beab77503","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:602","type":"CtIfImpl","sourcecode":"if (((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int)) || (int == int))\n    continue;\n"},"variableMap":{"maxLevel":"u_fromNode","u_fromNode":"maxLevel","w_toNode":"u_fromNode","prepareGraph":"prepareGraph"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:598","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n    if (((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int)) || (int == int))\n        continue;\n    \n    double double = double + (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.EdgeIterator, false, com.graphhopper.util.EdgeIterator.getEdge()));\n    if (java.lang.Double.isNaN(double))\n        throw new java.lang.IllegalStateException(((((((\"Weighting should never return NaN values\" + \", in:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", out:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", dist:\") + (com.graphhopper.util.EdgeIterator.getDistance())));\n    \n    if (java.lang.Double.isInfinite(double))\n        continue;\n    \n    double double = double + (com.graphhopper.util.EdgeIterator.getDistance());\n    com.graphhopper.routing.DijkstraOneToMany.setWeightLimit(double);\n    com.graphhopper.routing.DijkstraOneToMany.setLimitVisitedNodes((((int)(double)) * 100)).setEdgeFilter(com.graphhopper.routing.ch.PrepareContractionHierarchies.IgnoreNodeFilter.setAvoidNode(com.graphhopper.routing.ch.PrepareContractionHierarchies.ShortcutHandler.getNode()));\n    com.graphhopper.util.StopWatch.start();\n    (long)++;\n    int int = com.graphhopper.routing.DijkstraOneToMany.findEndNode(int, int);\n    com.graphhopper.util.StopWatch.stop();\n    if ((int == int) && ((com.graphhopper.routing.DijkstraOneToMany.getWeight(int)) <= double))\n        continue;\n    \n    com.graphhopper.routing.ch.PrepareContractionHierarchies.ShortcutHandler.foundShortcut(int, int, double, double, com.graphhopper.util.EdgeIterator, int, int);\n}"},"status":-2},{"failures":[],"tindex":"43c89b9d-793b-11e5-a3c3-cbda296f2b31","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntIntBinHeap:180","type":"CtWhileImpl","sourcecode":"while ((int[][(int / 2)]) > int) {\n    int[][int] = int[][(int / 2)];\n    int[][int] = int[][(int / 2)];\n    int /= 2;\n}"},"variableMap":{"elem":"arr","keys":"arr","i":"length","key":"endIndexPlusOne"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.SimpleIntDeque:97","type":"CtIfImpl","sourcecode":"if ((int) >= (int[].int)) {\n    int[] = java.util.Arrays.copyOf(int[], ((int)((int[].int) * (float))));\n} "},"status":-2},{"failures":[],"tindex":"43c89b9e-793b-11e5-a3c3-bdd226e0fcbf","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:361","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:122","type":"CtLocalVariableImpl","sourcecode":"int int = boolean ? 1 : -1"},"status":-2},{"failures":[],"tindex":"43c89b9f-793b-11e5-a3c3-bdff4b1a0a01","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:571","type":"CtReturnImpl","sourcecode":"return ((10 * int) + int) + int"},"variableMap":{"originalEdgesCount":"tmp","edgeDifference":"tmp","contractedNeighbors":"tmp"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:957","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"43c89ba0-793b-11e5-a3c3-3dba5ba4cb8c","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.InstructionAnnotation:81","type":"CtAssignmentImpl","sourcecode":"int = (83 * int) + (this.int)"},"variableMap":{"importance":"com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED","hash":"speed"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:410","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.routing.util.BikeCommonFlagEncoder.int"},"status":-2},{"failures":[],"tindex":"43c8c2b1-793b-11e5-a3c3-1f2024aa8faa","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:95","type":"CtAssignmentImpl","sourcecode":"double[][int] = double"},"status":-2},{"failures":[],"tindex":"43c8c2b2-793b-11e5-a3c3-63ee865e1ae4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DouglasPeucker:141","type":"CtIfImpl","sourcecode":"if (java.lang.Double.isNaN(double)) {\n    continue;\n} "},"variableMap":{"lat":"com.graphhopper.coll.IntDoubleBinHeap.GROW_FACTOR"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:209","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.IntDoubleBinHeap.ensureCapacity(((int)((int) * (com.graphhopper.coll.IntDoubleBinHeap.double))))"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
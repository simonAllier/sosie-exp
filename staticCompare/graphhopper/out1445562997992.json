{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":24,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":30,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":27,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPriority":64,"com.graphhopper.reader.OSMReaderTest.testFerry":1,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":39,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":9,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPriority":67,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":34,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":68,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":20,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPriority":69,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":10,"com.graphhopper.storage.UnsafeDataAccessTest.testHeader":5,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":25,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":35,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":63,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":28,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":11,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPriority":62,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":19,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":2,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":59,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":31,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":38,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":70,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":41,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":65,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":26,"com.graphhopper.GraphHopperTest.testPrepare":52,"com.graphhopper.GraphHopperTest.testFootAndCar":54,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":29,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":61,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":36,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":12,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":16,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":15,"com.graphhopper.storage.UnsafeDataAccessTest.testLoadFlush":8,"com.graphhopper.reader.OSMReaderTest.testOneWay":3,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":21,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":66,"com.graphhopper.GraphHopperAPITest.testDisconnected179":44,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":23,"com.graphhopper.GraphHopperTest.testVia":51,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":40,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":57,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":13,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":18,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":22,"com.graphhopper.GraphHopperAPITest.testLoad":43,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":55,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":32,"com.graphhopper.storage.UnsafeDataAccessTest.testLoadClose":7,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":33,"com.graphhopper.GraphHopperTest.testFootOnly":58,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":37,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":53,"com.graphhopper.storage.UnsafeDataAccessTest.testRenameFlush":4,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":50,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":60,"com.graphhopper.storage.UnsafeDataAccessTest.testSegments":6,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":42,"com.graphhopper.routing.util.FootFlagEncoderTest.handleWayTagsRoundabout":0,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":14,"com.graphhopper.GraphHopperTest.testLoadOSM":56,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":45,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":17,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":49,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":48,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":47,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":46},"transformations":[{"failures":[0,1,2,3],"tindex":"b57973e6-7923-11e5-9819-b76a2206f4f5","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:168","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException((\"You cannot configure this GraphStorage \" + \"after calling create or loadExisting. Calling one of the methods twice is also not allowed.\"));\n"},"variableMap":{"initialized":"isRoundabout"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:303","type":"CtIfImpl","sourcecode":"if (boolean)\n    long = com.graphhopper.routing.util.AbstractFlagEncoder.setBool(long, com.graphhopper.routing.util.FlagEncoder.int, true);\n"},"status":-1},{"failures":[4,5,6,7,8],"tindex":"b5799af7-7923-11e5-9819-4d3464a97f77","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:190","type":"CtInvocationImpl","sourcecode":"java.io.RandomAccessFile.write(byte[])"},"status":-1},{"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"tindex":"b5799af8-7923-11e5-9819-1571e9cd83c9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtilBig:91","type":"CtIfImpl","sourcecode":"if ((int % 8) != 0)\n    int++;\n"},"variableMap":{"strLen":"from","bLen":"from"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AbstractBidirAlgo:61","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.AbstractBidirAlgo.initFrom(int, 0)"},"status":-1},{"failures":[59,60,61,62,63,64,65,66,67,68,69,70],"tindex":"b5799af9-7923-11e5-9819-a9d04b24f306","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:358","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.EncodedDoubleValue.getMaxValue()"},"variableMap":{"speedEncoder":"priorityWayEncoder"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:643","type":"CtReturnImpl","sourcecode":"return ((double)(com.graphhopper.routing.util.EncodedValue.getValue(long))) / (com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"status":-1},{"failures":[],"tindex":"b579c20a-7923-11e5-9819-535baa7d87a6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:455","type":"CtAssignmentImpl","sourcecode":"this.com.graphhopper.storage.index.LocationIndex = com.graphhopper.storage.index.LocationIndex"},"variableMap":{"locationIndex":"locationIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1101","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.index.LocationIndex = com.graphhopper.GraphHopper.createLocationIndex(com.graphhopper.storage.GraphHopperStorage.getDirectory())"},"status":-2},{"failures":[],"tindex":"b579c20b-7923-11e5-9819-f140977588bd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.Path:110","type":"CtIfImpl","sourcecode":"if ((int) < 0)\n    throw new java.lang.IllegalStateException(\"Call extract() before retrieving fromNode\");\n"},"variableMap":{"fromNode":"lonSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:239","type":"CtWhileImpl","sourcecode":"while (int < int) {\n    com.graphhopper.storage.DataAccess.copyTo(com.graphhopper.storage.DataAccess);\n    com.graphhopper.coll.GHBitSet.copyTo(com.graphhopper.coll.GHBitSet);\n    int = com.graphhopper.coll.GHBitSet.getCardinality();\n    for (int int = 0 ; int < int ; int++) {\n        int int = -1;\n        int int = -1;\n        if (com.graphhopper.coll.GHBitSet.contains(int)) {\n            if ((((int + 1) % (int)) != 0) && (!(com.graphhopper.coll.GHBitSet.contains((int + 1))))) {\n                int = int;\n                int = int + 1;\n            } else if (((int + (int)) < int) && (!(com.graphhopper.coll.GHBitSet.contains((int + (int)))))) {\n                int = int;\n                int = int + (int);\n            } \n        } else {\n            if ((((int + 1) % (int)) != 0) && (com.graphhopper.coll.GHBitSet.contains((int + 1)))) {\n                int = int + 1;\n                int = int;\n            } else if (((int + (int)) < int) && (com.graphhopper.coll.GHBitSet.contains((int + (int))))) {\n                int = int + (int);\n                int = int;\n            } \n        }\n        if (int >= 0) {\n            if ((int[][int]) >= 0) {\n                if (((int[][int]) == int) || (com.graphhopper.storage.index.Location2IDQuadtree.(getNormedDist(int, int)) >= com.graphhopper.storage.index.Location2IDQuadtree.(getNormedDist(int[][int], int)))) {\n                    continue;\n                } \n            } \n            com.graphhopper.storage.DataAccess.setInt((int * 4), com.graphhopper.storage.DataAccess.getInt((int * 4)));\n            int[][int] = int[][int];\n            com.graphhopper.coll.GHBitSet.add(int);\n            int++;\n        } \n    }\n}"},"status":-2},{"failures":[],"tindex":"b579c20c-7923-11e5-9819-6fde9d863bf8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.TurnCostExtension:219","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"b579c20d-7923-11e5-9819-c5b5e5cacb37","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:254","type":"CtReturnImpl","sourcecode":"return (int * (((4 + 4) + 4) + 4)) + (8 * int)"},"variableMap":{"length":"subnetworks","factor":"subnetworks"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:97","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"b579c20e-7923-11e5-9819-034fd93c34cb","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.LevelEdgeFilter:46","type":"CtIfImpl","sourcecode":"if ((int >= (int)) || (int >= (int)))\n    return true;\n"},"variableMap":{"adj":"vers","maxNodes":"vers","base":"vers"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:179","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.equals((int + \"\")))) {\n    if (boolean) {\n        return false;\n    } \n    throw new java.lang.IllegalStateException((((((\"Version of \" + java.lang.String) + \" unsupported: \") + java.lang.String) + \", expected:\") + int));\n} "},"status":-2},{"failures":[],"tindex":"b579e91f-7923-11e5-9819-5318b714d655","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:311","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException(\"Call prepareIndex only once\");\n"},"variableMap":{"initialized":"doReverse"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:153","type":"CtIfImpl","sourcecode":"if (boolean) {\n    com.graphhopper.util.EdgeIteratorState = com.graphhopper.util.EdgeIteratorState.detach(true);\n    com.graphhopper.util.PointList com.graphhopper.util.PointList = com.graphhopper.util.EdgeIteratorState.fetchWayGeometry(3);\n    com.graphhopper.storage.index.QueryResult.setClosestEdge(com.graphhopper.util.EdgeIteratorState);\n    if ((com.graphhopper.storage.index.QueryResult.getSnappedPosition()) == (com.graphhopper.storage.index.QueryResult.Position.com.graphhopper.storage.index.QueryResult.Position))\n        com.graphhopper.storage.index.QueryResult.setWayIndex((((com.graphhopper.util.PointList.getSize()) - (com.graphhopper.storage.index.QueryResult.getWayIndex())) - 1));\n    else\n        com.graphhopper.storage.index.QueryResult.setWayIndex((((com.graphhopper.util.PointList.getSize()) - (com.graphhopper.storage.index.QueryResult.getWayIndex())) - 2));\n    \n    if ((com.graphhopper.storage.index.QueryResult.getWayIndex()) < 0)\n        throw new java.lang.IllegalStateException((((\"Problem with wayIndex while reversing closest edge:\" + com.graphhopper.util.EdgeIteratorState) + \", \") + com.graphhopper.storage.index.QueryResult));\n    \n} "},"status":-2},{"failures":[],"tindex":"b579e920-7923-11e5-9819-f95fb5b47129","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:129","type":"CtIfImpl","sourcecode":"if ((int == int) && (int == int))\n    break;\n"},"variableMap":{"y1":"code","y2":"code","x1":"code","x2":"code"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:308","type":"CtIfImpl","sourcecode":"if (java.lang.Integer != null)\n    int = java.lang.Integer;\n"},"status":-2},{"failures":[],"tindex":"b579e921-7923-11e5-9819-fd35d2fd94ad","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:285","type":"CtLocalVariableImpl","sourcecode":"long long = 1L << int"},"variableMap":{"delta":"guess"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHLongIntBTree:479","type":"CtLocalVariableImpl","sourcecode":"long long = long[][int]"},"status":-2},{"failures":[],"tindex":"b579e922-7923-11e5-9819-49119690aa74","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AbstractBidirAlgo:61","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.AbstractBidirAlgo.initFrom(int, 0)"},"status":-2},{"failures":[],"tindex":"b579e923-7923-11e5-9819-09c26712f5bb","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:561","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"railway\", \"tram\"))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(50.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"variableMap":{"weightToPrioMap":"weightToPrioMap","com.graphhopper.routing.util.PriorityCode.AVOID_AT_ALL_COSTS":"com.graphhopper.routing.util.PriorityCode.REACH_DEST","way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:369","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"sidewalk\", \"no\"))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(45.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\nelse\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(45.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"status":-2},{"failures":[],"tindex":"b57a1034-7923-11e5-9819-69ee510a060f","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:410","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.routing.util.BikeCommonFlagEncoder.int"},"variableMap":{"com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED":"start","speed":"start"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:79","type":"CtAssignmentImpl","sourcecode":"int[][int] = int"},"status":-2},{"failures":[],"tindex":"b57a1035-7923-11e5-9819-9bc269b7635e","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.RoundaboutInstruction:41","type":"CtOperatorAssignmentImpl","sourcecode":"this.int += 1"},"variableMap":{"exitNumber":"nodeCount"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:176","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.storage.DataAccess.getHeader((2 * 4))"},"status":-2},{"failures":[],"tindex":"b57a1036-7923-11e5-9819-c7ec944fac79","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:320","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.create((64 * 1024))"},"variableMap":{"dataAccess":"da"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:113","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.DataAccess = new com.graphhopper.storage.RAMIntDataAccess(java.lang.String , java.lang.String , true , java.nio.ByteOrder)"},"status":-2},{"failures":[],"tindex":"b57a1037-7923-11e5-9819-6373d930057e","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMRelation:102","type":"CtIfImpl","sourcecode":"if (boolean && boolean) {\n    return true;\n} "},"variableMap":{"hasOther":"empty","hasRel":"empty"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionAnnotation:58","type":"CtReturnImpl","sourcecode":"return boolean"},"status":-2},{"failures":[],"tindex":"b57a1038-7923-11e5-9819-f51250f12a69","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:154","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.TranslationMap:148","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.Helper.isEmpty(java.lang.String)) {\n    java.util.Map<java.lang.String, java.lang.String>.put(java.util.Map.Entry<java.lang.String, java.lang.String>.getKey(), java.util.Map.Entry<java.lang.String, java.lang.String>.getValue());\n    continue;\n} "},"status":-2},{"failures":[],"tindex":"b57a1039-7923-11e5-9819-0525dbadb091","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:219","type":"CtLocalVariableImpl","sourcecode":"double double = double > 1 ? double / double : 0"},"variableMap":{"incEleSum":"b_lat_deg","incDist2DSum":"b_lat_deg"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:222","type":"CtLocalVariableImpl","sourcecode":"double double = double"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
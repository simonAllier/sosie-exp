{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":397,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":412,"com.graphhopper.routing.util.EncodedDoubleValueTest.testMaxValueAndSwap":373,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":201,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":118,"com.graphhopper.reader.OSMReaderTest.testFerry":424,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":276,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":277,"com.graphhopper.storage.GraphHopperStorageCHTest.testDoThrowExceptionIfDimDoesNotMatch":77,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":298,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":288,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidanceOfHighMaxSpeed":326,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":387,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":389,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":137,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":367,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":69,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":273,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testNoErrorOnEdgeCase_lastIndex":179,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":401,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":253,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":286,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":98,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":100,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":405,"com.graphhopper.GraphHopperTest.testPrepare":16,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":47,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":52,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":260,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":5,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":394,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":330,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":285,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":66,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":371,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":325,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":295,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":35,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":40,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":185,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":30,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":430,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":238,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":299,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":24,"com.graphhopper.GraphHopperTest.testNoNPE_ifLoadNotSuccessful":292,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":58,"com.graphhopper.GraphHopperTest.testLoadOSM":20,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":193,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":168,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":78,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":186,"com.graphhopper.reader.OSMReaderTest.testSort":427,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":369,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":434,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":95,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":269,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":2,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":146,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":416,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":439,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":23,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":235,"com.graphhopper.util.BitUtilBigTest.testFromBitString":3,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeReturn":109,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":250,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":33,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":205,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":272,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":92,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":213,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":381,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":208,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":321,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":180,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":116,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":257,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":44,"com.graphhopper.routing.util.FastestWeightingTest.testWeightWrongHeading":310,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointCount":62,"com.graphhopper.GraphHopperTest.testFailsForMissingParameters":289,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":383,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":126,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":38,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":37,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":221,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":421,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":211,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":227,"com.graphhopper.routing.util.FootFlagEncoderTest.testRailPlatformIssue366":340,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":262,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":314,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSetSpeed0_issue367":374,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":199,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":218,"com.graphhopper.GraphHopperAPITest.testLoad":61,"com.graphhopper.routing.util.FootFlagEncoderTest.testBarrierAccess":334,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":254,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":245,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":209,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":372,"com.graphhopper.reader.OSMReaderTest.testBarriers":428,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes":96,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":39,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":122,"com.graphhopper.util.GHUtilityTest.testCopy":280,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":318,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAccess":331,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":63,"com.graphhopper.routing.PathTest.testFindInstruction":28,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPriority":328,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":210,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPreferenceForSlowSpeed":390,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":341,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":200,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":270,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":258,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":233,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":278,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":222,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":403,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":386,"com.graphhopper.routing.util.EncodingManagerTest.testWrongEncoders":346,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":74,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":57,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":123,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":242,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":103,"com.graphhopper.storage.GraphHopperStorageCHTest.testBounds":104,"com.graphhopper.util.InstructionListTest.testWayList2":7,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":171,"com.graphhopper.util.AngleCalcTest.testAlignOrientation":443,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":142,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":194,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":274,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":214,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":297,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":80,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":237,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":296,"com.graphhopper.routing.util.FastestWeightingTest.testMinWeightHasSameUnitAs_getWeight":309,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetLocations":93,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":375,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":131,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":219,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":156,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":244,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":429,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":48,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":217,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":105,"com.graphhopper.routing.PathBidirRefTest.testExtract":59,"com.graphhopper.routing.util.FootFlagEncoderTest.testAccess":342,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":14,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":9,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":189,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnsureSize":76,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":141,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":13,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":240,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":12,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":177,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":11,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":140,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":324,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":10,"com.graphhopper.routing.util.BikeFlagEncoderTest.testBarrierAccess":294,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":198,"com.graphhopper.util.GHUtilityTest.testSort2":279,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":45,"com.graphhopper.reader.OSMReaderTest.testMain":426,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":352,"com.graphhopper.storage.GraphHopperStorageCHTest.testInfinityWeight":112,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":226,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPriority":301,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":107,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":106,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAccess":304,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":351,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":144,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":364,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":94,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPriority":385,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":229,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":379,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":436,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":79,"com.graphhopper.storage.GraphHopperStorageTest.testClone":247,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":275,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":143,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":359,"com.graphhopper.storage.GraphHopperStorageCHTest.testCheckFirstNode":102,"com.graphhopper.util.DouglasPeuckerTest.testPathSimplify":65,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":256,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":357,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAccess":320,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":124,"com.graphhopper.routing.PathTest.testTime":392,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":86,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed":363,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":196,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":136,"com.graphhopper.util.GHUtilityTest.testSortDirected":282,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":91,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":413,"com.graphhopper.GraphHopperTest.testFootOnly":22,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":170,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":157,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":354,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":25,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":347,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":36,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":399,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":81,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":197,"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":132,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":420,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":188,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":409,"com.graphhopper.routing.QueryGraphTest.testOneWay":419,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":99,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSortHighLevelFirst":163,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":184,"com.graphhopper.reader.OSMReaderTest.testWithBounds":435,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAccess":388,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":129,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":366,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":414,"com.graphhopper.routing.util.FootFlagEncoderTest.testBasics":343,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":345,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":165,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testSacScale":312,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":332,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":151,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":228,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":155,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetAccess":355,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":145,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":223,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":243,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":417,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":34,"com.graphhopper.util.InstructionListTest.testWayList":6,"com.graphhopper.routing.util.BikeFlagEncoderTest.testSacScale":293,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":89,"com.graphhopper.GraphHopperAPITest.testDisconnected179":423,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":125,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":290,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":182,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPreferenceForSlowSpeed":306,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":368,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":120,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed0_issue367":356,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":441,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":370,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":83,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":135,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":350,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":148,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":17,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":249,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":158,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":230,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":236,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":232,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":231,"com.graphhopper.routing.util.FootFlagEncoderTest.handleWayTagsRoundabout":335,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":406,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":264,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":263,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":42,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":55,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":173,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":174,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testSetSpeed0_issue367":308,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":303,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":207,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":50,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":305,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":241,"com.graphhopper.routing.PathTest.testWayList":27,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":147,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPriority":317,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":128,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":178,"com.graphhopper.routing.util.CarFlagEncoderTest.testFordAccess":353,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":88,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":51,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":183,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":393,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":411,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":167,"com.graphhopper.storage.GraphHopperStorageCHTest.testPrios":67,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":302,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":259,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":71,"com.graphhopper.routing.util.FootFlagEncoderTest.testGetSpeed":336,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":215,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":248,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testBarrierAccess":378,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":29,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":315,"com.graphhopper.util.GHUtilityTest.testSort":281,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":190,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":418,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":113,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testBarrierAccess":327,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":239,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":246,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":202,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":160,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":152,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":70,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":382,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":110,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":415,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":150,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":376,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":21,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":206,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testBarrierAccess":313,"com.graphhopper.routing.util.FastestWeightingTest.testSpeed0":311,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":19,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":49,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":224,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":365,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":75,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":139,"com.graphhopper.routing.PathTest.testFound":391,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":291,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":348,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":161,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPreferenceForSlowSpeed":333,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":31,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":284,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":220,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":127,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":252,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":41,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":43,"com.graphhopper.routing.util.CarFlagEncoderTest.testSwapDir":362,"com.graphhopper.routing.util.CarFlagEncoderTest.testBarrierAccess":349,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":261,"com.graphhopper.storage.GraphHopperStorageCHTest.testFlags":85,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":46,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":108,"com.graphhopper.reader.PrinctonReaderTest.testRead":440,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":271,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":87,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":216,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":117,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes2":82,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":408,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":225,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":329,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPreferenceForSlowSpeed":322,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":380,"com.graphhopper.reader.OSMReaderTest.testFoot":425,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":138,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":422,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":191,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testSacScale":323,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":114,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":192,"com.graphhopper.reader.OSMReaderTest.testOneWay":438,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":255,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":84,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":267,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":266,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":234,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":56,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSacScale":377,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":134,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":251,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":26,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":402,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":175,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":53,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":300,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxValue":358,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":407,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":153,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":400,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":283,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":337,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":130,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":111,"com.graphhopper.reader.OSMReaderTest.testEstimatedCenter":437,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":72,"com.graphhopper.routing.PathBidirRefTest.testExtract2":60,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":159,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":32,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":169,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":195,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":204,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":319,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":181,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":265,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":97,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":162,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":431,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":149,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":338,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":154,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":398,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":54,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":68,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":187,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":115,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":268,"com.graphhopper.routing.util.CarFlagEncoderTest.testRegisterOnlyOnceAllowed":360,"com.graphhopper.GraphHopperTest.testFootAndCar":18,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":384,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":0,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":316,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":121,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibility":344,"com.graphhopper.routing.util.CarFlagEncoderTest.testOneway":361,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":404,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":166,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":396,"com.graphhopper.storage.GraphHopperStorageCHTest.testPropertiesWithNoInit":101,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":212,"com.graphhopper.GraphHopperTest.testPrepareOnly":287,"com.graphhopper.GraphHopperTest.testVia":15,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":203,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":410,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":119,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":395,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":433,"com.graphhopper.util.DouglasPeuckerTest.testParse":64,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":176,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":164,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":73,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":8,"com.graphhopper.routing.util.FootFlagEncoderTest.testCombined":339,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":432,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":172,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":90,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":133,"com.graphhopper.util.AngleCalcTest.testCombined":442,"com.graphhopper.util.InstructionListTest.testFind":4,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":307,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":1},"transformations":[{"failures":[],"tindex":"43af995d-82ae-11e5-995c-61b3f4f818c4","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:105","type":"CtLocalVariableImpl","sourcecode":"java.util.List<com.graphhopper.routing.util.Weighting> java.util.List<com.graphhopper.routing.util.Weighting> = new java.util.ArrayList<com.graphhopper.routing.util.Weighting>()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:136","type":"CtLocalVariableImpl","sourcecode":"java.util.List<com.graphhopper.routing.util.Weighting> java.util.List<com.graphhopper.routing.util.Weighting> = new java.util.ArrayList<com.graphhopper.routing.util.Weighting>(java.util.Collection<com.graphhopper.storage.CHGraphImpl>.size())"},"status":-2},{"failures":[0,1,2],"tindex":"43afc06e-82ae-11e5-995c-9f2b1df4a934","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:185","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.shapes.BBox.double = com.graphhopper.util.Helper.intToEle(com.graphhopper.storage.DataAccess.getHeader((8 * 4)))"},"status":-1},{"failures":[],"tindex":"43afc06f-82ae-11e5-995c-9f00d17be50c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareEncoder:45","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.ch.PrepareEncoder.long"},"variableMap":{"com.graphhopper.routing.ch.PrepareEncoder.scBwdDir":"acceptBit"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:292","type":"CtReturnImpl","sourcecode":"return long"},"status":0},{"failures":[3],"tindex":"43afc070-82ae-11e5-995c-f36038376502","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:209","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = new byte[int * 4]"},"variableMap":{"intLen":"bLen"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilBig:94","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = new byte[int]"},"status":-1},{"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"tindex":"43afc071-82ae-11e5-995c-bd27bd5de83b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:990","type":"CtIfImpl","sourcecode":"if ((int) == (com.graphhopper.storage.EdgeAccess.int))\n    throw new java.lang.IllegalStateException(((\"content of edgeId \" + (int)) + \" is marked as invalid - ie. the edge is already removed!\"));\n"},"variableMap":{"baseNode":"i","edgeId":"i","com.graphhopper.storage.EdgeAccess.NO_NODE":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:281","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.Path.EdgeVisitor.next(com.graphhopper.util.EdgeIteratorState, int)"},"status":-1},{"failures":[62,63,64,65],"tindex":"43afc072-82ae-11e5-995c-abf8d996025f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:392","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.util.Helper.isEmpty(java.lang.String))) {\n    if (com.graphhopper.util.Helper.isEmpty(java.lang.String))\n        java.lang.String = java.lang.String;\n    else\n        java.lang.String += \", \" + java.lang.String;\n    \n} "},"variableMap":{"name":"str","refName":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:430","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : java.lang.String.split(\"\\\\[\")) {\n    if ((java.lang.String.trim().length()) == 0)\n        continue;\n    \n    java.lang.String[] java.lang.String[] = java.lang.String.split(\",\");\n    java.lang.String java.lang.String = java.lang.String[][1].replace(\"]\", \"\").trim();\n    com.graphhopper.util.PointList.add(java.lang.Double.parseDouble(java.lang.String), java.lang.Double.parseDouble(java.lang.String[][0].trim()), java.lang.Double.double);\n}"},"status":-1},{"failures":[],"tindex":"43afe783-82ae-11e5-995c-4545f5e1fae5","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:173","type":"CtIfImpl","sourcecode":"if (int < int) {\n    int = int;\n} "},"variableMap":{"max":"subnetworks","tmpSize":"subnetworks"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:89","type":"CtInvocationImpl","sourcecode":"org.slf4j.Logger.info(((((((((\"optimize to remove subnetworks (\" + (int)) + \"), \") + \"unvisited-dead-end-nodes (\") + int) + \"), \") + \"maxEdges/node (\") + (java.util.concurrent.atomic.AtomicInteger.get())) + \")\"))"},"status":0},{"failures":[],"tindex":"43afe784-82ae-11e5-995c-a99facb547ab","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtilBig:116","type":"CtLocalVariableImpl","sourcecode":"byte byte = ((byte)(1 << 7))"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:60","type":"CtLocalVariableImpl","sourcecode":"byte byte = byte[][int]"},"status":-2},{"failures":[],"tindex":"43afe785-82ae-11e5-995c-3d21e6c59044","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:291","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.LocationIndexTree.setMinResolutionInMeter(com.graphhopper.storage.DataAccess.getHeader((2 * 4)))"},"status":0},{"failures":[],"tindex":"43afe786-82ae-11e5-995c-511ab40b28c9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:255","type":"CtOperatorAssignmentImpl","sourcecode":"long |= long & 1"},"variableMap":{"res":"guess","value":"guess"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDMap:113","type":"CtAssignmentImpl","sourcecode":"long = long"},"status":-2},{"failures":[66,67,68,69,70,71,72,73,74,75,76,0,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,1,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,2,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,4,5,6,7,8,283,284,285,286,287,9,10,11,12,13,14,288,15,16,17,18,19,20,289,290,21,22,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,23,24,391,392,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,393,41,394,395,396,42,43,44,45,46,47,397,398,48,49,50,51,52,399,53,400,401,402,403,404,54,55,56,57,405,406,407,58,59,60,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,61,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441],"tindex":"43b00e97-82ae-11e5-995c-afa322f10992","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:191","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.routing.util.AbstractFlagEncoder.defineWayBits(int, int)"},"status":-1},{"failures":[],"tindex":"43b00e98-82ae-11e5-995c-850847aa3fbc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.CompressedArray:87","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"variableMap":{"currentEntry":"tmpNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:703","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":0},{"failures":[8,15,298,351,357,358,373,382,436],"tindex":"43b035a9-82ae-11e5-995c-1fc793350305","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:53","type":"CtIfImpl","sourcecode":"if (double < 0.0)\n    return -double;\n"},"variableMap":{"y":"maxSpeed","angle":"maxSpeed"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:822","type":"CtReturnImpl","sourcecode":"return double * 0.9"},"status":-1},{"failures":[442,443,6,7,8,9,11,13,25,28,29],"tindex":"43b035aa-82ae-11e5-995c-e75a57d89763","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:121","type":"CtReturnImpl","sourcecode":"return java.lang.Math.toDegrees(double)"},"variableMap":{"orientation":"resultOrientation"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:107","type":"CtReturnImpl","sourcecode":"return double"},"status":-1},{"failures":[83,105,114,121,139,147,212,230,238,247,265,273,278,279,280,281,282,17,427],"tindex":"43b035ab-82ae-11e5-995c-c77ba652994a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:253","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.GraphExtension.isRequireEdgeField())\n    int = com.graphhopper.storage.BaseGraph.nextEdgeEntryIndex(4);\nelse\n    int = -1;\n"},"status":-1},{"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,31,32,33,34,35,36,37,38,39,40,393,41,394,395,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61],"tindex":"43b035ac-82ae-11e5-995c-13cfcaffe635","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.AStar:150","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.routing.AStar.AStarEdge) == null)\n    throw new java.lang.AssertionError(\"Empty edge cannot happen\");\n"},"variableMap":{"currEdge":"ee"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:224","type":"CtIfImpl","sourcecode":"if (boolean)\n    com.graphhopper.routing.DijkstraBidirectionRef.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.EdgeEntry, int);\n"},"status":-1},{"failures":[431,439],"tindex":"43b035ad-82ae-11e5-995c-0d25bd044c88","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMTurnRelation:111","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    int int = com.graphhopper.util.EdgeIterator.getEdge();\n    long long = com.graphhopper.reader.OSMReader.getOsmIdOfInternalEdge(int);\n    if ((((int != int) && ((this.com.graphhopper.reader.OSMTurnRelation.Type) == (com.graphhopper.reader.OSMTurnRelation.Type.com.graphhopper.reader.OSMTurnRelation.Type))) && (long != (this.long))) || ((((this.com.graphhopper.reader.OSMTurnRelation.Type) == (com.graphhopper.reader.OSMTurnRelation.Type.com.graphhopper.reader.OSMTurnRelation.Type)) && (long == (this.long))) && (long >= 0))) {\n        final com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry = new com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry();\n        com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int = int;\n        com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int = int;\n        com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int = com.graphhopper.util.EdgeIterator.getEdge();\n        com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.long = com.graphhopper.routing.util.TurnCostEncoder.getTurnFlags(true, 0);\n        java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>.add(com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry);\n        if ((this.com.graphhopper.reader.OSMTurnRelation.Type) == (com.graphhopper.reader.OSMTurnRelation.Type.com.graphhopper.reader.OSMTurnRelation.Type))\n            break;\n        \n    } \n}"},"status":-1},{"failures":[],"tindex":"43b05cbe-82ae-11e5-995c-c77ff3031d13","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:171","type":"CtIfImpl","sourcecode":"if (int < 0)\n    throw new java.lang.IllegalArgumentException(\"via node cannot be negative\");\n"},"variableMap":{"nodeVia":"nodeEntryBytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHNodeAccess:117","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.storage.BaseGraph.com.graphhopper.storage.GraphExtension.isRequireNodeField()) && ((com.graphhopper.storage.BaseGraph.int) >= 0)) {\n    com.graphhopper.storage.BaseGraph.ensureNodeIndex(int);\n    long long = ((long)(int)) * (com.graphhopper.storage.BaseGraph.int);\n    com.graphhopper.storage.BaseGraph.com.graphhopper.storage.DataAccess.setInt((long + (com.graphhopper.storage.BaseGraph.int)), int);\n} else {\n    throw new java.lang.AssertionError(\"This graph does not provide an additional node field\");\n}"},"status":-2},{"failures":[17,427],"tindex":"43b05cbf-82ae-11e5-995c-d3f06eb9629d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:246","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.routing.util.AllEdgesIterator.next()) {\n    int int = com.graphhopper.routing.util.AllEdgesIterator.getBaseNode();\n    int int = gnu.trove.list.TIntList.get(int);\n    int int = com.graphhopper.routing.util.AllEdgesIterator.getAdjNode();\n    int int = gnu.trove.list.TIntList.get(int);\n    if ((int < 0) || (int < 0))\n        continue;\n    \n    com.graphhopper.routing.util.AllEdgesIterator.copyPropertiesTo(com.graphhopper.storage.Graph.edge(int, int));\n}"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":19,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"43afe785-82ae-11e5-995c-3d21e6c59044","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.DataAccess.getHeader","com.graphhopper.storage.index.LocationIndexTree.setMinResolutionInMeter"]},"type":"staticDiff"}]}]}
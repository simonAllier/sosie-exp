{"failureDictionary":{"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":89,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":30,"com.graphhopper.reader.OSMReaderTest.testFerry":71,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":123,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":96,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":39,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":102,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":54,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":65,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":66,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":26,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":112,"com.graphhopper.reader.OSMReaderTest.testWithBounds":82,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":136,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":104,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":146,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":99,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":107,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testNoErrorOnEdgeCase_lastIndex":21,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":144,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":7,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":149,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":46,"com.graphhopper.GraphHopperTest.testPrepare":56,"com.graphhopper.storage.GraphHopperStorageCHTest.testBounds":2,"com.graphhopper.util.EdgeWrapperTest.testPut":154,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":68,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":13,"com.graphhopper.reader.OSMReaderTest.testFoot":72,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":141,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":92,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":108,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":36,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":126,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":33,"com.graphhopper.util.InstructionListTest.testWayList":118,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":34,"com.graphhopper.reader.OSMReaderTest.testOneWay":84,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":133,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":97,"com.graphhopper.GraphHopperAPITest.testDisconnected179":70,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":61,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBounds":43,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":24,"com.graphhopper.storage.GraphHopperStorageTest.testPropertiesWithNoInit":115,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":148,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":127,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":27,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":76,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":77,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":145,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":17,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":137,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":57,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":142,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":143,"com.graphhopper.routing.PathBidirRefTest.testExtract":151,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":53,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":120,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":150,"com.graphhopper.GraphHopperTest.testLoadOSM":60,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":31,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":35,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":48,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":10,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":28,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":52,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":19,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":51,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":50,"com.graphhopper.reader.OSMReaderTest.testSort":74,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":49,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":134,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":41,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":81,"com.graphhopper.util.GHUtilityTest.testSort2":93,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":100,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":135,"com.graphhopper.reader.OSMReaderTest.testMain":73,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":44,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":147,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":15,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":16,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":139,"com.graphhopper.routing.PathBidirRefTest.testExtract2":152,"com.graphhopper.routing.PathTest.testWayList":122,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":124,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":11,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testAcceptsCar":153,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":37,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":98,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":23,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":140,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":5,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":78,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":113,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":85,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":125,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":25,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":132,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":9,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPropertiesWithNoInit":111,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":83,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":109,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":22,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":29,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":116,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":67,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointCount":88,"com.graphhopper.util.DouglasPeuckerTest.testPathSimplify":91,"com.graphhopper.GraphHopperTest.testFootAndCar":58,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":1,"com.graphhopper.util.GHUtilityTest.testSort":94,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":105,"com.graphhopper.storage.GraphStorageViaMMapTest.testBounds":3,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":32,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":130,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":129,"com.graphhopper.search.NameIndexTest.testPut":87,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":101,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":110,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":38,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":8,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":106,"com.graphhopper.util.GHUtilityTest.testSortDirected":95,"com.graphhopper.storage.GraphHopperStorageCHTest.testPropertiesWithNoInit":103,"com.graphhopper.GraphHopperTest.testPrepareOnly":47,"com.graphhopper.GraphHopperTest.testVia":55,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":121,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":62,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":86,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":114,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":80,"com.graphhopper.util.DouglasPeuckerTest.testParse":90,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":18,"com.graphhopper.GraphHopperAPITest.testLoad":69,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":59,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":6,"com.graphhopper.storage.GraphHopperStorageTest.testBounds":45,"com.graphhopper.GraphHopperTest.testFootOnly":63,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":119,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":138,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":12,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":79,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":14,"com.graphhopper.reader.OSMReaderTest.testBarriers":75,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":128,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":64,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":4,"com.graphhopper.util.GHUtilityTest.testCopy":117,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":131,"com.graphhopper.util.AngleCalcTest.testAtan2":0,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":40,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":42},"transformations":[{"failures":[],"tindex":"cfe14ff6-8281-11e5-ba54-75371c0b65ed","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DouglasPeucker:133","type":"CtLocalVariableImpl","sourcecode":"double double = -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:759","type":"CtLocalVariableImpl","sourcecode":"double double"},"status":-2},{"failures":[],"tindex":"cfe17707-8281-11e5-ba54-4388038ebf3b","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.AStar:74","type":"CtAssignmentImpl","sourcecode":"java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge> = new java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>(int)"},"variableMap":{"prioQueueOpenSet":"prioQueueOpenSetFrom","size":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:80","type":"CtAssignmentImpl","sourcecode":"java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge> = new java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>((int / 10))"},"status":0},{"failures":[],"tindex":"cfe17708-8281-11e5-ba54-83638581b805","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:177","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"UTF-8\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:493","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = java.lang.String"},"status":-2},{"failures":[0],"tindex":"cfe17709-8281-11e5-ba54-3d8bc61b91e3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.PriorityWeighting:50","type":"CtIfImpl","sourcecode":"if (java.lang.Double.isInfinite(double))\n    return java.lang.Double.double;\n"},"variableMap":{"java.lang.Double.POSITIVE_INFINITY":"angle","weight":"angle"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:55","type":"CtReturnImpl","sourcecode":"return -double"},"status":-1},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"tindex":"cfe19e1a-8281-11e5-ba54-23a951538b8a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.shapes.BBox:108","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-1},{"failures":[42,85,86,78],"tindex":"cfe19e1b-8281-11e5-ba54-a3e60e2006ba","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:92","type":"CtIfImpl","sourcecode":"if (int >= (int))\n    throw new java.lang.ArrayIndexOutOfBoundsException((\"index has to be smaller than size \" + (int)));\n"},"variableMap":{"size":"TC_FROM","index":"from"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.TurnCostExtension:157","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt((long + (int)), int)"},"status":-1},{"failures":[6,7,13,15,16,24,25,31,33,34,55,56,57,58,59,60,62,73,74,75],"tindex":"cfe19e1c-8281-11e5-ba54-217357f822de","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:218","type":"CtAssignmentImpl","sourcecode":"long = 1L << (int++)"},"variableMap":{"unpavedBit":"parts","shift":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:176","type":"CtOperatorAssignmentImpl","sourcecode":"long *= int[][int]"},"status":-1},{"failures":[55,56,59,60,63],"tindex":"cfe19e1d-8281-11e5-ba54-a72a21fc93c4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:820","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.routing.util.Weighting com.graphhopper.routing.util.Weighting : java.util.Set<com.graphhopper.routing.util.Weighting>) {\n    com.graphhopper.routing.ch.PrepareContractionHierarchies com.graphhopper.routing.ch.PrepareContractionHierarchies = new com.graphhopper.routing.ch.PrepareContractionHierarchies(new com.graphhopper.storage.GHDirectory(\"\" , com.graphhopper.storage.DAType.com.graphhopper.storage.DAType) , com.graphhopper.storage.GraphHopperStorage , com.graphhopper.storage.GraphHopperStorage.getGraph(com.graphhopper.storage.CHGraph.com.graphhopper.storage.CHGraph, com.graphhopper.routing.util.Weighting) , com.graphhopper.routing.util.Weighting.getFlagEncoder() , com.graphhopper.routing.util.Weighting , com.graphhopper.routing.util.TraversalMode);\n    com.graphhopper.routing.ch.PrepareContractionHierarchies.setPeriodicUpdates(int).setLazyUpdates(int).setNeighborUpdates(int).setLogMessages(double);\n    java.util.Map<com.graphhopper.routing.util.Weighting, com.graphhopper.routing.RoutingAlgorithmFactory>.put(com.graphhopper.routing.util.Weighting, com.graphhopper.routing.ch.PrepareContractionHierarchies);\n}"},"status":-1},{"failures":[],"tindex":"cfe19e1e-8281-11e5-ba54-798e9a350607","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.shapes.Circle:136","type":"CtIfImpl","sourcecode":"if ((double) < (com.graphhopper.util.shapes.BBox.double)) {\n    return ((com.graphhopper.util.shapes.BBox.double) - (com.graphhopper.util.shapes.BBox.double)) > 0;\n} "},"variableMap":{"b":"b","minLon":"maxLon","bbox":"bbox","maxLon":"maxLat","lon":"normedDist"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.shapes.Circle:108","type":"CtIfImpl","sourcecode":"if ((double) > (com.graphhopper.util.shapes.BBox.double)) {\n    if ((double) < (com.graphhopper.util.shapes.BBox.double)) {\n        return com.graphhopper.util.shapes.Circle.(normDist(com.graphhopper.util.shapes.BBox.double, com.graphhopper.util.shapes.BBox.double)) <= (double);\n    } \n    if ((double) > (com.graphhopper.util.shapes.BBox.double)) {\n        return com.graphhopper.util.shapes.Circle.(normDist(com.graphhopper.util.shapes.BBox.double, com.graphhopper.util.shapes.BBox.double)) <= (double);\n    } \n    return ((com.graphhopper.util.shapes.BBox.double) - (com.graphhopper.util.shapes.BBox.double)) > 0;\n} "},"status":-2},{"failures":[],"tindex":"cfe1c52f-8281-11e5-ba54-199848e8f8b8","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:312","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long & (int)))"},"variableMap":{"bytePos":"edgePointer","indexDivisor":"E_NODEA"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:152","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.storage.DataAccess.getInt((long + (int)))"},"status":-2},{"failures":[87],"tindex":"cfe1c530-8281-11e5-ba54-4bcc45344452","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.DAType:148","type":"CtAssignmentImpl","sourcecode":"java.lang.String = \"MMAP\""},"variableMap":{"str":"lastName"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.search.NameIndex:90","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String"},"status":-1},{"failures":[88,89,90,91],"tindex":"cfe1c531-8281-11e5-ba54-492784cc5ddf","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:133","type":"CtIfImpl","sourcecode":"if (java.lang.String.contains(\"|\")) {\n    java.lang.String = java.lang.String;\n    java.lang.String = java.lang.String.split(\"\\\\|\")[0];\n} "},"variableMap":{"entry":"lat","entryVal":"lat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:437","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(java.lang.Double.parseDouble(java.lang.String), java.lang.Double.parseDouble(java.lang.String[][0].trim()), java.lang.Double.double)"},"status":-1},{"failures":[53,58,63,92],"tindex":"cfe1c532-8281-11e5-ba54-d33da3b772a1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(5);\n} catch (java.lang.InterruptedException iex) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:133","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.storage.index.QueryResult.getSnappedPosition()) == (com.graphhopper.storage.index.QueryResult.Position.com.graphhopper.storage.index.QueryResult.Position))\n    continue;\n"},"status":-1},{"failures":[93,94,95,57,74],"tindex":"cfe1c533-8281-11e5-ba54-7d40675f8cc7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.EdgeAccess:194","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int == (com.graphhopper.util.EdgeIterator.int)))\n    throw new java.lang.IllegalStateException((((((\"Cannot write edge with illegal ID:\" + int) + \"; nodeThis:\") + int) + \", nodeOther:\") + int));\n"},"variableMap":{"com.graphhopper.util.EdgeIterator.NO_EDGE":"old","nodeThis":"newIndex","edgeId":"old","nodeOther":"newIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:266","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.NodeAccess.is3D())\n    com.graphhopper.storage.NodeAccess.setNode(int, com.graphhopper.storage.NodeAccess.getLatitude(int), com.graphhopper.storage.NodeAccess.getLongitude(int), com.graphhopper.storage.NodeAccess.getElevation(int));\nelse\n    com.graphhopper.storage.NodeAccess.setNode(int, com.graphhopper.storage.NodeAccess.getLatitude(int), com.graphhopper.storage.NodeAccess.getLongitude(int));\n"},"status":-1},{"failures":[],"tindex":"cfe1ec44-8281-11e5-ba54-fde964d1abdf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphBuilder:114","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.GraphHopperStorage = new com.graphhopper.storage.GraphHopperStorage(java.util.Arrays.asList(com.graphhopper.routing.util.Weighting) , com.graphhopper.storage.Directory , com.graphhopper.routing.util.EncodingManager , boolean , new com.graphhopper.storage.GraphExtension.NoOpExtension())"},"status":-2},{"failures":[96,97,98,99,100],"tindex":"cfe1ec45-8281-11e5-ba54-a337680ed547","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BreadthFirstSearch:34","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.GHBitSet.add(int)"},"status":-1},{"failures":[101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,55,58,121,122,123,124,125,126,127,128,129,130,131,132,133,134,66,67,135,136,68,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,69,73,79,82],"tindex":"cfe1ec46-8281-11e5-ba54-7f5dda1f32bb","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.TurnWeighting:87","type":"CtReturnImpl","sourcecode":"return double + double"},"variableMap":{"turnCosts":"com.graphhopper.storage.EdgeAccess.INT_DIST_FACTOR","weight":"com.graphhopper.storage.EdgeAccess.INT_DIST_FACTOR"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:107","type":"CtReturnImpl","sourcecode":"return int / (com.graphhopper.storage.EdgeAccess.double)"},"status":-1},{"failures":[119,153],"tindex":"cfe1ec47-8281-11e5-ba54-cd4feb60db3a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:445","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    java.lang.String = java.lang.String.substring(0, int).trim();\n} else {\n    int = java.lang.String.indexOf(\"kph\");\n    if (int > 0) {\n        java.lang.String = java.lang.String.substring(0, int).trim();\n    } \n}"},"status":-1},{"failures":[154],"tindex":"cfe21358-8281-11e5-ba54-535213bfaed6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:206","type":"CtOperatorAssignmentImpl","sourcecode":"int += 1"},"variableMap":{"size":"nodeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.EdgeWrapper:64","type":"CtInvocationImpl","sourcecode":"gnu.trove.map.hash.TIntIntHashMap.put(int, int)"},"status":-1},{"failures":[],"tindex":"cfe21359-8281-11e5-ba54-b153c7fef6ef","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:124","type":"CtIfImpl","sourcecode":"if (long == long)\n    return long;\nelse\n    return ~long;\n"},"variableMap":{"high":"directionBitMask","highKey":"directionBitMask","key":"directionBitMask"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:239","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMNode.hasTag(\"barrier\", java.util.Set<java.lang.String>)) {\n    boolean boolean = false;\n    if (com.graphhopper.reader.OSMNode.hasTag(\"locked\", \"yes\"))\n        boolean = true;\n    \n    for (java.lang.String java.lang.String : java.util.List<java.lang.String>) {\n        if ((!boolean) && (com.graphhopper.reader.OSMNode.hasTag(java.lang.String, java.util.Set<java.lang.String>)))\n            return 0;\n        \n        if (com.graphhopper.reader.OSMNode.hasTag(java.lang.String, java.util.Set<java.lang.String>))\n            return long;\n        \n    }\n    if (boolean)\n        return long;\n    \n} "},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
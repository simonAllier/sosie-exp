{"failureDictionary":{"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":38,"com.graphhopper.reader.OSMReaderTest.testMain":39,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":8,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":54,"com.graphhopper.util.InstructionListTest.testRoundaboutJsonNaN":50,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":62,"com.graphhopper.routing.PathTest.testWayList":66,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":18,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":0,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":28,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":35,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":56,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":30,"com.graphhopper.GHResponseTest.testToString":44,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":19,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":61,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":31,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":21,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":22,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":1,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":70,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":7,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":59,"com.graphhopper.storage.RAMDataAccessTest.testSet_GetBytes":12,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":29,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":71,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":20,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":72,"com.graphhopper.GraphHopperTest.testPrepare":14,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":4,"com.graphhopper.util.InstructionListTest.testWayList2":51,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":60,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":55,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":67,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":6,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":3,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":34,"com.graphhopper.util.InstructionListTest.testWayList":49,"com.graphhopper.util.InstructionListTest.testCreateGPX":42,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":48,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":52,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":58,"com.graphhopper.util.InstructionListTest.testRoundaboutJsonIntegrity":47,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":36,"com.graphhopper.storage.SynchedDAWrapperTest.testSet_GetBytes":11,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":23,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":57,"com.graphhopper.GraphHopperTest.testVia":13,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":9,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":2,"com.graphhopper.util.TranslationMapTest.testToRoundaboutString":46,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":68,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":26,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":65,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":15,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":25,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":53,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":63,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":5,"com.graphhopper.storage.RAMIntDataAccessTest.testSet_Get_Short_Long":10,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":43,"com.graphhopper.util.TranslationMapTest.testToString":45,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":69,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":73,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":64,"com.graphhopper.reader.OSMReaderTest.testBarriers":41,"com.graphhopper.GraphHopperTest.testLoadOSM":16,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":33,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":24,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":32,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":17,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":27,"com.graphhopper.reader.OSMReaderTest.testSort":40,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":37},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9],"tindex":"0480b117-8277-11e5-8533-79284bb250fb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:96","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.ch.Path4CH.expandEdge(com.graphhopper.util.CHEdgeIteratorState, true)"},"status":-1},{"failures":[],"tindex":"0480d828-8277-11e5-8533-8faf4ec10568","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.shapes.BBox:230","type":"CtLocalVariableImpl","sourcecode":"int int = 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:159","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[10],"tindex":"0480d829-8277-11e5-8533-95101261e352","series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:113","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)((java.lang.Math.pow(2, int)) / 360))"},"variableMap":{"allBits":"indexDivisor"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:271","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long & (int)))"},"status":-1},{"failures":[],"tindex":"0480d82a-8277-11e5-8533-a31ca0aa2855","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.BigLongIntMap:95","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:107","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = (((((com.graphhopper.GHResponse.getDebugInfo()) + \", simplify (\") + int) + \"->\") + (com.graphhopper.util.PointList.getSize())) + \")\""},"status":-2},{"failures":[11,12],"tindex":"0480d82b-8277-11e5-8533-47f49d6d040e","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:166","type":"CtAssignmentImpl","sourcecode":"byte[][][int] = byte[]"},"variableMap":{"s":"bufferIndex","bytes":"seg","segments":"segments"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:271","type":"CtAssignmentImpl","sourcecode":"byte[] = byte[][][(int + 1)]"},"status":-1},{"failures":[],"tindex":"0480d82c-8277-11e5-8533-09f3ec5edaf1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:223","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[],"tindex":"0480d82d-8277-11e5-8533-b95e6502c5ff","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:455","type":"CtInvocationImpl","sourcecode":"java.text.NumberFormat.getInstance(java.util.Locale.java.util.Locale)"},"status":0},{"failures":[],"tindex":"0480d82e-8277-11e5-8533-d39bbb15906f","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper:382","type":"CtReturnImpl","sourcecode":"return -(java.lang.Double.double)"},"variableMap":{"java.lang.Double.MAX_VALUE":"com.graphhopper.util.DistanceCalcEarth.KM_MILE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:424","type":"CtTryImpl","sourcecode":"try {\n    int int;\n    int int = java.lang.String.indexOf(\"mp\");\n    if (int > 0) {\n        java.lang.String = java.lang.String.substring(0, int).trim();\n        int = java.lang.Integer.parseInt(java.lang.String);\n        return int * (com.graphhopper.util.DistanceCalcEarth.double);\n    } \n    int int = java.lang.String.indexOf(\"knots\");\n    if (int > 0) {\n        java.lang.String = java.lang.String.substring(0, int).trim();\n        int = java.lang.Integer.parseInt(java.lang.String);\n        return int * 1.852;\n    } \n    int int = java.lang.String.indexOf(\"km\");\n    if (int > 0) {\n        java.lang.String = java.lang.String.substring(0, int).trim();\n    } else {\n        int = java.lang.String.indexOf(\"kph\");\n        if (int > 0) {\n            java.lang.String = java.lang.String.substring(0, int).trim();\n        } \n    }\n    return java.lang.Integer.parseInt(java.lang.String);\n} catch (java.lang.Exception ex) {\n    return -1;\n}"},"status":-2},{"failures":[],"tindex":"0480ff3f-8277-11e5-8533-d58789591273","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:242","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.util.StopWatch com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:314","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.util.StopWatch com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch().start()"},"status":-2},{"failures":[],"tindex":"0480ff40-8277-11e5-8533-afbde7bfad40","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.InstructionList:213","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"\\n<trk><name>\")"},"variableMap":{"track":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:287","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\",\")"},"status":0},{"failures":[],"tindex":"0480ff41-8277-11e5-8533-5998ce77b794","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:169","type":"CtIfImpl","sourcecode":"if (int > int) {\n    int = int;\n} "},"variableMap":{"min":"com.graphhopper.storage.EdgeAccess.NO_NODE","tmpSize":"E_NODEA"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:71","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt((long + (int)), com.graphhopper.storage.EdgeAccess.int)"},"status":-2},{"failures":[13,14,15,16,17,18,19,20,4,21],"tindex":"0480ff42-8277-11e5-8533-d3f0768d7f5a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.VirtualEdgeIteratorState:174","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],"tindex":"0480ff43-8277-11e5-8533-716b33c70c0c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHNodeAccess:148","type":"CtReturnImpl","sourcecode":"return 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:246","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.index.QueryResult.getClosestNode()"},"status":-1},{"failures":[],"tindex":"04812654-8277-11e5-8533-8d7790313256","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:183","type":"CtIfImpl","sourcecode":"if (int == (int))\n    break;\n"},"variableMap":{"turnCostIndex":"nodeVia","NO_TURN_ENTRY":"edgeTo"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:447","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMTurnRelation != null) {\n    com.graphhopper.storage.GraphExtension com.graphhopper.storage.GraphExtension = com.graphhopper.storage.Graph.getExtension();\n    if (com.graphhopper.storage.GraphExtension instanceof com.graphhopper.storage.TurnCostExtension) {\n        com.graphhopper.storage.TurnCostExtension com.graphhopper.storage.TurnCostExtension = ((com.graphhopper.storage.TurnCostExtension)(com.graphhopper.storage.GraphExtension));\n        java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry> java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry> = com.graphhopper.reader.OSMReader.analyzeTurnRelation(com.graphhopper.reader.OSMTurnRelation);\n        for (com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry : java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>) {\n            com.graphhopper.storage.TurnCostExtension.addTurnInfo(com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int, com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int, com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int, com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.long);\n        }\n    } \n} "},"status":-2},{"failures":[42,43],"tindex":"04812655-8277-11e5-8533-4312f2c312a5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionList:242","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<gh:distance>\")"},"variableMap":{"output":"output"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:239","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<desc>\")"},"status":-1},{"failures":[],"tindex":"04812656-8277-11e5-8533-6f8ff13c488c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:313","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.StopWatch.start()"},"variableMap":{"lazySW":"sw"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:137","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch().start()"},"status":0},{"failures":[],"tindex":"04812657-8277-11e5-8533-cfd017a371d9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.Dijkstra:69","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.Dijkstra.runAlgo()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:108","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    if (!com.graphhopper.routing.AbstractRoutingAlgorithm.(accept(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge.int)))\n        continue;\n    \n    int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n    int int = com.graphhopper.routing.util.TraversalMode.createTraversalId(com.graphhopper.util.EdgeIterator, false);\n    float float = ((float)((com.graphhopper.routing.util.Weighting.calcWeight(com.graphhopper.util.EdgeIterator, false, com.graphhopper.routing.AStar.AStarEdge.int)) + (com.graphhopper.routing.AStar.AStarEdge.double)));\n    if (java.lang.Double.isInfinite(float))\n        continue;\n    \n    com.graphhopper.routing.AStar.AStarEdge com.graphhopper.routing.AStar.AStarEdge = gnu.trove.map.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.get(int);\n    if ((com.graphhopper.routing.AStar.AStarEdge == null) || ((com.graphhopper.routing.AStar.AStarEdge.double) > float)) {\n        double = com.graphhopper.routing.util.WeightApproximator.approximate(int);\n        double = float + double;\n        if (com.graphhopper.routing.AStar.AStarEdge == null) {\n            com.graphhopper.routing.AStar.AStarEdge = new com.graphhopper.routing.AStar.AStarEdge(com.graphhopper.util.EdgeIterator.getEdge() , int , double , float);\n            gnu.trove.map.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.put(int, com.graphhopper.routing.AStar.AStarEdge);\n        } else {\n            assert (com.graphhopper.routing.AStar.AStarEdge.double) > double : \"Inconsistent distance estimate\";\n            java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.remove(com.graphhopper.routing.AStar.AStarEdge);\n            com.graphhopper.routing.AStar.AStarEdge.int = com.graphhopper.util.EdgeIterator.getEdge();\n            com.graphhopper.routing.AStar.AStarEdge.double = double;\n            com.graphhopper.routing.AStar.AStarEdge.double = float;\n        }\n        com.graphhopper.routing.AStar.AStarEdge.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge;\n        java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.add(com.graphhopper.routing.AStar.AStarEdge);\n        com.graphhopper.routing.AbstractRoutingAlgorithm.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge, int);\n    } \n}"},"status":-1},{"failures":[44],"tindex":"04814d68-8277-11e5-8533-898af6131835","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:913","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.reverse()"},"variableMap":{"pillarNodes":"tmpPoints"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:91","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.PointList.isEmpty())\n    com.graphhopper.util.PointList = new com.graphhopper.util.PointList(com.graphhopper.util.PointList.size() , com.graphhopper.util.PointList.is3D());\n"},"status":-1},{"failures":[45,46,47,48,49,50,51,43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"tindex":"04814d69-8277-11e5-8533-4540757d5141","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.TranslationMap:262","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.TranslationMap.TranslationHashMap.put(java.lang.String, java.lang.String)"},"variableMap":{"this":"trMap","value":"locale","key":"locale"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.TranslationMap:71","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.TranslationMap.TranslationHashMap.doImport(com.graphhopper.util.TranslationMap.com.graphhopper.util.TranslationMap.getResourceAsStream((java.lang.String + \".txt\")))"},"status":-1},{"failures":[69,70,7,9,71,72,73],"tindex":"04814d6a-8277-11e5-8533-b5fa6761af52","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:596","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.DijkstraOneToMany.clear()"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"0480d82d-8277-11e5-8533-b95e6502c5ff","diffs":[{"methodsDiff":{"delete":["java.text.NumberFormat.getInstance"]},"type":"staticDiff"}]},{"transformation":"04812656-8277-11e5-8533-6f8ff13c488c","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.StopWatch.start"]},"type":"staticDiff"}]}]}
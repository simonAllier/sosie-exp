{"failureDictionary":{"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":161,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":208,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":169,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":120,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":137,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":29,"com.graphhopper.reader.OSMReaderTest.testFerry":237,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":226,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":227,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":158,"com.graphhopper.routing.QueryGraphTest.testOneWay":168,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":90,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":261,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":116,"com.graphhopper.reader.OSMReaderTest.testWithBounds":248,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":37,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":150,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":163,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":151,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":175,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":253,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":130,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":89,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":134,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":183,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":47,"com.graphhopper.GraphHopperTest.testPrepare":263,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":207,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":7,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":18,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":171,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":166,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":190,"com.graphhopper.util.InstructionListTest.testWayList":230,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":199,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":229,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":225,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":72,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":155,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":34,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":267,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":115,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":152,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":191,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":196,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":117,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":222,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":252,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":154,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":243,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":80,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":217,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":40,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":48,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":4,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":142,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":66,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":70,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":68,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":67,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":186,"com.graphhopper.GraphHopperTest.testLoadOSM":266,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":124,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":184,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":103,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":21,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":76,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":118,"com.graphhopper.reader.OSMReaderTest.testSort":240,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":202,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":153,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":247,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":5,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":180,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":107,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":108,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":50,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":165,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":212,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":250,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":216,"com.graphhopper.routing.PathTest.testWayList":0,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":36,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":112,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":84,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":213,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":12,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":189,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":160,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":197,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":102,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":55,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":86,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":51,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":11,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":56,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":113,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":17,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":204,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointCount":1,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":221,"com.graphhopper.util.GHUtilityTest.testSort":235,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":35,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":121,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":167,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":194,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":193,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":71,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":138,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":64,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":131,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":73,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":164,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":146,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":268,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":20,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":135,"com.graphhopper.GraphHopperAPITest.testLoad":144,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":265,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":211,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":15,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":149,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":9,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":52,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":156,"com.graphhopper.reader.OSMReaderTest.testBarriers":241,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":43,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":270,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":98,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":32,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":195,"com.graphhopper.util.GHUtilityTest.testCopy":234,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":2,"com.graphhopper.routing.PathTest.testFindInstruction":220,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":187,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":53,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":224,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":60,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":14,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":198,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":136,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":203,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":19,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":69,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":206,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":95,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":61,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":177,"com.graphhopper.reader.PrinctonReaderTest.testRead":251,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":26,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":83,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":57,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":28,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":74,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":6,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":157,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":182,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":62,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":91,"com.graphhopper.util.InstructionListTest.testWayList2":231,"com.graphhopper.reader.OSMReaderTest.testFoot":238,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":46,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":42,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":125,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":170,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":122,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":27,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":123,"com.graphhopper.reader.OSMReaderTest.testOneWay":249,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":78,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":16,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":145,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":24,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":81,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":23,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":38,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":59,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":181,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":8,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":13,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":39,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":242,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":219,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":176,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":109,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":210,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":58,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":92,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":173,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":185,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":132,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":174,"com.graphhopper.routing.PathBidirRefTest.testExtract":214,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":223,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":260,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":147,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":255,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":45,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":259,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":111,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":258,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":44,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":257,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":256,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":129,"com.graphhopper.util.GHUtilityTest.testSort2":233,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":205,"com.graphhopper.reader.OSMReaderTest.testMain":239,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":96,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":63,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":94,"com.graphhopper.routing.PathBidirRefTest.testExtract2":215,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":93,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":143,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":188,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":104,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":126,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":140,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":148,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":114,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":22,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":87,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":88,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":99,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":244,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":65,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":77,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":133,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":209,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":179,"com.graphhopper.storage.GraphHopperStorageTest.testClone":10,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":119,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":25,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":97,"com.graphhopper.util.DouglasPeuckerTest.testPathSimplify":3,"com.graphhopper.GraphHopperTest.testFootAndCar":264,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":75,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":33,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":31,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":82,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":178,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":127,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":101,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":41,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":201,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":54,"com.graphhopper.util.GHUtilityTest.testSortDirected":236,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":85,"com.graphhopper.GraphHopperTest.testPrepareOnly":254,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":139,"com.graphhopper.GraphHopperTest.testVia":262,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":159,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":30,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":200,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":246,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":110,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":100,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":162,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":232,"com.graphhopper.GraphHopperTest.testFootOnly":269,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":105,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":245,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":141,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":106,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":218,"com.graphhopper.util.InstructionListTest.testFind":228,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":192,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":172,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":49,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":79,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":128},"transformations":[{"failures":[0],"tindex":"f8983706-7914-11e5-a874-ef15936748f5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:102","type":"CtInvocationImpl","sourcecode":"java.util.Map<java.lang.String, java.lang.Object>.put(\"interval\", java.util.Arrays.asList(int, int))"},"status":-1},{"failures":[1,2,3,4],"tindex":"f8985e17-7914-11e5-a874-817dd3038e3a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DouglasPeucker:122","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.trimToSize(((com.graphhopper.util.PointList.getSize()) - int))"},"variableMap":{"removed":"indexWithMaxDist","points":"points"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:138","type":"CtForImpl","sourcecode":"for (int int = int + 1 ; int < int ; int++) {\n    double double = com.graphhopper.util.PointList.getLatitude(int);\n    if (java.lang.Double.isNaN(double)) {\n        continue;\n    } \n    double double = com.graphhopper.util.PointList.getLongitude(int);\n    double double = com.graphhopper.util.DistanceCalc.calcNormalizedEdgeDistance(double, double, double, double, double, double);\n    if (double < double) {\n        int = int;\n        double = double;\n    } \n}"},"status":-1},{"failures":[],"tindex":"f8985e18-7914-11e5-a874-09a1f2026585","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.DijkstraOneToMany:218","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.coll.IntDoubleBinHeap = null"},"variableMap":{"heap":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:30","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.IntDoubleBinHeap.this(1000)"},"status":-2},{"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,0,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,4,264,265,266,267,268,269,270],"tindex":"f8988529-7914-11e5-a874-37abb2f6c16e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:531","type":"CtAssignmentImpl","sourcecode":"int = (-int) - 3"},"variableMap":{"id":"E_DIST"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:50","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"status":-1},{"failures":[],"tindex":"f898fa5a-7914-11e5-a874-a1066368aee6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:259","type":"CtAssignmentImpl","sourcecode":"int = int + (int)"},"variableMap":{"i":"com.graphhopper.storage.index.LocationIndexTree.START_POINTER","to":"com.graphhopper.storage.index.LocationIndexTree.START_POINTER","lonSize":"com.graphhopper.storage.index.LocationIndexTree.START_POINTER"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:323","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.LocationIndexTree.InMemConstructionIndex.store(com.graphhopper.storage.index.LocationIndexTree.InMemConstructionIndex.com.graphhopper.storage.index.LocationIndexTree.InMemTreeEntry, com.graphhopper.storage.index.LocationIndexTree.int)"},"status":-2},{"failures":[],"tindex":"f899216b-7914-11e5-a874-6b571a7bcf0e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:188","type":"CtAssignmentImpl","sourcecode":"float[][int] = float[][(int / 2)]"},"variableMap":{"keys":"keys","i":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:126","type":"CtAssignmentImpl","sourcecode":"float[][int] = float[][int]"},"status":-2},{"failures":[],"tindex":"f899216c-7914-11e5-a874-2594686e58dd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:197","type":"CtAssignmentImpl","sourcecode":"double = double * 0.9"},"variableMap":{"maxMCSpeed":"time","speed":"heading_penalty"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FastestWeighting:75","type":"CtOperatorAssignmentImpl","sourcecode":"double += double"},"status":-2},{"failures":[],"tindex":"f899216d-7914-11e5-a874-ff8fcb8705c3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtil:207","type":"CtIfImpl","sourcecode":"if ((long & long) == 0)\n    java.lang.StringBuilder.append('0');\nelse\n    java.lang.StringBuilder.append('1');\n"},"status":-2},{"failures":[],"tindex":"f899216e-7914-11e5-a874-119b6effe9a2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:190","type":"CtAssignmentImpl","sourcecode":"double = -double"},"variableMap":{"eleDelta":"distEstimation","decEleSum":"distEstimation"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:125","type":"CtAssignmentImpl","sourcecode":"double = float + double"},"status":-2},{"failures":[],"tindex":"f899487f-7914-11e5-a874-a52491b6aaf7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:85","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.AStar.AStarEdge = new com.graphhopper.routing.AStar.AStarEdge(com.graphhopper.util.EdgeIterator.int , int , (0 + double) , 0)"},"status":-2},{"failures":[],"tindex":"f8994880-7914-11e5-a874-c35bd02e300a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:126","type":"CtAssignmentImpl","sourcecode":"long = 0"},"variableMap":{"size":"encoded"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:298","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(long, com.graphhopper.routing.util.FootFlagEncoder.int)"},"status":-2},{"failures":[],"tindex":"f8994881-7914-11e5-a874-1b9f43d8142d","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.FootFlagEncoder:370","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(45.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"variableMap":{"weightToPrioMap":"weightToPrioMap","com.graphhopper.routing.util.PriorityCode.WORST":"com.graphhopper.routing.util.PriorityCode.UNCHANGED"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:336","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(0.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"status":-2},{"failures":[],"tindex":"f8994882-7914-11e5-a874-8d50bb2b4d25","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodedValue:94","type":"CtOperatorAssignmentImpl","sourcecode":"long &= long"},"variableMap":{"flags":"acceptBit","mask":"acceptBit"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:190","type":"CtAssignmentImpl","sourcecode":"long = 1L << int"},"status":-2},{"failures":[],"tindex":"f8996f93-7914-11e5-a874-a12206a8255f","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:1060","type":"CtLocalVariableImpl","sourcecode":"boolean boolean"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:236","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = (com.graphhopper.routing.TIntObjectMap<com.graphhopper.storage.EdgeEntry>) == (com.graphhopper.routing.TIntObjectMap<com.graphhopper.storage.EdgeEntry>)"},"status":-2},{"failures":[],"tindex":"f8996f94-7914-11e5-a874-753b4fa08b93","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DouglasPeucker:70","type":"CtLocalVariableImpl","sourcecode":"int int = 500"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:283","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.routing.util.AllEdgesIterator.getBaseNode()"},"status":-2},{"failures":[],"tindex":"f8996f95-7914-11e5-a874-cb57fc00406a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:132","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.DataAccess = new com.graphhopper.storage.SynchedDAWrapper(com.graphhopper.storage.DataAccess)"},"variableMap":{"da":"nodesCH"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:677","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.create(long)"},"status":-2},{"failures":[],"tindex":"f8996f96-7914-11e5-a874-2b78cda4f488","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.DijkstraOneToMany:215","type":"CtAssignmentImpl","sourcecode":"double[] = null"},"variableMap":{"weights":"longitudes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:112","type":"CtAssignmentImpl","sourcecode":"double[] = java.util.Arrays.copyOf(double[], int)"},"status":-2},{"failures":[],"tindex":"f8996f97-7914-11e5-a874-c9a543835055","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:307","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:624","type":"CtReturnImpl","sourcecode":"return 3"},"status":-2},{"failures":[],"tindex":"f89996a8-7914-11e5-a874-ff37a0ef5f53","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:144","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (com.graphhopper.util.InstructionList.(size()) - 1) ; int++) {\n    com.graphhopper.util.Instruction com.graphhopper.util.Instruction = int > 0 ? com.graphhopper.util.InstructionList.get((int - 1)) : null;\n    boolean boolean = com.graphhopper.util.Instruction == null;\n    com.graphhopper.util.Instruction com.graphhopper.util.Instruction = com.graphhopper.util.InstructionList.get((int + 1));\n    com.graphhopper.util.Instruction.checkOne();\n    long = com.graphhopper.util.InstructionList.get(int).fillGPXList(java.util.List<com.graphhopper.util.GPXEntry>, long, com.graphhopper.util.Instruction, com.graphhopper.util.Instruction, boolean);\n}"},"status":-2},{"failures":[],"tindex":"f89996a9-7914-11e5-a874-e32551d5062b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1084","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.storage.index.LocationIndexTree.loadExisting())) {\n    com.graphhopper.GraphHopper.ensureWriteAccess();\n    com.graphhopper.storage.index.LocationIndexTree.prepareIndex();\n} "},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
{"failureDictionary":{"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAccess":10,"com.graphhopper.storage.RAMDataAccessTest.testTrimTo":144,"com.graphhopper.storage.RAMDataAccessTest.testLoadClose":146,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":129,"com.graphhopper.reader.OSMReaderTest.testFerry":21,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":58,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSortHighLevelFirst":108,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":63,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":125,"com.graphhopper.reader.OSMReaderTest.testWithBounds":30,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":66,"com.graphhopper.storage.RAMDataAccessTest.testLoadFlush":147,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":79,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAccess":13,"com.graphhopper.storage.RAMDataAccessTest.testBoundsCheck":139,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":12,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":88,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":77,"com.graphhopper.coll.OSMIDMapTest.testUpdateOfLowerKeys":38,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":93,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":9,"com.graphhopper.storage.SynchedDAWrapperTest.testBoundsCheck":95,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":151,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":82,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":155,"com.graphhopper.GraphHopperTest.testPrepare":15,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":67,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":73,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":50,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":134,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":131,"com.graphhopper.reader.OSMReaderTest.testOneWay":32,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":132,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":59,"com.graphhopper.storage.RAMDataAccessTest.testExceptionIfNoEnsureCapacityWasCalled":142,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":86,"com.graphhopper.storage.SynchedDAWrapperTest.testEnsureCapacity":99,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":124,"com.graphhopper.storage.SynchedDAWrapperTest.testSegments":101,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":51,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":56,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":126,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":25,"com.graphhopper.storage.SynchedDAWrapperTest.testCopy":96,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":26,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":78,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":69,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":118,"com.graphhopper.coll.OSMIDMapTest.testGet":34,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":16,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":75,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":83,"com.graphhopper.routing.util.FootFlagEncoderTest.testAccess":11,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":76,"com.graphhopper.storage.SynchedDAWrapperTest.testTrimTo":100,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":153,"com.graphhopper.coll.OSMIDMapTest.testBinSearch":36,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":149,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":46,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":84,"com.graphhopper.storage.RAMDataAccessTest.testCopy":140,"com.graphhopper.GraphHopperTest.testLoadOSM":18,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":41,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":133,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":112,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":127,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":45,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":44,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":120,"com.graphhopper.reader.OSMReaderTest.testSort":23,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":43,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":42,"com.graphhopper.storage.RAMDataAccessTest.testSegments":145,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":62,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":29,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":138,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":65,"com.graphhopper.storage.SynchedDAWrapperTest.testRenameFlush":97,"com.graphhopper.reader.OSMReaderTest.testMain":22,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":81,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":116,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":117,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":71,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":91,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAccess":6,"com.graphhopper.storage.MMapDataAccessTest.textMixRAM2MMAP":104,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":48,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":121,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":113,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":135,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":123,"com.graphhopper.coll.OSMIDMapTest.testGet2":35,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":72,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":0,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":107,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":49,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":57,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":111,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":31,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":68,"com.graphhopper.storage.GraphHopperStorageCHTest.testPrios":87,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":154,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":5,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":80,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":90,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":122,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":128,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":64,"com.graphhopper.storage.RAMDataAccessTest.testRenameFlush":141,"com.graphhopper.coll.OSMIDSegmentedMapTest.testGet2":2,"com.graphhopper.storage.SynchedDAWrapperTest.testLoadFlush":103,"com.graphhopper.GraphHopperTest.testFootAndCar":47,"com.graphhopper.coll.OSMIDSegmentedMapTest.testGet":1,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAccess":8,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":130,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":54,"com.graphhopper.storage.RAMDataAccessTest.testEnsureCapacity":143,"com.graphhopper.coll.OSMIDMapTest.testGetLong":37,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":53,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":152,"com.graphhopper.util.InstructionListTest.testRoundaboutJsonIntegrity":148,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":89,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":136,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":110,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":61,"com.graphhopper.coll.OSMIDSegmentedMapTest.testZeroKey":3,"com.graphhopper.GraphHopperTest.testVia":14,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":150,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":19,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":85,"com.graphhopper.util.InstructionListTest.testCreateGPXWithEle":4,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":60,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":28,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":119,"com.graphhopper.GraphHopperAPITest.testLoad":39,"com.graphhopper.reader.dem.HeightTileTest.testCalcMean":156,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":17,"com.graphhopper.storage.SynchedDAWrapperTest.testLoadClose":102,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":109,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":92,"com.graphhopper.GraphHopperTest.testFootOnly":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":70,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":114,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":27,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":94,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":33,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":115,"com.graphhopper.reader.OSMReaderTest.testBarriers":24,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":52,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":106,"com.graphhopper.util.GHUtilityTest.testCopy":40,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":55,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":74,"com.graphhopper.storage.SynchedDAWrapperTest.testExceptionIfNoEnsureCapacityWasCalled":98,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":7,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":105,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":137},"transformations":[{"failures":[],"tindex":"218512a4-827d-11e5-a70e-8b39fb3ce21e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:770","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double = double;\n} "},"variableMap":{"min":"maxLat","dist":"maxLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:199","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setHeader((6 * 4), com.graphhopper.util.Helper.degreeToInt(com.graphhopper.util.shapes.BBox.double))"},"status":-2},{"failures":[],"tindex":"218560c5-827d-11e5-a70e-973a7e8b270a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:884","type":"CtIfImpl","sourcecode":"if ((\"fastest\".equalsIgnoreCase(java.lang.String)) || (java.lang.String.isEmpty())) {\n    if (com.graphhopper.routing.util.FlagEncoder.supports(com.graphhopper.routing.util.PriorityWeighting.com.graphhopper.routing.util.PriorityWeighting))\n        return new com.graphhopper.routing.util.PriorityWeighting(com.graphhopper.routing.util.FlagEncoder , com.graphhopper.routing.util.WeightingMap);\n    else\n        return new com.graphhopper.routing.util.FastestWeighting(com.graphhopper.routing.util.FlagEncoder , com.graphhopper.routing.util.WeightingMap);\n    \n} "},"variableMap":{"com.graphhopper.routing.util.PriorityWeighting.class":"com.graphhopper.routing.util.PriorityWeighting.class","weightingMap":"weightingMap","weighting":"weighting","encoder":"encoder"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:881","type":"CtIfImpl","sourcecode":"if (\"shortest\".equalsIgnoreCase(java.lang.String)) {\n    return new com.graphhopper.routing.util.ShortestWeighting(com.graphhopper.routing.util.FlagEncoder);\n} else if ((\"fastest\".equalsIgnoreCase(java.lang.String)) || (java.lang.String.isEmpty())) {\n    if (com.graphhopper.routing.util.FlagEncoder.supports(com.graphhopper.routing.util.PriorityWeighting.com.graphhopper.routing.util.PriorityWeighting))\n        return new com.graphhopper.routing.util.PriorityWeighting(com.graphhopper.routing.util.FlagEncoder , com.graphhopper.routing.util.WeightingMap);\n    else\n        return new com.graphhopper.routing.util.FastestWeighting(com.graphhopper.routing.util.FlagEncoder , com.graphhopper.routing.util.WeightingMap);\n    \n} "},"status":-2},{"failures":[0],"tindex":"218587d6-827d-11e5-a70e-396b96fa6ef2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:499","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.EdgeExplorer = com.graphhopper.storage.Graph.createEdgeExplorer(new com.graphhopper.routing.util.DefaultEdgeFilter(com.graphhopper.routing.util.FlagEncoder , true , false))"},"status":-1},{"failures":[],"tindex":"218587d7-827d-11e5-a70e-ab3f742b1a7a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:119","type":"CtOperatorAssignmentImpl","sourcecode":"double += 2 * (java.lang.Math.double)"},"variableMap":{"orientation":"maxRasterWidth2InMeterNormed","java.lang.Math.PI":"max"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:168","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.DistanceCalc.calcNormalizedDist(((double / (java.lang.Math.sqrt(com.graphhopper.storage.index.Location2IDQuadtree.getCapacity()))) * 2))"},"status":0},{"failures":[],"tindex":"218587d8-827d-11e5-a70e-9396c5524b37","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:675","type":"CtOperatorAssignmentImpl","sourcecode":"long |= long"},"variableMap":{"encoded":"nodeBitMask","backwardBit":"nodeBitMask"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:586","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= int"},"status":0},{"failures":[],"tindex":"218587d9-827d-11e5-a70e-cf1a021d08d3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:148","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.DataAccess instanceof com.graphhopper.storage.MMapDataAccess)\n    com.graphhopper.storage.MMapDataAccess = ((com.graphhopper.storage.MMapDataAccess)(com.graphhopper.storage.DataAccess));\n"},"variableMap":{"mmapDA":"da","da":"da"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:110","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.close()"},"status":-2},{"failures":[1,2,3],"tindex":"2185aeea-827d-11e5-a70e-0f3b23d55245","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.DijkstraOneToMany:114","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.DijkstraOneToMany.int"},"variableMap":{"com.graphhopper.routing.DijkstraOneToMany.NOT_FOUND":"bucketSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:134","type":"CtReturnImpl","sourcecode":"return int * (int)"},"status":-1},{"failures":[4],"tindex":"2185aeeb-827d-11e5-a70e-51785e4fee79","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:221","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<ele>\").append(com.graphhopper.util.Helper.round2(com.graphhopper.util.GPXEntry.getEle())).append(\"<\/ele>\")"},"status":-1},{"failures":[5,6,7,8,9,10,11,12,13],"tindex":"2185aeec-827d-11e5-a70e-03d3145536ca","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:262","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.reader.OSMWay.hasTags()))\n    return false;\n"},"variableMap":{"item":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:173","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : java.util.List<java.lang.String>) {\n    if (java.util.Set<java.lang.String>.contains(com.graphhopper.reader.OSMElement.getTag(java.lang.String, \"\")))\n        return true;\n    \n}"},"status":-1},{"failures":[14,15,16,17,18,19,20,21,22,23,24,25,26,0,27,28,29,30,31,32],"tindex":"2185aeed-827d-11e5-a70e-419f9a3b6fc8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(5);\n} catch (java.lang.InterruptedException iex) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:597","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.PillarInfo.setNode(int, double, double, double)"},"status":-1},{"failures":[21,33],"tindex":"2185d5fe-827d-11e5-a70e-1d88330dbfce","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:81","type":"CtIfImpl","sourcecode":"if (double > (java.lang.Math.double))\n    double -= 2 * (java.lang.Math.double);\n"},"variableMap":{"java.lang.Math.PI":"longTripsSpeed","angleXY":"longTripsSpeed"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:528","type":"CtIfImpl","sourcecode":"if (double > 0)\n    try {\n        java.lang.Number java.lang.Number = com.graphhopper.reader.OSMWay.getTag(\"estimated_distance\", null);\n        if (java.lang.Number != null) {\n            double double = (java.lang.Number.doubleValue()) / 1000;\n            double = java.lang.Math.round(((double / double) / 1.4));\n            if (double > com.graphhopper.routing.util.AbstractFlagEncoder.(getMaxSpeed()))\n                double = com.graphhopper.routing.util.AbstractFlagEncoder.getMaxSpeed();\n            \n            double = double;\n        } \n    } catch (java.lang.Exception ex) {\n    }\n"},"status":-1},{"failures":[1,2,3],"tindex":"2185d5ff-827d-11e5-a70e-a357f684fae2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:517","type":"CtIfImpl","sourcecode":"if (int < (com.graphhopper.reader.OSMReader.int))\n    return (-int) - 3;\n"},"variableMap":{"com.graphhopper.reader.OSMReader.TOWER_NODE":"currentIndex","id":"currentIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:98","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    int = ~int;\n    int--;\n    if (int < 0) {\n        return com.graphhopper.coll.OSMIDSegmentedMap.((int)(getNoEntryValue()));\n    } \n    long long = long[][int];\n    if (long == long) {\n        return int * (int);\n    } \n    com.graphhopper.storage.VLongStorage com.graphhopper.storage.VLongStorage = com.graphhopper.storage.VLongStorage[][int];\n    long long = com.graphhopper.storage.VLongStorage.getPosition();\n    com.graphhopper.storage.VLongStorage.seek(0);\n    int int = (int) == int ? (int) + 1 : int;\n    int int = com.graphhopper.coll.OSMIDSegmentedMap.getNoEntryValue();\n    for (int int = 1 ; int < int ; int++) {\n        long += com.graphhopper.storage.VLongStorage.readVLong();\n        if (long == long) {\n            int = (int * (int)) + int;\n            break;\n        } else if (long > long) {\n            break;\n        } \n    }\n    com.graphhopper.storage.VLongStorage.seek(long);\n    return int;\n} "},"status":-1},{"failures":[34,35,36,37,38,39,40,41,42,43,44,45,46,14,15,16,47,17,18,19,20,21,22,23,24,25,26,0,27,28,29,30,31,32,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147],"tindex":"2185fd10-827d-11e5-a70e-9dde6d85d661","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:149","type":"CtIfImpl","sourcecode":"if (((int) * (int)) < int)\n    (int)++;\n"},"variableMap":{"latSize":"index","size":"bufferIndex","lonSize":"bufferIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:219","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.BitUtil.fromInt(byte[][][int], int, int)"},"status":-1},{"failures":[],"tindex":"2185fd11-827d-11e5-a70e-338e1f3d38da","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:108","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    if (!com.graphhopper.routing.AbstractRoutingAlgorithm.(accept(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge.int)))\n        continue;\n    \n    int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n    int int = com.graphhopper.routing.util.TraversalMode.createTraversalId(com.graphhopper.util.EdgeIterator, false);\n    float float = ((float)((com.graphhopper.routing.util.Weighting.calcWeight(com.graphhopper.util.EdgeIterator, false, com.graphhopper.routing.AStar.AStarEdge.int)) + (com.graphhopper.routing.AStar.AStarEdge.double)));\n    if (java.lang.Double.isInfinite(float))\n        continue;\n    \n    com.graphhopper.routing.AStar.AStarEdge com.graphhopper.routing.AStar.AStarEdge = gnu.trove.map.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.get(int);\n    if ((com.graphhopper.routing.AStar.AStarEdge == null) || ((com.graphhopper.routing.AStar.AStarEdge.double) > float)) {\n        double = com.graphhopper.routing.util.WeightApproximator.approximate(int);\n        double = float + double;\n        if (com.graphhopper.routing.AStar.AStarEdge == null) {\n            com.graphhopper.routing.AStar.AStarEdge = new com.graphhopper.routing.AStar.AStarEdge(com.graphhopper.util.EdgeIterator.getEdge() , int , double , float);\n            gnu.trove.map.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.put(int, com.graphhopper.routing.AStar.AStarEdge);\n        } else {\n            assert (com.graphhopper.routing.AStar.AStarEdge.double) > double : \"Inconsistent distance estimate\";\n            java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.remove(com.graphhopper.routing.AStar.AStarEdge);\n            com.graphhopper.routing.AStar.AStarEdge.int = com.graphhopper.util.EdgeIterator.getEdge();\n            com.graphhopper.routing.AStar.AStarEdge.double = double;\n            com.graphhopper.routing.AStar.AStarEdge.double = float;\n        }\n        com.graphhopper.routing.AStar.AStarEdge.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge;\n        java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.add(com.graphhopper.routing.AStar.AStarEdge);\n        com.graphhopper.routing.AbstractRoutingAlgorithm.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge, int);\n    } \n}"},"status":-1},{"failures":[148],"tindex":"21862422-827d-11e5-a70e-d5300c05b2d6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(5);\n} catch (java.lang.InterruptedException iex) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:95","type":"CtInvocationImpl","sourcecode":"java.util.Map<java.lang.String, java.lang.Object>.putAll(com.graphhopper.util.Instruction.getExtraInfoJSON())"},"status":-1},{"failures":[],"tindex":"21862423-827d-11e5-a70e-812ca031053b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeFlagEncoder:33","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.BikeFlagEncoder.this(4, 2, 0)"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeFlagEncoder:43","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.BikeFlagEncoder.this(((int)(com.graphhopper.util.PMap.getLong(\"speedBits\", 4))), com.graphhopper.util.PMap.getLong(\"speedFactor\", 2), (com.graphhopper.util.PMap.getBool(\"turnCosts\", false) ? 1 : 0))"},"status":0},{"failures":[],"tindex":"21862424-827d-11e5-a70e-e57a789647b5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.FootFlagEncoder:370","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(45.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"variableMap":{"weightToPrioMap":"weightToPrioMap","com.graphhopper.routing.util.PriorityCode.WORST":"com.graphhopper.routing.util.PriorityCode.UNCHANGED"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:166","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(50.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"status":-2},{"failures":[149,150,151,152,153,154,155],"tindex":"21864b35-827d-11e5-a70e-59ded0e19b6d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:203","type":"CtIfImpl","sourcecode":"if (double < 0)\n    double = 0;\n"},"variableMap":{"factor":"tmpLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullIndex:101","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.util.shapes.Circle == null) || (double < (com.graphhopper.util.DistanceCalc.calcDist(com.graphhopper.util.shapes.Circle.getLat(), com.graphhopper.util.shapes.Circle.getLon(), double, double)))) {\n    com.graphhopper.storage.index.QueryResult.setClosestEdge(com.graphhopper.routing.util.AllEdgesIterator.detach(false));\n    com.graphhopper.storage.index.QueryResult.setClosestNode(int);\n    com.graphhopper.storage.index.QueryResult.setQueryDistance(double);\n    if (double <= 0)\n        break;\n    \n    com.graphhopper.util.shapes.Circle = new com.graphhopper.util.shapes.Circle(double , double , double , com.graphhopper.util.DistanceCalc);\n} "},"status":-1},{"failures":[],"tindex":"21867246-827d-11e5-a70e-55ace4aa301f","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMInputFile:85","type":"CtTryImpl","sourcecode":"try {\n    java.io.InputStream = new java.io.BufferedInputStream(new java.io.FileInputStream(java.io.File) , 50000);\n} catch (java.io.FileNotFoundException e) {\n    throw new java.lang.RuntimeException(java.io.FileNotFoundException);\n}"},"variableMap":{"file":"this","e":"this","ips":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:771","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    int int = com.graphhopper.util.EdgeIterator.getBaseNode();\n    int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n    java.lang.String java.lang.String = ((((((((((((((((((((((com.graphhopper.util.EdgeIterator.getEdge()) + \", r.contains(\") + int) + \"):\") + (com.graphhopper.coll.GHBitSet.contains(int))) + \", r.contains(\") + int) + \"):\") + (com.graphhopper.coll.GHBitSet.contains(int))) + \", tr.contains(\") + int) + \"):\") + (com.graphhopper.coll.GHBitSet.contains(int))) + \", tr.contains(\") + int) + \"):\") + (com.graphhopper.coll.GHBitSet.contains(int))) + \", base:\") + int) + \", adj:\") + int) + \", nodeCount:\") + (int);\n    if (int >= (int))\n        throw new java.lang.RuntimeException((\"Adj.node problem with edge \" + java.lang.String));\n    \n    if (int >= (int))\n        throw new java.lang.RuntimeException((\"Base node problem with edge \" + java.lang.String));\n    \n    try {\n        com.graphhopper.util.EdgeExplorer.setBaseNode(int).toString();\n    } catch (java.lang.Exception ex) {\n        org.slf4j.LoggerFactory.getLogger(java.lang.Object.getClass()).error((\"adj:\" + int));\n    }\n    try {\n        com.graphhopper.util.EdgeExplorer.setBaseNode(int).toString();\n    } catch (java.lang.Exception ex) {\n        org.slf4j.LoggerFactory.getLogger(java.lang.Object.getClass()).error((\"base:\" + int));\n    }\n}"},"status":-2},{"failures":[156],"tindex":"21867247-827d-11e5-a70e-9dfd036ca43b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:92","type":"CtIfImpl","sourcecode":"if (int >= (int))\n    throw new java.lang.ArrayIndexOutOfBoundsException((\"index has to be smaller than size \" + (int)));\n"},"variableMap":{"size":"width","index":"daPointer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.HeightTile:115","type":"CtIfImpl","sourcecode":"if (int > 0)\n    int += com.graphhopper.reader.dem.HeightTile.includePoint((int - (2 * (int))), java.util.concurrent.atomic.AtomicInteger);\n"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"218587d7-827d-11e5-a70e-ab3f742b1a7a","diffs":[{"methodsDiff":{"delete":["java.lang.Math.sqrt","com.graphhopper.storage.index.Location2IDQuadtree.getCapacity","com.graphhopper.util.DistanceCalc.calcNormalizedDist"]},"type":"staticDiff"},{"branches":{"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":["com.graphhopper.util.BreadthFirstSearch_void_start(com.graphhopper.util.EdgeExplorer,int).t1","com.graphhopper.util.DistancePlaneProjection_double_calcNormalizedDist(double).b"]},"type":"branch"}]}]}
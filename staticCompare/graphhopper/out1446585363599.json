{"failureDictionary":{"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":10,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":50,"com.graphhopper.reader.OSMReaderTest.testMain":2,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":39,"com.graphhopper.reader.OSMReaderTest.testFerry":0,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":62,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":63,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":48,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":16,"com.graphhopper.storage.MMapDataAccessTest.testCopy":87,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":90,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":29,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":67,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":58,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":46,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":70,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":30,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeightMMap":82,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":35,"com.graphhopper.reader.OSMReaderTest.testWithBounds":11,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":7,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":52,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":34,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeight":83,"com.graphhopper.coll.CompressedArrayTest.testCompress":28,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":56,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":12,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testNoErrorOnEdgeCase_lastIndex":68,"com.graphhopper.coll.OSMIDMapTest.testUpdateOfLowerKeys":85,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":38,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":54,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":69,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":14,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":31,"com.graphhopper.GraphHopperTest.testPrepare":18,"com.graphhopper.GraphHopperTest.testFootAndCar":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":32,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":60,"com.graphhopper.reader.OSMReaderTest.testFoot":1,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":41,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":45,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":42,"com.graphhopper.reader.OSMReaderTest.testOneWay":13,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":43,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":91,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":47,"com.graphhopper.GraphHopperAPITest.testDisconnected179":72,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":55,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":23,"com.graphhopper.coll.BigLongIntMapTest.testPut":79,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":33,"com.graphhopper.GraphHopperTest.testPrepareOnly":15,"com.graphhopper.coll.CompressedArrayTest.testCompress2":27,"com.graphhopper.GraphHopperTest.testVia":17,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":24,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":80,"com.graphhopper.storage.MMapDataAccessTest.testRenameFlush":84,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":9,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":36,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":5,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":65,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":6,"com.graphhopper.GraphHopperAPITest.testLoad":71,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":21,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":64,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":53,"com.graphhopper.GraphHopperTest.testFootOnly":25,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":19,"com.graphhopper.storage.UnsafeDataAccessTest.testCopy":92,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":59,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":8,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":88,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":89,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":61,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":78,"com.graphhopper.reader.OSMReaderTest.testBarriers":4,"com.graphhopper.GraphHopperTest.testLoadOSM":22,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":26,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":40,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":44,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":73,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":51,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":57,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":37,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":77,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":66,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":76,"com.graphhopper.reader.OSMReaderTest.testSort":3,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":75,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":49,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":74,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":81,"com.graphhopper.util.AngleCalcTest.testAtan2":86},"transformations":[{"failures":[],"tindex":"16dc91e7-8270-11e5-bc3e-d3bfaffb7ada","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:474","type":"CtLocalVariableImpl","sourcecode":"int int = int + int"},"variableMap":{"len":"segmentSizePower","start":"segmentSizePower"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:284","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long >>> (int)))"},"status":-2},{"failures":[],"tindex":"16dcb8f8-8270-11e5-bc3e-7f235805fa11","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:191","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(5)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:160","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.QueryResult.setWayIndex((((com.graphhopper.util.PointList.getSize()) - (com.graphhopper.storage.index.QueryResult.getWayIndex())) - 1))"},"status":-2},{"failures":[],"tindex":"16dcb8f9-8270-11e5-bc3e-7bab145c26b3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:57","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.loadProperties(java.util.Map<java.lang.String, java.lang.String>, new java.io.StringReader(new java.lang.String(byte[] , com.graphhopper.util.Helper.java.nio.charset.Charset)))"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"tindex":"16dce00a-8270-11e5-bc3e-a746bcf46fb9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMInputFile:121","type":"CtReturnImpl","sourcecode":"return java.util.zip.ZipInputStream"},"variableMap":{"zip":"ips"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMInputFile:104","type":"CtIfImpl","sourcecode":"if (((byte[][0]) == 31) && ((byte[][1]) == (-117))) {\n    java.io.InputStream.reset();\n    return new java.util.zip.GZIPInputStream(java.io.InputStream , 50000);\n} else if (((((((byte[][0]) == 0) && ((byte[][1]) == 0)) && ((byte[][2]) == 0)) && ((byte[][4]) == 10)) && ((byte[][5]) == 9)) && (((byte[][3]) == 13) || ((byte[][3]) == 14))) {\n    java.io.InputStream.reset();\n    boolean = true;\n    return java.io.InputStream;\n} else if (((byte[][0]) == 'P') && ((byte[][1]) == 'K')) {\n    java.io.InputStream.reset();\n    java.util.zip.ZipInputStream java.util.zip.ZipInputStream = new java.util.zip.ZipInputStream(java.io.InputStream);\n    java.util.zip.ZipInputStream.getNextEntry();\n    return java.util.zip.ZipInputStream;\n} else if ((java.lang.String.endsWith(\".osm\")) || (java.lang.String.endsWith(\".xml\"))) {\n    java.io.InputStream.reset();\n    return java.io.InputStream;\n} else if ((java.lang.String.endsWith(\".bz2\")) || (java.lang.String.endsWith(\".bzip2\"))) {\n    java.lang.String java.lang.String = \"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream\";\n    try {\n        java.lang.Class java.lang.Class = java.lang.Class.forName(java.lang.String);\n        java.io.InputStream.reset();\n        java.lang.reflect.Constructor<java.io.InputStream> java.lang.reflect.Constructor<java.io.InputStream> = java.lang.Class.getConstructor(java.io.InputStream.java.io.InputStream, boolean.boolean);\n        return java.lang.reflect.Constructor<java.io.InputStream>.newInstance(java.io.InputStream, true);\n    } catch (java.lang.Exception e) {\n        throw new java.lang.IllegalArgumentException((\"Cannot instantiate \" + java.lang.String) , java.lang.Exception);\n    }\n} else {\n    throw new java.lang.IllegalArgumentException((\"Input file is not of valid type \" + (java.io.File.getPath())));\n}"},"status":-1},{"failures":[27,28],"tindex":"16dce00b-8270-11e5-bc3e-a90401b97bea","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtilBig:103","type":"CtOperatorAssignmentImpl","sourcecode":"byte |= 1"},"variableMap":{"res":"b"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:150","type":"CtAssignmentImpl","sourcecode":"byte = com.graphhopper.storage.VLongStorage.readByte()"},"status":-1},{"failures":[29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,73,74,75,76,77,78,16,17,18,19,20,21,22,23,24,25,26],"tindex":"16dce00c-8270-11e5-bc3e-b39fc60231b9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:119","type":"CtIfImpl","sourcecode":"if ((int % 2) == 1)\n    int++;\n"},"variableMap":{"numTiles":"shiftSum"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:173","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (byte[].int) ; int++) {\n    int += byte[][int];\n    long *= int[][int];\n}"},"status":-1},{"failures":[79],"tindex":"16dd071d-8270-11e5-bc3e-5751bea40289","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.BigLongIntMap:105","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (gnu.trove.map.hash.TLongIntHashMap[].int) ; int++) {\n    gnu.trove.map.hash.TLongIntHashMap[][int].clear();\n}"},"status":-1},{"failures":[80,81,7],"tindex":"16dd071e-8270-11e5-bc3e-cd5cb9e5864a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.TurnCostExtension:138","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.NodeAccess.setAdditionalNodeField(int, int)"},"status":-1},{"failures":[],"tindex":"16dd071f-8270-11e5-bc3e-b34a123e52c9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:186","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(2000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:190","type":"CtInvocationImpl","sourcecode":"java.io.RandomAccessFile.write(byte[])"},"status":-2},{"failures":[6,82,83],"tindex":"16dd0720-8270-11e5-bc3e-7b101a6efa2d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GHRequest:151","type":"CtIfImpl","sourcecode":"if (!(boolean))\n    throw new java.lang.IllegalStateException((\"Please call empty constructor if you intent to use \" + \"more than two places via addPoint method.\"));\n"},"variableMap":{"possibleToAdd":"forceClean"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:296","type":"CtIfImpl","sourcecode":"if (boolean)\n    com.graphhopper.util.Helper.cleanHack();\n"},"status":-1},{"failures":[84],"tindex":"16dd0721-8270-11e5-bc3e-b7cd816fe06a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:465","type":"CtInvocationImpl","sourcecode":"super.rename(java.lang.String)"},"status":-1},{"failures":[85],"tindex":"16dd0722-8270-11e5-bc3e-19d0a6ec14d4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.VLongStorage:90","type":"CtOperatorAssignmentImpl","sourcecode":"long >>>= 7"},"variableMap":{"i":"key"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDMap:86","type":"CtAssignmentImpl","sourcecode":"long = long"},"status":-1},{"failures":[],"tindex":"16dd0723-8270-11e5-bc3e-07b547f40887","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.RacingBikeFlagEncoder:157","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(110.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"variableMap":{"weightToPrioMap":"weightToPrioMap","com.graphhopper.routing.util.PriorityCode.PREFER":"com.graphhopper.routing.util.PriorityCode.PREFER"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:168","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(90.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"status":-2},{"failures":[5,6],"tindex":"16dd2e34-8270-11e5-bc3e-effab2a79377","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:81","type":"CtOperatorAssignmentImpl","sourcecode":"double -= 2 * (java.lang.Math.double)"},"variableMap":{"java.lang.Math.PI":"ele","angleXY":"ele"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:769","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.PointList.getElevation(int)"},"status":-1},{"failures":[86],"tindex":"16dd2e35-8270-11e5-bc3e-bb372f60f46c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:103","type":"CtAssignmentImpl","sourcecode":"double = double - (2 * (java.lang.Math.double))"},"variableMap":{"resultOrientation":"angle","orientation":"r","java.lang.Math.PI":"angle"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:52","type":"CtOperatorAssignmentImpl","sourcecode":"double += (((0.1963 * double) * double) - 0.9817) * double"},"status":-1},{"failures":[],"tindex":"16dd2e36-8270-11e5-bc3e-97c19372991a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.MapEntry:92","type":"CtLocalVariableImpl","sourcecode":"int int = 7"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:260","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.storage.Graph.getNodes()"},"status":-2},{"failures":[4,5,9],"tindex":"16dd2e37-8270-11e5-bc3e-63a209f524da","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMNode:42","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.OSMNode.readTags(javax.xml.stream.XMLStreamReader)"},"status":-1},{"failures":[87,88,89,90,91,92],"tindex":"16dd2e38-8270-11e5-bc3e-d5f00910b7e2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:1106","type":"CtIfImpl","sourcecode":"if ((int) == (com.graphhopper.storage.EdgeAccess.int))\n    continue;\n"},"variableMap":{"baseNode":"segSize","com.graphhopper.storage.EdgeAccess.NO_NODE":"segSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:151","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.AbstractDataAccess.isIntBased()) {\n    for (int int = 0 ; int < int ; int += 4) {\n        com.graphhopper.util.BitUtil.fromInt(byte[], com.graphhopper.storage.DataAccess.getInt((long + int)), int);\n    }\n} else {\n    com.graphhopper.storage.DataAccess.getBytes(long, byte[], int);\n}"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":18,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
{"failureDictionary":{"com.graphhopper.routing.util.FootFlagEncoderTest.testPriority":86,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":181,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":204,"com.graphhopper.routing.util.EncodedDoubleValueTest.testMaxValueAndSwap":96,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":294,"com.graphhopper.GraphHopperAPITest.testNoLoad":525,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":399,"com.graphhopper.reader.OSMReaderTest.testFerry":506,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":484,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":485,"com.graphhopper.storage.GraphHopperStorageCHTest.testDoThrowExceptionIfDimDoesNotMatch":249,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":51,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testService":103,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":224,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":38,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidanceOfHighMaxSpeed":102,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":41,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":421,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":455,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":11,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeight":536,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testReduceToMaxSpeed":109,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":240,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":395,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":148,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testNoErrorOnEdgeCase_lastIndex":331,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":419,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":371,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":216,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":273,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":156,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":275,"com.graphhopper.GraphHopperTest.testPrepare":226,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":180,"com.graphhopper.storage.GraphStorageViaMMapTest.testInfinityWeight":431,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":143,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":378,"com.graphhopper.routing.util.BikeFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":48,"com.graphhopper.GHRequestTest.testCorrectInit":526,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":172,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":497,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNormedDist":299,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":110,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":493,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":15,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":237,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":101,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":46,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":164,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":169,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":370,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":337,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":196,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":512,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":480,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":52,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":188,"com.graphhopper.GraphHopperTest.testNoNPE_ifLoadNotSuccessful":236,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":159,"com.graphhopper.GraphHopperTest.testLoadOSM":230,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":345,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":320,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":252,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":338,"com.graphhopper.routing.util.EncodingManagerTest.testEncoderAcceptNoException":138,"com.graphhopper.reader.OSMReaderTest.testSort":509,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":13,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":518,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":270,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":439,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":390,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":353,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijection":532,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":432,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":209,"com.graphhopper.routing.DijkstraTest.initializationError":142,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":503,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":187,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":476,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeReturn":284,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":367,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBits":145,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":162,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":437,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":394,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":267,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":450,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":26,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":445,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":80,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":332,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":355,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":291,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":375,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":177,"com.graphhopper.routing.util.FastestWeightingTest.testWeightWrongHeading":6,"com.graphhopper.GraphHopperTest.testFailsForMissingParameters":231,"com.graphhopper.reader.dem.SRTMProviderTest.testGetFileString":535,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":29,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":407,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":167,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":166,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":214,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":459,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":448,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":465,"com.graphhopper.routing.util.FootFlagEncoderTest.testRailPlatformIssue366":89,"com.graphhopper.util.AngleCalcTest.testCalcAzimuth":2,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdentical":442,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":380,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":68,"com.graphhopper.storage.GraphHopperStorageCHTest.testBigDataEdge":250,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSetSpeed0_issue367":17,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":292,"com.graphhopper.storage.GraphHopperStorageCHTest.testNoCreateCalled":253,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":456,"com.graphhopper.GraphHopperAPITest.testLoad":523,"com.graphhopper.routing.util.FootFlagEncoderTest.testBarrierAccess":82,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":372,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":362,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testParseDuration":537,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":16,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":446,"com.graphhopper.reader.OSMReaderTest.testBarriers":510,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testclassBicycle":27,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes":271,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_withCosts":31,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":168,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":403,"com.graphhopper.util.GHUtilityTest.testCopy":488,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":75,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAccess":111,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testNoErrorOnEdgeCase_lastIndex":296,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPriority":106,"com.graphhopper.routing.PathTest.testFindInstruction":194,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPreferenceForSlowSpeed":42,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":447,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":91,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":25,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":293,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":391,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":376,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":474,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":486,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":150,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":460,"com.graphhopper.util.shapes.CircleTest.testContainsCircle":527,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":36,"com.graphhopper.routing.DijkstraBidirectionRefTest.initializationError":141,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":245,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":155,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":358,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":404,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":278,"com.graphhopper.storage.GraphHopperStorageCHTest.testBounds":279,"com.graphhopper.util.InstructionListTest.testWayList2":502,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":323,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":40,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":427,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":346,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":396,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijectionBug2":530,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":451,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":49,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":255,"com.graphhopper.routing.util.FastestWeightingTest.testMinWeightHasSameUnitAs_getWeight":5,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":47,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":479,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":18,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetLocations":268,"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":354,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_withCosts":54,"com.graphhopper.routing.util.CarFlagEncoderTest.testMilitaryAccess":115,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":413,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":457,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":300,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":361,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":511,"com.graphhopper.routing.AStarTest.initializationError":4,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":183,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":454,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":280,"com.graphhopper.routing.util.FootFlagEncoderTest.testAccess":92,"com.graphhopper.routing.PathBidirRefTest.testExtract":198,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTram":55,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":223,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":218,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":341,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnsureSize":247,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":426,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":222,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":482,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":221,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":329,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":98,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":220,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":425,"com.graphhopper.routing.util.BikeFlagEncoderTest.testBarrierAccess":45,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":219,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":351,"com.graphhopper.util.GHUtilityTest.testSort2":487,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":178,"com.graphhopper.reader.OSMReaderTest.testMain":508,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":119,"com.graphhopper.storage.GraphHopperStorageCHTest.testInfinityWeight":287,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPriority":56,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":464,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":282,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAccess":62,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":281,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":118,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":429,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBigDataEdge":441,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":8,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":269,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPriority":33,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":469,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":23,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":520,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":254,"com.graphhopper.storage.GraphHopperStorageTest.testClone":364,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":397,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":428,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":126,"com.graphhopper.storage.GraphHopperStorageCHTest.testCheckFirstNode":277,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":124,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":374,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAccess":78,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":405,"com.graphhopper.routing.PathTest.testTime":190,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidMotorway":74,"com.graphhopper.util.InstructionListTest.testCreateGPX":501,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":261,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed":132,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNoErrorOnEdgeCase_lastIndex":304,"com.graphhopper.util.InstructionListTest.testRoundaboutJsonIntegrity":496,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":348,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":418,"com.graphhopper.reader.OSMReaderTest.testRelation":515,"com.graphhopper.util.GHUtilityTest.testSortDirected":491,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":266,"com.graphhopper.util.InstructionListTest.testCreateGPXWithEle":499,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":206,"com.graphhopper.GraphHopperTest.testFootOnly":234,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":322,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidTunnel":99,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":121,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":301,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":191,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":137,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":165,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":144,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":21,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":256,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":350,"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":414,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":213,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":340,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":201,"com.graphhopper.routing.QueryGraphTest.testOneWay":212,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":349,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":274,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":531,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTram":105,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSortHighLevelFirst":315,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeightMMap":534,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":336,"com.graphhopper.routing.util.EncodingManagerTest.testToDetailsStringIncludesEncoderVersionNumber":133,"com.graphhopper.reader.OSMReaderTest.testWithBounds":519,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAccess":39,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":10,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":207,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":411,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testInfinityWeight":478,"com.graphhopper.routing.util.FootFlagEncoderTest.testBasics":93,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":420,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":136,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":317,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testSacScale":66,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testReduceToMaxSpeed":37,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":112,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":307,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":468,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetAccess":122,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":312,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":430,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":461,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":360,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":210,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":163,"com.graphhopper.storage.GraphHopperStorageTest.testInfinityWeight":393,"com.graphhopper.util.InstructionListTest.testWayList":498,"com.graphhopper.util.InstructionTest.testCalcAzimuthAndGetDirection":3,"com.graphhopper.routing.util.BikeFlagEncoderTest.testSacScale":43,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":264,"com.graphhopper.GraphHopperAPITest.testDisconnected179":524,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":406,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":232,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBounds":470,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":334,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":12,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPreferenceForSlowSpeed":65,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed0_issue367":123,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":401,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidTunnel":34,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":505,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdentical":251,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":14,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":258,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":117,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":417,"com.graphhopper.routing.util.BikeFlagEncoderTest.testReduceToMaxSpeed":60,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":434,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":227,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":366,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":302,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":471,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":477,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":473,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":472,"com.graphhopper.routing.util.FootFlagEncoderTest.handleWayTagsRoundabout":83,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":157,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":44,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":384,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":383,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":175,"com.graphhopper.routing.DijkstraOneToManyTest.initializationError":140,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":153,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_noCosts":127,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":325,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testSetSpeed0_issue367":95,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":326,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTram":71,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":61,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":443,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":185,"com.graphhopper.storage.GraphHopperStorageTest.testNoCreateCalled":359,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":64,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":352,"com.graphhopper.routing.PathTest.testWayList":193,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPriority":72,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":433,"com.graphhopper.routing.util.CarFlagEncoderTest.testFordAccess":120,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":330,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":410,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":263,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":186,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":170,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":203,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":335,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":319,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPropertiesWithNoInit":467,"com.graphhopper.storage.GraphHopperStorageCHTest.testPrios":238,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":59,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":377,"com.graphhopper.routing.util.FootFlagEncoderTest.testGetSpeed":84,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":242,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":365,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":452,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testBarrierAccess":22,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":69,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":195,"com.graphhopper.util.GHUtilityTest.testSort":489,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":211,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":342,"com.graphhopper.storage.GraphStorageViaMMapTest.testBounds":423,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":288,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidMotorway":58,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testBarrierAccess":104,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":363,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNoCreateCalled":444,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":481,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":295,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":305,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":308,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":241,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":28,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":208,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":285,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":19,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":306,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":233,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":438,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":440,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testBarrierAccess":67,"com.graphhopper.routing.util.FastestWeightingTest.testSpeed0":7,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":229,"com.graphhopper.routing.util.FootFlagEncoderTest.testTurnFlagEncoding_noCostsAndRestrictions":90,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":184,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":462,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":9,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":246,"com.graphhopper.routing.PathTest.testFound":189,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":424,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":139,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":235,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":313,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPreferenceForSlowSpeed":113,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidTunnel":57,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":160,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":492,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":458,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":409,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":369,"com.graphhopper.util.InstructionListTest.testEmptyList":495,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":171,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testReduceToMaxSpeed":76,"com.graphhopper.routing.util.CarFlagEncoderTest.testSwapDir":131,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":176,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetToMaxSpeed":116,"com.graphhopper.util.DistanceCalcEarthTest.testDistance":528,"com.graphhopper.routing.util.CarFlagEncoderTest.testBarrierAccess":114,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":379,"com.graphhopper.storage.GraphHopperStorageCHTest.testFlags":260,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":179,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":283,"com.graphhopper.reader.PrinctonReaderTest.testRead":504,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":392,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":262,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":453,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":408,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":529,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":466,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":398,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":200,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes2":257,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTram":32,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":108,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":463,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPreferenceForSlowSpeed":81,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidTunnel":73,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":24,"com.graphhopper.routing.util.BikeFlagEncoderTest.testclassBicycle":50,"com.graphhopper.reader.OSMReaderTest.testFoot":507,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":215,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":422,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":343,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":533,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testSacScale":97,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":289,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":344,"com.graphhopper.reader.OSMReaderTest.testOneWay":522,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":373,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":259,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":388,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":387,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":475,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidMotorway":107,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":154,"com.graphhopper.storage.GraphHopperStorageTest.testPropertiesWithNoInit":382,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSacScale":20,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":368,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":416,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":192,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":149,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":327,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":53,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxValue":125,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":146,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":158,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":147,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":309,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":483,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":85,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testclassBicycle":100,"com.graphhopper.storage.GraphHopperStorageTest.testIdentical":357,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":412,"com.graphhopper.routing.util.EncodingManagerTest.testSupportFords":134,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":205,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":286,"com.graphhopper.storage.GraphHopperStorageTest.testBigDataEdge":356,"com.graphhopper.reader.OSMReaderTest.testEstimatedCenter":521,"com.graphhopper.util.InstructionListTest.testRoundaboutJsonNaN":500,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":243,"com.graphhopper.routing.PathBidirRefTest.testExtract2":199,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":303,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":161,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":321,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":77,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":298,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":347,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":333,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":386,"com.graphhopper.storage.index.Location2IDFullIndexTest.testNoErrorOnEdgeCase_lastIndex":310,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":79,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":272,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":314,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":513,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":87,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":435,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":182,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":311,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidMotorway":35,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":152,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":239,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":339,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":290,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":389,"com.graphhopper.util.GHUtilityTest.testEdgeStuff":490,"com.graphhopper.routing.util.CarFlagEncoderTest.testRegisterOnlyOnceAllowed":128,"com.graphhopper.GraphHopperTest.testFootAndCar":228,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":381,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":30,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":248,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":70,"com.graphhopper.util.AngleCalcTest.checkAzimuthConsitency":1,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibility":135,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":402,"com.graphhopper.routing.util.CarFlagEncoderTest.testOneway":129,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_withCosts":130,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":151,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":318,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":174,"com.graphhopper.storage.GraphHopperStorageCHTest.testPropertiesWithNoInit":276,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":449,"com.graphhopper.GraphHopperTest.testPrepareOnly":217,"com.graphhopper.GraphHopperTest.testVia":225,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":297,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":63,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":202,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":400,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":173,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":517,"com.graphhopper.reader.OSMReaderTest.testTurnFlagCombination":516,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":328,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":316,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":244,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":0,"com.graphhopper.storage.GraphHopperStorageTest.testBounds":385,"com.graphhopper.routing.util.FootFlagEncoderTest.testCombined":88,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":514,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":324,"com.graphhopper.routing.AStarBidirectionTest.initializationError":197,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":265,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":415,"com.graphhopper.util.InstructionListTest.testFind":494,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":94,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":436},"transformations":[{"failures":[0,1,2,3],"tindex":"13767efb-82c1-11e5-917f-ad90f42eb976","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.FastestWeighting:60","type":"CtReturnImpl","sourcecode":"return double / (double)"},"variableMap":{"distance":"orientation","maxSpeed":"orientation"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:121","type":"CtReturnImpl","sourcecode":"return java.lang.Math.toDegrees(double)"},"status":-1},{"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,200,201,201,202,202,203,203,204,204,205,205,206,206,207,207,208,208,209,209,210,210,211,211,212,212,213,213,214,214,215,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,0,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525],"tindex":"1376cd1c-82c1-11e5-917f-fd10399dedc9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:209","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>.add(com.graphhopper.routing.util.AbstractFlagEncoder)"},"status":-1},{"failures":[94],"tindex":"1377695d-82c1-11e5-917f-4d6964ae3ef7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:571","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"class:bicycle\")"},"variableMap":{"way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:134","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"highway\")"},"status":-1},{"failures":[226,227,228,229,230,233,234,526,523],"tindex":"1377906e-82c1-11e5-917f-39eda73641ba","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GHRequest:51","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GHRequest.this(5)"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GHRequest:77","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GHRequest.this(new com.graphhopper.util.shapes.GHPoint(double , double), new com.graphhopper.util.shapes.GHPoint(double , double))"},"status":-1},{"failures":[],"tindex":"1377906f-82c1-11e5-917f-6984f6543611","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:230","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"13779070-82c1-11e5-917f-53a85886989d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:169","type":"CtIfImpl","sourcecode":"if ((int == (com.graphhopper.util.EdgeIterator.int)) || (int == (com.graphhopper.util.EdgeIterator.int)))\n    throw new java.lang.IllegalArgumentException(\"from and to edge cannot be NO_EDGE\");\n"},"variableMap":{"com.graphhopper.util.EdgeIterator.NO_EDGE":"from","edgeTo":"from","edgeFrom":"from"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:86","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.routing.util.TraversalMode.isEdgeBased())) {\n    gnu.trove.map.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.put(int, com.graphhopper.routing.AStar.AStarEdge);\n} "},"status":-1},{"failures":[],"tindex":"1377b781-82c1-11e5-917f-c9dcb8183a56","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:199","type":"CtIfImpl","sourcecode":"if (int > 1000)\n    throw new java.lang.IllegalStateException(\"something went wrong: there seems to be no end of the turn cost-list!?\");\n"},"variableMap":{"i":"bucketSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:63","type":"CtIfImpl","sourcecode":"if ((int) >= (int)) {\n    (int)++;\n    int = 0;\n} "},"status":0},{"failures":[119,129,225,228,506,507,520,522],"tindex":"1377b782-82c1-11e5-917f-4f705dd845ea","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:278","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException(\"Call loadExisting only once\");\n"},"variableMap":{"initialized":"isBackward"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:274","type":"CtIfImpl","sourcecode":"if (boolean)\n    long |= long;\nelse\n    long |= long;\n"},"status":-1},{"failures":[],"tindex":"1377b783-82c1-11e5-917f-9fe7f30f5081","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:472","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    return 0;\n"},"variableMap":{"str":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PMap:96","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.util.Helper.isEmpty(java.lang.String))) {\n    try {\n        return java.lang.Integer.parseInt(java.lang.String);\n    } catch (java.lang.Exception ex) {\n    }\n} "},"status":0},{"failures":[160,163,164,168,172,176,177,179,180,183,185,186,225,228,292,293,294,295,297,298,302,329,347,527,501,528,506,508,514,519,521,529,530,531,532,533],"tindex":"1377b784-82c1-11e5-917f-7ff7a8232379","series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:164","type":"CtLocalVariableImpl","sourcecode":"double double = (double + double) / 2"},"variableMap":{"maxLatTmp":"toLat","minLatTmp":"toLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:53","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Math.java.lang.Math.sin((java.lang.Math.(java.lang.Math.toRadians((double - double))) / 2))"},"status":-1},{"failures":[143,146,153,154,155,159,160,162,163,164,165,166,167,169,170,172,173,175,177,178,179,180,183,184,186,218,219,220,221,222,223,225,227,229,233,234,523],"tindex":"1377de95-82c1-11e5-917f-fd130efe59cc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:154","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:157","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.DijkstraBidirectionRef.fillEdges(com.graphhopper.storage.EdgeEntry, java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>, gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry>, com.graphhopper.util.EdgeExplorer, false)"},"status":-1},{"failures":[534,535,536],"tindex":"1377de96-82c1-11e5-917f-5f02b3798591","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.Path:110","type":"CtIfImpl","sourcecode":"if ((int) < 0)\n    throw new java.lang.IllegalStateException(\"Call extract() before retrieving fromNode\");\n"},"variableMap":{"fromNode":"minLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:209","type":"CtIfImpl","sourcecode":"if (int < 10)\n    java.lang.String += \"0\";\n"},"status":-1},{"failures":[146,148,152,154,155,156,158,159,162,163,164,167,180,183,184,186],"tindex":"1377de97-82c1-11e5-917f-d1796d34e451","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:199","type":"CtIfImpl","sourcecode":"if (int > 1000)\n    throw new java.lang.IllegalStateException(\"something went wrong: there seems to be no end of the turn cost-list!?\");\n"},"variableMap":{"i":"tmpNewShortcuts"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:655","type":"CtForEachImpl","sourcecode":"NEXT_SC : for (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut : java.util.Map<com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut>.keySet()) {\n    boolean boolean = false;\n    com.graphhopper.util.CHEdgeIterator com.graphhopper.util.CHEdgeIterator = com.graphhopper.util.CHEdgeExplorer.setBaseNode(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n    while (com.graphhopper.util.CHEdgeIterator.next()) {\n        if (((com.graphhopper.util.CHEdgeIterator.isShortcut()) && ((com.graphhopper.util.CHEdgeIterator.getAdjNode()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) && (com.graphhopper.util.CHEdgeIterator.canBeOverwritten(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long))) {\n            if ((com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double) >= (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.CHEdgeIterator, false, com.graphhopper.util.EdgeIterator.int)))\n                continue NEXT_SC;\n            \n            if (((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) || ((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) {\n                throw new java.lang.IllegalStateException((((((((((((((((((\"Shortcut cannot update itself! \" + (com.graphhopper.util.CHEdgeIterator.getEdge())) + \", skipEdge1:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", skipEdge2:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", edge \") + com.graphhopper.util.CHEdgeIterator) + \":\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.CHEdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", sc:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut) + \", skippedEdge1: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", skippedEdge2: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", neighbors:\") + (com.graphhopper.util.GHUtility.getNeighbors(com.graphhopper.util.CHEdgeIterator))));\n            } \n            com.graphhopper.util.CHEdgeIterator.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n            com.graphhopper.util.CHEdgeIterator.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n            com.graphhopper.util.CHEdgeIterator.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n            com.graphhopper.util.CHEdgeIterator.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n            com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIterator.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n            boolean = true;\n            break;\n        } \n    }\n    if (!boolean) {\n        com.graphhopper.util.CHEdgeIteratorState com.graphhopper.util.CHEdgeIteratorState = com.graphhopper.storage.CHGraphImpl.shortcut(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        com.graphhopper.util.CHEdgeIteratorState.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n        com.graphhopper.util.CHEdgeIteratorState.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIteratorState.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIteratorState.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIteratorState.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        int++;\n    } \n}"},"status":-1},{"failures":[],"tindex":"13782cb8-82c1-11e5-917f-c52c419d18d3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:180","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    int int = ((int)((java.lang.Math.log(int)) / (java.lang.Math.log(2))));\n    int = java.lang.Math.max(((int)(java.lang.Math.pow(2, int))), com.graphhopper.storage.AbstractDataAccess.int);\n} "},"variableMap":{"com.graphhopper.storage.AbstractDataAccess.SEGMENT_SIZE_MIN":"start","bytes":"start","segmentSizeInBytes":"start"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:98","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n    if ((int[][int]) == 0) {\n        java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>.push(com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.resumeState(int, com.graphhopper.util.EdgeIterator));\n        java.util.Stack<com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState>.push(com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm.TarjanState.startState(int));\n        continue nextState;\n    } else if (com.graphhopper.coll.GHBitSetImpl.contains(int)) {\n        int[][int] = java.lang.Math.min(int[][int], int[][int]);\n    } \n}"},"status":-2},{"failures":[537],"tindex":"13782cb9-82c1-11e5-917f-83f82fe3bf1b","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:54","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"variableMap":{"maxLeafEntries":"minutes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:496","type":"CtAssignmentImpl","sourcecode":"int = ((java.lang.Integer.parseInt(java.lang.String)) * 60) * 24"},"status":-1},{"failures":[],"tindex":"13782cba-82c1-11e5-917f-637f95bd5b99","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:112","type":"CtIfImpl","sourcecode":"if (boolean)\n    return com.graphhopper.routing.util.BikeCommonFlagEncoder.setBool(com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(long, 0), com.graphhopper.routing.util.AbstractFlagEncoder.int, false);\n"},"status":0},{"failures":[26,49,83,119,187,188,191,192,195,196],"tindex":"137853cb-82c1-11e5-917f-e7daf3cdddba","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.EdgeIterator:59","type":"CtReturnImpl","sourcecode":"return int > (com.graphhopper.util.EdgeIterator.int)"},"variableMap":{"com.graphhopper.util.EdgeIterator.NO_EDGE":"com.graphhopper.routing.util.FlagEncoder.K_ROUNDABOUT","edgeId":"key"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:729","type":"CtSwitchImpl","sourcecode":"switch (int) {\n    case com.graphhopper.routing.util.AbstractFlagEncoder.int :\n        return com.graphhopper.routing.util.AbstractFlagEncoder.isForward(long);\n    case com.graphhopper.routing.util.AbstractFlagEncoder.int :\n        return com.graphhopper.routing.util.AbstractFlagEncoder.isBackward(long);\n    case com.graphhopper.routing.util.FlagEncoder.int :\n        return (long & (long)) != 0;\n    default :\n        throw new java.lang.IllegalArgumentException(((\"Unknown key \" + int) + \" for boolean value\"));\n}"},"status":-1},{"failures":[537,121,506],"tindex":"137853cc-82c1-11e5-917f-f1cdc3354478","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.TranslationMap:130","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.Helper.isEmpty(java.lang.String))\n    return 0;\n"},"variableMap":{"phrase":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:475","type":"CtTryImpl","sourcecode":"try {\n    if (java.lang.String.startsWith(\"P\"))\n        return 0;\n    \n    int int = java.lang.String.indexOf(\":\");\n    if (int > 0) {\n        java.lang.String java.lang.String = java.lang.String.substring(0, int);\n        java.lang.String java.lang.String = java.lang.String.substring((int + 1));\n        int = java.lang.String.indexOf(\":\");\n        int int = 0;\n        if (int > 0) {\n            java.lang.String java.lang.String = java.lang.String;\n            java.lang.String = java.lang.String.substring(0, int);\n            java.lang.String = java.lang.String.substring((int + 1));\n            int = ((java.lang.Integer.parseInt(java.lang.String)) * 60) * 24;\n        } \n        int += (java.lang.Integer.parseInt(java.lang.String)) * 60;\n        int += java.lang.Integer.parseInt(java.lang.String);\n        return int;\n    } else {\n        return java.lang.Integer.parseInt(java.lang.String);\n    }\n} catch (java.lang.Exception ex) {\n    com.graphhopper.routing.util.AbstractFlagEncoder.org.slf4j.Logger.warn(((\"Cannot parse \" + java.lang.String) + \" using 0 minutes\"));\n}"},"status":-1},{"failures":[],"tindex":"137853cd-82c1-11e5-917f-1bab7fcd8c41","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:296","type":"CtIfImpl","sourcecode":"if (boolean)\n    com.graphhopper.util.Helper.cleanHack();\n"},"variableMap":{"forceClean":"finishedTo"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AbstractBidirAlgo:77","type":"CtIfImpl","sourcecode":"if (!(boolean)) {\n    boolean = !com.graphhopper.routing.AbstractBidirAlgo.(fillEdgesFrom());\n} else {\n    boolean = !com.graphhopper.routing.AbstractBidirAlgo.(fillEdgesTo());\n}"},"status":-2},{"failures":[152,154,155,156,157,158,172,184,186],"tindex":"13787ade-82c1-11e5-917f-1b83e4fdc28b","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:147","type":"CtIfImpl","sourcecode":"if ((int++) > 1000) {\n    throw new java.lang.IllegalStateException(\"Something unexpected happened. A node probably will not have 1000+ relations.\");\n} "},"variableMap":{"i":"node"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:220","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.GHTreeMapComposed.insert(int, int)"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"1377b781-82c1-11e5-917f-c9dcb8183a56","diffs":[{"branchesDiff":{"delete":["t0"]},"type":"staticDiff"}]},{"transformation":"13782cba-82c1-11e5-917f-637f95bd5b99","diffs":[{"methodsDiff":{"delete":["com.graphhopper.routing.util.BikeCommonFlagEncoder.setBool","com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue"]},"branchesDiff":{"delete":["t0"]},"type":"staticDiff"}]}]}
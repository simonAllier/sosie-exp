{"failureDictionary":{"com.graphhopper.util.GHUtilityTest.testSort2":25,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":89,"com.graphhopper.reader.OSMReaderTest.testMain":36,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":80,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":19,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":67,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":68,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":29,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":30,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":31,"com.graphhopper.storage.RAMIntDataAccessTest.testHeader":17,"com.graphhopper.storage.RAMDataAccessTest.testHeader":18,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":10,"com.graphhopper.storage.MMapDataAccessTest.testHeader":13,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":72,"com.graphhopper.util.BitUtilLittleTest.testBitString2Long":0,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":64,"com.graphhopper.storage.UnsafeDataAccessTest.testHeader":16,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":86,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":74,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":46,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":76,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":24,"com.graphhopper.storage.SynchedDAWrapperTest.testHeader":12,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":59,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":62,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":9,"com.graphhopper.storage.GraphHopperStorageTest.testClone":45,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":73,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":79,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":20,"com.graphhopper.util.BitUtilBigTest.testReverse":3,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":56,"com.graphhopper.GraphHopperTest.testPrepare":50,"com.graphhopper.GraphHopperTest.testFootAndCar":52,"com.graphhopper.util.BitUtilBigTest.testBitString2Long":2,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":57,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":11,"com.graphhopper.util.GHUtilityTest.testSort":27,"com.graphhopper.storage.MMapDataAccessTest.testSet_GetBytes":48,"com.graphhopper.search.NameIndexTest.testFlush":8,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":81,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":85,"com.graphhopper.routing.util.EncodingManagerTest.testFixWayName":37,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":82,"com.graphhopper.util.InstructionListTest.testWayList":33,"com.graphhopper.util.InstructionListTest.testCreateGPX":34,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":83,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":43,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":32,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":87,"com.graphhopper.GraphHopperAPITest.testDisconnected179":22,"com.graphhopper.util.BitUtilLittleTest.testReverse":1,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":61,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":6,"com.graphhopper.util.GHUtilityTest.testSortDirected":28,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":41,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":75,"com.graphhopper.GraphHopperTest.testPrepareOnly":4,"com.graphhopper.GraphHopperTest.testVia":49,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":7,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":15,"com.graphhopper.util.InstructionListTest.testCreateGPXWithEle":47,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":77,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":70,"com.graphhopper.GraphHopperAPITest.testLoad":21,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":38,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":69,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":60,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":39,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":35,"com.graphhopper.GraphHopperTest.testFootOnly":53,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":40,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":51,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":65,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":42,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":66,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":23,"com.graphhopper.reader.OSMReaderTest.testBarriers":55,"com.graphhopper.GraphHopperTest.testLoadOSM":5,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":44,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":84,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":58,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":63,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":78,"com.graphhopper.util.GHUtilityTest.testCopy":26,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":71,"com.graphhopper.reader.OSMReaderTest.testSort":54,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":14,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":88},"transformations":[{"failures":[],"tindex":"f23f56d1-8280-11e5-9344-931cf23403b5","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:551","type":"CtIfImpl","sourcecode":"if (double > 1) {\n    return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n} else {\n    return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n}"},"variableMap":{"longTripsSpeed":"unknownSpeed","shortTripsSpeed":"longTripsSpeed","this":"this","durationInHours":"longTripsSpeed"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:547","type":"CtIfImpl","sourcecode":"if (double == 0) {\n    return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n} else if (double > 1) {\n    return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n} else {\n    return com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(0, double);\n}"},"status":-2},{"failures":[],"tindex":"f23f7de2-8280-11e5-9344-13ec82470f0e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:233","type":"CtAssignmentImpl","sourcecode":"long = 0"},"status":0},{"failures":[0,1,2,3],"tindex":"f23f7de3-8280-11e5-9344-e74f46956f01","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtil:185","type":"CtOperatorAssignmentImpl","sourcecode":"long |= 1"},"status":-1},{"failures":[],"tindex":"f23fa4f4-8280-11e5-9344-d5bc713890bd","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:284","type":"CtLocalVariableImpl","sourcecode":"long long = long & (long)"},"variableMap":{"directionBitMask":"key","flags":"lastKey"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:86","type":"CtLocalVariableImpl","sourcecode":"long long = long - (long)"},"status":-2},{"failures":[],"tindex":"f23fa4f5-8280-11e5-9344-97e2807845f6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:293","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.util.TraversalMode.isEdgeBased()) {\n    if ((com.graphhopper.routing.AStar.AStarEdge.int) != (com.graphhopper.routing.AStar.AStarEdge.int))\n        throw new java.lang.IllegalStateException((\"cannot happen for edge based execution of \" + com.graphhopper.routing.AStarBidirection.(getName())));\n    \n    if ((com.graphhopper.routing.AStar.AStarEdge.int) != (com.graphhopper.routing.AStar.AStarEdge.int)) {\n        com.graphhopper.routing.AStar.AStarEdge = ((com.graphhopper.routing.AStar.AStarEdge)(com.graphhopper.routing.AStar.AStarEdge.com.graphhopper.storage.EdgeEntry));\n        double -= com.graphhopper.routing.util.Weighting.calcWeight(com.graphhopper.util.EdgeIteratorState, boolean, com.graphhopper.util.EdgeIterator.int);\n    } else {\n        if (!(com.graphhopper.routing.util.TraversalMode.hasUTurnSupport()))\n            return ;\n        \n    }\n} "},"status":-1},{"failures":[],"tindex":"f23fa4f6-8280-11e5-9344-7930e90d9410","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:176","type":"CtLocalVariableImpl","sourcecode":"int int = 1024 * 8"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:127","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.routing.util.AllEdgesIterator.getAdjNode()"},"status":-2},{"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"tindex":"f23fcc07-8280-11e5-9344-9d68da4afd0b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:107","type":"CtInvocationImpl","sourcecode":"java.io.RandomAccessFile.writeInt(int[][int])"},"status":-1},{"failures":[21,22,23,24,25,26,27,28,29,30,31,32],"tindex":"f23fcc08-8280-11e5-9344-f53869b2683d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareEncoder:45","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.ch.PrepareEncoder.long"},"variableMap":{"com.graphhopper.routing.ch.PrepareEncoder.scBwdDir":"edgePointer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:162","type":"CtReturnImpl","sourcecode":"return int <= int ? long + (int) : long + (int)"},"status":-2},{"failures":[33,34,35],"tindex":"f23fcc09-8280-11e5-9344-cdf7b10bf170","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:276","type":"CtIfImpl","sourcecode":"if (long >= long)\n    throw new java.lang.IllegalStateException(((((((((\"Cannot copy edge refs into ch graph. \" + \"pointer:\") + long) + \", cap:\") + long) + \", basePtr:\") + long) + \", baseCap:\") + long));\n"},"variableMap":{"basePointer":"prevTime","pointer":"time","maxCapacity":"time","baseCapacity":"prevTime"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:175","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    java.util.List<com.graphhopper.util.GPXEntry>.add(new com.graphhopper.util.GPXEntry(double , double , double , long));\n    boolean boolean = (int + 1) == int;\n    double double = boolean ? com.graphhopper.util.Instruction.getFirstLat() : com.graphhopper.util.PointList.getLatitude((int + 1));\n    double double = boolean ? com.graphhopper.util.Instruction.getFirstLon() : com.graphhopper.util.PointList.getLongitude((int + 1));\n    double double = boolean ? boolean ? com.graphhopper.util.Instruction.getFirstEle() : com.graphhopper.util.PointList.getElevation((int + 1)) : java.lang.Double.double;\n    if (boolean)\n        long = java.lang.Math.round((long + (((this.long) * (com.graphhopper.util.Helper.com.graphhopper.util.DistanceCalc3D.calcDist(double, double, double, double, double, double))) / (double))));\n    else\n        long = java.lang.Math.round((long + (((this.long) * (com.graphhopper.util.Helper.com.graphhopper.util.DistanceCalc3D.calcDist(double, double, double, double))) / (double))));\n    \n    double = double;\n    double = double;\n    double = double;\n}"},"status":-1},{"failures":[],"tindex":"f23ff31a-8280-11e5-9344-116fbc5f84ec","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Constants:82","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.util.List<java.lang.String>.get(0)"},"status":0},{"failures":[36,37],"tindex":"f23ff31b-8280-11e5-9344-4baed0133969","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.BigLongIntMap:100","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"variableMap":{"str":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:423","type":"CtReturnImpl","sourcecode":"return java.lang.String.replaceAll(\";[ ]*\", \", \")"},"status":-1},{"failures":[],"tindex":"f23ff31c-8280-11e5-9344-d93a4b781541","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMTurnRelation:125","type":"CtIfImpl","sourcecode":"if ((this.com.graphhopper.reader.OSMTurnRelation.Type) == (com.graphhopper.reader.OSMTurnRelation.Type.com.graphhopper.reader.OSMTurnRelation.Type))\n    break;\n"},"status":0},{"failures":[],"tindex":"f23ff31d-8280-11e5-9344-096262aa47fd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMInputFile:249","type":"CtIfImpl","sourcecode":"if ((int) <= 0)\n    int = 2;\n"},"variableMap":{"workerThreads":"com.graphhopper.storage.AbstractDataAccess.HEADER_OFFSET"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:157","type":"CtInvocationImpl","sourcecode":"java.io.RandomAccessFile.seek(com.graphhopper.storage.AbstractDataAccess.int)"},"status":-2},{"failures":[],"tindex":"f23ff31e-8280-11e5-9344-75c6fc6cf36e","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:182","type":"CtIfImpl","sourcecode":"if (int <= 0) {\n    throw new java.lang.IllegalStateException(\"check your graph - it is empty!\");\n} "},"variableMap":{"locs":"edge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Dijkstra:84","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    if (!com.graphhopper.routing.AbstractRoutingAlgorithm.(accept(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.EdgeEntry.int)))\n        continue;\n    \n    int int = com.graphhopper.routing.util.TraversalMode.createTraversalId(com.graphhopper.util.EdgeIterator, false);\n    double double = (com.graphhopper.routing.util.Weighting.calcWeight(com.graphhopper.util.EdgeIterator, false, com.graphhopper.storage.EdgeEntry.int)) + (com.graphhopper.storage.EdgeEntry.double);\n    if (java.lang.Double.isInfinite(double))\n        continue;\n    \n    com.graphhopper.storage.EdgeEntry com.graphhopper.storage.EdgeEntry = gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry>.get(int);\n    if (com.graphhopper.storage.EdgeEntry == null) {\n        com.graphhopper.storage.EdgeEntry = new com.graphhopper.storage.EdgeEntry(com.graphhopper.util.EdgeIterator.getEdge() , com.graphhopper.util.EdgeIterator.getAdjNode() , double);\n        com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n        gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry>.put(int, com.graphhopper.storage.EdgeEntry);\n        java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.add(com.graphhopper.storage.EdgeEntry);\n    } else if ((com.graphhopper.storage.EdgeEntry.double) > double) {\n        java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.remove(com.graphhopper.storage.EdgeEntry);\n        com.graphhopper.storage.EdgeEntry.int = com.graphhopper.util.EdgeIterator.getEdge();\n        com.graphhopper.storage.EdgeEntry.double = double;\n        com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n        java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.add(com.graphhopper.storage.EdgeEntry);\n    } else\n        continue;\n    \n    com.graphhopper.routing.AbstractRoutingAlgorithm.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.EdgeEntry, int);\n}"},"status":-2},{"failures":[4,38,5,6,7,9,10,11,14,15,19,20],"tindex":"f2401a2f-8280-11e5-9344-5b9777147a1c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:181","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.put(\"graph.dimension\", com.graphhopper.storage.BaseGraph.com.graphhopper.storage.NodeAccess.getDimension())"},"status":-1},{"failures":[26,39,40,41,42,43,44,45,46],"tindex":"f2401a30-8280-11e5-9344-b1edd794c340","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DouglasPeucker:154","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    throw new java.lang.IllegalStateException(((((\"maximum not found in [\" + int) + \",\") + int) + \"]\"));\n} "},"variableMap":{"indexWithMaxDist":"node","lastIndex":"node","fromIndex":"node"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:293","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.NodeAccess.is3D())\n    com.graphhopper.storage.NodeAccess.setNode(int, com.graphhopper.storage.NodeAccess.getLatitude(int), com.graphhopper.storage.NodeAccess.getLongitude(int), com.graphhopper.storage.NodeAccess.getElevation(int));\nelse\n    com.graphhopper.storage.NodeAccess.setNode(int, com.graphhopper.storage.NodeAccess.getLatitude(int), com.graphhopper.storage.NodeAccess.getLongitude(int));\n"},"status":-1},{"failures":[47],"tindex":"f2404141-8280-11e5-9344-2754ec66958f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionList:215","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<trkseg>\")"},"variableMap":{"track":"track"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:221","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<ele>\").append(com.graphhopper.util.Helper.round2(com.graphhopper.util.GPXEntry.getEle()))"},"status":-1},{"failures":[48],"tindex":"f2404142-8280-11e5-9344-4ba577bd7dff","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:321","type":"CtInvocationImpl","sourcecode":"java.util.List<java.nio.ByteBuffer>.get(int)"},"variableMap":{"bufferIndex":"bufferIndex","segments":"segments"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:346","type":"CtAssignmentImpl","sourcecode":"java.nio.ByteBuffer = java.util.List<java.nio.ByteBuffer>.get((int + 1))"},"status":-1},{"failures":[],"tindex":"f2404143-8280-11e5-9344-6d67182ed038","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:178","type":"CtIfImpl","sourcecode":"if (int > 64)\n    throw new java.lang.IllegalStateException(\"sum of all shifts does not fit into a long variable\");\n"},"variableMap":{"shiftSum":"frontIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.SimpleIntDeque:77","type":"CtIfImpl","sourcecode":"if ((int) > int) {\n    int = com.graphhopper.util.SimpleIntDeque.getSize();\n    int[] int[] = new int[(int) + 10];\n    java.lang.System.arraycopy(int[], int, int[], 0, int);\n    int[] = int[];\n    int = 0;\n} "},"status":0},{"failures":[21,22,49,50,51,52,38,5,7,53,36,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],"tindex":"f2406854-8280-11e5-9344-e9983b162837","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:99","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.storage.DataAccess.getHeader((2 * 4))"},"variableMap":{"index":"dataAccess"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:593","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.storage.DataAccess.getInt(long)"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"f23ff31c-8280-11e5-9344-d93a4b781541","diffs":[{"branchesDiff":{"delete":["t0"]},"type":"staticDiff"}]}]}
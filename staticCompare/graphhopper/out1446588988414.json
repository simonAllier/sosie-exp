{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":109,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":15,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":48,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":24,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":171,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":211,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":95,"com.graphhopper.reader.OSMReaderTest.testFerry":311,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":328,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":329,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":12,"com.graphhopper.routing.QueryGraphTest.testOneWay":23,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":251,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":349,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":207,"com.graphhopper.reader.OSMReaderTest.testWithBounds":322,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":116,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":18,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":87,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":106,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testInfinityWeight":303,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":88,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":115,"com.graphhopper.coll.CompressedArrayTest.testCompress":367,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":166,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":223,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":2,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":58,"com.graphhopper.util.BitUtilLittleTest.testToDouble":364,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":114,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":143,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":184,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":342,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":176,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":250,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":294,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":66,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":180,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":252,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":124,"com.graphhopper.GraphHopperTest.testPrepare":351,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":287,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":47,"com.graphhopper.storage.GraphStorageViaMMapTest.testInfinityWeight":125,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":133,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":54,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":150,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":21,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":30,"com.graphhopper.storage.GraphHopperStorageTest.testInfinityWeight":164,"com.graphhopper.util.InstructionListTest.testWayList":332,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":39,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":331,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":326,"com.graphhopper.GraphHopperAPITest.testDisconnected179":341,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":92,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":222,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":102,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":355,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":205,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":89,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":97,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":31,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":36,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":208,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":81,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":309,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":91,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":317,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":305,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":73,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":236,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":112,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":128,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":352,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":139,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":202,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":296,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":302,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":298,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":69,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":297,"com.graphhopper.GraphHopperTest.testLoadOSM":9,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":67,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":216,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":187,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":156,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":209,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":231,"com.graphhopper.reader.OSMReaderTest.testSort":314,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":155,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":42,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":90,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":321,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":247,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":161,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":5,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":63,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":192,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":193,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":126,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":271,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":52,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":310,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":72,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":130,"com.graphhopper.routing.PathTest.testWayList":78,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":127,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":301,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":105,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":197,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":241,"com.graphhopper.coll.OSMIDMapTest.testGet2":360,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":53,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeReturn":260,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":140,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":29,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":268,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":14,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":37,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":165,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":206,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":186,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPropertiesWithNoInit":293,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":244,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":277,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":149,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":272,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":225,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":138,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":279,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":198,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":131,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":267,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":147,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":44,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointCount":0,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":80,"com.graphhopper.util.GHUtilityTest.testSort":338,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":103,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":22,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":213,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":34,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":33,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":264,"com.graphhopper.coll.OSMIDMapTest.testGetLong":362,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":25,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":136,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":285,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":306,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":172,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":204,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":275,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":291,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":177,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":224,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":19,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":261,"com.graphhopper.coll.CompressedArrayTest.testCompress2":366,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":84,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":175,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":10,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":269,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":270,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":152,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":169,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":282,"com.graphhopper.GraphHopperAPITest.testLoad":340,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":354,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":51,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":288,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":144,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":86,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":229,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":135,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":93,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":273,"com.graphhopper.reader.OSMReaderTest.testBarriers":315,"com.graphhopper.routing.PathTest.testFound":74,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":118,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes":248,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":357,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":181,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":35,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":99,"com.graphhopper.util.GHUtilityTest.testCopy":337,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":1,"com.graphhopper.routing.PathTest.testFindInstruction":79,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":27,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":274,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":325,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":284,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":104,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":142,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":38,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":170,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":162,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":148,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":43,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":151,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":299,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":335,"com.graphhopper.storage.GraphHopperStorageCHTest.testFlags":238,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":46,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":259,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":60,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":286,"com.graphhopper.reader.PrinctonReaderTest.testRead":308,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":163,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":240,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":280,"com.graphhopper.coll.OSMIDMapTest.testUpdateOfLowerKeys":363,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":292,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":94,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":228,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":11,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":65,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":100,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":132,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes2":235,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":289,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":255,"com.graphhopper.util.InstructionListTest.testWayList2":333,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":190,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":3,"com.graphhopper.reader.OSMReaderTest.testFoot":312,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":121,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":26,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":117,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":217,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":214,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":167,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":215,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":265,"com.graphhopper.reader.OSMReaderTest.testOneWay":324,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":278,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":233,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":4,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":304,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":83,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":145,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetLocations":245,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":159,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":237,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":158,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":300,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":108,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":64,"com.graphhopper.storage.GraphHopperStorageTest.testPropertiesWithNoInit":154,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":283,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":200,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":111,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":134,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":141,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":316,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":77,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":59,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":50,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":194,"com.graphhopper.coll.OSMIDMapTest.testGet":359,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":281,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":56,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":68,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":256,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":57,"com.graphhopper.routing.PathBidirRefTest.testExtract":70,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":178,"com.graphhopper.coll.OSMIDMapTest.testBinSearch":361,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":327,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":348,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":82,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":212,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":343,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":120,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnsureSize":230,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":307,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":347,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":196,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":346,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":119,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":345,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":344,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":221,"com.graphhopper.util.GHUtilityTest.testSort2":336,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":45,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":107,"com.graphhopper.reader.OSMReaderTest.testMain":313,"com.graphhopper.util.BitUtilLittleTest.testToLong":365,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":16,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":262,"com.graphhopper.storage.GraphHopperStorageCHTest.testInfinityWeight":263,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":290,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":258,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":226,"com.graphhopper.routing.PathBidirRefTest.testExtract2":71,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":257,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":203,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":28,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":123,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":188,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":85,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":174,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":218,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":199,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":157,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":246,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":249,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":182,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":318,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":129,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":295,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":323,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":49,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":179,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":232,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":62,"com.graphhopper.storage.GraphHopperStorageTest.testClone":137,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":168,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":210,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":122,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":160,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":266,"com.graphhopper.storage.GraphHopperStorageCHTest.testCheckFirstNode":254,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":146,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":153,"com.graphhopper.GraphHopperTest.testFootAndCar":353,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":6,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":101,"com.graphhopper.routing.PathTest.testTime":75,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":98,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":239,"com.graphhopper.routing.util.CarFlagEncoderTest.testOneway":358,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":61,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":219,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":185,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":41,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":113,"com.graphhopper.storage.GraphHopperStorageCHTest.testPropertiesWithNoInit":253,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":276,"com.graphhopper.util.GHUtilityTest.testSortDirected":339,"com.graphhopper.GraphHopperTest.testPrepareOnly":8,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":243,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":173,"com.graphhopper.GraphHopperTest.testVia":350,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":13,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":96,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":40,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":320,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":195,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":183,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":17,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":227,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":334,"com.graphhopper.GraphHopperTest.testFootOnly":356,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":189,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":319,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":201,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":191,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":76,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":110,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":242,"com.graphhopper.util.InstructionListTest.testFind":330,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":32,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":55,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":7,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":220,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":234},"transformations":[{"failures":[0,1],"tindex":"876c5b78-8278-11e5-a32f-79f3bcdeef4b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:95","type":"CtAssignmentImpl","sourcecode":"double[][int] = double"},"status":-1},{"failures":[2,3,4],"tindex":"876c8289-8278-11e5-a32f-41d64c5ba954","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:353","type":"CtAssignmentImpl","sourcecode":"int = ((int)(com.graphhopper.routing.util.EncodedValue.getValue(long)))"},"status":-1},{"failures":[],"tindex":"876c828a-8278-11e5-a32f-2df0d7ad2784","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.shapes.BBox:230","type":"CtLocalVariableImpl","sourcecode":"int int = 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:222","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.reader.dem.SRTMProvider.calcIntKey(double, double)"},"status":-2},{"failures":[],"tindex":"876c828b-8278-11e5-a32f-1f63f7bbdf51","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:300","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.flush()"},"variableMap":{"baseGraph":"routingGraph"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:83","type":"CtIfImpl","sourcecode":"if (boolean)\n    com.graphhopper.util.CHEdgeIteratorState = ((com.graphhopper.util.CHEdgeIteratorState)(com.graphhopper.storage.Graph.getEdgeIteratorState(int, int)));\nelse\n    com.graphhopper.util.CHEdgeIteratorState = ((com.graphhopper.util.CHEdgeIteratorState)(com.graphhopper.storage.Graph.getEdgeIteratorState(int, int)));\n"},"status":-2},{"failures":[5,6,7,8,9,10],"tindex":"876c828c-8278-11e5-a32f-edc0924a3fca","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:186","type":"CtAssignmentImpl","sourcecode":"int = ((int)((java.lang.Math.log(int)) / (java.lang.Math.log(2))))"},"variableMap":{"segmentSizeInBytes":"edgeEntryBytes","segmentSizePower":"edgeEntryBytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:212","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.storage.DataAccess.getHeader((0 * 4))"},"status":-1},{"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,5,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,6,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,7,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,8,343,344,345,346,347,348,349,350,351,352,353,354,9,355,10,356,357],"tindex":"876ca99d-8278-11e5-a32f-d960eb547b7d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:92","type":"CtIfImpl","sourcecode":"if (int >= (int))\n    throw new java.lang.ArrayIndexOutOfBoundsException((\"index has to be smaller than size \" + (int)));\n"},"variableMap":{"size":"nextEdge","index":"E_LINKA"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:200","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt((long + (int)), int)"},"status":-1},{"failures":[],"tindex":"876cd0ae-8278-11e5-a32f-49f0f97a7af7","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtil:231","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('1')"},"variableMap":{"sb":"output"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:243","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<gh:time>\").append(com.graphhopper.util.Instruction.getTime())"},"status":0},{"failures":[],"tindex":"876cd0af-8278-11e5-a32f-e7b50fb07f23","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.BigLongIntMap:95","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:275","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.storage.StorableProperties.get(\"graph.chWeightings\")"},"status":-2},{"failures":[],"tindex":"876cd0b0-8278-11e5-a32f-a57254737ae5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.AStarBidirection:80","type":"CtAssignmentImpl","sourcecode":"java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge> = new java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>((int / 10))"},"variableMap":{"prioQueueOpenSetFrom":"prioQueueOpenSet","size":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:74","type":"CtAssignmentImpl","sourcecode":"java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge> = new java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>(int)"},"status":0},{"failures":[358,324],"tindex":"876cd0b1-8278-11e5-a32f-25766845e295","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:85","type":"CtAssignmentImpl","sourcecode":"long = java.lang.Math.max((10 * 4), long)"},"variableMap":{"bytes":"backwardBit"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:275","type":"CtOperatorAssignmentImpl","sourcecode":"long |= long"},"status":-1},{"failures":[359,360,361,362,363,364,365],"tindex":"876cf7c2-8278-11e5-a32f-b13af8a7338a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.VLongStorage:55","type":"CtReturnImpl","sourcecode":"return byte[].int"},"variableMap":{"bytes":"b","length":"offset"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilLittle:69","type":"CtReturnImpl","sourcecode":"return (com.graphhopper.util.BitUtilLittle.((long)(toInt(byte[], (int + 4)))) << 32) | (com.graphhopper.util.BitUtilLittle.(toInt(byte[], int)) & 4294967295L)"},"status":-1},{"failures":[],"tindex":"876cf7c3-8278-11e5-a32f-0fbb4ea05f3f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:361","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:653","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"876cf7c4-8278-11e5-a32f-051ddd60b2e4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.GHUtility:283","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.routing.util.AllEdgesIterator.getBaseNode()"},"variableMap":{"eIter":"iter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:774","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.util.EdgeIterator.getAdjNode()"},"status":0},{"failures":[],"tindex":"876cf7c5-8278-11e5-a32f-bbbe4ac0f1ab","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHTreeMapComposed:32","type":"CtUnaryOperatorImpl","sourcecode":"-3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:126","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.EncodedDoubleValue.getBits()"},"status":0},{"failures":[],"tindex":"876d1ed6-8278-11e5-a32f-99d09d3fc3ad","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:190","type":"CtAssignmentImpl","sourcecode":"double = -double"},"variableMap":{"eleDelta":"newWeight","decEleSum":"newWeight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:302","type":"CtOperatorAssignmentImpl","sourcecode":"double -= com.graphhopper.routing.util.Weighting.calcWeight(com.graphhopper.util.EdgeIteratorState, boolean, com.graphhopper.util.EdgeIterator.int)"},"status":-1},{"failures":[],"tindex":"876d1ed7-8278-11e5-a32f-9b098c9bd475","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.EdgeAccess:194","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int == (com.graphhopper.util.EdgeIterator.int)))\n    throw new java.lang.IllegalStateException((((((\"Cannot write edge with illegal ID:\" + int) + \"; nodeThis:\") + int) + \", nodeOther:\") + int));\n"},"variableMap":{"com.graphhopper.util.EdgeIterator.NO_EDGE":"com.graphhopper.reader.OSMElement.WAY","nodeThis":"com.graphhopper.reader.OSMElement.NODE","edgeId":"workerThreads","nodeOther":"com.graphhopper.reader.OSMElement.WAY"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:280","type":"CtTryImpl","sourcecode":"try {\n    com.graphhopper.reader.OSMInputFile = new com.graphhopper.reader.OSMInputFile(java.io.File).setWorkerThreads(int).open();\n    com.graphhopper.coll.LongIntMap com.graphhopper.coll.LongIntMap = com.graphhopper.reader.OSMReader.getNodeMap();\n    com.graphhopper.reader.OSMElement com.graphhopper.reader.OSMElement;\n    while ((com.graphhopper.reader.OSMElement = com.graphhopper.reader.OSMInputFile.getNext()) != null) {\n        switch (com.graphhopper.reader.OSMElement.getType()) {\n            case com.graphhopper.reader.OSMElement.int :\n                if ((com.graphhopper.coll.LongIntMap.get(com.graphhopper.reader.OSMElement.getId())) != (-1)) {\n                    com.graphhopper.reader.OSMReader.processNode(((com.graphhopper.reader.OSMNode)(com.graphhopper.reader.OSMElement)));\n                } \n                break;\n            case com.graphhopper.reader.OSMElement.int :\n                if (long < 0) {\n                    com.graphhopper.reader.OSMReader.org.slf4j.Logger.info((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \", now parsing ways\"));\n                    long = long;\n                } \n                com.graphhopper.reader.OSMReader.processWay(((com.graphhopper.reader.OSMWay)(com.graphhopper.reader.OSMElement)));\n                break;\n            case com.graphhopper.reader.OSMElement.int :\n                if (long < 0) {\n                    com.graphhopper.reader.OSMReader.org.slf4j.Logger.info((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \", now parsing relations\"));\n                    long = long;\n                } \n                com.graphhopper.reader.OSMReader.processRelation(((com.graphhopper.reader.OSMRelation)(com.graphhopper.reader.OSMElement)));\n                break;\n        }\n        if (((++long) % 100000000) == 0) {\n            com.graphhopper.reader.OSMReader.org.slf4j.Logger.info(((((((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \", locs:\") + com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long))) + \" (\") + (long)) + \") \") + (com.graphhopper.util.Helper.getMemInfo())));\n        } \n    }\n} catch (java.lang.Exception ex) {\n    throw new java.lang.RuntimeException((((\"Couldn\\'t process file \" + java.io.File) + \", error: \") + (java.lang.Exception.getMessage())) , java.lang.Exception);\n} finally {\n    com.graphhopper.util.Helper.close(com.graphhopper.reader.OSMInputFile);\n}"},"status":-2},{"failures":[],"tindex":"876d1ed8-8278-11e5-a32f-49c294ab9943","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:176","type":"CtLocalVariableImpl","sourcecode":"int int = 1024 * 8"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:453","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.util.EdgeIterator.int"},"status":-2},{"failures":[],"tindex":"876d45e9-8278-11e5-a32f-9582428b737c","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:127","type":"CtReturnImpl","sourcecode":"return ~long"},"variableMap":{"high":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:303","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.AbstractFlagEncoder.setBool(com.graphhopper.routing.util.AbstractFlagEncoder.setBool(long, com.graphhopper.routing.util.AbstractFlagEncoder.int, boolean), com.graphhopper.routing.util.AbstractFlagEncoder.int, boolean)"},"status":-2},{"failures":[],"tindex":"876d45ea-8278-11e5-a32f-a70709c92b69","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:191","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(5)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:126","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : java.lang.String[]) {\n    java.lang.String = java.lang.String.trim().toLowerCase();\n    if (java.lang.String.isEmpty())\n        continue;\n    \n    java.lang.String java.lang.String = \"\";\n    if (java.lang.String.contains(\"|\")) {\n        java.lang.String = java.lang.String;\n        java.lang.String = java.lang.String.split(\"\\\\|\")[0];\n    } \n    com.graphhopper.util.PMap com.graphhopper.util.PMap = new com.graphhopper.util.PMap(java.lang.String);\n    com.graphhopper.routing.util.AbstractFlagEncoder com.graphhopper.routing.util.AbstractFlagEncoder;\n    if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n        com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.CarFlagEncoder(com.graphhopper.util.PMap);\n    else if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n        com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.BikeFlagEncoder(com.graphhopper.util.PMap);\n    else if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n        com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.Bike2WeightFlagEncoder(com.graphhopper.util.PMap);\n    else if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n        com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.RacingBikeFlagEncoder(com.graphhopper.util.PMap);\n    else if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n        com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MountainBikeFlagEncoder(com.graphhopper.util.PMap);\n    else if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n        com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.FootFlagEncoder(com.graphhopper.util.PMap);\n    else if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n        com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MotorcycleFlagEncoder(com.graphhopper.util.PMap);\n    else\n        throw new java.lang.IllegalArgumentException((\"entry in encoder list not supported \" + java.lang.String));\n    \n    if (com.graphhopper.util.PMap.has(\"version\")) {\n        if ((com.graphhopper.routing.util.AbstractFlagEncoder.getVersion()) != (com.graphhopper.util.PMap.getInt(\"version\", -1))) {\n            throw new java.lang.IllegalArgumentException((((((\"Encoder \" + java.lang.String) + \" was used in version \") + (com.graphhopper.util.PMap.getLong(\"version\", -1))) + \", but current version is \") + (com.graphhopper.routing.util.AbstractFlagEncoder.getVersion())));\n        } \n    } \n    java.util.List<com.graphhopper.routing.util.FlagEncoder>.add(com.graphhopper.routing.util.AbstractFlagEncoder);\n}"},"status":-2},{"failures":[366,367],"tindex":"876d6cfb-8278-11e5-a32f-a793d38136fe","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.CompressedArray:210","type":"CtInvocationImpl","sourcecode":"java.util.zip.Inflater.end()"},"variableMap":{"decompressor":"decompressor"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.CompressedArray:203","type":"CtWhileImpl","sourcecode":"while (!(java.util.zip.Inflater.finished())) {\n    int int = java.util.zip.Inflater.inflate(byte[]);\n    java.io.ByteArrayOutputStream.write(byte[], 0, int);\n}"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"876cf7c4-8278-11e5-a32f-051ddd60b2e4","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.EdgeIteratorState.getAdjNode"]},"type":"staticDiff"}]}]}
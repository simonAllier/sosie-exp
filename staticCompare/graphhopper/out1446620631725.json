{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":190,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":15,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":144,"com.graphhopper.storage.RAMDataAccessTest.testTrimTo":109,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":149,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":64,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":186,"com.graphhopper.reader.OSMReaderTest.testFerry":152,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":176,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSortHighLevelFirst":43,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":60,"com.graphhopper.reader.OSMReaderTest.testWithBounds":160,"com.graphhopper.storage.RAMDataAccessTest.testLoadFlush":112,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":145,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":85,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":133,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":80,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":181,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testSacScale":229,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":94,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":138,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetAccess":218,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":82,"com.graphhopper.GraphHopperTest.testPrepare":166,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":206,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":14,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":75,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":130,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":147,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":5,"com.graphhopper.util.BitUtilLittleTest.testToBitString":34,"com.graphhopper.util.InstructionListTest.testWayList":38,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":11,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":83,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":215,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":59,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":6,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":123,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":61,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":225,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":227,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":1,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":193,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":167,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":105,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":104,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":140,"com.graphhopper.GraphHopperTest.testLoadOSM":169,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":68,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":47,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":62,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":183,"com.graphhopper.reader.OSMReaderTest.testSort":154,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":126,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":159,"com.graphhopper.storage.SynchedDAWrapperTest.testRenameFlush":114,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":198,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":74,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":137,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":51,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":52,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testSetSpeed0_issue367":221,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":18,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":146,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":222,"com.graphhopper.routing.PathTest.testWayList":151,"com.graphhopper.storage.MMapDataAccessTest.textMixRAM2MMAP":40,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":56,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":196,"com.graphhopper.coll.OSMIDMapTest.testGet2":30,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":19,"com.graphhopper.util.DistanceCalcEarthTest.testPrecisionBug2":175,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":4,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":9,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":143,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":46,"com.graphhopper.storage.GraphHopperStorageCHTest.testPrios":84,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":102,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":87,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":57,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":12,"com.graphhopper.storage.RAMDataAccessTest.testRenameFlush":107,"com.graphhopper.storage.SynchedDAWrapperTest.testLoadFlush":119,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":224,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":188,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":65,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":148,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":122,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":7,"com.graphhopper.coll.OSMIDMapTest.testGetLong":32,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":209,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":86,"com.graphhopper.storage.RAMIntDataAccessTest.testSegments":98,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":170,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSetSpeed0_issue367":210,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":205,"com.graphhopper.GraphHopperAPITest.testLoad":2,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":168,"com.graphhopper.storage.RAMIntDataAccessTest.testRenameFlush":97,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":17,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":214,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":91,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":179,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testParseDuration":172,"com.graphhopper.reader.OSMReaderTest.testBarriers":155,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":202,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":216,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadClose":99,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":41,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":8,"com.graphhopper.util.GHUtilityTest.testCopy":37,"com.graphhopper.storage.RAMDataAccessTest.testLoadClose":111,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":3,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":203,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":189,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":180,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":10,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":182,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":127,"com.graphhopper.routing.util.CarFlagEncoderTest.testSwapDir":220,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":208,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":128,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":200,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":135,"com.graphhopper.reader.PrinctonReaderTest.testRead":226,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":78,"com.graphhopper.coll.OSMIDMapTest.testUpdateOfLowerKeys":33,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":103,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":79,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":90,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":22,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":141,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":199,"com.graphhopper.storage.RAMIntDataAccessTest.testLoadFlush":100,"com.graphhopper.util.InstructionListTest.testWayList2":39,"com.graphhopper.reader.OSMReaderTest.testFoot":228,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":192,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":69,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":150,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":191,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":66,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":185,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":67,"com.graphhopper.reader.OSMReaderTest.testOneWay":162,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":194,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":77,"com.graphhopper.storage.SynchedDAWrapperTest.testEnsureCapacity":115,"com.graphhopper.storage.SynchedDAWrapperTest.testSegments":117,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":21,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":178,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":0,"com.graphhopper.storage.SynchedDAWrapperTest.testCopy":113,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":134,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":16,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":53,"com.graphhopper.coll.OSMIDMapTest.testGet":29,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":204,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":20,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":139,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":213,"com.graphhopper.storage.SynchedDAWrapperTest.testTrimTo":116,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":132,"com.graphhopper.coll.OSMIDMapTest.testBinSearch":31,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":27,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":177,"com.graphhopper.storage.RAMDataAccessTest.testCopy":106,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":23,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":26,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":25,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":55,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":24,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":81,"com.graphhopper.storage.RAMDataAccessTest.testSegments":110,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":164,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":73,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":13,"com.graphhopper.reader.OSMReaderTest.testMain":153,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":96,"com.graphhopper.util.DistanceCalcEarthTest.testPrecisionBug":174,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":217,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":88,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":95,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":120,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":48,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":70,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":58,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":42,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":156,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":207,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":161,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":93,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":129,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":136,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":63,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":184,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":201,"com.graphhopper.GraphHopperTest.testFootAndCar":28,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":76,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":211,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":92,"com.graphhopper.storage.RAMDataAccessTest.testEnsureCapacity":108,"com.graphhopper.util.BitUtilLittleTest.testToFloat":35,"com.graphhopper.routing.util.CarFlagEncoderTest.testOneway":219,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":71,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":45,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":125,"com.graphhopper.GraphHopperTest.testPrepareOnly":163,"com.graphhopper.GraphHopperTest.testVia":165,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":142,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":187,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":124,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":158,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":54,"com.graphhopper.storage.SynchedDAWrapperTest.testLoadClose":118,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":44,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":89,"com.graphhopper.GraphHopperTest.testFootOnly":171,"com.graphhopper.util.BitUtilLittleTest.testToInt":36,"com.graphhopper.routing.util.FootFlagEncoderTest.testCombined":212,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":49,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":157,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":173,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":50,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":197,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":223,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":121,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":131,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":72,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":101,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":195},"transformations":[{"failures":[0,1],"tindex":"344f5a94-82c2-11e5-a122-43df1ac38820","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:190","type":"CtAssignmentImpl","sourcecode":"double = -double"},"variableMap":{"eleDelta":"towerNodeDistance","decEleSum":"lat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:770","type":"CtOperatorAssignmentImpl","sourcecode":"double += com.graphhopper.util.DistanceCalc3D.calcDist(double, double, double, double, double, double)"},"status":-1},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],"tindex":"344fa8b5-82c2-11e5-a122-e5708eea8853","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:171","type":"CtAssignmentImpl","sourcecode":"this.double = double"},"status":-1},{"failures":[29,30,31,32,33,2,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,4,5,6,121,7,122,8,123,9,10,11,124,125,126,127,12,13,128,14,129,16,17,18,19,130,131,20,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,0,1,156,157,158,159,160,161,162,163,23,164,24,25,26,27,165,166,167,28,168,169,170,171],"tindex":"344fa8b6-82c2-11e5-a122-01d310dcceb7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtilBig:56","type":"CtAssignmentImpl","sourcecode":"byte[][++int] = ((byte)(int >> 8))"},"variableMap":{"offset":"offset","bytes":"bytes","value":"offset"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilLittle:57","type":"CtAssignmentImpl","sourcecode":"byte[][int] = ((byte)(int))"},"status":-1},{"failures":[1],"tindex":"344fcfc7-82c2-11e5-a122-492f30b8e76e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:552","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.reader.dem.ElevationProvider = com.graphhopper.reader.dem.CGIARProvider"},"variableMap":{"cgiarProvider":"eleProvider","tmpProvider":"eleProvider"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:148","type":"CtAssignmentImpl","sourcecode":"this.com.graphhopper.reader.dem.ElevationProvider = com.graphhopper.reader.dem.ElevationProvider"},"status":-1},{"failures":[],"tindex":"344fcfc8-82c2-11e5-a122-d190dce537ae","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:410","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.routing.util.BikeCommonFlagEncoder.int"},"variableMap":{"com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED":"sLon","speed":"sLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:136","type":"CtOperatorAssignmentImpl","sourcecode":"int += int"},"status":-2},{"failures":[12,146,148],"tindex":"344fcfc9-82c2-11e5-a122-0558322ca7ce","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.VirtualEdgeIteratorState:186","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.FlagEncoder.isBackward(com.graphhopper.routing.VirtualEdgeIteratorState.getFlags())"},"variableMap":{"this":"this","encoder":"encoder"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.VirtualEdgeIteratorState:180","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.FlagEncoder.isForward(com.graphhopper.routing.VirtualEdgeIteratorState.getFlags())"},"status":-1},{"failures":[],"tindex":"344ff6da-82c2-11e5-a122-cd759d888d57","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.DAType:168","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.DAType = com.graphhopper.storage.DAType.com.graphhopper.storage.DAType"},"variableMap":{"com.graphhopper.storage.DAType.MMAP":"defaultType","type":"defaultType"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:91","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.DAType = com.graphhopper.storage.DAType"},"status":-2},{"failures":[],"tindex":"344ff6db-82c2-11e5-a122-bb599e98ade5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:408","type":"CtAssignmentImpl","sourcecode":"int = (com.graphhopper.routing.util.BikeCommonFlagEncoder.int) / 2"},"variableMap":{"com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED":"removedEdges","speed":"removedEdges"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:187","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.routing.util.PrepareRoutingSubnetworks.removeEdges(com.graphhopper.util.EdgeExplorer, com.graphhopper.routing.util.FlagEncoder, gnu.trove.list.array.TIntArrayList, int)"},"status":-2},{"failures":[172,173,152],"tindex":"344ff6dc-82c2-11e5-a122-47a0c524fcf1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:472","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    return 0;\n"},"variableMap":{"str":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:475","type":"CtTryImpl","sourcecode":"try {\n    if (java.lang.String.startsWith(\"P\"))\n        return 0;\n    \n    int int = java.lang.String.indexOf(\":\");\n    if (int > 0) {\n        java.lang.String java.lang.String = java.lang.String.substring(0, int);\n        java.lang.String java.lang.String = java.lang.String.substring((int + 1));\n        int = java.lang.String.indexOf(\":\");\n        int int = 0;\n        if (int > 0) {\n            java.lang.String java.lang.String = java.lang.String;\n            java.lang.String = java.lang.String.substring(0, int);\n            java.lang.String = java.lang.String.substring((int + 1));\n            int = ((java.lang.Integer.parseInt(java.lang.String)) * 60) * 24;\n        } \n        int += (java.lang.Integer.parseInt(java.lang.String)) * 60;\n        int += java.lang.Integer.parseInt(java.lang.String);\n        return int;\n    } else {\n        return java.lang.Integer.parseInt(java.lang.String);\n    }\n} catch (java.lang.Exception ex) {\n    com.graphhopper.routing.util.AbstractFlagEncoder.org.slf4j.Logger.warn(((\"Cannot parse \" + java.lang.String) + \" using 0 minutes\"));\n}"},"status":-1},{"failures":[174,175,50,65,8,10,12,14,144,147,150,165,166,167,28,171],"tindex":"34501ded-82c2-11e5-a122-ab782921f84d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:680","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Math.min(double, double)"},"variableMap":{"dMinLon":"r_lon","dMinLat":"delta_lat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:197","type":"CtLocalVariableImpl","sourcecode":"double double = (((double - double) * double) + ((double - double) * double)) / double"},"status":-1},{"failures":[],"tindex":"34501dee-82c2-11e5-a122-c7126448d055","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:255","type":"CtAssignmentImpl","sourcecode":"double = 30"},"variableMap":{"speed":"nextEle"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:190","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":0},{"failures":[2,37,176,177,74,75,178,179,180,181,182,183,184,78,185,79,186,187,188,189,190,191,192,82,193,83,91,92,93,194,195,196,197,198,199,200,96,201,101,102,202,203,204,205,206,207,208,105,209,3,120,5,125,127,12,19,20,132,136,138,140,146,148,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,162,165],"tindex":"34501def-82c2-11e5-a122-6f812cd9c76f","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:183","type":"CtAssignmentImpl","sourcecode":"long = 3L << int"},"variableMap":{"directionBitMask":"forwardBit","shift":"shift"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:181","type":"CtAssignmentImpl","sourcecode":"long = 1L << int"},"status":-1},{"failures":[],"tindex":"34504500-82c2-11e5-a122-af186ccddca9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMInputFile:107","type":"CtReturnImpl","sourcecode":"return new java.util.zip.GZIPInputStream(java.io.InputStream , 50000)"},"variableMap":{"ips":"java.io.InputStream.class"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMInputFile:108","type":"CtIfImpl","sourcecode":"if (((((((byte[][0]) == 0) && ((byte[][1]) == 0)) && ((byte[][2]) == 0)) && ((byte[][4]) == 10)) && ((byte[][5]) == 9)) && (((byte[][3]) == 13) || ((byte[][3]) == 14))) {\n    java.io.InputStream.reset();\n    boolean = true;\n    return java.io.InputStream;\n} else if (((byte[][0]) == 'P') && ((byte[][1]) == 'K')) {\n    java.io.InputStream.reset();\n    java.util.zip.ZipInputStream java.util.zip.ZipInputStream = new java.util.zip.ZipInputStream(java.io.InputStream);\n    java.util.zip.ZipInputStream.getNextEntry();\n    return java.util.zip.ZipInputStream;\n} else if ((java.lang.String.endsWith(\".osm\")) || (java.lang.String.endsWith(\".xml\"))) {\n    java.io.InputStream.reset();\n    return java.io.InputStream;\n} else if ((java.lang.String.endsWith(\".bz2\")) || (java.lang.String.endsWith(\".bzip2\"))) {\n    java.lang.String java.lang.String = \"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream\";\n    try {\n        java.lang.Class java.lang.Class = java.lang.Class.forName(java.lang.String);\n        java.io.InputStream.reset();\n        java.lang.reflect.Constructor<java.io.InputStream> java.lang.reflect.Constructor<java.io.InputStream> = java.lang.Class.getConstructor(java.io.InputStream.java.io.InputStream, boolean.boolean);\n        return java.lang.reflect.Constructor<java.io.InputStream>.newInstance(java.io.InputStream, true);\n    } catch (java.lang.Exception e) {\n        throw new java.lang.IllegalArgumentException((\"Cannot instantiate \" + java.lang.String) , java.lang.Exception);\n    }\n} else {\n    throw new java.lang.IllegalArgumentException((\"Input file is not of valid type \" + (java.io.File.getPath())));\n}"},"status":-2},{"failures":[217],"tindex":"34504501-82c2-11e5-a122-7900a4a575a9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:228","type":"CtOperatorAssignmentImpl","sourcecode":"long >>>= 1"},"variableMap":{"bits":"encoded"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:261","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.AbstractFlagEncoder.setBool(long, com.graphhopper.routing.util.FlagEncoder.int, true)"},"status":-1},{"failures":[229],"tindex":"34506c12-82c2-11e5-a122-a106d6a311d7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.shapes.GHPlace:63","type":"CtReturnImpl","sourcecode":"return !(com.graphhopper.util.Helper.isEmpty(java.lang.String))"},"variableMap":{"name":"sacScale"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:192","type":"CtReturnImpl","sourcecode":"return (((\"hiking\".equals(java.lang.String)) || (\"mountain_hiking\".equals(java.lang.String))) || (\"demanding_mountain_hiking\".equals(java.lang.String))) || (\"alpine_hiking\".equals(java.lang.String))"},"status":-1},{"failures":[],"tindex":"34506c13-82c2-11e5-a122-4f5c0b9cc889","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:100","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return \"\";\n} "},"status":0},{"failures":[],"tindex":"34506c14-82c2-11e5-a122-f719dd27422b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:447","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:250","type":"CtIfImpl","sourcecode":"if ((((int + 1) % (int)) != 0) && (!(com.graphhopper.coll.GHBitSet.contains((int + 1))))) {\n    int = int;\n    int = int + 1;\n} else if (((int + (int)) < int) && (!(com.graphhopper.coll.GHBitSet.contains((int + (int)))))) {\n    int = int;\n    int = int + (int);\n} "},"status":-2},{"failures":[],"tindex":"34506c15-82c2-11e5-a122-bfd07429801d","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:770","type":"CtIfImpl","sourcecode":"if (java.lang.String.isEmpty())\n    return double;\n"},"variableMap":{"val":"baseUrl","defaultD":"precision"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:224","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.dem.HeightTile == null) {\n    if (!(java.io.File.exists()))\n        java.io.File.mkdirs();\n    \n    java.lang.String java.lang.String = com.graphhopper.reader.dem.SRTMProvider.getFileString(double, double);\n    if (java.lang.String == null)\n        return 0;\n    \n    int int = com.graphhopper.reader.dem.SRTMProvider.down(double);\n    int int = com.graphhopper.reader.dem.SRTMProvider.down(double);\n    com.graphhopper.reader.dem.HeightTile = new com.graphhopper.reader.dem.HeightTile(int , int , int , double , 1);\n    com.graphhopper.reader.dem.HeightTile.setCalcMean(boolean);\n    gnu.trove.map.hash.TIntObjectHashMap<com.graphhopper.reader.dem.HeightTile>.put(int, com.graphhopper.reader.dem.HeightTile);\n    com.graphhopper.storage.DataAccess com.graphhopper.storage.DataAccess = com.graphhopper.reader.dem.SRTMProvider.getDirectory().find((\"dem\" + int));\n    com.graphhopper.reader.dem.HeightTile.setHeights(com.graphhopper.storage.DataAccess);\n    boolean boolean = false;\n    try {\n        boolean = com.graphhopper.storage.DataAccess.loadExisting();\n    } catch (java.lang.Exception ex) {\n        org.slf4j.Logger.warn((((\"cannot load dem\" + int) + \", error:\") + (java.lang.Exception.getMessage())));\n    }\n    if (!boolean) {\n        byte[] byte[] = new byte[(2 * (int)) * (int)];\n        com.graphhopper.storage.DataAccess.create(byte[].int);\n        try {\n            java.lang.String java.lang.String = (((java.lang.String) + \"/\") + java.lang.String) + \".hgt.zip\";\n            java.io.File java.io.File = new java.io.File(java.io.File , new java.io.File(java.lang.String).getName());\n            java.io.InputStream java.io.InputStream;\n            if (!(java.io.File.exists())) {\n                for (int int = 0 ; int < 3 ; int++) {\n                    try {\n                        com.graphhopper.util.Downloader.downloadFile(java.lang.String, java.io.File.getAbsolutePath());\n                        break;\n                    } catch (java.net.SocketTimeoutException ex) {\n                        java.lang.Thread.sleep(2000);\n                        continue;\n                    } catch (java.io.FileNotFoundException ex) {\n                        java.lang.String = (((java.lang.String) + \"/\") + java.lang.String) + \"hgt.zip\";\n                        continue;\n                    }\n                }\n            } \n            java.io.InputStream = new java.io.FileInputStream(java.io.File);\n            java.util.zip.ZipInputStream java.util.zip.ZipInputStream = new java.util.zip.ZipInputStream(java.io.InputStream);\n            java.util.zip.ZipInputStream.getNextEntry();\n            java.io.BufferedInputStream java.io.BufferedInputStream = new java.io.BufferedInputStream(java.util.zip.ZipInputStream);\n            int int;\n            while ((int = java.io.BufferedInputStream.read(byte[])) > 0) {\n                for (int int = 0 ; int < int ; int += 2) {\n                    short short = com.graphhopper.reader.dem.SRTMProvider.com.graphhopper.util.BitUtil.toShort(byte[], int);\n                    if ((short < (-1000)) || (short > 12000))\n                        short = java.lang.Short.short;\n                    \n                    com.graphhopper.storage.DataAccess.setShort(int, short);\n                }\n            }\n            com.graphhopper.storage.DataAccess.flush();\n        } catch (java.lang.Exception ex) {\n            throw new java.lang.RuntimeException(java.lang.Exception);\n        }\n    } \n} "},"status":0},{"failures":[],"tindex":"34509326-82c2-11e5-a122-0da2f28a8830","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:535","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.checkAdjNodeBounds(int)"},"variableMap":{"adjNode":"N_ADDITIONAL","this":"that"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHNodeAccess:121","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.com.graphhopper.storage.DataAccess.setInt((long + (com.graphhopper.storage.BaseGraph.int)), int)"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":19,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"34506c13-82c2-11e5-a122-4f5c0b9cc889","diffs":[{"branchesDiff":{"delete":["t0"]},"type":"staticDiff"}]},{"transformation":"34506c15-82c2-11e5-a122-bfd07429801d","diffs":[{"branches":{"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeight":["com.graphhopper.reader.dem.SRTMProvider_java.lang.String_getFileString(double,double).t5","com.graphhopper.reader.dem.SRTMProvider_java.lang.String_getFileString(double,double).t1"]},"type":"branch"}]}]}
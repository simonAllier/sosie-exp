{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":23,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":28,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":26,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":13,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":17,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":16,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":21,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":31,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":34,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":33,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":24,"com.graphhopper.GraphHopperTest.testVia":0,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":32,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":7,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":14,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":27,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":19,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":22,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":12,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":29,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":5,"com.graphhopper.GraphHopperTest.testFootOnly":1,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":30,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":6,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":3,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":10,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":4,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":35,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":8,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":11,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":15,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":25,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":2,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":18,"com.graphhopper.util.GHUtilityTest.testCopy":36,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":9},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"tindex":"e2b9ef37-790d-11e5-a649-0374caf7a586","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:369","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int > (int)))\n    throw new java.lang.IllegalArgumentException((((((\"Illegal interval: \" + int) + \", \") + int) + \", size:\") + (int)));\n"},"variableMap":{"size":"nodeCHEntryBytes","from":"N_CH_REF","end":"nodeCHEntryBytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:272","type":"CtForImpl","sourcecode":"for (long long = int, long long = com.graphhopper.storage.BaseGraph.int ; long < long ; long += int , long += com.graphhopper.storage.BaseGraph.int) {\n    if (long >= long)\n        throw new java.lang.IllegalStateException(((((((((\"Cannot copy edge refs into ch graph. \" + \"pointer:\") + long) + \", cap:\") + long) + \", basePtr:\") + long) + \", baseCap:\") + long));\n    \n    com.graphhopper.storage.DataAccess.setInt(long, com.graphhopper.storage.BaseGraph.com.graphhopper.storage.DataAccess.getInt(long));\n}"},"status":-1},{"failures":[],"tindex":"e2ba1648-790d-11e5-a649-1bfbbba8d553","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionList:140","type":"CtReturnImpl","sourcecode":"return java.util.Collections.emptyList()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:57","type":"CtReturnImpl","sourcecode":"return java.util.ArrayList<com.graphhopper.routing.util.TIntArrayList>"},"status":-2},{"failures":[],"tindex":"e2ba1649-790d-11e5-a649-91b225978660","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.CompressedArray:143","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.VLongStorage = null"},"variableMap":{"currentWriter":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:34","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.VLongStorage.this(new byte[int])"},"status":-2},{"failures":[],"tindex":"e2ba3d5a-790d-11e5-a649-ff835048a6b9","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtil:46","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.BitUtil.com.graphhopper.util.BitUtil"},"variableMap":{"com.graphhopper.util.BitUtil.BIG":"com.graphhopper.util.BitUtil.BIG"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtil:45","type":"CtIfImpl","sourcecode":"if (java.nio.ByteOrder.equals(java.nio.ByteOrder.java.nio.ByteOrder))\n    return com.graphhopper.util.BitUtil.com.graphhopper.util.BitUtil;\nelse\n    return com.graphhopper.util.BitUtil.com.graphhopper.util.BitUtil;\n"},"status":-2},{"failures":[],"tindex":"e2ba3d5b-790d-11e5-a649-093587140722","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:155","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double double = double;\n    double = double;\n    double = double;\n    double = double;\n    double = double;\n    double = double;\n} "},"variableMap":{"y1":"queryLat","x1":"queryLon","y2":"queryLat","x2":"queryLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullIndex:89","type":"CtForImpl","sourcecode":"for (int int, int int = 0 ; int < 2 ; int++) {\n    if (int == 0) {\n        int = com.graphhopper.routing.util.AllEdgesIterator.getBaseNode();\n    } else {\n        int = com.graphhopper.routing.util.AllEdgesIterator.getAdjNode();\n    }\n    double double = com.graphhopper.storage.NodeAccess.getLatitude(int);\n    double double = com.graphhopper.storage.NodeAccess.getLongitude(int);\n    double double = com.graphhopper.util.DistanceCalc.calcDist(double, double, double, double);\n    if ((com.graphhopper.util.shapes.Circle == null) || (double < (com.graphhopper.util.DistanceCalc.calcDist(com.graphhopper.util.shapes.Circle.getLat(), com.graphhopper.util.shapes.Circle.getLon(), double, double)))) {\n        com.graphhopper.storage.index.QueryResult.setClosestEdge(com.graphhopper.routing.util.AllEdgesIterator.detach(false));\n        com.graphhopper.storage.index.QueryResult.setClosestNode(int);\n        com.graphhopper.storage.index.QueryResult.setQueryDistance(double);\n        if (double <= 0)\n            break;\n        \n        com.graphhopper.util.shapes.Circle = new com.graphhopper.util.shapes.Circle(double , double , double , com.graphhopper.util.DistanceCalc);\n    } \n}"},"status":-2},{"failures":[],"tindex":"e2ba3d5c-790d-11e5-a649-39c272f56e19","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:144","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"status":-2},{"failures":[],"tindex":"e2ba646d-790d-11e5-a649-df8937b206b1","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:414","type":"CtIfImpl","sourcecode":"if (long < (int)) {\n    long = int;\n} "},"variableMap":{"segmentSizeInBytes":"nameIndexRef","capacity":"edgePointer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:929","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt((long + (int)), int)"},"status":-2},{"failures":[],"tindex":"e2ba646e-790d-11e5-a649-e7e5a30c33b4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:190","type":"CtOperatorAssignmentImpl","sourcecode":"int += int"},"variableMap":{"allRemoved":"size","removedEdges":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntIntBinHeap:110","type":"CtOperatorAssignmentImpl","sourcecode":"int -= 1"},"status":-2},{"failures":[],"tindex":"e2ba646f-790d-11e5-a649-316d84b4a714","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:123","type":"CtAssignmentImpl","sourcecode":"int = (int * (int)) + int"},"variableMap":{"ret":"shift","retBucket":"shift","i":"shift","bucketSize":"shift"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:184","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"status":-2},{"failures":[],"tindex":"e2ba6470-790d-11e5-a649-b31f6ae0dff1","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(5);\n} catch (java.lang.InterruptedException iex) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMRelation:39","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.OSMRelation.readMembers(javax.xml.stream.XMLStreamReader)"},"status":-2},{"failures":[],"tindex":"e2ba8b81-790d-11e5-a649-5dd6a3e41735","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:191","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(5)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntIntBinHeap:236","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(int[], 0)"},"status":-2},{"failures":[],"tindex":"e2ba8b82-790d-11e5-a649-59aa8614ae2a","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:538","type":"CtAssignmentImpl","sourcecode":"double = java.lang.Math.round(((double / double) / 1.4))"},"variableMap":{"val":"minLon","shortTripsSpeed":"minLon","durationInHours":"minLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:177","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.shapes.BBox.double = com.graphhopper.util.Helper.intToDegree(com.graphhopper.storage.DataAccess.getHeader((3 * 4)))"},"status":-2},{"failures":[],"tindex":"e2ba8b83-790d-11e5-a649-c74e2d421682","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:159","type":"CtIfImpl","sourcecode":"if (double >= 4) {\n    int = 4;\n} else {\n    break;\n}"},"variableMap":{"tmp":"tmpWeight","tmpNo":"traversalId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Dijkstra:95","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.EdgeEntry == null) {\n    com.graphhopper.storage.EdgeEntry = new com.graphhopper.storage.EdgeEntry(com.graphhopper.util.EdgeIterator.getEdge() , com.graphhopper.util.EdgeIterator.getAdjNode() , double);\n    com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n    com.graphhopper.routing.TIntObjectMap<com.graphhopper.storage.EdgeEntry>.put(int, com.graphhopper.storage.EdgeEntry);\n    java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.add(com.graphhopper.storage.EdgeEntry);\n} else if ((com.graphhopper.storage.EdgeEntry.double) > double) {\n    java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.remove(com.graphhopper.storage.EdgeEntry);\n    com.graphhopper.storage.EdgeEntry.int = com.graphhopper.util.EdgeIterator.getEdge();\n    com.graphhopper.storage.EdgeEntry.double = double;\n    com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n    java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.add(com.graphhopper.storage.EdgeEntry);\n} else\n    continue;\n"},"status":-2},{"failures":[],"tindex":"e2bab294-790d-11e5-a649-552f342769e2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PathMerger:99","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(com.graphhopper.util.PointList)"},"variableMap":{"tmpPoints":"fullPoints","fullPoints":"fullPoints"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:61","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.PointList.isEmpty()) {\n    com.graphhopper.util.PointList com.graphhopper.util.PointList = com.graphhopper.util.InstructionList.get(0).getPoints();\n    com.graphhopper.util.PointList = new com.graphhopper.util.PointList(((com.graphhopper.util.InstructionList.size()) * (java.lang.Math.min(10, com.graphhopper.util.PointList.size()))) , com.graphhopper.util.PointList.is3D());\n} "},"status":-2},{"failures":[],"tindex":"e2bab295-790d-11e5-a649-e9a151498af5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:674","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (com.graphhopper.reader.TLongList.size()) ; int++) {\n    long long = com.graphhopper.reader.TLongList.get(int);\n    int int = com.graphhopper.reader.OSMReader.getNodeMap().get(long);\n    if (int == (com.graphhopper.reader.OSMReader.int))\n        continue;\n    \n    if (int == (com.graphhopper.reader.OSMReader.int))\n        continue;\n    \n    if (int == (com.graphhopper.reader.OSMReader.int)) {\n        if ((!(com.graphhopper.util.PointList.isEmpty())) && (int > (-(com.graphhopper.reader.OSMReader.int)))) {\n            int = int;\n            int = com.graphhopper.reader.OSMReader.handlePillarNode(int, long, null, true);\n            int = (-int) - 3;\n            if (((com.graphhopper.util.PointList.getSize()) > 1) && (int >= 0)) {\n                java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long));\n                com.graphhopper.util.PointList.clear();\n                com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n            } \n            int = int;\n            int = -1;\n        } \n        continue;\n    } \n    if ((int <= (-(com.graphhopper.reader.OSMReader.int))) && (int >= (com.graphhopper.reader.OSMReader.int)))\n        throw new java.lang.AssertionError((((\"Mapped index not in correct bounds \" + int) + \", \") + long));\n    \n    if (int > (-(com.graphhopper.reader.OSMReader.int))) {\n        boolean boolean = (int == 0) || (int == int);\n        if (!boolean) {\n            int = int;\n        } \n        int = com.graphhopper.reader.OSMReader.handlePillarNode(int, long, com.graphhopper.util.PointList, boolean);\n    } \n    if (int < (com.graphhopper.reader.OSMReader.int)) {\n        int = (-int) - 3;\n        com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n        if (int >= 0) {\n            java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long));\n            com.graphhopper.util.PointList.clear();\n            com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n        } \n        int = int;\n    } \n}"},"status":-2},{"failures":[],"tindex":"e2bab296-790d-11e5-a649-6fd26cbe8c9f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionAnnotation:81","type":"CtAssignmentImpl","sourcecode":"int = (83 * int) + (this.int)"},"variableMap":{"importance":"currentEntry","hash":"currentEntry"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.CompressedArray:87","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-2},{"failures":[],"tindex":"e2bad9a7-790d-11e5-a649-e7ee20d4c647","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:184","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"variableMap":{"shift":"endIndexPlusOne"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.SimpleIntDeque:103","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-2},{"failures":[],"tindex":"e2bad9a8-790d-11e5-a649-3db4dbfae8e0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:197","type":"CtAssignmentImpl","sourcecode":"int = ~int"},"variableMap":{"index":"start"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:79","type":"CtAssignmentImpl","sourcecode":"int[][int] = int"},"status":-2},{"failures":[],"tindex":"e2bad9a9-790d-11e5-a649-bb3dac902348","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.CmdArgs:129","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.CmdArgs.merge(com.graphhopper.util.CmdArgs)"},"variableMap":{"args":"properties","tmp":"properties"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:66","type":"CtAssignmentImpl","sourcecode":"this.com.graphhopper.util.PMap = com.graphhopper.util.PMap"},"status":-2},{"failures":[],"tindex":"e2bad9aa-790d-11e5-a649-4145ce64031b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(5);\n} catch (java.lang.InterruptedException iex) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:124","type":"CtIfImpl","sourcecode":"if (int > 0)\n    continue;\n"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
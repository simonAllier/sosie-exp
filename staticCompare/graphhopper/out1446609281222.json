{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":71,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":66,"com.graphhopper.reader.OSMReaderTest.testFerry":124,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":40,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":83,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":119,"com.graphhopper.coll.GHTBitSetTest.testToString":46,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":14,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":111,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":103,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":18,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":94,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":21,"com.graphhopper.reader.OSMReaderTest.testWithBounds":45,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":63,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":74,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":86,"com.graphhopper.reader.PrinctonReaderTest.testRead":115,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":135,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":49,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":32,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":89,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":117,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":60,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":90,"com.graphhopper.GraphHopperTest.testPrepare":1,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":87,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":22,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":27,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":105,"com.graphhopper.reader.OSMReaderTest.testFoot":125,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":78,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":7,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":75,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":112,"com.graphhopper.reader.OSMReaderTest.testOneWay":114,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":15,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":51,"com.graphhopper.util.InstructionTest.testCalcAzimuthAndGetDirection":140,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":47,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":54,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":109,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":121,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":70,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":31,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":8,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":13,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":73,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":98,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":116,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":127,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":128,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":137,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":23,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":53,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":80,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":28,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":61,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":120,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":92,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":113,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":93,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":33,"com.graphhopper.GraphHopperTest.testLoadOSM":3,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":77,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":107,"com.graphhopper.reader.OSMReaderTest.testSort":126,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":106,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":17,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":131,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":136,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":20,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":56,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":141,"com.graphhopper.reader.OSMReaderTest.testMain":42,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":30,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":97,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":25,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":62,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":48,"com.graphhopper.routing.PathTest.testWayList":39,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":95,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":5,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":79,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":133,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":108,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":26,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":55,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":58,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":129,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":6,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":91,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":132,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":85,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":29,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":104,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":101,"com.graphhopper.storage.GraphHopperStorageTest.testClone":100,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":65,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":110,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":102,"com.graphhopper.storage.GraphHopperStorageCHTest.testCheckFirstNode":59,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":19,"com.graphhopper.coll.OSMIDSegmentedMapTest.testGet2":35,"com.graphhopper.GraphHopperTest.testFootAndCar":41,"com.graphhopper.coll.OSMIDSegmentedMapTest.testGet":34,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":50,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":11,"com.graphhopper.routing.PathTest.testTime":38,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":10,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":96,"com.graphhopper.util.AngleCalcTest.checkAzimuthConsitency":138,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":68,"com.graphhopper.util.AngleCalcTest.testCalcAzimuth":139,"com.graphhopper.coll.OSMIDSegmentedMapTest.testZeroKey":36,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":64,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":84,"com.graphhopper.GraphHopperTest.testPrepareOnly":118,"com.graphhopper.GraphHopperTest.testVia":0,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":122,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":67,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":142,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":16,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":130,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":2,"com.graphhopper.GraphHopperTest.testFootOnly":4,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":24,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":37,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":88,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":134,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":44,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":99,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":72,"com.graphhopper.reader.OSMReaderTest.testBarriers":43,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":82,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":9,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes":57,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":76,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":123,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":12,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":69,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":52,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":81},"transformations":[{"failures":[],"tindex":"c6e120dc-82a7-11e5-a419-27771806b816","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntIntBinHeap:235","type":"CtAssignmentImpl","sourcecode":"this.int = 0"},"variableMap":{"size":"low"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHLongIntBTree:482","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-2},{"failures":[],"tindex":"c6e147ed-82a7-11e5-a419-cdce8f4130cb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:347","type":"CtInvocationImpl","sourcecode":"java.nio.ByteBuffer.position(0)"},"status":0},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"tindex":"c6e147ee-82a7-11e5-a419-9d228f6d3e70","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:182","type":"CtIfImpl","sourcecode":"if (int <= 0) {\n    throw new java.lang.IllegalStateException(\"check your graph - it is empty!\");\n} "},"variableMap":{"locs":"tmpEdge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:46","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.ch.Path4CH.expandEdge(((com.graphhopper.util.CHEdgeIteratorState)(com.graphhopper.storage.Graph.getEdgeIteratorState(int, int))), false)"},"status":-1},{"failures":[],"tindex":"c6e147ef-82a7-11e5-a419-034f669e0718","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:114","type":"CtReturnImpl","sourcecode":"return false"},"status":0},{"failures":[34,35,36],"tindex":"c6e147f0-82a7-11e5-a419-5b7ce16069ed","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:206","type":"CtReturnImpl","sourcecode":"return (1 << int) - 12"},"variableMap":{"i":"bucketSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:134","type":"CtReturnImpl","sourcecode":"return int * (int)"},"status":-1},{"failures":[],"tindex":"c6e147f1-82a7-11e5-a419-934ffacd47b5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionList:140","type":"CtReturnImpl","sourcecode":"return java.util.Collections.emptyList()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GHResponse:80","type":"CtReturnImpl","sourcecode":"return java.util.List<java.lang.Throwable>"},"status":0},{"failures":[],"tindex":"c6e16e02-82a7-11e5-a419-65469934d82f","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.AStar:139","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.AStar.AStarEdge.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge"},"variableMap":{"parent":"currFrom","ase":"currFrom","currEdge":"currFrom"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:155","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry = java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.poll()"},"status":0},{"failures":[],"tindex":"c6e16e03-82a7-11e5-a419-e72f763c44b4","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper:176","type":"CtLocalVariableImpl","sourcecode":"int int = 1024 * 8"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHSortedCollection:137","type":"CtLocalVariableImpl","sourcecode":"int int = gnu.trove.iterator.TIntIterator.next()"},"status":-2},{"failures":[37,38,39,40,5,6,7,15,17,26],"tindex":"c6e16e04-82a7-11e5-a419-0b1f4b1a41c5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDFullIndex:148","type":"CtReturnImpl","sourcecode":"return 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:249","type":"CtReturnImpl","sourcecode":"return ((long)((double * 3600) / double))"},"status":-1},{"failures":[],"tindex":"c6e16e05-82a7-11e5-a419-c5d7c171cbcf","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:210","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.reader.OSMWay.hasTag(\"impassable\", \"yes\")) || (com.graphhopper.reader.OSMWay.hasTag(\"status\", \"impassable\")))\n    return 0;\n"},"variableMap":{"way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:246","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.util.AbstractFlagEncoder.(isBlockFords()) && ((com.graphhopper.reader.OSMWay.hasTag(\"highway\", \"ford\")) || (com.graphhopper.reader.OSMWay.hasTag(\"ford\"))))\n    return 0;\n"},"status":0},{"failures":[0,41,4,42,43,44,45],"tindex":"c6e19516-82a7-11e5-a419-6db9a8657add","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:48","type":"CtAssignmentImpl","sourcecode":"double = (double - double) / (double + double)"},"variableMap":{"r":"lat","x":"prevLon","absY":"lon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:773","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.DistanceCalc.calcDist(double, double, double, double)"},"status":-1},{"failures":[46],"tindex":"c6e19517-82a7-11e5-a419-1398aabe1168","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:259","type":"CtReturnImpl","sourcecode":"return \"turnCost\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHTBitSet:62","type":"CtReturnImpl","sourcecode":"return gnu.trove.set.hash.TIntHashSet.toString()"},"status":-1},{"failures":[47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,28,33,42,44,45,114,115,116],"tindex":"c6e19518-82a7-11e5-a419-d7f390f0c80e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMInputFile:249","type":"CtIfImpl","sourcecode":"if ((int) <= 0)\n    int = 2;\n"},"variableMap":{"workerThreads":"counter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:93","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    int++;\n}"},"status":-1},{"failures":[117,118,119,0,1,120,41,2,3,121,122,4,123,124,125,42,126,43,127,128,129,44,130,131,45,132,114],"tindex":"c6e19519-82a7-11e5-a419-c1268baebb03","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.PathNative:53","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.util.EdgeIterator.Edge.isValid(int)))\n    break;\n"},"variableMap":{"edgeId":"event"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMWay:58","type":"CtIfImpl","sourcecode":"if (int == (javax.xml.stream.XMLStreamConstants.int)) {\n    java.lang.String java.lang.String = javax.xml.stream.XMLStreamReader.getAttributeValue(null, \"ref\");\n    gnu.trove.list.TLongList.add(java.lang.Long.parseLong(java.lang.String));\n} "},"status":-1},{"failures":[133,134,135,136,137],"tindex":"c6e1bc2a-82a7-11e5-a419-d71aac3eb196","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:926","type":"CtIfImpl","sourcecode":"if (int < 0)\n    throw new java.lang.IllegalStateException(\"Too many names are stored, currently limited to int pointer\");\n"},"variableMap":{"nameIndexRef":"nodeIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:276","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.GraphHopperStorage.markNodeRemoved(int)"},"status":-1},{"failures":[],"tindex":"c6e1bc2b-82a7-11e5-a419-3de409060209","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.SimpleIntDeque:81","type":"CtLocalVariableImpl","sourcecode":"int[] int[] = new int[(int) + 10]"},"variableMap":{"endIndexPlusOne":"read"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:167","type":"CtLocalVariableImpl","sourcecode":"int[] int[] = new int[int]"},"status":0},{"failures":[],"tindex":"c6e1bc2c-82a7-11e5-a419-cb6281fbc9ff","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:92","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.GraphHopperStorage.optimize()"},"variableMap":{"ghStorage":"ghStorage"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:602","type":"CtInvocationImpl","sourcecode":"org.slf4j.Logger.info((((\"graph \" + (com.graphhopper.storage.GraphHopperStorage.toString())) + \", details:\") + (com.graphhopper.storage.GraphHopperStorage.toDetailsString())))"},"status":0},{"failures":[138,139,140],"tindex":"c6e1bc2d-82a7-11e5-a419-2950bdd257bc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:67","type":"CtReturnImpl","sourcecode":"return java.lang.Math.atan2((double - double), (double * (double - double)))"},"variableMap":{"lat1":"orientation","lat2":"orientation","lon1":"orientation","lon2":"orientation","shrinkFactor":"orientation"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:121","type":"CtReturnImpl","sourcecode":"return java.lang.Math.toDegrees(double)"},"status":-1},{"failures":[],"tindex":"c6e1e33e-82a7-11e5-a419-37d068ebef4b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Unzipper:61","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = new byte[8 * 1024]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.search.NameIndex:128","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = new byte[1]"},"status":-2},{"failures":[141,142],"tindex":"c6e1e33f-82a7-11e5-a419-3795569a21b5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.EdgeWrapper:83","type":"CtIfImpl","sourcecode":"if (int < 1)\n    throw new java.lang.IllegalStateException(\"You cannot save a reference with values smaller 1. 0 is reserved\");\n"},"variableMap":{"ref":"turnCostsCount"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.TurnCostExtension:91","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setHeader((1 * 4), int)"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"c6e147ef-82a7-11e5-a419-034f669e0718","diffs":[{"branches":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":["com.graphhopper.storage.BaseGraph_void_ensureNodeIndex(int).t3","com.graphhopper.storage.BaseGraph_void_ensureNodeIndex(int).e3"],"com.graphhopper.storage.index.Location2IDFullIndexTest.testNoErrorOnEdgeCase_lastIndex":["com.graphhopper.storage.BaseGraph_void_ensureNodeIndex(int).t3","com.graphhopper.storage.BaseGraph_void_ensureNodeIndex(int).e3"]},"type":"branch"}]},{"transformation":"c6e147ed-82a7-11e5-a419-cdce8f4130cb","diffs":[{"methodsDiff":{"delete":["java.nio.Buffer.position"]},"type":"staticDiff"}]}]}
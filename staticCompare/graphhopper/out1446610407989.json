{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":64,"com.graphhopper.routing.util.FootFlagEncoderTest.testPriority":101,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":4,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":7,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidTunnel":104,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":46,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPreferenceForSlowSpeed":99,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testService":91,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":87,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":26,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":6,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSortHighLevelFirst":43,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeightMMap":39,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":61,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":97,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":18,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":63,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":76,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeight":41,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":74,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":45,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":81,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":82,"com.graphhopper.GraphHopperTest.testPrepare":32,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPreferenceForSlowSpeed":115,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidTunnel":112,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":28,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":94,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":98,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":70,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":22,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":49,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":57,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":92,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":102,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":88,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPreferenceForSlowSpeed":107,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":80,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":50,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":55,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidTunnel":96,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":19,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":38,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":75,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":13,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":66,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":103,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":33,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":72,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":84,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":73,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":85,"com.graphhopper.GraphHopperTest.testLoadOSM":36,"com.graphhopper.routing.util.FootFlagEncoderTest.handleWayTagsRoundabout":117,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":21,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":83,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":15,"com.graphhopper.reader.OSMReaderTest.testSort":30,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":60,"com.graphhopper.util.DistanceCalcEarthTest.testEdgeDistance":1,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":62,"com.graphhopper.reader.OSMReaderTest.testMain":29,"com.graphhopper.util.DistanceCalcEarthTest.testPrecisionBug":0,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":79,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":105,"com.graphhopper.util.BitUtilLittleTest.testFromBitString":90,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":68,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":108,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":16,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":47,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testAcceptsCar":100,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":23,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":113,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":69,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":114,"com.graphhopper.util.DistanceCalcEarthTest.testPrecisionBug2":2,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":42,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":48,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":56,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":11,"com.graphhopper.storage.GraphHopperStorageCHTest.testPrios":44,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":65,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":78,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":17,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":27,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointCount":3,"com.graphhopper.util.DouglasPeuckerTest.testPathSimplify":5,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":109,"com.graphhopper.GraphHopperTest.testFootAndCar":34,"com.graphhopper.reader.dem.SRTMProviderTest.testGetFileString":40,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":95,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":111,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":53,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":52,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":8,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":77,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":24,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":10,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":59,"com.graphhopper.GraphHopperTest.testPrepareOnly":86,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":9,"com.graphhopper.GraphHopperTest.testVia":31,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":37,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":106,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":58,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":110,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":14,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":35,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":67,"com.graphhopper.GraphHopperTest.testFootOnly":89,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":12,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":116,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":51,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":54,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":71,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":25,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPreferenceForSlowSpeed":93},"transformations":[{"failures":[],"tindex":"667d3176-82aa-11e5-b3b7-8556a7d333d4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TurnWeighting:79","type":"CtIfImpl","sourcecode":"if (boolean)\n    double = com.graphhopper.routing.util.TurnWeighting.calcTurnWeight(int, com.graphhopper.util.EdgeIteratorState.getBaseNode(), int);\nelse\n    double = com.graphhopper.routing.util.TurnWeighting.calcTurnWeight(int, com.graphhopper.util.EdgeIteratorState.getBaseNode(), int);\n"},"status":-2},{"failures":[],"tindex":"667d5887-82aa-11e5-b3b7-6dd9b35a1979","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMInputFile:128","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:261","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.util.Instruction.getName()"},"status":-2},{"failures":[],"tindex":"667d5888-82aa-11e5-b3b7-c75e38267922","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PathMerger:43","type":"CtLocalVariableImpl","sourcecode":"double double = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:262","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.routing.util.ConsistentWeightApproximator.approximate(int, boolean)"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"tindex":"667d7f99-82aa-11e5-b3b7-ff4256532b5b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:220","type":"CtLocalVariableImpl","sourcecode":"double double = double * double"},"variableMap":{"a_lon_deg":"a_lat","shrinkFactor":"factor"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:166","type":"CtLocalVariableImpl","sourcecode":"double double = double + (double * double)"},"status":-1},{"failures":[],"tindex":"667d7f9a-82aa-11e5-b3b7-b95251275221","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:225","type":"CtAssertImpl","sourcecode":"assert (int) > 0 : \"call create or loadExisting before usage!\""},"variableMap":{"segmentSizePower":"tmpNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:701","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int)"},"status":0},{"failures":[],"tindex":"667d7f9b-82aa-11e5-b3b7-7d83d547e259","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:124","type":"CtReturnImpl","sourcecode":"return true"},"status":0},{"failures":[],"tindex":"667d7f9c-82aa-11e5-b3b7-dbdcefb41657","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.AStar:74","type":"CtAssignmentImpl","sourcecode":"java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge> = new java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>(int)"},"variableMap":{"prioQueueOpenSet":"prioQueueOpenSetTo","size":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:83","type":"CtAssignmentImpl","sourcecode":"java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge> = new java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>((int / 10))"},"status":0},{"failures":[38,39,39,40,40,41,41],"tindex":"667da6ad-82aa-11e5-b3b7-e5c0d9563e10","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DouglasPeucker:128","type":"CtIfImpl","sourcecode":"if ((int - int) < 2) {\n    return 0;\n} "},"variableMap":{"lastIndex":"intVal","fromIndex":"intVal"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:180","type":"CtIfImpl","sourcecode":"if ((double >= 0) || ((int - double) < (double)))\n    return int;\n"},"status":-1},{"failures":[],"tindex":"667da6ae-82aa-11e5-b3b7-73e7345285bc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:48","type":"CtAssignmentImpl","sourcecode":"double = (double - double) / (double + double)"},"variableMap":{"r":"fwdSlower","x":"fwdSlower","absY":"fwdSlower"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:230","type":"CtAssignmentImpl","sourcecode":"double = double * double"},"status":0},{"failures":[42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,26,57,58,59,60,61,27,62,63,28,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,31,32,35,36,88,89],"tindex":"667da6af-82aa-11e5-b3b7-7782f2a9c8fe","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:990","type":"CtIfImpl","sourcecode":"if ((int) == (com.graphhopper.storage.EdgeAccess.int))\n    throw new java.lang.IllegalStateException(((\"content of edgeId \" + (int)) + \" is marked as invalid - ie. the edge is already removed!\"));\n"},"variableMap":{"baseNode":"nodeIndex","edgeId":"nodeIndex","com.graphhopper.storage.EdgeAccess.NO_NODE":"nodeIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:157","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.CHGraphImpl.checkNodeId(int)"},"status":-1},{"failures":[],"tindex":"667dcdc0-82aa-11e5-b3b7-d3c2b3e08ce6","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:272","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.util.EdgeExplorer com.graphhopper.util.EdgeExplorer = com.graphhopper.storage.GraphHopperStorage.createEdgeExplorer()"},"variableMap":{"ghStorage":"g"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:52","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.util.EdgeExplorer com.graphhopper.util.EdgeExplorer = com.graphhopper.storage.Graph.createEdgeExplorer()"},"status":-2},{"failures":[],"tindex":"667dcdc1-82aa-11e5-b3b7-e3a721551c0f","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.TraversalMode:103","type":"CtIfImpl","sourcecode":"if ((int) == 1)\n    return int;\n"},"variableMap":{"edgeId":"size","noOfStates":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:175","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[90],"tindex":"667dcdc2-82aa-11e5-b3b7-5d49c23b071e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:402","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    throw new java.lang.IllegalArgumentException(\"graphhopper location cannot be null\");\n"},"variableMap":{"ghLocation":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilLittle:99","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < 8 ; int++) {\n    byte <<= 1;\n    if ((int < int) && ((java.lang.String.charAt(int)) != '0'))\n        byte |= 1;\n    \n    int++;\n}"},"status":-1},{"failures":[31],"tindex":"667df4d3-82aa-11e5-b3b7-c1d36517a177","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:53","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.util.Instruction>.set(((java.util.List<com.graphhopper.util.Instruction>.size()) - 1), com.graphhopper.util.Instruction)"},"status":-1},{"failures":[],"tindex":"667df4d4-82aa-11e5-b3b7-515331039e44","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:81","type":"CtIfImpl","sourcecode":"if (double > (java.lang.Math.double))\n    double -= 2 * (java.lang.Math.double);\n"},"variableMap":{"java.lang.Math.PI":"tmpWeight","angleXY":"weight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Dijkstra:95","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.EdgeEntry == null) {\n    com.graphhopper.storage.EdgeEntry = new com.graphhopper.storage.EdgeEntry(com.graphhopper.util.EdgeIterator.getEdge() , com.graphhopper.util.EdgeIterator.getAdjNode() , double);\n    com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n    gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry>.put(int, com.graphhopper.storage.EdgeEntry);\n    java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.add(com.graphhopper.storage.EdgeEntry);\n} else if ((com.graphhopper.storage.EdgeEntry.double) > double) {\n    java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.remove(com.graphhopper.storage.EdgeEntry);\n    com.graphhopper.storage.EdgeEntry.int = com.graphhopper.util.EdgeIterator.getEdge();\n    com.graphhopper.storage.EdgeEntry.double = double;\n    com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n    java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.add(com.graphhopper.storage.EdgeEntry);\n} else\n    continue;\n"},"status":-2},{"failures":[81,32],"tindex":"667df4d5-82aa-11e5-b3b7-c5d9a923530f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.RacingBikeFlagEncoder:183","type":"CtReturnImpl","sourcecode":"return \"racingbike\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.ShortestWeighting:58","type":"CtReturnImpl","sourcecode":"return \"SHORTEST|\" + (com.graphhopper.routing.util.FlagEncoder)"},"status":-1},{"failures":[],"tindex":"667df4d6-82aa-11e5-b3b7-6dd4d7fc1529","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:360","type":"CtIfImpl","sourcecode":"if (boolean)\n    com.graphhopper.util.PointList.reverse();\n"},"variableMap":{"reverse":"simplifyResponse","clonePL":"tmpPoints"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:94","type":"CtIfImpl","sourcecode":"if (boolean) {\n    int = com.graphhopper.util.PointList.getSize();\n    com.graphhopper.util.DouglasPeucker.simplify(com.graphhopper.util.PointList);\n} "},"status":0},{"failures":[91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116],"tindex":"667e1be7-82aa-11e5-b3b7-fbf4a62592da","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:413","type":"CtReturnImpl","sourcecode":"return 140"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:409","type":"CtReturnImpl","sourcecode":"return -1"},"status":-1},{"failures":[],"tindex":"667e1be8-82aa-11e5-b3b7-4d1c6db4e9d4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:155","type":"CtIfImpl","sourcecode":"if (int > (int)) {\n    return false;\n} "},"variableMap":{"size":"prevOrNextEdgeId","i":"prevOrNextEdgeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AbstractRoutingAlgorithm:75","type":"CtIfImpl","sourcecode":"if ((!(com.graphhopper.routing.util.TraversalMode.hasUTurnSupport())) && ((com.graphhopper.util.EdgeIterator.getEdge()) == int))\n    return false;\n"},"status":0},{"failures":[117],"tindex":"667e1be9-82aa-11e5-b3b7-eb64f847d92e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:271","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = ((com.graphhopper.reader.OSMWay.hasTag(\"oneway\", \"-1\")) || (com.graphhopper.reader.OSMWay.hasTag(\"vehicle:forward\", \"no\"))) || (com.graphhopper.reader.OSMWay.hasTag(\"motor_vehicle:forward\", \"no\"))"},"variableMap":{"way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:302","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = com.graphhopper.reader.OSMWay.hasTag(\"junction\", \"roundabout\")"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"667df4d6-82aa-11e5-b3b7-6dd4d7fc1529","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.DouglasPeucker.simplify","com.graphhopper.util.PointList.getSize"]},"branchesDiff":{"delete":["t0"]},"type":"staticDiff"}]},{"transformation":"667e1be8-82aa-11e5-b3b7-4d1c6db4e9d4","diffs":[{"branches":{"com.graphhopper.GraphHopperAPITest.testDisconnected179":["com.graphhopper.routing.util.TraversalMode_boolean_hasUTurnSupport().b","com.graphhopper.routing.DijkstraBidirectionRef_void_fillEdges(com.graphhopper.storage.EdgeEntry,java.util.PriorityQueue,gnu.trove.map.TIntObjectMap,com.graphhopper.util.EdgeExplorer,boolean).t1","com.graphhopper.routing.DijkstraBidirectionRef_void_fillEdges(com.graphhopper.storage.EdgeEntry,java.util.PriorityQueue,gnu.trove.map.TIntObjectMap,com.graphhopper.util.EdgeExplorer,boolean).e3","com.graphhopper.routing.AbstractRoutingAlgorithm_boolean_accept(com.graphhopper.util.EdgeIterator,int).t1","com.graphhopper.routing.DijkstraBidirectionRef_void_fillEdges(com.graphhopper.storage.EdgeEntry,java.util.PriorityQueue,gnu.trove.map.TIntObjectMap,com.graphhopper.util.EdgeExplorer,boolean).e4"],"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":["com.graphhopper.routing.util.TraversalMode_boolean_hasUTurnSupport().b","com.graphhopper.routing.Dijkstra_void_runAlgo().t2","com.graphhopper.routing.AbstractRoutingAlgorithm_boolean_accept(com.graphhopper.util.EdgeIterator,int).t1"],"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":["com.graphhopper.routing.util.TraversalMode_boolean_hasUTurnSupport().b","com.graphhopper.routing.AbstractRoutingAlgorithm_boolean_accept(com.graphhopper.util.EdgeIterator,int).t1"],"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":["com.graphhopper.routing.util.TraversalMode_boolean_hasUTurnSupport().b","com.graphhopper.routing.Dijkstra_void_runAlgo().t2","com.graphhopper.routing.AbstractRoutingAlgorithm_boolean_accept(com.graphhopper.util.EdgeIterator,int).t1"],"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":["com.graphhopper.routing.util.TraversalMode_boolean_hasUTurnSupport().b","com.graphhopper.routing.Dijkstra_void_runAlgo().e4","com.graphhopper.routing.Dijkstra_void_runAlgo().t2","com.graphhopper.routing.Dijkstra_void_runAlgo().e5","com.graphhopper.routing.AbstractRoutingAlgorithm_boolean_accept(com.graphhopper.util.EdgeIterator,int).t1"],"com.graphhopper.GraphHopperTest.testFootAndCar":["com.graphhopper.routing.DijkstraBidirectionRef_void_fillEdges(com.graphhopper.storage.EdgeEntry,java.util.PriorityQueue,gnu.trove.map.TIntObjectMap,com.graphhopper.util.EdgeExplorer,boolean).t1","com.graphhopper.routing.util.TraversalMode_boolean_hasUTurnSupport().b","com.graphhopper.routing.AbstractRoutingAlgorithm_boolean_accept(com.graphhopper.util.EdgeIterator,int).t1"]},"type":"branch"},{"branchesDiff":{"delete":["t0"]},"type":"staticDiff"}]}]}
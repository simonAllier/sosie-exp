{"failureDictionary":{"com.graphhopper.routing.util.FootFlagEncoderTest.testPriority":60,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":196,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":26,"com.graphhopper.reader.OSMReaderTest.testFerry":28,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":40,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testService":139,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":213,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTram":141,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":93,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidanceOfHighMaxSpeed":138,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":96,"com.graphhopper.reader.OSMReaderTest.testWithBounds":8,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAccess":94,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":14,"com.graphhopper.routing.util.FootFlagEncoderTest.testBasics":67,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testReduceToMaxSpeed":145,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":70,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":208,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testSacScale":117,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testReduceToMaxSpeed":92,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":211,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":148,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetAccess":106,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":209,"com.graphhopper.GraphHopperTest.testPrepare":166,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":195,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":172,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":179,"com.graphhopper.routing.util.BikeFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":37,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":153,"com.graphhopper.routing.util.BikeFlagEncoderTest.testSacScale":32,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":146,"com.graphhopper.GraphHopperAPITest.testDisconnected179":159,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":137,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":35,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":214,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPreferenceForSlowSpeed":54,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":55,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed0_issue367":107,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":180,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidTunnel":89,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":185,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":207,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":4,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":16,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":41,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":203,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":101,"com.graphhopper.routing.util.BikeFlagEncoderTest.testReduceToMaxSpeed":49,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":167,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":176,"com.graphhopper.routing.util.FootFlagEncoderTest.handleWayTagsRoundabout":57,"com.graphhopper.GraphHopperTest.testLoadOSM":169,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":33,"com.graphhopper.reader.OSMReaderTest.testSort":2,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":190,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":7,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":15,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":175,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_noCosts":111,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTram":122,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":50,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":200,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":53,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":202,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPriority":123,"com.graphhopper.routing.util.CarFlagEncoderTest.testFordAccess":104,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":201,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":178,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":186,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":48,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":81,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":131,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":24,"com.graphhopper.routing.util.FootFlagEncoderTest.testGetSpeed":58,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":192,"com.graphhopper.coll.OSMIDSegmentedMapTest.testGet2":19,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testBarrierAccess":77,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":84,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":120,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":206,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":183,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":182,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidMotorway":47,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testBarrierAccess":140,"com.graphhopper.routing.util.FootFlagEncoderTest.testRailPlatformIssue366":63,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":83,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":23,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":170,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":119,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSetSpeed0_issue367":73,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testBarrierAccess":118,"com.graphhopper.GraphHopperAPITest.testLoad":158,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":168,"com.graphhopper.routing.util.FootFlagEncoderTest.testTurnFlagEncoding_noCostsAndRestrictions":64,"com.graphhopper.routing.util.FootFlagEncoderTest.testBarrierAccess":56,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":199,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":13,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":17,"com.graphhopper.reader.OSMReaderTest.testBarriers":21,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testclassBicycle":82,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":11,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":72,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_withCosts":86,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":184,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":126,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPreferenceForSlowSpeed":149,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAccess":147,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidTunnel":46,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPriority":142,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":177,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPreferenceForSlowSpeed":97,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":65,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":187,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testReduceToMaxSpeed":127,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":80,"com.graphhopper.routing.util.CarFlagEncoderTest.testSwapDir":115,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":191,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetToMaxSpeed":100,"com.graphhopper.routing.util.CarFlagEncoderTest.testBarrierAccess":98,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":194,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":91,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":151,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTram":87,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":144,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPreferenceForSlowSpeed":132,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidTunnel":124,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":79,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":95,"com.graphhopper.routing.util.BikeFlagEncoderTest.testclassBicycle":39,"com.graphhopper.reader.OSMReaderTest.testFoot":0,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testSacScale":133,"com.graphhopper.reader.OSMReaderTest.testOneWay":9,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":38,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":36,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":74,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_withCosts":43,"com.graphhopper.routing.util.CarFlagEncoderTest.testMilitaryAccess":99,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidMotorway":143,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":150,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSacScale":75,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":3,"com.graphhopper.storage.SynchedDAWrapperTest.testCopy":156,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":205,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":198,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":42,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxValue":109,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":173,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":210,"com.graphhopper.routing.util.FootFlagEncoderTest.testAccess":66,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTram":44,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":165,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":59,"com.graphhopper.storage.RAMDataAccessTest.testCopy":157,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testclassBicycle":136,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":160,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":164,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":163,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":134,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":162,"com.graphhopper.routing.util.BikeFlagEncoderTest.testBarrierAccess":34,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":161,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":193,"com.graphhopper.reader.OSMReaderTest.testMain":1,"com.graphhopper.routing.util.EncodingManagerTest.testSupportFords":68,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":103,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPriority":45,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAccess":51,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":102,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":152,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":12,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":128,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":130,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":5,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":61,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPriority":88,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":78,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":31,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":197,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidMotorway":90,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":174,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":110,"com.graphhopper.routing.util.CarFlagEncoderTest.testRegisterOnlyOnceAllowed":112,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":108,"com.graphhopper.GraphHopperTest.testFootAndCar":10,"com.graphhopper.coll.OSMIDSegmentedMapTest.testGet":18,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":85,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAccess":129,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":121,"com.graphhopper.routing.PathTest.testTime":154,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidMotorway":125,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibility":69,"com.graphhopper.routing.util.CarFlagEncoderTest.testOneway":113,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed":116,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_withCosts":114,"com.graphhopper.reader.OSMReaderTest.testRelation":29,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":189,"com.graphhopper.coll.OSMIDSegmentedMapTest.testZeroKey":20,"com.graphhopper.GraphHopperTest.testPrepareOnly":212,"com.graphhopper.GraphHopperTest.testVia":155,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":52,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":188,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":22,"com.graphhopper.reader.OSMReaderTest.testTurnFlagCombination":30,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":25,"com.graphhopper.GraphHopperTest.testFootOnly":171,"com.graphhopper.routing.util.FootFlagEncoderTest.testCombined":62,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":27,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":6,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidTunnel":135,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":105,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":204,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":71,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":181,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":76},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],"tindex":"cfd24285-82b6-11e5-b03a-4d6f3a46973d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:990","type":"CtIfImpl","sourcecode":"if ((int) == (com.graphhopper.storage.EdgeAccess.int))\n    throw new java.lang.IllegalStateException(((\"content of edgeId \" + (int)) + \" is marked as invalid - ie. the edge is already removed!\"));\n"},"variableMap":{"baseNode":"removedEdges","edgeId":"removedEdges","com.graphhopper.storage.EdgeAccess.NO_NODE":"removedEdges"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:254","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (gnu.trove.list.TIntList.size()) ; int++) {\n    com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(gnu.trove.list.TIntList.get(int));\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        com.graphhopper.util.EdgeIterator.setFlags(com.graphhopper.routing.util.FlagEncoder.setAccess(com.graphhopper.util.EdgeIterator.getFlags(), false, false));\n        int++;\n    }\n}"},"status":-1},{"failures":[],"tindex":"cfd26996-82b6-11e5-b03a-37a1d97494cb","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.GHUtility:254","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int < 0))\n    continue;\n"},"variableMap":{"newAdjIndex":"edgeId","newBaseIndex":"prevOrNextEdgeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TurnWeighting:79","type":"CtIfImpl","sourcecode":"if (boolean)\n    double = com.graphhopper.routing.util.TurnWeighting.calcTurnWeight(int, com.graphhopper.util.EdgeIteratorState.getBaseNode(), int);\nelse\n    double = com.graphhopper.routing.util.TurnWeighting.calcTurnWeight(int, com.graphhopper.util.EdgeIteratorState.getBaseNode(), int);\n"},"status":-2},{"failures":[18,19,20],"tindex":"cfd26997-82b6-11e5-b03a-2bd8ff7f60d3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:617","type":"CtReturnImpl","sourcecode":"return 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:139","type":"CtReturnImpl","sourcecode":"return -1"},"status":-1},{"failures":[],"tindex":"cfd26998-82b6-11e5-b03a-d559234e7ce0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:124","type":"CtIfImpl","sourcecode":"if (long == long)\n    return long;\nelse\n    return ~long;\n"},"variableMap":{"high":"flags","highKey":"flags","key":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:122","type":"CtIfImpl","sourcecode":"if (boolean)\n    return com.graphhopper.routing.util.EncodedDoubleValue.setDefaultValue(long);\n"},"status":-2},{"failures":[21,22],"tindex":"cfd290a9-82b6-11e5-b03a-45a39b3acc3f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:386","type":"CtIfImpl","sourcecode":"if ((long & long) > 0) {\n    com.graphhopper.reader.OSMReader.getNodeFlagsMap().put(long, 0);\n    long long = com.graphhopper.reader.OSMReader.addBarrierNode(long);\n    if (int > 0) {\n        if (int < 0)\n            int = 0;\n        \n        long[] long[] = gnu.trove.list.TLongList.toArray(int, ((int - int) + 1));\n        long[][((long[].int) - 1)] = long;\n        gnu.trove.list.TLongList gnu.trove.list.TLongList = new gnu.trove.list.array.TLongArrayList(long[]);\n        java.util.List<com.graphhopper.util.EdgeIteratorState>.addAll(com.graphhopper.reader.OSMReader.addOSMWay(gnu.trove.list.TLongList, long, long));\n        java.util.List<com.graphhopper.util.EdgeIteratorState>.addAll(com.graphhopper.reader.OSMReader.addBarrierEdge(long, long, long, long, long));\n    } else {\n        java.util.List<com.graphhopper.util.EdgeIteratorState>.addAll(com.graphhopper.reader.OSMReader.addBarrierEdge(long, long, long, long, long));\n        gnu.trove.list.TLongList.set(0, long);\n    }\n    int = int;\n} "},"status":-1},{"failures":[23],"tindex":"cfd290aa-82b6-11e5-b03a-c95d14f76ffd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:255","type":"CtAssignmentImpl","sourcecode":"double = 30"},"variableMap":{"speed":"incDist2DSum"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:187","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-1},{"failures":[],"tindex":"cfd290ab-82b6-11e5-b03a-7374c8c5412d","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:315","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.storage.Directory) != null)\n    return com.graphhopper.storage.Directory;\n"},"variableMap":{"dir":"dir"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:330","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.Directory"},"status":-2},{"failures":[24,25,26,27,28,0,1,2,21,3,4,5,6,29,30,22,7,8,31,9,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,14,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,23,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154],"tindex":"cfd2b7bc-82b6-11e5-b03a-b73f6f246b87","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:184","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Math.max(((int)(java.lang.Math.pow(2, int))), com.graphhopper.storage.AbstractDataAccess.int)"},"variableMap":{"com.graphhopper.storage.AbstractDataAccess.SEGMENT_SIZE_MIN":"shift","tmp":"shift","segmentSizeInBytes":"shift"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:224","type":"CtOperatorAssignmentImpl","sourcecode":"int += com.graphhopper.routing.util.EncodedValue.getBits()"},"status":-1},{"failures":[0,9,155,10,103,113],"tindex":"cfd2b7bd-82b6-11e5-b03a-31ce1e9c9494","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:126","type":"CtAssignmentImpl","sourcecode":"long = 0"},"variableMap":{"size":"encoded"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:277","type":"CtOperatorAssignmentImpl","sourcecode":"long |= long"},"status":-1},{"failures":[],"tindex":"cfd2b7be-82b6-11e5-b03a-bf8e294cd922","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.SparseArray:132","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:159","type":"CtLocalVariableImpl","sourcecode":"int int = (int) + int"},"status":-2},{"failures":[],"tindex":"cfd2decf-82b6-11e5-b03a-a12ebe0f1765","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.AStarBidirection:201","type":"CtIfImpl","sourcecode":"if ((boolean) || (boolean))\n    return true;\n"},"variableMap":{"finishedTo":"enabled3D","finishedFrom":"enabled3D"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.PillarInfo:50","type":"CtReturnImpl","sourcecode":"return boolean"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],"tindex":"cfd2ded0-82b6-11e5-b03a-af5442f36e11","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:228","type":"CtAssertImpl","sourcecode":"assert (int + 4) <= (int) : \"integer cannot be distributed over two segments\""},"variableMap":{"segmentSizeInBytes":"removedEdges","index":"min"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:253","type":"CtIfImpl","sourcecode":"if ((gnu.trove.list.TIntList.size()) < int)\n    for (int int = 0 ; int < (gnu.trove.list.TIntList.size()) ; int++) {\n        com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(gnu.trove.list.TIntList.get(int));\n        while (com.graphhopper.util.EdgeIterator.next()) {\n            com.graphhopper.util.EdgeIterator.setFlags(com.graphhopper.routing.util.FlagEncoder.setAccess(com.graphhopper.util.EdgeIterator.getFlags(), false, false));\n            int++;\n        }\n    }\n"},"status":-1},{"failures":[156,157],"tindex":"cfd2ded1-82b6-11e5-b03a-93013ffa8b5c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:69","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (byte[][].int) ; int++) {\n    byte[] byte[] = byte[][][int];\n    com.graphhopper.storage.RAMDataAccess.byte[][][int] = java.util.Arrays.copyOf(byte[], byte[].int);\n}"},"status":-1},{"failures":[158,159,160,161,162,163,164,165,155,166,167,10,168,169,170,171,172,173,174,175,150,151,176,177,152,178,179,180,181,182,183,184,185,186,187,153,188,189,190,191,192,193,194,195,196,197,198,199,200,201],"tindex":"cfd2ded2-82b6-11e5-b03a-b97eead0a381","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:990","type":"CtIfImpl","sourcecode":"if ((int) == (com.graphhopper.storage.EdgeAccess.int))\n    throw new java.lang.IllegalStateException(((\"content of edgeId \" + (int)) + \" is marked as invalid - ie. the edge is already removed!\"));\n"},"variableMap":{"baseNode":"from","edgeId":"from","com.graphhopper.storage.EdgeAccess.NO_NODE":"from"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AbstractBidirAlgo:61","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.AbstractBidirAlgo.initFrom(int, 0)"},"status":-1},{"failures":[5,155],"tindex":"cfd2ded3-82b6-11e5-b03a-2766a152d6f5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:255","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.LocationIndexTree.setMinResolutionInMeter(int)"},"variableMap":{"this":"tmpIndex","minResolutionInMeter":"maxRegionSearch"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1083","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.LocationIndexTree.setMaxRegionSearch(int)"},"status":-1},{"failures":[202,203,204,205,206,207],"tindex":"cfd305e4-82b6-11e5-b03a-69f7dd61c7a8","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:967","type":"CtAssignmentImpl","sourcecode":"int = (23 * int) + (int)"},"variableMap":{"from":"exitNumber","hash":"exitNumber"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.RoundaboutInstruction:41","type":"CtOperatorAssignmentImpl","sourcecode":"this.int += 1"},"status":-1},{"failures":[173,208,174,150,151,209,210,176],"tindex":"cfd305e5-82b6-11e5-b03a-cf046d492c4a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:206","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.ch.PrepareContractionHierarchies.contractNodes()"},"status":-1},{"failures":[],"tindex":"cfd305e6-82b6-11e5-b03a-05de3c8fd161","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.GHUtility:172","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.storage.NodeAccess com.graphhopper.storage.NodeAccess = com.graphhopper.storage.CHGraph.getNodeAccess()"},"variableMap":{"g":"fromGraph"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:288","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.storage.NodeAccess com.graphhopper.storage.NodeAccess = com.graphhopper.storage.Graph.getNodeAccess()"},"status":-2},{"failures":[28,0,1,2,21,3,4,5,6,22,7,8,31,9,211,212,213,155,166,167,10,168,169,214,170,171,11],"tindex":"cfd305e7-82b6-11e5-b03a-8351e420b1a9","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Downloader:83","type":"CtAssignmentImpl","sourcecode":"java.io.InputStream = new java.util.zip.GZIPInputStream(java.io.InputStream)"},"variableMap":{"is":"ips"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMInputFile:87","type":"CtAssignmentImpl","sourcecode":"java.io.InputStream = new java.io.BufferedInputStream(new java.io.FileInputStream(java.io.File) , 50000)"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":19,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
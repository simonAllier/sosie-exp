{"failureDictionary":{"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":41,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":81,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":34,"com.graphhopper.reader.OSMReaderTest.testMain":46,"com.graphhopper.reader.OSMReaderTest.testFerry":74,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":58,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":66,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":71,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":42,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":27,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":21,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":38,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":49,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":62,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":29,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":43,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":55,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":30,"com.graphhopper.reader.OSMReaderTest.testWithBounds":64,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":17,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":78,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":19,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":82,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":53,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":65,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":28,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":33,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":69,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":44,"com.graphhopper.GraphHopperTest.testPrepare":7,"com.graphhopper.GraphHopperTest.testFootAndCar":9,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":45,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":54,"com.graphhopper.coll.OSMIDSegmentedMapTest.testGet":63,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":61,"com.graphhopper.reader.OSMReaderTest.testFoot":75,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":35,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":37,"com.graphhopper.util.InstructionListTest.testCreateGPX":85,"com.graphhopper.reader.OSMReaderTest.testOneWay":83,"com.graphhopper.util.AngleCalcTest.checkAzimuthConsitency":88,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":56,"com.graphhopper.util.InstructionTest.testCalcAzimuthAndGetDirection":87,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":60,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":39,"com.graphhopper.GraphHopperAPITest.testDisconnected179":15,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":51,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":18,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":59,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":72,"com.graphhopper.util.AngleCalcTest.testCalcAzimuth":89,"com.graphhopper.GraphHopperTest.testPrepareOnly":70,"com.graphhopper.GraphHopperTest.testVia":6,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":12,"com.graphhopper.util.InstructionListTest.testCreateGPXWithEle":84,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":31,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":80,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":76,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":25,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":68,"com.graphhopper.GraphHopperAPITest.testLoad":14,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":77,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":10,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":24,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":57,"com.graphhopper.GraphHopperTest.testFootOnly":13,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":86,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":8,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":50,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":22,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":79,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":23,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":5,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":67,"com.graphhopper.reader.OSMReaderTest.testBarriers":48,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":52,"com.graphhopper.GraphHopperTest.testLoadOSM":11,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":0,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":36,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":73,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":16,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":20,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":32,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":4,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":3,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":26,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":2,"com.graphhopper.reader.OSMReaderTest.testSort":47,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":1,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":40},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"tindex":"db91d688-82a9-11e5-927c-713de18c564f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:402","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.close()"},"variableMap":{"index":"dataAccess"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:305","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.flush()"},"status":-1},{"failures":[49,50,51,52],"tindex":"db9224a9-82a9-11e5-927c-55820da43a55","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:81","type":"CtInvocationImpl","sourcecode":"gnu.trove.stack.array.TIntArrayStack.push(int)"},"status":-1},{"failures":[53,54,55,56,57,58,59,60,61,62],"tindex":"db9224aa-82a9-11e5-927c-b39469954515","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:442","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[63],"tindex":"db9224ab-82a9-11e5-927c-23be6c71a26c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:73","type":"CtAssignmentImpl","sourcecode":"long[] = java.util.Arrays.copyOf(long[], int)"},"status":-1},{"failures":[13,46,64],"tindex":"db9224ac-82a9-11e5-927c-b502dfee9564","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:199","type":"CtIfImpl","sourcecode":"if (false) {\n    if (double > 1)\n        double = 1;\n    else if (double < 0)\n        double = 0;\n    \n} "},"variableMap":{"factor":"ele"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:843","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(double, double, double)"},"status":-1},{"failures":[65,66,67,68],"tindex":"db9224ad-82a9-11e5-927c-13c8ac1f5fde","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:110","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.close()"},"status":-1},{"failures":[69,70,71,6,7,8,9,10,11,72,12,13,73,74,75,46,47,48,76,77,78,79,80,81,64,82,83],"tindex":"db924bbe-82a9-11e5-927c-37d2d8cdb6dd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMInputFile:60","type":"CtIfImpl","sourcecode":"if (boolean) {\n    com.graphhopper.reader.OSMInputFile.openPBFReader(java.io.InputStream);\n} else {\n    com.graphhopper.reader.OSMInputFile.openXMLStream(java.io.InputStream);\n}"},"status":-1},{"failures":[],"tindex":"db924bbf-82a9-11e5-927c-2d238b5c6af3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:390","type":"CtLocalVariableImpl","sourcecode":"int int = 5"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:359","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.reader.OSMReader.getNodeMap().get(gnu.trove.list.TLongList.get(0))"},"status":-2},{"failures":[],"tindex":"db924bc0-82a9-11e5-927c-c38aff3ee652","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:742","type":"CtIfImpl","sourcecode":"if (!(gnu.trove.set.hash.TIntHashSet.isEmpty())) {\n    double double = com.graphhopper.storage.index.LocationIndexTree.calculateRMin(double, double, int);\n    double double = com.graphhopper.storage.index.LocationIndexTree.calcMinDistance(double, double, gnu.trove.set.hash.TIntHashSet);\n    if (double < double)\n        return true;\n    \n} "},"variableMap":{"queryLat":"queryLon","foundEntries":"foundEntries","queryLon":"queryLon","this":"this","iteration":"iteration"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:739","type":"CtIfImpl","sourcecode":"if ((int % 2) == 1) {\n    if (!(gnu.trove.set.hash.TIntHashSet.isEmpty())) {\n        double double = com.graphhopper.storage.index.LocationIndexTree.calculateRMin(double, double, int);\n        double double = com.graphhopper.storage.index.LocationIndexTree.calcMinDistance(double, double, gnu.trove.set.hash.TIntHashSet);\n        if (double < double)\n            return true;\n        \n    } \n} "},"status":0},{"failures":[],"tindex":"db9272d1-82a9-11e5-927c-1915afd1c5f6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.VirtualEdgeIteratorState:91","type":"CtIfImpl","sourcecode":"if (int == 2)\n    return com.graphhopper.util.PointList.copy(1, com.graphhopper.util.PointList.getSize());\nelse if (int == 0) {\n    if ((com.graphhopper.util.PointList.getSize()) == 1)\n        return com.graphhopper.util.PointList.com.graphhopper.util.PointList;\n    \n    return com.graphhopper.util.PointList.copy(1, ((com.graphhopper.util.PointList.getSize()) - 1));\n} "},"variableMap":{"mode":"length","pointList":"com.graphhopper.util.PointList.EMPTY","com.graphhopper.util.PointList.EMPTY":"com.graphhopper.util.PointList.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:870","type":"CtIfImpl","sourcecode":"if (long > 0) {\n    long *= 4;\n    int = com.graphhopper.storage.DataAccess.getInt(long);\n    long += 4;\n    byte[] = new byte[(int * (com.graphhopper.storage.NodeAccess.getDimension())) * 4];\n    com.graphhopper.storage.DataAccess.getBytes(long, byte[], byte[].int);\n} else if (int == 0)\n    return com.graphhopper.util.PointList.com.graphhopper.util.PointList;\n"},"status":-2},{"failures":[],"tindex":"db9272d2-82a9-11e5-927c-95c4a62f9430","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:190","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motorcar\")"},"variableMap":{"way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:211","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"foot\")"},"status":-2},{"failures":[],"tindex":"db9299e3-82a9-11e5-927c-774b3f6d1a11","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:648","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GraphHopper.cleanUp()"},"status":0},{"failures":[],"tindex":"db9299e4-82a9-11e5-927c-3320868fd97f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:102","type":"CtIfImpl","sourcecode":"if (double > ((+(java.lang.Math.double)) + double))\n    double = double - (2 * (java.lang.Math.double));\nelse\n    double = double;\n"},"variableMap":{"orientation":"weightApproximation","resultOrientation":"weightApproximation","baseOrientation":"weightApproximation","java.lang.Math.PI":"weightApproximation"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.ConsistentWeightApproximator:37","type":"CtIfImpl","sourcecode":"if (boolean)\n    double *= -1;\n"},"status":0},{"failures":[],"tindex":"db9299e5-82a9-11e5-927c-e54929a10e82","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:93","type":"CtIfImpl","sourcecode":"if (double >= 0) {\n    if (double < ((-(java.lang.Math.double)) + double))\n        double = double + (2 * (java.lang.Math.double));\n    else\n        double = double;\n    \n} else {\n    if (double > ((+(java.lang.Math.double)) + double))\n        double = double - (2 * (java.lang.Math.double));\n    else\n        double = double;\n    \n}"},"variableMap":{"orientation":"weight","resultOrientation":"weight","baseOrientation":"weight","java.lang.Math.PI":"weight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:655","type":"CtForEachImpl","sourcecode":"NEXT_SC : for (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut : java.util.Map<com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut>.keySet()) {\n    boolean boolean = false;\n    com.graphhopper.util.CHEdgeIterator com.graphhopper.util.CHEdgeIterator = com.graphhopper.util.CHEdgeExplorer.setBaseNode(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n    while (com.graphhopper.util.CHEdgeIterator.next()) {\n        if (((com.graphhopper.util.CHEdgeIterator.isShortcut()) && ((com.graphhopper.util.CHEdgeIterator.getAdjNode()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) && (com.graphhopper.util.CHEdgeIterator.canBeOverwritten(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long))) {\n            if ((com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double) >= (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.CHEdgeIterator, false, com.graphhopper.util.EdgeIterator.int)))\n                continue NEXT_SC;\n            \n            if (((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) || ((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) {\n                throw new java.lang.IllegalStateException((((((((((((((((((\"Shortcut cannot update itself! \" + (com.graphhopper.util.CHEdgeIterator.getEdge())) + \", skipEdge1:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", skipEdge2:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", edge \") + com.graphhopper.util.CHEdgeIterator) + \":\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.CHEdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", sc:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut) + \", skippedEdge1: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", skippedEdge2: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", neighbors:\") + (com.graphhopper.util.GHUtility.getNeighbors(com.graphhopper.util.CHEdgeIterator))));\n            } \n            com.graphhopper.util.CHEdgeIterator.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n            com.graphhopper.util.CHEdgeIterator.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n            com.graphhopper.util.CHEdgeIterator.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n            com.graphhopper.util.CHEdgeIterator.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n            com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIterator.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n            boolean = true;\n            break;\n        } \n    }\n    if (!boolean) {\n        com.graphhopper.util.CHEdgeIteratorState com.graphhopper.util.CHEdgeIteratorState = com.graphhopper.storage.CHGraphImpl.shortcut(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        com.graphhopper.util.CHEdgeIteratorState.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n        com.graphhopper.util.CHEdgeIteratorState.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIteratorState.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIteratorState.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIteratorState.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        int++;\n    } \n}"},"status":-2},{"failures":[],"tindex":"db92c0f6-82a9-11e5-927c-63e2288e3d24","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:599","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.CommonEdgeIterator.setFlags((long | long))"},"variableMap":{"accessFlags":"flags","edge":"edge","weightLong":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:246","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.EdgeIteratorState.setFlags(long)"},"status":0},{"failures":[71,6,7,10,11,72,13],"tindex":"db92e807-82a9-11e5-927c-23993fd4ce8f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:92","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.GraphHopperStorage.optimize()"},"variableMap":{"ghStorage":"ghStorage"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1146","type":"CtInvocationImpl","sourcecode":"org.slf4j.Logger.info(((((((\"flushing graph \" + (com.graphhopper.storage.GraphHopperStorage.toString())) + \", details:\") + (com.graphhopper.storage.GraphHopperStorage.toDetailsString())) + \", \") + (com.graphhopper.util.Helper.getMemInfo())) + \")\"))"},"status":-1},{"failures":[84,85,86],"tindex":"db92e808-82a9-11e5-927c-0982ab9d7019","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionList:213","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"\\n<trk><name>\")"},"variableMap":{"track":"track"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:223","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<\/trkpt>\")"},"status":-1},{"failures":[],"tindex":"db92e809-82a9-11e5-927c-9f59304a61c1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PathMerger:45","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:242","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = (com.graphhopper.routing.util.EncodingManager.getBytesForFlags()) == 8"},"status":-2},{"failures":[87,88,89],"tindex":"db92e80a-82a9-11e5-927c-2f024c9c45a9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:118","type":"CtIfImpl","sourcecode":"if (double < 0)\n    double += 2 * (java.lang.Math.double);\n"},"status":-1},{"failures":[],"tindex":"db92e80b-82a9-11e5-927c-cb9c1d981d51","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:123","type":"CtAssignmentImpl","sourcecode":"int = (int * (int)) + int"},"variableMap":{"ret":"size","retBucket":"size","i":"size","bucketSize":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntIntBinHeap:206","type":"CtOperatorAssignmentImpl","sourcecode":"int += 1"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"db92c0f6-82a9-11e5-927c-63e2288e3d24","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.EdgeIteratorState.setFlags"]},"type":"staticDiff"}]},{"transformation":"db924bc0-82a9-11e5-927c-c38aff3ee652","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.index.LocationIndexTree.calcMinDistance","com.graphhopper.storage.index.LocationIndexTree.calculateRMin","gnu.trove.impl.hash.THash.isEmpty"]},"branchesDiff":{"delete":["t0","t1","t2"]},"type":"staticDiff"},{"branches":{"com.graphhopper.reader.OSMReaderTest.testBarriers":["com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t1","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e1"],"com.graphhopper.GraphHopperAPITest.testLoad":["com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t1","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":["com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t1","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":["com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e1"],"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":["com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t1"],"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":["com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e2"]},"type":"branch"}]},{"transformation":"db9299e4-82a9-11e5-927c-3320868fd97f","diffs":[{"branchesDiff":{"delete":["t0"]},"type":"staticDiff"}]},{"transformation":"db9299e3-82a9-11e5-927c-774b3f6d1a11","diffs":[{"methodsDiff":{"delete":["com.graphhopper.GraphHopper.cleanUp"]},"type":"staticDiff"},{"branches":{"com.graphhopper.reader.OSMReaderTest.testNegativeIds":["com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_goFurther(int).t1","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_removeEdges(com.graphhopper.util.EdgeExplorer,com.graphhopper.routing.util.FlagEncoder,gnu.trove.list.TIntList,int).t1","com.graphhopper.coll.GHBitSetImpl_boolean_contains(int).b","com.graphhopper.coll.GHBitSetImpl_com.graphhopper.coll.GHBitSetImpl(int).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_removeEdges(com.graphhopper.util.EdgeExplorer,com.graphhopper.routing.util.FlagEncoder,gnu.trove.list.TIntList,int).l2","com.graphhopper.storage.GraphHopperStorage_void_optimize().t2","com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter_com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter(com.graphhopper.routing.util.FlagEncoder).b","com.graphhopper.util.SimpleIntDeque_com.graphhopper.util.SimpleIntDeque(int,float).e1","com.graphhopper.util.SimpleIntDeque_com.graphhopper.util.SimpleIntDeque(int,float).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_com.graphhopper.routing.util.PrepareRoutingSubnetworks_setMinOneWayNetworkSize(int).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_getMaxSubnetworks().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_java.util.List_findSubnetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_boolean_detectNodeRemovedForAllEncoders(com.graphhopper.util.EdgeExplorer,int).e1","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_goFurther(int).t3","com.graphhopper.util.SimpleIntDeque_int_pop().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_doWork().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_doWork().e1","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_doWork().e2","com.graphhopper.routing.util.PrepareRoutingSubnetworks_com.graphhopper.routing.util.PrepareRoutingSubnetworks(com.graphhopper.storage.GraphHopperStorage,java.util.Collection).b","com.graphhopper.routing.util.EdgeFilter$1_boolean_accept(com.graphhopper.util.EdgeIteratorState).b","com.graphhopper.storage.BaseGraph$EdgeIterable_boolean_next().e2","com.graphhopper.routing.util.PrepareRoutingSubnetworks_java.util.List_findSubnetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter).t1","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_checkAdjacent(com.graphhopper.util.EdgeIteratorState).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_java.util.List_findSubnetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter).l4","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_markNodesRemovedIfUnreachable().l2","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_markNodesRemovedIfUnreachable().b","com.graphhopper.storage.BaseGraph_com.graphhopper.util.EdgeExplorer_createEdgeExplorer().b","com.graphhopper.util.BreadthFirstSearch_void_start(com.graphhopper.util.EdgeExplorer,int).b","com.graphhopper.routing.util.EncodingManager_java.util.List_fetchEdgeEncoders().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_doWork().l3","com.graphhopper.util.BreadthFirstSearch_void_start(com.graphhopper.util.EdgeExplorer,int).e2","com.graphhopper.util.BreadthFirstSearch_void_start(com.graphhopper.util.EdgeExplorer,int).e1","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_checkAdjacent(com.graphhopper.util.EdgeIteratorState).t1","com.graphhopper.storage.BaseGraph$CommonEdgeIterator_boolean_isBackward(com.graphhopper.routing.util.FlagEncoder).b","com.graphhopper.storage.GraphHopperStorage_boolean_isFrozen().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_checkAdjacent(com.graphhopper.util.EdgeIteratorState).t2","com.graphhopper.storage.BaseGraph$CommonEdgeIterator_long_getDirectFlags().e1","com.graphhopper.coll.GHBitSetImpl_void_add(int).b","com.graphhopper.util.BreadthFirstSearch_void_start(com.graphhopper.util.EdgeExplorer,int).t2","com.graphhopper.routing.util.PrepareRoutingSubnetworks_com.graphhopper.routing.util.PrepareRoutingSubnetworks_setMinNetworkSize(int).b","com.graphhopper.util.BreadthFirstSearch_void_start(com.graphhopper.util.EdgeExplorer,int).l3","com.graphhopper.GraphHopper_void_cleanUp().b","com.graphhopper.util.BreadthFirstSearch_void_start(com.graphhopper.util.EdgeExplorer,int).l4","com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter_com.graphhopper.routing.util.FlagEncoder_getEncoder().b","com.graphhopper.util.SimpleIntDeque_com.graphhopper.util.SimpleIntDeque().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_goFurther(int).e1","com.graphhopper.routing.util.DefaultEdgeFilter_com.graphhopper.routing.util.DefaultEdgeFilter(com.graphhopper.routing.util.FlagEncoder).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_goFurther(int).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_boolean_detectNodeRemovedForAllEncoders(com.graphhopper.util.EdgeExplorer,int).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).t2","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).t1","com.graphhopper.storage.BaseGraph_com.graphhopper.coll.GHBitSet_getRemovedNodes().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).l5","com.graphhopper.util.SimpleIntDeque_void_push(int).e1","com.graphhopper.util.SimpleIntDeque_void_push(int).b","com.graphhopper.storage.GraphHopperStorage_void_optimize().e1","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_removeEdges(com.graphhopper.util.EdgeExplorer,com.graphhopper.routing.util.FlagEncoder,gnu.trove.list.TIntList,int).b","com.graphhopper.util.SimpleIntDeque_int_pop().e1","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_goFurther(int).e3","com.graphhopper.routing.util.PrepareRoutingSubnetworks_boolean_detectNodeRemovedForAllEncoders(com.graphhopper.util.EdgeExplorer,int).t1","com.graphhopper.routing.util.PrepareRoutingSubnetworks_boolean_detectNodeRemovedForAllEncoders(com.graphhopper.util.EdgeExplorer,int).l3","com.graphhopper.routing.util.AbstractFlagEncoder_boolean_isBackward(long).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_boolean_detectNodeRemovedForAllEncoders(com.graphhopper.util.EdgeExplorer,int).l2","com.graphhopper.storage.BaseGraph$CommonEdgeIterator_long_getFlags().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).e4","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).e3","com.graphhopper.storage.GraphHopperStorage_com.graphhopper.util.EdgeExplorer_createEdgeExplorer().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).e2","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).e1","com.graphhopper.util.SimpleIntDeque_boolean_isEmpty().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).b","com.graphhopper.storage.GraphHopperStorage_void_optimize().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_com.graphhopper.coll.GHBitSet_createBitSet().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_markNodesRemovedIfUnreachable().e1","com.graphhopper.routing.util.PrepareRoutingSubnetworks_java.util.List_findSubnetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter).e1","com.graphhopper.coll.GHBitSetImpl_int_getCardinality().b","com.graphhopper.storage.BaseGraph_com.graphhopper.coll.GHBitSet_getRemovedNodes().t1","com.graphhopper.storage.BaseGraph$AllEdgeIterator_int_getMaxId().b"],"com.graphhopper.GraphHopperTest.testFootAndCar":["com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_goFurther(int).t1","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_removeEdges(com.graphhopper.util.EdgeExplorer,com.graphhopper.routing.util.FlagEncoder,gnu.trove.list.TIntList,int).t1","com.graphhopper.coll.GHBitSetImpl_boolean_contains(int).b","com.graphhopper.coll.GHBitSetImpl_com.graphhopper.coll.GHBitSetImpl(int).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_removeEdges(com.graphhopper.util.EdgeExplorer,com.graphhopper.routing.util.FlagEncoder,gnu.trove.list.TIntList,int).l2","com.graphhopper.storage.GraphHopperStorage_void_optimize().t2","com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter_com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter(com.graphhopper.routing.util.FlagEncoder).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_com.graphhopper.routing.util.PrepareRoutingSubnetworks_setMinOneWayNetworkSize(int).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_getMaxSubnetworks().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_boolean_detectNodeRemovedForAllEncoders(com.graphhopper.util.EdgeExplorer,int).e1","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_goFurther(int).t3","com.graphhopper.routing.util.PrepareRoutingSubnetworks_java.util.List_findSubnetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_doWork().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_doWork().e1","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_doWork().e2","com.graphhopper.routing.util.PrepareRoutingSubnetworks_com.graphhopper.routing.util.PrepareRoutingSubnetworks(com.graphhopper.storage.GraphHopperStorage,java.util.Collection).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_java.util.List_findSubnetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter).t1","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_checkAdjacent(com.graphhopper.util.EdgeIteratorState).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_java.util.List_findSubnetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter).l4","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_markNodesRemovedIfUnreachable().l2","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_markNodesRemovedIfUnreachable().b","com.graphhopper.routing.util.EncodingManager_java.util.List_fetchEdgeEncoders().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_doWork().l3","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_checkAdjacent(com.graphhopper.util.EdgeIteratorState).t1","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_checkAdjacent(com.graphhopper.util.EdgeIteratorState).t2","com.graphhopper.storage.GraphHopperStorage_boolean_isFrozen().b","com.graphhopper.coll.GHBitSetImpl_void_add(int).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_com.graphhopper.routing.util.PrepareRoutingSubnetworks_setMinNetworkSize(int).b","com.graphhopper.GraphHopper_void_cleanUp().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter_com.graphhopper.routing.util.FlagEncoder_getEncoder().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_goFurther(int).e1","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_goFurther(int).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_boolean_detectNodeRemovedForAllEncoders(com.graphhopper.util.EdgeExplorer,int).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).t2","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).t1","com.graphhopper.storage.BaseGraph_com.graphhopper.coll.GHBitSet_getRemovedNodes().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).l5","com.graphhopper.storage.GraphHopperStorage_void_optimize().e1","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_removeEdges(com.graphhopper.util.EdgeExplorer,com.graphhopper.routing.util.FlagEncoder,gnu.trove.list.TIntList,int).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_boolean_detectNodeRemovedForAllEncoders(com.graphhopper.util.EdgeExplorer,int).t1","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_goFurther(int).e3","com.graphhopper.routing.util.PrepareRoutingSubnetworks_boolean_detectNodeRemovedForAllEncoders(com.graphhopper.util.EdgeExplorer,int).l3","com.graphhopper.routing.util.PrepareRoutingSubnetworks_boolean_detectNodeRemovedForAllEncoders(com.graphhopper.util.EdgeExplorer,int).l2","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).e4","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).e3","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).e2","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).e1","com.graphhopper.storage.GraphHopperStorage_void_optimize().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_com.graphhopper.coll.GHBitSet_createBitSet().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_markNodesRemovedIfUnreachable().e1","com.graphhopper.routing.util.PrepareRoutingSubnetworks_java.util.List_findSubnetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter).e1","com.graphhopper.coll.GHBitSetImpl_int_getCardinality().b","com.graphhopper.storage.BaseGraph_com.graphhopper.coll.GHBitSet_getRemovedNodes().t1"]},"type":"branch"}]}]}
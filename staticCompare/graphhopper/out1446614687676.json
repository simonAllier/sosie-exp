{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":114,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":38,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":111,"com.graphhopper.reader.OSMReaderTest.testFerry":0,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":69,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":120,"com.graphhopper.storage.GraphHopperStorageCHTest.testDoThrowExceptionIfDimDoesNotMatch":33,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":16,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":113,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":98,"com.graphhopper.routing.util.CarFlagEncoderTest.testSwapDir":50,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":79,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":124,"com.graphhopper.reader.OSMReaderTest.testWithBounds":11,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":82,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":108,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":44,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":101,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":61,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":97,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":65,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":14,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":107,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetAccess":48,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":66,"com.graphhopper.GraphHopperTest.testPrepare":18,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":117,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":122,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":83,"com.graphhopper.reader.OSMReaderTest.testFoot":1,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":58,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":116,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":72,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":115,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":102,"com.graphhopper.reader.OSMReaderTest.testOneWay":13,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":77,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":103,"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":28,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":23,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":64,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":73,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":95,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":5,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":6,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":45,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":84,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":46,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":118,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":19,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":56,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":59,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":67,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":60,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":125,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":93,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":68,"com.graphhopper.GraphHopperTest.testLoadOSM":22,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":88,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":99,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":92,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":91,"com.graphhopper.reader.OSMReaderTest.testSort":3,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":90,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":89,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":10,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":81,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":35,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":106,"com.graphhopper.reader.OSMReaderTest.testMain":2,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":109,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":27,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":47,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":63,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testSetSpeed0_issue367":57,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":41,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":31,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":70,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":43,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":86,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":7,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":71,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":76,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":123,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":12,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":62,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":30,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":29,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":100,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":110,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":80,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointCount":37,"com.graphhopper.util.DouglasPeuckerTest.testPathSimplify":39,"com.graphhopper.GraphHopperTest.testFootAndCar":20,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":54,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":32,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":42,"com.graphhopper.routing.PathTest.testTime":40,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":75,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":126,"com.graphhopper.routing.util.CarFlagEncoderTest.testOneway":49,"com.graphhopper.GraphHopperTest.testPrepareOnly":15,"com.graphhopper.GraphHopperTest.testVia":17,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":53,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":24,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":36,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":112,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":78,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":9,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSetSpeed0_issue367":52,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":121,"com.graphhopper.GraphHopperAPITest.testLoad":94,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":21,"com.graphhopper.GraphHopperTest.testFootOnly":25,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":85,"com.graphhopper.routing.util.FootFlagEncoderTest.testCombined":55,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":8,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":96,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":105,"com.graphhopper.reader.OSMReaderTest.testBarriers":4,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":119,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":74,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":26,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":51,"com.graphhopper.util.GHUtilityTest.testCopy":87,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":34,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":104},"transformations":[{"failures":[],"tindex":"5d612585-82b4-11e5-aafa-9bdd64f01a51","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.pbf.PbfBlobDecoder:87","type":"CtLocalVariableImpl","sourcecode":"java.util.List<java.lang.String> java.util.List<java.lang.String> = java.util.Arrays.asList(\"OsmSchema-V0.6\", \"DenseNodes\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:46","type":"CtLocalVariableImpl","sourcecode":"java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>()"},"status":-2},{"failures":[],"tindex":"5d614c96-82b4-11e5-aafa-b965c5452080","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtilBig:116","type":"CtLocalVariableImpl","sourcecode":"byte byte = ((byte)(1 << 7))"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilLittle:98","type":"CtLocalVariableImpl","sourcecode":"byte byte = 0"},"status":-2},{"failures":[],"tindex":"5d614c97-82b4-11e5-aafa-b9a838e7a5f0","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHTreeMapComposed:32","type":"CtUnaryOperatorImpl","sourcecode":"-3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:191","type":"CtAssignmentImpl","sourcecode":"int[][int] = int"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"tindex":"5d6173a8-82b4-11e5-aafa-a3a63402ee61","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:92","type":"CtIfImpl","sourcecode":"if (int >= (int))\n    throw new java.lang.ArrayIndexOutOfBoundsException((\"index has to be smaller than size \" + (int)));\n"},"variableMap":{"size":"edgeEntryBytes","index":"edgeEntryBytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:219","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setHeader(0, int)"},"status":-1},{"failures":[0,2,3,4,5,6,7,8,9,10,11,12,13,17,18,19,21,22,24,25],"tindex":"5d6173a9-82b4-11e5-aafa-1baf327965b2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:190","type":"CtOperatorAssignmentImpl","sourcecode":"int += int"},"variableMap":{"allRemoved":"tmpNode","removedEdges":"tmpNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:827","type":"CtAssignmentImpl","sourcecode":"int = int - 3"},"status":-1},{"failures":[],"tindex":"5d61e8da-82b4-11e5-aafa-a7e3d7d9aace","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:474","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:585","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.reader.OSMReader.getNodeMap().get(com.graphhopper.reader.OSMNode.getId())"},"status":-2},{"failures":[],"tindex":"5d61e8db-82b4-11e5-aafa-153a55c8cbc7","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:87","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"variableMap":{"autoRemoveTemporary":"initialized"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:566","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":0},{"failures":[],"tindex":"5d61e8dc-82b4-11e5-aafa-e9adbc7bd45a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMNode:39","type":"CtInvocationImpl","sourcecode":"java.lang.Double.parseDouble(javax.xml.stream.XMLStreamReader.getAttributeValue(null, \"lon\"))"},"status":-2},{"failures":[],"tindex":"5d61e8dd-82b4-11e5-aafa-efaf502bb6af","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:119","type":"CtOperatorAssignmentImpl","sourcecode":"double += 2 * (java.lang.Math.double)"},"variableMap":{"orientation":"lon","java.lang.Math.PI":"lon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:248","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.shapes.GHPoint.double = double"},"status":-2},{"failures":[15,21,22,24,26,27,28,29,30,31,32,33,34,35,36],"tindex":"5d620fee-82b4-11e5-aafa-b5213e0a94f2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:246","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.StorableProperties.loadExisting()) {\n    com.graphhopper.storage.StorableProperties.checkVersions(false);\n    java.lang.String java.lang.String = com.graphhopper.storage.StorableProperties.get(\"graph.flagEncoders\");\n    if ((com.graphhopper.routing.util.EncodingManager) == null) {\n        if (java.lang.String.isEmpty())\n            throw new java.lang.IllegalStateException((\"No EncodingManager was configured. And no one was found in the graph: \" + (com.graphhopper.storage.Directory.getLocation())));\n        \n        int int = 4;\n        if (\"8\".equals(com.graphhopper.storage.StorableProperties.get(\"graph.bytesForFlags\")))\n            int = 8;\n        \n        com.graphhopper.routing.util.EncodingManager = new com.graphhopper.routing.util.EncodingManager(java.lang.String , int);\n    } else if ((!(java.lang.String.isEmpty())) && (!(com.graphhopper.routing.util.EncodingManager.toDetailsString().equalsIgnoreCase(java.lang.String)))) {\n        throw new java.lang.IllegalStateException((((((\"Encoding does not match:\\nGraphhopper config: \" + (com.graphhopper.routing.util.EncodingManager.toDetailsString())) + \"\\nGraph: \") + java.lang.String) + \", dir:\") + (com.graphhopper.storage.Directory.getLocation())));\n    } \n    java.lang.String java.lang.String = com.graphhopper.storage.StorableProperties.get(\"graph.byteOrder\");\n    if (!(java.lang.String.equalsIgnoreCase((\"\" + (com.graphhopper.storage.Directory.getByteOrder())))))\n        throw new java.lang.IllegalStateException(((((\"Configured byteOrder (\" + java.lang.String) + \") is not equal to byteOrder of loaded graph (\") + (com.graphhopper.storage.Directory.getByteOrder())) + \")\"));\n    \n    java.lang.String java.lang.String = com.graphhopper.storage.StorableProperties.get(\"graph.dimension\");\n    com.graphhopper.storage.BaseGraph.loadExisting(java.lang.String);\n    java.lang.String java.lang.String = com.graphhopper.storage.StorableProperties.get(\"graph.chWeightings\");\n    java.lang.String java.lang.String = com.graphhopper.storage.GraphHopperStorage.getCHWeightings().toString();\n    if (!(java.lang.String.equals(java.lang.String)))\n        throw new java.lang.IllegalStateException((((\"Configured graph.chWeightings: \" + java.lang.String) + \" is not equal to loaded \") + java.lang.String));\n    \n    for (com.graphhopper.storage.CHGraphImpl com.graphhopper.storage.CHGraphImpl : java.util.Collection<com.graphhopper.storage.CHGraphImpl>) {\n        if (!(com.graphhopper.storage.CHGraphImpl.loadExisting()))\n            throw new java.lang.IllegalStateException((\"Cannot load \" + com.graphhopper.storage.CHGraphImpl));\n        \n    }\n    return true;\n} "},"status":-1},{"failures":[],"tindex":"5d620fef-82b4-11e5-aafa-433ecefcd395","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper:248","type":"CtReturnImpl","sourcecode":"return int * ((4 + 4) + 4)"},"variableMap":{"factor":"offset"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilLittle:40","type":"CtReturnImpl","sourcecode":"return (((((byte[][(int + 3)]) & 255) << 24) | (((byte[][(int + 2)]) & 255) << 16)) | (((byte[][(int + 1)]) & 255) << 8)) | ((byte[][int]) & 255)"},"status":-2},{"failures":[],"tindex":"5d623700-82b4-11e5-aafa-cd7648e30efe","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:308","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.OSMReader.org.slf4j.Logger.info((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \", now parsing relations\"))"},"status":0},{"failures":[],"tindex":"5d623701-82b4-11e5-aafa-c159833dd5ad","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:416","type":"CtReturnImpl","sourcecode":"return 80"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:231","type":"CtReturnImpl","sourcecode":"return 0"},"status":-2},{"failures":[],"tindex":"5d623702-82b4-11e5-aafa-1fc8618dbac6","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:191","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(5)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.DAType:147","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.DAType.(getMemRef()) == (com.graphhopper.storage.DAType.MemRef.com.graphhopper.storage.DAType.MemRef))\n    java.lang.String = \"MMAP\";\nelse if (com.graphhopper.storage.DAType.(getMemRef()) == (com.graphhopper.storage.DAType.MemRef.com.graphhopper.storage.DAType.MemRef))\n    java.lang.String = \"RAM\";\nelse\n    java.lang.String = \"UNSAFE\";\n"},"status":-2},{"failures":[],"tindex":"5d623703-82b4-11e5-aafa-bf7eb05e8168","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:795","type":"CtAssignmentImpl","sourcecode":"double = 1"},"variableMap":{"towerNodeDistance":"prevLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:310","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.DistanceCalc.calcNormalizedEdgeDistance(double, double, double, double, double, double)"},"status":-2},{"failures":[],"tindex":"5d625e14-82b4-11e5-aafa-ebaa41e45e06","series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:719","type":"CtIfImpl","sourcecode":"if (new java.io.File((java.lang.String + \"-gh\")).exists())\n    java.lang.String += \"-gh\";\n"},"variableMap":{"graphHopperFolder":"name"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.search.NameIndex:105","type":"CtInvocationImpl","sourcecode":"com.graphhopper.search.NameIndex.org.slf4j.Logger.info((((\"Way name is too long: \" + java.lang.String) + \" truncated to \") + java.lang.String))"},"status":0},{"failures":[],"tindex":"5d625e15-82b4-11e5-aafa-1f6072833ed9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:186","type":"CtAssignmentImpl","sourcecode":"int = ((int)((java.lang.Math.log(int)) / (java.lang.Math.log(2))))"},"variableMap":{"segmentSizeInBytes":"S_SKIP_EDGE1","segmentSizePower":"E_FLAGS"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:658","type":"CtAssignmentImpl","sourcecode":"int = (com.graphhopper.storage.EdgeAccess.int) + 4"},"status":-2},{"failures":[37,38,39],"tindex":"5d625e16-82b4-11e5-aafa-4de4001baa09","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:492","type":"CtReturnImpl","sourcecode":"return (java.lang.Math.round((double * 10000.0))) / 10000.0"},"variableMap":{"value":"tmp"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistancePlaneProjection:58","type":"CtReturnImpl","sourcecode":"return double * double"},"status":-1},{"failures":[],"tindex":"5d625e17-82b4-11e5-aafa-57a797939485","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PointList:432","type":"CtIfImpl","sourcecode":"if ((java.lang.String.trim().length()) == 0)\n    continue;\n"},"variableMap":{"latlon":"line"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:111","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.Helper.isEmpty(java.lang.String)) {\n    continue;\n} "},"status":0},{"failures":[1,2,7,13,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,17,19,20,21,24,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126],"tindex":"5d625e18-82b4-11e5-aafa-1f7ff9907e93","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:701","type":"CtReturnImpl","sourcecode":"return (long & (long)) != 0"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"5d623700-82b4-11e5-aafa-cd7648e30efe","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.Helper.nf","org.slf4j.Logger.info"]},"type":"staticDiff"}]}]}
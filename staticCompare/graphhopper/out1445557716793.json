{"failureDictionary":{"com.graphhopper.coll.IntDoubleBinHeapTest.testRekey":8,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":41,"com.graphhopper.coll.IntDoubleBinHeapTest.testSpreading":10,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testSacScale":12,"com.graphhopper.coll.IntDoubleBinHeapTest.testBasic":7,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":15,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":18,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":17,"com.graphhopper.routing.util.BikeFlagEncoderTest.testSacScale":11,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":38,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":36,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":29,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":37,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":34,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":24,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":32,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":31,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":39,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":4,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSacScale":14,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":21,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":28,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":30,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":2,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":16,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":23,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":1,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":42,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":0,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":35,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":3,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":6,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":22,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":40,"com.graphhopper.coll.IntDoubleBinHeapTest.testSize":9,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":27,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":5,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testSacScale":13,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":20,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":19,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":26,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":25,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":33},"transformations":[{"failures":[],"tindex":"69a1ad16-7917-11e5-a204-d7b7cfe9b5f6","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHTreeMapComposed:32","type":"CtUnaryOperatorImpl","sourcecode":"-3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:383","type":"CtInvocationImpl","sourcecode":"java.nio.ByteBuffer.capacity()"},"status":0},{"failures":[0,1,2,3,4,5,6,7,8,9,10],"tindex":"69a1d427-7917-11e5-a204-471bbe4d0ae7","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:116","type":"CtForImpl","sourcecode":"for (int = 1 ; (int * 2) <= (int) ; int = int) {\n    int = int * 2;\n    if ((int != (int)) && ((float[][(int + 1)]) < (float[][int]))) {\n        int++;\n    } \n    if (double > (float[][int])) {\n        int[][int] = int[][int];\n        float[][int] = float[][int];\n    } else {\n        break;\n    }\n}"},"variableMap":{"elem":"elem","size":"i","keys":"keys","i":"i","child":"size","lastPrio":"key"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:211","type":"CtForImpl","sourcecode":"for (int = int ; (float[][(int / 2)]) > double ; int /= 2) {\n    int[][int] = int[][(int / 2)];\n    float[][int] = float[][(int / 2)];\n}"},"status":-1},{"failures":[11,12,13,14],"tindex":"69a1d428-7917-11e5-a204-a11da15fb62e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:284","type":"CtIfImpl","sourcecode":"if (java.lang.String != null) {\n    if ((com.graphhopper.reader.OSMWay.hasTag(\"highway\", \"cycleway\")) && (com.graphhopper.reader.OSMWay.hasTag(\"sac_scale\", \"hiking\")))\n        return long;\n    \n    if (!com.graphhopper.routing.util.BikeCommonFlagEncoder.(allowedSacScale(java.lang.String)))\n        return 0;\n    \n} "},"status":-1},{"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"tindex":"69a1d429-7917-11e5-a204-b115efea7ad8","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:92","type":"CtOperatorAssignmentImpl","sourcecode":"int >>= 2"},"variableMap":{"bytePos":"removeNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:662","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.SparseIntIntArray.put(int, int)"},"status":-1},{"failures":[],"tindex":"69a1d42a-7917-11e5-a204-d7226007e5e5","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PointList:369","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int > (int)))\n    throw new java.lang.IllegalArgumentException((((((\"Illegal interval: \" + int) + \", \") + int) + \", size:\") + (int)));\n"},"variableMap":{"size":"node","from":"node","end":"node"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:115","type":"CtIfImpl","sourcecode":"if (double < double) {\n    com.graphhopper.storage.index.QueryResult.setQueryDistance(double);\n    com.graphhopper.storage.index.QueryResult.setClosestEdge(com.graphhopper.routing.util.AllEdgesIterator.detach(false));\n    com.graphhopper.storage.index.QueryResult.setClosestNode(int);\n    double = double;\n} "},"status":0},{"failures":[],"tindex":"69a1fb3b-7917-11e5-a204-53d055ec6a6d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:731","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long))"},"status":-2},{"failures":[],"tindex":"69a1fb3c-7917-11e5-a204-79989728f0ea","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.ViaInstruction:32","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.ViaInstruction.this(com.graphhopper.util.Instruction.getName(), com.graphhopper.util.Instruction.getAnnotation(), com.graphhopper.util.Instruction.getPoints())"},"status":-2},{"failures":[],"tindex":"69a1fb3d-7917-11e5-a204-3b22e716ecda","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.QueryGraph:382","type":"CtLocalVariableImpl","sourcecode":"int int = int - (int)"},"variableMap":{"nodeId":"fromNode","mainNodes":"fromNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:176","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.storage.EdgeAccess.getOtherNode(int, long)"},"status":-2},{"failures":[],"tindex":"69a1fb3e-7917-11e5-a204-f509425762ab","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.DAType:180","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.DAType = new com.graphhopper.storage.DAType(com.graphhopper.storage.DAType , true)"},"variableMap":{"type":"com.graphhopper.storage.DAType.MMAP"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.DAType:168","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.DAType = com.graphhopper.storage.DAType.com.graphhopper.storage.DAType"},"status":-2},{"failures":[],"tindex":"69a1fb3f-7917-11e5-a204-b9c5f812e417","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:232","type":"CtAssignmentImpl","sourcecode":"int[][int] = int"},"status":-2},{"failures":[],"tindex":"69a1fb40-7917-11e5-a204-11382f7de447","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:73","type":"CtOperatorAssignmentImpl","sourcecode":"double += double"},"variableMap":{"deltaX":"com.graphhopper.util.AngleCalc.PI_4","maxX":"angle"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:49","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.AngleCalc.double"},"status":-2},{"failures":[],"tindex":"69a1fb41-7917-11e5-a204-db452d2fb880","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMTurnRelation:83","type":"CtTryImpl","sourcecode":"try {\n    if (int == (com.graphhopper.reader.OSMReader.int))\n        return java.util.Collections.emptyList();\n    \n    int int = com.graphhopper.util.EdgeIterator.int;\n    com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        if ((com.graphhopper.reader.OSMReader.getOsmIdOfInternalEdge(com.graphhopper.util.EdgeIterator.getEdge())) == (this.long)) {\n            int = com.graphhopper.util.EdgeIterator.getEdge();\n            break;\n        } \n    }\n    if (int == (com.graphhopper.util.EdgeIterator.int))\n        return java.util.Collections.emptyList();\n    \n    final java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry> java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry> = new java.util.ArrayList<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>();\n    com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        int int = com.graphhopper.util.EdgeIterator.getEdge();\n        long long = com.graphhopper.reader.OSMReader.getOsmIdOfInternalEdge(int);\n        if ((((int != int) && ((this.com.graphhopper.reader.OSMTurnRelation.Type) == (com.graphhopper.reader.OSMTurnRelation.Type.com.graphhopper.reader.OSMTurnRelation.Type))) && (long != (this.long))) || ((((this.com.graphhopper.reader.OSMTurnRelation.Type) == (com.graphhopper.reader.OSMTurnRelation.Type.com.graphhopper.reader.OSMTurnRelation.Type)) && (long == (this.long))) && (long >= 0))) {\n            final com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry = new com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry();\n            com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int = int;\n            com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int = int;\n            com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int = com.graphhopper.util.EdgeIterator.getEdge();\n            com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.long = com.graphhopper.routing.util.TurnCostEncoder.getTurnFlags(true, 0);\n            java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>.add(com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry);\n            if ((this.com.graphhopper.reader.OSMTurnRelation.Type) == (com.graphhopper.reader.OSMTurnRelation.Type.com.graphhopper.reader.OSMTurnRelation.Type))\n                break;\n            \n        } \n    }\n    return java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>;\n} catch (java.lang.Exception e) {\n    throw new java.lang.IllegalStateException((\"Could not built turn table entry for relation of node with osmId:\" + (this.long)) , java.lang.Exception);\n}"},"status":-2},{"failures":[],"tindex":"69a22252-7917-11e5-a204-675ebd31d53d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.CompressedArray:143","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.VLongStorage = null"},"variableMap":{"currentWriter":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:34","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.VLongStorage.this(new byte[int])"},"status":-2},{"failures":[],"tindex":"69a22253-7917-11e5-a204-6134ddc5d05f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.FootFlagEncoder:226","type":"CtIfImpl","sourcecode":"if ((((!(\"hiking\".equals(java.lang.String))) && (!(\"mountain_hiking\".equals(java.lang.String)))) && (!(\"demanding_mountain_hiking\".equals(java.lang.String)))) && (!(\"alpine_hiking\".equals(java.lang.String))))\n    return 0;\n"},"variableMap":{"sacScale":"highwayValue"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:265","type":"CtIfImpl","sourcecode":"if ((\"motorway\".equals(java.lang.String)) || (\"motorway_link\".equals(java.lang.String)))\n    return 0;\n"},"status":-2},{"failures":[],"tindex":"69a22254-7917-11e5-a204-b96234d0cd06","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:415","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.BaseGraph.getEdgeIteratorState(int, int)"},"variableMap":{"edgeId":"endNode","adjNode":"endNode","baseGraph":"graph"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:203","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.Graph.getEdgeIteratorState(com.graphhopper.util.TIntList.get(((com.graphhopper.util.TIntList.size()) - 1)), int)"},"status":-2},{"failures":[],"tindex":"69a22255-7917-11e5-a204-63fa0fc64d7d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.PathNative:53","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.util.EdgeIterator.Edge.isValid(int)))\n    break;\n"},"variableMap":{"edgeId":"child"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:119","type":"CtIfImpl","sourcecode":"if ((int != (int)) && ((float[][(int + 1)]) < (float[][int]))) {\n    int++;\n} "},"status":-2},{"failures":[],"tindex":"69a22256-7917-11e5-a204-2104801c4772","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Constants:91","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.Constants.boolean = true"},"variableMap":{"com.graphhopper.util.Constants.SNAPSHOT":"initialized"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:293","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":-2},{"failures":[],"tindex":"69a24967-7917-11e5-a204-8bb0e6ff5f11","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:252","type":"CtIfImpl","sourcecode":"if (int <= 0)\n    throw new java.lang.IllegalStateException(\"Negative precision is not allowed!\");\n"},"variableMap":{"minResolutionInMeter":"avoidSpeedLimit"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:534","type":"CtIfImpl","sourcecode":"if (double < (int)) {\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(40.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    if (com.graphhopper.reader.OSMWay.hasTag(\"tunnel\", java.util.Set<java.lang.String>))\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(40.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    \n} "},"status":-2},{"failures":[],"tindex":"69a24968-7917-11e5-a204-fdf062f4fa47","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:155","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry = java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.poll()"},"status":-2},{"failures":[],"tindex":"69a24969-7917-11e5-a204-95d41fcdf2cc","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:79","type":"CtLocalVariableImpl","sourcecode":"double double = (com.graphhopper.util.AngleCalc.double) - ((double / 180.0) * (java.lang.Math.double))"},"variableMap":{"com.graphhopper.util.AngleCalc.PI_2":"toLat","azimuth":"fromLat","java.lang.Math.PI":"toLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:78","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Math.java.lang.Math.sin((java.lang.Math.(java.lang.Math.toRadians((double - double))) / 2))"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
{"failureDictionary":{"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":0,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":231,"com.graphhopper.search.NameIndexTest.testCreate":313,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":263,"com.graphhopper.storage.RAMDataAccessTest.testTrimTo":337,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":37,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":69,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":102,"com.graphhopper.reader.OSMReaderTest.testFerry":151,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":188,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":189,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":254,"com.graphhopper.storage.GraphHopperStorageCHTest.testDoThrowExceptionIfDimDoesNotMatch":302,"com.graphhopper.routing.QueryGraphTest.testOneWay":262,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":140,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":172,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSortHighLevelFirst":283,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":328,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":33,"com.graphhopper.reader.OSMReaderTest.testWithBounds":162,"com.graphhopper.storage.RAMDataAccessTest.testBoundsCheck":336,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":110,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":202,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":258,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":203,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":290,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":297,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":241,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":284,"com.graphhopper.storage.SynchedDAWrapperTest.testBoundsCheck":334,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":164,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":73,"com.graphhopper.storage.RAMDataAccessTest.testRenameNoFlush":293,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":139,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":77,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":249,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":303,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":120,"com.graphhopper.GraphHopperTest.testPrepare":174,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":230,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":80,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":91,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":237,"com.graphhopper.search.NameIndexTest.testFlush":311,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":1,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":213,"com.graphhopper.util.InstructionListTest.testWayList":185,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":184,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":222,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":333,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":196,"com.graphhopper.GraphHopperAPITest.testDisconnected179":314,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":122,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":207,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":107,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":332,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":179,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":32,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":204,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":214,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":219,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":34,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":150,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":271,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":157,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":206,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":280,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":324,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":130,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":268,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":113,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":121,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":175,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":65,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":26,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":30,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":28,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":27,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":252,"com.graphhopper.GraphHopperTest.testLoadOSM":178,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":41,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":250,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":52,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":2,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":35,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":94,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":126,"com.graphhopper.reader.OSMReaderTest.testSort":154,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":225,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":161,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":205,"com.graphhopper.storage.SynchedDAWrapperTest.testRenameFlush":273,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":277,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":78,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":246,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_noCosts":4,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":56,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":57,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":325,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":10,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":235,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":260,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":148,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":267,"com.graphhopper.routing.PathTest.testWayList":269,"com.graphhopper.storage.MMapDataAccessTest.textMixRAM2MMAP":276,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":61,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":109,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":134,"com.graphhopper.coll.OSMIDMapTest.testGet2":319,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":236,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":85,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":212,"com.graphhopper.reader.dem.HeightTileTest.testGetHeightForNegativeTile":305,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":220,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":256,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":281,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":51,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":15,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":136,"com.graphhopper.storage.GraphHopperStorageCHTest.testPrios":295,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":326,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":11,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":298,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":16,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":84,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":62,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":288,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":90,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":227,"com.graphhopper.storage.RAMDataAccessTest.testRenameFlush":292,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":327,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":8,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":329,"com.graphhopper.util.GHUtilityTest.testSort":193,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":108,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":38,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":261,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":217,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":216,"com.graphhopper.coll.OSMIDMapTest.testGetLong":321,"com.graphhopper.search.NameIndexTest.testPut":310,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":31,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":315,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":70,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":24,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":74,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":123,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":259,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":199,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":180,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":278,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":93,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":67,"com.graphhopper.GraphHopperAPITest.testLoad":197,"com.graphhopper.reader.dem.HeightTileTest.testCalcMean":306,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":177,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":234,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":88,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":201,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":301,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":82,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":12,"com.graphhopper.reader.OSMReaderTest.testBarriers":155,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":208,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":116,"com.graphhopper.routing.PathTest.testFound":316,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":182,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":47,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":105,"com.graphhopper.util.GHUtilityTest.testCopy":192,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":218,"com.graphhopper.routing.PathTest.testFindInstruction":270,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":210,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":13,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":195,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":20,"com.graphhopper.search.NameIndexTest.testNoErrorOnLargeName":312,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":87,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":221,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":68,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":226,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":29,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":92,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":229,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":145,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":21,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":243,"com.graphhopper.reader.PrinctonReaderTest.testRead":149,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":99,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":133,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":17,"com.graphhopper.coll.OSMIDMapTest.testUpdateOfLowerKeys":322,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":279,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":101,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":124,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":79,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":248,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":253,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":22,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":141,"com.graphhopper.util.InstructionListTest.testWayList2":186,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":285,"com.graphhopper.reader.OSMReaderTest.testFoot":152,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":119,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":42,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":115,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":264,"com.graphhopper.reader.dem.HeightTileTest.testGetHeight":307,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":39,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":100,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":40,"com.graphhopper.reader.OSMReaderTest.testOneWay":163,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":304,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":323,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":128,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":89,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":198,"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":287,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":97,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":131,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":96,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":111,"com.graphhopper.storage.SynchedDAWrapperTest.testSegments":275,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":19,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":247,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":81,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":86,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":112,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":156,"com.graphhopper.storage.SynchedDAWrapperTest.testCopy":272,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":7,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":242,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":58,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":233,"com.graphhopper.coll.OSMIDMapTest.testGet":318,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":18,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":142,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":239,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":251,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":75,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":240,"com.graphhopper.routing.PathBidirRefTest.testExtract":265,"com.graphhopper.storage.SynchedDAWrapperTest.testTrimTo":335,"com.graphhopper.coll.OSMIDMapTest.testBinSearch":320,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":171,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":190,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":209,"com.graphhopper.storage.RAMDataAccessTest.testCopy":291,"com.graphhopper.storage.SynchedDAWrapperTest.testRenameNoFlush":274,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":166,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":282,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":118,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":170,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":60,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":169,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":117,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":168,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":167,"com.graphhopper.storage.RAMDataAccessTest.testSegments":294,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":46,"com.graphhopper.util.GHUtilityTest.testSort2":191,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":228,"com.graphhopper.reader.OSMReaderTest.testMain":153,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":146,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":23,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":144,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":299,"com.graphhopper.routing.PathBidirRefTest.testExtract2":266,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":143,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":66,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":211,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":53,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":43,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":72,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":200,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":331,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":63,"com.graphhopper.search.NameIndexTest.testTooLongNameNoError":309,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":95,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":137,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":138,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":48,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":158,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":25,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":308,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":76,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":127,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":232,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":245,"com.graphhopper.storage.StorablePropertiesTest.testStore":286,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":296,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":36,"com.graphhopper.storage.GraphHopperStorageTest.testClone":83,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":98,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":147,"com.graphhopper.GraphHopperTest.testFootAndCar":176,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":289,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":125,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":330,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":106,"com.graphhopper.routing.PathTest.testTime":317,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":104,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":132,"com.graphhopper.util.InstructionListTest.testRoundaboutJsonIntegrity":5,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":244,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":44,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":50,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":114,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":224,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":14,"com.graphhopper.util.GHUtilityTest.testSortDirected":194,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":135,"com.graphhopper.GraphHopperTest.testPrepareOnly":165,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":71,"com.graphhopper.GraphHopperTest.testVia":173,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":255,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":103,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":223,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":160,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":59,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":49,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":257,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":300,"com.graphhopper.GraphHopperTest.testFootOnly":181,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":187,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":54,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":159,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":64,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":55,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":6,"com.graphhopper.util.InstructionListTest.testFind":183,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":215,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":238,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":3,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":9,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":45,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":129},"transformations":[{"failures":[],"tindex":"68ce59c3-82c5-11e5-bbe1-43e648265fef","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:582","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"surface\")"},"variableMap":{"way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:289","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"sac_scale\")"},"status":-2},{"failures":[],"tindex":"68cea7e4-82c5-11e5-bbe1-35550eadda35","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.SRTMProvider:102","type":"CtLocalVariableImpl","sourcecode":"java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"Africa\" , \"Australia\" , \"Eurasia\" , \"Islands\" , \"North_America\" , \"South_America\" }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.PrinctonReader:62","type":"CtLocalVariableImpl","sourcecode":"java.lang.String[] java.lang.String[] = java.lang.String.split(\" \")"},"status":-2},{"failures":[0,1],"tindex":"68cea7e5-82c5-11e5-bbe1-51b6ac4b284d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:160","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.QueryResult.setWayIndex((((com.graphhopper.util.PointList.getSize()) - (com.graphhopper.storage.index.QueryResult.getWayIndex())) - 1))"},"status":-1},{"failures":[2,3,4],"tindex":"68cea7e6-82c5-11e5-bbe1-8f01314ea5c2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:632","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"68cecef7-82c5-11e5-bbe1-e57c7883796d","series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:499","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.TranslationMap"},"variableMap":{"trMap":"com.graphhopper.util.TranslationMap.class"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.TranslationMap:66","type":"CtTryImpl","sourcecode":"try {\n    for (java.lang.String java.lang.String : com.graphhopper.util.TranslationMap.java.util.List<java.lang.String>) {\n        com.graphhopper.util.TranslationMap.TranslationHashMap com.graphhopper.util.TranslationMap.TranslationHashMap = new com.graphhopper.util.TranslationMap.TranslationHashMap(com.graphhopper.util.Helper.getLocale(java.lang.String));\n        com.graphhopper.util.TranslationMap.TranslationHashMap.doImport(com.graphhopper.util.TranslationMap.com.graphhopper.util.TranslationMap.getResourceAsStream((java.lang.String + \".txt\")));\n        com.graphhopper.util.TranslationMap.add(com.graphhopper.util.TranslationMap.TranslationHashMap);\n    }\n    com.graphhopper.util.TranslationMap.postImportHook();\n    return this;\n} catch (java.lang.Exception ex) {\n    throw new java.lang.RuntimeException(java.lang.Exception);\n}"},"status":-2},{"failures":[],"tindex":"68cecef8-82c5-11e5-bbe1-176bcc5da61e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:186","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(2000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:436","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.util.EdgeIteratorState com.graphhopper.util.EdgeIteratorState : java.util.List<com.graphhopper.util.EdgeIteratorState>) {\n    com.graphhopper.routing.util.EncodingManager.applyWayTags(com.graphhopper.reader.OSMWay, com.graphhopper.util.EdgeIteratorState);\n}"},"status":-2},{"failures":[5,6,7,8],"tindex":"68cef609-82c5-11e5-bbe1-7998220e38dc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:197","type":"CtAssignmentImpl","sourcecode":"double = double * 0.9"},"variableMap":{"maxMCSpeed":"radian","speed":"radian"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.RoundaboutInstruction:108","type":"CtAssignmentImpl","sourcecode":"this.double = double"},"status":-1},{"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,0,257,258,259,260,1,261,262,263,264,265,266,267,268,6,7,269,270,8,271],"tindex":"68cef60a-82c5-11e5-bbe1-9f832c851167","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:50","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"status":-1},{"failures":[],"tindex":"68cf1d1b-82c5-11e5-bbe1-0d6e9cfc050a","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:125","type":"CtIfImpl","sourcecode":"if (long > long) {\n    break;\n} "},"variableMap":{"storedKey":"offset","key":"byteCount"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:175","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < 1 ; ) {\n    try {\n        java.nio.ByteBuffer = java.io.RandomAccessFile.getChannel().map((boolean ? java.nio.channels.FileChannel.MapMode.java.nio.channels.FileChannel.MapMode : java.nio.channels.FileChannel.MapMode.java.nio.channels.FileChannel.MapMode), long, long);\n        break;\n    } catch (java.io.IOException tmpex) {\n        java.io.IOException = java.io.IOException;\n        int++;\n        com.graphhopper.util.Helper.cleanHack();\n        try {\n            java.lang.Thread.sleep(5);\n        } catch (java.lang.InterruptedException iex) {\n        }\n    }\n}"},"status":-2},{"failures":[239,241,245,247,248,249,251,252],"tindex":"68cf1d1c-82c5-11e5-bbe1-1d1270cb8946","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:265","type":"CtWhileImpl","sourcecode":"while (!(com.graphhopper.coll.GHTreeMapComposed.isEmpty())) {\n    if ((boolean && ((long) > 0)) && (((long) % long) == 0)) {\n        com.graphhopper.util.StopWatch.start();\n        com.graphhopper.coll.GHTreeMapComposed.clear();\n        int int = com.graphhopper.storage.CHGraphImpl.getNodes();\n        for (int int = 0 ; int < int ; int++) {\n            if ((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int))\n                continue;\n            \n            int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n            com.graphhopper.coll.GHTreeMapComposed.insert(int, int);\n        }\n        com.graphhopper.util.StopWatch.stop();\n        int++;\n        if (com.graphhopper.coll.GHTreeMapComposed.isEmpty())\n            throw new java.lang.IllegalStateException(\"Cannot prepare as no unprepared nodes where found. Called preparation twice?\");\n        \n    } \n    if (((long) % long) == 0) {\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        org.slf4j.Logger.info((((((((((((((((((com.graphhopper.util.Helper.nf(long)) + \", updates:\") + int) + \", nodes: \") + (com.graphhopper.util.Helper.nf(com.graphhopper.coll.GHTreeMapComposed.getSize()))) + \", shortcuts:\") + (com.graphhopper.util.Helper.nf(int))) + \", dijkstras:\") + (com.graphhopper.util.Helper.nf(long))) + \", \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getTimesAsString())) + \", meanDegree:\") + ((long)(double))) + \", algo:\") + (com.graphhopper.routing.DijkstraOneToMany.getMemoryUsageAsString())) + \", \") + (com.graphhopper.util.Helper.getMemInfo())));\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n    } \n    (long)++;\n    int int = com.graphhopper.coll.GHTreeMapComposed.pollKey();\n    if ((!(com.graphhopper.coll.GHTreeMapComposed.isEmpty())) && ((com.graphhopper.coll.GHTreeMapComposed.getSize()) < long)) {\n        com.graphhopper.util.StopWatch.start();\n        int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n        if (int > (com.graphhopper.coll.GHTreeMapComposed.peekValue())) {\n            com.graphhopper.coll.GHTreeMapComposed.insert(int, int);\n            com.graphhopper.util.StopWatch.stop();\n            continue;\n        } \n        com.graphhopper.util.StopWatch.stop();\n    } \n    int += com.graphhopper.routing.ch.PrepareContractionHierarchies.addShortcuts(int);\n    com.graphhopper.storage.CHGraphImpl.setLevel(int, int);\n    int++;\n    if ((com.graphhopper.coll.GHTreeMapComposed.getSize()) < long)\n        break;\n    \n    com.graphhopper.util.CHEdgeIterator com.graphhopper.util.CHEdgeIterator = com.graphhopper.util.CHEdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.CHEdgeIterator.next()) {\n        int int = com.graphhopper.util.CHEdgeIterator.getAdjNode();\n        if ((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int))\n            continue;\n        \n        if (boolean && ((java.util.Random.nextInt(100)) < (int))) {\n            com.graphhopper.util.StopWatch.start();\n            int int = int[][int];\n            int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n            if (int != int)\n                com.graphhopper.coll.GHTreeMapComposed.update(int, int, int);\n            \n            com.graphhopper.util.StopWatch.stop();\n        } \n        com.graphhopper.storage.CHGraphImpl.disconnect(com.graphhopper.util.CHEdgeExplorer, com.graphhopper.util.CHEdgeIterator);\n    }\n}"},"status":-1},{"failures":[],"tindex":"68cf442d-82c5-11e5-bbe1-23b774cc4017","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:103","type":"CtLocalVariableImpl","sourcecode":"long long"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:62","type":"CtLocalVariableImpl","sourcecode":"long long = java.lang.Math.round((double / (double)))"},"status":-2},{"failures":[],"tindex":"68cf442e-82c5-11e5-bbe1-37c78f1fae79","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:617","type":"CtReturnImpl","sourcecode":"return 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHTBitSet:68","type":"CtReturnImpl","sourcecode":"return gnu.trove.set.hash.TIntHashSet.size()"},"status":-2},{"failures":[],"tindex":"68cf6b3f-82c5-11e5-bbe1-53bc23fde92c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:597","type":"CtUnaryOperatorImpl","sourcecode":"long++"},"variableMap":{"tmpDegreeCounter":"directionBitMask"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:222","type":"CtOperatorAssignmentImpl","sourcecode":"long |= long"},"status":0},{"failures":[174,175,176,181,197],"tindex":"68cf6b40-82c5-11e5-bbe1-0fc418841757","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:443","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.getLongitude(int)"},"variableMap":{"this":"points","index":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:161","type":"CtAssignmentImpl","sourcecode":"double[][int] = com.graphhopper.util.PointList.getLongitude(int)"},"status":-1},{"failures":[272,273,274,275,276,9,277,278,11,279,27,30,280,32,281,33,34,35,36,37,282,38,39,40,41,42,43,44,45,46,47,48,283,49,284,50,51,52,53,54,285,55,56,57,58,59,60,61,62,63,286,78,287,288,80,289,96,99,290,291,292,293,294,122,295,296,297,123,298,299,300,124,301,125,302,127,303,143,146,304,305,306,307,151,152,153,154,155,156,157,158,159,160,161,162,308,163,309,310,311,312,313,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,190,192,197,314,198,199,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,249,250,251,252,253,254,255,256,0,257,258,259,260,1,261,263,315,264,267,268,316,317,6,7,269,270,8,271,318,319,320,321,322],"tindex":"68cf6b41-82c5-11e5-bbe1-a1cf16e084fe","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:107","type":"CtIfImpl","sourcecode":"if ((long % (int)) != 0)\n    int++;\n"},"status":-1},{"failures":[166,167,168,169,170,171,173,174,175,176,177,178,180,181,197,210,211,212,213,214,215,216,217,218,219,220,221,222,223,225,226,227,228,229,230,231,233,234,235,236,237,239,245,246,247,248,252],"tindex":"68cf9252-82c5-11e5-bbe1-2d4daa7bf672","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:263","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.PathBidirRef.setEdgeEntryTo(com.graphhopper.storage.EdgeEntry)"},"status":-1},{"failures":[],"tindex":"68cf9253-82c5-11e5-bbe1-934325799f13","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.NativeFSLockFactory:245","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:928","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = com.graphhopper.GHRequest.getHints().getBool(\"instructions\", boolean)"},"status":-2},{"failures":[],"tindex":"68cf9254-82c5-11e5-bbe1-d7d0ace4e830","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.pbf.PbfBlobDecoder:252","type":"CtIfImpl","sourcecode":"if (java.util.Map<java.lang.String, java.lang.String> == null) {\n    java.util.Map<java.lang.String, java.lang.String> = new java.util.HashMap<java.lang.String, java.lang.String>();\n} "},"variableMap":{"tags":"enMap"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.TranslationMap:142","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.util.Translation com.graphhopper.util.Translation : java.util.Map<java.lang.String, com.graphhopper.util.Translation>.values()) {\n    java.util.Map<java.lang.String, java.lang.String> java.util.Map<java.lang.String, java.lang.String> = com.graphhopper.util.Translation.asMap();\n    for (java.util.Map.Entry<java.lang.String, java.lang.String> java.util.Map.Entry<java.lang.String, java.lang.String> : java.util.Map<java.lang.String, java.lang.String>.entrySet()) {\n        java.lang.String java.lang.String = java.util.Map<java.lang.String, java.lang.String>.get(java.util.Map.Entry<java.lang.String, java.lang.String>.getKey());\n        if (com.graphhopper.util.Helper.isEmpty(java.lang.String)) {\n            java.util.Map<java.lang.String, java.lang.String>.put(java.util.Map.Entry<java.lang.String, java.lang.String>.getKey(), java.util.Map.Entry<java.lang.String, java.lang.String>.getValue());\n            continue;\n        } \n        int int = com.graphhopper.util.TranslationMap.com.graphhopper.util.TranslationMap.countOccurence(java.util.Map.Entry<java.lang.String, java.lang.String>.getValue(), \"\\\\%\");\n        if (int != com.graphhopper.util.TranslationMap.(com.graphhopper.util.TranslationMap.countOccurence(java.lang.String, \"\\\\%\"))) {\n            java.lang.StringBuilder.append(com.graphhopper.util.Translation.getLocale()).append(\" - error in \").append(java.util.Map.Entry<java.lang.String, java.lang.String>.getKey()).append(\"->\").append(java.lang.String).append(\"\\n\");\n        } else {\n            java.lang.Object[] java.lang.Object[] = new java.lang.String[int];\n            java.util.Arrays.fill(java.lang.Object[], \"tmp\");\n            try {\n                java.lang.String.format(java.lang.String, java.lang.Object[]);\n            } catch (java.lang.Exception ex) {\n                java.lang.StringBuilder.append(com.graphhopper.util.Translation.getLocale()).append(\" - error \").append(java.lang.Exception.getMessage()).append(\"in \").append(java.util.Map.Entry<java.lang.String, java.lang.String>.getKey()).append(\"->\").append(java.lang.String).append(\"\\n\");\n            }\n        }\n    }\n}"},"status":0},{"failures":[323,324,325,326,327,328,329,330,331,332,333],"tindex":"68cfb965-82c5-11e5-bbe1-51a036c81b58","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:367","type":"CtIfImpl","sourcecode":"if (int > int)\n    throw new java.lang.IllegalArgumentException(\"from must be smaller or equals to end\");\n"},"variableMap":{"from":"wayType","end":"wayType"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:435","type":"CtSwitchImpl","sourcecode":"switch (int) {\n    case 0 :\n        java.lang.String = com.graphhopper.util.Translation.tr(\"road\");\n        break;\n    case 1 :\n        java.lang.String = com.graphhopper.util.Translation.tr(\"off_bike\");\n        break;\n    case 2 :\n        java.lang.String = com.graphhopper.util.Translation.tr(\"cycleway\");\n        break;\n    case 3 :\n        java.lang.String = com.graphhopper.util.Translation.tr(\"way\");\n        break;\n}"},"status":-1},{"failures":[334,335,336,337],"tindex":"68cfb966-82c5-11e5-bbe1-a75c989f9409","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:338","type":"CtAssignmentImpl","sourcecode":"byte[][] = java.util.Arrays.copyOf(byte[][], int)"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"68cf9254-82c5-11e5-bbe1-d7d0ace4e830","diffs":[{"branches":{"com.graphhopper.reader.OSMReaderTest.testNegativeIds":["com.graphhopper.util.TranslationMap_int_countOccurence(java.lang.String,java.lang.String).e1","com.graphhopper.util.TranslationMap_int_countOccurence(java.lang.String,java.lang.String).b"],"com.graphhopper.GraphHopperAPITest.testLoad":["com.graphhopper.util.TranslationMap_int_countOccurence(java.lang.String,java.lang.String).e1","com.graphhopper.util.TranslationMap_int_countOccurence(java.lang.String,java.lang.String).b"],"com.graphhopper.GraphHopperTest.testFootAndCar":["com.graphhopper.util.TranslationMap_int_countOccurence(java.lang.String,java.lang.String).e1","com.graphhopper.util.TranslationMap_int_countOccurence(java.lang.String,java.lang.String).b"]},"type":"branch"},{"methodsDiff":{"delete":["java.util.Arrays.fill","java.util.Map<java.lang.String, java.lang.String>.entrySet","java.lang.StringBuilder.append","com.graphhopper.util.Translation.asMap","java.lang.String.format","java.util.Map<java.lang.String, java.lang.String>.get","com.graphhopper.util.Helper.isEmpty","java.util.Map<java.lang.String, java.lang.String>.put","java.lang.Throwable.getMessage","com.graphhopper.util.Translation.getLocale","java.util.Map.Entry<java.lang.String, java.lang.String>.getKey","com.graphhopper.util.TranslationMap.countOccurence","java.util.Map.Entry<java.lang.String, java.lang.String>.getValue"]},"branchesDiff":{"delete":["c5","l3","l4","t0","t1","e2"]},"type":"staticDiff"}]}]}
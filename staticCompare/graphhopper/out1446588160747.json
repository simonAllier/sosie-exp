{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":93,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":3,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":9,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":148,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":89,"com.graphhopper.reader.OSMReaderTest.testFerry":155,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":1,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":121,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":167,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":24,"com.graphhopper.reader.OSMReaderTest.testWithBounds":154,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":5,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":83,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":91,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":84,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":20,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":50,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":165,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":54,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":15,"com.graphhopper.GraphHopperTest.testPrepare":43,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":133,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":142,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":17,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":7,"com.graphhopper.util.InstructionListTest.testWayList":40,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":39,"com.graphhopper.GraphHopperAPITest.testDisconnected179":191,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":87,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":168,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":147,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":69,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":25,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":140,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":86,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":158,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":34,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":44,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":33,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":32,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":57,"com.graphhopper.GraphHopperTest.testLoadOSM":46,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":55,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":185,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":23,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":26,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":107,"com.graphhopper.reader.OSMReaderTest.testSort":36,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":72,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":85,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":162,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":109,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":100,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":145,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":146,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":98,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":6,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":99,"com.graphhopper.routing.PathTest.testWayList":12,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":16,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":90,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":180,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeReturn":124,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":65,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":2,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":70,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":110,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":22,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":119,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":31,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":112,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":181,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":101,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":172,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointCount":61,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":8,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":184,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":68,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":67,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":125,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testBarrierAccess":59,"com.graphhopper.util.PMapTest.numericPropertyCanBeRetrievedAsLong":64,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":132,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":134,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":111,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":47,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":127,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":128,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":106,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testBarrierAccess":58,"com.graphhopper.GraphHopperAPITest.testLoad":151,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":45,"com.graphhopper.routing.util.FootFlagEncoderTest.testBarrierAccess":60,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":74,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":103,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":82,"com.graphhopper.reader.OSMReaderTest.testBarriers":37,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":88,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":129,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":169,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":173,"com.graphhopper.util.GHUtilityTest.testCopy":42,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":62,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":141,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":131,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":170,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":171,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":136,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":123,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":78,"com.graphhopper.reader.PrinctonReaderTest.testRead":139,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":19,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":13,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":0,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":53,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":122,"com.graphhopper.util.InstructionListTest.testWayList2":41,"com.graphhopper.reader.OSMReaderTest.testFoot":156,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":96,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":10,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":95,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":186,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":149,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":30,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":150,"com.graphhopper.reader.OSMReaderTest.testOneWay":164,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":117,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":138,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":104,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetLocations":120,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":18,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":137,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":52,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":130,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":102,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":157,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":77,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":11,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":177,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":49,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":56,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":76,"com.graphhopper.routing.PathBidirRefTest.testExtract":79,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":197,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":192,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnsureSize":115,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":196,"com.graphhopper.storage.UnsafeDataAccessTest.testTrimTo":198,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":179,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":195,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":14,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":194,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":193,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":190,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":73,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":92,"com.graphhopper.reader.OSMReaderTest.testMain":35,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":29,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":113,"com.graphhopper.routing.PathBidirRefTest.testExtract2":80,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":28,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":175,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":81,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":187,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":182,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":159,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":174,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":135,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":163,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":27,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":51,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":183,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":97,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":108,"com.graphhopper.util.DouglasPeuckerTest.testPathSimplify":63,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":105,"com.graphhopper.GraphHopperTest.testFootAndCar":153,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":116,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":188,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":21,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":94,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":118,"com.graphhopper.GraphHopperTest.testPrepareOnly":166,"com.graphhopper.GraphHopperTest.testVia":152,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":71,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":161,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":178,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":143,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":4,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":114,"com.graphhopper.GraphHopperTest.testFootOnly":48,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":144,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":160,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":176,"com.graphhopper.util.InstructionListTest.testFind":38,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":66,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":75,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":126,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":189},"transformations":[{"failures":[],"tindex":"9a17c990-8276-11e5-9669-b31c61bca366","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:305","type":"CtInvocationImpl","sourcecode":"java.util.List<java.nio.ByteBuffer>.get(int).putInt(int, int)"},"variableMap":{"index":"bufferIndex","bufferIndex":"bufferIndex","value":"bufferIndex","segments":"segments"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:346","type":"CtAssignmentImpl","sourcecode":"java.nio.ByteBuffer = java.util.List<java.nio.ByteBuffer>.get((int + 1))"},"status":0},{"failures":[],"tindex":"9a17f0a1-8276-11e5-9669-8fe824a5e252","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.EdgeWrapper:141","type":"CtInvocationImpl","sourcecode":"gnu.trove.map.hash.TIntIntHashMap.clear()"},"status":0},{"failures":[],"tindex":"9a17f0a2-8276-11e5-9669-a7054da03d7f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.CompressedArray:72","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"variableMap":{"compressionLevel":"event"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMRelation:60","type":"CtAssignmentImpl","sourcecode":"int = javax.xml.stream.XMLStreamReader.nextTag()"},"status":-2},{"failures":[],"tindex":"9a17f0a3-8276-11e5-9669-1b5f7e9b8921","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PathMerger:116","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GHResponse.addError(new java.lang.RuntimeException(\"Connection between locations not found\"))"},"variableMap":{"rsp":"rsp"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:119","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GHResponse.setPoints(com.graphhopper.util.PointList).setRouteWeight(double)"},"status":0},{"failures":[],"tindex":"9a17f0a4-8276-11e5-9669-8f60c128642f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:164","type":"CtLocalVariableImpl","sourcecode":"double double = (double + double) / 2"},"variableMap":{"maxLatTmp":"fwdIncline","minLatTmp":"fwdIncline"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:229","type":"CtLocalVariableImpl","sourcecode":"double double = 1 - (5 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)))"},"status":0},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"tindex":"9a17f0a5-8276-11e5-9669-bd2b3745d076","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:132","type":"CtIfImpl","sourcecode":"if (!(java.lang.Double.isNaN(double)))\n    throw new java.lang.IllegalStateException((\"This is a 2D list we cannot store elevation: \" + double));\n"},"variableMap":{"ele":"lon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:905","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(double, double)"},"status":-1},{"failures":[49,50,51,52,53,54,55,56,57],"tindex":"9a1817b6-8276-11e5-9669-2de960b0396b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:71","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double += double;\n    int += int;\n} else {\n    double += double;\n    int += int;\n}"},"variableMap":{"maxY":"periodTime","deltaX":"meanDegree","stepX":"updateCounter","maxX":"periodTime","deltaY":"lazyTime","stepY":"neighborUpdatePercentage","x":"neighborUpdatePercentage","y":"newShortcuts"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:265","type":"CtWhileImpl","sourcecode":"while (!(com.graphhopper.coll.GHTreeMapComposed.isEmpty())) {\n    if ((boolean && ((long) > 0)) && (((long) % long) == 0)) {\n        com.graphhopper.util.StopWatch.start();\n        com.graphhopper.coll.GHTreeMapComposed.clear();\n        int int = com.graphhopper.storage.CHGraphImpl.getNodes();\n        for (int int = 0 ; int < int ; int++) {\n            if ((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int))\n                continue;\n            \n            int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n            com.graphhopper.coll.GHTreeMapComposed.insert(int, int);\n        }\n        com.graphhopper.util.StopWatch.stop();\n        int++;\n        if (com.graphhopper.coll.GHTreeMapComposed.isEmpty())\n            throw new java.lang.IllegalStateException(\"Cannot prepare as no unprepared nodes where found. Called preparation twice?\");\n        \n    } \n    if (((long) % long) == 0) {\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        org.slf4j.Logger.info((((((((((((((((((com.graphhopper.util.Helper.nf(long)) + \", updates:\") + int) + \", nodes: \") + (com.graphhopper.util.Helper.nf(com.graphhopper.coll.GHTreeMapComposed.getSize()))) + \", shortcuts:\") + (com.graphhopper.util.Helper.nf(int))) + \", dijkstras:\") + (com.graphhopper.util.Helper.nf(long))) + \", \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getTimesAsString())) + \", meanDegree:\") + ((long)(double))) + \", algo:\") + (com.graphhopper.routing.DijkstraOneToMany.getMemoryUsageAsString())) + \", \") + (com.graphhopper.util.Helper.getMemInfo())));\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n    } \n    (long)++;\n    int int = com.graphhopper.coll.GHTreeMapComposed.pollKey();\n    if ((!(com.graphhopper.coll.GHTreeMapComposed.isEmpty())) && ((com.graphhopper.coll.GHTreeMapComposed.getSize()) < long)) {\n        com.graphhopper.util.StopWatch.start();\n        int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n        if (int > (com.graphhopper.coll.GHTreeMapComposed.peekValue())) {\n            com.graphhopper.coll.GHTreeMapComposed.insert(int, int);\n            com.graphhopper.util.StopWatch.stop();\n            continue;\n        } \n        com.graphhopper.util.StopWatch.stop();\n    } \n    int += com.graphhopper.routing.ch.PrepareContractionHierarchies.addShortcuts(int);\n    com.graphhopper.storage.CHGraphImpl.setLevel(int, int);\n    int++;\n    if ((com.graphhopper.coll.GHTreeMapComposed.getSize()) < long)\n        break;\n    \n    com.graphhopper.util.CHEdgeIterator com.graphhopper.util.CHEdgeIterator = com.graphhopper.util.CHEdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.CHEdgeIterator.next()) {\n        int int = com.graphhopper.util.CHEdgeIterator.getAdjNode();\n        if ((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int))\n            continue;\n        \n        if (boolean && ((java.util.Random.nextInt(100)) < (int))) {\n            com.graphhopper.util.StopWatch.start();\n            int int = int[][int];\n            int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n            if (int != int)\n                com.graphhopper.coll.GHTreeMapComposed.update(int, int, int);\n            \n            com.graphhopper.util.StopWatch.stop();\n        } \n        com.graphhopper.storage.CHGraphImpl.disconnect(com.graphhopper.util.CHEdgeExplorer, com.graphhopper.util.CHEdgeIterator);\n    }\n}"},"status":-1},{"failures":[58,59,60],"tindex":"9a183ec7-8276-11e5-9669-114960272f36","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:144","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"status":-1},{"failures":[61,62,63],"tindex":"9a183ec8-8276-11e5-9669-c9c537393b06","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:956","type":"CtOperatorAssignmentImpl","sourcecode":"int += int + 1"},"variableMap":{"arrayLength":"fromIndex","maxGeoRef":"counter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:169","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.util.DouglasPeucker.simplify(com.graphhopper.util.PointList, int, int)"},"status":-1},{"failures":[64,46],"tindex":"9a183ec9-8276-11e5-9669-215b6010edac","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.FootFlagEncoder:224","type":"CtIfImpl","sourcecode":"if (java.lang.String != null) {\n    if ((((!(\"hiking\".equals(java.lang.String))) && (!(\"mountain_hiking\".equals(java.lang.String)))) && (!(\"demanding_mountain_hiking\".equals(java.lang.String)))) && (!(\"alpine_hiking\".equals(java.lang.String))))\n        return 0;\n    \n} "},"variableMap":{"sacScale":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PMap:85","type":"CtReturnImpl","sourcecode":"return java.lang.Long.parseLong(java.lang.String)"},"status":-1},{"failures":[65,66,67,68,69,70,71,72,73,74,75,49,76,50,77,78,51,52,53,54,57,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141],"tindex":"9a183eca-8276-11e5-9669-f7174c8584d1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:497","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.ensureNodeIndex(java.lang.Math.max(int, int))"},"status":-1},{"failures":[],"tindex":"9a183ecb-8276-11e5-9669-bf64d8d3d034","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.StopWatch:48","type":"CtAssignmentImpl","sourcecode":"long = java.lang.System.nanoTime()"},"variableMap":{"lastTime":"nodeBitMask"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:586","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= int"},"status":0},{"failures":[],"tindex":"9a1865dc-8276-11e5-9669-c7a5080c4736","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:304","type":"CtAssignmentImpl","sourcecode":"boolean = boolean"},"variableMap":{"b":"finishedTo","updateBestPath":"finishedTo"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AbstractBidirAlgo:76","type":"CtAssignmentImpl","sourcecode":"boolean = !com.graphhopper.routing.AbstractBidirAlgo.(fillEdgesTo())"},"status":-2},{"failures":[142,143,21,144,145,146,147,24,148,149,150,35,36,37,151,152,43,44,153,45,46,47,48],"tindex":"9a1865dd-8276-11e5-9669-535143c8279d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:127","type":"CtReturnImpl","sourcecode":"return ~long"},"variableMap":{"high":"bm"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:229","type":"CtReturnImpl","sourcecode":"return long"},"status":-1},{"failures":[154],"tindex":"9a1865de-8276-11e5-9669-f74ce40d3d8e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:406","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.util.EdgeIteratorState>.addAll(com.graphhopper.reader.OSMReader.addBarrierEdge(long, long, long, long, long))"},"variableMap":{"createdEdges":"newEdges","newNodeId":"flags","wayOsmId":"flags","wayFlags":"wayOsmId","this":"this","nodeFlags":"flags","nodeId":"wayOsmId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:699","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long))"},"status":-1},{"failures":[155,156,35,36,37,157,158,159,160,161,162,154,163,164,165,166,167,152,43,44,153,45,46,168,47,48,169],"tindex":"9a1865df-8276-11e5-9669-d7c9851a47da","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:111","type":"CtIfImpl","sourcecode":"if ((int) <= 0) {\n    throw new java.lang.IllegalStateException(\"An empty queue does not have a minimum value.\");\n} "},"variableMap":{"size":"s"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:185","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    com.graphhopper.reader.OSMReader.prepareHighwayNode(gnu.trove.list.TLongList.get(int));\n}"},"status":-1},{"failures":[170,171,172,142,173,174,143,21,22,23,175,144,176,145,146,177,178,179,180,181,182,147,24,25,26,183,148,184,149,150,185,186,187,188,189,190,35,36,37,151,191,192,193,194,195,196,197,152,43,44,153,45,46,47,48],"tindex":"9a1865e0-8276-11e5-9669-fbf18f237e39","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.CompressedArray:101","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long % (int)))"},"variableMap":{"index":"keyPart","entriesPerSegment":"depth"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:609","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(((long[][int]) & long))) << 2"},"status":-1},{"failures":[],"tindex":"9a188cf1-8276-11e5-9669-d91392021057","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PointList:109","type":"CtIfImpl","sourcecode":"if (int < 15)\n    int = 15;\n"},"variableMap":{"cap":"prevWayIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:343","type":"CtForImpl","sourcecode":"for (int int = int ; int < int ; int++) {\n    com.graphhopper.util.PointList.add(com.graphhopper.util.PointList, int);\n}"},"status":0},{"failures":[],"tindex":"9a188cf2-8276-11e5-9669-0996aacc2cab","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GHDirectory:154","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:130","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.VLongStorage.seek(long)"},"status":0},{"failures":[198],"tindex":"9a188cf3-8276-11e5-9669-ab3b96fd49d3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:255","type":"CtOperatorAssignmentImpl","sourcecode":"long |= long & 1"},"variableMap":{"res":"capacity","value":"capacity"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:275","type":"CtAssignmentImpl","sourcecode":"long = int * (int)"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"9a17f0a4-8276-11e5-9669-8f60c128642f","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.Helper.keepIn"]},"type":"staticDiff"}]},{"transformation":"9a17f0a1-8276-11e5-9669-8fe824a5e252","diffs":[{"methodsDiff":{"delete":["gnu.trove.map.hash.TIntIntHashMap.clear"]},"type":"staticDiff"}]},{"transformation":"9a188cf2-8276-11e5-9669-0996aacc2cab","diffs":[{"branches":{"com.graphhopper.coll.OSMIDSegmentedMapTest.testGet2":["com.graphhopper.util.Helper_void_cleanHack().b"]},"type":"branch"}]}]}
{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":58,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":64,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":61,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":81,"com.graphhopper.reader.OSMReaderTest.testFerry":0,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":26,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":39,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":43,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":15,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":68,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":24,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":16,"com.graphhopper.storage.MMapDataAccessTest.testCopy":18,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":54,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":44,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":11,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":5,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":59,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":69,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":6,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":62,"com.graphhopper.storage.MMapDataAccessTest.testSegments":19,"com.graphhopper.storage.index.BresenhamLineTest.testLineRightDown2":17,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":4,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":45,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":53,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":1,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":65,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":14,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":38,"com.graphhopper.storage.StorablePropertiesTest.testStore":20,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":12,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":23,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":27,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":41,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":7,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":9,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":60,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":33,"com.graphhopper.GraphHopperTest.testPrepare":77,"com.graphhopper.GraphHopperTest.testFootAndCar":79,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":63,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":3,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":25,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":36,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":46,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":50,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":49,"com.graphhopper.reader.OSMReaderTest.testOneWay":2,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":55,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":8,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":13,"com.graphhopper.GraphHopperAPITest.testDisconnected179":35,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":57,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":31,"com.graphhopper.GraphHopperTest.testPrepareOnly":28,"com.graphhopper.GraphHopperTest.testVia":76,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":82,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":32,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":40,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":22,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":47,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":52,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":56,"com.graphhopper.GraphHopperAPITest.testLoad":34,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":29,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":66,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":67,"com.graphhopper.GraphHopperTest.testFootOnly":80,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":37,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":78,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":75,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":42,"com.graphhopper.GraphHopperTest.testLoadOSM":30,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":48,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":70,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":51,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":74,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":73,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":10,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":72,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":21,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":71},"transformations":[{"failures":[],"tindex":"b2611bb8-82b8-11e5-872f-7b9ff799ef3f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.VLongStorage:90","type":"CtOperatorAssignmentImpl","sourcecode":"long >>>= 7"},"variableMap":{"i":"nodeBitMask"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:585","type":"CtAssignmentImpl","sourcecode":"long = (1L << int) - 1"},"status":0},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],"tindex":"b26142c9-82b8-11e5-872f-1fd1f1b13536","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:176","type":"CtIfImpl","sourcecode":"if ((java.lang.String.length()) > 64)\n    throw new java.lang.UnsupportedOperationException((\"Strings needs to fit into a \\'long\\' but length was \" + (java.lang.String.length())));\n"},"variableMap":{"str":"highway"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:528","type":"CtIfImpl","sourcecode":"if (\"cycleway\".equals(java.lang.String))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(100.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"status":-1},{"failures":[],"tindex":"b26142ca-82b8-11e5-872f-6945c0128f3a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:102","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.storage.UnsafeDataAccess.sun.misc.Unsafe.reallocateMemory(long, long)"},"status":-1},{"failures":[],"tindex":"b26169db-82b8-11e5-872f-e13c51273848","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.PrinctonReader:65","type":"CtLocalVariableImpl","sourcecode":"double double = -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:590","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.EdgeIterator, true, com.graphhopper.util.EdgeIterator.int)"},"status":-2},{"failures":[],"tindex":"b26169dc-82b8-11e5-872f-11b214cd1653","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.BigLongIntMap:73","type":"CtLocalVariableImpl","sourcecode":"long long = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:114","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.storage.VLongStorage.getPosition()"},"status":-2},{"failures":[17],"tindex":"b26169dd-82b8-11e5-872f-a7ebf98a37b9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:81","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.PointEmitter.set(int, int)"},"status":-1},{"failures":[],"tindex":"b26169de-82b8-11e5-872f-c958bdad532e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:231","type":"CtAssignmentImpl","sourcecode":"double = (double * (((double * double) + (double * double)) + (1 * double))) / double"},"variableMap":{"fwdFaster":"weightOfVisitedPath","incDist2DSum":"weightOfVisitedPath","fwdSlower":"weightOfVisitedPath","fullDist2D":"weightOfVisitedPath","restDist2D":"weightOfVisitedPath","speed":"weightOfVisitedPath","decDist2DSum":"weightOfVisitedPath"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:274","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.AStar.AStarEdge.double = float"},"status":-2},{"failures":[],"tindex":"b26190ef-82b8-11e5-872f-4706d14dd17e","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:669","type":"CtLocalVariableImpl","sourcecode":"int int = -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:304","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"b26190f0-82b8-11e5-872f-f7ec11f23a50","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:129","type":"CtIfImpl","sourcecode":"if (java.lang.String.isEmpty())\n    continue;\n"},"variableMap":{"entry":"configuredCHWeightings"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:277","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.equals(java.lang.String)))\n    throw new java.lang.IllegalStateException((((\"Configured graph.chWeightings: \" + java.lang.String) + \" is not equal to loaded \") + java.lang.String));\n"},"status":-2},{"failures":[18,19],"tindex":"b26190f1-82b8-11e5-872f-6fb5497be968","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.GPXEntry:80","type":"CtAssignmentImpl","sourcecode":"this.long = long"},"variableMap":{"time":"longSegmentSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:146","type":"CtOperatorAssignmentImpl","sourcecode":"long += (java.util.List<java.nio.ByteBuffer>.size()) * long"},"status":-2},{"failures":[20,21,22,23,24,25,26,27,28,29,30,31,32],"tindex":"b26190f2-82b8-11e5-872f-1341fb6f3b3c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.SRTMProvider:111","type":"CtLocalVariableImpl","sourcecode":"int int = java.lang.Integer.parseInt(java.lang.String.substring(1, 3))"},"variableMap":{"line":"line"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:116","type":"CtLocalVariableImpl","sourcecode":"int int = java.lang.String.indexOf(\"=\")"},"status":-1},{"failures":[],"tindex":"b261b803-82b8-11e5-872f-c59db03f5b17","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:137","type":"CtReturnImpl","sourcecode":"return 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:540","type":"CtReturnImpl","sourcecode":"return java.lang.Double.double"},"status":0},{"failures":[],"tindex":"b261b804-82b8-11e5-872f-7118c3307467","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphBuilder:106","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.Directory = new com.graphhopper.storage.MMapDirectory(java.lang.String)"},"status":-2},{"failures":[],"tindex":"b261b805-82b8-11e5-872f-3fefefb71ef1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:803","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.EdgeExplorer.setBaseNode(((int) - 1)).toString()"},"status":0},{"failures":[33],"tindex":"b261b806-82b8-11e5-872f-65c07ba440a2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:373","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-1},{"failures":[34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,29,30,32,80],"tindex":"b261b807-82b8-11e5-872f-7daf6f2cf869","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.AStar:139","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.AStar.AStarEdge.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge"},"variableMap":{"parent":"currTo","ase":"currTo","currEdge":"currTo"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:98","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AbstractRoutingAlgorithm.createEdgeEntry(int, double)"},"status":-1},{"failures":[],"tindex":"b261df18-82b8-11e5-872f-1d1c387cfa02","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.GHUtility:172","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.storage.NodeAccess com.graphhopper.storage.NodeAccess = com.graphhopper.storage.CHGraph.getNodeAccess()"},"variableMap":{"g":"toSortedGraph"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:262","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.storage.NodeAccess com.graphhopper.storage.NodeAccess = com.graphhopper.storage.Graph.getNodeAccess()"},"status":-2},{"failures":[81,82],"tindex":"b261df19-82b8-11e5-872f-eb0d603b5644","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:81","type":"CtOperatorAssignmentImpl","sourcecode":"double -= 2 * (java.lang.Math.double)"},"variableMap":{"java.lang.Math.PI":"ele","angleXY":"ele"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:131","type":"CtAssignmentImpl","sourcecode":"double[][int] = double"},"status":-1},{"failures":[],"tindex":"b261df1a-82b8-11e5-872f-a51ffdca3ade","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:58","type":"CtReturnImpl","sourcecode":"return true"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":19,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"b261b805-82b8-11e5-872f-3fefefb71ef1","diffs":[{"methodsDiff":{"delete":["java.lang.Object.toString","com.graphhopper.util.EdgeExplorer.setBaseNode"]},"type":"staticDiff"},{"branches":{"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":["com.graphhopper.storage.BaseGraph$CommonEdgeIterator_java.lang.String_toString().b","com.graphhopper.storage.BaseGraph$CommonEdgeIterator_int_getEdge().b","com.graphhopper.storage.BaseGraph$CommonEdgeIterator_int_getBaseNode().b","com.graphhopper.storage.BaseGraph$CommonEdgeIterator_int_getAdjNode().b"]},"type":"branch"}]}]}
{"failureDictionary":{"com.graphhopper.storage.RAMIntDataAccessTest.testTrimTo":0,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":1},"transformations":[{"failures":[0],"tindex":"4b165290-791b-11e5-a7cb-1d87516ed50f","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.InstructionAnnotation:81","type":"CtAssignmentImpl","sourcecode":"int = (83 * int) + (this.int)"},"variableMap":{"importance":"remainingSegments","hash":"remainingSegments"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:329","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[1],"tindex":"4b1679a1-791b-11e5-a7cb-dfa2a7a87b82","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.Path:246","type":"CtIfImpl","sourcecode":"if (double == 0)\n    throw new java.lang.IllegalStateException(\"Speed cannot be 0 for unblocked edge, use access properties to mark edge blocked! Should only occur for shortest path calculation. See #242.\");\n"},"variableMap":{"speed":"dist"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullIndex:105","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.QueryResult.setQueryDistance(double)"},"status":-1},{"failures":[],"tindex":"4b16a0b2-791b-11e5-a7cb-59bf43af1386","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:1195","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException(\"No configuration changes are possible after loading the graph\");\n"},"variableMap":{"fullyLoaded":"storeOnFlush"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:262","type":"CtIfImpl","sourcecode":"if (boolean)\n    com.graphhopper.storage.DAType = com.graphhopper.storage.DAType.com.graphhopper.storage.DAType;\nelse\n    com.graphhopper.storage.DAType = com.graphhopper.storage.DAType.com.graphhopper.storage.DAType;\n"},"status":-2},{"failures":[],"tindex":"4b16a0b3-791b-11e5-a7cb-e79afb00e9db","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.NativeFSLockFactory:160","type":"CtIfImpl","sourcecode":"if (!(java.io.File.exists()))\n    return false;\n"},"variableMap":{"lockFile":"file"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:235","type":"CtIfImpl","sourcecode":"if ((!(java.io.File.exists())) || ((java.io.File.length()) == 0))\n    return false;\n"},"status":-2},{"failures":[],"tindex":"4b16a0b4-791b-11e5-a7cb-2f24142ecd69","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:259","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.storage.BaseGraph.nextNodeEntryIndex(4)"},"status":-2},{"failures":[],"tindex":"4b16a0b5-791b-11e5-a7cb-479e88c52cc9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.SRTMProvider:113","type":"CtAssignmentImpl","sourcecode":"int = -int"},"variableMap":{"lat":"com.graphhopper.reader.OSMReader.PILLAR_NODE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:638","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.OSMReader.getNodeMap().put(long, com.graphhopper.reader.OSMReader.int)"},"status":-2},{"failures":[],"tindex":"4b16c7c6-791b-11e5-a7cb-6d39e8b59473","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:719","type":"CtIfImpl","sourcecode":"if (new java.io.File((java.lang.String + \"-gh\")).exists())\n    java.lang.String += \"-gh\";\n"},"variableMap":{"graphHopperFolder":"fileName"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.NativeFSLockFactory:67","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.NativeFSLockFactory.create(java.lang.String, boolean).release()"},"status":-2},{"failures":[],"tindex":"4b16c7c7-791b-11e5-a7cb-9546eee007a8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:182","type":"CtIfImpl","sourcecode":"if (int <= 0) {\n    throw new java.lang.IllegalStateException(\"check your graph - it is empty!\");\n} "},"variableMap":{"locs":"segmentCount"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:160","type":"CtIfImpl","sourcecode":"if ((long % (int)) != 0)\n    int++;\n"},"status":-2},{"failures":[],"tindex":"4b16c7c8-791b-11e5-a7cb-25c951ee4af7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DouglasPeucker:154","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    throw new java.lang.IllegalStateException(((((\"maximum not found in [\" + int) + \",\") + int) + \"]\"));\n} "},"variableMap":{"indexWithMaxDist":"index","lastIndex":"index","fromIndex":"index"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:142","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(com.graphhopper.util.PointAccess.getLatitude(int), com.graphhopper.util.PointAccess.getLongitude(int))"},"status":-2},{"failures":[],"tindex":"4b16c7c9-791b-11e5-a7cb-075857396318","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.CmdArgs:63","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.Helper.isEmpty(java.lang.String))\n    java.lang.String = java.lang.String;\n"},"variableMap":{"configLocation":"chWeightingStr","fileStr":"chWeightingStr"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:805","type":"CtIfImpl","sourcecode":"if (java.util.Map<com.graphhopper.routing.util.Weighting, com.graphhopper.routing.RoutingAlgorithmFactory>.isEmpty())\n    for (com.graphhopper.routing.util.FlagEncoder com.graphhopper.routing.util.FlagEncoder : com.graphhopper.routing.util.EncodingManager.fetchEdgeEncoders()) {\n        com.graphhopper.routing.util.Weighting com.graphhopper.routing.util.Weighting = com.graphhopper.GraphHopper.createWeighting(new com.graphhopper.routing.util.WeightingMap(java.lang.String), com.graphhopper.routing.util.FlagEncoder);\n        java.util.Map<com.graphhopper.routing.util.Weighting, com.graphhopper.routing.RoutingAlgorithmFactory>.put(com.graphhopper.routing.util.Weighting, null);\n    }\n"},"status":-2},{"failures":[],"tindex":"4b16eeda-791b-11e5-a7cb-596a287808d4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:126","type":"CtIfImpl","sourcecode":"if ((int) < 0) {\n    throw new java.lang.IllegalStateException(\"collection is already empty!?\");\n} "},"variableMap":{"size":"to"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AbstractBidirAlgo:62","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.AbstractBidirAlgo.initTo(int, 0)"},"status":-2},{"failures":[],"tindex":"4b16eedb-791b-11e5-a7cb-41d94c78abf8","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PMap:98","type":"CtTryImpl","sourcecode":"try {\n    return java.lang.Integer.parseInt(java.lang.String);\n} catch (java.lang.Exception ex) {\n}"},"variableMap":{"str":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:472","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    return 0;\n"},"status":-2},{"failures":[],"tindex":"4b16eedc-791b-11e5-a7cb-ddae10c6d382","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:310","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.storage.CHGraphImpl com.graphhopper.storage.CHGraphImpl : java.util.Collection<com.graphhopper.storage.CHGraphImpl>) {\n    com.graphhopper.storage.CHGraphImpl.close();\n}"},"variableMap":{"chGraphs":"chGraphs"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:294","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.storage.CHGraphImpl com.graphhopper.storage.CHGraphImpl : java.util.Collection<com.graphhopper.storage.CHGraphImpl>) {\n    com.graphhopper.storage.CHGraphImpl.setEdgesHeader();\n    com.graphhopper.storage.CHGraphImpl.flush();\n}"},"status":-2},{"failures":[],"tindex":"4b16eedd-791b-11e5-a7cb-413f13b88429","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.MapEntry:92","type":"CtLocalVariableImpl","sourcecode":"int int = 7"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:832","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.storage.BaseGraph.nextGeoRef((int * int))"},"status":-2},{"failures":[],"tindex":"4b16eede-791b-11e5-a7cb-0fe4e6883aeb","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(5);\n} catch (java.lang.InterruptedException iex) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMTurnRelation:125","type":"CtIfImpl","sourcecode":"if ((this.com.graphhopper.reader.OSMTurnRelation.Type) == (com.graphhopper.reader.OSMTurnRelation.Type.com.graphhopper.reader.OSMTurnRelation.Type))\n    break;\n"},"status":-2},{"failures":[],"tindex":"4b1715ef-791b-11e5-a7cb-5f3c150c3ecd","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:398","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"4b1715f0-791b-11e5-a7cb-0181ac4493dc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:71","type":"CtIfImpl","sourcecode":"if (((int) <= 0) && ((int) <= 0))\n    return ;\n"},"variableMap":{"minNetworkSize":"com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED","minOneWayNetworkSize":"com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:159","type":"CtIfImpl","sourcecode":"if (((com.graphhopper.reader.OSMWay.hasTag(\"tunnel\", \"yes\")) || (com.graphhopper.reader.OSMWay.hasTag(\"bridge\", \"yes\"))) || (com.graphhopper.reader.OSMWay.hasTag(\"highway\", \"steps\"))) {\n} else {\n    double double = 0;\n    double double = 0;\n    double double = 0;\n    double double = 0;\n    double double = com.graphhopper.util.PointList.getElevation(0);\n    double double = com.graphhopper.util.EdgeIteratorState.getDistance();\n    if (java.lang.Double.isInfinite(double)) {\n        java.lang.System.java.io.PrintStream.println((\"infinity distance? for way:\" + (com.graphhopper.reader.OSMWay.getId())));\n        return ;\n    } \n    if (double < 1)\n        return ;\n    \n    double double = (com.graphhopper.util.PointList.getElevation(((com.graphhopper.util.PointList.size()) - 1))) - double;\n    if (double > 0.1) {\n        double = double;\n        double = double;\n    } else if (double < (-0.1)) {\n        double = -double;\n        double = double;\n    } \n    double double = double > 1 ? double / double : 0;\n    double double = double > 1 ? double / double : 0;\n    double double = (double - double) - double;\n    double double = com.graphhopper.routing.util.BikeCommonFlagEncoder.getHighwaySpeed(\"cycleway\");\n    if (com.graphhopper.routing.util.AbstractFlagEncoder.isForward(long)) {\n        double double = com.graphhopper.routing.util.AbstractFlagEncoder.getSpeed(long);\n        double double = 1 + (2 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double double = 1 - (5 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double = (double * (((double * double) + (double * double)) + (1 * double))) / double;\n        long = com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(long, com.graphhopper.util.Helper.com.graphhopper.util.Helper.keepIn(double, ((com.graphhopper.routing.util.BikeCommonFlagEncoder.int) / 2), double));\n    } \n    if (com.graphhopper.routing.util.AbstractFlagEncoder.isBackward(long)) {\n        double double = com.graphhopper.routing.util.Bike2WeightFlagEncoder.getReverseSpeed(long);\n        double double = 1 + (2 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double double = 1 - (5 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double = (double * (((double * double) + (double * double)) + (1 * double))) / double;\n        long = com.graphhopper.routing.util.Bike2WeightFlagEncoder.setReverseSpeed(long, com.graphhopper.util.Helper.com.graphhopper.util.Helper.keepIn(double, ((com.graphhopper.routing.util.BikeCommonFlagEncoder.int) / 2), double));\n    } \n}"},"status":-2},{"failures":[],"tindex":"4b173d01-791b-11e5-a7cb-577badb59732","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Instruction:71","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.InstructionAnnotation"},"variableMap":{"annotation":"com.graphhopper.util.InstructionAnnotation.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:274","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.InstructionAnnotation.com.graphhopper.util.InstructionAnnotation"},"status":-2},{"failures":[],"tindex":"4b173d02-791b-11e5-a7cb-d3e7a6dff3ca","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.ConsistentWeightApproximator:29","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.WeightApproximator.setGoalNode(int)"},"status":-2},{"failures":[],"tindex":"4b173d03-791b-11e5-a7cb-b5f3339a796e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:191","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motor_vehicle\");\n"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":102,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":98,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":25,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":125,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":101,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":142,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":120,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":115,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":34,"com.graphhopper.routing.util.CarFlagEncoderTest.testSwapDir":49,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":132,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":94,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":1,"com.graphhopper.reader.PrinctonReaderTest.testRead":137,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":60,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":121,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":61,"com.graphhopper.coll.CompressedArrayTest.testCompress":144,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":17,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":114,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":21,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":129,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":92,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":22,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetAccess":47,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":108,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":128,"com.graphhopper.util.InstructionListTest.testWayList2":11,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":36,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":14,"com.graphhopper.reader.OSMReaderTest.testFoot":69,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":116,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":106,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":28,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":104,"com.graphhopper.util.InstructionListTest.testWayList":10,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":122,"com.graphhopper.reader.OSMReaderTest.testOneWay":72,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":9,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":32,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":86,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNormedDist":136,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":65,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":83,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":88,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":62,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":29,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":103,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":111,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":7,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":138,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":5,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":0,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":64,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":38,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":3,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":45,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":109,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":15,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":23,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":57,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":79,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":93,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":16,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":131,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":134,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":67,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":77,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":53,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":24,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":73,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":117,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":76,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":75,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":74,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":13,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":33,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":63,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":35,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":90,"com.graphhopper.reader.OSMReaderTest.testMain":70,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":96,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":19,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":46,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":110,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testSetSpeed0_issue367":55,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":43,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":2,"com.graphhopper.routing.PathTest.testWayList":42,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":133,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":26,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":107,"com.graphhopper.util.BitUtilBigTest.testFromBitString":139,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":58,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":118,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":40,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":91,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":71,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":141,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":27,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":31,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":130,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":37,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":126,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":18,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":113,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":97,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":119,"com.graphhopper.GraphHopperTest.testFootAndCar":80,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":52,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":6,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":85,"com.graphhopper.util.BitUtilBigTest.testToBitString":140,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":44,"com.graphhopper.routing.PathTest.testTime":41,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":135,"com.graphhopper.routing.util.CarFlagEncoderTest.testOneway":48,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":95,"com.graphhopper.coll.CompressedArrayTest.testCompress2":143,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":51,"com.graphhopper.GraphHopperTest.testVia":78,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":82,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":99,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSetSpeed0_issue367":50,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":127,"com.graphhopper.GraphHopperAPITest.testLoad":68,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":81,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":12,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":39,"com.graphhopper.routing.util.FootFlagEncoderTest.testCombined":54,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":59,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":84,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":112,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":4,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":89,"com.graphhopper.util.InstructionListTest.testFind":8,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":124,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":30,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":105,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":56,"com.graphhopper.util.GHUtilityTest.testCopy":66,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":100,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":87,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":123},"transformations":[{"failures":[],"tindex":"b9e456f7-8297-11e5-89da-abf3b63382d4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:255","type":"CtOperatorAssignmentImpl","sourcecode":"long |= long & 1"},"variableMap":{"res":"flags","value":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:104","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(long, double)"},"status":0},{"failures":[],"tindex":"b9e4a518-8297-11e5-89da-3b809349dad4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:476","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.EdgeIteratorState.setDistance(com.graphhopper.storage.BaseGraph.CommonEdgeIterator.getDistance()).setName(com.graphhopper.storage.BaseGraph.CommonEdgeIterator.getName()).setFlags(com.graphhopper.storage.BaseGraph.CommonEdgeIterator.getDirectFlags()).setWayGeometry(com.graphhopper.storage.BaseGraph.CommonEdgeIterator.fetchWayGeometry(0))"},"variableMap":{"from":"edge","to":"edge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:246","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.EdgeIteratorState.setFlags(long)"},"status":-2},{"failures":[],"tindex":"b9e4a519-8297-11e5-89da-8b02f5e0508b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:184","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"variableMap":{"shift":"E_FLAGS"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:658","type":"CtAssignmentImpl","sourcecode":"int = (com.graphhopper.storage.EdgeAccess.int) + 4"},"status":-2},{"failures":[],"tindex":"b9e4a51a-8297-11e5-89da-3f7fbc2ad88c","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:53","type":"CtIfImpl","sourcecode":"if (double < 0.0)\n    return -double;\n"},"variableMap":{"y":"weight","angle":"weight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TurnWeighting:74","type":"CtIfImpl","sourcecode":"if (int == (com.graphhopper.util.EdgeIterator.int))\n    return double;\n"},"status":0},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"tindex":"b9e4cc2b-8297-11e5-89da-e310cec5c7c1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.Dijkstra:98","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry"},"variableMap":{"parent":"nEdge","currEdge":"nEdge","nEdge":"nEdge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Dijkstra:97","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry = new com.graphhopper.storage.EdgeEntry(com.graphhopper.util.EdgeIterator.getEdge() , com.graphhopper.util.EdgeIterator.getAdjNode() , double)"},"status":-1},{"failures":[],"tindex":"b9e4cc2c-8297-11e5-89da-5558dd635508","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:133","type":"CtIfImpl","sourcecode":"if (int > (-int)) {\n    int -= int;\n    int += int;\n} "},"variableMap":{"err":"lonSize","dLat":"lonSize","tmpErr":"initializedCounter","x1":"lonSize","sLon":"lonSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:239","type":"CtWhileImpl","sourcecode":"while (int < int) {\n    com.graphhopper.storage.DataAccess.copyTo(com.graphhopper.storage.DataAccess);\n    com.graphhopper.coll.GHBitSet.copyTo(com.graphhopper.coll.GHBitSet);\n    int = com.graphhopper.coll.GHBitSet.getCardinality();\n    for (int int = 0 ; int < int ; int++) {\n        int int = -1;\n        int int = -1;\n        if (com.graphhopper.coll.GHBitSet.contains(int)) {\n            if ((((int + 1) % (int)) != 0) && (!(com.graphhopper.coll.GHBitSet.contains((int + 1))))) {\n                int = int;\n                int = int + 1;\n            } else if (((int + (int)) < int) && (!(com.graphhopper.coll.GHBitSet.contains((int + (int)))))) {\n                int = int;\n                int = int + (int);\n            } \n        } else {\n            if ((((int + 1) % (int)) != 0) && (com.graphhopper.coll.GHBitSet.contains((int + 1)))) {\n                int = int + 1;\n                int = int;\n            } else if (((int + (int)) < int) && (com.graphhopper.coll.GHBitSet.contains((int + (int))))) {\n                int = int + (int);\n                int = int;\n            } \n        }\n        if (int >= 0) {\n            if ((int[][int]) >= 0) {\n                if (((int[][int]) == int) || (com.graphhopper.storage.index.Location2IDQuadtree.(getNormedDist(int, int)) >= com.graphhopper.storage.index.Location2IDQuadtree.(getNormedDist(int[][int], int)))) {\n                    continue;\n                } \n            } \n            com.graphhopper.storage.DataAccess.setInt((int * 4), com.graphhopper.storage.DataAccess.getInt((int * 4)));\n            int[][int] = int[][int];\n            com.graphhopper.coll.GHBitSet.add(int);\n            int++;\n        } \n    }\n}"},"status":0},{"failures":[14,15,16,17,0,1,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,2,41,4,42,6,7,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,9,10,11,67,68,69,70,71,72,73,13,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135],"tindex":"b9e4f33d-8297-11e5-89da-05bd1bd5c150","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:67","type":"CtOperatorAssignmentImpl","sourcecode":"long &= ~(long)"},"variableMap":{"flags":"backwardBit","mask":"backwardBit"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:182","type":"CtAssignmentImpl","sourcecode":"long = 2L << int"},"status":-1},{"failures":[],"tindex":"b9e4f33e-8297-11e5-89da-e300e5f9809a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:678","type":"CtIfImpl","sourcecode":"if (int == (com.graphhopper.reader.OSMReader.int))\n    continue;\n"},"variableMap":{"com.graphhopper.reader.OSMReader.EMPTY":"length","tmpNode":"length"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:342","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    int -= int;\n    java.nio.ByteBuffer.put(byte[], 0, int);\n    java.nio.ByteBuffer = java.util.List<java.nio.ByteBuffer>.get((int + 1));\n    java.nio.ByteBuffer.position(0);\n    java.nio.ByteBuffer.put(byte[], int, int);\n} else {\n    java.nio.ByteBuffer.put(byte[], 0, int);\n}"},"status":-2},{"failures":[136],"tindex":"b9e51a4f-8297-11e5-89da-d307fc001d3d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.QueryGraph:339","type":"CtLocalVariableImpl","sourcecode":"int int = int + 1"},"variableMap":{"wayIndex":"toY"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:306","type":"CtLocalVariableImpl","sourcecode":"int int = int - int"},"status":-1},{"failures":[],"tindex":"b9e51a50-8297-11e5-89da-7f49dcca5b05","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:168","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException((\"You cannot configure this GraphStorage \" + \"after calling create or loadExisting. Calling one of the methods twice is also not allowed.\"));\n"},"status":0},{"failures":[137,138],"tindex":"b9e51a51-8297-11e5-89da-3dff2e65f92d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:123","type":"CtLocalVariableImpl","sourcecode":"java.lang.String[] java.lang.String[] = java.lang.String.split(\",\")"},"variableMap":{"encoderList":"line"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.PrinctonReader:62","type":"CtLocalVariableImpl","sourcecode":"java.lang.String[] java.lang.String[] = java.lang.String.split(\" \")"},"status":-1},{"failures":[139],"tindex":"b9e51a52-8297-11e5-89da-050be121ad62","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:802","type":"CtOperatorAssignmentImpl","sourcecode":"int -= int"},"variableMap":{"edgeId":"charI","maxEdgesCount":"charI"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilBig:105","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[],"tindex":"b9e51a53-8297-11e5-89da-a767748fae31","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:343","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.reader.OSMWay.hasTags()))\n    return ;\n"},"variableMap":{"way":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMNode:89","type":"CtIfImpl","sourcecode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.String java.lang.String = ((java.lang.String)(java.lang.Object));\n    java.lang.String = java.lang.String.trim().replaceAll(\"\\\\,\", \".\");\n    if (java.lang.String.isEmpty())\n        java.lang.Object = null;\n    else\n        try {\n            java.lang.Object = java.lang.Double.parseDouble(java.lang.String);\n        } catch (java.lang.NumberFormatException ex) {\n            return ;\n        }\n    \n} else\n    java.lang.Object = ((java.lang.Number)(java.lang.Object)).doubleValue();\n"},"status":-2},{"failures":[],"tindex":"b9e54164-8297-11e5-89da-d9a23061e919","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.Path:243","type":"CtIfImpl","sourcecode":"if (((java.lang.Double.isInfinite(double)) || (java.lang.Double.isNaN(double))) || (double < 0))\n    throw new java.lang.IllegalStateException((\"Invalid speed stored in edge! \" + double));\n"},"variableMap":{"speed":"slice"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:129","type":"CtIfImpl","sourcecode":"if (double < double) {\n    java.lang.String = \"N\";\n} else if (double < (double * 3)) {\n    java.lang.String = \"NE\";\n} else if (double < (double * 5)) {\n    java.lang.String = \"E\";\n} else if (double < (double * 7)) {\n    java.lang.String = \"SE\";\n} else if (double < (double * 9)) {\n    java.lang.String = \"S\";\n} else if (double < (double * 11)) {\n    java.lang.String = \"SW\";\n} else if (double < (double * 13)) {\n    java.lang.String = \"W\";\n} else if (double < (double * 15)) {\n    java.lang.String = \"NW\";\n} else {\n    java.lang.String = \"N\";\n}"},"status":0},{"failures":[140,139],"tindex":"b9e54165-8297-11e5-89da-25f6fa3bdeef","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMNode:118","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\" lon=\")"},"variableMap":{"txt":"sb"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilBig:124","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('1')"},"status":-1},{"failures":[141,142],"tindex":"b9e54166-8297-11e5-89da-2d17b332379c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:995","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.util.EdgeIterator.int"},"variableMap":{"com.graphhopper.util.EdgeIterator.NO_EDGE":"shift","nextEdgeId":"shift"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:148","type":"CtOperatorAssignmentImpl","sourcecode":"int += com.graphhopper.routing.util.EncodedDoubleValue.getBits()"},"status":-1},{"failures":[],"tindex":"b9e56877-8297-11e5-89da-1fad13a4df48","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.PrinctonReader:54","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":0},{"failures":[],"tindex":"b9e56878-8297-11e5-89da-c79cf5d1c4ad","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:148","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.DataAccess instanceof com.graphhopper.storage.MMapDataAccess)\n    com.graphhopper.storage.MMapDataAccess = ((com.graphhopper.storage.MMapDataAccess)(com.graphhopper.storage.DataAccess));\n"},"variableMap":{"mmapDA":"originalEdges","da":"originalEdges"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:797","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt(long, int)"},"status":-2},{"failures":[],"tindex":"b9e56879-8297-11e5-89da-ef4f20202d83","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DouglasPeucker:128","type":"CtIfImpl","sourcecode":"if ((int - int) < 2) {\n    return 0;\n} "},"variableMap":{"lastIndex":"segment","fromIndex":"segment"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.BigLongIntMap:68","type":"CtReturnImpl","sourcecode":"return gnu.trove.map.hash.TLongIntHashMap[][int].get(long)"},"status":-2},{"failures":[143,144],"tindex":"b9e5687a-8297-11e5-89da-6fd9b9b67d6b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:150","type":"CtAssignmentImpl","sourcecode":"byte = com.graphhopper.storage.VLongStorage.readByte()"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"b9e456f7-8297-11e5-89da-abf3b63382d4","diffs":[{"methodsDiff":{"delete":["com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed"]},"type":"staticDiff"}]},{"transformation":"b9e51a50-8297-11e5-89da-7f49dcca5b05","diffs":[{"branchesDiff":{"delete":["t0"]},"type":"staticDiff"}]}]}
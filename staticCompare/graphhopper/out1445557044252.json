{"failureDictionary":{"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAccess":1,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":14,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAccess":0,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":4,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":18,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":5,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAccess":3,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":17,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":11,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":12,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":10,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":13,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":9,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAccess":2,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":8,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":6,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":15,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":7,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":16,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":19},"transformations":[{"failures":[0,1,2,3],"tindex":"d8c43731-7915-11e5-9928-2f4ffbf6ec1b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:272","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.util.AbstractFlagEncoder.(isBlockFords()) && ((com.graphhopper.reader.OSMWay.hasTag(\"highway\", \"ford\")) || (com.graphhopper.reader.OSMWay.hasTag(\"ford\"))))\n    return 0;\n"},"status":-1},{"failures":[4,5,6,7,8,9,10,11,12,13,14,15],"tindex":"d8c45e42-7915-11e5-9928-f7e4513d296a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:608","type":"CtAssignmentImpl","sourcecode":"long = 1L << int"},"variableMap":{"turnRestrictionBit":"encoded","shift":"com.graphhopper.routing.util.BikeCommonFlagEncoder.K_UNPAVED"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:596","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.BikeCommonFlagEncoder.setBool(long, com.graphhopper.routing.util.BikeCommonFlagEncoder.int, true)"},"status":-1},{"failures":[],"tindex":"d8c45e43-7915-11e5-9928-51869c80548f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.TurnWeighting:85","type":"CtReturnImpl","sourcecode":"return double + (double)"},"variableMap":{"defaultUTurnCost":"java.lang.Double.NaN","weight":"nextLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:235","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.util.Instruction != null) && ((com.graphhopper.util.PointList.getSize()) == 1)) {\n    double = com.graphhopper.util.Instruction.com.graphhopper.util.PointList.getLatitude(0);\n    double = com.graphhopper.util.Instruction.com.graphhopper.util.PointList.getLongitude(0);\n} else {\n    return java.lang.Double.double;\n}"},"status":-2},{"failures":[],"tindex":"d8c45e44-7915-11e5-9928-bb904684fbe9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:45","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.AngleCalc.double"},"variableMap":{"angle":"lon","com.graphhopper.util.AngleCalc.PI3_4":"prevLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:310","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.DistanceCalc.calcNormalizedEdgeDistance(double, double, double, double, double, double)"},"status":-2},{"failures":[16,17,18],"tindex":"d8c45e45-7915-11e5-9928-895b4ccb95e2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.TurnCostExtension:130","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-1},{"failures":[],"tindex":"d8c45e46-7915-11e5-9928-cd9a0f2425d6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.ConsistentWeightApproximator:38","type":"CtOperatorAssignmentImpl","sourcecode":"double *= -1"},"variableMap":{"weightApproximation":"nextLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:238","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.Instruction.com.graphhopper.util.PointList.getLongitude(0)"},"status":-2},{"failures":[16,18,19],"tindex":"d8c45e47-7915-11e5-9928-eb8b9a9230ad","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.TurnCostExtension:183","type":"CtIfImpl","sourcecode":"if (int == (int))\n    break;\n"},"status":-1},{"failures":[],"tindex":"d8c45e48-7915-11e5-9928-69e835993e35","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:100","type":"CtIfImpl","sourcecode":"if (double <= 0)\n    throw new java.lang.IllegalArgumentException((((((\"Distance must not be zero or negative! \" + double) + \" lat,lon:\") + double) + \",\") + double));\n"},"variableMap":{"radiusInMeter":"maxSpeed","lon":"maxSpeed","lat":"maxSpeed"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:372","type":"CtIfImpl","sourcecode":"if ((double >= 0) && ((double < 0) || (double < double)))\n    double = double;\n"},"status":-2},{"failures":[],"tindex":"d8c48559-7915-11e5-9928-c353e354d663","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:406","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.util.EdgeIteratorState>.addAll(com.graphhopper.reader.OSMReader.addBarrierEdge(long, long, long, long, long))"},"variableMap":{"createdEdges":"newEdges","newNodeId":"wayOsmId","wayOsmId":"wayOsmId","wayFlags":"flags","this":"this","nodeFlags":"flags","nodeId":"wayOsmId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:699","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long))"},"status":-2},{"failures":[],"tindex":"d8c4855a-7915-11e5-9928-6173fb592cb8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:91","type":"CtUnaryOperatorImpl","sourcecode":"(long)++"},"variableMap":{"size":"encoded"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:335","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.BikeCommonFlagEncoder.handleBikeRelated(com.graphhopper.reader.OSMWay, long, (long > (com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())))"},"status":-2},{"failures":[],"tindex":"d8c4855b-7915-11e5-9928-53de07a23284","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.StopWatch:81","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += (java.lang.String) + \" \""},"status":-2},{"failures":[],"tindex":"d8c4855c-7915-11e5-9928-c76089374d99","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.SparseArray:110","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"variableMap":{"mGarbage":"flagsSizeIsLong"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:52","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"status":-2},{"failures":[],"tindex":"d8c4855d-7915-11e5-9928-3de54f35f15d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:259","type":"CtAssignmentImpl","sourcecode":"int = int + (int)"},"variableMap":{"i":"low","to":"low","lonSize":"guess"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseLongLongArray:408","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-2},{"failures":[],"tindex":"d8c4855e-7915-11e5-9928-117734d40e7a","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.InstructionAnnotation:81","type":"CtAssignmentImpl","sourcecode":"int = (83 * int) + (this.int)"},"variableMap":{"importance":"size","hash":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:115","type":"CtOperatorAssignmentImpl","sourcecode":"int -= 1"},"status":-2},{"failures":[],"tindex":"d8c4855f-7915-11e5-9928-69c3b5b3ece1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:478","type":"CtAssignmentImpl","sourcecode":"int = (int + int) >>> 1"},"variableMap":{"high":"delta","guess":"delta","low":"delta"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:77","type":"CtOperatorAssignmentImpl","sourcecode":"int += int"},"status":-2},{"failures":[],"tindex":"d8c48560-7915-11e5-9928-e1c9dffe10df","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:278","type":"CtReturnImpl","sourcecode":"return (((long)(int)) << 32) | (int & 4294967295L)"},"variableMap":{"intLow":"offset","intHigh":"offset"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilLittle:69","type":"CtReturnImpl","sourcecode":"return (com.graphhopper.util.BitUtilLittle.((long)(toInt(byte[], (int + 4)))) << 32) | (com.graphhopper.util.BitUtilLittle.(toInt(byte[], int)) & 4294967295L)"},"status":-2},{"failures":[],"tindex":"d8c4ac71-7915-11e5-9928-cd44f7cf7ac4","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:191","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(5)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:106","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : java.lang.String[]) {\n    java.io.InputStream java.io.InputStream = java.lang.Object.getClass().getResourceAsStream((java.lang.String + \"_names.txt\"));\n    for (java.lang.String java.lang.String : com.graphhopper.util.Helper.readFile(new java.io.InputStreamReader(java.io.InputStream , com.graphhopper.util.Helper.java.nio.charset.Charset))) {\n        int int = java.lang.Integer.parseInt(java.lang.String.substring(1, 3));\n        if ((java.lang.String.substring(0, 1).charAt(0)) == 'S')\n            int = -int;\n        \n        int int = java.lang.Integer.parseInt(java.lang.String.substring(4, 7));\n        if ((java.lang.String.substring(3, 4).charAt(0)) == 'W')\n            int = -int;\n        \n        int int = com.graphhopper.reader.dem.SRTMProvider.calcIntKey(int, int);\n        java.lang.String java.lang.String = com.graphhopper.reader.dem.TIntObjectHashMap<java.lang.String>.put(int, java.lang.String);\n        if (java.lang.String != null)\n            throw new java.lang.IllegalStateException((((((\"do not overwrite existing! key \" + int) + \" \") + java.lang.String) + \" vs. \") + java.lang.String));\n        \n    }\n}"},"status":-2},{"failures":[],"tindex":"d8c4ac72-7915-11e5-9928-e5c3f081172c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:108","type":"CtReturnImpl","sourcecode":"return double + 0.1"},"variableMap":{"val":"weight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:195","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.AStar.AStarEdge.double"},"status":-2},{"failures":[],"tindex":"d8c4ac73-7915-11e5-9928-49ca1e23c597","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:805","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.coll.GHBitSet = null"},"variableMap":{"removedNodes":"indicesCopy"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:242","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.GHBitSet.copyTo(com.graphhopper.coll.GHBitSet)"},"status":-2},{"failures":[],"tindex":"d8c4ac74-7915-11e5-9928-d5817920bebe","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:252","type":"CtIfImpl","sourcecode":"if (int <= 0)\n    throw new java.lang.IllegalStateException(\"Negative precision is not allowed!\");\n"},"variableMap":{"minResolutionInMeter":"com.graphhopper.reader.OSMElement.WAY"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:175","type":"CtWhileImpl","sourcecode":"while ((com.graphhopper.reader.OSMElement = com.graphhopper.reader.OSMInputFile.getNext()) != null) {\n    if (com.graphhopper.reader.OSMElement.isType(com.graphhopper.reader.OSMElement.int)) {\n        final com.graphhopper.reader.OSMWay com.graphhopper.reader.OSMWay = ((com.graphhopper.reader.OSMWay)(com.graphhopper.reader.OSMElement));\n        boolean boolean = com.graphhopper.reader.OSMReader.filterWay(com.graphhopper.reader.OSMWay);\n        if (boolean) {\n            TLongList TLongList = com.graphhopper.reader.OSMWay.getNodes();\n            int int = com.graphhopper.reader.TLongList.size();\n            for (int int = 0 ; int < int ; int++) {\n                com.graphhopper.reader.OSMReader.prepareHighwayNode(com.graphhopper.reader.TLongList.get(int));\n            }\n            if (((++long) % 5000000) == 0) {\n                com.graphhopper.reader.OSMReader.com.graphhopper.util.Logger.info(((((((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \" (preprocess), osmIdMap:\") + com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(com.graphhopper.reader.OSMReader.getNodeMap().getSize()))) + \" (\") + (com.graphhopper.reader.OSMReader.getNodeMap().getMemoryUsage())) + \"MB) \") + (com.graphhopper.util.Helper.getMemInfo())));\n            } \n        } \n    } \n    if (com.graphhopper.reader.OSMElement.isType(com.graphhopper.reader.OSMElement.int)) {\n        final com.graphhopper.reader.OSMRelation com.graphhopper.reader.OSMRelation = ((com.graphhopper.reader.OSMRelation)(com.graphhopper.reader.OSMElement));\n        if ((!(com.graphhopper.reader.OSMRelation.isMetaRelation())) && (com.graphhopper.reader.OSMRelation.hasTag(\"type\", \"route\")))\n            com.graphhopper.reader.OSMReader.prepareWaysWithRelationInfo(com.graphhopper.reader.OSMRelation);\n        \n        if (com.graphhopper.reader.OSMRelation.hasTag(\"type\", \"restriction\"))\n            com.graphhopper.reader.OSMReader.prepareRestrictionRelation(com.graphhopper.reader.OSMRelation);\n        \n        if (((++long) % 50000) == 0) {\n            com.graphhopper.reader.OSMReader.com.graphhopper.util.Logger.info(((((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \" (preprocess), osmWayMap:\") + com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(com.graphhopper.reader.OSMReader.getRelFlagsMap().size()))) + \" \") + (com.graphhopper.util.Helper.getMemInfo())));\n        } \n    } \n}"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
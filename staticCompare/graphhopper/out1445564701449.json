{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":74,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":94,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":69,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":48,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":49,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":102,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":86,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":18,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":92,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":87,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":110,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":22,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":66,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":32,"com.graphhopper.reader.PrinctonReaderTest.testRead":114,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":2,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":3,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":30,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":35,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":107,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":64,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":36,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":99,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":106,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":23,"com.graphhopper.util.InstructionListTest.testWayList2":53,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":88,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":78,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":76,"com.graphhopper.util.InstructionListTest.testWayList":52,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":93,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":19,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":51,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":57,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":7,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":54,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":60,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":4,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":34,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":11,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":16,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":75,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":82,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":44,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":115,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":42,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":6,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":31,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":24,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":40,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":59,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":80,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":105,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":28,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":37,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":65,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":29,"com.graphhopper.routing.PathBidirRefTest.testExtract":45,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":109,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":121,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":38,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":116,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":89,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":120,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":119,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":118,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":117,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":5,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":95,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":21,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":62,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":81,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":26,"com.graphhopper.routing.PathBidirRefTest.testExtract2":46,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":39,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":111,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":10,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":79,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":61,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":0,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":98,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":97,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":90,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":27,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":63,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":17,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":108,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":104,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":33,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":85,"com.graphhopper.storage.GraphHopperStorageTest.testClone":84,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":68,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":91,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":20,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":43,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":56,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":73,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":9,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":14,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":13,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":112,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":71,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":55,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":67,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":103,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":70,"com.graphhopper.GraphHopperAPITest.testLoad":113,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":25,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":1,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":96,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":83,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":41,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":8,"com.graphhopper.util.InstructionListTest.testFind":50,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":101,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":12,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":77,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":15,"com.graphhopper.util.GHUtilityTest.testCopy":47,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":72,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":58,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":100},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121],"tindex":"acd0f963-7927-11e5-bf4b-41f77066ab60","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:86","type":"CtAssignmentImpl","sourcecode":"long = long"},"variableMap":{"lastKey":"flags","key":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:318","type":"CtOperatorAssignmentImpl","sourcecode":"long |= com.graphhopper.routing.util.AbstractFlagEncoder.flagsDefault(boolean, boolean)"},"status":-1},{"failures":[65,77,90,109],"tindex":"acd14784-7927-11e5-bf4b-f7535f58f6ff","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:156","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setSegmentSize((((int) * (int)) * 4))"},"variableMap":{"latSize":"bytes","index":"wayGeometry","lonSize":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:365","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setSegmentSize(int)"},"status":-1},{"failures":[],"tindex":"acd14785-7927-11e5-bf4b-a909e7626bf5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:182","type":"CtAssignmentImpl","sourcecode":"long = java.lang.Math.round(java.lang.Math.sqrt(long))"},"variableMap":{"parts":"com.graphhopper.storage.CHGraphImpl.MAX_WEIGHT_LONG"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:594","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.storage.CHGraphImpl.long"},"status":-2},{"failures":[],"tindex":"acd14786-7927-11e5-bf4b-911ca7739375","series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:235","type":"CtIfImpl","sourcecode":"if (long > 1) {\n    long >>>= 1;\n} else {\n    break;\n}"},"variableMap":{"bits":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:655","type":"CtForEachImpl","sourcecode":"NEXT_SC : for (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut : java.util.Map<com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut>.keySet()) {\n    boolean boolean = false;\n    com.graphhopper.util.CHEdgeIterator com.graphhopper.util.CHEdgeIterator = com.graphhopper.util.CHEdgeExplorer.setBaseNode(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n    while (com.graphhopper.util.CHEdgeIterator.next()) {\n        if (((com.graphhopper.util.CHEdgeIterator.isShortcut()) && ((com.graphhopper.util.CHEdgeIterator.getAdjNode()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) && (com.graphhopper.util.CHEdgeIterator.canBeOverwritten(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long))) {\n            if ((com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double) >= (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.CHEdgeIterator, false, com.graphhopper.util.EdgeIterator.int)))\n                continue NEXT_SC;\n            \n            if (((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) || ((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) {\n                throw new java.lang.IllegalStateException((((((((((((((((((\"Shortcut cannot update itself! \" + (com.graphhopper.util.CHEdgeIterator.getEdge())) + \", skipEdge1:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", skipEdge2:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", edge \") + com.graphhopper.util.CHEdgeIterator) + \":\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.CHEdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", sc:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut) + \", skippedEdge1: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", skippedEdge2: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", neighbors:\") + (com.graphhopper.util.GHUtility.getNeighbors(com.graphhopper.util.CHEdgeIterator))));\n            } \n            com.graphhopper.util.CHEdgeIterator.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n            com.graphhopper.util.CHEdgeIterator.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n            com.graphhopper.util.CHEdgeIterator.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n            com.graphhopper.util.CHEdgeIterator.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n            com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIterator.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n            boolean = true;\n            break;\n        } \n    }\n    if (!boolean) {\n        com.graphhopper.util.CHEdgeIteratorState com.graphhopper.util.CHEdgeIteratorState = com.graphhopper.storage.CHGraphImpl.shortcut(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        com.graphhopper.util.CHEdgeIteratorState.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n        com.graphhopper.util.CHEdgeIteratorState.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIteratorState.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIteratorState.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIteratorState.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        int++;\n    } \n}"},"status":-2},{"failures":[],"tindex":"acd16e97-7927-11e5-bf4b-6386b6ec74d6","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:120","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = int < int"},"variableMap":{"y1":"edgeId","y2":"b"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:214","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = com.graphhopper.storage.CHGraphImpl.CHEdgeIteratorImpl.init(int, int)"},"status":-2},{"failures":[],"tindex":"acd16e98-7927-11e5-bf4b-d9a88682597b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:183","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)((java.lang.Math.log(int)) / (java.lang.Math.log(2))))"},"variableMap":{"bytes":"indexDivisor"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:328","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long & (int)))"},"status":-2},{"failures":[],"tindex":"acd195a9-7927-11e5-bf4b-1155adbf4e84","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:186","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(2000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:286","type":"CtWhileImpl","sourcecode":"while ((int = java.io.BufferedInputStream.read(byte[])) > 0) {\n    for (int int = 0 ; int < int ; int += 2) {\n        short short = com.graphhopper.reader.dem.SRTMProvider.com.graphhopper.util.BitUtil.toShort(byte[], int);\n        if ((short < (-1000)) || (short > 12000))\n            short = java.lang.Short.short;\n        \n        com.graphhopper.storage.DataAccess.setShort(int, short);\n    }\n}"},"status":-2},{"failures":[],"tindex":"acd195aa-7927-11e5-bf4b-a370806dd37a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:531","type":"CtAssignmentImpl","sourcecode":"int = (-int) - 3"},"variableMap":{"id":"cap"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:110","type":"CtAssignmentImpl","sourcecode":"int = 15"},"status":-2},{"failures":[],"tindex":"acd195ab-7927-11e5-bf4b-99048975ea53","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.SimpleIntDeque:84","type":"CtAssignmentImpl","sourcecode":"int = 0"},"status":-2},{"failures":[],"tindex":"acd195ac-7927-11e5-bf4b-99ab259e1d9b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:219","type":"CtLocalVariableImpl","sourcecode":"double double = double"},"variableMap":{"a_lat_deg":"lat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:652","type":"CtLocalVariableImpl","sourcecode":"double double = (com.graphhopper.util.shapes.GHPoint.double) - ((0.5 + int) * (double))"},"status":-2},{"failures":[],"tindex":"acd195ad-7927-11e5-bf4b-d5be57d4fe2e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:225","type":"CtLocalVariableImpl","sourcecode":"long long = 1L << 63"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.LinearKeyAlgo:90","type":"CtLocalVariableImpl","sourcecode":"long long = ((long)(((double - (com.graphhopper.util.shapes.BBox.double)) / (double)) * (com.graphhopper.geohash.LinearKeyAlgo.double)))"},"status":-2},{"failures":[],"tindex":"acd1bcbe-7927-11e5-bf4b-0d0e6ecd9fa0","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.SimpleIntDeque:62","type":"CtAssignmentImpl","sourcecode":"this.float = float"},"variableMap":{"growFactor":"factor","factor":"factor"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHLongIntBTree:68","type":"CtAssignmentImpl","sourcecode":"float = 1.7F"},"status":-2},{"failures":[],"tindex":"acd1bcbf-7927-11e5-bf4b-0fb106ea0e60","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.VirtualEdgeIteratorState:84","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.util.PointList.getSize()) == 0)\n    return com.graphhopper.util.PointList.com.graphhopper.util.PointList;\n"},"variableMap":{"pointList":"list","com.graphhopper.util.PointList.EMPTY":"list"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GHResponse:104","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.PointList"},"status":-2},{"failures":[],"tindex":"acd1bcc0-7927-11e5-bf4b-89f19df1d149","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:85","type":"CtIfImpl","sourcecode":"if (int >= int)\n    boolean = true;\n"},"variableMap":{"endX":"firstNode","reachedX":"exitOnlyPillarNodeException","x":"lastIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:672","type":"CtTryImpl","sourcecode":"try {\n    for (int int = 0 ; int < (com.graphhopper.reader.TLongList.size()) ; int++) {\n        long long = com.graphhopper.reader.TLongList.get(int);\n        int int = com.graphhopper.reader.OSMReader.getNodeMap().get(long);\n        if (int == (com.graphhopper.reader.OSMReader.int))\n            continue;\n        \n        if (int == (com.graphhopper.reader.OSMReader.int))\n            continue;\n        \n        if (int == (com.graphhopper.reader.OSMReader.int)) {\n            if ((!(com.graphhopper.util.PointList.isEmpty())) && (int > (-(com.graphhopper.reader.OSMReader.int)))) {\n                int = int;\n                int = com.graphhopper.reader.OSMReader.handlePillarNode(int, long, null, true);\n                int = (-int) - 3;\n                if (((com.graphhopper.util.PointList.getSize()) > 1) && (int >= 0)) {\n                    java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long));\n                    com.graphhopper.util.PointList.clear();\n                    com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n                } \n                int = int;\n                int = -1;\n            } \n            continue;\n        } \n        if ((int <= (-(com.graphhopper.reader.OSMReader.int))) && (int >= (com.graphhopper.reader.OSMReader.int)))\n            throw new java.lang.AssertionError((((\"Mapped index not in correct bounds \" + int) + \", \") + long));\n        \n        if (int > (-(com.graphhopper.reader.OSMReader.int))) {\n            boolean boolean = (int == 0) || (int == int);\n            if (!boolean) {\n                int = int;\n            } \n            int = com.graphhopper.reader.OSMReader.handlePillarNode(int, long, com.graphhopper.util.PointList, boolean);\n        } \n        if (int < (com.graphhopper.reader.OSMReader.int)) {\n            int = (-int) - 3;\n            com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n            if (int >= 0) {\n                java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long));\n                com.graphhopper.util.PointList.clear();\n                com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n            } \n            int = int;\n        } \n    }\n} catch (java.lang.RuntimeException ex) {\n    com.graphhopper.reader.OSMReader.com.graphhopper.routing.util.Logger.error((\"Couldn\\'t properly add edge with osm ids:\" + com.graphhopper.reader.TLongList), java.lang.RuntimeException);\n    if (boolean)\n        throw java.lang.RuntimeException;\n    \n}"},"status":-2},{"failures":[],"tindex":"acd1e3d1-7927-11e5-bf4b-3782ae1943ca","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:154","type":"CtOperatorAssignmentImpl","sourcecode":"long += long"},"variableMap":{"longSegmentSize":"res","bufferStart":"res"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtil:254","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= 1"},"status":-2},{"failures":[],"tindex":"acd1e3d2-7927-11e5-bf4b-0fe799380a0c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:178","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt(long, int)"},"status":-2},{"failures":[],"tindex":"acd1e3d3-7927-11e5-bf4b-c57af80ee516","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.AStar:140","type":"CtInvocationImpl","sourcecode":"java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.add(com.graphhopper.routing.AStar.AStarEdge)"},"variableMap":{"prioQueueOpenSet":"prioQueueOpenSet","ase":"ase"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:271","type":"CtInvocationImpl","sourcecode":"java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.remove(com.graphhopper.routing.AStar.AStarEdge)"},"status":-2},{"failures":[],"tindex":"acd1e3d4-7927-11e5-bf4b-dda284b802c7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:659","type":"CtAssignmentImpl","sourcecode":"int = (int) + 4"},"variableMap":{"S_SKIP_EDGE1":"offset","S_SKIP_EDGE2":"offset"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilBig:77","type":"CtUnaryOperatorImpl","sourcecode":"++int"},"status":-2},{"failures":[],"tindex":"acd20ae5-7927-11e5-bf4b-4b4351cfd116","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:590","type":"CtLocalVariableImpl","sourcecode":"long long = ((long)(int)) << 2"},"variableMap":{"intIndex":"key"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:194","type":"CtLocalVariableImpl","sourcecode":"long long = ((long)(int)) * 4"},"status":-2},{"failures":[],"tindex":"acd20ae6-7927-11e5-bf4b-93bc30fa21a0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:171","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.util.Helper.isEmpty(java.lang.String))) {\n    java.lang.Integer java.lang.Integer = java.util.Map<java.lang.String, java.lang.Integer>.get(java.lang.String);\n    if (java.lang.Integer != null)\n        java.lang.Integer = java.lang.Integer;\n    \n} "},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"154d65fa-794b-11e5-8554-55b8faa4b554","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.SRTMProvider:275","type":"CtAssignmentImpl","sourcecode":"java.lang.String = (((java.lang.String) + \"/\") + java.lang.String) + \"hgt.zip\""},"variableMap":{"baseUrl":"value","fileDetails":"value","zippedURL":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.TranslationMap:167","type":"CtInvocationImpl","sourcecode":"java.lang.String.format(java.lang.String, java.lang.Object[])"},"status":0},{"failures":[],"tindex":"154d65fb-794b-11e5-8554-8f85bf91ebe5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:186","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(2000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:262","type":"CtIfImpl","sourcecode":"if (boolean)\n    com.graphhopper.storage.DAType = com.graphhopper.storage.DAType.com.graphhopper.storage.DAType;\nelse\n    com.graphhopper.storage.DAType = com.graphhopper.storage.DAType.com.graphhopper.storage.DAType;\n"},"status":-2},{"failures":[],"tindex":"154d8d0c-794b-11e5-8554-6f21e43964c3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.CompressedArray:142","type":"CtInvocationImpl","sourcecode":"java.util.List<byte[]>.add(com.graphhopper.coll.CompressedArray.com.graphhopper.coll.CompressedArray.compress(byte[], 0, byte[].int, int))"},"status":-2},{"failures":[],"tindex":"154d8d0d-794b-11e5-8554-fd40edfacc99","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.EdgeAccess:194","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int == (com.graphhopper.util.EdgeIterator.int)))\n    throw new java.lang.IllegalStateException((((((\"Cannot write edge with illegal ID:\" + int) + \"; nodeThis:\") + int) + \", nodeOther:\") + int));\n"},"variableMap":{"com.graphhopper.util.EdgeIterator.NO_EDGE":"turnCostsEntryBytes","nodeThis":"previousEntryIndex","edgeId":"turnCostsEntryBytes","nodeOther":"TC_NEXT"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.TurnCostExtension:153","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt(((((long)(int)) * (int)) + (int)), int)"},"status":-2},{"failures":[],"tindex":"154d8d0e-794b-11e5-8554-d555dde2a195","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:139","type":"CtIfImpl","sourcecode":"if (int < int) {\n    int += int;\n    int += int;\n} "},"variableMap":{"err":"len","tmpErr":"len","y1":"len","dLon":"len","sLat":"len"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:286","type":"CtWhileImpl","sourcecode":"while ((int = java.io.BufferedInputStream.read(byte[])) > 0) {\n    for (int int = 0 ; int < int ; int += 2) {\n        short short = com.graphhopper.reader.dem.SRTMProvider.com.graphhopper.util.BitUtil.toShort(byte[], int);\n        if ((short < (-1000)) || (short > 12000))\n            short = java.lang.Short.short;\n        \n        com.graphhopper.storage.DataAccess.setShort(int, short);\n    }\n}"},"status":-2},{"failures":[],"tindex":"154d8d0f-794b-11e5-8554-6740171a2e99","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.MiniPerfTest:44","type":"CtLocalVariableImpl","sourcecode":"long long = java.lang.System.nanoTime()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:647","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.geohash.SpatialKeyAlgo.encode(com.graphhopper.util.shapes.GHPoint)"},"status":-2},{"failures":[],"tindex":"154d8d10-794b-11e5-8554-17e93480effa","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.StorableProperties:181","type":"CtIfImpl","sourcecode":"if (boolean) {\n    return false;\n} "},"variableMap":{"silent":"synched"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.DAType:209","type":"CtIfImpl","sourcecode":"if ((this.boolean) != (com.graphhopper.storage.DAType.boolean))\n    return false;\n"},"status":-2},{"failures":[],"tindex":"154db421-794b-11e5-8554-fde488c3fdb9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:680","type":"CtIfImpl","sourcecode":"if (double < 0)\n    throw new java.lang.IllegalArgumentException(\"Turn costs cannot be negative\");\n"},"variableMap":{"costs":"elev"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.shapes.BBox:116","type":"CtIfImpl","sourcecode":"if (double > (double)) {\n    double = double;\n} "},"status":-2},{"failures":[],"tindex":"154db422-794b-11e5-8554-71ce4a41c08e","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistancePlaneProjection:57","type":"CtLocalVariableImpl","sourcecode":"double double = double / (com.graphhopper.util.DistanceCalcEarth.double)"},"variableMap":{"dist":"minLon","com.graphhopper.util.DistanceCalcEarth.R":"maxLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:216","type":"CtLocalVariableImpl","sourcecode":"double double = ((com.graphhopper.util.shapes.BBox.double) - (com.graphhopper.util.shapes.BBox.double)) / 2"},"status":-2},{"failures":[],"tindex":"154db423-794b-11e5-8554-f77afe1b77c3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:61","type":"CtIfImpl","sourcecode":"if ((int) > 0)\n    throw new java.lang.AssertionError(\"The turn cost storage must be initialized only once.\");\n"},"variableMap":{"turnCostsCount":"firstNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:674","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (com.graphhopper.reader.TLongList.size()) ; int++) {\n    long long = com.graphhopper.reader.TLongList.get(int);\n    int int = com.graphhopper.reader.OSMReader.getNodeMap().get(long);\n    if (int == (com.graphhopper.reader.OSMReader.int))\n        continue;\n    \n    if (int == (com.graphhopper.reader.OSMReader.int))\n        continue;\n    \n    if (int == (com.graphhopper.reader.OSMReader.int)) {\n        if ((!(com.graphhopper.util.PointList.isEmpty())) && (int > (-(com.graphhopper.reader.OSMReader.int)))) {\n            int = int;\n            int = com.graphhopper.reader.OSMReader.handlePillarNode(int, long, null, true);\n            int = (-int) - 3;\n            if (((com.graphhopper.util.PointList.getSize()) > 1) && (int >= 0)) {\n                java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long));\n                com.graphhopper.util.PointList.clear();\n                com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n            } \n            int = int;\n            int = -1;\n        } \n        continue;\n    } \n    if ((int <= (-(com.graphhopper.reader.OSMReader.int))) && (int >= (com.graphhopper.reader.OSMReader.int)))\n        throw new java.lang.AssertionError((((\"Mapped index not in correct bounds \" + int) + \", \") + long));\n    \n    if (int > (-(com.graphhopper.reader.OSMReader.int))) {\n        boolean boolean = (int == 0) || (int == int);\n        if (!boolean) {\n            int = int;\n        } \n        int = com.graphhopper.reader.OSMReader.handlePillarNode(int, long, com.graphhopper.util.PointList, boolean);\n    } \n    if (int < (com.graphhopper.reader.OSMReader.int)) {\n        int = (-int) - 3;\n        com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n        if (int >= 0) {\n            java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long));\n            com.graphhopper.util.PointList.clear();\n            com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n        } \n        int = int;\n    } \n}"},"status":-2},{"failures":[],"tindex":"154db424-794b-11e5-8554-253795765619","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:168","type":"CtLocalVariableImpl","sourcecode":"double double = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:732","type":"CtLocalVariableImpl","sourcecode":"double double = double + (int * (double))"},"status":-2},{"failures":[],"tindex":"154db425-794b-11e5-8554-8fafa17d81f9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.search.NameIndex:121","type":"CtIfImpl","sourcecode":"if (long < 0)\n    throw new java.lang.IllegalStateException((\"Pointer to access NameIndex cannot be negative:\" + long));\n"},"variableMap":{"pointer":"edgeToRemovePointer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:686","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.EdgeAccess.invalidateEdge(long)"},"status":-2},{"failures":[],"tindex":"154ddb36-794b-11e5-8554-4f0f01adc84b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.CompressedArray:175","type":"CtInvocationImpl","sourcecode":"java.util.zip.Deflater.setLevel(int)"},"status":-2},{"failures":[],"tindex":"154ddb37-794b-11e5-8554-f5280ec14b94","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PMap:34","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PMap.this(5)"},"variableMap":{"this":"properties"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:62","type":"CtAssignmentImpl","sourcecode":"this.com.graphhopper.util.PMap = com.graphhopper.util.PMap"},"status":-2},{"failures":[],"tindex":"154ddb38-794b-11e5-8554-871e1998fda7","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:169","type":"CtIfImpl","sourcecode":"if ((int == (com.graphhopper.util.EdgeIterator.int)) || (int == (com.graphhopper.util.EdgeIterator.int)))\n    throw new java.lang.IllegalArgumentException(\"from and to edge cannot be NO_EDGE\");\n"},"variableMap":{"com.graphhopper.util.EdgeIterator.NO_EDGE":"freeIndex","edgeTo":"currentIndex","edgeFrom":"freeIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:107","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.set(int, com.graphhopper.util.PointList.getLatitude(int), com.graphhopper.util.PointList.getLongitude(int), com.graphhopper.util.PointList.getElevation(int))"},"status":-2},{"failures":[],"tindex":"154ddb39-794b-11e5-8554-ef3ed5a29ffb","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:422","type":"CtReturnImpl","sourcecode":"return 6"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:413","type":"CtReturnImpl","sourcecode":"return 140"},"status":-2},{"failures":[],"tindex":"154ddb3a-794b-11e5-8554-110c1d1fb2d8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:175","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.create(100)"},"variableMap":{"properties":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:138","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.put(\"nameIndex.version\", com.graphhopper.util.Constants.int)"},"status":-2},{"failures":[],"tindex":"154ddb3b-794b-11e5-8554-4720fed5d308","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionAnnotation:81","type":"CtAssignmentImpl","sourcecode":"int = (83 * int) + (this.int)"},"variableMap":{"importance":"minNetworkSize","hash":"minNetworkSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:236","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"status":-2},{"failures":[],"tindex":"154ddb3c-794b-11e5-8554-273f9b5c0ee5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.LevelEdgeFilter:46","type":"CtIfImpl","sourcecode":"if ((int >= (int)) || (int >= (int)))\n    return true;\n"},"variableMap":{"adj":"maxTurnCosts","maxNodes":"maxTurnCosts","base":"maxTurnCosts"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:637","type":"CtReturnImpl","sourcecode":"return (com.graphhopper.routing.util.EncodedValue.getValue(long)) == (int)"},"status":-2},{"failures":[],"tindex":"154e024d-794b-11e5-8554-b74f8fa9059b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:79","type":"CtLocalVariableImpl","sourcecode":"double double = (com.graphhopper.util.AngleCalc.double) - ((double / 180.0) * (java.lang.Math.double))"},"variableMap":{"com.graphhopper.util.AngleCalc.PI_2":"deltaY","azimuth":"tmp","java.lang.Math.PI":"deltaY"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:63","type":"CtLocalVariableImpl","sourcecode":"double double = double * (1.0 - double)"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
{"failureDictionary":{"com.graphhopper.storage.index.BresenhamLineTest.testLineRightDown2":3,"com.graphhopper.util.BitUtilLittleTest.testToBitString":1,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":5,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":0,"com.graphhopper.util.BitUtilLittleTest.testFromBitString":2,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":4},"transformations":[{"failures":[],"tindex":"00ee59b5-7916-11e5-8746-3963a530d5fa","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.StopWatch:79","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.util.Helper.isEmpty(java.lang.String))) {\n    java.lang.String += (java.lang.String) + \" \";\n} "},"variableMap":{"str":"acceptStr","name":"acceptStr"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:252","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.routing.util.EncodingManager) == null) {\n    if (java.lang.String.isEmpty())\n        throw new java.lang.IllegalStateException((\"No EncodingManager was configured. And no one was found in the graph: \" + (com.graphhopper.storage.Directory.getLocation())));\n    \n    int int = 4;\n    if (\"8\".equals(com.graphhopper.storage.StorableProperties.get(\"graph.bytesForFlags\")))\n        int = 8;\n    \n    com.graphhopper.routing.util.EncodingManager = new com.graphhopper.routing.util.EncodingManager(java.lang.String , int);\n} else if ((!(java.lang.String.isEmpty())) && (!(com.graphhopper.routing.util.EncodingManager.toDetailsString().equalsIgnoreCase(java.lang.String)))) {\n    throw new java.lang.IllegalStateException((((((\"Encoding does not match:\\nGraphhopper config: \" + (com.graphhopper.routing.util.EncodingManager.toDetailsString())) + \"\\nGraph: \") + java.lang.String) + \", dir:\") + (com.graphhopper.storage.Directory.getLocation())));\n} "},"status":0},{"failures":[0],"tindex":"00ee59b6-7916-11e5-8746-13bf4883ff13","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:344","type":"CtIfImpl","sourcecode":"if (((double[].int) % 3) != 0)\n    throw new java.lang.IllegalArgumentException(\"list should consist of lat,lon,ele tuples!\");\n"},"variableMap":{"length":"i","list":"elevations"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:353","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(double[][int], double[][int], double[][int])"},"status":-1},{"failures":[],"tindex":"00ee80c7-7916-11e5-8746-774cd321ff8f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.DAType:165","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.toUpperCase()"},"variableMap":{"dataAccess":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.StopWatch:81","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += (java.lang.String) + \" \""},"status":0},{"failures":[1,2],"tindex":"00ee80c8-7916-11e5-8746-2f1684e0b1dc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionList:229","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<\/gpx>\")"},"variableMap":{"track":"sb"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilLittle:125","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('1')"},"status":-1},{"failures":[3],"tindex":"00ee80c9-7916-11e5-8746-7dc78e3bfa7a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:86","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":-1},{"failures":[4],"tindex":"00ee80ca-7916-11e5-8746-738f94e78ba0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:159","type":"CtIfImpl","sourcecode":"if (((com.graphhopper.reader.OSMWay.hasTag(\"tunnel\", \"yes\")) || (com.graphhopper.reader.OSMWay.hasTag(\"bridge\", \"yes\"))) || (com.graphhopper.reader.OSMWay.hasTag(\"highway\", \"steps\"))) {\n} else {\n    double double = 0;\n    double double = 0;\n    double double = 0;\n    double double = 0;\n    double double = com.graphhopper.util.PointList.getElevation(0);\n    double double = com.graphhopper.util.EdgeIteratorState.getDistance();\n    if (java.lang.Double.isInfinite(double)) {\n        java.lang.System.java.io.PrintStream.println((\"infinity distance? for way:\" + (com.graphhopper.reader.OSMWay.getId())));\n        return ;\n    } \n    if (double < 1)\n        return ;\n    \n    double double = (com.graphhopper.util.PointList.getElevation(((com.graphhopper.util.PointList.size()) - 1))) - double;\n    if (double > 0.1) {\n        double = double;\n        double = double;\n    } else if (double < (-0.1)) {\n        double = -double;\n        double = double;\n    } \n    double double = double > 1 ? double / double : 0;\n    double double = double > 1 ? double / double : 0;\n    double double = (double - double) - double;\n    double double = com.graphhopper.routing.util.BikeCommonFlagEncoder.getHighwaySpeed(\"cycleway\");\n    if (com.graphhopper.routing.util.AbstractFlagEncoder.isForward(long)) {\n        double double = com.graphhopper.routing.util.AbstractFlagEncoder.getSpeed(long);\n        double double = 1 + (2 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double double = 1 - (5 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double = (double * (((double * double) + (double * double)) + (1 * double))) / double;\n        long = com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(long, com.graphhopper.util.Helper.com.graphhopper.util.Helper.keepIn(double, ((com.graphhopper.routing.util.BikeCommonFlagEncoder.int) / 2), double));\n    } \n    if (com.graphhopper.routing.util.AbstractFlagEncoder.isBackward(long)) {\n        double double = com.graphhopper.routing.util.Bike2WeightFlagEncoder.getReverseSpeed(long);\n        double double = 1 + (2 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double double = 1 - (5 * com.graphhopper.util.Helper.(com.graphhopper.util.Helper.keepIn(double, 0, 0.2)));\n        double = double * double;\n        double = (double * (((double * double) + (double * double)) + (1 * double))) / double;\n        long = com.graphhopper.routing.util.Bike2WeightFlagEncoder.setReverseSpeed(long, com.graphhopper.util.Helper.com.graphhopper.util.Helper.keepIn(double, ((com.graphhopper.routing.util.BikeCommonFlagEncoder.int) / 2), double));\n    } \n}"},"status":-1},{"failures":[5],"tindex":"00ee80cb-7916-11e5-8746-3188da198b4d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:509","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('\\n')"},"variableMap":{"sb":"output"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:251","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<gh:azimuth>\").append(com.graphhopper.util.Helper.round2(double)).append(\"<\/gh:azimuth>\")"},"status":-1},{"failures":[],"tindex":"00eea7dc-7916-11e5-8746-55310e22e2d8","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.EdgeWrapper:83","type":"CtIfImpl","sourcecode":"if (int < 1)\n    throw new java.lang.IllegalStateException(\"You cannot save a reference with values smaller 1. 0 is reserved\");\n"},"variableMap":{"ref":"MAGIC_INT"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:300","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setHeader(0, int)"},"status":-2},{"failures":[],"tindex":"00eea7dd-7916-11e5-8746-6b2c728c60f0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMNode:88","type":"CtAssignmentImpl","sourcecode":"java.lang.Object = null"},"status":-2},{"failures":[],"tindex":"00eea7de-7916-11e5-8746-2b7301300495","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.DAType:152","type":"CtAssignmentImpl","sourcecode":"java.lang.String = \"UNSAFE\""},"variableMap":{"str":"entryVal"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:135","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String"},"status":-2},{"failures":[],"tindex":"00eea7df-7916-11e5-8746-25eeeb522986","series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:227","type":"CtOperatorAssignmentImpl","sourcecode":"double /= 2"},"variableMap":{"midLat":"minLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:177","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.shapes.BBox.double = com.graphhopper.util.Helper.intToDegree(com.graphhopper.storage.DataAccess.getHeader((3 * 4)))"},"status":-2},{"failures":[],"tindex":"00eea7e0-7916-11e5-8746-bfe0edfe5862","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:133","type":"CtInvocationImpl","sourcecode":"java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.remove(com.graphhopper.routing.AStar.AStarEdge)"},"status":-2},{"failures":[],"tindex":"00eea7e1-7916-11e5-8746-978292fb89e1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:176","type":"CtLocalVariableImpl","sourcecode":"double double = double + double"},"variableMap":{"gradient":"dist2goal","yend":"dist2goal"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BeelineWeightApproximator:46","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.routing.util.Weighting.getMinWeight(double)"},"status":-2},{"failures":[],"tindex":"00eea7e2-7916-11e5-8746-2d48721a9b9a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:172","type":"CtLocalVariableImpl","sourcecode":"long long = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHTreeMapComposed:76","type":"CtLocalVariableImpl","sourcecode":"long long = java.util.TreeMap<java.lang.Long, java.lang.Integer>.firstEntry().getKey()"},"status":-2},{"failures":[],"tindex":"00eea7e3-7916-11e5-8746-bbd3e7baa0d8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:307","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.BigLongIntMap:61","type":"CtReturnImpl","sourcecode":"return com.graphhopper.coll.TLongIntHashMap[][int].put(long, int)"},"status":-2},{"failures":[],"tindex":"00eea7e4-7916-11e5-8746-b7ba75416877","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:367","type":"CtIfImpl","sourcecode":"if (int > int)\n    throw new java.lang.IllegalArgumentException(\"from must be smaller or equals to end\");\n"},"variableMap":{"from":"current","end":"current"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DepthFirstSearch:43","type":"CtWhileImpl","sourcecode":"while ((com.graphhopper.util.TIntArrayStack.size()) > 0) {\n    int = com.graphhopper.util.TIntArrayStack.pop();\n    if ((!(com.graphhopper.coll.GHBitSet.contains(int))) && com.graphhopper.util.XFirstSearch.(goFurther(int))) {\n        com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int);\n        while (com.graphhopper.util.EdgeIterator.next()) {\n            int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n            if (com.graphhopper.util.XFirstSearch.checkAdjacent(com.graphhopper.util.EdgeIterator)) {\n                com.graphhopper.util.TIntArrayStack.push(int);\n            } \n        }\n        com.graphhopper.coll.GHBitSet.add(int);\n    } \n}"},"status":-2},{"failures":[],"tindex":"00eecef5-7916-11e5-8746-cb84248081de","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:1125","type":"CtIfImpl","sourcecode":"if ((long) < 0)\n    throw new java.lang.IllegalStateException(\"call next before detaching\");\n"},"variableMap":{"edgePointer":"hash"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:195","type":"CtIfImpl","sourcecode":"if (int < (int))\n    long <<= 1;\nelse\n    break;\n"},"status":-2},{"failures":[],"tindex":"00eecef6-7916-11e5-8746-83dd3987bfb8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Unzipper:69","type":"CtLocalVariableImpl","sourcecode":"double double = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:169","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.PointList.getLongitude(0)"},"status":-2},{"failures":[],"tindex":"00eecef7-7916-11e5-8746-e9d51902a602","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:416","type":"CtReturnImpl","sourcecode":"return 80"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:148","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.PointList.getElevation(0)"},"status":-2},{"failures":[],"tindex":"00eecef8-7916-11e5-8746-8321bbfc5771","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:108","type":"CtReturnImpl","sourcecode":"return double + 0.1"},"variableMap":{"val":"java.lang.Double.POSITIVE_INFINITY"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:646","type":"CtIfImpl","sourcecode":"if ((int) == 1)\n    return (long & (long)) == 0 ? 0 : java.lang.Double.double;\n"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
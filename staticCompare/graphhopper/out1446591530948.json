{"failureDictionary":{"com.graphhopper.storage.index.BresenhamLineTest.testBresenhamBug":82,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":62,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":39,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":26,"com.graphhopper.reader.OSMReaderTest.testFerry":67,"com.graphhopper.storage.GraphHopperStorageCHTest.testDoThrowExceptionIfDimDoesNotMatch":89,"com.graphhopper.storage.index.BresenhamLineTest.testBresenhamHorizontal":81,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":106,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":65,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":58,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":59,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":23,"com.graphhopper.geohash.SpatialKeyAlgoTest.testOddBits":103,"com.graphhopper.reader.OSMReaderTest.testWithBounds":74,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":77,"com.graphhopper.coll.CompressedArrayTest.testCompress":102,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":35,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":104,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":97,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":63,"com.graphhopper.GraphHopperTest.testPrepare":48,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":61,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":30,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":86,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":109,"com.graphhopper.util.BitUtilLittleTest.testToBitString":110,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijectionBug2":105,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":28,"com.graphhopper.reader.OSMReaderTest.testOneWay":76,"com.graphhopper.storage.index.BresenhamLineTest.testBresenhamLineRightDown":84,"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":91,"com.graphhopper.GraphHopperAPITest.testDisconnected179":96,"com.graphhopper.geohash.SpatialKeyAlgoTest.testNoFurtherIterationIfBitsIs1":107,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":66,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":22,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":0,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":100,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":68,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":69,"com.graphhopper.storage.index.BresenhamLineTest.testRealBresenham":83,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":16,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":49,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":2,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":46,"com.graphhopper.GraphHopperTest.testLoadOSM":52,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":29,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":41,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":11,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":24,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":45,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":18,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":44,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":43,"com.graphhopper.reader.OSMReaderTest.testSort":56,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":78,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":42,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":34,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":73,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":94,"com.graphhopper.reader.OSMReaderTest.testMain":55,"com.graphhopper.util.DistanceCalcEarthTest.testPrecisionBug":36,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":90,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":80,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":15,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijection":108,"com.graphhopper.util.BitUtilLittleTest.testFromBitString":111,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":87,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":3,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":19,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":12,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":31,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":21,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":8,"com.graphhopper.util.DistanceCalcEarthTest.testPrecisionBug2":37,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":70,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":99,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":98,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":75,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":20,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":25,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":92,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":60,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointCount":38,"com.graphhopper.util.DouglasPeuckerTest.testPathSimplify":40,"com.graphhopper.GraphHopperTest.testFootAndCar":50,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":88,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":27,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":5,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNoErrorOnEdgeCase_lastIndex":4,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":32,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":10,"com.graphhopper.storage.StorablePropertiesTest.testLoad":79,"com.graphhopper.GraphHopperTest.testPrepareOnly":64,"com.graphhopper.coll.CompressedArrayTest.testCompress2":101,"com.graphhopper.GraphHopperTest.testVia":47,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":112,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":53,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":95,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":72,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":17,"com.graphhopper.GraphHopperAPITest.testLoad":6,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":51,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":9,"com.graphhopper.GraphHopperTest.testFootOnly":54,"com.graphhopper.storage.index.BresenhamLineTest.testBresenhamLineRightUp":85,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":13,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":71,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":1,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":14,"com.graphhopper.reader.OSMReaderTest.testBarriers":57,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":7,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":33,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":93},"transformations":[{"failures":[],"tindex":"72e37f13-827e-11e5-b695-75cfaf04daed","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PMap:34","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PMap.this(5)"},"variableMap":{"this":"properties"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:66","type":"CtAssignmentImpl","sourcecode":"this.com.graphhopper.util.PMap = com.graphhopper.util.PMap"},"status":-2},{"failures":[],"tindex":"72e3a624-827e-11e5-b695-f70dce132182","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:180","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    int int = ((int)((java.lang.Math.log(int)) / (java.lang.Math.log(2))));\n    int = java.lang.Math.max(((int)(java.lang.Math.pow(2, int))), com.graphhopper.storage.AbstractDataAccess.int);\n} "},"variableMap":{"com.graphhopper.storage.AbstractDataAccess.SEGMENT_SIZE_MIN":"nodes","bytes":"nodes","segmentSizeInBytes":"nodes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:217","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n    com.graphhopper.coll.GHTreeMapComposed.insert(int, int);\n}"},"status":0},{"failures":[],"tindex":"72e3a625-827e-11e5-b695-6353d5f11ee1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.ViaInstruction:34","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Instruction.setTime(com.graphhopper.util.Instruction.getTime())"},"status":0},{"failures":[],"tindex":"72e3a626-827e-11e5-b695-2ded6cbbfb59","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.NativeFSLockFactory:105","type":"CtIfImpl","sourcecode":"if (!(java.io.File.mkdirs()))\n    throw new java.lang.RuntimeException((((\"Directory \" + (java.io.File)) + \" does not exist and cannot created to place lock file there: \") + (java.io.File)));\n"},"variableMap":{"lockFile":"toFolder","lockDir":"toFolder"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Unzipper:53","type":"CtIfImpl","sourcecode":"if (!(java.io.File.exists()))\n    java.io.File.mkdirs();\n"},"status":0},{"failures":[],"tindex":"72e3cd37-827e-11e5-b695-c9b047441060","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:461","type":"CtReturnImpl","sourcecode":"return (java.lang.String + \", \") + java.lang.String"},"variableMap":{"pavementName":"str","wayTypeName":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.DAType:160","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"status":0},{"failures":[0,1,2,3,4,5],"tindex":"72e3cd38-827e-11e5-b695-e76eefdee7bd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:189","type":"CtOperatorAssignmentImpl","sourcecode":"int *= 2"},"variableMap":{"index":"lonSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:148","type":"CtAssignmentImpl","sourcecode":"int = int = ((int)(java.lang.Math.sqrt(int)))"},"status":-1},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,0,1,2,3,5,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"tindex":"72e3cd39-827e-11e5-b695-dd54f4881ac4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:58","type":"CtLocalVariableImpl","sourcecode":"double double = double * (1.0 - double)"},"variableMap":{"deltaX":"toLat","tmp":"fromLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistancePlaneProjection:64","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Math.java.lang.Math.toRadians((double - double))"},"status":-1},{"failures":[],"tindex":"72e3cd3a-827e-11e5-b695-c5ec8192a5a7","series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:402","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    throw new java.lang.IllegalArgumentException(\"graphhopper location cannot be null\");\n"},"variableMap":{"ghLocation":"osmFile"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:511","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.util.Helper.isEmpty(java.lang.String)))\n    java.lang.String = java.lang.String;\n"},"status":0},{"failures":[],"tindex":"72e3cd3b-827e-11e5-b695-3f535d59df93","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.TranslationMap:250","type":"CtIfImpl","sourcecode":"if (((java.lang.String.isEmpty()) || (java.lang.String.startsWith(\"//\"))) || (java.lang.String.startsWith(\"#\")))\n    continue;\n"},"variableMap":{"line":"fileDetails"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:249","type":"CtIfImpl","sourcecode":"if (!boolean) {\n    byte[] byte[] = new byte[(2 * (int)) * (int)];\n    com.graphhopper.storage.DataAccess.create(byte[].int);\n    try {\n        java.lang.String java.lang.String = (((java.lang.String) + \"/\") + java.lang.String) + \".hgt.zip\";\n        java.io.File java.io.File = new java.io.File(java.io.File , new java.io.File(java.lang.String).getName());\n        java.io.InputStream java.io.InputStream;\n        if (!(java.io.File.exists())) {\n            for (int int = 0 ; int < 3 ; int++) {\n                try {\n                    com.graphhopper.util.Downloader.downloadFile(java.lang.String, java.io.File.getAbsolutePath());\n                    break;\n                } catch (java.net.SocketTimeoutException ex) {\n                    java.lang.Thread.sleep(2000);\n                    continue;\n                } catch (java.io.FileNotFoundException ex) {\n                    java.lang.String = (((java.lang.String) + \"/\") + java.lang.String) + \"hgt.zip\";\n                    continue;\n                }\n            }\n        } \n        java.io.InputStream = new java.io.FileInputStream(java.io.File);\n        java.util.zip.ZipInputStream java.util.zip.ZipInputStream = new java.util.zip.ZipInputStream(java.io.InputStream);\n        java.util.zip.ZipInputStream.getNextEntry();\n        java.io.BufferedInputStream java.io.BufferedInputStream = new java.io.BufferedInputStream(java.util.zip.ZipInputStream);\n        int int;\n        while ((int = java.io.BufferedInputStream.read(byte[])) > 0) {\n            for (int int = 0 ; int < int ; int += 2) {\n                short short = com.graphhopper.reader.dem.SRTMProvider.com.graphhopper.util.BitUtil.toShort(byte[], int);\n                if ((short < (-1000)) || (short > 12000))\n                    short = java.lang.Short.short;\n                \n                com.graphhopper.storage.DataAccess.setShort(int, short);\n            }\n        }\n        com.graphhopper.storage.DataAccess.flush();\n    } catch (java.lang.Exception ex) {\n        throw new java.lang.RuntimeException(java.lang.Exception);\n    }\n} "},"status":-2},{"failures":[63,64,65,47,48,49,51,52,66,53,54,67,55,56,57,68,69,70,71,72,73,74,75,76],"tindex":"72e3f44c-827e-11e5-b695-d579ace7c3aa","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:990","type":"CtIfImpl","sourcecode":"if ((int) == (com.graphhopper.storage.EdgeAccess.int))\n    throw new java.lang.IllegalStateException(((\"content of edgeId \" + (int)) + \" is marked as invalid - ie. the edge is already removed!\"));\n"},"variableMap":{"baseNode":"nodeId","edgeId":"nodeId","com.graphhopper.storage.EdgeAccess.NO_NODE":"nodeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.PillarInfo:75","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.PillarInfo._setNode(int, double, double, double)"},"status":-1},{"failures":[],"tindex":"72e3f44d-827e-11e5-b695-e1af9d5b1f3f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:447","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:324","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.LocationIndexTree.flush()"},"status":0},{"failures":[77,78,79],"tindex":"72e3f44e-827e-11e5-b695-7deb1d1c369c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:307","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += \", \""},"variableMap":{"str":"location"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphBuilder:56","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = java.lang.String"},"status":-1},{"failures":[6,9,10,11,13,14,80,15,16,17,18,19,20,81,82,83,84,85,22,23,24,26,27,86,28,29,30,31,32,33,79,41,42,43,44,45,47,48,49,50,51,52,53,55,56,59,60],"tindex":"72e3f44f-827e-11e5-b695-d3dc7193d2d9","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:1056","type":"CtIfImpl","sourcecode":"if (((int) == (int)) || ((int) == (com.graphhopper.util.EdgeIterator.int)))\n    throw new java.lang.IllegalStateException(((((\"call next before detaching or setEdgeId (edgeId:\" + (int)) + \" vs. next \") + (int)) + \")\"));\n"},"variableMap":{"com.graphhopper.util.EdgeIterator.NO_EDGE":"dLon","edgeId":"err","nextEdgeId":"tmpErr"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:139","type":"CtIfImpl","sourcecode":"if (int < int) {\n    int += int;\n    int += int;\n} "},"status":-1},{"failures":[79],"tindex":"72e41b60-827e-11e5-b695-83c318e848cd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:995","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.util.EdgeIterator.int"},"variableMap":{"com.graphhopper.util.EdgeIterator.NO_EDGE":"lineNo","nextEdgeId":"lineNo"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.PrinctonReader:54","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[79],"tindex":"72e41b61-827e-11e5-b695-05dc3717aaf6","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:63","type":"CtIfImpl","sourcecode":"if ((int) >= (int)) {\n    (int)++;\n    int = 0;\n} "},"variableMap":{"currentBucket":"toSize","currentIndex":"size","bucketSize":"toSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:260","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(int[], int, ((int) + 1), 0)"},"status":-1},{"failures":[79,87,88,89,90,91,92,93,94,95,64,52,66,53],"tindex":"72e41b62-827e-11e5-b695-b3db15157424","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:133","type":"CtIfImpl","sourcecode":"if (java.lang.String.contains(\"|\")) {\n    java.lang.String = java.lang.String;\n    java.lang.String = java.lang.String.split(\"\\\\|\")[0];\n} "},"variableMap":{"entry":"dim","entryVal":"dim"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:273","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.loadExisting(java.lang.String)"},"status":-1},{"failures":[6,96,7,9,97,10,98,11,12,14,15,16,19,21,22,99,23,100,24,25,27,28,29,32,34,79,101,102,103,104,105,106,107,108,109,47,48,49,50,51,52,53,54,55,56,57,58],"tindex":"72e41b63-827e-11e5-b695-151e5772f9aa","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:672","type":"CtIfImpl","sourcecode":"if ((double != 0) || (java.lang.Double.isInfinite(double)))\n    throw new java.lang.IllegalArgumentException(\"Restricted turn can only have infinite costs (or use 0)\");\n"},"variableMap":{"costs":"lat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:222","type":"CtIfImpl","sourcecode":"if ((long & long) != 0) {\n    double += double;\n} "},"status":-1},{"failures":[79,110,111],"tindex":"72e44274-827e-11e5-b695-8fa5374f50ac","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilLittle:127","type":"CtOperatorAssignmentImpl","sourcecode":"byte <<= 1"},"status":-1},{"failures":[79,38,39,40],"tindex":"72e44275-827e-11e5-b695-e1c4b9d36b39","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:180","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    int int = ((int)((java.lang.Math.log(int)) / (java.lang.Math.log(2))));\n    int = java.lang.Math.max(((int)(java.lang.Math.pow(2, int))), com.graphhopper.storage.AbstractDataAccess.int);\n} "},"variableMap":{"com.graphhopper.storage.AbstractDataAccess.SEGMENT_SIZE_MIN":"segments","bytes":"start","segmentSizeInBytes":"start"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:73","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    int += com.graphhopper.util.DouglasPeucker.simplify(com.graphhopper.util.PointList, int, java.lang.Math.min((int - 1), (int + int)));\n    int += int;\n}"},"status":-1},{"failures":[79,112],"tindex":"72e44276-827e-11e5-b695-d19cecee64e9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:242","type":"CtAssignmentImpl","sourcecode":"double = (double * (((double * double) + (double * double)) + (1 * double))) / double"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"72e3a626-827e-11e5-b695-2ded6cbbfb59","diffs":[{"methodsDiff":{"delete":["java.io.File.mkdirs"]},"branchesDiff":{"delete":["t0"]},"type":"staticDiff"},{"branches":{"com.graphhopper.util.HelperTest.testUnzip":["com.graphhopper.util.Unzipper_void_unzip(java.io.InputStream,java.io.File,com.graphhopper.util.ProgressListener).e1","com.graphhopper.util.Unzipper_void_unzip(java.io.InputStream,java.io.File,com.graphhopper.util.ProgressListener).t1"]},"type":"branch"}]},{"transformation":"72e3f44d-827e-11e5-b695-e1af9d5b1f3f","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.index.LocationIndexTree.flush"]},"type":"staticDiff"},{"branches":{"com.graphhopper.reader.OSMReaderTest.testNegativeIds":["com.graphhopper.storage.index.LocationIndexTree_void_flush().b"],"com.graphhopper.GraphHopperAPITest.testLoad":["com.graphhopper.storage.AbstractDataAccess_void_setHeader(int,int).b","com.graphhopper.storage.RAMDataAccess_void_flush().e1","com.graphhopper.storage.RAMDataAccess_void_flush().b","com.graphhopper.storage.index.LocationIndexTree_void_flush().b","com.graphhopper.storage.RAMDataAccess_void_flush().t2"],"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":["com.graphhopper.storage.AbstractDataAccess_void_setHeader(int,int).b","com.graphhopper.storage.RAMDataAccess_void_flush().e1","com.graphhopper.storage.RAMDataAccess_void_flush().b","com.graphhopper.storage.index.LocationIndexTree_void_flush().b","com.graphhopper.storage.RAMDataAccess_void_flush().t2"],"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":["com.graphhopper.storage.AbstractDataAccess_void_setHeader(int,int).b","com.graphhopper.storage.RAMDataAccess_void_flush().e1","com.graphhopper.storage.RAMDataAccess_void_flush().b","com.graphhopper.storage.index.LocationIndexTree_void_flush().b","com.graphhopper.storage.RAMDataAccess_void_flush().t2"],"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":["com.graphhopper.storage.AbstractDataAccess_void_setHeader(int,int).b","com.graphhopper.storage.RAMDataAccess_void_flush().e1","com.graphhopper.storage.RAMDataAccess_void_flush().b","com.graphhopper.storage.index.LocationIndexTree_void_flush().b","com.graphhopper.storage.RAMDataAccess_void_flush().t2"],"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":["com.graphhopper.storage.AbstractDataAccess_void_setHeader(int,int).b","com.graphhopper.storage.RAMDataAccess_void_flush().e1","com.graphhopper.storage.RAMDataAccess_void_flush().b","com.graphhopper.storage.index.LocationIndexTree_void_flush().b","com.graphhopper.storage.RAMDataAccess_void_flush().t2"]},"type":"branch"}]}]}
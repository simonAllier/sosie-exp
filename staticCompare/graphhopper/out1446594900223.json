{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":243,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":270,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":278,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":38,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":144,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":114,"com.graphhopper.reader.OSMReaderTest.testFerry":77,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":192,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":193,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":267,"com.graphhopper.routing.QueryGraphTest.testOneWay":277,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":47,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":105,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":62,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":34,"com.graphhopper.reader.OSMReaderTest.testWithBounds":4,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":122,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":209,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":272,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":210,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testNoErrorOnEdgeCase_lastIndex":29,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":252,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":15,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":54,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":134,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":104,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":138,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":260,"com.graphhopper.GraphHopperTest.testPrepare":63,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":132,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":74,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":171,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":182,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":248,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":275,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":229,"com.graphhopper.util.InstructionListTest.testWayList":200,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":199,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":237,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":205,"com.graphhopper.GraphHopperAPITest.testDisconnected179":76,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":88,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":214,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":119,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":67,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBounds":51,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":32,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":211,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":230,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":235,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":35,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":225,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":282,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":82,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":213,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":95,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":219,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":125,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":133,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":64,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":140,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":164,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":168,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":166,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":165,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":263,"com.graphhopper.GraphHopperTest.testLoadOSM":66,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":43,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":261,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":18,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":36,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":91,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":185,"com.graphhopper.reader.OSMReaderTest.testSort":79,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":240,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":85,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":212,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":52,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":257,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":23,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":24,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":148,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":246,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":274,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":280,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":218,"com.graphhopper.routing.PathTest.testWayList":222,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":28,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":121,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":99,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":247,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":176,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":228,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":33,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":236,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":269,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":17,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":101,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":153,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":149,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":154,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":175,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":30,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":181,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":73,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointCount":5,"com.graphhopper.GraphHopperTest.testFailsForMissingParameters":285,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":224,"com.graphhopper.util.GHUtilityTest.testSort":196,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":120,"com.graphhopper.storage.GraphStorageViaMMapTest.testBounds":11,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":40,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":276,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":233,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":232,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":169,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":145,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":162,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":135,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":89,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":273,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":217,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":68,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":184,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":142,"com.graphhopper.GraphHopperAPITest.testLoad":75,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":65,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":8,"com.graphhopper.routing.util.FootFlagEncoderTest.testBarrierAccess":286,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":179,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":208,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":173,"com.graphhopper.reader.OSMReaderTest.testBarriers":80,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":150,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":215,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":128,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":70,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":12,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":117,"com.graphhopper.util.GHUtilityTest.testCopy":195,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":234,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":6,"com.graphhopper.routing.PathTest.testFindInstruction":223,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":226,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":151,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":204,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":158,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":178,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":71,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":143,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":72,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":167,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":183,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":242,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":110,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":159,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":254,"com.graphhopper.reader.PrinctonReaderTest.testRead":281,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":190,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":98,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":155,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":113,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":90,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":170,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":259,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":266,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":160,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":106,"com.graphhopper.storage.GraphHopperStorageCHTest.testBounds":10,"com.graphhopper.util.InstructionListTest.testWayList2":201,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":21,"com.graphhopper.reader.OSMReaderTest.testFoot":78,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":131,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":44,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":127,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":279,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":41,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":191,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":42,"com.graphhopper.reader.OSMReaderTest.testOneWay":87,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":93,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":180,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":216,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":96,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":188,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":187,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":123,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":157,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":258,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":124,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":172,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":177,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":81,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":221,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":253,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":25,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":245,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":156,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":107,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":250,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":262,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":136,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":251,"com.graphhopper.routing.PathBidirRefTest.testExtract":264,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":61,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":203,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":206,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":39,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":56,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":130,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":60,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":27,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":59,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":58,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":129,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":57,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":49,"com.graphhopper.util.GHUtilityTest.testSort2":194,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":241,"com.graphhopper.reader.OSMReaderTest.testMain":2,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":111,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":161,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":109,"com.graphhopper.routing.PathBidirRefTest.testExtract2":265,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":108,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":141,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":227,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":19,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":45,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":147,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":207,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":31,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":186,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":102,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":103,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":13,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":83,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":163,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":86,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":92,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":137,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":244,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":256,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":37,"com.graphhopper.storage.GraphHopperStorageTest.testClone":174,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":112,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":189,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":283,"com.graphhopper.util.DouglasPeuckerTest.testPathSimplify":7,"com.graphhopper.GraphHopperTest.testFootAndCar":1,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":9,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":118,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":116,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":97,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":255,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":46,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":16,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":126,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":239,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":152,"com.graphhopper.util.GHUtilityTest.testSortDirected":197,"com.graphhopper.storage.StorablePropertiesTest.testLoad":284,"com.graphhopper.GraphHopperTest.testPrepareOnly":55,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":100,"com.graphhopper.GraphHopperTest.testVia":0,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":146,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":268,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":115,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":238,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":84,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":26,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":14,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":271,"com.graphhopper.storage.GraphHopperStorageTest.testBounds":53,"com.graphhopper.GraphHopperTest.testFootOnly":69,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":202,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":20,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":3,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":139,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":22,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":220,"com.graphhopper.util.InstructionListTest.testFind":198,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":231,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":249,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":48,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":50,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":94},"transformations":[{"failures":[0,1,2,3,4],"tindex":"4b21c14d-8286-11e5-b3d0-fd9cabc68af1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:96","type":"CtAssignmentImpl","sourcecode":"double = double + (2 * (java.lang.Math.double))"},"variableMap":{"resultOrientation":"prevLon","orientation":"lon","java.lang.Math.PI":"lon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:773","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.DistanceCalc.calcDist(double, double, double, double)"},"status":-1},{"failures":[],"tindex":"4b21e85e-8286-11e5-b3d0-c70871c292fa","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:165","type":"CtLocalVariableImpl","sourcecode":"int int = int * 2"},"variableMap":{"i":"currentBucket"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:71","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)((int) * 1.5F))"},"status":-2},{"failures":[5,6,7],"tindex":"4b21e85f-8286-11e5-b3d0-535052d25b7e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:63","type":"CtIfImpl","sourcecode":"if ((int) >= (int)) {\n    (int)++;\n    int = 0;\n} "},"variableMap":{"currentBucket":"removed","currentIndex":"removed","bucketSize":"removed"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:122","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.trimToSize(((com.graphhopper.util.PointList.getSize()) - int))"},"status":-1},{"failures":[],"tindex":"4b21e860-8286-11e5-b3d0-5dd2e48e3682","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1121","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.GraphHopperStorage.getProperties()"},"status":0},{"failures":[],"tindex":"4b220f71-8286-11e5-b3d0-f1b63d97d8d1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:915","type":"CtLocalVariableImpl","sourcecode":"long long = -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHTreeMapComposed:76","type":"CtLocalVariableImpl","sourcecode":"long long = java.util.TreeMap<java.lang.Long, java.lang.Integer>.firstEntry().getKey()"},"status":-2},{"failures":[8],"tindex":"4b220f72-8286-11e5-b3d0-79b237fe8796","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:92","type":"CtIfImpl","sourcecode":"if (int >= (int))\n    throw new java.lang.ArrayIndexOutOfBoundsException((\"index has to be smaller than size \" + (int)));\n"},"variableMap":{"size":"polledNode","index":"polledNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:318","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.GHTreeMapComposed.insert(int, int)"},"status":-1},{"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,0,63,64,1,65,66,67,68,69,70,71,72,73,74,75,76,77,78,2,79,80,81,82,83,3,84,85,4,86,87],"tindex":"4b220f73-8286-11e5-b3d0-1792b6c2665c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:45","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.AngleCalc.double"},"variableMap":{"angle":"maxLat","com.graphhopper.util.AngleCalc.PI3_4":"maxLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.shapes.BBox:94","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-1},{"failures":[88,89,90,9,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,12,13,14,16,17,18,19,20,22,23,24,25,26,27,28,30,31,32,34,35,36,37,38,40,41,42,43,44,45,46,48,49,142,143,144,145,146,147,50,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,52,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,54,55,56,57,58,59,60,61,62,0,63,64,1,65,66,67,68,69,70,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,71,237,238,239,240,72,73,241,242,74,243,244,245,8,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,75,77,78,2,79,80,81,82,83,3,84,85,4,87,280,281,282],"tindex":"4b220f74-8286-11e5-b3d0-6fa15bf78fda","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:50","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"status":-1},{"failures":[],"tindex":"4b223685-8286-11e5-b3d0-93a3a779c4e5","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:531","type":"CtAssignmentImpl","sourcecode":"int = (-int) - 3"},"variableMap":{"id":"tmp"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:184","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Math.max(((int)(java.lang.Math.pow(2, int))), com.graphhopper.storage.AbstractDataAccess.int)"},"status":0},{"failures":[283],"tindex":"4b223686-8286-11e5-b3d0-ab6ac1397bef","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PMap:83","type":"CtTryImpl","sourcecode":"try {\n    return java.lang.Long.parseLong(java.lang.String);\n} catch (java.lang.Exception ex) {\n}"},"variableMap":{"str":"highwayValue"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:200","type":"CtIfImpl","sourcecode":"if (\"track\".equals(java.lang.String)) {\n    java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"tracktype\");\n    if ((((java.lang.String != null) && (!(java.lang.String.equals(\"grade1\")))) && (!(java.lang.String.equals(\"grade2\")))) && (!(java.lang.String.equals(\"grade3\"))))\n        return 0;\n    \n} "},"status":-1},{"failures":[],"tindex":"4b223687-8286-11e5-b3d0-bbd4fc766a2f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:956","type":"CtOperatorAssignmentImpl","sourcecode":"int += int + 1"},"variableMap":{"arrayLength":"val","maxGeoRef":"val"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:432","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Integer.parseInt(java.lang.String)"},"status":-2},{"failures":[],"tindex":"4b223688-8286-11e5-b3d0-57fb72ed1817","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:131","type":"CtIfImpl","sourcecode":"if (int > 100)\n    throw new java.lang.IllegalArgumentException(\"lazyUpdates has to be in [0, 100], to disable it use 0\");\n"},"variableMap":{"lazyUpdates":"iteration"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:730","type":"CtForImpl","sourcecode":"for (int int = (-int) + 1 ; int <= (int - 1) ; int++) {\n    double double = double + (int * (double));\n    double double = double - (int * (double));\n    double double = double + (int * (double));\n    com.graphhopper.storage.index.LocationIndexTree.findNetworkEntriesSingleRegion(gnu.trove.set.hash.TIntHashSet, double, double);\n    com.graphhopper.storage.index.LocationIndexTree.findNetworkEntriesSingleRegion(gnu.trove.set.hash.TIntHashSet, double, double);\n}"},"status":0},{"failures":[284,56,57,58,59,60,61,63,64,1,285,69,75,76,77,78,2,79,80,81,82,83,3,84,85,4,86,87],"tindex":"4b225d99-8286-11e5-b3d0-d90bd5b2380e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:137","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"4b225d9a-8286-11e5-b3d0-8fb7ce5f4a0e","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:103","type":"CtLocalVariableImpl","sourcecode":"long long"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDMap:111","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.coll.OSMIDMap.com.graphhopper.util.BitUtil.toLong(byte[])"},"status":-2},{"failures":[],"tindex":"4b225d9b-8286-11e5-b3d0-8383cd5e1066","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:520","type":"CtReturnImpl","sourcecode":"return com.graphhopper.reader.OSMReader.int"},"variableMap":{"com.graphhopper.reader.OSMReader.EMPTY":"length"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:577","type":"CtReturnImpl","sourcecode":"return double[].int"},"status":-2},{"failures":[],"tindex":"4b225d9c-8286-11e5-b3d0-a9d475021173","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:317","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.CHGraphImpl.CHEdgeIteratorImpl.checkShortcut(true, \"setSkippedEdges\")"},"variableMap":{"this":"mainEdgeState"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:57","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.Path.addEdge(com.graphhopper.util.CHEdgeIteratorState.getEdge())"},"status":-2},{"failures":[],"tindex":"4b225d9d-8286-11e5-b3d0-d1246aa30d43","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:191","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(5)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1061","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.QueryGraph.clearUnfavoredStatus()"},"status":-2},{"failures":[],"tindex":"4b225d9e-8286-11e5-b3d0-298b20ec87f1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:807","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.ensureCapacity((long + 4))"},"variableMap":{"tmp":"doubleSize","originalEdges":"keys"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDMap:81","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.ensureCapacity((long + 8))"},"status":0},{"failures":[],"tindex":"4b2284af-8286-11e5-b3d0-5f4290377349","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:236","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.inPlaceNodeRemove(int)"},"variableMap":{"delNodes":"nodes","baseGraph":"g"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:50","type":"CtTryImpl","sourcecode":"try {\n    com.graphhopper.util.EdgeExplorer com.graphhopper.util.EdgeExplorer = com.graphhopper.storage.Graph.createEdgeExplorer();\n    for ( ; int < int ; int++) {\n        double double = com.graphhopper.storage.NodeAccess.getLatitude(int);\n        if ((double > 90) || (double < (-90)))\n            java.util.List<java.lang.String>.add((\"latitude is not within its bounds \" + double));\n        \n        double double = com.graphhopper.storage.NodeAccess.getLongitude(int);\n        if ((double > 180) || (double < (-180)))\n            java.util.List<java.lang.String>.add((\"longitude is not within its bounds \" + double));\n        \n        com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int);\n        while (com.graphhopper.util.EdgeIterator.next()) {\n            if ((com.graphhopper.util.EdgeIterator.getAdjNode()) >= int) {\n                java.util.List<java.lang.String>.add(((((\"edge of \" + int) + \" has a node \") + (com.graphhopper.util.EdgeIterator.getAdjNode())) + \" greater or equal to getNodes\"));\n            } \n            if ((com.graphhopper.util.EdgeIterator.getAdjNode()) < 0) {\n                java.util.List<java.lang.String>.add((((\"edge of \" + int) + \" has a negative node \") + (com.graphhopper.util.EdgeIterator.getAdjNode())));\n            } \n        }\n    }\n} catch (java.lang.Exception ex) {\n    throw new java.lang.RuntimeException((\"problem with node \" + int) , java.lang.Exception);\n}"},"status":-2},{"failures":[286],"tindex":"4b2284b0-8286-11e5-b3d0-97debe7c08c4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:708","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException(\"graph is already successfully loaded\");\n"},"variableMap":{"fullyLoaded":"locked"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:242","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMNode.hasTag(\"locked\", \"yes\"))\n    boolean = true;\n"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"4b21e860-8286-11e5-b3d0-5dd2e48e3682","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.GraphHopperStorage.getProperties"]},"type":"staticDiff"}]},{"transformation":"4b225d9e-8286-11e5-b3d0-298b20ec87f1","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.DataAccess.ensureCapacity"]},"type":"staticDiff"}]}]}
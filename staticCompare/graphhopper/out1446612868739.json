{"failureDictionary":{"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAccess":11,"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":56,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":51,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":121,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":25,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":66,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":20,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":55,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":89,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":84,"com.graphhopper.routing.util.CarFlagEncoderTest.testSwapDir":112,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":130,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":74,"com.graphhopper.routing.util.EncodingManagerTest.testToDetailsStringIncludesEncoderVersionNumber":17,"com.graphhopper.storage.GraphHopperStorageCHTest.testFlags":41,"com.graphhopper.reader.OSMReaderTest.testWithBounds":155,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":47,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":142,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAccess":15,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":19,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":29,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":90,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":14,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":30,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":140,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":83,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":54,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":146,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":10,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":71,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":45,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":147,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":62,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":70,"com.graphhopper.util.InstructionListTest.testWayList2":94,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":132,"com.graphhopper.reader.OSMReaderTest.testFoot":33,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":85,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":137,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":60,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":58,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":124,"com.graphhopper.util.InstructionListTest.testWayList":1,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":91,"com.graphhopper.reader.OSMReaderTest.testOneWay":154,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":68,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":93,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":128,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":38,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":21,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":26,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":35,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":115,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":40,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":145,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":125,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":156,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":57,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":79,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":120,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":32,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":34,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":141,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":134,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":109,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":63,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":46,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":103,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":106,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":138,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":148,"com.graphhopper.routing.util.FootFlagEncoderTest.testAccess":13,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":82,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":139,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":23,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":73,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":76,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":95,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":101,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":107,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":149,"com.graphhopper.GraphHopperTest.testLoadOSM":16,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":96,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":86,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":100,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":99,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":98,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":97,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":129,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":31,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":131,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":43,"com.graphhopper.reader.OSMReaderTest.testMain":153,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":49,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":78,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":110,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":144,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":150,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAccess":7,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":117,"com.graphhopper.routing.PathTest.testWayList":4,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":24,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":75,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":61,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":122,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":113,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":87,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":136,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":44,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":0,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":123,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":72,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":127,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":18,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":67,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":133,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":6,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":143,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":81,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":50,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":88,"com.graphhopper.GraphHopperTest.testFootAndCar":27,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":116,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAccess":9,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":37,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":119,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":151,"com.graphhopper.util.InstructionListTest.testCreateGPX":2,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":77,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibility":5,"com.graphhopper.routing.util.CarFlagEncoderTest.testOneway":111,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":158,"com.graphhopper.routing.util.FootFlagEncoderTest.testRailPlatformIssue366":12,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNoErrorOnEdgeCase_lastIndex":157,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":48,"com.graphhopper.GraphHopperTest.testVia":102,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":105,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":52,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":69,"com.graphhopper.GraphHopperAPITest.testLoad":152,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":104,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":3,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":135,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":114,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":36,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":22,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":80,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":42,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":118,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":65,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":59,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":126,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":28,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":108,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":53,"com.graphhopper.util.GHUtilityTest.testCopy":92,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":8,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":39,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":64},"transformations":[{"failures":[0],"tindex":"2134c741-82b0-11e5-be5d-950fd4efdc2a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:499","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.EdgeExplorer = com.graphhopper.storage.Graph.createEdgeExplorer(new com.graphhopper.routing.util.DefaultEdgeFilter(com.graphhopper.routing.util.FlagEncoder , true , false))"},"status":-1},{"failures":[],"tindex":"2134ee52-82b0-11e5-be5d-49b62a2191c7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:143","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.routing.AStar.AStarEdge) != null) {\n    com.graphhopper.routing.AStar.AStarEdge.double += com.graphhopper.routing.util.ConsistentWeightApproximator.approximate(com.graphhopper.routing.AStar.AStarEdge.int, false);\n    com.graphhopper.routing.AStar.AStarEdge.double += com.graphhopper.routing.util.ConsistentWeightApproximator.approximate(com.graphhopper.routing.AStar.AStarEdge.int, true);\n} "},"status":-1},{"failures":[1,2,3],"tindex":"2134ee53-82b0-11e5-be5d-936c6b303d97","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:120","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = int < int"},"variableMap":{"y1":"i","y2":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:179","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = (int + 1) == int"},"status":-1},{"failures":[4],"tindex":"2134ee54-82b0-11e5-be5d-bb8ff0649323","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.IntIterator:38","type":"CtUnaryOperatorImpl","sourcecode":"++int"},"variableMap":{"counter":"pointsIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:103","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-1},{"failures":[5],"tindex":"2134ee55-82b0-11e5-be5d-f7046322784e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:103","type":"CtIfImpl","sourcecode":"if (long <= 0)\n    return false;\n"},"variableMap":{"newBytes":"directionBitMask"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:397","type":"CtIfImpl","sourcecode":"if ((this.long) != (com.graphhopper.routing.util.AbstractFlagEncoder.long))\n    return false;\n"},"status":-1},{"failures":[6,7,8,9,10,11,12,13,14,15],"tindex":"21351566-82b0-11e5-be5d-dbaedd9985fd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeFlagEncoder:87","type":"CtReturnImpl","sourcecode":"return ((com.graphhopper.reader.OSMWay.hasTag(\"highway\", java.util.HashSet<java.lang.String>)) || (com.graphhopper.reader.OSMWay.hasTag(\"railway\", \"platform\"))) || (((\"track\".equals(java.lang.String)) && (java.lang.String != null)) && (!(\"grade1\".equals(java.lang.String))))"},"variableMap":{"pushingSections":"values","trackType":"key","highway":"key","way":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:175","type":"CtIfImpl","sourcecode":"if (java.util.Set<java.lang.String>.contains(com.graphhopper.reader.OSMElement.getTag(java.lang.String, \"\")))\n    return true;\n"},"status":-1},{"failures":[],"tindex":"21351567-82b0-11e5-be5d-5d2f4b1adfc6","series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:1135","type":"CtInvocationImpl","sourcecode":"org.slf4j.Logger.info((\"start finding subnetworks, \" + (com.graphhopper.util.Helper.getMemInfo())))"},"variableMap":{"logger":"com.graphhopper.reader.OSMReader.logger"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:306","type":"CtIfImpl","sourcecode":"if (long < 0) {\n    com.graphhopper.reader.OSMReader.org.slf4j.Logger.info((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \", now parsing relations\"));\n    long = long;\n} "},"status":0},{"failures":[],"tindex":"21351568-82b0-11e5-be5d-213dc0a850d7","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:119","type":"CtOperatorAssignmentImpl","sourcecode":"double += 2 * (java.lang.Math.double)"},"variableMap":{"orientation":"weight","java.lang.Math.PI":"weight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:135","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.AStar.AStarEdge.double = double"},"status":-2},{"failures":[],"tindex":"21351569-82b0-11e5-be5d-c525f28926ac","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PointList:126","type":"CtLocalVariableImpl","sourcecode":"int int = (int) + 1"},"variableMap":{"size":"nodeA"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:741","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.coll.SparseIntIntArray.get(int)"},"status":-2},{"failures":[],"tindex":"2135156a-82b0-11e5-be5d-99f9a62e6e7c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMRelation:102","type":"CtIfImpl","sourcecode":"if (boolean && boolean) {\n    return true;\n} "},"variableMap":{"hasOther":"finishedTo","hasRel":"finishedTo"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:201","type":"CtIfImpl","sourcecode":"if ((boolean) || (boolean))\n    return true;\n"},"status":0},{"failures":[],"tindex":"21353c7b-82b0-11e5-be5d-2d6bf5289bc6","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistancePlaneProjection:57","type":"CtLocalVariableImpl","sourcecode":"double double = double / (com.graphhopper.util.DistanceCalcEarth.double)"},"variableMap":{"dist":"b_lon","com.graphhopper.util.DistanceCalcEarth.R":"b_lon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:234","type":"CtLocalVariableImpl","sourcecode":"double double = double - double"},"status":-2},{"failures":[],"tindex":"21353c7c-82b0-11e5-be5d-6183cf608f6a","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.BikeFlagEncoder:95","type":"CtReturnImpl","sourcecode":"return \"bike\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:633","type":"CtReturnImpl","sourcecode":"return ((\"distance:\" + com.graphhopper.routing.Path.(getDistance())) + \", edges:\") + (gnu.trove.list.TIntList.size())"},"status":-2},{"failures":[16,17],"tindex":"21353c7d-82b0-11e5-be5d-631fc9d6f0e9","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtil:231","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('1')"},"variableMap":{"sb":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:303","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(com.graphhopper.routing.util.AbstractFlagEncoder.toString()).append(\"|\").append(com.graphhopper.routing.util.AbstractFlagEncoder.getPropertiesString()).append(\"|version=\").append(com.graphhopper.routing.util.AbstractFlagEncoder.getVersion())"},"status":-1},{"failures":[18,19,20,21],"tindex":"21353c7e-82b0-11e5-be5d-b3b86d2272bf","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:204","type":"CtIfImpl","sourcecode":"if (int <= ((1 << int) - 12)) {\n    return (1 << int) - 12;\n} "},"variableMap":{"need":"need","i":"need"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:202","type":"CtForImpl","sourcecode":"for (int int = 4 ; int < 32 ; int++) {\n    if (int <= ((1 << int) - 12)) {\n        return (1 << int) - 12;\n    } \n}"},"status":-1},{"failures":[22,23,24,25,26,27,28,29,30,31,32,33,34,0],"tindex":"2135638f-82b0-11e5-be5d-b5c0bac9b0b2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:89","type":"CtIfImpl","sourcecode":"if (int > 64)\n    throw new java.lang.IllegalStateException(\"allBits is too big and does not fit into 8 bytes\");\n"},"variableMap":{"allBits":"connectedId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BreadthFirstSearch:50","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.SimpleIntDeque.push(int)"},"status":-1},{"failures":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,1,94,95,96,97,98,99,100,101,102,103,27,104,105,106,107,108,109,110,111,112,113,114,29,30,31,32,115,116,117,118,4,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,33,153,0,154],"tindex":"21356390-82b0-11e5-be5d-23843fb658c7","series":0,"name":"add","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:98","type":"CtAssignmentImpl","sourcecode":"long = 1L << (int - 1)"},"variableMap":{"initialBits":"backwardBit","allBits":"shift"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:182","type":"CtAssignmentImpl","sourcecode":"long = 2L << int"},"status":-1},{"failures":[],"tindex":"21356391-82b0-11e5-be5d-17789bf33d0b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.QueryGraph:102","type":"CtLocalVariableImpl","sourcecode":"java.util.List<com.graphhopper.storage.index.QueryResult> java.util.List<com.graphhopper.storage.index.QueryResult> = new java.util.ArrayList<com.graphhopper.storage.index.QueryResult>(2)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:171","type":"CtLocalVariableImpl","sourcecode":"java.util.List<com.graphhopper.storage.index.QueryResult> java.util.List<com.graphhopper.storage.index.QueryResult> = gnu.trove.map.TIntObjectMap<java.util.List<com.graphhopper.storage.index.QueryResult>>.get(int)"},"status":-2},{"failures":[],"tindex":"21356392-82b0-11e5-be5d-e7569ea7dfa2","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:176","type":"CtLocalVariableImpl","sourcecode":"double double = double + double"},"variableMap":{"gradient":"lastLat","yend":"firstLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:365","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.DistanceCalc.calcDist(double, double, double, double)"},"status":-2},{"failures":[155],"tindex":"21356393-82b0-11e5-be5d-5194d1acda27","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:696","type":"CtIfImpl","sourcecode":"if (((com.graphhopper.util.PointList.getSize()) > 1) && (int >= 0)) {\n    java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long));\n    com.graphhopper.util.PointList.clear();\n    com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n} "},"status":-1},{"failures":[156,22,23,24,157,158],"tindex":"21358aa4-82b0-11e5-be5d-dfeefa142193","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:189","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    double double = com.graphhopper.storage.NodeAccess.getLatitude(int);\n    double double = com.graphhopper.storage.NodeAccess.getLongitude(int);\n    int int = ((int)(com.graphhopper.geohash.KeyAlgo.encode(double, double)));\n    long long = ((long)(int)) * 4;\n    if (com.graphhopper.coll.GHBitSet.contains(int)) {\n        int int = com.graphhopper.storage.DataAccess.getInt(long);\n        com.graphhopper.geohash.KeyAlgo.decode(int, com.graphhopper.util.shapes.GHPoint);\n        double double = com.graphhopper.util.DistanceCalc.calcNormalizedDist(com.graphhopper.util.shapes.GHPoint.double, com.graphhopper.util.shapes.GHPoint.double, double, double);\n        double double = com.graphhopper.storage.NodeAccess.getLatitude(int);\n        double double = com.graphhopper.storage.NodeAccess.getLongitude(int);\n        double double = com.graphhopper.util.DistanceCalc.calcNormalizedDist(com.graphhopper.util.shapes.GHPoint.double, com.graphhopper.util.shapes.GHPoint.double, double, double);\n        if (double < double) {\n            com.graphhopper.storage.DataAccess.setInt(long, int);\n        } \n    } else {\n        com.graphhopper.storage.DataAccess.setInt(long, int);\n        com.graphhopper.coll.GHBitSet.add(int);\n    }\n}"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"2135156a-82b0-11e5-be5d-99f9a62e6e7c","diffs":[{"branchesDiff":{"delete":["t0"]},"type":"staticDiff"}]}]}
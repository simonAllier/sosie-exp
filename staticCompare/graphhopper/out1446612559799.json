{"failureDictionary":{"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":19,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":27,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":51,"com.graphhopper.reader.OSMReaderTest.testFerry":53,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":87,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":16,"com.graphhopper.routing.QueryGraphTest.testOneWay":26,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":90,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":45,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":69,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":10,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":11,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeightMMap":108,"com.graphhopper.geohash.SpatialKeyAlgoTest.testOddBits":43,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":105,"com.graphhopper.reader.OSMReaderTest.testWithBounds":64,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":88,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":21,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":83,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":77,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeight":109,"com.graphhopper.geohash.LinearKeyAlgoTest.testEncode":73,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":41,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":44,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":81,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":15,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":67,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":2,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":98,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":6,"com.graphhopper.GraphHopperTest.testPrepare":35,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":13,"com.graphhopper.reader.OSMReaderTest.testFoot":54,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":24,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":28,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":46,"com.graphhopper.reader.OSMReaderTest.testOneWay":66,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":104,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":95,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":107,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":70,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":106,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":89,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":102,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":58,"com.graphhopper.util.HelperTest.testKeepIn":75,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":59,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":79,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":84,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":36,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":4,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":0,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":93,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":92,"com.graphhopper.GraphHopperTest.testLoadOSM":39,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":29,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":86,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":33,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":32,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":31,"com.graphhopper.reader.OSMReaderTest.testSort":56,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":85,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":30,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":63,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":78,"com.graphhopper.reader.OSMReaderTest.testMain":55,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":91,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode":47,"com.graphhopper.util.BitUtilLittleTest.testToLastBitString":48,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":23,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":100,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":99,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":82,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":76,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":14,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":60,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBits":42,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":18,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":65,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":5,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":97,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":12,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointCount":50,"com.graphhopper.util.DouglasPeuckerTest.testPathSimplify":52,"com.graphhopper.GraphHopperTest.testFootAndCar":37,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":25,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":3,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":22,"com.graphhopper.GraphHopperTest.testPrepareOnly":68,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":96,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":1,"com.graphhopper.GraphHopperTest.testVia":34,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":74,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":17,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":40,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":80,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":62,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":38,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":20,"com.graphhopper.GraphHopperTest.testFootOnly":71,"com.graphhopper.util.BitUtilBigTest.testToLastBitString":49,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":103,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":7,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":61,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":101,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":8,"com.graphhopper.reader.OSMReaderTest.testBarriers":57,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":72,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":9,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":94},"transformations":[{"failures":[],"tindex":"690f5c5d-82af-11e5-94fb-69cbbdb290ab","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DouglasPeucker:70","type":"CtLocalVariableImpl","sourcecode":"int int = 500"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:351","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"690f836e-82af-11e5-94fb-e37c9daf765f","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:221","type":"CtLocalVariableImpl","sourcecode":"double double = (double - double) - double"},"variableMap":{"incDist2DSum":"minLon","fullDist2D":"minLon","decDist2DSum":"minLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:218","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.shapes.BBox.double"},"status":-2},{"failures":[0,1,2,3,4,5,6],"tindex":"690f836f-82af-11e5-94fb-71749b94b5ce","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:68","type":"CtReturnImpl","sourcecode":"return 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullIndex:119","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.index.Location2IDFullIndex.findClosest(double, double, com.graphhopper.routing.util.EdgeFilter.com.graphhopper.routing.util.EdgeFilter).getClosestNode()"},"status":-1},{"failures":[],"tindex":"690f8370-82af-11e5-94fb-e5e64c122e05","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:326","type":"CtReturnImpl","sourcecode":"return \"car\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:216","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.StopWatch.toString()"},"status":0},{"failures":[],"tindex":"690f8371-82af-11e5-94fb-2f420371abd3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:870","type":"CtIfImpl","sourcecode":"if (int < (com.graphhopper.reader.OSMReader.int)) {\n    int = (-int) - 3;\n    com.graphhopper.reader.OSMNode = new com.graphhopper.reader.OSMNode(com.graphhopper.reader.OSMReader.createNewNodeId() , com.graphhopper.storage.NodeAccess , int);\n} else {\n    int = int - 3;\n    com.graphhopper.reader.OSMNode = new com.graphhopper.reader.OSMNode(com.graphhopper.reader.OSMReader.createNewNodeId() , com.graphhopper.reader.PillarInfo , int);\n}"},"status":-2},{"failures":[7,8],"tindex":"690faa82-82af-11e5-94fb-293c6ad8721a","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.SparseArray:367","type":"CtAssignmentImpl","sourcecode":"int = int + 1"},"variableMap":{"pos":"removedEdges","mSize":"removedEdges"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:245","type":"CtOperatorAssignmentImpl","sourcecode":"int += com.graphhopper.routing.util.PrepareRoutingSubnetworks.removeEdges(com.graphhopper.util.EdgeExplorer, com.graphhopper.routing.util.FlagEncoder, gnu.trove.list.array.TIntArrayList, int)"},"status":-1},{"failures":[],"tindex":"690faa83-82af-11e5-94fb-e7320ec36958","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:144","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"variableMap":{"blockByDefault":"initialized"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:293","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":0},{"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],"tindex":"690faa84-82af-11e5-94fb-8ba09ed960d7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.QueryGraph:258","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.add(java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.get(((java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.size()) - 2)))"},"variableMap":{"virtualEdges":"virtualEdges"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:359","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.add(com.graphhopper.routing.VirtualEdgeIteratorState)"},"status":-1},{"failures":[42,43,44,45,46,47,48,49],"tindex":"690faa85-82af-11e5-94fb-61e4c252cdef","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtil:212","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= 1"},"status":-1},{"failures":[50,51,52],"tindex":"690faa86-82af-11e5-94fb-85e5b759bcab","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.CompressedArray:72","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"variableMap":{"compressionLevel":"newSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:265","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-1},{"failures":[53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,34,35,36,37,38,39,70,40,71,72],"tindex":"690fd197-82af-11e5-94fb-8da9ca9cb713","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMInputFile:167","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.reader.OSMElement = com.graphhopper.reader.OSMInputFile.getNextPBF()"},"variableMap":{"item":"item","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMInputFile:169","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.reader.OSMElement = com.graphhopper.reader.OSMInputFile.getNextXML()"},"status":-1},{"failures":[],"tindex":"690fd198-82af-11e5-94fb-2515c1121a36","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:897","type":"CtUnaryOperatorImpl","sourcecode":"~long"},"variableMap":{"nodeFlags":"directionBitMask"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:183","type":"CtAssignmentImpl","sourcecode":"long = 3L << int"},"status":-2},{"failures":[73],"tindex":"690fd199-82af-11e5-94fb-a163b204c52e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.LinearKeyAlgo:87","type":"CtAssignmentImpl","sourcecode":"double = java.lang.Math.min(java.lang.Math.max(double, com.graphhopper.util.shapes.BBox.double), com.graphhopper.util.shapes.BBox.double)"},"status":-1},{"failures":[],"tindex":"690fd19a-82af-11e5-94fb-8b366292487d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:101","type":"CtLocalVariableImpl","sourcecode":"int int = 2 * ((int * (int)) + int)"},"variableMap":{"width":"length","latSimilar":"length","lonSimilar":"length"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.BigLongIntMap:67","type":"CtLocalVariableImpl","sourcecode":"int int = (java.lang.Math.abs(((int)((long >> 32) ^ long)))) % (gnu.trove.map.hash.TLongIntHashMap[].int)"},"status":-2},{"failures":[74,75],"tindex":"690fd19b-82af-11e5-94fb-3de276a0c673","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:114","type":"CtReturnImpl","sourcecode":"return double - ((int)(double))"},"variableMap":{"val":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:473","type":"CtReturnImpl","sourcecode":"return java.lang.Math.max(double, java.lang.Math.min(double, double))"},"status":-1},{"failures":[],"tindex":"690fd19c-82af-11e5-94fb-81cfcf0b3486","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:188","type":"CtIfImpl","sourcecode":"if (double < (-0.1)) {\n    double = -double;\n    double = double;\n} "},"variableMap":{"eleDelta":"newWeight","decEleSum":"newWeight","fullDist2D":"newWeight","decDist2DSum":"newWeight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:311","type":"CtIfImpl","sourcecode":"if (double < (com.graphhopper.routing.PathBidirRef.getWeight())) {\n    com.graphhopper.routing.PathBidirRef.setSwitchToFrom(boolean);\n    com.graphhopper.routing.PathBidirRef.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge;\n    com.graphhopper.routing.PathBidirRef.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge;\n    com.graphhopper.routing.PathBidirRef.setWeight(double);\n} "},"status":-1},{"failures":[76,7,77,78,79,66,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],"tindex":"690ff8ad-82af-11e5-94fb-cb0c52b0d03c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:366","type":"CtReturnImpl","sourcecode":"return java.lang.Integer.int"},"variableMap":{"java.lang.Integer.MAX_VALUE":"start"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:411","type":"CtIfImpl","sourcecode":"if (int == (int + int)) {\n    return ~(int + int);\n} else if ((int[][int]) == int) {\n    return int;\n} else {\n    return ~int;\n}"},"status":-1},{"failures":[59,108,109],"tindex":"690ff8ae-82af-11e5-94fb-9bae6f1e21f0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:819","type":"CtIfImpl","sourcecode":"if (double >= 0) {\n    if (boolean || (double < double))\n        return double * 0.9;\n    \n} "},"variableMap":{"force":"calcMean","maxSpeed":"precision","speed":"lon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:224","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.dem.HeightTile == null) {\n    if (!(java.io.File.exists()))\n        java.io.File.mkdirs();\n    \n    java.lang.String java.lang.String = com.graphhopper.reader.dem.SRTMProvider.getFileString(double, double);\n    if (java.lang.String == null)\n        return 0;\n    \n    int int = com.graphhopper.reader.dem.SRTMProvider.down(double);\n    int int = com.graphhopper.reader.dem.SRTMProvider.down(double);\n    com.graphhopper.reader.dem.HeightTile = new com.graphhopper.reader.dem.HeightTile(int , int , int , double , 1);\n    com.graphhopper.reader.dem.HeightTile.setCalcMean(boolean);\n    gnu.trove.map.hash.TIntObjectHashMap<com.graphhopper.reader.dem.HeightTile>.put(int, com.graphhopper.reader.dem.HeightTile);\n    com.graphhopper.storage.DataAccess com.graphhopper.storage.DataAccess = com.graphhopper.reader.dem.SRTMProvider.getDirectory().find((\"dem\" + int));\n    com.graphhopper.reader.dem.HeightTile.setHeights(com.graphhopper.storage.DataAccess);\n    boolean boolean = false;\n    try {\n        boolean = com.graphhopper.storage.DataAccess.loadExisting();\n    } catch (java.lang.Exception ex) {\n        org.slf4j.Logger.warn((((\"cannot load dem\" + int) + \", error:\") + (java.lang.Exception.getMessage())));\n    }\n    if (!boolean) {\n        byte[] byte[] = new byte[(2 * (int)) * (int)];\n        com.graphhopper.storage.DataAccess.create(byte[].int);\n        try {\n            java.lang.String java.lang.String = (((java.lang.String) + \"/\") + java.lang.String) + \".hgt.zip\";\n            java.io.File java.io.File = new java.io.File(java.io.File , new java.io.File(java.lang.String).getName());\n            java.io.InputStream java.io.InputStream;\n            if (!(java.io.File.exists())) {\n                for (int int = 0 ; int < 3 ; int++) {\n                    try {\n                        com.graphhopper.util.Downloader.downloadFile(java.lang.String, java.io.File.getAbsolutePath());\n                        break;\n                    } catch (java.net.SocketTimeoutException ex) {\n                        java.lang.Thread.sleep(2000);\n                        continue;\n                    } catch (java.io.FileNotFoundException ex) {\n                        java.lang.String = (((java.lang.String) + \"/\") + java.lang.String) + \"hgt.zip\";\n                        continue;\n                    }\n                }\n            } \n            java.io.InputStream = new java.io.FileInputStream(java.io.File);\n            java.util.zip.ZipInputStream java.util.zip.ZipInputStream = new java.util.zip.ZipInputStream(java.io.InputStream);\n            java.util.zip.ZipInputStream.getNextEntry();\n            java.io.BufferedInputStream java.io.BufferedInputStream = new java.io.BufferedInputStream(java.util.zip.ZipInputStream);\n            int int;\n            while ((int = java.io.BufferedInputStream.read(byte[])) > 0) {\n                for (int int = 0 ; int < int ; int += 2) {\n                    short short = com.graphhopper.reader.dem.SRTMProvider.com.graphhopper.util.BitUtil.toShort(byte[], int);\n                    if ((short < (-1000)) || (short > 12000))\n                        short = java.lang.Short.short;\n                    \n                    com.graphhopper.storage.DataAccess.setShort(int, short);\n                }\n            }\n            com.graphhopper.storage.DataAccess.flush();\n        } catch (java.lang.Exception ex) {\n            throw new java.lang.RuntimeException(java.lang.Exception);\n        }\n    } \n} "},"status":-1},{"failures":[72],"tindex":"690ff8af-82af-11e5-94fb-63aad1a2c490","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:143","type":"CtAssignmentImpl","sourcecode":"java.lang.String = \"S\""},"variableMap":{"cp":"dataAccess"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.DAType:165","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.toUpperCase()"},"status":-1},{"failures":[],"tindex":"69101fc0-82af-11e5-94fb-314791009edf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:455","type":"CtInvocationImpl","sourcecode":"java.text.NumberFormat.getInstance(java.util.Locale.java.util.Locale)"},"status":0}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"69101fc0-82af-11e5-94fb-314791009edf","diffs":[{"methodsDiff":{"delete":["java.text.NumberFormat.getInstance"]},"type":"staticDiff"}]},{"transformation":"690f8370-82af-11e5-94fb-e5e64c122e05","diffs":[{"branches":{"com.graphhopper.GraphHopperAPITest.testLoad":["com.graphhopper.util.StopWatch_java.lang.String_toString().b","com.graphhopper.util.StopWatch_java.lang.String_toString().t1"],"com.graphhopper.GraphHopperTest.testFootAndCar":["com.graphhopper.util.StopWatch_java.lang.String_toString().b","com.graphhopper.util.StopWatch_java.lang.String_toString().t1"]},"type":"branch"},{"methodsDiff":{"delete":["com.graphhopper.util.StopWatch.toString"]},"type":"staticDiff"}]}]}
{"failureDictionary":{"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":24,"com.graphhopper.util.BitUtilBigTest.testToDouble":81,"com.graphhopper.reader.OSMReaderTest.testMain":17,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":11,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":78,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":50,"com.graphhopper.reader.OSMReaderTest.testEstimatedCenter":27,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":61,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":47,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":1,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":34,"com.graphhopper.routing.PathTest.testWayList":13,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":54,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":14,"com.graphhopper.routing.util.CarFlagEncoderTest.testFordAccess":35,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":56,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeightMMap":63,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":62,"com.graphhopper.reader.OSMReaderTest.testWithBounds":25,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":58,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":21,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":10,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":74,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeight":65,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":26,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":67,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":68,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":40,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":42,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":70,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":29,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":38,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":57,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":46,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":71,"com.graphhopper.GraphHopperTest.testPrepare":3,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":8,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":37,"com.graphhopper.GraphHopperTest.testFootAndCar":31,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":44,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":59,"com.graphhopper.reader.dem.SRTMProviderTest.testGetFileString":64,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":79,"com.graphhopper.reader.OSMReaderTest.testFoot":16,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":49,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":51,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":75,"com.graphhopper.reader.OSMReaderTest.testOneWay":28,"com.graphhopper.routing.util.CarFlagEncoderTest.testOneway":39,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":55,"com.graphhopper.util.InstructionTest.testCalcAzimuthAndGetDirection":15,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":6,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":45,"com.graphhopper.GraphHopperTest.testPrepareOnly":0,"com.graphhopper.GraphHopperTest.testVia":2,"com.graphhopper.util.BitUtilBigTest.testToLong":82,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":32,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":69,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":52,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":23,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":80,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":20,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":4,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":60,"com.graphhopper.GraphHopperTest.testFootOnly":7,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":76,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":30,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":66,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":72,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":22,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":36,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":9,"com.graphhopper.reader.OSMReaderTest.testBarriers":19,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":43,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":73,"com.graphhopper.GraphHopperTest.testLoadOSM":5,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":33,"com.graphhopper.util.GHUtilityTest.testCopy":12,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":53,"com.graphhopper.reader.OSMReaderTest.testSort":18,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":41,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":48,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":77},"transformations":[{"failures":[],"tindex":"22a5f192-82b5-11e5-8d19-9955006cfadd","series":0,"name":"add","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:228","type":"CtOperatorAssignmentImpl","sourcecode":"long >>>= 1"},"variableMap":{"bits":"osmId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:628","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.OSMReader.getRelFlagsMap().put(long, long)"},"status":0},{"failures":[0,1,2,3,4,5,6,7],"tindex":"22a618a3-82b5-11e5-8d19-279287f18f6a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:648","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GraphHopper.cleanUp()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:853","type":"CtIfImpl","sourcecode":"if (boolean)\n    com.graphhopper.GraphHopper.createCHPreparations();\n"},"status":-1},{"failures":[],"tindex":"22a618a4-82b5-11e5-8d19-dfbc30ac3db3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:276","type":"CtIfImpl","sourcecode":"if (int >= 0) {\n    if ((int[][int]) >= 0) {\n        if (((int[][int]) == int) || (com.graphhopper.storage.index.Location2IDQuadtree.(getNormedDist(int, int)) >= com.graphhopper.storage.index.Location2IDQuadtree.(getNormedDist(int[][int], int)))) {\n            continue;\n        } \n    } \n    com.graphhopper.storage.DataAccess.setInt((int * 4), com.graphhopper.storage.DataAccess.getInt((int * 4)));\n    int[][int] = int[][int];\n    com.graphhopper.coll.GHBitSet.add(int);\n    int++;\n} "},"status":-2},{"failures":[],"tindex":"22a618a5-82b5-11e5-8d19-db01d6212bf8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:420","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.util.BikeCommonFlagEncoder.isBool(long, com.graphhopper.routing.util.BikeCommonFlagEncoder.int))\n    int = 1;\n"},"variableMap":{"com.graphhopper.routing.util.BikeCommonFlagEncoder.K_UNPAVED":"com.graphhopper.routing.util.FlagEncoder.K_ROUNDABOUT","flags":"directionBitMask","this":"this","paveType":"com.graphhopper.routing.util.FlagEncoder.K_ROUNDABOUT"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:189","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.routing.util.AbstractFlagEncoder.(isFerry(long))) {\n    double double = com.graphhopper.routing.util.CarFlagEncoder.getSpeed(com.graphhopper.reader.OSMWay);\n    double = com.graphhopper.routing.util.AbstractFlagEncoder.applyMaxSpeed(com.graphhopper.reader.OSMWay, double, true);\n    double double = com.graphhopper.routing.util.AbstractFlagEncoder.parseSpeed(com.graphhopper.reader.OSMWay.getTag(\"maxspeed:motorcycle\"));\n    if ((double > 0) && (double < double))\n        double = double * 0.9;\n    \n    if ((double > 30) && (com.graphhopper.reader.OSMWay.hasTag(\"surface\", java.util.Set<java.lang.String>)))\n        double = 30;\n    \n    boolean boolean = com.graphhopper.reader.OSMWay.hasTag(\"junction\", \"roundabout\");\n    if (boolean)\n        long = com.graphhopper.routing.util.AbstractFlagEncoder.setBool(0, com.graphhopper.routing.util.FlagEncoder.int, true);\n    \n    if ((com.graphhopper.reader.OSMWay.hasTag(\"oneway\", java.util.Set<java.lang.String>)) || boolean) {\n        if (com.graphhopper.reader.OSMWay.hasTag(\"oneway\", \"-1\")) {\n            long = com.graphhopper.routing.util.MotorcycleFlagEncoder.setReverseSpeed(long, double);\n            long |= long;\n        } else {\n            long = com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(long, double);\n            long |= long;\n        }\n    } else {\n        long = com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(long, double);\n        long = com.graphhopper.routing.util.MotorcycleFlagEncoder.setReverseSpeed(long, double);\n        long |= long;\n    }\n} else {\n    long = com.graphhopper.routing.util.AbstractFlagEncoder.handleFerryTags(com.graphhopper.reader.OSMWay, java.util.Map<java.lang.String, java.lang.Integer>.get(\"living_street\"), java.util.Map<java.lang.String, java.lang.Integer>.get(\"service\"), java.util.Map<java.lang.String, java.lang.Integer>.get(\"residential\"));\n    long |= long;\n}"},"status":-2},{"failures":[8,9,10,11,12,13],"tindex":"22a63fb6-82b5-11e5-8d19-1742407e08fd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(5);\n} catch (java.lang.InterruptedException iex) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:838","type":"CtIfImpl","sourcecode":"if (boolean)\n    com.graphhopper.util.PointList.reverse();\n"},"status":-1},{"failures":[],"tindex":"22a63fb7-82b5-11e5-8d19-176533664179","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:221","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.storage.DataAccess com.graphhopper.storage.DataAccess = new com.graphhopper.storage.RAMDirectory().find(\"tempIndexCopy\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:238","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.storage.DataAccess com.graphhopper.storage.DataAccess = com.graphhopper.reader.dem.SRTMProvider.getDirectory().find((\"dem\" + int))"},"status":-2},{"failures":[],"tindex":"22a63fb8-82b5-11e5-8d19-fff87f88de67","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:159","type":"CtAssignmentImpl","sourcecode":"double = double"},"variableMap":{"x1":"absY","x2":"x"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:44","type":"CtAssignmentImpl","sourcecode":"double = (double + double) / (double - double)"},"status":-2},{"failures":[14],"tindex":"22a63fb9-82b5-11e5-8d19-77fcd41f0074","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:288","type":"CtReturnImpl","sourcecode":"return long ^ (long)"},"variableMap":{"directionBitMask":"flags","flags":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:125","type":"CtReturnImpl","sourcecode":"return long"},"status":-1},{"failures":[],"tindex":"22a63fba-82b5-11e5-8d19-4117497864d5","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:55","type":"CtReturnImpl","sourcecode":"return -double"},"variableMap":{"angle":"lat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.shapes.Circle:52","type":"CtReturnImpl","sourcecode":"return double"},"status":-2},{"failures":[],"tindex":"22a666cb-82b5-11e5-8d19-97f8c2d7675f","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:159","type":"CtIfImpl","sourcecode":"if (double >= 0)\n    this.double = double;\n"},"variableMap":{"logMessages":"distEdge","logMessagesPercentage":"distEdge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:138","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.QueryResult.setQueryDistance(double)"},"status":0},{"failures":[15],"tindex":"22a666cc-82b5-11e5-8d19-01bceac2884b","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:52","type":"CtOperatorAssignmentImpl","sourcecode":"double += (((0.1963 * double) * double) - 0.9817) * double"},"variableMap":{"r":"nextLon","angle":"nextLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:234","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.PointList.getLongitude(1)"},"status":-1},{"failures":[],"tindex":"22a666cd-82b5-11e5-8d19-d37512480300","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:361","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilBig:90","type":"CtLocalVariableImpl","sourcecode":"int int = (java.lang.String.length()) / 8"},"status":-2},{"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,1,2,3,30,31,4,5,6,32,33,34,35,36,37,38,39],"tindex":"22a666ce-82b5-11e5-8d19-e5836eda08b4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:152","type":"CtIfImpl","sourcecode":"if ((java.lang.String != null) && (!(java.lang.String.equals(\"grade1\"))))\n    return 0;\n"},"variableMap":{"tt":"highwayValue"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:207","type":"CtIfImpl","sourcecode":"if (!(java.util.Map<java.lang.String, java.lang.Integer>.containsKey(java.lang.String)))\n    return 0;\n"},"status":-1},{"failures":[40,41,8,42,43,9,44,45,10,46,47,11,12,20,48,31,49,50,51,52,53,54,55,56,57,58,59,60,61,62,13],"tindex":"22a666cf-82b5-11e5-8d19-dd77d98c465e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:242","type":"CtAssignmentImpl","sourcecode":"double = double[][int]"},"status":-1},{"failures":[],"tindex":"22a68ce0-82b5-11e5-8d19-f7752cf353ef","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:65","type":"CtAssignmentImpl","sourcecode":"int = 4"},"variableMap":{"initLeafSize":"minNetworkSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:563","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.util.CmdArgs.getInt(\"prepare.minNetworkSize\", int)"},"status":0},{"failures":[0,5,6,32],"tindex":"22a68ce1-82b5-11e5-8d19-29cf77fc1340","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:301","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setHeader((1 * 4), com.graphhopper.storage.index.LocationIndexTree.calcChecksum())"},"status":-1},{"failures":[63,63,64,64,65,65,20],"tindex":"22a68ce2-82b5-11e5-8d19-a1be0bb1ba04","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:117","type":"CtAssignmentImpl","sourcecode":"int = -int"},"status":-1},{"failures":[66,67,68,69,70,71,72,73,74,51,52,75,59,60,76,62],"tindex":"22a68ce3-82b5-11e5-8d19-1543472bea10","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:742","type":"CtIfImpl","sourcecode":"if (int < 0)\n    int = int;\n"},"variableMap":{"updatedA":"v","nodeA":"v"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:652","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.ch.PrepareContractionHierarchies.findShortcuts(com.graphhopper.routing.ch.PrepareContractionHierarchies.AddShortcutHandler.setNode(int))"},"status":-1},{"failures":[40,77,42,78,44,79,46,80,20],"tindex":"22a68ce4-82b5-11e5-8d19-79dd80dc4491","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:901","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(double, double, com.graphhopper.util.Helper.intToEle(com.graphhopper.util.BitUtil.toInt(byte[], int)))"},"status":-1},{"failures":[81,82],"tindex":"22a68ce5-82b5-11e5-8d19-358b4c410713","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtilBig:54","type":"CtAssignmentImpl","sourcecode":"byte[][int] = ((byte)(int >> 24))"},"variableMap":{"offset":"offset","bytes":"bytes","value":"offset"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilBig:82","type":"CtAssignmentImpl","sourcecode":"byte[][++int] = ((byte)(long))"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"22a68ce0-82b5-11e5-8d19-f7752cf353ef","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.PMap.getInt"]},"type":"staticDiff"}]}]}
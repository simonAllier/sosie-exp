{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":256,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":135,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":159,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":69,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":280,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":242,"com.graphhopper.reader.OSMReaderTest.testFerry":28,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":87,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":88,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":156,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":78,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":193,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":19,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":65,"com.graphhopper.reader.OSMReaderTest.testWithBounds":39,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":112,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":161,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":253,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":113,"com.graphhopper.coll.CompressedArrayTest.testCompress":15,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":260,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":167,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":320,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testNoErrorOnEdgeCase_lastIndex":60,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":144,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":301,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":46,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":17,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":285,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":192,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":152,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":289,"com.graphhopper.GraphHopperTest.testPrepare":20,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":268,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":224,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":12,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":292,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":140,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":307,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":163,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":122,"com.graphhopper.util.InstructionListTest.testWayList":93,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":92,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":129,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":90,"com.graphhopper.GraphHopperAPITest.testDisconnected179":16,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":117,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":166,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":249,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":24,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":63,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":114,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":244,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":123,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":127,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":66,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":97,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":108,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":34,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":116,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":238,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":100,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":179,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":258,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":271,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":21,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":297,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":275,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":230,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":236,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":232,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":155,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":231,"com.graphhopper.GraphHopperTest.testLoadOSM":23,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":74,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":153,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":49,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":67,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":175,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":311,"com.graphhopper.reader.OSMReaderTest.testSort":31,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":132,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":38,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":115,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":190,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":316,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":149,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":290,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":54,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":55,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":269,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":209,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":139,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":98,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":99,"com.graphhopper.routing.PathTest.testWayList":105,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":235,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":270,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":59,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":252,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":184,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":13,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeReturn":200,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":298,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":121,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":208,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":64,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":128,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":158,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":319,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":48,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPropertiesWithNoInit":228,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":187,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":214,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":210,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":169,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":216,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":296,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":61,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":206,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":305,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":11,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":107,"com.graphhopper.util.GHUtilityTest.testSort":85,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":250,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":71,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":126,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":125,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":203,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":164,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":222,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":239,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":281,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":227,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":277,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":286,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":168,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":162,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":201,"com.graphhopper.coll.CompressedArrayTest.testCompress2":14,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":284,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":25,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":309,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":278,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":219,"com.graphhopper.GraphHopperAPITest.testLoad":0,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":22,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":138,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":302,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":111,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":173,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":294,"com.graphhopper.reader.OSMReaderTest.testBarriers":32,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":211,"com.graphhopper.routing.PathTest.testFound":101,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":262,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":27,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":43,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":9,"com.graphhopper.util.GHUtilityTest.testCopy":84,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":246,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":325,"com.graphhopper.routing.PathTest.testFindInstruction":106,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":119,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":89,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":212,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":221,"com.graphhopper.util.HelperTest.testCountBitValue":324,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":251,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":300,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":42,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":279,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":317,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":306,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":10,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":82,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":233,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":308,"com.graphhopper.storage.GraphHopperStorageCHTest.testFlags":181,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":134,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":199,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":146,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":223,"com.graphhopper.reader.PrinctonReaderTest.testRead":96,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":318,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":183,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":217,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":241,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":172,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":151,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":247,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":291,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":225,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":195,"com.graphhopper.util.InstructionListTest.testWayList2":94,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":52,"com.graphhopper.reader.OSMReaderTest.testFoot":29,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":265,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":75,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":165,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":261,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":72,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":321,"com.graphhopper.reader.OSMReaderTest.testOneWay":41,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":73,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":204,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":215,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":177,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":237,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetLocations":188,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":303,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":180,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":314,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":313,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":234,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":255,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":150,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":220,"com.graphhopper.storage.GraphHopperStorageTest.testPropertiesWithNoInit":310,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":273,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":257,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":293,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":299,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":33,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":104,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":145,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":56,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":137,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":218,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":142,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":154,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":196,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":143,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":287,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":6,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":81,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":118,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":1,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":70,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":264,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":5,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":240,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":4,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":58,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":3,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":263,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":2,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":80,"com.graphhopper.util.GHUtilityTest.testSort2":83,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":133,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":254,"com.graphhopper.reader.OSMReaderTest.testMain":30,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":202,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":226,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":198,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":170,"com.graphhopper.routing.PathBidirRefTest.testExtract2":109,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":197,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":276,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":120,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":267,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":50,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":76,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":110,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":283,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":326,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":62,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":312,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":189,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":191,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":35,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":44,"com.graphhopper.storage.index.BresenhamLineTest.testLineRightDown2":323,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":272,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":229,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":40,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":136,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":176,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":288,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":148,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":68,"com.graphhopper.storage.GraphHopperStorageTest.testClone":295,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":322,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":205,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":266,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":315,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":304,"com.graphhopper.GraphHopperTest.testFootAndCar":8,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":174,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":248,"com.graphhopper.routing.PathTest.testTime":102,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":245,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":182,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":147,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":77,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":47,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":131,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":259,"com.graphhopper.util.GHUtilityTest.testSortDirected":86,"com.graphhopper.storage.GraphHopperStorageCHTest.testPropertiesWithNoInit":194,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":213,"com.graphhopper.GraphHopperTest.testPrepareOnly":18,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":186,"com.graphhopper.GraphHopperTest.testVia":7,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":282,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":157,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":243,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":130,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":37,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":57,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":45,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":160,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":171,"com.graphhopper.GraphHopperTest.testFootOnly":26,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":95,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":51,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":36,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":274,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":53,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":103,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":185,"com.graphhopper.util.InstructionListTest.testFind":91,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":124,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":141,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":79,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":178,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":207},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"tindex":"329af7bc-8271-11e5-8187-cf2b7d6354fd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:415","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.BaseGraph.getEdgeIteratorState(int, int)"},"variableMap":{"edgeId":"adjNode","adjNode":"origEdgeId","baseGraph":"mainGraph"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:567","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.Graph.getEdgeIteratorState(int, int)"},"status":-1},{"failures":[14,15],"tindex":"329b1ecd-8271-11e5-8187-7d5286bc9e75","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtilBig:101","type":"CtOperatorAssignmentImpl","sourcecode":"byte <<= 1"},"variableMap":{"res":"b"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:156","type":"CtAssignmentImpl","sourcecode":"byte = com.graphhopper.storage.VLongStorage.readByte()"},"status":-1},{"failures":[0,16,17,18,1,2,3,4,5,6,19,7,20,21,8,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,10,11,12,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"tindex":"329b1ece-8271-11e5-8187-27e8cf3e9f34","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.VLongStorage:177","type":"CtAssignmentImpl","sourcecode":"byte[] = byte[]"},"variableMap":{"bytes":"shifts","tmp":"shifts"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:196","type":"CtAssignmentImpl","sourcecode":"byte[] = new byte[int]"},"status":-1},{"failures":[],"tindex":"329b45df-8271-11e5-8187-95adf53db334","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.SRTMProvider:196","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += \"N\""},"variableMap":{"str":"streetName"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.RoundaboutInstruction:141","type":"CtAssignmentImpl","sourcecode":"java.lang.String = com.graphhopper.util.Helper.isEmpty(java.lang.String) ? com.graphhopper.util.Translation.tr(\"roundaboutExit\", com.graphhopper.util.RoundaboutInstruction.getExitNumber()) : com.graphhopper.util.Translation.tr(\"roundaboutExitOnto\", com.graphhopper.util.RoundaboutInstruction.getExitNumber(), java.lang.String)"},"status":-2},{"failures":[0,16,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,17,18,1,2,3,4,5,6,7,20,21,8,22,23,24,25,26,27,96,97,98,28,29,30,31,32,33,34,35,36,37,39,40,41,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,9,127,128,42,129,130,131,132,10,11,133,134,12,135,136,137,138,139,13,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,62,273,274,275,276,277,278,279,280,281,282,283,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322],"tindex":"329b45e0-8271-11e5-8187-7f944d621d26","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.PillarInfo:81","type":"CtLocalVariableImpl","sourcecode":"long long = ((long)(int)) * (int)"},"variableMap":{"rowSizeInBytes":"edgeId","nodeId":"edgeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:197","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.storage.EdgeAccess.toPointer(int)"},"status":-1},{"failures":[110,111,113,115,116],"tindex":"329b6bf1-8271-11e5-8187-a9eeb8a18fe6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.RoundaboutInstruction:59","type":"CtIfImpl","sourcecode":"if ((int) != int) {\n    int = 2;\n} "},"variableMap":{"clockwise2":"nodeIndex","clockwise":"nodeIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:276","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.GraphHopperStorage.markNodeRemoved(int)"},"status":-1},{"failures":[],"tindex":"329b9302-8271-11e5-8187-a150030867d2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:307","type":"CtReturnImpl","sourcecode":"return (int * int) + (int * int)"},"variableMap":{"dx":"intVal","dy":"intVal"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.PillarInfo:93","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.Helper.intToDegree(int)"},"status":-2},{"failures":[],"tindex":"329b9303-8271-11e5-8187-4db87a0a722f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:396","type":"CtAssignmentImpl","sourcecode":"int = (73 * int) + (this.int)"},"variableMap":{"size":"daPointer","hash":"width"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.HeightTile:116","type":"CtOperatorAssignmentImpl","sourcecode":"int += com.graphhopper.reader.dem.HeightTile.includePoint((int - (2 * (int))), java.util.concurrent.atomic.AtomicInteger)"},"status":-2},{"failures":[83,85,21,31],"tindex":"329b9304-8271-11e5-8187-ed62c0d30460","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:263","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    int int = gnu.trove.list.TIntList.get(int);\n    if (com.graphhopper.storage.NodeAccess.is3D())\n        com.graphhopper.storage.NodeAccess.setNode(int, com.graphhopper.storage.NodeAccess.getLatitude(int), com.graphhopper.storage.NodeAccess.getLongitude(int), com.graphhopper.storage.NodeAccess.getElevation(int));\n    else\n        com.graphhopper.storage.NodeAccess.setNode(int, com.graphhopper.storage.NodeAccess.getLatitude(int), com.graphhopper.storage.NodeAccess.getLongitude(int));\n    \n}"},"status":-1},{"failures":[17,19,7,20,21,22,23,24,25,26,28,30,31,32,33,34,35,36,37,38,39,40,41],"tindex":"329b9305-8271-11e5-8187-41b83d6db249","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:598","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.OSMReader.getNodeMap().put(com.graphhopper.reader.OSMNode.getId(), ((int) + 3))"},"status":-1},{"failures":[323],"tindex":"329bba16-8271-11e5-8187-e3b28afbd1d1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:69","type":"CtWhileImpl","sourcecode":"while (!(boolean && boolean)) {\n    if (double < double) {\n        double += double;\n        int += int;\n    } else {\n        double += double;\n        int += int;\n    }\n    com.graphhopper.storage.index.PointEmitter.set(int, int);\n    if (int > 0.0) {\n        if (int >= int)\n            boolean = true;\n        \n    } else if (int <= int) {\n        boolean = true;\n    } \n    if (int > 0.0) {\n        if (int >= int)\n            boolean = true;\n        \n    } else if (int <= int) {\n        boolean = true;\n    } \n}"},"status":-1},{"failures":[18,23,25,170,174,207,290],"tindex":"329bba17-8271-11e5-8187-5170856b26b2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:220","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setHeader((1 * 4), int)"},"status":-1},{"failures":[],"tindex":"329bba18-8271-11e5-8187-0131f3c9b14a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:675","type":"CtOperatorAssignmentImpl","sourcecode":"long |= long"},"variableMap":{"encoded":"nanoTime","backwardBit":"nanoTime"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.StopWatch:57","type":"CtOperatorAssignmentImpl","sourcecode":"long += (java.lang.System.nanoTime()) - (long)"},"status":0},{"failures":[324],"tindex":"329be129-8271-11e5-8187-5d3583365351","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:89","type":"CtIfImpl","sourcecode":"if (double == int)\n    return int;\n"},"status":-1},{"failures":[],"tindex":"329be12a-8271-11e5-8187-09825989aca2","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:225","type":"CtAssertImpl","sourcecode":"assert (int) > 0 : \"call create or loadExisting before usage!\""},"variableMap":{"segmentSizePower":"edgeFrom"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:456","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.TurnCostExtension.addTurnInfo(com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int, com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int, com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int, com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.long)"},"status":-2},{"failures":[325,326],"tindex":"329be12b-8271-11e5-8187-076e9ff3dfe5","series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:515","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.util.Helper.isEmpty(java.lang.String)) && (com.graphhopper.util.Helper.isEmpty(java.lang.String))) {\n    if (com.graphhopper.util.Helper.isEmpty(java.lang.String))\n        throw new java.lang.IllegalArgumentException(\"You need to specify an OSM file.\");\n    \n    java.lang.String = (com.graphhopper.util.Helper.pruneFileEnd(java.lang.String)) + \"-gh\";\n} "},"variableMap":{"graphHopperFolder":"highway","ghLocation":"highway","osmFile":"highway"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:162","type":"CtIfImpl","sourcecode":"if (\"track\".equals(java.lang.String)) {\n    java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"tracktype\");\n    if (\"grade1\".equals(java.lang.String))\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(50.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    else if (java.lang.String == null)\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(90.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    else if (java.lang.String.startsWith(\"grade\"))\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(100.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    \n} "},"status":-1},{"failures":[17,18,19,7,20,21,8,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],"tindex":"329c083c-8271-11e5-8187-2d4a0f1a0c84","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:67","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.OSMElement.setTag(java.lang.String, java.lang.String)"},"status":-1},{"failures":[],"tindex":"329c083d-8271-11e5-8187-5595b5f0f9cc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PMap:56","type":"CtIfImpl","sourcecode":"if (int < 0)\n    continue;\n"},"variableMap":{"index":"max"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:335","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    com.graphhopper.util.PointList.add(double[][(2 * int)], double[][((2 * int) + 1)], java.lang.Double.double);\n}"},"status":-2},{"failures":[],"tindex":"329c083e-8271-11e5-8187-c3831a610962","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:91","type":"CtUnaryOperatorImpl","sourcecode":"(long)++"},"variableMap":{"size":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtil:212","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= 1"},"status":0},{"failures":[],"tindex":"329c083f-8271-11e5-8187-1f6fe07ecae9","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:182","type":"CtIfImpl","sourcecode":"if (int <= 0) {\n    throw new java.lang.IllegalStateException(\"check your graph - it is empty!\");\n} "},"variableMap":{"locs":"newSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:156","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.incCap(int)"},"status":0}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"329bba18-8271-11e5-8187-0131f3c9b14a","diffs":[{"methodsDiff":{"delete":["java.lang.System.nanoTime"]},"type":"staticDiff"}]}]}
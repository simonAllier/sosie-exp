{"failureDictionary":{"com.graphhopper.util.GHUtilityTest.testSort2":76,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidTunnel":39,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":60,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":72,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":45,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTram":17,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPreferenceForSlowSpeed":12,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":41,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":36,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":56,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testService":27,"com.graphhopper.routing.PathTest.testWayList":58,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":85,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTram":28,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":3,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":20,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":10,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidanceOfHighMaxSpeed":26,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":50,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":81,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":57,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":75,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":52,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":21,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":66,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":1,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":82,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":13,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":54,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidMotorway":9,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":67,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":69,"com.graphhopper.storage.GraphHopperStorageTest.testClone":80,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTram":7,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":51,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":71,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":68,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPreferenceForSlowSpeed":22,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":65,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidTunnel":18,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":53,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":6,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":2,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":11,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":16,"com.graphhopper.routing.util.BikeFlagEncoderTest.testclassBicycle":35,"com.graphhopper.util.GHUtilityTest.testSort":78,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":61,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":46,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidMotorway":19,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidMotorway":40,"com.graphhopper.util.InstructionListTest.testWayList":63,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":91,"com.graphhopper.routing.util.BikeFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":34,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":83,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":49,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":30,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":33,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":25,"com.graphhopper.reader.OSMReaderTest.testRelation":44,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":5,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":32,"com.graphhopper.util.GHUtilityTest.testSortDirected":79,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":86,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidMotorway":29,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPreferenceForSlowSpeed":43,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":42,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":59,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":47,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidTunnel":8,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":15,"com.graphhopper.reader.dem.HeightTileTest.testCalcMean":0,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":62,"com.graphhopper.GraphHopperAPITest.testLoad":64,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":88,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":37,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":55,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":89,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":74,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":90,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidTunnel":23,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTram":38,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":70,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":87,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testclassBicycle":4,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":14,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":84,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testclassBicycle":24,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":48,"com.graphhopper.util.GHUtilityTest.testCopy":77,"com.graphhopper.reader.OSMReaderTest.testSort":73,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPreferenceForSlowSpeed":31},"transformations":[{"failures":[0],"tindex":"820edbbf-7929-11e5-87ff-6ba99a4dd9eb","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.VirtualEdgeIterator:45","type":"CtAssignmentImpl","sourcecode":"int = -1"},"variableMap":{"current":"daPointer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.HeightTile:119","type":"CtOperatorAssignmentImpl","sourcecode":"int += com.graphhopper.reader.dem.HeightTile.includePoint((int + (2 * (int))), java.util.concurrent.atomic.AtomicInteger)"},"status":-1},{"failures":[],"tindex":"820f02d0-7929-11e5-87ff-2d4f05e316fa","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:127","type":"CtReturnImpl","sourcecode":"return ~long"},"variableMap":{"high":"acceptBit"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:231","type":"CtReturnImpl","sourcecode":"return long"},"status":-2},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"tindex":"820f29e1-7929-11e5-87ff-2b9132ae8136","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:458","type":"CtAssignmentImpl","sourcecode":"int = 8"},"variableMap":{"bytesForFlags":"encoderCount"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:197","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.routing.util.AbstractFlagEncoder.defineRelationBits(int, int)"},"status":-1},{"failures":[],"tindex":"820f29e2-7929-11e5-87ff-3558f4b3edb1","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PMap:111","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.util.Helper.isEmpty(java.lang.String))) {\n    try {\n        return java.lang.Boolean.parseBoolean(java.lang.String);\n    } catch (java.lang.Exception ex) {\n    }\n} "},"variableMap":{"str":"sacScale"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:298","type":"CtReturnImpl","sourcecode":"return \"hiking\".equals(java.lang.String)"},"status":-2},{"failures":[45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"tindex":"820f29e3-7929-11e5-87ff-9f03dc6e7d7f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:884","type":"CtIfImpl","sourcecode":"if ((int & 2) != 0)\n    com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n"},"status":-1},{"failures":[],"tindex":"820f29e4-7929-11e5-87ff-ef770cf99938","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.TurnWeighting:78","type":"CtLocalVariableImpl","sourcecode":"double double"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:172","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.EdgeIteratorState.getDistance()"},"status":-2},{"failures":[73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91],"tindex":"820f50f5-7929-11e5-87ff-f7ec8c9ab75e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:256","type":"CtAssignmentImpl","sourcecode":"int = -1"},"status":-1},{"failures":[],"tindex":"820f50f6-7929-11e5-87ff-37b423bf29d9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.PathBidirRef:75","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry"},"variableMap":{"edgeTo":"edgeTo","edgeEntry":"edgeTo"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:315","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.PathBidirRef.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge"},"status":-2},{"failures":[],"tindex":"820f50f7-7929-11e5-87ff-7574e5e4d176","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:406","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.close()"},"variableMap":{"originalEdges":"da"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDMap:110","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.getBytes(long, byte[], 8)"},"status":-2},{"failures":[],"tindex":"820f50f8-7929-11e5-87ff-3d3ee88829fa","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalc2D:56","type":"CtLocalVariableImpl","sourcecode":"double double = double - double"},"variableMap":{"fromX":"maxLonTmp","toX":"maxLonTmp"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:184","type":"CtLocalVariableImpl","sourcecode":"double double = (double + double) / 2"},"status":-2},{"failures":[],"tindex":"820f50f9-7929-11e5-87ff-0570adf354a2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:295","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.routing.util.FlagEncoder com.graphhopper.routing.util.FlagEncoder : java.util.List<com.graphhopper.routing.util.FlagEncoder>) {\n    if ((com.graphhopper.routing.util.FlagEncoder.isBackward(com.graphhopper.util.EdgeIterator.getFlags())) || (com.graphhopper.routing.util.FlagEncoder.isForward(com.graphhopper.util.EdgeIterator.getFlags())))\n        return false;\n    \n}"},"variableMap":{"encoders":"encoders","iter":"iter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:292","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    for (com.graphhopper.routing.util.FlagEncoder com.graphhopper.routing.util.FlagEncoder : java.util.List<com.graphhopper.routing.util.FlagEncoder>) {\n        if ((com.graphhopper.routing.util.FlagEncoder.isBackward(com.graphhopper.util.EdgeIterator.getFlags())) || (com.graphhopper.routing.util.FlagEncoder.isForward(com.graphhopper.util.EdgeIterator.getFlags())))\n            return false;\n        \n    }\n}"},"status":-2},{"failures":[],"tindex":"820f780a-7929-11e5-87ff-b3d1efb9c5fc","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:158","type":"CtAssignmentImpl","sourcecode":"int = 16"},"variableMap":{"tmpNo":"lon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:117","type":"CtAssignmentImpl","sourcecode":"int = -int"},"status":-2},{"failures":[],"tindex":"820f780b-7929-11e5-87ff-b1ce41586cf7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:538","type":"CtAssignmentImpl","sourcecode":"double = java.lang.Math.round(((double / double) / 1.4))"},"variableMap":{"val":"speed","shortTripsSpeed":"speed","durationInHours":"speed"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:317","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.routing.util.AbstractFlagEncoder.getMaxSpeed()"},"status":-2},{"failures":[],"tindex":"820f780c-7929-11e5-87ff-97290c0cc75f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.Dijkstra:64","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AbstractRoutingAlgorithm.createEdgeEntry(int, 0)"},"variableMap":{"currEdge":"currTo","this":"this","from":"to"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:98","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AbstractRoutingAlgorithm.createEdgeEntry(int, double)"},"status":-2},{"failures":[],"tindex":"820f780d-7929-11e5-87ff-3d568fde0f30","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:334","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.util.PointList com.graphhopper.util.PointList = new com.graphhopper.util.PointList(int , false)"},"variableMap":{"max":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:349","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.util.PointList com.graphhopper.util.PointList = new com.graphhopper.util.PointList(int , boolean)"},"status":-2},{"failures":[],"tindex":"820f9f1e-7929-11e5-87ff-33740aa6dfde","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:661","type":"CtIfImpl","sourcecode":"if (int >= int)\n    com.graphhopper.coll.SparseIntIntArray.put(int, int);\n"},"variableMap":{"oldToNewMap":"oldToNewMap","toMoveNodes":"com.graphhopper.storage.EdgeAccess.NO_NODE","removeNode":"itemsToMove"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:697","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    int int = com.graphhopper.coll.SparseIntIntArray.keyAt(int);\n    com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n        if (int == (com.graphhopper.storage.EdgeAccess.int))\n            continue;\n        \n        if (com.graphhopper.coll.GHBitSet.contains(int))\n            throw new java.lang.IllegalStateException((((\"shouldn\\'t happen the edge to the node \" + int) + \" should be already deleted. \") + int));\n        \n        com.graphhopper.coll.GHBitSet.add(int);\n    }\n}"},"status":-2},{"failures":[],"tindex":"820f9f1f-7929-11e5-87ff-65886ed9dd5a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:225","type":"CtIfImpl","sourcecode":"if (long <= 0) {\n    throw new java.lang.IllegalStateException((\"invalid bitmask:\" + long));\n} "},"variableMap":{"bm":"sumBytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Unzipper:75","type":"CtTryImpl","sourcecode":"try {\n    int int;\n    while ((int = java.util.zip.ZipInputStream.read(byte[])) > 0) {\n        java.io.FileOutputStream.write(byte[], 0, int);\n        long += int * double;\n        if (com.graphhopper.util.ProgressListener != null)\n            com.graphhopper.util.ProgressListener.update(long);\n        \n    }\n} finally {\n    java.io.FileOutputStream.close();\n}"},"status":-2},{"failures":[],"tindex":"820f9f20-7929-11e5-87ff-2fdf06121e48","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:837","type":"CtBreakImpl","sourcecode":"break"},"status":-2},{"failures":[],"tindex":"820f9f21-7929-11e5-87ff-69b4d6d787b1","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Downloader:119","type":"CtLocalVariableImpl","sourcecode":"int int = 8 * 1024"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.RoundaboutInstruction:133","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.util.Instruction.getSign()"},"status":-2},{"failures":[],"tindex":"820f9f22-7929-11e5-87ff-9389019adb43","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:102","type":"CtIfImpl","sourcecode":"if (double > ((+(java.lang.Math.double)) + double))\n    double = double - (2 * (java.lang.Math.double));\nelse\n    double = double;\n"},"variableMap":{"orientation":"dist","resultOrientation":"weight","baseOrientation":"dist","java.lang.Math.PI":"weight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:660","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.CHEdgeIterator.next()) {\n    if (((com.graphhopper.util.CHEdgeIterator.isShortcut()) && ((com.graphhopper.util.CHEdgeIterator.getAdjNode()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) && (com.graphhopper.util.CHEdgeIterator.canBeOverwritten(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long))) {\n        if ((com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double) >= (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.CHEdgeIterator, false, com.graphhopper.util.EdgeIterator.int)))\n            continue NEXT_SC;\n        \n        if (((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) || ((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) {\n            throw new java.lang.IllegalStateException((((((((((((((((((\"Shortcut cannot update itself! \" + (com.graphhopper.util.CHEdgeIterator.getEdge())) + \", skipEdge1:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", skipEdge2:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", edge \") + com.graphhopper.util.CHEdgeIterator) + \":\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.CHEdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", sc:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut) + \", skippedEdge1: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", skippedEdge2: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", neighbors:\") + (com.graphhopper.util.GHUtility.getNeighbors(com.graphhopper.util.CHEdgeIterator))));\n        } \n        com.graphhopper.util.CHEdgeIterator.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n        com.graphhopper.util.CHEdgeIterator.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIterator.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIterator.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIterator.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        boolean = true;\n        break;\n    } \n}"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
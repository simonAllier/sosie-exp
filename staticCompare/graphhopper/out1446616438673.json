{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":237,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":265,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":273,"com.graphhopper.routing.util.EncodedDoubleValueTest.testMaxValueAndSwap":2,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":107,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":119,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":57,"com.graphhopper.reader.OSMReaderTest.testFerry":276,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":169,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":170,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":262,"com.graphhopper.routing.QueryGraphTest.testOneWay":272,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":48,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":288,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":190,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":29,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":103,"com.graphhopper.geohash.SpatialKeyAlgoTest.testOddBits":286,"com.graphhopper.reader.OSMReaderTest.testWithBounds":17,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":65,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":200,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":267,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":201,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":247,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":182,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":77,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":47,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":81,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":255,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":75,"com.graphhopper.GraphHopperTest.testPrepare":191,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":236,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":148,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":159,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":243,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":270,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":219,"com.graphhopper.util.InstructionListTest.testWayList":176,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":175,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":228,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":27,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":181,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":30,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":205,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":26,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":62,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":195,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":102,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":202,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":220,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":225,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":104,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":215,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":281,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":13,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":204,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":38,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":210,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":68,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":76,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":192,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":83,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":140,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":144,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":142,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":141,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":258,"com.graphhopper.GraphHopperTest.testLoadOSM":194,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":111,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":256,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":90,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":34,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":105,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":162,"com.graphhopper.reader.OSMReaderTest.testSort":277,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":231,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":203,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":278,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":146,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":252,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":94,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":95,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":22,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":124,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":241,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":269,"com.graphhopper.coll.GHTBitSetTest.testClear":3,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":279,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":209,"com.graphhopper.routing.PathTest.testWayList":213,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":64,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":99,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testAcceptsCar":0,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":42,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":242,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":153,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBits":285,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":218,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":226,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":264,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":89,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":44,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":129,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":28,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":125,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":130,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":152,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":100,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":158,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":233,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointCount":291,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":23,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":214,"com.graphhopper.util.GHUtilityTest.testSort":173,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":63,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":108,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":271,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":223,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":222,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":145,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":120,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":138,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":78,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":31,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":268,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":208,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":196,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":161,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":117,"com.graphhopper.GraphHopperAPITest.testLoad":275,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":193,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":240,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":156,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":199,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":150,"com.graphhopper.reader.OSMReaderTest.testBarriers":11,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":126,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":206,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":71,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":8,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":85,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":60,"com.graphhopper.util.GHUtilityTest.testCopy":172,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":224,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":292,"com.graphhopper.routing.PathTest.testFindInstruction":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":216,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":127,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":180,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":134,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":155,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":227,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":118,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":232,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":143,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":160,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":235,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":53,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":135,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":249,"com.graphhopper.reader.PrinctonReaderTest.testRead":280,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":167,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":41,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":131,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":287,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":56,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":32,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":147,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":254,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":261,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":136,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":49,"com.graphhopper.util.InstructionListTest.testWayList2":177,"com.graphhopper.reader.OSMReaderTest.testFoot":9,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":74,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":70,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":112,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":274,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":109,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":289,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":168,"com.graphhopper.reader.OSMReaderTest.testOneWay":18,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":110,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":21,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":36,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":157,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":207,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":39,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":165,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":164,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":66,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":133,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":253,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":67,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":149,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":154,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":12,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":212,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":248,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":96,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":239,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":132,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxValue":1,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":50,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":245,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":257,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":79,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":246,"com.graphhopper.routing.PathBidirRefTest.testExtract":259,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":179,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":189,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":197,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":184,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":73,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":188,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":98,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":187,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":72,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":186,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":185,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":116,"com.graphhopper.util.GHUtilityTest.testSort2":171,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":234,"com.graphhopper.reader.OSMReaderTest.testMain":10,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":54,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":137,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode":290,"com.graphhopper.util.BitUtilLittleTest.testToLastBitString":284,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":52,"com.graphhopper.routing.PathBidirRefTest.testExtract2":260,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":51,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":84,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":217,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":91,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":25,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":113,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":122,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":198,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":101,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":163,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":45,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":46,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":14,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":86,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":139,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":282,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":35,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":80,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":238,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":251,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":106,"com.graphhopper.storage.GraphHopperStorageTest.testClone":151,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":55,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":166,"com.graphhopper.util.DouglasPeuckerTest.testPathSimplify":293,"com.graphhopper.GraphHopperTest.testFootAndCar":6,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":33,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":24,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":61,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":59,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":40,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":250,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":114,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":88,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":69,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":230,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":128,"com.graphhopper.util.GHUtilityTest.testSortDirected":174,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":43,"com.graphhopper.GraphHopperTest.testPrepareOnly":183,"com.graphhopper.GraphHopperTest.testVia":5,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":121,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":263,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":58,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":229,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":16,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":97,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":87,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":266,"com.graphhopper.GraphHopperTest.testFootOnly":7,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":178,"com.graphhopper.util.BitUtilBigTest.testToLastBitString":283,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":92,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":15,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":82,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":93,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":211,"com.graphhopper.util.InstructionListTest.testFind":19,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":221,"com.graphhopper.coll.GHTBitSetTest.testCopy":4,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":244,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":37,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":115,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":123},"transformations":[{"failures":[],"tindex":"710cdd87-82b8-11e5-b45f-d5a7dba10bdd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:614","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GraphHopper.printInfo()"},"status":0},{"failures":[],"tindex":"710d0498-82b8-11e5-b45f-03e10623769a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:577","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.CHGraphImpl.this.getWeight(this)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:419","type":"CtReturnImpl","sourcecode":"return 50"},"status":-2},{"failures":[0,1,2],"tindex":"710d0499-82b8-11e5-b45f-094f7960b74e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:134","type":"CtAssignmentImpl","sourcecode":"java.lang.String = \"NE\""},"variableMap":{"cp":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:431","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(0, int).trim()"},"status":-1},{"failures":[3,4],"tindex":"710d049a-82b8-11e5-b45f-e34f3d16ddc2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(5);\n} catch (java.lang.InterruptedException iex) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHTBitSet:74","type":"CtInvocationImpl","sourcecode":"gnu.trove.set.hash.TIntHashSet.clear()"},"status":-1},{"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18],"tindex":"710d049b-82b8-11e5-b45f-c7c1969d43b7","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:572","type":"CtIfImpl","sourcecode":"if (long != 0)\n    com.graphhopper.reader.OSMReader.getNodeFlagsMap().put(com.graphhopper.reader.OSMNode.getId(), long);\n"},"variableMap":{"node":"node","this":"this","nodeFlags":"locations"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:564","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMReader.isInBounds(com.graphhopper.reader.OSMNode)) {\n    com.graphhopper.reader.OSMReader.addNode(com.graphhopper.reader.OSMNode);\n    if (com.graphhopper.reader.OSMNode.hasTags()) {\n        long long = com.graphhopper.routing.util.EncodingManager.handleNodeTags(com.graphhopper.reader.OSMNode);\n        if (long != 0)\n            com.graphhopper.reader.OSMReader.getNodeFlagsMap().put(com.graphhopper.reader.OSMNode.getId(), long);\n        \n    } \n    (long)++;\n} else {\n    (long)++;\n}"},"status":-1},{"failures":[19,20],"tindex":"710d049c-82b8-11e5-b45f-5bc3f1a8a89f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:119","type":"CtOperatorAssignmentImpl","sourcecode":"double += 2 * (java.lang.Math.double)"},"variableMap":{"orientation":"foundMinDistance","java.lang.Math.PI":"distance"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:322","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-1},{"failures":[],"tindex":"710d2bad-82b8-11e5-b45f-59bd92e4e3c2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.EdgeAccess:185","type":"CtIfImpl","sourcecode":"if (int > int) {\n    int int = int;\n    int = int;\n    int = int;\n    int = int;\n    int = int;\n    int = int;\n} "},"variableMap":{"nodeThis":"maxTurnCosts","nextEdgeOther":"maxTurnCosts","nodeOther":"maxTurnCosts","nextEdge":"maxTurnCosts"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:683","type":"CtIfImpl","sourcecode":"if ((double >= (int)) || boolean)\n    double = int;\n"},"status":-2},{"failures":[],"tindex":"710d2bae-82b8-11e5-b45f-ed8125502e60","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:536","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(40.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"variableMap":{"weightToPrioMap":"weightToPrioMap","com.graphhopper.routing.util.PriorityCode.PREFER":"com.graphhopper.routing.util.PriorityCode.AVOID_AT_ALL_COSTS"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:562","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(50.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"status":-2},{"failures":[],"tindex":"710d2baf-82b8-11e5-b45f-7d1041b2738e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.QueryGraph:585","type":"CtIfImpl","sourcecode":"if ((int % 2) == 0)\n    int++;\nelse\n    int--;\n"},"variableMap":{"edgeId":"length"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.CompressedArray:138","type":"CtTryImpl","sourcecode":"try {\n    com.graphhopper.storage.VLongStorage.trimToSize();\n    byte[] byte[] = com.graphhopper.storage.VLongStorage.getBytes();\n    java.util.List<byte[]>.add(com.graphhopper.coll.CompressedArray.com.graphhopper.coll.CompressedArray.compress(byte[], 0, byte[].int, int));\n    com.graphhopper.storage.VLongStorage = null;\n    int = 0;\n} catch (java.lang.Exception ex) {\n    throw new java.lang.RuntimeException(java.lang.Exception);\n}"},"status":-2},{"failures":[21,22,23,24,25,26,27,28,29],"tindex":"710d2bb0-82b8-11e5-b45f-29c21323b298","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.Path:642","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += \"->\""},"variableMap":{"str":"message"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionAnnotation:53","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = \"\""},"status":-1},{"failures":[30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,19,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,5,191,192,6,193,194,195,196,7,8,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,20,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,9,10,277,11,12,13,14,15,16,278,17,18,279,280,281],"tindex":"710d2bb1-82b8-11e5-b45f-113cad6583ce","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:50","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"status":-1},{"failures":[182,183,190,5,191,192,6,193,194,195,196,7,8,276,9,10,277,11,12,13,14,15,16,278,17,282,18],"tindex":"710d52c2-82b8-11e5-b45f-11ada0d2c61a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:303","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.OSMReader.processWay(((com.graphhopper.reader.OSMWay)(com.graphhopper.reader.OSMElement)))"},"status":-1},{"failures":[],"tindex":"710d52c3-82b8-11e5-b45f-d7f9c050c190","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.MapEntry:92","type":"CtLocalVariableImpl","sourcecode":"int int = 7"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:234","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.coll.GHTreeMapComposed.getSize()"},"status":-2},{"failures":[283,284,285,286,287,288,289,290],"tindex":"710d52c4-82b8-11e5-b45f-fbb97c9f70a8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionList:218","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"\\n<trkpt lat=\\'\")"},"variableMap":{"track":"sb"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtil:210","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('1')"},"status":-1},{"failures":[291,292,293,232,233,236],"tindex":"710d52c5-82b8-11e5-b45f-dbd1156fc02b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:109","type":"CtReturnImpl","sourcecode":"return double"},"variableMap":{"val":"tmp"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistancePlaneProjection:58","type":"CtReturnImpl","sourcecode":"return double * double"},"status":-1},{"failures":[],"tindex":"710d79d6-82b8-11e5-b45f-f930530ddb14","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:915","type":"CtLocalVariableImpl","sourcecode":"long long = -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:250","type":"CtLocalVariableImpl","sourcecode":"long long = java.lang.Math.round((((com.graphhopper.coll.GHTreeMapComposed.getSize()) / 100.0) * (int)))"},"status":-2},{"failures":[184,185,186,187,188,189,5,191,192,6,193,194,196,7,216,217,218,219,220,221,222,223,224,225,226,227,228,229,231,232,233,234,235,236,239,240,241,242,243,245,251,252,253,254,258,275],"tindex":"710d79d7-82b8-11e5-b45f-f944db5c4aef","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:163","type":"CtIfImpl","sourcecode":"if (int > 255)\n    int = 255;\n"},"variableMap":{"red":"traversalId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:225","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.DijkstraBidirectionRef.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.EdgeEntry, int)"},"status":-1},{"failures":[],"tindex":"710d79d8-82b8-11e5-b45f-71b667ec40fc","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:121","type":"CtIfImpl","sourcecode":"if (long == long) {\n    int = (int * (int)) + int;\n    break;\n} else if (long > long) {\n    break;\n} "},"variableMap":{"ret":"origPoints","retBucket":"origPoints","i":"origPoints","storedKey":"fullTimeInMillis","bucketSize":"origPoints","key":"fullTimeInMillis"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:49","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (java.util.List<com.graphhopper.routing.Path>.size()) ; int++) {\n    com.graphhopper.routing.Path com.graphhopper.routing.Path = java.util.List<com.graphhopper.routing.Path>.get(int);\n    long += com.graphhopper.routing.Path.getTime();\n    double += com.graphhopper.routing.Path.getDistance();\n    double += com.graphhopper.routing.Path.getWeight();\n    if (boolean) {\n        com.graphhopper.util.InstructionList com.graphhopper.util.InstructionList = com.graphhopper.routing.Path.calcInstructions(com.graphhopper.util.Translation);\n        if (!(com.graphhopper.util.InstructionList.isEmpty())) {\n            if (com.graphhopper.util.PointList.isEmpty()) {\n                com.graphhopper.util.PointList com.graphhopper.util.PointList = com.graphhopper.util.InstructionList.get(0).getPoints();\n                com.graphhopper.util.PointList = new com.graphhopper.util.PointList(((com.graphhopper.util.InstructionList.size()) * (java.lang.Math.min(10, com.graphhopper.util.PointList.size()))) , com.graphhopper.util.PointList.is3D());\n            } \n            for (com.graphhopper.util.Instruction com.graphhopper.util.Instruction : com.graphhopper.util.InstructionList) {\n                if (boolean) {\n                    int += com.graphhopper.util.Instruction.getPoints().size();\n                    com.graphhopper.util.DouglasPeucker.simplify(com.graphhopper.util.Instruction.getPoints());\n                } \n                com.graphhopper.util.InstructionList.add(com.graphhopper.util.Instruction);\n                com.graphhopper.util.PointList.add(com.graphhopper.util.Instruction.getPoints());\n            }\n            if ((int + 1) < (java.util.List<com.graphhopper.routing.Path>.size())) {\n                com.graphhopper.util.ViaInstruction com.graphhopper.util.ViaInstruction = new com.graphhopper.util.ViaInstruction(com.graphhopper.util.InstructionList.get(((com.graphhopper.util.InstructionList.size()) - 1)));\n                com.graphhopper.util.ViaInstruction.setViaCount((int + 1));\n                com.graphhopper.util.InstructionList.replaceLast(com.graphhopper.util.ViaInstruction);\n            } \n        } \n    } else if (boolean) {\n        com.graphhopper.util.PointList com.graphhopper.util.PointList = com.graphhopper.routing.Path.calcPoints();\n        if (com.graphhopper.util.PointList.isEmpty())\n            com.graphhopper.util.PointList = new com.graphhopper.util.PointList(com.graphhopper.util.PointList.size() , com.graphhopper.util.PointList.is3D());\n        \n        if (boolean) {\n            int = com.graphhopper.util.PointList.getSize();\n            com.graphhopper.util.DouglasPeucker.simplify(com.graphhopper.util.PointList);\n        } \n        com.graphhopper.util.PointList.add(com.graphhopper.util.PointList);\n    } \n    boolean = boolean && (com.graphhopper.routing.Path.isFound());\n}"},"status":-2},{"failures":[],"tindex":"710da0e9-82b8-11e5-b45f-953f9a9b8ff2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:591","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.util.CmdArgs.getInt(\"index.maxRegionSearch\", int)"},"status":0},{"failures":[],"tindex":"710da0ea-82b8-11e5-b45f-c1c5ffdf7691","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:538","type":"CtAssignmentImpl","sourcecode":"double = java.lang.Math.round(((double / double) / 1.4))"},"variableMap":{"val":"lonDelta","shortTripsSpeed":"maxLon","durationInHours":"lonDelta"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.LinearKeyAlgo:58","type":"CtAssignmentImpl","sourcecode":"double = ((com.graphhopper.util.shapes.BBox.double) - (com.graphhopper.util.shapes.BBox.double)) / (int)"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"710da0e9-82b8-11e5-b45f-953f9a9b8ff2","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.PMap.getInt"]},"type":"staticDiff"}]},{"transformation":"710cdd87-82b8-11e5-b45f-d5a7dba10bdd","diffs":[{"branches":{"com.graphhopper.reader.OSMReaderTest.testNegativeIds":["com.graphhopper.GraphHopper_void_printInfo().b","com.graphhopper.util.Constants_java.lang.String_getVersions().b","com.graphhopper.GraphHopper_void_printInfo().t1"],"com.graphhopper.GraphHopperTest.testFootAndCar":["com.graphhopper.GraphHopper_void_printInfo().b","com.graphhopper.util.Constants_java.lang.String_getVersions().b","com.graphhopper.GraphHopper_void_printInfo().t1"]},"type":"branch"},{"methodsDiff":{"delete":["com.graphhopper.GraphHopper.printInfo"]},"type":"staticDiff"}]}]}
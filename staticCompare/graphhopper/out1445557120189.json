{"failureDictionary":{"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":20,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":88,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":28,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":140,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":149,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":176,"com.graphhopper.reader.OSMReaderTest.testFerry":4,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":116,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":117,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":17,"com.graphhopper.routing.QueryGraphTest.testOneWay":27,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":243,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":145,"com.graphhopper.reader.OSMReaderTest.testWithBounds":13,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":23,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":35,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":184,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":36,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":225,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":56,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":188,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":264,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":94,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":133,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":64,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":137,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":244,"com.graphhopper.GraphHopperTest.testPrepare":102,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":196,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":87,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":257,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":52,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":268,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":25,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":70,"com.graphhopper.util.InstructionListTest.testWayList":113,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":79,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":112,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":125,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":40,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":224,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":107,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":144,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":37,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":71,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":76,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":146,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":3,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":51,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":10,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":39,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":43,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":234,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":197,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":103,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":129,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":216,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":222,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":218,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":66,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":217,"com.graphhopper.GraphHopperTest.testLoadOSM":106,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":153,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":163,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":147,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":230,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":271,"com.graphhopper.reader.OSMReaderTest.testSort":7,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":82,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":38,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":276,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":61,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":254,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":167,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":168,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":200,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":92,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":1,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":42,"com.graphhopper.routing.PathTest.testWayList":48,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":221,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":172,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":183,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":237,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":93,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeReturn":250,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":262,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":69,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":19,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":77,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":162,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":205,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":240,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":201,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":206,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":261,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":173,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":255,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":267,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":84,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":50,"com.graphhopper.util.GHUtilityTest.testSort":122,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":181,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":26,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":150,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":74,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":73,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":223,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":141,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":131,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":213,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":134,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":24,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":251,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":132,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":108,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":199,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":269,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":138,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":208,"com.graphhopper.GraphHopperAPITest.testLoad":126,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":105,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":91,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":265,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":34,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":259,"com.graphhopper.reader.OSMReaderTest.testBarriers":8,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":41,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":202,"com.graphhopper.routing.PathTest.testFound":44,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":190,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":110,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":75,"com.graphhopper.util.GHUtilityTest.testCopy":121,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":179,"com.graphhopper.routing.PathTest.testFindInstruction":49,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":67,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":124,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":203,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":210,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":182,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":263,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":78,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":139,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":277,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":83,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":119,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":219,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":86,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":249,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":58,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":211,"com.graphhopper.reader.PrinctonReaderTest.testRead":2,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":278,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":214,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":175,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":228,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":16,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":63,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":256,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":212,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":245,"com.graphhopper.util.InstructionListTest.testWayList2":114,"com.graphhopper.reader.OSMReaderTest.testFoot":5,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":193,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":29,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":154,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":189,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":151,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":279,"com.graphhopper.reader.OSMReaderTest.testOneWay":15,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":152,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":232,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":266,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":235,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":274,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":273,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":220,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":185,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":62,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":209,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":127,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":186,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":258,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":9,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":47,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":57,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":90,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":169,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":207,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":54,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":65,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":246,"com.graphhopper.routing.PathBidirRefTest.testExtract":30,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":55,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":135,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":100,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":118,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":32,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":95,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":192,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":99,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":98,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":171,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":97,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":191,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":96,"com.graphhopper.util.GHUtilityTest.testSort2":120,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":158,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":85,"com.graphhopper.reader.OSMReaderTest.testMain":6,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":21,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":252,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":248,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":226,"com.graphhopper.routing.PathBidirRefTest.testExtract2":31,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":247,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":130,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":68,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":195,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":164,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":33,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":143,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":155,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":174,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":272,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":241,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":242,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":0,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":159,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":215,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":14,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":89,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":136,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":231,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":60,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":148,"com.graphhopper.storage.GraphHopperStorageTest.testClone":260,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":194,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":253,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":275,"com.graphhopper.GraphHopperTest.testFootAndCar":104,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":270,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":229,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":180,"com.graphhopper.routing.PathTest.testTime":45,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":178,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":236,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":59,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":156,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":161,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":81,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":187,"com.graphhopper.util.GHUtilityTest.testSortDirected":123,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":204,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":239,"com.graphhopper.GraphHopperTest.testVia":101,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":142,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":18,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":177,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":80,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":12,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":170,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":160,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":22,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":227,"com.graphhopper.GraphHopperTest.testFootOnly":109,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":115,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":165,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":11,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":128,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":166,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":46,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":238,"com.graphhopper.util.InstructionListTest.testFind":111,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":72,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":53,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":157,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":198,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":233},"transformations":[{"failures":[0],"tindex":"06096b26-7916-11e5-8c7d-69d7e61f498b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:119","type":"CtReturnImpl","sourcecode":"return ~(long + long)"},"variableMap":{"len":"toOsmWayId","start":"toOsmWayId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMTurnRelation:68","type":"CtReturnImpl","sourcecode":"return long"},"status":-1},{"failures":[1,2,3,4,5,6,7,8,9,10,0,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279],"tindex":"0609b947-7916-11e5-8c7d-4798a6a35428","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:704","type":"CtAssignmentImpl","sourcecode":"int = -1"},"variableMap":{"lastInBoundsPillarNode":"E_NODEB"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:47","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"status":-1},{"failures":[],"tindex":"0609e058-7916-11e5-8c7d-651e80315043","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntIntBinHeap:235","type":"CtAssignmentImpl","sourcecode":"this.int = 0"},"variableMap":{"size":"minutes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:496","type":"CtAssignmentImpl","sourcecode":"int = ((java.lang.Integer.parseInt(java.lang.String)) * 60) * 24"},"status":-2},{"failures":[],"tindex":"0609e059-7916-11e5-8c7d-e9401fc5020d","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:475","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(0.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"variableMap":{"weightToPrioMap":"weightToPrioMap","com.graphhopper.routing.util.PriorityCode.UNCHANGED":"com.graphhopper.routing.util.PriorityCode.UNCHANGED"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.RacingBikeFlagEncoder:152","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(40.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"status":-2},{"failures":[],"tindex":"0609e05a-7916-11e5-8c7d-d95345d4fdf3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:121","type":"CtReturnImpl","sourcecode":"return java.lang.Math.toDegrees(double)"},"variableMap":{"orientation":"com.graphhopper.util.DistanceCalcEarth.R"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:62","type":"CtReturnImpl","sourcecode":"return ((com.graphhopper.util.DistanceCalcEarth.double) * 2) * java.lang.Math.(java.lang.Math.asin(java.lang.Math.java.lang.Math.sqrt(double)))"},"status":-2},{"failures":[],"tindex":"060a076b-7916-11e5-8c7d-29850aadd0ef","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:614","type":"CtIfImpl","sourcecode":"if (java.lang.Double.isInfinite(double))\n    continue;\n"},"variableMap":{"existingDirectWeight":"weightLimit"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1029","type":"CtForImpl","sourcecode":"for (int int = 1 ; int < (java.util.List<com.graphhopper.util.shapes.GHPoint>.size()) ; int++) {\n    if (int == 1) {\n        com.graphhopper.routing.QueryGraph.enforceHeading(com.graphhopper.storage.index.QueryResult.getClosestNode(), com.graphhopper.GHRequest.getFavoredHeading(0), false);\n    } else if (boolean) {\n        com.graphhopper.util.EdgeIteratorState com.graphhopper.util.EdgeIteratorState = java.util.List<com.graphhopper.routing.Path>.get((int - 2)).getFinalEdge();\n        com.graphhopper.routing.QueryGraph.enforceHeadingByEdgeId(com.graphhopper.storage.index.QueryResult.getClosestNode(), com.graphhopper.util.EdgeIteratorState.getEdge(), false);\n    } \n    com.graphhopper.storage.index.QueryResult com.graphhopper.storage.index.QueryResult = java.util.List<com.graphhopper.storage.index.QueryResult>.get(int);\n    com.graphhopper.routing.QueryGraph.enforceHeading(com.graphhopper.storage.index.QueryResult.getClosestNode(), com.graphhopper.GHRequest.getFavoredHeading(int), true);\n    com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch().start();\n    com.graphhopper.routing.RoutingAlgorithm com.graphhopper.routing.RoutingAlgorithm = com.graphhopper.routing.RoutingAlgorithmFactory.createAlgo(com.graphhopper.routing.QueryGraph, com.graphhopper.routing.AlgorithmOptions);\n    com.graphhopper.routing.RoutingAlgorithm.setWeightLimit(double);\n    java.lang.String += (\", algoInit:\" + (com.graphhopper.util.StopWatch.stop().getSeconds())) + \"s\";\n    com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch().start();\n    com.graphhopper.routing.Path com.graphhopper.routing.Path = com.graphhopper.routing.RoutingAlgorithm.calcPath(com.graphhopper.storage.index.QueryResult.getClosestNode(), com.graphhopper.storage.index.QueryResult.getClosestNode());\n    if ((com.graphhopper.routing.Path.getTime()) < 0)\n        throw new java.lang.RuntimeException((\"Time was negative. Please report as bug and include:\" + com.graphhopper.GHRequest));\n    \n    java.util.List<com.graphhopper.routing.Path>.add(com.graphhopper.routing.Path);\n    java.lang.String += ((((\", \" + (com.graphhopper.routing.RoutingAlgorithm.getName())) + \"-routing:\") + (com.graphhopper.util.StopWatch.stop().getSeconds())) + \"s, \") + (com.graphhopper.routing.Path.getDebugInfo());\n    com.graphhopper.routing.QueryGraph.clearUnfavoredStatus();\n    long += com.graphhopper.routing.RoutingAlgorithm.getVisitedNodes();\n    com.graphhopper.storage.index.QueryResult = com.graphhopper.storage.index.QueryResult;\n}"},"status":-2},{"failures":[],"tindex":"060a2e7c-7916-11e5-8c7d-797e199cf2e8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:117","type":"CtAssignmentImpl","sourcecode":"int = -int"},"status":-2},{"failures":[],"tindex":"060a2e7d-7916-11e5-8c7d-35b776634712","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DouglasPeucker:70","type":"CtLocalVariableImpl","sourcecode":"int int = 500"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:92","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.util.EdgeIterator.getAdjNode()"},"status":-2},{"failures":[],"tindex":"060a2e7e-7916-11e5-8c7d-db146a1c06bf","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:146","type":"CtIfImpl","sourcecode":"if (int > 100)\n    throw new java.lang.IllegalArgumentException(\"neighborUpdates has to be in [0, 100], to disable it use 0\");\n"},"variableMap":{"neighborUpdates":"freeIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:98","type":"CtIfImpl","sourcecode":"if (int < 0)\n    int = int;\n"},"status":-2},{"failures":[],"tindex":"060a2e7f-7916-11e5-8c7d-a5a0c54e443f","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntIntBinHeap:150","type":"CtIfImpl","sourcecode":"if (int > (int)) {\n    return ;\n} "},"variableMap":{"size":"newSize","i":"newSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:105","type":"CtIfImpl","sourcecode":"if (int <= (double[].int))\n    return ;\n"},"status":-2},{"failures":[],"tindex":"060a2e80-7916-11e5-8c7d-e1bced7a978e","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:126","type":"CtAssignmentImpl","sourcecode":"long = 0"},"variableMap":{"size":"edgePointer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:461","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.EdgeAccess.internalEdgeDisconnect(com.graphhopper.util.EdgeIteratorState.getEdge(), long, com.graphhopper.util.EdgeIteratorState.getAdjNode(), com.graphhopper.util.EdgeIteratorState.getBaseNode())"},"status":-2},{"failures":[],"tindex":"060a5591-7916-11e5-8c7d-bd464e61ad62","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionAnnotation:43","type":"CtAssignmentImpl","sourcecode":"this.boolean = false"},"variableMap":{"empty":"locked"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:243","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":-2},{"failures":[],"tindex":"060a5592-7916-11e5-8c7d-a7b6812a1786","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:101","type":"CtUnaryOperatorImpl","sourcecode":"int--"},"status":-2},{"failures":[],"tindex":"060a5593-7916-11e5-8c7d-7ba2e4225795","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:69","type":"CtAssignmentImpl","sourcecode":"int = int / 10"},"variableMap":{"initLeafSize":"currentIndex","maxLeafEntries":"currentIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:62","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-2},{"failures":[],"tindex":"060a5594-7916-11e5-8c7d-8d9769ad485b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper7:50","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.Helper7.boolean = boolean"},"variableMap":{"com.graphhopper.util.Helper7.UNMAP_SUPPORTED":"enforcementOccured","v":"enforcementOccured"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:416","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":-2},{"failures":[],"tindex":"060a5595-7916-11e5-8c7d-6fa490be0ea3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:357","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.edge(int, int)"},"variableMap":{"a":"adj","b":"adj","this":"toGraph"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:285","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.AllEdgesIterator.copyPropertiesTo(com.graphhopper.storage.Graph.edge(int, int))"},"status":-2},{"failures":[],"tindex":"060a7ca6-7916-11e5-8c7d-85a84bdc37e7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:602","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType"},"status":-2},{"failures":[],"tindex":"060a7ca7-7916-11e5-8c7d-13b953ea76dc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHTreeMapComposed:32","type":"CtUnaryOperatorImpl","sourcecode":"-3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:221","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.EncodedValue.getBits()"},"status":-2},{"failures":[],"tindex":"060a7ca8-7916-11e5-8c7d-5bb883d8910c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:402","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    throw new java.lang.IllegalArgumentException(\"graphhopper location cannot be null\");\n"},"variableMap":{"ghLocation":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:66","type":"CtIfImpl","sourcecode":"if ((java.lang.String != null) && ((java.lang.String.length()) > 0))\n    com.graphhopper.reader.OSMElement.setTag(java.lang.String, java.lang.String);\n"},"status":-2},{"failures":[],"tindex":"060a7ca9-7916-11e5-8c7d-fd2d5cc72acb","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:135","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.storage.Graph.getNodes()) == 0)\n    throw new java.lang.IllegalStateException(\"Cannot create location index of empty graph!\");\n"},"variableMap":{"graph":"graph"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:149","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.routing.util.TraversalMode.isEdgeBased())) {\n    com.graphhopper.routing.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.put(int, com.graphhopper.routing.AStar.AStarEdge);\n    if ((com.graphhopper.routing.AStar.AStarEdge) != null) {\n        com.graphhopper.routing.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge> = com.graphhopper.routing.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>;\n        com.graphhopper.routing.AStarBidirection.updateBestPath(com.graphhopper.util.GHUtility.getEdge(com.graphhopper.storage.Graph, com.graphhopper.routing.AStar.AStarEdge.int, int), com.graphhopper.routing.AStar.AStarEdge, int);\n    } \n} else {\n    if (((com.graphhopper.routing.AStar.AStarEdge) != null) && ((com.graphhopper.routing.AStar.AStarEdge.int) == int)) {\n        com.graphhopper.routing.PathBidirRef.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge;\n        com.graphhopper.routing.PathBidirRef.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge;\n        boolean = true;\n        boolean = true;\n    } \n}"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
{"failureDictionary":{"com.graphhopper.util.InstructionListTest.testWayList2":4,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":24,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":10,"com.graphhopper.reader.OSMReaderTest.testFoot":16,"com.graphhopper.reader.OSMReaderTest.testMain":17,"com.graphhopper.reader.OSMReaderTest.testFerry":15,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":28,"com.graphhopper.util.InstructionListTest.testWayList":2,"com.graphhopper.util.InstructionListTest.testCreateGPX":13,"com.graphhopper.reader.OSMReaderTest.testOneWay":27,"com.graphhopper.routing.util.CarFlagEncoderTest.testOneway":29,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":1,"com.graphhopper.util.InstructionListTest.testRoundaboutJsonNaN":3,"com.graphhopper.util.InstructionListTest.testRoundaboutJsonIntegrity":0,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":5,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":31,"com.graphhopper.routing.PathTest.testWayList":9,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":38,"com.graphhopper.GraphHopperTest.testVia":32,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":39,"com.graphhopper.reader.OSMReaderTest.testWithBounds":25,"com.graphhopper.util.InstructionListTest.testCreateGPXWithEle":12,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":21,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":23,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":11,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":8,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":20,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":36,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":6,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":26,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":14,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":34,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":22,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":7,"com.graphhopper.reader.OSMReaderTest.testBarriers":19,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":30,"com.graphhopper.GraphHopperTest.testLoadOSM":37,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":40,"com.graphhopper.GraphHopperTest.testPrepare":33,"com.graphhopper.reader.OSMReaderTest.testSort":18,"com.graphhopper.GraphHopperTest.testFootAndCar":35},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11],"tindex":"12eadc18-790f-11e5-b878-094aed25c6bd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:97","type":"CtIfImpl","sourcecode":"if (int < 0)\n    int = 0;\n"},"variableMap":{"latSimilar":"pointsIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:76","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.util.Instruction com.graphhopper.util.Instruction : java.util.List<com.graphhopper.util.Instruction>) {\n    java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new java.util.HashMap<java.lang.String, java.lang.Object>();\n    java.util.List<java.util.Map<java.lang.String, java.lang.Object>>.add(java.util.Map<java.lang.String, java.lang.Object>);\n    com.graphhopper.util.InstructionAnnotation com.graphhopper.util.InstructionAnnotation = com.graphhopper.util.Instruction.getAnnotation();\n    java.lang.String java.lang.String = com.graphhopper.util.Instruction.getTurnDescription(com.graphhopper.util.Translation);\n    if (com.graphhopper.util.Helper.isEmpty(java.lang.String))\n        java.lang.String = com.graphhopper.util.InstructionAnnotation.getMessage();\n    \n    java.util.Map<java.lang.String, java.lang.Object>.put(\"text\", com.graphhopper.util.Helper.firstBig(java.lang.String));\n    if (!(com.graphhopper.util.InstructionAnnotation.isEmpty())) {\n        java.util.Map<java.lang.String, java.lang.Object>.put(\"annotation_text\", com.graphhopper.util.InstructionAnnotation.getMessage());\n        java.util.Map<java.lang.String, java.lang.Object>.put(\"annotation_importance\", com.graphhopper.util.InstructionAnnotation.getImportance());\n    } \n    java.util.Map<java.lang.String, java.lang.Object>.put(\"time\", com.graphhopper.util.Instruction.getTime());\n    java.util.Map<java.lang.String, java.lang.Object>.put(\"distance\", com.graphhopper.util.Helper.round(com.graphhopper.util.Instruction.getDistance(), 3));\n    java.util.Map<java.lang.String, java.lang.Object>.put(\"sign\", com.graphhopper.util.Instruction.getSign());\n    java.util.Map<java.lang.String, java.lang.Object>.putAll(com.graphhopper.util.Instruction.getExtraInfoJSON());\n    int int = int + (com.graphhopper.util.Instruction.getPoints().size());\n    if ((int + 1) == (java.util.List<com.graphhopper.util.Instruction>.size()))\n        int--;\n    \n    java.util.Map<java.lang.String, java.lang.Object>.put(\"interval\", java.util.Arrays.asList(int, int));\n    int = int;\n    int++;\n}"},"status":-1},{"failures":[],"tindex":"12eb0329-790f-11e5-b878-ebd73ba1320c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:80","type":"CtIfImpl","sourcecode":"if (double < (-(java.lang.Math.double)))\n    double += 2 * (java.lang.Math.double);\n"},"variableMap":{"java.lang.Math.PI":"lat","angleXY":"java.lang.Double.NaN"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:121","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(double, double, java.lang.Double.double)"},"status":-2},{"failures":[12,13,14],"tindex":"12eb032a-790f-11e5-b878-25542e5c78d4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:326","type":"CtReturnImpl","sourcecode":"return \"car\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:230","type":"CtReturnImpl","sourcecode":"return java.lang.StringBuilder.toString().replaceAll(\"\\\\\\'\", \"\\\"\")"},"status":-1},{"failures":[],"tindex":"12eb2a3b-790f-11e5-b878-17dca22d7bf6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:669","type":"CtLocalVariableImpl","sourcecode":"int int = -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:831","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.storage.NodeAccess.getDimension()"},"status":-2},{"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,14,28,29,30,31,32,33,34,35,36,37,38,39,40],"tindex":"12eb2a3c-790f-11e5-b878-9376ebc5358f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:278","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException(\"Call loadExisting only once\");\n"},"variableMap":{"initialized":"isOneway"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:269","type":"CtIfImpl","sourcecode":"if (boolean || boolean) {\n    boolean boolean = ((com.graphhopper.reader.OSMWay.hasTag(\"oneway\", \"-1\")) || (com.graphhopper.reader.OSMWay.hasTag(\"vehicle:forward\", \"no\"))) || (com.graphhopper.reader.OSMWay.hasTag(\"motor_vehicle:forward\", \"no\"));\n    if (boolean)\n        long |= long;\n    else\n        long |= long;\n    \n} else\n    long |= long;\n"},"status":-1},{"failures":[],"tindex":"12eb2a3d-790f-11e5-b878-7d908e79ce7c","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(5);\n} catch (java.lang.InterruptedException iex) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:262","type":"CtIfImpl","sourcecode":"if (boolean)\n    com.graphhopper.storage.DAType = com.graphhopper.storage.DAType.com.graphhopper.storage.DAType;\nelse\n    com.graphhopper.storage.DAType = com.graphhopper.storage.DAType.com.graphhopper.storage.DAType;\n"},"status":-2},{"failures":[],"tindex":"12eb2a3e-790f-11e5-b878-9daeb75fbdd0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:161","type":"CtOperatorAssignmentImpl","sourcecode":"int += 50"},"variableMap":{"red":"length"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:290","type":"CtOperatorAssignmentImpl","sourcecode":"int -= int"},"status":-2},{"failures":[],"tindex":"12eb2a3f-790f-11e5-b878-57d3d2af0b6f","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PathMerger:54","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.Path.getWeight()"},"variableMap":{"path":"path"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:53","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.Path.getDistance()"},"status":-2},{"failures":[],"tindex":"12eb2a40-790f-11e5-b878-e7ddbaf8e170","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:550","type":"CtAssignmentImpl","sourcecode":"int = (-int) - 3"},"status":-2},{"failures":[],"tindex":"12eb2a41-790f-11e5-b878-b302e92dd199","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:189","type":"CtReturnImpl","sourcecode":"return 10"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:393","type":"CtReturnImpl","sourcecode":"return ((int)(double * (com.graphhopper.util.Helper.float)))"},"status":-2},{"failures":[],"tindex":"12eb5152-790f-11e5-b878-edef98fa1614","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.GHUtility:512","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.EdgeIterator"},"variableMap":{"iter":"closestEdge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.QueryResult:139","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.EdgeIteratorState"},"status":-2},{"failures":[],"tindex":"12eb5153-790f-11e5-b878-e33647950f8b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:826","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.util.PointList.getDimension()) != (com.graphhopper.storage.NodeAccess.getDimension()))\n    throw new java.lang.IllegalArgumentException(((((\"Cannot use pointlist which is \" + (com.graphhopper.util.PointList.getDimension())) + \"D for graph which is \") + (com.graphhopper.storage.NodeAccess.getDimension())) + \"D\"));\n"},"variableMap":{"nodeAccess":"nodeAccess","pillarNodes":"pointList"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:674","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (com.graphhopper.reader.TLongList.size()) ; int++) {\n    long long = com.graphhopper.reader.TLongList.get(int);\n    int int = com.graphhopper.reader.OSMReader.getNodeMap().get(long);\n    if (int == (com.graphhopper.reader.OSMReader.int))\n        continue;\n    \n    if (int == (com.graphhopper.reader.OSMReader.int))\n        continue;\n    \n    if (int == (com.graphhopper.reader.OSMReader.int)) {\n        if ((!(com.graphhopper.util.PointList.isEmpty())) && (int > (-(com.graphhopper.reader.OSMReader.int)))) {\n            int = int;\n            int = com.graphhopper.reader.OSMReader.handlePillarNode(int, long, null, true);\n            int = (-int) - 3;\n            if (((com.graphhopper.util.PointList.getSize()) > 1) && (int >= 0)) {\n                java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long));\n                com.graphhopper.util.PointList.clear();\n                com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n            } \n            int = int;\n            int = -1;\n        } \n        continue;\n    } \n    if ((int <= (-(com.graphhopper.reader.OSMReader.int))) && (int >= (com.graphhopper.reader.OSMReader.int)))\n        throw new java.lang.AssertionError((((\"Mapped index not in correct bounds \" + int) + \", \") + long));\n    \n    if (int > (-(com.graphhopper.reader.OSMReader.int))) {\n        boolean boolean = (int == 0) || (int == int);\n        if (!boolean) {\n            int = int;\n        } \n        int = com.graphhopper.reader.OSMReader.handlePillarNode(int, long, com.graphhopper.util.PointList, boolean);\n    } \n    if (int < (com.graphhopper.reader.OSMReader.int)) {\n        int = (-int) - 3;\n        com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n        if (int >= 0) {\n            java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long));\n            com.graphhopper.util.PointList.clear();\n            com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n        } \n        int = int;\n    } \n}"},"status":-2},{"failures":[],"tindex":"12eb5154-790f-11e5-b878-df6c98aa7057","series":0,"name":"add","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:170","type":"CtOperatorAssignmentImpl","sourcecode":"long |= 1"},"variableMap":{"hash":"edgePointer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:120","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.storage.EdgeAccess.reverseFlags(long, long)"},"status":-2},{"failures":[],"tindex":"12eb5155-790f-11e5-b878-ff5def0501d4","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:103","type":"CtAssignmentImpl","sourcecode":"double = double - (2 * (java.lang.Math.double))"},"variableMap":{"resultOrientation":"dist","orientation":"maxDist","java.lang.Math.PI":"dist"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:150","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-2},{"failures":[],"tindex":"12eb5156-790f-11e5-b878-7f3310c79d2b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:1015","type":"CtIfImpl","sourcecode":"if (int >= 0) {\n    return false;\n} "},"variableMap":{"foundIndex":"maxTurnCosts"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:835","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.util.TurnWeighting.com.graphhopper.routing.util.TurnWeighting.isAssignableFrom(java.lang.Class<?>))\n    return (int) > 0;\n"},"status":-2},{"failures":[],"tindex":"12eb7867-790f-11e5-b878-f9afd576c974","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:214","type":"CtReturnImpl","sourcecode":"return 5"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:473","type":"CtReturnImpl","sourcecode":"return 0"},"status":-2},{"failures":[],"tindex":"12eb7868-790f-11e5-b878-614537baeab0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:288","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"srtm_\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:190","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motorcar\")"},"status":-2},{"failures":[],"tindex":"12eb7869-790f-11e5-b878-590c76240094","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.AStar:146","type":"CtIfImpl","sourcecode":"if (java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.isEmpty())\n    return com.graphhopper.routing.AbstractRoutingAlgorithm.createEmptyPath();\n"},"variableMap":{"prioQueueOpenSet":"prioQueueOpenSet","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:97","type":"CtWhileImpl","sourcecode":"while (true) {\n    int int = com.graphhopper.routing.AStar.AStarEdge.int;\n    (int)++;\n    if (com.graphhopper.routing.AStar.isWeightLimitExceeded())\n        return com.graphhopper.routing.AbstractRoutingAlgorithm.createEmptyPath();\n    \n    if (com.graphhopper.routing.AStar.finished())\n        break;\n    \n    com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        if (!com.graphhopper.routing.AbstractRoutingAlgorithm.(accept(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge.int)))\n            continue;\n        \n        int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n        int int = com.graphhopper.routing.util.TraversalMode.createTraversalId(com.graphhopper.util.EdgeIterator, false);\n        float float = ((float)((com.graphhopper.routing.util.Weighting.calcWeight(com.graphhopper.util.EdgeIterator, false, com.graphhopper.routing.AStar.AStarEdge.int)) + (com.graphhopper.routing.AStar.AStarEdge.double)));\n        if (java.lang.Double.isInfinite(float))\n            continue;\n        \n        com.graphhopper.routing.AStar.AStarEdge com.graphhopper.routing.AStar.AStarEdge = com.graphhopper.routing.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.get(int);\n        if ((com.graphhopper.routing.AStar.AStarEdge == null) || ((com.graphhopper.routing.AStar.AStarEdge.double) > float)) {\n            double = com.graphhopper.routing.util.WeightApproximator.approximate(int);\n            double = float + double;\n            if (com.graphhopper.routing.AStar.AStarEdge == null) {\n                com.graphhopper.routing.AStar.AStarEdge = new com.graphhopper.routing.AStar.AStarEdge(com.graphhopper.util.EdgeIterator.getEdge() , int , double , float);\n                com.graphhopper.routing.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.put(int, com.graphhopper.routing.AStar.AStarEdge);\n            } else {\n                assert (com.graphhopper.routing.AStar.AStarEdge.double) > double : \"Inconsistent distance estimate\";\n                java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.remove(com.graphhopper.routing.AStar.AStarEdge);\n                com.graphhopper.routing.AStar.AStarEdge.int = com.graphhopper.util.EdgeIterator.getEdge();\n                com.graphhopper.routing.AStar.AStarEdge.double = double;\n                com.graphhopper.routing.AStar.AStarEdge.double = float;\n            }\n            com.graphhopper.routing.AStar.AStarEdge.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge;\n            java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.add(com.graphhopper.routing.AStar.AStarEdge);\n            com.graphhopper.routing.AbstractRoutingAlgorithm.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge, int);\n        } \n    }\n    if (java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.isEmpty())\n        return com.graphhopper.routing.AbstractRoutingAlgorithm.createEmptyPath();\n    \n    com.graphhopper.routing.AStar.AStarEdge = java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.poll();\n    if ((com.graphhopper.routing.AStar.AStarEdge) == null)\n        throw new java.lang.AssertionError(\"Empty edge cannot happen\");\n    \n}"},"status":-2},{"failures":[],"tindex":"12eb786a-790f-11e5-b878-c7c6296f188d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:711","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.GHBitSet.add(int)"},"status":-2},{"failures":[],"tindex":"12eb786b-790f-11e5-b878-c5606d7705e7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.TranslationMap:197","type":"CtInvocationImpl","sourcecode":"java.util.Map<java.lang.String, java.lang.String>.clear()"},"variableMap":{"map":"enMap"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.TranslationMap:145","type":"CtForEachImpl","sourcecode":"for (java.util.Map.Entry<java.lang.String, java.lang.String> java.util.Map.Entry<java.lang.String, java.lang.String> : java.util.Map<java.lang.String, java.lang.String>.entrySet()) {\n    java.lang.String java.lang.String = java.util.Map<java.lang.String, java.lang.String>.get(java.util.Map.Entry<java.lang.String, java.lang.String>.getKey());\n    if (com.graphhopper.util.Helper.isEmpty(java.lang.String)) {\n        java.util.Map<java.lang.String, java.lang.String>.put(java.util.Map.Entry<java.lang.String, java.lang.String>.getKey(), java.util.Map.Entry<java.lang.String, java.lang.String>.getValue());\n        continue;\n    } \n    int int = com.graphhopper.util.TranslationMap.com.graphhopper.util.TranslationMap.countOccurence(java.util.Map.Entry<java.lang.String, java.lang.String>.getValue(), \"\\\\%\");\n    if (int != com.graphhopper.util.TranslationMap.(com.graphhopper.util.TranslationMap.countOccurence(java.lang.String, \"\\\\%\"))) {\n        java.lang.StringBuilder.append(com.graphhopper.util.Translation.getLocale()).append(\" - error in \").append(java.util.Map.Entry<java.lang.String, java.lang.String>.getKey()).append(\"->\").append(java.lang.String).append(\"\\n\");\n    } else {\n        java.lang.Object[] java.lang.Object[] = new java.lang.String[int];\n        java.util.Arrays.fill(java.lang.Object[], \"tmp\");\n        try {\n            java.lang.String.format(java.lang.String, java.lang.Object[]);\n        } catch (java.lang.Exception ex) {\n            java.lang.StringBuilder.append(com.graphhopper.util.Translation.getLocale()).append(\" - error \").append(java.lang.Exception.getMessage()).append(\"in \").append(java.util.Map.Entry<java.lang.String, java.lang.String>.getKey()).append(\"->\").append(java.lang.String).append(\"\\n\");\n        }\n    }\n}"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
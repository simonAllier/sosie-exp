{"failureDictionary":{"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":32,"com.graphhopper.coll.OSMIDSegmentedMapTest.testGet":36,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":39,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":27,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":22,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":25,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":18,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":14,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":9,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":3,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":0,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":21,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":29,"com.graphhopper.storage.VLongStorageTest.testWrite":34,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":10,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":5,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":20,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":24,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":1,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":12,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":16,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":26,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":23,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":4,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":31,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":33,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":6,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":11,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":17,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":2,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":30,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":15,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":19,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":28,"com.graphhopper.coll.OSMIDSegmentedMapTest.testGet2":37,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":13,"com.graphhopper.storage.VLongStorageTest.testWriteWithTrim":35,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointCount":38,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":7,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":8},"transformations":[{"failures":[],"tindex":"64220e37-790c-11e5-baaa-471d1fc91c80","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.RoutingAlgorithmFactorySimple:48","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.AStarBidirection"},"variableMap":{"aStarBi":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.RoutingAlgorithmFactorySimple:43","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.AlgorithmOptions.java.lang.String.equalsIgnoreCase(java.lang.String)) {\n    com.graphhopper.routing.AStarBidirection com.graphhopper.routing.AStarBidirection = new com.graphhopper.routing.AStarBidirection(com.graphhopper.storage.Graph , com.graphhopper.routing.AlgorithmOptions.getFlagEncoder() , com.graphhopper.routing.AlgorithmOptions.getWeighting() , com.graphhopper.routing.AlgorithmOptions.getTraversalMode());\n    com.graphhopper.routing.AStarBidirection.setApproximation(com.graphhopper.routing.RoutingAlgorithmFactorySimple.getApproximation(com.graphhopper.routing.AlgorithmOptions.java.lang.String, com.graphhopper.routing.AlgorithmOptions, com.graphhopper.storage.Graph.getNodeAccess()));\n    return com.graphhopper.routing.AStarBidirection;\n} else if (com.graphhopper.routing.AlgorithmOptions.java.lang.String.equalsIgnoreCase(java.lang.String)) {\n    return new com.graphhopper.routing.DijkstraOneToMany(com.graphhopper.storage.Graph , com.graphhopper.routing.AlgorithmOptions.getFlagEncoder() , com.graphhopper.routing.AlgorithmOptions.getWeighting() , com.graphhopper.routing.AlgorithmOptions.getTraversalMode());\n} else if (com.graphhopper.routing.AlgorithmOptions.java.lang.String.equalsIgnoreCase(java.lang.String)) {\n    com.graphhopper.routing.AStar com.graphhopper.routing.AStar = new com.graphhopper.routing.AStar(com.graphhopper.storage.Graph , com.graphhopper.routing.AlgorithmOptions.getFlagEncoder() , com.graphhopper.routing.AlgorithmOptions.getWeighting() , com.graphhopper.routing.AlgorithmOptions.getTraversalMode());\n    com.graphhopper.routing.AStar.setApproximation(com.graphhopper.routing.RoutingAlgorithmFactorySimple.getApproximation(com.graphhopper.routing.AlgorithmOptions.java.lang.String, com.graphhopper.routing.AlgorithmOptions, com.graphhopper.storage.Graph.getNodeAccess()));\n    return com.graphhopper.routing.AStar;\n} else {\n    throw new java.lang.IllegalArgumentException((((\"Algorithm \" + java.lang.String) + \" not found in \") + (java.lang.Object.getClass().getName())));\n}"},"status":-2},{"failures":[0],"tindex":"64223548-790c-11e5-baaa-9989a5db271b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:154","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.RacingBikeFlagEncoder:153","type":"CtIfImpl","sourcecode":"if (\"track\".equals(java.lang.String)) {\n    java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"tracktype\");\n    if (\"grade1\".equals(java.lang.String))\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(110.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    else if ((java.lang.String == null) || (java.lang.String.startsWith(\"grade\")))\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(110.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    \n} "},"status":-1},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"tindex":"64223549-790c-11e5-baaa-bba2cdee91cf","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.XFirstSearch:32","type":"CtReturnImpl","sourcecode":"return new com.graphhopper.coll.GHBitSetImpl()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:937","type":"CtReturnImpl","sourcecode":"return com.graphhopper.coll.GHBitSet"},"status":-1},{"failures":[34,35,36,37],"tindex":"6422354a-790c-11e5-baaa-5743f03cd5ec","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:45","type":"CtAssignmentImpl","sourcecode":"int = ((int)(long))"},"status":-1},{"failures":[38,39],"tindex":"6422354b-790c-11e5-baaa-8508223c61f4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:95","type":"CtAssignmentImpl","sourcecode":"double[][int] = double"},"status":-1},{"failures":[],"tindex":"6422354c-790c-11e5-baaa-35c9fd01a5db","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:577","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.CHGraphImpl.this.getWeight(this)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:644","type":"CtReturnImpl","sourcecode":"return 0"},"status":-2},{"failures":[],"tindex":"6422354d-790c-11e5-baaa-3d8ce41e5eea","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtilBig:56","type":"CtAssignmentImpl","sourcecode":"byte[][++int] = ((byte)(int >> 8))"},"variableMap":{"offset":"offset","bytes":"bytes","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilBig:55","type":"CtAssignmentImpl","sourcecode":"byte[][++int] = ((byte)(int >> 16))"},"status":-2},{"failures":[],"tindex":"6422354e-790c-11e5-baaa-05c8ed6c90ac","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:155","type":"CtIfImpl","sourcecode":"if (int > (int)) {\n    return false;\n} "},"variableMap":{"size":"maxTurnCosts","i":"maxTurnCosts"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:835","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.util.TurnWeighting.com.graphhopper.routing.util.TurnWeighting.isAssignableFrom(java.lang.Class<?>))\n    return (int) > 0;\n"},"status":-2},{"failures":[],"tindex":"64225c5f-790c-11e5-baaa-0f015199cfa6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:189","type":"CtReturnImpl","sourcecode":"return 10"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:223","type":"CtReturnImpl","sourcecode":"return 5"},"status":-2},{"failures":[],"tindex":"64225c60-790c-11e5-baaa-bf98a396d9a7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionList:255","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<\/rtept>\")"},"variableMap":{"output":"output"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:235","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"\\n<rtept lat=\\\"\").append(com.graphhopper.util.Helper.round6(com.graphhopper.util.Instruction.getFirstLat())).append(\"\\\" lon=\\\"\")"},"status":-2},{"failures":[],"tindex":"64225c61-790c-11e5-baaa-7dac98b71d1e","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:225","type":"CtIfImpl","sourcecode":"if (long <= 0) {\n    throw new java.lang.IllegalStateException((\"invalid bitmask:\" + long));\n} "},"variableMap":{"bm":"timeOffset"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:144","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (com.graphhopper.util.InstructionList.(size()) - 1) ; int++) {\n    com.graphhopper.util.Instruction com.graphhopper.util.Instruction = int > 0 ? com.graphhopper.util.InstructionList.get((int - 1)) : null;\n    boolean boolean = com.graphhopper.util.Instruction == null;\n    com.graphhopper.util.Instruction com.graphhopper.util.Instruction = com.graphhopper.util.InstructionList.get((int + 1));\n    com.graphhopper.util.Instruction.checkOne();\n    long = com.graphhopper.util.InstructionList.get(int).fillGPXList(java.util.List<com.graphhopper.util.GPXEntry>, long, com.graphhopper.util.Instruction, com.graphhopper.util.Instruction, boolean);\n}"},"status":-2},{"failures":[],"tindex":"64225c62-790c-11e5-baaa-e7808e870496","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:280","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.reader.OSMWay.hasTag(\"railway\")) && (!(com.graphhopper.reader.OSMWay.hasTag(\"railway\", java.util.Set<java.lang.String>))))\n    return 0;\n"},"variableMap":{"acceptedRailways":"restrictedValues","way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:250","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(java.util.List<java.lang.String>, java.util.Set<java.lang.String>))\n    return 0;\n"},"status":-2},{"failures":[],"tindex":"64225c63-790c-11e5-baaa-e3b46cd14cfc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:182","type":"CtIfImpl","sourcecode":"if (int <= 0) {\n    throw new java.lang.IllegalStateException(\"check your graph - it is empty!\");\n} "},"variableMap":{"locs":"locs"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:189","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    double double = com.graphhopper.storage.NodeAccess.getLatitude(int);\n    double double = com.graphhopper.storage.NodeAccess.getLongitude(int);\n    int int = ((int)(com.graphhopper.geohash.KeyAlgo.encode(double, double)));\n    long long = ((long)(int)) * 4;\n    if (com.graphhopper.coll.GHBitSet.contains(int)) {\n        int int = com.graphhopper.storage.DataAccess.getInt(long);\n        com.graphhopper.geohash.KeyAlgo.decode(int, com.graphhopper.util.shapes.GHPoint);\n        double double = com.graphhopper.util.DistanceCalc.calcNormalizedDist(com.graphhopper.util.shapes.GHPoint.double, com.graphhopper.util.shapes.GHPoint.double, double, double);\n        double double = com.graphhopper.storage.NodeAccess.getLatitude(int);\n        double double = com.graphhopper.storage.NodeAccess.getLongitude(int);\n        double double = com.graphhopper.util.DistanceCalc.calcNormalizedDist(com.graphhopper.util.shapes.GHPoint.double, com.graphhopper.util.shapes.GHPoint.double, double, double);\n        if (double < double) {\n            com.graphhopper.storage.DataAccess.setInt(long, int);\n        } \n    } else {\n        com.graphhopper.storage.DataAccess.setInt(long, int);\n        com.graphhopper.coll.GHBitSet.add(int);\n    }\n}"},"status":-2},{"failures":[],"tindex":"64228374-790c-11e5-baaa-3123dfabc388","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:104","type":"CtLocalVariableImpl","sourcecode":"double double = 360 / (com.graphhopper.util.DistanceCalcEarth.(calcCircumference(double)) / double)"},"variableMap":{"radiusInMeter":"toLon","this":"calc","lat":"queryLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:134","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.DistanceCalc.calcDenormalizedDist(com.graphhopper.util.DistanceCalc.calcNormalizedEdgeDistance(double, double, double, double, double, double))"},"status":-2},{"failures":[],"tindex":"64228375-790c-11e5-baaa-53591d944993","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:669","type":"CtLocalVariableImpl","sourcecode":"int int = -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:110","type":"CtLocalVariableImpl","sourcecode":"int int = int"},"status":-2},{"failures":[],"tindex":"64228376-790c-11e5-baaa-f3f111a1e1f7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:118","type":"CtIfImpl","sourcecode":"if (long == (long + long))\n    return ~(long + long);\n"},"variableMap":{"high":"flags","len":"flags","start":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:106","type":"CtReturnImpl","sourcecode":"return long"},"status":-2},{"failures":[],"tindex":"64228377-790c-11e5-baaa-b520f6fd7710","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1063","type":"CtOperatorAssignmentImpl","sourcecode":"long += com.graphhopper.routing.RoutingAlgorithm.getVisitedNodes()"},"status":-2},{"failures":[],"tindex":"64228378-790c-11e5-baaa-51cba3e3fc6b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.VLongStorage:69","type":"CtLocalVariableImpl","sourcecode":"int int = java.lang.Math.max(10, ((int)((int) * 1.5F)))"},"variableMap":{"pointer":"segmentSizeInBytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:332","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long / (int)))"},"status":-2},{"failures":[],"tindex":"64228379-790c-11e5-baaa-21c34191f711","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:148","type":"CtAssignmentImpl","sourcecode":"int = int = ((int)(java.lang.Math.sqrt(int)))"},"variableMap":{"latSize":"edgeId","size":"edgeId","lonSize":"edgeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:523","type":"CtAssignmentImpl","sourcecode":"int = int << 1"},"status":-2},{"failures":[],"tindex":"6422837a-790c-11e5-baaa-1194a6763aba","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntIntBinHeap:207","type":"CtIfImpl","sourcecode":"if ((int) > (int)) {\n    com.graphhopper.coll.IntIntBinHeap.ensureCapacity(((int)((int) * (com.graphhopper.coll.IntIntBinHeap.double))));\n} "},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
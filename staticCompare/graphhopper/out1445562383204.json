{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":52,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":58,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":55,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":30,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":37,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":62,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":6,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":48,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":38,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":53,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":63,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":56,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":11,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":27,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":39,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":47,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":3,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":25,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":59,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":29,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":5,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":8,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":1,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":32,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":54,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":33,"com.graphhopper.GraphHopperTest.testPrepare":14,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":57,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":21,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":40,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":44,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":43,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":49,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":28,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":4,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":2,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":51,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":17,"com.graphhopper.GraphHopperTest.testPrepareOnly":12,"com.graphhopper.GraphHopperTest.testVia":13,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":31,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":0,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":41,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":46,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":50,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":26,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":15,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":60,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":7,"com.graphhopper.GraphHopperTest.testFootOnly":18,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":61,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":23,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":35,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":24,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":9,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":20,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":36,"com.graphhopper.GraphHopperTest.testLoadOSM":16,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":42,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":34,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":10,"com.graphhopper.util.GHUtilityTest.testCopy":19,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":22,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":45},"transformations":[{"failures":[],"tindex":"4707a3a9-7922-11e5-a469-17c8b468575a","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.InstructionAnnotation:51","type":"CtAssignmentImpl","sourcecode":"this.boolean = true"},"variableMap":{"empty":"prepared"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractAlgoPreparation:32","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":0},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"tindex":"4707caba-7922-11e5-a469-d95834ce25f4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.SparseArray:153","type":"CtAssignmentImpl","sourcecode":"boolean = false"},"variableMap":{"mGarbage":"frozen"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:375","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":-1},{"failures":[],"tindex":"4707cabb-7922-11e5-a469-4df108e3ed3c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:176","type":"CtLocalVariableImpl","sourcecode":"int int = 1024 * 8"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:61","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(java.lang.Math.signum((double - double))))"},"status":-2},{"failures":[],"tindex":"4707cabc-7922-11e5-a469-b94fb64a0848","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:230","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.Helper.isEmpty(java.lang.String))\n    throw new java.lang.IllegalArgumentException(\"newName mustn\\'t be empty!\");\n"},"variableMap":{"newName":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.DAType:147","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.DAType.(getMemRef()) == (com.graphhopper.storage.DAType.MemRef.com.graphhopper.storage.DAType.MemRef))\n    java.lang.String = \"MMAP\";\nelse if (com.graphhopper.storage.DAType.(getMemRef()) == (com.graphhopper.storage.DAType.MemRef.com.graphhopper.storage.DAType.MemRef))\n    java.lang.String = \"RAM\";\nelse\n    java.lang.String = \"UNSAFE\";\n"},"status":-2},{"failures":[],"tindex":"4707cabd-7922-11e5-a469-3bfff78e3a2d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:680","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Math.min(double, double)"},"variableMap":{"dMinLon":"java.lang.Double.NaN","dMinLat":"java.lang.Double.NaN"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:758","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.PointList.is3D() ? com.graphhopper.util.PointList.getElevation(0) : java.lang.Double.double"},"status":-2},{"failures":[],"tindex":"4707cabe-7922-11e5-a469-f561da3eb32e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.SparseArray:352","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.util.Helper.idealIntArraySize((int + 1))"},"variableMap":{"pos":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:233","type":"CtLocalVariableImpl","sourcecode":"int int = (int) / 2"},"status":-2},{"failures":[],"tindex":"4707cabf-7922-11e5-a469-7713a9cc0bb0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:45","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.AngleCalc.double"},"variableMap":{"angle":"prevEle","com.graphhopper.util.AngleCalc.PI3_4":"prevEle"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:419","type":"CtAssignmentImpl","sourcecode":"double = double[][int]"},"status":-2},{"failures":[],"tindex":"4707f1d0-7922-11e5-a469-cf34a3365ec1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:55","type":"CtLocalVariableImpl","sourcecode":"double double = double / (java.lang.Math.abs((double - double)))"},"variableMap":{"gridCellWidth":"defaultWeightLimit","x1":"defaultWeightLimit","x2":"defaultWeightLimit"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1022","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.GHRequest.getHints().getDouble(\"defaultWeightLimit\", double)"},"status":-2},{"failures":[],"tindex":"4707f1d1-7922-11e5-a469-f3d0021947ef","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:694","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.coll.GHBitSet com.graphhopper.coll.GHBitSet = new com.graphhopper.coll.GHBitSetImpl((int * 3))"},"variableMap":{"removeNodeCount":"len"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:223","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.coll.GHBitSet com.graphhopper.coll.GHBitSet = new com.graphhopper.coll.GHBitSetImpl(int)"},"status":-2},{"failures":[],"tindex":"4707f1d2-7922-11e5-a469-13cfa0973a76","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.PathNative:47","type":"CtIfImpl","sourcecode":"if ((int) < 0)\n    return this;\n"},"variableMap":{"endNode":"edge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:97","type":"CtWhileImpl","sourcecode":"while (true) {\n    int int = com.graphhopper.routing.AStar.AStarEdge.int;\n    (int)++;\n    if (com.graphhopper.routing.AStar.isWeightLimitExceeded())\n        return com.graphhopper.routing.AbstractRoutingAlgorithm.createEmptyPath();\n    \n    if (com.graphhopper.routing.AStar.finished())\n        break;\n    \n    com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        if (!com.graphhopper.routing.AbstractRoutingAlgorithm.(accept(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge.int)))\n            continue;\n        \n        int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n        int int = com.graphhopper.routing.util.TraversalMode.createTraversalId(com.graphhopper.util.EdgeIterator, false);\n        float float = ((float)((com.graphhopper.routing.util.Weighting.calcWeight(com.graphhopper.util.EdgeIterator, false, com.graphhopper.routing.AStar.AStarEdge.int)) + (com.graphhopper.routing.AStar.AStarEdge.double)));\n        if (java.lang.Double.isInfinite(float))\n            continue;\n        \n        com.graphhopper.routing.AStar.AStarEdge com.graphhopper.routing.AStar.AStarEdge = com.graphhopper.routing.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.get(int);\n        if ((com.graphhopper.routing.AStar.AStarEdge == null) || ((com.graphhopper.routing.AStar.AStarEdge.double) > float)) {\n            double = com.graphhopper.routing.util.WeightApproximator.approximate(int);\n            double = float + double;\n            if (com.graphhopper.routing.AStar.AStarEdge == null) {\n                com.graphhopper.routing.AStar.AStarEdge = new com.graphhopper.routing.AStar.AStarEdge(com.graphhopper.util.EdgeIterator.getEdge() , int , double , float);\n                com.graphhopper.routing.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.put(int, com.graphhopper.routing.AStar.AStarEdge);\n            } else {\n                assert (com.graphhopper.routing.AStar.AStarEdge.double) > double : \"Inconsistent distance estimate\";\n                java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.remove(com.graphhopper.routing.AStar.AStarEdge);\n                com.graphhopper.routing.AStar.AStarEdge.int = com.graphhopper.util.EdgeIterator.getEdge();\n                com.graphhopper.routing.AStar.AStarEdge.double = double;\n                com.graphhopper.routing.AStar.AStarEdge.double = float;\n            }\n            com.graphhopper.routing.AStar.AStarEdge.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge;\n            java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.add(com.graphhopper.routing.AStar.AStarEdge);\n            com.graphhopper.routing.AbstractRoutingAlgorithm.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge, int);\n        } \n    }\n    if (java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.isEmpty())\n        return com.graphhopper.routing.AbstractRoutingAlgorithm.createEmptyPath();\n    \n    com.graphhopper.routing.AStar.AStarEdge = java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.poll();\n    if ((com.graphhopper.routing.AStar.AStarEdge) == null)\n        throw new java.lang.AssertionError(\"Empty edge cannot happen\");\n    \n}"},"status":-2},{"failures":[],"tindex":"4707f1d3-7922-11e5-a469-5db82fbcb954","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(5);\n} catch (java.lang.InterruptedException iex) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullIndex:103","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.QueryResult.setClosestEdge(com.graphhopper.routing.util.AllEdgesIterator.detach(false))"},"status":-2},{"failures":[],"tindex":"470818e4-7922-11e5-a469-253610cc85d3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:285","type":"CtIfImpl","sourcecode":"if ((long == (long)) || (long == 0))\n    return long;\n"},"variableMap":{"directionBitMask":"acceptBit","flags":"acceptBit","dir":"acceptBit"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:217","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"railway\", \"platform\"))\n    return long;\n"},"status":-2},{"failures":[],"tindex":"470818e5-7922-11e5-a469-13598350d3f0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:899","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.routing.util.Weighting com.graphhopper.routing.util.Weighting : java.util.Map<com.graphhopper.routing.util.Weighting, com.graphhopper.routing.RoutingAlgorithmFactory>.keySet()) {\n    java.lang.String java.lang.String = com.graphhopper.routing.util.Weighting.toString().toLowerCase();\n    if ((java.lang.String.contains(java.lang.String)) && (java.lang.String.contains(java.lang.String)))\n        return com.graphhopper.routing.util.Weighting;\n    \n}"},"status":-2},{"failures":[],"tindex":"470818e6-7922-11e5-a469-a739f50f4d4f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:262","type":"CtIfImpl","sourcecode":"if (int > (int))\n    throw new java.lang.IllegalArgumentException(\"new size needs be smaller than old size\");\n"},"variableMap":{"size":"com.graphhopper.util.EdgeIterator.NO_EDGE","newSize":"com.graphhopper.util.EdgeIterator.NO_EDGE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:283","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt(long, com.graphhopper.util.EdgeIterator.int)"},"status":-2},{"failures":[],"tindex":"470818e7-7922-11e5-a469-fda9cd435b7c","series":0,"name":"add","transplant":{"position":"com.graphhopper.search.NameIndex:129","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.getBytes(long, byte[], 1)"},"variableMap":{"pointer":"geoRef","names":"wayGeometry","sizeBytes":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:858","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setBytes(long, byte[], byte[].int)"},"status":-2},{"failures":[],"tindex":"470818e8-7922-11e5-a469-833d1f9f646d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:303","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(com.graphhopper.routing.util.AbstractFlagEncoder.toString()).append(\"|\").append(com.graphhopper.routing.util.AbstractFlagEncoder.getPropertiesString())"},"status":-2},{"failures":[],"tindex":"470818e9-7922-11e5-a469-85f75bb0ee51","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMInputFile:92","type":"CtInvocationImpl","sourcecode":"java.io.InputStream.mark(10)"},"variableMap":{"ips":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:175","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.util.AbstractFlagEncoder.isRegistered())\n    throw new java.lang.IllegalStateException(((\"You must not register a FlagEncoder (\" + java.lang.Object.(toString())) + \") twice!\"));\n"},"status":-2},{"failures":[],"tindex":"470818ea-7922-11e5-a469-7dbbd785686e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:934","type":"CtInvocationImpl","sourcecode":"new com.graphhopper.util.PathMerger().setCalcPoints(boolean).setDouglasPeucker(com.graphhopper.util.DouglasPeucker).setEnableInstructions(boolean).setSimplifyResponse(((boolean) && (double > 0)))"},"status":-2},{"failures":[],"tindex":"47083ffb-7922-11e5-a469-0bf18bae547d","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:186","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(2000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:142","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.Location2IDQuadtree.flush()"},"status":-2},{"failures":[],"tindex":"47083ffc-7922-11e5-a469-dddab064c1d9","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:53","type":"CtIfImpl","sourcecode":"if (double < 0.0)\n    return -double;\n"},"variableMap":{"y":"r_lat_deg","angle":"r_lon_deg"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:147","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.DistanceCalcEarth.calcNormalizedDist(double, double, double, double)"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
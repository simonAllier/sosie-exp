{"failureDictionary":{"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":28,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":15,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":59,"com.graphhopper.routing.PathTest.testFindInstruction":68,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":46,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":3,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijection":8,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode":10,"com.graphhopper.routing.QueryGraphTest.testOneWay":47,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":7,"com.graphhopper.storage.MMapDataAccessTest.testHeader":54,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":67,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":37,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":32,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":25,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":39,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":48,"com.graphhopper.geohash.SpatialKeyAlgoTest.testOddBits":4,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":51,"com.graphhopper.storage.MMapDataAccessTest.testSegments":55,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":30,"com.graphhopper.storage.MMapDataAccessTest.testLoadFlush":57,"com.graphhopper.coll.CompressedArrayTest.testCompress":13,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":5,"com.graphhopper.util.DistanceCalcEarthTest.testValidEdgeDistance":61,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":21,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":38,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":49,"com.graphhopper.storage.MMapDataAccessTest.textMixMMAP2RAM":52,"com.graphhopper.GraphHopperTest.testFootAndCar":65,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":50,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":2,"com.graphhopper.coll.OSMIDSegmentedMapTest.testGet":19,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":22,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":24,"com.graphhopper.geohash.SpatialKeyAlgoTest.testDifferentInitialBounds":11,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":9,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijectionBug2":6,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":1,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":26,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":14,"com.graphhopper.storage.MMapDataAccessTest.testLoadClose":56,"com.graphhopper.coll.CompressedArrayTest.testCompress2":12,"com.graphhopper.GraphHopperTest.testVia":18,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":60,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":45,"com.graphhopper.storage.MMapDataAccessTest.testRenameFlush":53,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":35,"com.graphhopper.GraphHopperAPITest.testLoad":58,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":34,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":16,"com.graphhopper.GraphHopperTest.testFootOnly":66,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":17,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":33,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":64,"com.graphhopper.util.InstructionListTest.testFind":62,"com.graphhopper.reader.OSMReaderTest.testBarriers":63,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":0,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":23,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":40,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":29,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":31,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":20,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":44,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":36,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":43,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":42,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":27,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":41},"transformations":[{"failures":[],"tindex":"973afd94-8278-11e5-b262-5917f2f195ec","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GHDirectory:197","type":"CtInvocationImpl","sourcecode":"new java.io.File(java.lang.String).mkdirs()"},"variableMap":{"location":"highway"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:733","type":"CtInvocationImpl","sourcecode":"java.util.HashSet<java.lang.String>.add(java.lang.String)"},"status":0},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"tindex":"973b24a5-8278-11e5-b262-936cddf8389d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:259","type":"CtAssignmentImpl","sourcecode":"int = int + (int)"},"variableMap":{"i":"i","to":"i","lonSize":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:194","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[14,15,1,16,17,3,18],"tindex":"973b24a6-8278-11e5-b262-e9d784ca04d7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:182","type":"CtAssignmentImpl","sourcecode":"long = java.lang.Math.round(java.lang.Math.sqrt(long))"},"status":-1},{"failures":[],"tindex":"973b24a7-8278-11e5-b262-2d08bd215d6a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:126","type":"CtAssignmentImpl","sourcecode":"long = 0"},"variableMap":{"size":"mask"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedValue:85","type":"CtUnaryOperatorImpl","sourcecode":"~(long)"},"status":-2},{"failures":[],"tindex":"973b24a8-8278-11e5-b262-5332d550767f","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.FootFlagEncoder:376","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(44.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"variableMap":{"weightToPrioMap":"weightToPrioMap","com.graphhopper.routing.util.PriorityCode.AVOID_IF_POSSIBLE":"com.graphhopper.routing.util.PriorityCode.UNCHANGED"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:475","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(0.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"status":-2},{"failures":[19],"tindex":"973b24a9-8278-11e5-b262-219d616fa747","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.SparseLongLongArray:48","type":"CtAssignmentImpl","sourcecode":"long[] = new long[int]"},"variableMap":{"mKeys":"keys","cap":"cap"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:73","type":"CtAssignmentImpl","sourcecode":"long[] = java.util.Arrays.copyOf(long[], int)"},"status":-1},{"failures":[],"tindex":"973b24aa-8278-11e5-b262-35f06c20f9fc","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.PriorityWeighting:50","type":"CtIfImpl","sourcecode":"if (java.lang.Double.isInfinite(double))\n    return java.lang.Double.double;\n"},"variableMap":{"java.lang.Double.POSITIVE_INFINITY":"angle","weight":"angle"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:53","type":"CtIfImpl","sourcecode":"if (double < 0.0)\n    return -double;\n"},"status":0},{"failures":[14,20,21,0,22,1,23,24,25,26,27,28,29,30,16,31,32,2,33,3,34,35,36,37,38,39],"tindex":"973b4bbb-8278-11e5-b262-2560444bebee","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:260","type":"CtAssignmentImpl","sourcecode":"int = 8"},"variableMap":{"bytesForFlags":"minResolutionInMeter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:104","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"status":-1},{"failures":[],"tindex":"973b4bbc-8278-11e5-b262-db5e023edfab","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDMap:124","type":"CtIfImpl","sourcecode":"if (long == long)\n    return long;\nelse\n    return ~long;\n"},"status":-2},{"failures":[],"tindex":"973b4bbd-8278-11e5-b262-ad83b1dedb1c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:96","type":"CtAssignmentImpl","sourcecode":"double = double + (2 * (java.lang.Math.double))"},"variableMap":{"resultOrientation":"lat","orientation":"lat","java.lang.Math.PI":"lat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:247","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.shapes.GHPoint.double = double"},"status":-2},{"failures":[],"tindex":"973b4bbe-8278-11e5-b262-d7c61f10b19a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:182","type":"CtIfImpl","sourcecode":"if (int <= 0) {\n    throw new java.lang.IllegalStateException(\"check your graph - it is empty!\");\n} "},"variableMap":{"locs":"edge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Dijkstra:76","type":"CtWhileImpl","sourcecode":"while (true) {\n    (int)++;\n    if (com.graphhopper.routing.Dijkstra.(isWeightLimitExceeded()) || com.graphhopper.routing.Dijkstra.(finished()))\n        break;\n    \n    int int = com.graphhopper.storage.EdgeEntry.int;\n    com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        if (!com.graphhopper.routing.AbstractRoutingAlgorithm.(accept(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.EdgeEntry.int)))\n            continue;\n        \n        int int = com.graphhopper.routing.util.TraversalMode.createTraversalId(com.graphhopper.util.EdgeIterator, false);\n        double double = (com.graphhopper.routing.util.Weighting.calcWeight(com.graphhopper.util.EdgeIterator, false, com.graphhopper.storage.EdgeEntry.int)) + (com.graphhopper.storage.EdgeEntry.double);\n        if (java.lang.Double.isInfinite(double))\n            continue;\n        \n        com.graphhopper.storage.EdgeEntry com.graphhopper.storage.EdgeEntry = gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry>.get(int);\n        if (com.graphhopper.storage.EdgeEntry == null) {\n            com.graphhopper.storage.EdgeEntry = new com.graphhopper.storage.EdgeEntry(com.graphhopper.util.EdgeIterator.getEdge() , com.graphhopper.util.EdgeIterator.getAdjNode() , double);\n            com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n            gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry>.put(int, com.graphhopper.storage.EdgeEntry);\n            java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.add(com.graphhopper.storage.EdgeEntry);\n        } else if ((com.graphhopper.storage.EdgeEntry.double) > double) {\n            java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.remove(com.graphhopper.storage.EdgeEntry);\n            com.graphhopper.storage.EdgeEntry.int = com.graphhopper.util.EdgeIterator.getEdge();\n            com.graphhopper.storage.EdgeEntry.double = double;\n            com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n            java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.add(com.graphhopper.storage.EdgeEntry);\n        } else\n            continue;\n        \n        com.graphhopper.routing.AbstractRoutingAlgorithm.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.EdgeEntry, int);\n    }\n    if (java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.isEmpty())\n        break;\n    \n    com.graphhopper.storage.EdgeEntry = java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.poll();\n    if ((com.graphhopper.storage.EdgeEntry) == null)\n        throw new java.lang.AssertionError(\"Empty edge cannot happen\");\n    \n}"},"status":-2},{"failures":[30,40,41,42,43,44,45,46,47,48,49,50,51],"tindex":"973b72cf-8278-11e5-b262-55fe892cacdf","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.CompressedArray:106","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:190","type":"CtReturnImpl","sourcecode":"return new com.graphhopper.util.shapes.GHPoint(double , double)"},"status":-1},{"failures":[52,53,54,55,56,57],"tindex":"973b72d0-8278-11e5-b262-af4d5f773ca0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:424","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.MMapDataAccess.clean(int, java.util.List<java.nio.ByteBuffer>.size())"},"variableMap":{"remainingSegNo":"segmentSizeInBytes","this":"this","segments":"segments"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:259","type":"CtTryImpl","sourcecode":"try {\n    if ((!(java.util.List<java.nio.ByteBuffer>.isEmpty())) && ((java.util.List<java.nio.ByteBuffer>.get(0)) instanceof java.nio.MappedByteBuffer)) {\n        for (java.nio.ByteBuffer java.nio.ByteBuffer : java.util.List<java.nio.ByteBuffer>) {\n            ((java.nio.MappedByteBuffer)(java.nio.ByteBuffer)).force();\n        }\n    } \n    com.graphhopper.storage.AbstractDataAccess.writeHeader(java.io.RandomAccessFile, java.io.RandomAccessFile.length(), int);\n    java.io.RandomAccessFile.getFD().sync();\n} catch (java.lang.Exception ex) {\n    throw new java.lang.RuntimeException(java.lang.Exception);\n}"},"status":-1},{"failures":[],"tindex":"973b72d1-8278-11e5-b262-63c078582cb5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullIndex:103","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.QueryResult.setClosestEdge(com.graphhopper.routing.util.AllEdgesIterator.detach(false))"},"status":0},{"failures":[58,18],"tindex":"973b72d2-8278-11e5-b262-79c69a1b80ac","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:53","type":"CtOperatorAssignmentImpl","sourcecode":"double += com.graphhopper.routing.Path.getDistance()"},"status":-1},{"failures":[],"tindex":"973b72d3-8278-11e5-b262-4175fc98556f","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DouglasPeucker:70","type":"CtLocalVariableImpl","sourcecode":"int int = 500"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:187","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.reader.dem.SRTMProvider.calcIntKey(double, double)"},"status":-2},{"failures":[],"tindex":"973b72d4-8278-11e5-b262-87227fcd3a36","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.RoutingAlgorithmFactorySimple:40","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.AlgorithmOptions.java.lang.String.equalsIgnoreCase(java.lang.String)) {\n    return new com.graphhopper.routing.Dijkstra(com.graphhopper.storage.Graph , com.graphhopper.routing.AlgorithmOptions.getFlagEncoder() , com.graphhopper.routing.AlgorithmOptions.getWeighting() , com.graphhopper.routing.AlgorithmOptions.getTraversalMode());\n} else if (com.graphhopper.routing.AlgorithmOptions.java.lang.String.equalsIgnoreCase(java.lang.String)) {\n    com.graphhopper.routing.AStarBidirection com.graphhopper.routing.AStarBidirection = new com.graphhopper.routing.AStarBidirection(com.graphhopper.storage.Graph , com.graphhopper.routing.AlgorithmOptions.getFlagEncoder() , com.graphhopper.routing.AlgorithmOptions.getWeighting() , com.graphhopper.routing.AlgorithmOptions.getTraversalMode());\n    com.graphhopper.routing.AStarBidirection.setApproximation(com.graphhopper.routing.RoutingAlgorithmFactorySimple.getApproximation(com.graphhopper.routing.AlgorithmOptions.java.lang.String, com.graphhopper.routing.AlgorithmOptions, com.graphhopper.storage.Graph.getNodeAccess()));\n    return com.graphhopper.routing.AStarBidirection;\n} else if (com.graphhopper.routing.AlgorithmOptions.java.lang.String.equalsIgnoreCase(java.lang.String)) {\n    return new com.graphhopper.routing.DijkstraOneToMany(com.graphhopper.storage.Graph , com.graphhopper.routing.AlgorithmOptions.getFlagEncoder() , com.graphhopper.routing.AlgorithmOptions.getWeighting() , com.graphhopper.routing.AlgorithmOptions.getTraversalMode());\n} else if (com.graphhopper.routing.AlgorithmOptions.java.lang.String.equalsIgnoreCase(java.lang.String)) {\n    com.graphhopper.routing.AStar com.graphhopper.routing.AStar = new com.graphhopper.routing.AStar(com.graphhopper.storage.Graph , com.graphhopper.routing.AlgorithmOptions.getFlagEncoder() , com.graphhopper.routing.AlgorithmOptions.getWeighting() , com.graphhopper.routing.AlgorithmOptions.getTraversalMode());\n    com.graphhopper.routing.AStar.setApproximation(com.graphhopper.routing.RoutingAlgorithmFactorySimple.getApproximation(com.graphhopper.routing.AlgorithmOptions.java.lang.String, com.graphhopper.routing.AlgorithmOptions, com.graphhopper.storage.Graph.getNodeAccess()));\n    return com.graphhopper.routing.AStar;\n} else {\n    throw new java.lang.IllegalArgumentException((((\"Algorithm \" + java.lang.String) + \" not found in \") + (java.lang.Object.getClass().getName())));\n}"},"status":-2},{"failures":[],"tindex":"973b99e5-8278-11e5-b262-1b09e9c12423","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:70","type":"CtOperatorAssignmentImpl","sourcecode":"int += com.graphhopper.routing.util.EncodedDoubleValue.getBits()"},"status":0},{"failures":[],"tindex":"973b99e6-8278-11e5-b262-d5fdba58af0f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:164","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.CHGraphImpl.checkNodeId(int)"},"status":0},{"failures":[14,22,24,27,59,60,30,16,33,35,38,58,61,62,63,41,42,43,44,64,65,66,67,48,68],"tindex":"973b99e7-8278-11e5-b262-db5cc3422530","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.shapes.GHPoint:52","type":"CtReturnImpl","sourcecode":"return (!(java.lang.Double.isNaN(double))) && (!(java.lang.Double.isNaN(double)))"},"variableMap":{"lon":"ab_rb","lat":"ab_ar"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:242","type":"CtReturnImpl","sourcecode":"return (double > 0) && (double > 0)"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"973b99e5-8278-11e5-b262-1b09e9c12423","diffs":[{"methodsDiff":{"delete":["com.graphhopper.routing.util.EncodedValue.getBits"]},"type":"staticDiff"}]},{"transformation":"973b99e6-8278-11e5-b262-d5fdba58af0f","diffs":[{"branches":{"com.graphhopper.util.GHUtilityTest.testCopy":["com.graphhopper.storage.CHGraphImpl_void_checkNodeId(int).b"]},"type":"branch"},{"methodsDiff":{"delete":["com.graphhopper.storage.CHGraphImpl.checkNodeId"]},"type":"staticDiff"}]},{"transformation":"973b72d1-8278-11e5-b262-63c078582cb5","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.EdgeIteratorState.detach","com.graphhopper.storage.index.QueryResult.setClosestEdge"]},"type":"staticDiff"},{"branches":{"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":["com.graphhopper.storage.BaseGraph$AllEdgeIterator_com.graphhopper.util.EdgeIteratorState_detach(boolean).e1","com.graphhopper.storage.index.QueryResult_void_setClosestEdge(com.graphhopper.util.EdgeIteratorState).b","com.graphhopper.storage.BaseGraph$AllEdgeIterator_com.graphhopper.util.EdgeIteratorState_detach(boolean).e2","com.graphhopper.storage.BaseGraph$AllEdgeIterator_com.graphhopper.util.EdgeIteratorState_detach(boolean).b"],"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":["com.graphhopper.storage.BaseGraph$AllEdgeIterator_com.graphhopper.util.EdgeIteratorState_detach(boolean).e1","com.graphhopper.storage.index.QueryResult_void_setClosestEdge(com.graphhopper.util.EdgeIteratorState).b","com.graphhopper.storage.BaseGraph$AllEdgeIterator_com.graphhopper.util.EdgeIteratorState_detach(boolean).e2","com.graphhopper.storage.BaseGraph$AllEdgeIterator_com.graphhopper.util.EdgeIteratorState_detach(boolean).b"]},"type":"branch"}]}]}
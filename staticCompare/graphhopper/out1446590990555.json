{"failureDictionary":{"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":51,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":105,"com.graphhopper.routing.PathTest.testFindInstruction":71,"com.graphhopper.reader.OSMReaderTest.testFerry":82,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":93,"com.graphhopper.routing.QueryGraphTest.testOneWay":58,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":109,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":79,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":62,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeightMMap":8,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":64,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":102,"com.graphhopper.reader.OSMReaderTest.testWithBounds":89,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":33,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":54,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":96,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeight":10,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":45,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testNoErrorOnEdgeCase_lastIndex":121,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":29,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":34,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":113,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":49,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":77,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":1,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":5,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":47,"com.graphhopper.GraphHopperTest.testPrepare":21,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":35,"com.graphhopper.util.InstructionListTest.testWayList2":13,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":66,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":118,"com.graphhopper.reader.OSMReaderTest.testFoot":83,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":56,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":59,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":108,"com.graphhopper.util.InstructionListTest.testWayList":12,"com.graphhopper.reader.OSMReaderTest.testOneWay":92,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":63,"com.graphhopper.GraphHopperAPITest.testDisconnected179":124,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":80,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":60,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":36,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":75,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":7,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":98,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":67,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":119,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":22,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":3,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":6,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":30,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":100,"com.graphhopper.GraphHopperTest.testLoadOSM":25,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":15,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":106,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":107,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":115,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":103,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":19,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":18,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":43,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":17,"com.graphhopper.reader.OSMReaderTest.testSort":74,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":16,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":88,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":97,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":111,"com.graphhopper.reader.OSMReaderTest.testMain":73,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":48,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":52,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":31,"com.graphhopper.reader.OSMReaderTest.testEstimatedCenter":91,"com.graphhopper.routing.PathTest.testWayList":70,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":44,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":116,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":38,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":123,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":68,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":40,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":85,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":101,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":41,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":90,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":4,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":104,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":122,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":65,"com.graphhopper.GraphHopperTest.testFootAndCar":23,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":32,"com.graphhopper.reader.dem.SRTMProviderTest.testGetFileString":9,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":46,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":37,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":57,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":2,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":39,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":114,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":94,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":55,"com.graphhopper.GraphHopperTest.testPrepareOnly":78,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":0,"com.graphhopper.GraphHopperTest.testVia":20,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":69,"com.graphhopper.util.BitUtilBigTest.testToLong":76,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":26,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":50,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":87,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":120,"com.graphhopper.GraphHopperAPITest.testLoad":72,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":24,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":53,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":14,"com.graphhopper.GraphHopperTest.testFootOnly":27,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":95,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":117,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":86,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":42,"com.graphhopper.util.InstructionListTest.testFind":11,"com.graphhopper.reader.OSMReaderTest.testBarriers":84,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":99,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":81,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":112,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":61,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":28,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":110},"transformations":[{"failures":[],"tindex":"30c9ea08-827d-11e5-a42a-2b685e7bfe92","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:416","type":"CtReturnImpl","sourcecode":"return 80"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:608","type":"CtReturnImpl","sourcecode":"return java.lang.Double.double"},"status":-2},{"failures":[],"tindex":"30ca1119-827d-11e5-a42a-69710628961c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:397","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += \", \" + java.lang.String"},"variableMap":{"name":"debug","refName":"debug"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1058","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += ((((\", \" + (com.graphhopper.routing.RoutingAlgorithm.getName())) + \"-routing:\") + (com.graphhopper.util.StopWatch.stop().getSeconds())) + \"s, \") + (com.graphhopper.routing.Path.getDebugInfo())"},"status":0},{"failures":[0,1,2,3,4,5,6],"tindex":"30ca111a-827d-11e5-a42a-b3437a08cb27","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullIndex:84","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.routing.util.AllEdgesIterator.next()) {\n    if (!(com.graphhopper.routing.util.EdgeFilter.accept(com.graphhopper.routing.util.AllEdgesIterator)))\n        continue;\n    \n    for (int int, int int = 0 ; int < 2 ; int++) {\n        if (int == 0) {\n            int = com.graphhopper.routing.util.AllEdgesIterator.getBaseNode();\n        } else {\n            int = com.graphhopper.routing.util.AllEdgesIterator.getAdjNode();\n        }\n        double double = com.graphhopper.storage.NodeAccess.getLatitude(int);\n        double double = com.graphhopper.storage.NodeAccess.getLongitude(int);\n        double double = com.graphhopper.util.DistanceCalc.calcDist(double, double, double, double);\n        if ((com.graphhopper.util.shapes.Circle == null) || (double < (com.graphhopper.util.DistanceCalc.calcDist(com.graphhopper.util.shapes.Circle.getLat(), com.graphhopper.util.shapes.Circle.getLon(), double, double)))) {\n            com.graphhopper.storage.index.QueryResult.setClosestEdge(com.graphhopper.routing.util.AllEdgesIterator.detach(false));\n            com.graphhopper.storage.index.QueryResult.setClosestNode(int);\n            com.graphhopper.storage.index.QueryResult.setQueryDistance(double);\n            if (double <= 0)\n                break;\n            \n            com.graphhopper.util.shapes.Circle = new com.graphhopper.util.shapes.Circle(double , double , double , com.graphhopper.util.DistanceCalc);\n        } \n    }\n}"},"status":-1},{"failures":[7,8,9,10],"tindex":"30ca111b-827d-11e5-a42a-cb5c679b63df","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:93","type":"CtIfImpl","sourcecode":"if (double >= 0) {\n    if (double < ((-(java.lang.Math.double)) + double))\n        double = double + (2 * (java.lang.Math.double));\n    else\n        double = double;\n    \n} else {\n    if (double > ((+(java.lang.Math.double)) + double))\n        double = double - (2 * (java.lang.Math.double));\n    else\n        double = double;\n    \n}"},"variableMap":{"orientation":"lat","resultOrientation":"lat","baseOrientation":"lat","java.lang.Math.PI":"lat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:195","type":"CtIfImpl","sourcecode":"if (double >= 0)\n    java.lang.String += \"N\";\nelse\n    java.lang.String += \"S\";\n"},"status":-1},{"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,7],"tindex":"30ca111c-827d-11e5-a42a-adecb12f1e3f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:97","type":"CtIfImpl","sourcecode":"if (int < 0)\n    int = 0;\n"},"variableMap":{"latSimilar":"adjNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:917","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int)"},"status":-1},{"failures":[76],"tindex":"30ca382d-827d-11e5-a42a-8dfe64c5ba83","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtilLittle:77","type":"CtAssignmentImpl","sourcecode":"byte[][(int + 5)] = ((byte)(long >> 40))"},"variableMap":{"offset":"offset","bytes":"bytes","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilBig:78","type":"CtAssignmentImpl","sourcecode":"byte[][++int] = ((byte)(long >> 32))"},"status":-1},{"failures":[7,8,8,9,9,10,10],"tindex":"30ca382e-827d-11e5-a42a-05d48d33c49e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:259","type":"CtAssignmentImpl","sourcecode":"int = int + (int)"},"variableMap":{"i":"lon","to":"lon","lonSize":"lon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:117","type":"CtAssignmentImpl","sourcecode":"int = -int"},"status":-1},{"failures":[],"tindex":"30ca382f-827d-11e5-a42a-3bb9f93f2dbd","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Unzipper:37","type":"CtLocalVariableImpl","sourcecode":"java.io.File java.io.File = new java.io.File(java.lang.String)"},"variableMap":{"fromStr":"name"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:206","type":"CtLocalVariableImpl","sourcecode":"java.io.File java.io.File = new java.io.File(((java.lang.String) + (java.lang.String)))"},"status":-2},{"failures":[77,78,79,20,21,22,23,24,25,80,26,27,81,82,83,73,74,84,75,7,85,86,87,88,89,90,91,92],"tindex":"30ca3830-827d-11e5-a42a-1bd0d4915c8b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.Path:110","type":"CtIfImpl","sourcecode":"if ((int) < 0)\n    throw new java.lang.IllegalStateException(\"Call extract() before retrieving fromNode\");\n"},"variableMap":{"fromNode":"lastBarrier"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:379","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    long long = gnu.trove.list.TLongList.get(int);\n    long long = com.graphhopper.reader.OSMReader.getNodeFlagsMap().get(long);\n    if (long > 0) {\n        if ((long & long) > 0) {\n            com.graphhopper.reader.OSMReader.getNodeFlagsMap().put(long, 0);\n            long long = com.graphhopper.reader.OSMReader.addBarrierNode(long);\n            if (int > 0) {\n                if (int < 0)\n                    int = 0;\n                \n                long[] long[] = gnu.trove.list.TLongList.toArray(int, ((int - int) + 1));\n                long[][((long[].int) - 1)] = long;\n                gnu.trove.list.TLongList gnu.trove.list.TLongList = new gnu.trove.list.array.TLongArrayList(long[]);\n                java.util.List<com.graphhopper.util.EdgeIteratorState>.addAll(com.graphhopper.reader.OSMReader.addOSMWay(gnu.trove.list.TLongList, long, long));\n                java.util.List<com.graphhopper.util.EdgeIteratorState>.addAll(com.graphhopper.reader.OSMReader.addBarrierEdge(long, long, long, long, long));\n            } else {\n                java.util.List<com.graphhopper.util.EdgeIteratorState>.addAll(com.graphhopper.reader.OSMReader.addBarrierEdge(long, long, long, long, long));\n                gnu.trove.list.TLongList.set(0, long);\n            }\n            int = int;\n        } \n    } \n}"},"status":-1},{"failures":[77,78,79,20,21,22,23,24,25,80,26,27,81,82,83,73,74,84,75,7,85,86,87,88,89,90,92],"tindex":"30ca5f41-827d-11e5-a42a-cd45354eb7b8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:288","type":"CtSwitchImpl","sourcecode":"switch (com.graphhopper.reader.OSMElement.getType()) {\n    case com.graphhopper.reader.OSMElement.int :\n        if ((com.graphhopper.coll.LongIntMap.get(com.graphhopper.reader.OSMElement.getId())) != (-1)) {\n            com.graphhopper.reader.OSMReader.processNode(((com.graphhopper.reader.OSMNode)(com.graphhopper.reader.OSMElement)));\n        } \n        break;\n    case com.graphhopper.reader.OSMElement.int :\n        if (long < 0) {\n            com.graphhopper.reader.OSMReader.org.slf4j.Logger.info((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \", now parsing ways\"));\n            long = long;\n        } \n        com.graphhopper.reader.OSMReader.processWay(((com.graphhopper.reader.OSMWay)(com.graphhopper.reader.OSMElement)));\n        break;\n    case com.graphhopper.reader.OSMElement.int :\n        if (long < 0) {\n            com.graphhopper.reader.OSMReader.org.slf4j.Logger.info((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \", now parsing relations\"));\n            long = long;\n        } \n        com.graphhopper.reader.OSMReader.processRelation(((com.graphhopper.reader.OSMRelation)(com.graphhopper.reader.OSMElement)));\n        break;\n}"},"status":-1},{"failures":[],"tindex":"30ca5f42-827d-11e5-a42a-df1364694162","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper:176","type":"CtLocalVariableImpl","sourcecode":"int int = 1024 * 8"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:315","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(com.graphhopper.routing.util.EncodedValue.getValue(long)))"},"status":-2},{"failures":[93,94],"tindex":"30ca5f43-827d-11e5-a42a-ad6b1f884b2f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:333","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.routing.util.AbstractFlagEncoder.applyMaxSpeed(com.graphhopper.reader.OSMWay, double, false)"},"status":-1},{"failures":[],"tindex":"30ca5f44-827d-11e5-a42a-8f02953cbf71","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:161","type":"CtOperatorAssignmentImpl","sourcecode":"int += 50"},"variableMap":{"red":"x1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:136","type":"CtOperatorAssignmentImpl","sourcecode":"int += int"},"status":-2},{"failures":[95,96,97,98,99],"tindex":"30ca5f45-827d-11e5-a42a-8561a61e7202","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:94","type":"CtIfImpl","sourcecode":"if (int >= (int))\n    int = (int) - 1;\n"},"variableMap":{"width":"removedEdges","lonSimilar":"removedEdges"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:257","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    com.graphhopper.util.EdgeIterator.setFlags(com.graphhopper.routing.util.FlagEncoder.setAccess(com.graphhopper.util.EdgeIterator.getFlags(), false, false));\n    int++;\n}"},"status":-1},{"failures":[],"tindex":"30ca8656-827d-11e5-a42a-4554575f8f45","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.FootFlagEncoder:370","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(45.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"variableMap":{"weightToPrioMap":"weightToPrioMap","com.graphhopper.routing.util.PriorityCode.WORST":"com.graphhopper.routing.util.PriorityCode.UNCHANGED"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:475","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(0.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"status":-2},{"failures":[77,78,15,16,17,18,19,100,79,20,21,22,23,24,25,80,26,27,81,101,102,36,103,104,105,106,37,107,108,38,39,109,110,111,112,40,113,114,41,115,116,117,118,42,119,120,43,44,121,122,123,62,64,65,66,72,124,82,83,73,74,84,75,7,85,86,87,88,89,90,92],"tindex":"30ca8657-827d-11e5-a42a-996368815a68","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:315","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.LocationIndexTree.prepareAlgo()"},"status":-1},{"failures":[15,16,17,19,49],"tindex":"30ca8658-827d-11e5-a42a-09a2d9a7e5fb","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:154","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:414","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.VirtualEdgeIteratorState.setVirtualEdgePreference(true)"},"status":-1},{"failures":[],"tindex":"30ca8659-827d-11e5-a42a-cf3da1be171c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:719","type":"CtIfImpl","sourcecode":"if (new java.io.File((java.lang.String + \"-gh\")).exists())\n    java.lang.String += \"-gh\";\n"},"variableMap":{"graphHopperFolder":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:353","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.storage.CHGraphImpl com.graphhopper.storage.CHGraphImpl : java.util.Collection<com.graphhopper.storage.CHGraphImpl>) {\n    java.lang.String += \", \" + (com.graphhopper.storage.CHGraphImpl.toDetailsString());\n}"},"status":0},{"failures":[],"tindex":"30ca865a-827d-11e5-a42a-8193fd94b262","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:249","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.Weighting.calcWeight(com.graphhopper.util.EdgeIteratorState, boolean, com.graphhopper.util.EdgeIterator.int)"},"status":0},{"failures":[],"tindex":"30caad6b-827d-11e5-a42a-73bda9a3fe96","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionAnnotation:52","type":"CtAssignmentImpl","sourcecode":"this.int = 0"},"status":0}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"30ca8659-827d-11e5-a42a-cf3da1be171c","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.CHGraphImpl.toDetailsString"]},"branchesDiff":{"delete":["l0"]},"type":"staticDiff"}]},{"transformation":"30ca1119-827d-11e5-a42a-69710628961c","diffs":[{"branches":{"com.graphhopper.GraphHopperAPITest.testLoad":["com.graphhopper.routing.DijkstraBidirectionRef_java.lang.String_getName().b","com.graphhopper.routing.Path_java.lang.String_getDebugInfo().b","com.graphhopper.util.StopWatch_java.lang.String_toString().b","com.graphhopper.util.StopWatch_java.lang.String_toString().t1"],"com.graphhopper.GraphHopperTest.testFootAndCar":["com.graphhopper.routing.DijkstraBidirectionRef_java.lang.String_getName().b","com.graphhopper.routing.Path_java.lang.String_getDebugInfo().b","com.graphhopper.util.StopWatch_java.lang.String_toString().b","com.graphhopper.util.StopWatch_java.lang.String_toString().t1"]},"type":"branch"},{"methodsDiff":{"delete":["com.graphhopper.util.StopWatch.stop","com.graphhopper.util.StopWatch.getSeconds","com.graphhopper.routing.RoutingAlgorithm.getName","com.graphhopper.routing.Path.getDebugInfo"]},"type":"staticDiff"}]},{"transformation":"30ca865a-827d-11e5-a42a-8193fd94b262","diffs":[{"methodsDiff":{"delete":["com.graphhopper.routing.util.Weighting.calcWeight"]},"type":"staticDiff"}]}]}
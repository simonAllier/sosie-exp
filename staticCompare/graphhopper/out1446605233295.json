{"failureDictionary":{"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":34,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":10,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":42,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":92,"com.graphhopper.routing.PathTest.testFindInstruction":31,"com.graphhopper.reader.OSMReaderTest.testFerry":4,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":44,"com.graphhopper.routing.QueryGraphTest.testOneWay":41,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":46,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":47,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":49,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":37,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":73,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":105,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":13,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":101,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":103,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":15,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":32,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":107,"com.graphhopper.GraphHopperTest.testPrepare":58,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":104,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":23,"com.graphhopper.util.InstructionListTest.testWayList2":111,"com.graphhopper.reader.OSMReaderTest.testFoot":5,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":39,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":17,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":43,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":95,"com.graphhopper.util.InstructionListTest.testWayList":110,"com.graphhopper.reader.OSMReaderTest.testOneWay":8,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":2,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":22,"com.graphhopper.GraphHopperAPITest.testDisconnected179":66,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":88,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":14,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":18,"com.graphhopper.coll.SparseLongLongArrayTest.testBinarySearch":29,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":89,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":70,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":6,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":24,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":82,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":3,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":11,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":59,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":12,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":102,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":16,"com.graphhopper.GraphHopperTest.testLoadOSM":62,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":52,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":94,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":78,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":90,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":56,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":55,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":84,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":54,"com.graphhopper.reader.OSMReaderTest.testSort":68,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":53,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":99,"com.graphhopper.reader.OSMReaderTest.testMain":67,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":35,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":108,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":71,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":51,"com.graphhopper.routing.PathTest.testWayList":30,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":85,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":79,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":96,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":87,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":26,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":75,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":21,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":77,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":7,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":50,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":0,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":86,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":91,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":48,"com.graphhopper.coll.OSMIDSegmentedMapTest.testGet2":28,"com.graphhopper.GraphHopperTest.testFootAndCar":60,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":72,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":1,"com.graphhopper.coll.OSMIDSegmentedMapTest.testGet":27,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":106,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":40,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":93,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":20,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":97,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":38,"com.graphhopper.GraphHopperTest.testVia":57,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":33,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":63,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":83,"com.graphhopper.GraphHopperAPITest.testLoad":65,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":61,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":76,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":36,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":25,"com.graphhopper.GraphHopperTest.testFootOnly":64,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":112,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":80,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":81,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testParseDuration":9,"com.graphhopper.reader.OSMReaderTest.testBarriers":69,"com.graphhopper.util.InstructionListTest.testFind":109,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":19,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":74,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":45,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":98,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":100},"transformations":[{"failures":[],"tindex":"5a1f6a08-829e-11e5-ae6d-670ec44465ad","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:397","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += \", \" + java.lang.String"},"variableMap":{"name":"str","refName":"streetName"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:293","type":"CtAssignmentImpl","sourcecode":"java.lang.String = com.graphhopper.util.Helper.isEmpty(java.lang.String) ? java.lang.String : com.graphhopper.util.Translation.tr(\"turn_onto\", java.lang.String, java.lang.String)"},"status":-2},{"failures":[],"tindex":"5a1f9119-829e-11e5-ae6d-d54545dd4159","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.Dijkstra:55","type":"CtAssignmentImpl","sourcecode":"java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry> = new java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>(int)"},"variableMap":{"size":"nodes","fromHeap":"openSetTo"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:65","type":"CtAssignmentImpl","sourcecode":"java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry> = new java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>((int / 10))"},"status":0},{"failures":[0,1,2,3,4,5,6,7,8],"tindex":"5a1f911a-829e-11e5-ae6d-37cd653be1e4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:1201","type":"CtIfImpl","sourcecode":"if (!(boolean))\n    throw new java.lang.IllegalStateException(\"Writes are not allowed!\");\n"},"variableMap":{"allowWrites":"isBackward"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:674","type":"CtIfImpl","sourcecode":"if (boolean)\n    long |= long;\nelse\n    long |= long;\n"},"status":-1},{"failures":[9],"tindex":"5a1f911b-829e-11e5-ae6d-cfba733ace1d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.CompressedArray:87","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"variableMap":{"currentEntry":"minutes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:496","type":"CtAssignmentImpl","sourcecode":"int = ((java.lang.Integer.parseInt(java.lang.String)) * 60) * 24"},"status":-1},{"failures":[],"tindex":"5a1f911c-829e-11e5-ae6d-8bc1d547b616","series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:515","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.util.Helper.isEmpty(java.lang.String)) && (com.graphhopper.util.Helper.isEmpty(java.lang.String))) {\n    if (com.graphhopper.util.Helper.isEmpty(java.lang.String))\n        throw new java.lang.IllegalArgumentException(\"You need to specify an OSM file.\");\n    \n    java.lang.String = (com.graphhopper.util.Helper.pruneFileEnd(java.lang.String)) + \"-gh\";\n} "},"variableMap":{"graphHopperFolder":"name","ghLocation":"location","osmFile":"location"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:172","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.DataAccess.getType().isStoring())\n    com.graphhopper.util.Helper.removeDir(new java.io.File(((java.lang.String) + java.lang.String)));\n"},"status":0},{"failures":[10],"tindex":"5a1fb82d-829e-11e5-ae6d-eb81997617ab","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:190","type":"CtAssignmentImpl","sourcecode":"double = -double"},"variableMap":{"eleDelta":"lon","decEleSum":"lon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:96","type":"CtAssignmentImpl","sourcecode":"double[][int] = double"},"status":-1},{"failures":[],"tindex":"5a1fb82e-829e-11e5-ae6d-35f6d3dff21f","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.QueryGraph:585","type":"CtIfImpl","sourcecode":"if ((int % 2) == 0)\n    int++;\nelse\n    int--;\n"},"variableMap":{"edgeId":"com.graphhopper.storage.EdgeAccess.NO_NODE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:704","type":"CtIfImpl","sourcecode":"if (int == (com.graphhopper.storage.EdgeAccess.int))\n    continue;\n"},"status":-2},{"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"tindex":"5a1fb82f-829e-11e5-ae6d-655da0db8126","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:416","type":"CtReturnImpl","sourcecode":"return 80"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PreparationWeighting:55","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.Weighting.calcWeight(com.graphhopper.util.EdgeIteratorState, boolean, int)"},"status":-1},{"failures":[27,28],"tindex":"5a1fb830-829e-11e5-ae6d-19e46711a556","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:107","type":"CtIfImpl","sourcecode":"if ((long % (int)) != 0)\n    int++;\n"},"variableMap":{"segmentSizeInBytes":"currentBucket","newBytes":"delta","segmentsToCreate":"currentBucket"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:87","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.VLongStorage[][int].writeVLong(long)"},"status":-1},{"failures":[29,27],"tindex":"5a1fb831-829e-11e5-ae6d-83d048e5c535","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntIntBinHeap:235","type":"CtAssignmentImpl","sourcecode":"this.int = 0"},"variableMap":{"size":"high"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseLongLongArray:411","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-1},{"failures":[],"tindex":"5a1fdf42-829e-11e5-ae6d-9dde40c64f76","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:443","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.getElevation(int)"},"status":-2},{"failures":[],"tindex":"5a1fdf43-829e-11e5-ae6d-f5f757ca54d7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.CompressedArray:173","type":"CtTryImpl","sourcecode":"try {\n    java.util.zip.Deflater.setLevel(int);\n    java.util.zip.Deflater.setInput(byte[], int, int);\n    java.util.zip.Deflater.finish();\n    final byte[] byte[] = new byte[1024];\n    while (!(java.util.zip.Deflater.finished())) {\n        int int = java.util.zip.Deflater.deflate(byte[]);\n        java.io.ByteArrayOutputStream.write(byte[], 0, int);\n    }\n} finally {\n    java.util.zip.Deflater.end();\n}"},"status":-2},{"failures":[30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,17,18,45,46,22,47,48,49,23,50,24,51,26,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,6,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112],"tindex":"5a1fdf44-829e-11e5-ae6d-df2819fe71d2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:882","type":"CtIfImpl","sourcecode":"if (boolean) {\n    if ((int & 2) != 0)\n        com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n    \n} else {\n    if ((int & 1) != 0)\n        com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n    \n}"},"status":-1},{"failures":[],"tindex":"5a1fdf45-829e-11e5-ae6d-2db53e450da6","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.QueryGraph:155","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.EdgeIteratorState = com.graphhopper.util.EdgeIteratorState.detach(true)"},"variableMap":{"closestEdge":"to"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:476","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.EdgeIteratorState.setDistance(com.graphhopper.storage.BaseGraph.CommonEdgeIterator.getDistance()).setName(com.graphhopper.storage.BaseGraph.CommonEdgeIterator.getName()).setFlags(com.graphhopper.storage.BaseGraph.CommonEdgeIterator.getDirectFlags()).setWayGeometry(com.graphhopper.storage.BaseGraph.CommonEdgeIterator.fetchWayGeometry(0))"},"status":0},{"failures":[],"tindex":"5a1fdf46-829e-11e5-ae6d-6f7784055504","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMInputFile:119","type":"CtInvocationImpl","sourcecode":"java.util.zip.ZipInputStream.getNextEntry()"},"variableMap":{"zip":"zis"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Unzipper:91","type":"CtAssignmentImpl","sourcecode":"java.util.zip.ZipEntry = java.util.zip.ZipInputStream.getNextEntry()"},"status":-2},{"failures":[],"tindex":"5a1fdf47-829e-11e5-ae6d-2525c1a6821f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:315","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.storage.Directory) != null)\n    return com.graphhopper.storage.Directory;\n"},"variableMap":{"dir":"dir"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:150","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.Directory"},"status":-1},{"failures":[],"tindex":"5a200658-829e-11e5-ae6d-e3fe5673e00f","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:277","type":"CtReturnImpl","sourcecode":"return (java.lang.String == null) || ((java.lang.String.trim().length()) == 0)"},"status":-1},{"failures":[],"tindex":"5a200659-829e-11e5-ae6d-ffdbf230b3b8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntIntBinHeap:128","type":"CtAssignmentImpl","sourcecode":"int[][int] = int"},"status":-1},{"failures":[],"tindex":"5a20065a-829e-11e5-ae6d-ad2a81a1d8ed","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:61","type":"CtAssignmentImpl","sourcecode":"int = 1"},"variableMap":{"initLeafSize":"edgeEntryIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:297","type":"CtOperatorAssignmentImpl","sourcecode":"int += int"},"status":-1},{"failures":[],"tindex":"5a20065b-829e-11e5-ae6d-2fc71957016a","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.Path:129","type":"CtIfImpl","sourcecode":"if (!(boolean))\n    throw new java.lang.IllegalStateException(\"Switching order multiple times is not supported\");\n"},"variableMap":{"reverseOrder":"finishedTo"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AbstractBidirAlgo:73","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.AbstractBidirAlgo.(getCurrentFromWeight()) < com.graphhopper.routing.AbstractBidirAlgo.(getCurrentToWeight()))\n    boolean = !com.graphhopper.routing.AbstractBidirAlgo.(fillEdgesFrom());\nelse\n    boolean = !com.graphhopper.routing.AbstractBidirAlgo.(fillEdgesTo());\n"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"5a1fdf45-829e-11e5-ae6d-2db53e450da6","diffs":[{"branches":{"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":["com.graphhopper.storage.BaseGraph$EdgeIterable_com.graphhopper.util.EdgeIteratorState_detach(boolean).t2","com.graphhopper.storage.BaseGraph$1_com.graphhopper.storage.BaseGraph$EdgeIterable_createSingleEdge(com.graphhopper.routing.util.EdgeFilter).b","com.graphhopper.storage.BaseGraph$EdgeIterable_com.graphhopper.util.EdgeIteratorState_detach(boolean).e1","com.graphhopper.storage.BaseGraph$EdgeIterable_boolean_init(int,int).t4","com.graphhopper.storage.BaseGraph$EdgeIterable_boolean_init(int,int).e3","com.graphhopper.storage.BaseGraph$EdgeIterable_com.graphhopper.util.EdgeIteratorState_detach(boolean).b"],"com.graphhopper.storage.GraphHopperStorageTest.testClone":["com.graphhopper.storage.BaseGraph$EdgeIterable_com.graphhopper.util.EdgeIteratorState_detach(boolean).t2","com.graphhopper.storage.BaseGraph$1_com.graphhopper.storage.BaseGraph$EdgeIterable_createSingleEdge(com.graphhopper.routing.util.EdgeFilter).b","com.graphhopper.storage.BaseGraph$EdgeIterable_com.graphhopper.util.EdgeIteratorState_detach(boolean).e1","com.graphhopper.storage.BaseGraph$EdgeIterable_boolean_init(int,int).t4","com.graphhopper.storage.BaseGraph$EdgeIterable_boolean_init(int,int).e3","com.graphhopper.storage.BaseGraph$EdgeIterable_com.graphhopper.util.EdgeIteratorState_detach(boolean).b"],"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":["com.graphhopper.storage.BaseGraph$EdgeIterable_com.graphhopper.util.EdgeIteratorState_detach(boolean).t2","com.graphhopper.storage.BaseGraph$1_com.graphhopper.storage.BaseGraph$EdgeIterable_createSingleEdge(com.graphhopper.routing.util.EdgeFilter).b","com.graphhopper.storage.BaseGraph$EdgeIterable_com.graphhopper.util.EdgeIteratorState_detach(boolean).e1","com.graphhopper.storage.BaseGraph$EdgeIterable_boolean_init(int,int).t4","com.graphhopper.storage.BaseGraph$EdgeIterable_boolean_init(int,int).e3","com.graphhopper.storage.BaseGraph$EdgeIterable_com.graphhopper.util.EdgeIteratorState_detach(boolean).b"],"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":["com.graphhopper.storage.BaseGraph$EdgeIterable_com.graphhopper.util.EdgeIteratorState_detach(boolean).t2","com.graphhopper.storage.BaseGraph$1_com.graphhopper.storage.BaseGraph$EdgeIterable_createSingleEdge(com.graphhopper.routing.util.EdgeFilter).b","com.graphhopper.storage.BaseGraph$EdgeIterable_com.graphhopper.util.EdgeIteratorState_detach(boolean).e1","com.graphhopper.storage.BaseGraph$EdgeIterable_boolean_init(int,int).t4","com.graphhopper.storage.BaseGraph$EdgeIterable_boolean_init(int,int).e3","com.graphhopper.storage.BaseGraph$EdgeIterable_com.graphhopper.util.EdgeIteratorState_detach(boolean).b"],"com.graphhopper.util.GHUtilityTest.testSortDirected":["com.graphhopper.storage.BaseGraph$EdgeIterable_com.graphhopper.util.EdgeIteratorState_detach(boolean).t2","com.graphhopper.storage.BaseGraph$1_com.graphhopper.storage.BaseGraph$EdgeIterable_createSingleEdge(com.graphhopper.routing.util.EdgeFilter).b","com.graphhopper.storage.BaseGraph$EdgeIterable_com.graphhopper.util.EdgeIteratorState_detach(boolean).e1","com.graphhopper.storage.BaseGraph$EdgeIterable_com.graphhopper.util.EdgeIteratorState_detach(boolean).b"],"com.graphhopper.reader.OSMReaderTest.testSort":["com.graphhopper.storage.BaseGraph$EdgeIterable_com.graphhopper.util.EdgeIteratorState_detach(boolean).t2"]},"type":"branch"}]}]}
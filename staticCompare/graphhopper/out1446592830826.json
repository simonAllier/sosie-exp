{"failureDictionary":{"com.graphhopper.reader.OSMReaderTest.testFerry":57,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":1,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":4,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":34,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":88,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":46,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":79,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":80,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":15,"com.graphhopper.geohash.SpatialKeyAlgoTest.testOddBits":85,"com.graphhopper.reader.OSMReaderTest.testWithBounds":68,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":5,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":2,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":22,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":39,"com.graphhopper.coll.CompressedArrayTest.testCompress":116,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":20,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":86,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":119,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":44,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":33,"com.graphhopper.GraphHopperTest.testPrepare":48,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":83,"com.graphhopper.reader.OSMReaderTest.testFoot":58,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":77,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":99,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":91,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijectionBug2":87,"com.graphhopper.reader.OSMReaderTest.testOneWay":70,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":97,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":13,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":29,"com.graphhopper.GraphHopperAPITest.testDisconnected179":117,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":18,"com.graphhopper.geohash.SpatialKeyAlgoTest.testNoFurtherIterationIfBitsIs1":89,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":17,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":53,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":94,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":23,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":3,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":75,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":78,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":11,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":62,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":41,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":63,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":109,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":24,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":49,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":118,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":120,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":93,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":9,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":8,"com.graphhopper.GraphHopperTest.testLoadOSM":52,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":98,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":27,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":106,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":95,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":73,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":72,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":111,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":26,"com.graphhopper.reader.OSMReaderTest.testSort":60,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":71,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":40,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":67,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":103,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":82,"com.graphhopper.reader.OSMReaderTest.testMain":59,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":108,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":6,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijection":90,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":84,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":36,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":35,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":21,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":76,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":112,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":107,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":37,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":100,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":114,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":32,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":64,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":104,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":69,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":31,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":74,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":123,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":96,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":113,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":14,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":81,"com.graphhopper.GraphHopperTest.testFootAndCar":50,"com.graphhopper.geohash.SpatialKeyAlgoTest.testDifferentInitialBounds":92,"com.graphhopper.util.InstructionListTest.testCreateGPX":42,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":7,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":101,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":25,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":121,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":30,"com.graphhopper.GraphHopperTest.testPrepareOnly":45,"com.graphhopper.coll.CompressedArrayTest.testCompress2":115,"com.graphhopper.GraphHopperTest.testVia":47,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":54,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":19,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":16,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":66,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":110,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":51,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":105,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":43,"com.graphhopper.GraphHopperTest.testFootOnly":55,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":122,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":12,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":38,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":65,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":10,"com.graphhopper.reader.OSMReaderTest.testBarriers":61,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":56,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":0,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":28,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":102},"transformations":[{"failures":[],"tindex":"79acfcbd-8281-11e5-9386-19de56ca26af","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:191","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(5)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:91","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.PointList.isEmpty())\n    com.graphhopper.util.PointList = new com.graphhopper.util.PointList(com.graphhopper.util.PointList.size() , com.graphhopper.util.PointList.is3D());\n"},"status":-2},{"failures":[0],"tindex":"79acfcbe-8281-11e5-9386-11e746b99db8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:213","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.storage.DataAccess.getHeader((1 * 4))"},"variableMap":{"edgeCount":"turnCostsEntryBytes","edges":"turnCosts"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.TurnCostExtension:113","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.storage.DataAccess.getHeader(0)"},"status":-1},{"failures":[],"tindex":"79ad23cf-8281-11e5-9386-8da62dd01ef2","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.VirtualEdgeIteratorState:180","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.FlagEncoder.isForward(com.graphhopper.routing.VirtualEdgeIteratorState.getFlags())"},"status":-2},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],"tindex":"79ad23d0-8281-11e5-9386-ada8dc222836","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:158","type":"CtIfImpl","sourcecode":"if (int >= 0) {\n    int[][int] = int;\n} else {\n    int = ~int;\n    if ((int < (int)) && ((int[][int]) == (com.graphhopper.coll.SparseIntIntArray.int))) {\n        int[][int] = int;\n        int[][int] = int;\n        return int;\n    } \n    if ((boolean) && ((int) >= (int[].int))) {\n        com.graphhopper.coll.SparseIntIntArray.gc();\n        int = ~com.graphhopper.coll.SparseIntIntArray.(com.graphhopper.coll.SparseIntIntArray.binarySearch(int[], 0, int, int));\n    } \n    if ((int) >= (int[].int)) {\n        int int = com.graphhopper.util.Helper.idealIntArraySize(((int) + 1));\n        int[] int[] = new int[int];\n        int[] int[] = new int[int];\n        java.lang.System.arraycopy(int[], 0, int[], 0, int[].int);\n        java.lang.System.arraycopy(int[], 0, int[], 0, int[].int);\n        int[] = int[];\n        int[] = int[];\n    } \n    if (((int) - int) != 0) {\n        java.lang.System.arraycopy(int[], int, int[], (int + 1), ((int) - int));\n        java.lang.System.arraycopy(int[], int, int[], (int + 1), ((int) - int));\n    } \n    int[][int] = int;\n    int[][int] = int;\n    (int)++;\n}"},"status":-1},{"failures":[],"tindex":"79ad23d1-8281-11e5-9386-6bd45314646d","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DouglasPeucker:43","type":"CtAssignmentImpl","sourcecode":"boolean = boolean"},"variableMap":{"a":"finishedFrom","approx":"finishedFrom"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:115","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":0},{"failures":[],"tindex":"79ad23d2-8281-11e5-9386-71a374d0717e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:198","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.coll.GHLongIntBTree.ReturnValue com.graphhopper.coll.GHLongIntBTree.ReturnValue"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHLongIntBTree:82","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.coll.GHLongIntBTree.ReturnValue com.graphhopper.coll.GHLongIntBTree.ReturnValue = com.graphhopper.coll.GHLongIntBTree.BTreeEntry.put(long, int)"},"status":-2},{"failures":[],"tindex":"79ad23d3-8281-11e5-9386-b774e9967517","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:1106","type":"CtIfImpl","sourcecode":"if ((int) == (com.graphhopper.storage.EdgeAccess.int))\n    continue;\n"},"variableMap":{"baseNode":"to","com.graphhopper.storage.EdgeAccess.NO_NODE":"to"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:83","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.WeightApproximator.setGoalNode(int)"},"status":-2},{"failures":[],"tindex":"79ad49e4-8281-11e5-9386-f37e2f0d3ee1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:536","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.LockFactory = new com.graphhopper.storage.NativeFSLockFactory()"},"status":0},{"failures":[42,43],"tindex":"79ad70f5-8281-11e5-9386-215c72dc165b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMNode:118","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\" lon=\")"},"variableMap":{"txt":"output"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:255","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<\/rtept>\")"},"status":-1},{"failures":[44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"tindex":"79ad9806-8281-11e5-9386-7d9da4bf23c1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:280","type":"CtTryImpl","sourcecode":"try {\n    com.graphhopper.reader.OSMInputFile = new com.graphhopper.reader.OSMInputFile(java.io.File).setWorkerThreads(int).open();\n    com.graphhopper.coll.LongIntMap com.graphhopper.coll.LongIntMap = com.graphhopper.reader.OSMReader.getNodeMap();\n    com.graphhopper.reader.OSMElement com.graphhopper.reader.OSMElement;\n    while ((com.graphhopper.reader.OSMElement = com.graphhopper.reader.OSMInputFile.getNext()) != null) {\n        switch (com.graphhopper.reader.OSMElement.getType()) {\n            case com.graphhopper.reader.OSMElement.int :\n                if ((com.graphhopper.coll.LongIntMap.get(com.graphhopper.reader.OSMElement.getId())) != (-1)) {\n                    com.graphhopper.reader.OSMReader.processNode(((com.graphhopper.reader.OSMNode)(com.graphhopper.reader.OSMElement)));\n                } \n                break;\n            case com.graphhopper.reader.OSMElement.int :\n                if (long < 0) {\n                    com.graphhopper.reader.OSMReader.org.slf4j.Logger.info((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \", now parsing ways\"));\n                    long = long;\n                } \n                com.graphhopper.reader.OSMReader.processWay(((com.graphhopper.reader.OSMWay)(com.graphhopper.reader.OSMElement)));\n                break;\n            case com.graphhopper.reader.OSMElement.int :\n                if (long < 0) {\n                    com.graphhopper.reader.OSMReader.org.slf4j.Logger.info((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \", now parsing relations\"));\n                    long = long;\n                } \n                com.graphhopper.reader.OSMReader.processRelation(((com.graphhopper.reader.OSMRelation)(com.graphhopper.reader.OSMElement)));\n                break;\n        }\n        if (((++long) % 100000000) == 0) {\n            com.graphhopper.reader.OSMReader.org.slf4j.Logger.info(((((((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \", locs:\") + com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long))) + \" (\") + (long)) + \") \") + (com.graphhopper.util.Helper.getMemInfo())));\n        } \n    }\n} catch (java.lang.Exception ex) {\n    throw new java.lang.RuntimeException((((\"Couldn\\'t process file \" + java.io.File) + \", error: \") + (java.lang.Exception.getMessage())) , java.lang.Exception);\n} finally {\n    com.graphhopper.util.Helper.close(com.graphhopper.reader.OSMInputFile);\n}"},"status":-1},{"failures":[71,72,73,50,74,75,76,77,78,79,80,81,82,83,84],"tindex":"79ad9807-8281-11e5-9386-eb5d935a42de","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.PathBidirRef:49","type":"CtAssignmentImpl","sourcecode":"boolean = boolean"},"status":-1},{"failures":[85,86,87,88,89,90,91,92,93,55,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,83,115,116,117,61],"tindex":"79ad9808-8281-11e5-9386-691e23d01166","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.UnsafeDataAccess:267","type":"CtIfImpl","sourcecode":"if (long > (this.long))\n    throw new java.lang.IllegalStateException(\"Use ensureCapacity to increase capacity!\");\n"},"variableMap":{"bytes":"bits","capacity":"spatialKey"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:229","type":"CtIfImpl","sourcecode":"if ((long & long) != 0) {\n    double += double;\n} "},"status":-1},{"failures":[],"tindex":"79ad9809-8281-11e5-9386-4510680ed79f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:596","type":"CtAssignmentImpl","sourcecode":"long = ((long)((double * (com.graphhopper.storage.CHGraphImpl.double)))) << 2"},"status":-2},{"failures":[],"tindex":"79adbf1a-8281-11e5-9386-9b1dd42d61e5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.GHUtility:526","type":"CtReturnImpl","sourcecode":"return int > int ? int + 1 : int"},"variableMap":{"nodeB":"hash","edgeId":"hash","nodeA":"hash"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FastestWeighting:91","type":"CtReturnImpl","sourcecode":"return int"},"status":0},{"failures":[118,74,75,119,120,121,122],"tindex":"79adbf1b-8281-11e5-9386-3bcdf9f7e28d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:254","type":"CtAssertImpl","sourcecode":"assert (int + 2) <= (int) : \"integer cannot be distributed over two segments\""},"variableMap":{"segmentSizeInBytes":"priority","index":"polledNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:315","type":"CtIfImpl","sourcecode":"if (int > (com.graphhopper.coll.GHTreeMapComposed.peekValue())) {\n    com.graphhopper.coll.GHTreeMapComposed.insert(int, int);\n    com.graphhopper.util.StopWatch.stop();\n    continue;\n} "},"status":-1},{"failures":[123],"tindex":"79adbf1c-8281-11e5-9386-37eb2f304d68","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:381","type":"CtIfImpl","sourcecode":"if (int == (-(java.lang.Integer.int)))\n    return -(java.lang.Double.double);\n"},"status":-1},{"failures":[64],"tindex":"79adbf1d-8281-11e5-9386-69d22acd568a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:926","type":"CtIfImpl","sourcecode":"if (\"to\".equals(com.graphhopper.reader.OSMRelation.Member.role())) {\n    long = com.graphhopper.reader.OSMRelation.Member.ref();\n} "},"status":-1},{"failures":[],"tindex":"79adbf1e-8281-11e5-9386-f930bc4d6cf3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:361","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:246","type":"CtLocalVariableImpl","sourcecode":"int int = -1"},"status":-2},{"failures":[],"tindex":"79adbf1f-8281-11e5-9386-9b065afa6096","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:92","type":"CtLocalVariableImpl","sourcecode":"double double"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:356","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.routing.util.AbstractFlagEncoder.getMaxSpeed(com.graphhopper.reader.OSMWay)"},"status":-2},{"failures":[],"tindex":"79ade630-8281-11e5-9386-13350d43613f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.Path:110","type":"CtIfImpl","sourcecode":"if ((int) < 0)\n    throw new java.lang.IllegalStateException(\"Call extract() before retrieving fromNode\");\n"},"variableMap":{"fromNode":"current"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BreadthFirstSearch:37","type":"CtWhileImpl","sourcecode":"while (!(com.graphhopper.util.SimpleIntDeque.isEmpty())) {\n    int = com.graphhopper.util.SimpleIntDeque.pop();\n    if (!com.graphhopper.util.XFirstSearch.(goFurther(int)))\n        continue;\n    \n    com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n        if (com.graphhopper.util.XFirstSearch.(checkAdjacent(com.graphhopper.util.EdgeIterator)) && (!(com.graphhopper.coll.GHBitSet.contains(int)))) {\n            com.graphhopper.coll.GHBitSet.add(int);\n            com.graphhopper.util.SimpleIntDeque.push(int);\n        } \n    }\n}"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
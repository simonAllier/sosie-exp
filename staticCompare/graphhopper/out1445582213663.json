{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":261,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":4,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":36,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":12,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":154,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":167,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":248,"com.graphhopper.reader.OSMReaderTest.testFerry":313,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":292,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":293,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":1,"com.graphhopper.routing.QueryGraphTest.testOneWay":11,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":198,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":150,"com.graphhopper.reader.OSMReaderTest.testWithBounds":324,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":266,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":6,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":72,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":258,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":73,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":244,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":46,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":225,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":121,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":294,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":143,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":105,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":197,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":54,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":147,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":274,"com.graphhopper.GraphHopperTest.testPrepare":303,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":100,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":35,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":215,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":42,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":231,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":9,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":18,"com.graphhopper.util.InstructionListTest.testWayList":283,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":27,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":282,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":280,"com.graphhopper.GraphHopperAPITest.testDisconnected179":330,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":77,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":171,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":255,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":308,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":148,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":74,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":250,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":19,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":24,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":151,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":69,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":328,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":76,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":319,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":115,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":61,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":184,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":264,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":277,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":304,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":221,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":139,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":107,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":113,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":109,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":57,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":108,"com.graphhopper.GraphHopperTest.testLoadOSM":307,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":55,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":159,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":124,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":152,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":179,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":235,"com.graphhopper.reader.OSMReaderTest.testSort":316,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":234,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":30,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":75,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":323,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":194,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":240,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":51,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":213,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":129,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":130,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":275,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":85,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":8,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":40,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":312,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":60,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":212,"com.graphhopper.routing.PathTest.testWayList":66,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":112,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":276,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":134,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":189,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":41,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeReturn":205,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":222,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":17,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":83,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":3,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":25,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":149,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":243,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":123,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":91,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":191,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":230,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":86,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":173,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":93,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":220,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":135,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":211,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":228,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":32,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":68,"com.graphhopper.util.GHUtilityTest.testSort":289,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":256,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":10,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":156,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":22,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":21,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":208,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":13,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":98,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":116,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":218,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":168,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":89,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":104,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":141,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":144,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":172,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":7,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":206,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":81,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":142,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":84,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":309,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":233,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":165,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":96,"com.graphhopper.GraphHopperAPITest.testLoad":329,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":306,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":39,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":101,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":71,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":176,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":217,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":78,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":87,"com.graphhopper.reader.OSMReaderTest.testBarriers":317,"com.graphhopper.routing.PathTest.testFound":62,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes":195,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":268,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":311,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":118,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":23,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":252,"com.graphhopper.util.GHUtilityTest.testCopy":288,"com.graphhopper.routing.PathTest.testFindInstruction":67,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":15,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":88,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":279,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":97,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":257,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":224,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":26,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":166,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":241,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":229,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":31,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":110,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":232,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":286,"com.graphhopper.storage.GraphHopperStorageCHTest.testFlags":186,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":34,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":204,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":48,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":99,"com.graphhopper.reader.PrinctonReaderTest.testRead":327,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":242,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":188,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":94,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":247,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":175,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":0,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":53,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes2":183,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":214,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":253,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":102,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":200,"com.graphhopper.util.InstructionListTest.testWayList2":284,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":127,"com.graphhopper.reader.OSMReaderTest.testFoot":314,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":271,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":14,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":160,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":267,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":157,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":245,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":158,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":209,"com.graphhopper.reader.OSMReaderTest.testOneWay":326,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":92,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":181,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":114,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":80,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetLocations":192,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":226,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":185,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":238,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":237,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":111,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":260,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":52,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":137,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":216,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":223,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":263,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":318,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":65,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":47,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":38,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":131,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":95,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":44,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":56,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":201,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":45,"com.graphhopper.routing.PathBidirRefTest.testExtract":58,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":145,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":291,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":301,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":79,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":155,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":296,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnsureSize":177,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":270,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":117,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":300,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":133,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":299,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":269,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":298,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":297,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":164,"com.graphhopper.util.GHUtilityTest.testSort2":287,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":33,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":259,"com.graphhopper.reader.OSMReaderTest.testMain":315,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":207,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":103,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":203,"com.graphhopper.routing.PathBidirRefTest.testExtract2":59,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":202,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":140,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":16,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":273,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":125,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":70,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":161,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":170,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":136,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":236,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":193,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":196,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":119,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":320,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":278,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":106,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":325,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":37,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":146,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":180,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":50,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":153,"com.graphhopper.storage.GraphHopperStorageTest.testClone":219,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":246,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":210,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":239,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":272,"com.graphhopper.storage.GraphHopperStorageCHTest.testCheckFirstNode":199,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":227,"com.graphhopper.GraphHopperTest.testFootAndCar":305,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":178,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":254,"com.graphhopper.routing.PathTest.testTime":63,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":251,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":187,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":49,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":162,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":122,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":29,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":265,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":90,"com.graphhopper.util.GHUtilityTest.testSortDirected":290,"com.graphhopper.GraphHopperTest.testPrepareOnly":295,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":169,"com.graphhopper.GraphHopperTest.testVia":302,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":2,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":249,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":28,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":322,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":132,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":120,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":5,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":174,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":285,"com.graphhopper.GraphHopperTest.testFootOnly":310,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":126,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":321,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":138,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":128,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":64,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":190,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":262,"com.graphhopper.util.InstructionListTest.testFind":281,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":20,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":43,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":82,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":163,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":182},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330],"tindex":"72e828b9-7950-11e5-a89b-e9bc3f19af30","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:1068","type":"CtAssertImpl","sourcecode":"assert boolean"},"variableMap":{"ret":"reverse"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:127","type":"CtIfImpl","sourcecode":"if (boolean)\n    long = com.graphhopper.storage.EdgeAccess.reverseFlags(long, long);\n"},"status":-1},{"failures":[],"tindex":"72e84fca-7950-11e5-a89b-edf544a7cfaa","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:261","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.PathBidirRef.setEdgeEntry(com.graphhopper.storage.EdgeEntry)"},"variableMap":{"bestPath":"this","entryCurrent":"goalEdge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:185","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.Path.setEndNode(com.graphhopper.storage.EdgeEntry.int)"},"status":-2},{"failures":[],"tindex":"72e84fcb-7950-11e5-a89b-d57fcefd1220","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:232","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"already closed\")"},"status":-2},{"failures":[],"tindex":"72e84fcc-7950-11e5-a89b-f5134e525131","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:445","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    java.lang.String = java.lang.String.substring(0, int).trim();\n} else {\n    int = java.lang.String.indexOf(\"kph\");\n    if (int > 0) {\n        java.lang.String = java.lang.String.substring(0, int).trim();\n    } \n}"},"status":-2},{"failures":[],"tindex":"72e876dd-7950-11e5-a89b-09ac036903ea","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.VirtualEdgeIteratorState:174","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"72e876de-7950-11e5-a89b-c9531aeb58d5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:424","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.CHGraphImpl.CHEdgeIteratorImpl.checkShortcut(false, \"fetchWayGeometry\")"},"variableMap":{"this":"adjEdge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:619","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.VirtualEdgeIterator.add(com.graphhopper.util.EdgeIteratorState)"},"status":-2},{"failures":[],"tindex":"72e876df-7950-11e5-a89b-3d4ebb71b90e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.pbf.PbfBlobDecoder:238","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    break;\n} "},"variableMap":{"keyIndex":"removedEdges"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:253","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.routing.util.TIntList.size()) < int)\n    for (int int = 0 ; int < (com.graphhopper.routing.util.TIntList.size()) ; int++) {\n        com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(com.graphhopper.routing.util.TIntList.get(int));\n        while (com.graphhopper.util.EdgeIterator.next()) {\n            com.graphhopper.util.EdgeIterator.setFlags(com.graphhopper.routing.util.FlagEncoder.setAccess(com.graphhopper.util.EdgeIterator.getFlags(), false, false));\n            int++;\n        }\n    }\n"},"status":-2},{"failures":[],"tindex":"72e876e0-7950-11e5-a89b-65b1173f21ed","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:608","type":"CtAssignmentImpl","sourcecode":"long = 1L << int"},"variableMap":{"turnRestrictionBit":"encoded","shift":"com.graphhopper.routing.util.FootFlagEncoder.MEAN_SPEED"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:293","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(long, com.graphhopper.routing.util.FootFlagEncoder.int)"},"status":-2},{"failures":[],"tindex":"72e876e1-7950-11e5-a89b-c55c7ebc47fb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:265","type":"CtTryImpl","sourcecode":"try {\n    if (java.io.Closeable != null)\n        java.io.Closeable.close();\n    \n} catch (java.io.IOException ex) {\n    throw new java.lang.RuntimeException(\"Couldn\\'t close resource\" , java.io.IOException);\n}"},"status":-2},{"failures":[],"tindex":"72e876e2-7950-11e5-a89b-3b2758257488","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.GHUtility:46","type":"CtLocalVariableImpl","sourcecode":"java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Constants:111","type":"CtLocalVariableImpl","sourcecode":"java.util.List<java.lang.String> java.util.List<java.lang.String> = com.graphhopper.util.Helper.com.graphhopper.util.Helper.readFile(new java.io.InputStreamReader(com.graphhopper.GraphHopper.com.graphhopper.GraphHopper.getResourceAsStream(\"builddate\") , com.graphhopper.util.Helper.java.nio.charset.Charset))"},"status":-2},{"failures":[],"tindex":"72e876e3-7950-11e5-a89b-57d6f861b6ff","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:392","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.create(long)"},"status":-2},{"failures":[],"tindex":"72e89df4-7950-11e5-a89b-c737ce934aa1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:447","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:656","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.EdgeAccess.init(com.graphhopper.storage.EdgeAccess.int, com.graphhopper.storage.EdgeAccess.int, com.graphhopper.storage.EdgeAccess.int, com.graphhopper.storage.EdgeAccess.int, com.graphhopper.storage.EdgeAccess.int, com.graphhopper.storage.EdgeAccess.int, false)"},"status":-2},{"failures":[],"tindex":"72e89df5-7950-11e5-a89b-9754bbd69d9e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:133","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.util.StopWatch com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch().start()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:255","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.util.StopWatch com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch()"},"status":-2},{"failures":[],"tindex":"72e89df6-7950-11e5-a89b-bb71f46878a6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMInputFile:249","type":"CtIfImpl","sourcecode":"if ((int) <= 0)\n    int = 2;\n"},"variableMap":{"workerThreads":"maxCount"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:168","type":"CtForEachImpl","sourcecode":"for (TIntArrayList TIntArrayList : java.util.List<com.graphhopper.routing.util.TIntArrayList>) {\n    if (int < 0) {\n        int = com.graphhopper.routing.util.TIntArrayList.size();\n        com.graphhopper.routing.util.TIntList = com.graphhopper.routing.util.TIntArrayList;\n        continue;\n    } \n    int int;\n    if (int < (com.graphhopper.routing.util.TIntArrayList.size())) {\n        int = com.graphhopper.routing.util.PrepareRoutingSubnetworks.removeEdges(com.graphhopper.util.EdgeExplorer, com.graphhopper.routing.util.FlagEncoder, com.graphhopper.routing.util.TIntList, int);\n        int = com.graphhopper.routing.util.TIntArrayList.size();\n        com.graphhopper.routing.util.TIntList = com.graphhopper.routing.util.TIntArrayList;\n    } else {\n        int = com.graphhopper.routing.util.PrepareRoutingSubnetworks.removeEdges(com.graphhopper.util.EdgeExplorer, com.graphhopper.routing.util.FlagEncoder, com.graphhopper.routing.util.TIntArrayList, int);\n    }\n    int += int;\n}"},"status":-2},{"failures":[],"tindex":"72e89df7-7950-11e5-a89b-95868b0e5ee8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:96","type":"CtAssignmentImpl","sourcecode":"double = double + (2 * (java.lang.Math.double))"},"variableMap":{"resultOrientation":"lonDelta","orientation":"lon","java.lang.Math.PI":"lonDelta"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.LinearKeyAlgo:106","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.shapes.GHPoint.double = double + ((double) / 2)"},"status":-2},{"failures":[],"tindex":"72e89df8-7950-11e5-a89b-5fab80571b47","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:356","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (int) ; int++) {\n    com.graphhopper.util.PointList.add(double[][int], double[][int]);\n}"},"status":-2},{"failures":[],"tindex":"72e89df9-7950-11e5-a89b-d9a46f7df0ba","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.QueryGraph:258","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.add(java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.get(((java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.size()) - 2)))"},"variableMap":{"virtualEdges":"modifiedEdges"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:439","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.add(com.graphhopper.routing.VirtualEdgeIteratorState)"},"status":-2},{"failures":[],"tindex":"72e89dfa-7950-11e5-a89b-61e50e6d71cb","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:146","type":"CtIfImpl","sourcecode":"if (int > 100)\n    throw new java.lang.IllegalArgumentException(\"neighborUpdates has to be in [0, 100], to disable it use 0\");\n"},"variableMap":{"neighborUpdates":"neighborNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:260","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.routing.AStar.AStarEdge == null) || ((com.graphhopper.routing.AStar.AStarEdge.double) > float)) {\n    double double = com.graphhopper.routing.util.ConsistentWeightApproximator.approximate(int, boolean);\n    double double = float + double;\n    if (com.graphhopper.routing.AStar.AStarEdge == null) {\n        com.graphhopper.routing.AStar.AStarEdge = new com.graphhopper.routing.AStar.AStarEdge(com.graphhopper.util.EdgeIterator.getEdge() , int , double , float);\n        com.graphhopper.routing.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.put(int, com.graphhopper.routing.AStar.AStarEdge);\n    } else {\n        assert (com.graphhopper.routing.AStar.AStarEdge.double) > double : \"Inconsistent distance estimate\";\n        java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.remove(com.graphhopper.routing.AStar.AStarEdge);\n        com.graphhopper.routing.AStar.AStarEdge.int = com.graphhopper.util.EdgeIterator.getEdge();\n        com.graphhopper.routing.AStar.AStarEdge.double = double;\n        com.graphhopper.routing.AStar.AStarEdge.double = float;\n    }\n    com.graphhopper.routing.AStar.AStarEdge.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge;\n    java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.add(com.graphhopper.routing.AStar.AStarEdge);\n    com.graphhopper.routing.AStarBidirection.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge, int);\n} "},"status":-2},{"failures":[],"tindex":"72e8c50b-7950-11e5-a89b-cb487aee34c7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:198","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GraphHopper.setSimplifyResponse(true)"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:737","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GraphHopper.setGraphHopperLocation(java.lang.String)"},"status":-2},{"failures":[],"tindex":"72e8c50c-7950-11e5-a89b-abcc5e101a07","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:137","type":"CtAssignmentImpl","sourcecode":"java.lang.String = \"E\""},"variableMap":{"cp":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:265","type":"CtAssignmentImpl","sourcecode":"java.lang.String = com.graphhopper.util.Helper.isEmpty(java.lang.String) ? com.graphhopper.util.Translation.tr(\"continue\") : com.graphhopper.util.Translation.tr(\"continue_onto\", java.lang.String)"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
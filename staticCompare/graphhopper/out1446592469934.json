{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":135,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":264,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":283,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":290,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":142,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":177,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":53,"com.graphhopper.reader.OSMReaderTest.testFerry":14,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":302,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":303,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":280,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":123,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":41,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":3,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":324,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":173,"com.graphhopper.geohash.SpatialKeyAlgoTest.testOddBits":39,"com.graphhopper.reader.OSMReaderTest.testWithBounds":25,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":137,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":61,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":285,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":295,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":296,"com.graphhopper.coll.CompressedArrayTest.testCompress":38,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":81,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":66,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":159,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":1,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":152,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":122,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":204,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":84,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":156,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":314,"com.graphhopper.GraphHopperTest.testPrepare":5,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":74,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":199,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":100,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":216,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":78,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":229,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":288,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":90,"com.graphhopper.util.InstructionListTest.testWayList":306,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":94,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":305,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":329,"com.graphhopper.GraphHopperAPITest.testDisconnected179":105,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":47,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":300,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":58,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":328,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":10,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":33,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":297,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":91,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":261,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":174,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":250,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":276,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":20,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":299,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":326,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":111,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":268,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":64,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":75,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":6,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEdgeCases":44,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":148,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":206,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":317,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":208,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":86,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":207,"com.graphhopper.GraphHopperTest.testLoadOSM":9,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":179,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":257,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":162,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":107,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":175,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":233,"com.graphhopper.reader.OSMReaderTest.testSort":17,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":232,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":96,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":24,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":298,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":119,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":77,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":83,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":31,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":32,"com.graphhopper.util.PointListTest.testReverse":320,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijection":42,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":138,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":327,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":187,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":266,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":287,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":248,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":214,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":267,"com.graphhopper.routing.PathTest.testWayList":273,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":210,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":60,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":169,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":114,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":103,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":221,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":89,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":185,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":93,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":172,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":239,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":282,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":161,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":116,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":192,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":228,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":322,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":188,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":193,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":220,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":170,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":133,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":226,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":98,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":323,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":275,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":330,"com.graphhopper.util.GHUtilityTest.testSort":312,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":59,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":178,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":289,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":92,"com.graphhopper.geohash.SpatialKeyAlgoTest.testDifferentInitialBounds":46,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":131,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":259,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":197,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":212,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":291,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":143,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":150,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":203,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":153,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":48,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":130,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":286,"com.graphhopper.coll.CompressedArrayTest.testCompress2":37,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":151,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":11,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":186,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":231,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":140,"com.graphhopper.GraphHopperAPITest.testLoad":104,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":8,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":102,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":200,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":223,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":294,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":218,"com.graphhopper.reader.OSMReaderTest.testBarriers":18,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":189,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":301,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":68,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes":120,"com.graphhopper.routing.PathTest.testFound":269,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":13,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":157,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":56,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":260,"com.graphhopper.util.GHUtilityTest.testCopy":311,"com.graphhopper.routing.PathTest.testFindInstruction":274,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":87,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":190,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":313,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":196,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":222,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":262,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":141,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":238,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":227,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":97,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":209,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":230,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":309,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":263,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":129,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":198,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":253,"com.graphhopper.reader.PrinctonReaderTest.testRead":249,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":319,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":40,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":316,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":52,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":50,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":215,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":256,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":279,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":201,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":125,"com.graphhopper.util.InstructionListTest.testWayList2":307,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":30,"com.graphhopper.reader.OSMReaderTest.testFoot":15,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":71,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":67,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":180,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":292,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":35,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":43,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":240,"com.graphhopper.reader.OSMReaderTest.testOneWay":27,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":36,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":325,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":109,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":211,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetLocations":117,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":224,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":112,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":236,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":235,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":62,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":195,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":255,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":146,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":63,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":217,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":19,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":272,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":252,"com.graphhopper.storage.index.BresenhamLineTest.testRealBresenham":28,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":101,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":166,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":194,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":80,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":85,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":126,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":154,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":251,"com.graphhopper.routing.PathBidirRefTest.testExtract":277,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":247,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":34,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":242,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":70,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnsureSize":106,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":213,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":246,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":168,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":245,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":69,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":244,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":243,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":184,"com.graphhopper.util.GHUtilityTest.testSort2":310,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":99,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":134,"com.graphhopper.reader.OSMReaderTest.testMain":16,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":315,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":202,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode":45,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":128,"com.graphhopper.routing.PathBidirRefTest.testExtract2":278,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":127,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":149,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":73,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":88,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":163,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":145,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":181,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":293,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":331,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":171,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":234,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":118,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":121,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":21,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":158,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":139,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":205,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":26,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":108,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":155,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":265,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":82,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":176,"com.graphhopper.storage.GraphHopperStorageTest.testClone":219,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":241,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":72,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":132,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":237,"com.graphhopper.storage.GraphHopperStorageCHTest.testCheckFirstNode":124,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":225,"com.graphhopper.GraphHopperTest.testFootAndCar":7,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":318,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":51,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":57,"com.graphhopper.routing.PathTest.testTime":270,"com.graphhopper.util.InstructionListTest.testCreateGPX":321,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":55,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":113,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":254,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":182,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":160,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":65,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":95,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":191,"com.graphhopper.GraphHopperTest.testPrepareOnly":2,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":115,"com.graphhopper.GraphHopperTest.testVia":4,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":144,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":281,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":54,"com.graphhopper.util.InstructionListTest.testCreateGPXWithEle":0,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":23,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":167,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":29,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":49,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":284,"com.graphhopper.GraphHopperTest.testFootOnly":12,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":308,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":164,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":22,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":147,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":165,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":136,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":271,"com.graphhopper.util.InstructionListTest.testFind":304,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":258,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":79,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":76,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":110,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":183},"transformations":[{"failures":[0],"tindex":"a292e9e1-8280-11e5-8e16-4ff34ed2d640","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionList:251","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<gh:azimuth>\")"},"variableMap":{"output":"track"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:221","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<ele>\").append(com.graphhopper.util.Helper.round2(com.graphhopper.util.GPXEntry.getEle())).append(\"<\/ele>\")"},"status":-1},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],"tindex":"a29310f2-8280-11e5-8e16-bf6c01a845fe","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMInputFile:186","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = javax.xml.stream.XMLStreamReader.getAttributeValue(null, \"id\")"},"variableMap":{"parser":"parser"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMWay:61","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = javax.xml.stream.XMLStreamReader.getAttributeValue(null, \"ref\")"},"status":-1},{"failures":[28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"tindex":"a29310f3-8280-11e5-8e16-b52e5293e1ab","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:166","type":"CtLocalVariableImpl","sourcecode":"double double = double / double"},"variableMap":{"dx":"minLonTmp","dy":"maxLonTmp"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:184","type":"CtLocalVariableImpl","sourcecode":"double double = (double + double) / 2"},"status":-1},{"failures":[],"tindex":"a2933804-8280-11e5-8e16-718dc5a5c533","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:109","type":"CtIfImpl","sourcecode":"if (int < 15)\n    int = 15;\n"},"variableMap":{"cap":"length"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:115","type":"CtForImpl","sourcecode":"for (int int = int[][].int ; int < (int[][].int) ; int++) {\n    int[][][int] = new int[1 << (int)];\n}"},"status":-2},{"failures":[28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"tindex":"a2933805-8280-11e5-8e16-b5263c65705c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:190","type":"CtOperatorAssignmentImpl","sourcecode":"long |= 1"},"status":-1},{"failures":[47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103],"tindex":"a2933806-8280-11e5-8e16-ade09735c962","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.CompressedArray:87","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"variableMap":{"currentEntry":"E_NODEA"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:46","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"status":-1},{"failures":[104,105,47,48,50,106,51,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,52,53,54,55,56,57,59,60,61,134,62,135,136,63,64,65,137,67,68,69,70,71,73,138,75,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,29,159,160,161,162,163,164,30,165,31,32,166,167,168,169,170,171,33,172,173,174,175,176,177,34,178,35,36,179,180,181,182,183,184,76,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,77,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,79,80,251,81,252,253,254,82,255,256,84,257,85,86,88,91,258,259,92,260,261,93,262,94,95,98,99,263,100,264,265,101,102,266,103,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313],"tindex":"a2935f17-8280-11e5-8e16-23963c06c203","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:168","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException((\"You cannot configure this GraphStorage \" + \"after calling create or loadExisting. Calling one of the methods twice is also not allowed.\"));\n"},"variableMap":{"initialized":"backward"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:316","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.routing.util.AbstractFlagEncoder com.graphhopper.routing.util.AbstractFlagEncoder : java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>) {\n    long |= com.graphhopper.routing.util.AbstractFlagEncoder.flagsDefault(boolean, boolean);\n}"},"status":-1},{"failures":[],"tindex":"a2938628-8280-11e5-8e16-eda4f95964d0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:204","type":"CtIfImpl","sourcecode":"if (int <= ((1 << int) - 12)) {\n    return (1 << int) - 12;\n} "},"variableMap":{"need":"index","i":"index"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:259","type":"CtReturnImpl","sourcecode":"return int[][int]"},"status":-2},{"failures":[],"tindex":"a2938629-8280-11e5-8e16-0d8c57bfe62e","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:300","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.flush()"},"variableMap":{"baseGraph":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:757","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.setWayGeometry_(com.graphhopper.storage.BaseGraph.fetchWayGeometry_(long, true, 0, -1, -1), long, false)"},"status":0},{"failures":[104,108,314,315,52,66,74,188,316,317,216,318,319,242,243,244,246,5,6,20,101,273,279,282,283,288,292,306,311,320],"tindex":"a293862a-8280-11e5-8e16-e9e6db641057","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:234","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    int int = ((int) - int) - 1;\n    double double = double[][int];\n    double[][int] = double[][int];\n    double[][int] = double;\n    double = double[][int];\n    double[][int] = double[][int];\n    double[][int] = double;\n    if (boolean) {\n        double = double[][int];\n        double[][int] = double[][int];\n        double[][int] = double;\n    } \n}"},"status":-1},{"failures":[],"tindex":"a293ad3b-8280-11e5-8e16-6bb4769cbadc","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.GHUtility:159","type":"CtIfImpl","sourcecode":"if (((int)++) > int) {\n    return false;\n} "},"variableMap":{"counts":"segmentSizeInBytes","counter":"com.graphhopper.storage.AbstractDataAccess.HEADER_OFFSET"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:143","type":"CtTryImpl","sourcecode":"try {\n    java.io.RandomAccessFile java.io.RandomAccessFile = new java.io.RandomAccessFile(com.graphhopper.storage.AbstractDataAccess.getFullName() , \"r\");\n    try {\n        long long = com.graphhopper.storage.AbstractDataAccess.(readHeader(java.io.RandomAccessFile)) - (com.graphhopper.storage.AbstractDataAccess.int);\n        if (long < 0)\n            return false;\n        \n        java.io.RandomAccessFile.seek(com.graphhopper.storage.AbstractDataAccess.int);\n        int int = ((int)(long / (int)));\n        if ((long % (int)) != 0)\n            int++;\n        \n        byte[][] = new byte[int][];\n        for (int int = 0 ; int < int ; int++) {\n            byte[] byte[] = new byte[int];\n            int int = java.io.RandomAccessFile.read(byte[]);\n            if (int <= 0)\n                throw new java.lang.IllegalStateException((((\"segment \" + int) + \" is empty? \") + com.graphhopper.storage.AbstractDataAccess.(toString())));\n            \n            byte[][][int] = byte[];\n        }\n        return true;\n    } finally {\n        java.io.RandomAccessFile.close();\n    }\n} catch (java.io.IOException ex) {\n    throw new java.lang.RuntimeException((\"Problem while loading \" + com.graphhopper.storage.AbstractDataAccess.(getFullName())) , java.io.IOException);\n}"},"status":-2},{"failures":[18,23],"tindex":"a293ad3c-8280-11e5-8e16-097ee7118af6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:204","type":"CtLocalVariableImpl","sourcecode":"long long = 1L << (int - 1)"},"variableMap":{"bits":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:381","type":"CtLocalVariableImpl","sourcecode":"long long = gnu.trove.list.TLongList.get(int)"},"status":-1},{"failures":[],"tindex":"a293ad3d-8280-11e5-8e16-9b1b394e389f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:168","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(90.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"variableMap":{"weightToPrioMap":"weightToPrioMap","com.graphhopper.routing.util.PriorityCode.PREFER":"com.graphhopper.routing.util.PriorityCode.AVOID_IF_POSSIBLE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:558","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(50.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"status":-2},{"failures":[321,308],"tindex":"a293d44e-8280-11e5-8e16-37756288f3a5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionList:221","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<ele>\")"},"variableMap":{"track":"track"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:210","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"<\/rte>\")"},"status":-1},{"failures":[246,279,290],"tindex":"a293d44f-8280-11e5-8e16-0fbeb2c1536e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:447","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:452","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.VirtualEdgeIteratorState.setVirtualEdgePreference(false)"},"status":-1},{"failures":[322,323,324,325,326,327,328,329,330,331],"tindex":"a293d450-8280-11e5-8e16-075d0264441a","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:307","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += \", \""},"variableMap":{"str":"wayTypeName"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:441","type":"CtAssignmentImpl","sourcecode":"java.lang.String = com.graphhopper.util.Translation.tr(\"off_bike\")"},"status":-1},{"failures":[],"tindex":"a293d451-8280-11e5-8e16-794342991261","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:944","type":"CtIfImpl","sourcecode":"if (double <= (double))\n    return false;\n"},"variableMap":{"equalNormedDelta":"queryLat","tmpNormedDist":"queryLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:739","type":"CtIfImpl","sourcecode":"if ((int % 2) == 1) {\n    if (!(gnu.trove.set.hash.TIntHashSet.isEmpty())) {\n        double double = com.graphhopper.storage.index.LocationIndexTree.calculateRMin(double, double, int);\n        double double = com.graphhopper.storage.index.LocationIndexTree.calcMinDistance(double, double, gnu.trove.set.hash.TIntHashSet);\n        if (double < double)\n            return true;\n        \n    } \n} "},"status":0},{"failures":[],"tindex":"a293fb62-8280-11e5-8e16-89a2e608e799","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:784","type":"CtIfImpl","sourcecode":"if (double < 1.0E-4) {\n    (long)++;\n    double = 1.0E-4;\n} "},"status":0},{"failures":[],"tindex":"a293fb63-8280-11e5-8e16-11cbb30112db","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:422","type":"CtReturnImpl","sourcecode":"return 6"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:540","type":"CtReturnImpl","sourcecode":"return java.lang.Double.double"},"status":0},{"failures":[111,126,55,68,191,206,219,234,309,311],"tindex":"a293fb64-8280-11e5-8e16-7539e53a36ca","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:281","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.routing.util.AllEdgesIterator.next()) {\n    int int = com.graphhopper.routing.util.AllEdgesIterator.getBaseNode();\n    int int = com.graphhopper.routing.util.AllEdgesIterator.getAdjNode();\n    com.graphhopper.routing.util.AllEdgesIterator.copyPropertiesTo(com.graphhopper.storage.Graph.edge(int, int));\n}"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"a2938629-8280-11e5-8e16-0d8c57bfe62e","diffs":[{"branches":{"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":["com.graphhopper.storage.RAMIntDataAccess_void_flush().b","com.graphhopper.util.shapes.BBox_boolean_hasElevation().b","com.graphhopper.routing.util.FootFlagEncoder_java.lang.String_toString().b","com.graphhopper.storage.RAMIntDataAccess_void_flush().e1","com.graphhopper.routing.util.AbstractFlagEncoder_int_hashCode().b","com.graphhopper.storage.RAMDataAccess_void_flush().t2","com.graphhopper.storage.BaseGraph_int_setNodesHeader().b","com.graphhopper.util.BitUtil_int_getIntHigh(long).b","com.graphhopper.storage.BaseGraph_void_flush().b","com.graphhopper.storage.BaseGraph_int_setWayGeometryHeader().b","com.graphhopper.routing.util.EncodingManager_int_hashCode().b","com.graphhopper.search.NameIndex_void_flush().b","com.graphhopper.storage.AbstractDataAccess_void_setHeader(int,int).b","com.graphhopper.storage.GraphExtension$NoOpExtension_void_flush().b","com.graphhopper.storage.BaseGraph_int_setNodesHeader().e1","com.graphhopper.storage.RAMIntDataAccess_void_flush().t2","com.graphhopper.storage.RAMDataAccess_void_flush().e1","com.graphhopper.storage.RAMDataAccess_void_flush().b","com.graphhopper.storage.BaseGraph_int_setEdgesHeader().b"],"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":["com.graphhopper.storage.RAMIntDataAccess_void_flush().b","com.graphhopper.util.Helper_int_degreeToInt(double).e1","com.graphhopper.util.shapes.BBox_boolean_hasElevation().b","com.graphhopper.storage.RAMIntDataAccess_void_flush().e1","com.graphhopper.routing.util.AbstractFlagEncoder_int_hashCode().b","com.graphhopper.storage.RAMDataAccess_void_flush().t2","com.graphhopper.util.Helper_int_degreeToInt(double).b","com.graphhopper.storage.BaseGraph_int_setNodesHeader().b","com.graphhopper.util.BitUtil_int_getIntHigh(long).b","com.graphhopper.storage.BaseGraph_void_flush().b","com.graphhopper.util.Helper_int_degreeToInt(double).t1","com.graphhopper.util.Helper_int_degreeToInt(double).t2","com.graphhopper.routing.util.EncodingManager_int_hashCode().b","com.graphhopper.storage.BaseGraph_int_setWayGeometryHeader().b","com.graphhopper.search.NameIndex_void_flush().b","com.graphhopper.storage.AbstractDataAccess_void_setHeader(int,int).b","com.graphhopper.storage.BaseGraph_int_setNodesHeader().e1","com.graphhopper.storage.RAMIntDataAccess_void_flush().t2","com.graphhopper.storage.RAMDataAccess_void_flush().e1","com.graphhopper.storage.RAMDataAccess_void_flush().b","com.graphhopper.storage.TurnCostExtension_void_flush().b","com.graphhopper.storage.BaseGraph_int_setEdgesHeader().b"],"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":["com.graphhopper.routing.util.CarFlagEncoder_java.lang.String_toString().b","com.graphhopper.storage.AbstractDataAccess_boolean_isClosed().b","com.graphhopper.storage.MMapDataAccess_void_flush().b","com.graphhopper.storage.MMapDataAccess_void_flush().l3","com.graphhopper.util.shapes.BBox_boolean_hasElevation().b","com.graphhopper.routing.util.FootFlagEncoder_java.lang.String_toString().b","com.graphhopper.routing.util.AbstractFlagEncoder_int_hashCode().b","com.graphhopper.storage.MMapDataAccess_void_flush().e1","com.graphhopper.storage.AbstractDataAccess_void_writeHeader(java.io.RandomAccessFile,long,int).b","com.graphhopper.storage.BaseGraph_int_setNodesHeader().b","com.graphhopper.util.BitUtil_int_getIntHigh(long).b","com.graphhopper.storage.BaseGraph_void_flush().b","com.graphhopper.storage.AbstractDataAccess_void_writeHeader(java.io.RandomAccessFile,long,int).l1","com.graphhopper.storage.BaseGraph_int_setWayGeometryHeader().b","com.graphhopper.routing.util.EncodingManager_int_hashCode().b","com.graphhopper.search.NameIndex_void_flush().b","com.graphhopper.storage.AbstractDataAccess_void_setHeader(int,int).b","com.graphhopper.storage.BaseGraph_int_setNodesHeader().e1","com.graphhopper.storage.MMapDataAccess_void_flush().t2","com.graphhopper.storage.TurnCostExtension_void_flush().b","com.graphhopper.storage.BaseGraph_int_setEdgesHeader().b"],"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":["com.graphhopper.routing.util.CarFlagEncoder_java.lang.String_toString().b","com.graphhopper.storage.RAMIntDataAccess_void_flush().b","com.graphhopper.util.shapes.BBox_boolean_hasElevation().b","com.graphhopper.routing.util.FootFlagEncoder_java.lang.String_toString().b","com.graphhopper.storage.RAMIntDataAccess_void_flush().e1","com.graphhopper.routing.util.AbstractFlagEncoder_int_hashCode().b","com.graphhopper.storage.RAMDataAccess_void_flush().t2","com.graphhopper.storage.BaseGraph_int_setNodesHeader().b","com.graphhopper.util.BitUtil_int_getIntHigh(long).b","com.graphhopper.storage.BaseGraph_void_flush().b","com.graphhopper.storage.BaseGraph_int_setWayGeometryHeader().b","com.graphhopper.routing.util.EncodingManager_int_hashCode().b","com.graphhopper.search.NameIndex_void_flush().b","com.graphhopper.storage.AbstractDataAccess_void_setHeader(int,int).b","com.graphhopper.storage.BaseGraph_int_setNodesHeader().e1","com.graphhopper.storage.RAMIntDataAccess_void_flush().t2","com.graphhopper.storage.RAMDataAccess_void_flush().e1","com.graphhopper.storage.RAMDataAccess_void_flush().b","com.graphhopper.storage.TurnCostExtension_void_flush().b","com.graphhopper.storage.BaseGraph_int_setEdgesHeader().b"]},"type":"branch"}]},{"transformation":"a293fb62-8280-11e5-8e16-89a2e608e799","diffs":[{"branchesDiff":{"delete":["t0"]},"type":"staticDiff"}]},{"transformation":"a293d451-8280-11e5-8e16-794342991261","diffs":[{"branches":{"com.graphhopper.reader.OSMReaderTest.testBarriers":["com.graphhopper.geohash.SpatialKeyAlgo_long_encode(com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.util.shapes.GHPoint_com.graphhopper.util.shapes.GHPoint().b","com.graphhopper.util.DistancePlaneProjection_double_calcDist(double,double,double,double).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).l4","com.graphhopper.storage.GHNodeAccess_double_getLon(int).b","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).b","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).l2","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t3","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).e1","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).b","com.graphhopper.storage.GHNodeAccess_double_getLat(int).b","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e3","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e2","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).t1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t2","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.GraphHopperAPITest.testLoad":["com.graphhopper.geohash.SpatialKeyAlgo_long_encode(com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.util.shapes.GHPoint_com.graphhopper.util.shapes.GHPoint().b","com.graphhopper.util.DistancePlaneProjection_double_calcDist(double,double,double,double).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).l4","com.graphhopper.storage.GHNodeAccess_double_getLon(int).b","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).b","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).l2","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t2","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t3","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).e1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e2","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).b","com.graphhopper.storage.GHNodeAccess_double_getLat(int).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e3","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e2","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).t1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t2","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t1","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":["com.graphhopper.geohash.SpatialKeyAlgo_long_encode(com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.util.shapes.GHPoint_com.graphhopper.util.shapes.GHPoint().b","com.graphhopper.util.DistancePlaneProjection_double_calcDist(double,double,double,double).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).l4","com.graphhopper.storage.GHNodeAccess_double_getLon(int).b","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).b","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).l2","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e2","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).b","com.graphhopper.storage.GHNodeAccess_double_getLat(int).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e3","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e2","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).t1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t1","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":["com.graphhopper.geohash.SpatialKeyAlgo_long_encode(com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.util.shapes.GHPoint_com.graphhopper.util.shapes.GHPoint().b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).l4","com.graphhopper.storage.GHNodeAccess_double_getLon(int).b","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).b","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).l2","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t2","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t1","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).e1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e2","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).b","com.graphhopper.storage.GHNodeAccess_double_getLat(int).b","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e3","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e2","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).t1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t2","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":["com.graphhopper.geohash.SpatialKeyAlgo_long_encode(com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.util.shapes.GHPoint_com.graphhopper.util.shapes.GHPoint().b","com.graphhopper.util.DistancePlaneProjection_double_calcDist(double,double,double,double).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).l4","com.graphhopper.storage.GHNodeAccess_double_getLon(int).b","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).b","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).l2","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t3","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).e1","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).b","com.graphhopper.storage.GHNodeAccess_double_getLat(int).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.storage.index.LocationIndexTree_void_fillIDs(long,int,gnu.trove.set.hash.TIntHashSet,int).e3","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e3","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e2","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).t1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t2","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t1","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":["com.graphhopper.geohash.SpatialKeyAlgo_long_encode(com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.util.shapes.GHPoint_com.graphhopper.util.shapes.GHPoint().b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).l4","com.graphhopper.storage.GHNodeAccess_double_getLon(int).b","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).b","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).l2","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t2","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t1","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).e1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e2","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).b","com.graphhopper.storage.GHNodeAccess_double_getLat(int).b","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e3","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e2","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).t1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t1","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"]},"type":"branch"},{"methodsDiff":{"delete":["com.graphhopper.storage.index.LocationIndexTree.calcMinDistance","com.graphhopper.storage.index.LocationIndexTree.calculateRMin","gnu.trove.impl.hash.THash.isEmpty"]},"branchesDiff":{"delete":["t0","t1","t2"]},"type":"staticDiff"}]}]}
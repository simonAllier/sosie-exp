{"failureDictionary":{"com.graphhopper.routing.util.FootFlagEncoderTest.testPriority":63,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":51,"com.graphhopper.routing.PathTest.testFindInstruction":5,"com.graphhopper.reader.OSMReaderTest.testFerry":88,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":70,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":7,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeightMMap":2,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":8,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":47,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":83,"com.graphhopper.reader.OSMReaderTest.testWithBounds":93,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeight":4,"com.graphhopper.GraphHopperTest.testPrepare":23,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":10,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":55,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":72,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":53,"com.graphhopper.reader.OSMReaderTest.testOneWay":94,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":80,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":98,"com.graphhopper.GraphHopperAPITest.testDisconnected179":12,"com.graphhopper.util.PointListTest.testAddPL":65,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":97,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":46,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":68,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":73,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":78,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":48,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":89,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":1,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":40,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":84,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":24,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":66,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":21,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":69,"com.graphhopper.GraphHopperTest.testLoadOSM":27,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":16,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":54,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":35,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":49,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":20,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":19,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":42,"com.graphhopper.reader.OSMReaderTest.testSort":14,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":18,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":17,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":59,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":92,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":82,"com.graphhopper.reader.OSMReaderTest.testMain":13,"com.graphhopper.routing.util.EncodingManagerTest.testSupportFords":60,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":39,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":86,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":61,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":43,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":36,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":56,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":45,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":87,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":0,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":31,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":71,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":79,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":34,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":67,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":95,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":44,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":50,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":9,"com.graphhopper.GraphHopperTest.testFootAndCar":25,"com.graphhopper.reader.dem.SRTMProviderTest.testGetFileString":3,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":96,"com.graphhopper.storage.MMapDataAccessTest.testSet_GetBytes":64,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":52,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":76,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":75,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":57,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":33,"com.graphhopper.GraphHopperTest.testVia":22,"com.graphhopper.util.BitUtilBigTest.testToLong":62,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":28,"com.graphhopper.coll.IntDoubleBinHeapTest.test0":99,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":81,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":91,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":41,"com.graphhopper.GraphHopperAPITest.testLoad":11,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":26,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":32,"com.graphhopper.GraphHopperTest.testFootOnly":29,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":85,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":37,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":90,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":38,"com.graphhopper.util.InstructionListTest.testFind":6,"com.graphhopper.reader.OSMReaderTest.testBarriers":15,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":74,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":30,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":77,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":58},"transformations":[{"failures":[0],"tindex":"095c6dec-82b2-11e5-9529-014594cdc19f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:244","type":"CtAssignmentImpl","sourcecode":"gnu.trove.map.TIntLongMap = new gnu.trove.map.hash.TIntLongHashMap(com.graphhopper.reader.OSMReader.getOsmWayIdSet().size() , 0.5F , -1 , -1)"},"status":-1},{"failures":[1,2,3,4],"tindex":"095c94fd-82b2-11e5-9529-f79a68e2d6b2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:367","type":"CtIfImpl","sourcecode":"if (double <= (-(java.lang.Double.double)))\n    return -(java.lang.Integer.int);\n"},"variableMap":{"java.lang.Double.MAX_VALUE":"invPrecision","deg":"invPrecision","java.lang.Integer.MAX_VALUE":"intVal"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:180","type":"CtIfImpl","sourcecode":"if ((double >= 0) || ((int - double) < (double)))\n    return int;\n"},"status":-1},{"failures":[],"tindex":"095c94fe-82b2-11e5-9529-c3f769276837","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:474","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.CompressedArray:205","type":"CtLocalVariableImpl","sourcecode":"int int = java.util.zip.Inflater.inflate(byte[])"},"status":-2},{"failures":[5,6],"tindex":"095c94ff-82b2-11e5-9529-db52589f8e09","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionList:311","type":"CtIfImpl","sourcecode":"if (int > 0)\n    int++;\n"},"variableMap":{"pointIndex":"foundInstruction","index":"foundInstruction"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:295","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < com.graphhopper.util.InstructionList.(getSize()) ; int++) {\n    com.graphhopper.util.PointList = com.graphhopper.util.InstructionList.get(int).getPoints();\n    for (int int = 0 ; int < (com.graphhopper.util.PointList.size()) ; int++) {\n        double double = com.graphhopper.util.PointList.getLatitude(int);\n        double double = com.graphhopper.util.PointList.getLongitude(int);\n        if (!((int == 0) && (int == 0))) {\n            double double;\n            int int = int;\n            if (com.graphhopper.util.DistanceCalc.validEdgeDistance(double, double, double, double, double, double)) {\n                double = com.graphhopper.util.DistanceCalc.calcNormalizedEdgeDistance(double, double, double, double, double, double);\n                if (int > 0)\n                    int++;\n                \n            } else {\n                double = com.graphhopper.util.DistanceCalc.calcNormalizedDist(double, double, double, double);\n                if (int > 0)\n                    int++;\n                \n            }\n            if (double < double) {\n                double = double;\n                int = int;\n            } \n        } \n        double = double;\n        double = double;\n    }\n}"},"status":-1},{"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"tindex":"095c9500-82b2-11e5-9529-91177543a2ae","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:132","type":"CtIfImpl","sourcecode":"if (!(java.lang.Double.isNaN(double)))\n    throw new java.lang.IllegalStateException((\"This is a 2D list we cannot store elevation: \" + double));\n"},"variableMap":{"ele":"subqueryLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:735","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.LocationIndexTree.findNetworkEntriesSingleRegion(gnu.trove.set.hash.TIntHashSet, double, double)"},"status":-1},{"failures":[60,0,61],"tindex":"095cbc11-82b2-11e5-9529-533bf47c1795","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:606","type":"CtIfImpl","sourcecode":"if ((int) == 1) {\n    long = 1L << int;\n    return int + 1;\n} "},"status":-1},{"failures":[62],"tindex":"095cbc12-82b2-11e5-9529-5501a44ce553","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtilLittle:82","type":"CtAssignmentImpl","sourcecode":"byte[][int] = ((byte)(long))"},"variableMap":{"offset":"offset","bytes":"bytes","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilBig:81","type":"CtAssignmentImpl","sourcecode":"byte[][++int] = ((byte)(long >> 8))"},"status":-1},{"failures":[25],"tindex":"095cbc13-82b2-11e5-9529-852245abe7ae","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GHRequest:254","type":"CtIfImpl","sourcecode":"if (java.lang.String != null)\n    this.java.lang.String = java.lang.String;\n"},"status":-1},{"failures":[],"tindex":"095cbc14-82b2-11e5-9529-b1390e1a771e","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:125","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.EncodedValue = new com.graphhopper.routing.util.EncodedValue(\"PreferWay\" , int , 3 , 1 , 3 , 7)"},"variableMap":{"priorityWayEncoder":"relationCodeEncoder","shift":"shift"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:232","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.EncodedValue = new com.graphhopper.routing.util.EncodedValue(\"RelationCode\" , int , 3 , 1 , 0 , 7)"},"status":0},{"failures":[],"tindex":"095cbc15-82b2-11e5-9529-335ef7dac492","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:119","type":"CtOperatorAssignmentImpl","sourcecode":"double += 2 * (java.lang.Math.double)"},"variableMap":{"orientation":"maxLon","java.lang.Math.PI":"maxLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:178","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.shapes.BBox.double = com.graphhopper.util.Helper.intToDegree(com.graphhopper.storage.DataAccess.getHeader((4 * 4)))"},"status":-2},{"failures":[63],"tindex":"095cbc16-82b2-11e5-9529-8360c3791bb3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:447","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:375","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.reader.OSMWay.hasTag(\"bicycle\", \"official\")) || (com.graphhopper.reader.OSMWay.hasTag(\"bicycle\", \"designated\")))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(44.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"status":-1},{"failures":[],"tindex":"095ce327-82b2-11e5-9529-fbdf70660973","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DouglasPeucker:102","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    continue;\n} "},"variableMap":{"freeIndex":"com.graphhopper.util.EdgeIterator.NO_EDGE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:664","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double) >= (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.CHEdgeIterator, false, com.graphhopper.util.EdgeIterator.int)))\n    continue NEXT_SC;\n"},"status":-2},{"failures":[64],"tindex":"095ce328-82b2-11e5-9529-dfa1536a0b53","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:345","type":"CtInvocationImpl","sourcecode":"java.nio.ByteBuffer.put(byte[], 0, int)"},"status":-1},{"failures":[65,22],"tindex":"095ce329-82b2-11e5-9529-cbfc8a5133ca","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:108","type":"CtIfImpl","sourcecode":"if ((int) == 0) {\n    throw new java.lang.IllegalStateException(\"collection is already empty!?\");\n} "},"variableMap":{"size":"newSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:156","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.incCap(int)"},"status":-1},{"failures":[66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,8,9,82,83,10,84,85,86,87,11,16,17,18,19,20,21,24,25,26,28],"tindex":"095ce32a-82b2-11e5-9529-0f3261bc090a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.Dijkstra:103","type":"CtInvocationImpl","sourcecode":"java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.remove(com.graphhopper.storage.EdgeEntry)"},"variableMap":{"nEdge":"currTo","fromHeap":"openSetTo"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:99","type":"CtInvocationImpl","sourcecode":"java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.add(com.graphhopper.storage.EdgeEntry)"},"status":-1},{"failures":[88,13,14,15,89,0,90,91,92,93,94,23,24,26,27,28],"tindex":"095ce32b-82b2-11e5-9529-55dfd58b0357","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:206","type":"CtOperatorAssignmentImpl","sourcecode":"int += 1"},"variableMap":{"size":"tmpNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:839","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.reader.OSMReader.addTowerNode(long, double, double, double)"},"status":-1},{"failures":[],"tindex":"095ce32c-82b2-11e5-9529-95fbc92244c5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.GHUtility:254","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int < 0))\n    continue;\n"},"variableMap":{"newAdjIndex":"nodeVia","newBaseIndex":"edgeTo"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:450","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.GraphExtension instanceof com.graphhopper.storage.TurnCostExtension) {\n    com.graphhopper.storage.TurnCostExtension com.graphhopper.storage.TurnCostExtension = ((com.graphhopper.storage.TurnCostExtension)(com.graphhopper.storage.GraphExtension));\n    java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry> java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry> = com.graphhopper.reader.OSMReader.analyzeTurnRelation(com.graphhopper.reader.OSMTurnRelation);\n    for (com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry : java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>) {\n        com.graphhopper.storage.TurnCostExtension.addTurnInfo(com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int, com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int, com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int, com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.long);\n    }\n} "},"status":-2},{"failures":[95,96,97,98],"tindex":"095d0a3d-82b2-11e5-9529-6b7b30071bd1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:139","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motorcycle\")"},"variableMap":{"way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:584","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"tracktype\")"},"status":-1},{"failures":[99],"tindex":"095d0a3e-82b2-11e5-9529-f333dc167ceb","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.PathNative:57","type":"CtAssignmentImpl","sourcecode":"int = int[][int]"},"variableMap":{"parentNodes":"elem","endNode":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:191","type":"CtAssignmentImpl","sourcecode":"int[][int] = int"},"status":-1},{"failures":[],"tindex":"095d0a3f-82b2-11e5-9529-550940eecc03","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.SparseArray:132","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:48","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(double))"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
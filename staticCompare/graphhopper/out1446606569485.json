{"failureDictionary":{"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":45,"com.graphhopper.storage.RAMDataAccessTest.testTrimTo":1,"com.graphhopper.reader.OSMReaderTest.testMain":26,"com.graphhopper.routing.util.EncodingManagerTest.testSupportFords":53,"com.graphhopper.reader.OSMReaderTest.testFerry":24,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":52,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":18,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testService":23,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":7,"com.graphhopper.reader.OSMReaderTest.testWithBounds":33,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":12,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":30,"com.graphhopper.util.PMapTest.propertyFromStringWithMultiplePropertiesCanBeRetrieved":60,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":13,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":34,"com.graphhopper.storage.RAMDataAccessTest.testSet_GetBytes":51,"com.graphhopper.routing.util.EncodingManagerTest.testEncoderWithWrongVersionIsRejected":54,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":46,"com.graphhopper.GraphHopperTest.testPrepare":37,"com.graphhopper.GraphHopperTest.testFootAndCar":39,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":15,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":16,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":11,"com.graphhopper.reader.OSMReaderTest.testFoot":25,"com.graphhopper.util.PMapTest.singleStringPropertyCanBeRetrieved":57,"com.graphhopper.util.PMapTest.numericPropertyCanBeRetrievedAsLong":58,"com.graphhopper.reader.OSMReaderTest.testOneWay":35,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":9,"com.graphhopper.storage.StorablePropertiesTest.testVersionCheck":2,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNormedDist":3,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNoErrorOnEdgeCase_lastIndex":8,"com.graphhopper.storage.SynchedDAWrapperTest.testSet_GetBytes":50,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":22,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":14,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":17,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":48,"com.graphhopper.GraphHopperTest.testPrepareOnly":47,"com.graphhopper.GraphHopperTest.testVia":36,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":20,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":42,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":4,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":32,"com.graphhopper.util.PMapTest.numericPropertyCanBeRetrievedAsDouble":59,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":10,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":44,"com.graphhopper.util.PMapTest.keyCanHaveAnyCasing":55,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":29,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":40,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":19,"com.graphhopper.GraphHopperTest.testFootOnly":49,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":38,"com.graphhopper.storage.SynchedDAWrapperTest.testTrimTo":0,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":31,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":5,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":6,"com.graphhopper.reader.OSMReaderTest.testBarriers":28,"com.graphhopper.util.PMapTest.hasReturnsCorrectResult":56,"com.graphhopper.GraphHopperTest.testLoadOSM":41,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":43,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":21,"com.graphhopper.reader.OSMReaderTest.testSort":27},"transformations":[{"failures":[0,1],"tindex":"768e2258-82a1-11e5-aecc-3fd22a3b62ef","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:155","type":"CtAssignmentImpl","sourcecode":"int = 64"},"variableMap":{"tmpNo":"remainingSegments"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:335","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[2],"tindex":"768e2259-82a1-11e5-aecc-3b1a8f5b830d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:153","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.storage.StorableProperties.(check(\"nodes\", com.graphhopper.util.Constants.int, boolean)))\n    return false;\n"},"status":-1},{"failures":[3,4,5,6,7,8,9],"tindex":"768e496a-82a1-11e5-aecc-b34d1f2edb4f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:189","type":"CtOperatorAssignmentImpl","sourcecode":"int *= 2"},"variableMap":{"index":"lonSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:163","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"status":-1},{"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23],"tindex":"768e496b-82a1-11e5-aecc-fbe1c9edc641","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:358","type":"CtAssertImpl","sourcecode":"assert int <= (int) : ((\"the length has to be smaller or equal to the segment size: \" + int) + \" vs. \") + (int)"},"variableMap":{"segmentSizeInBytes":"speed","length":"speed"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:366","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.util.Helper.isEmpty(java.lang.String))) {\n    java.lang.Integer java.lang.Integer = java.util.Map<java.lang.String, java.lang.Integer>.get(java.lang.String);\n    if (java.lang.Integer != null) {\n        int = java.lang.Integer;\n        if ((java.lang.Integer != null) && (java.lang.Integer > java.lang.Integer)) {\n            if (java.util.HashSet<java.lang.String>.contains(java.lang.String))\n                int = java.lang.Integer;\n            else\n                int = java.lang.Integer;\n            \n        } \n    } \n} else {\n    java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"tracktype\");\n    if (!(com.graphhopper.util.Helper.isEmpty(java.lang.String))) {\n        java.lang.Integer java.lang.Integer = java.util.Map<java.lang.String, java.lang.Integer>.get(java.lang.String);\n        if (java.lang.Integer != null)\n            int = java.lang.Integer;\n        \n    } else {\n        if (java.lang.Integer != null) {\n            if (!(com.graphhopper.reader.OSMWay.hasTag(\"service\")))\n                int = java.lang.Integer;\n            else\n                int = java.util.Map<java.lang.String, java.lang.Integer>.get(\"living_street\");\n            \n        } \n    }\n}"},"status":-1},{"failures":[],"tindex":"768e496c-82a1-11e5-aecc-b17397aef416","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:966","type":"CtLocalVariableImpl","sourcecode":"int int = 5"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntIntBinHeap:103","type":"CtLocalVariableImpl","sourcecode":"int int = int[][1]"},"status":-2},{"failures":[],"tindex":"768e496d-82a1-11e5-aecc-87271f853466","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:657","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:241","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = true"},"status":-2},{"failures":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"tindex":"768e496e-82a1-11e5-aecc-a1045835c31b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:458","type":"CtAssignmentImpl","sourcecode":"int = 8"},"variableMap":{"bytesForFlags":"nextTowerId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:658","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-1},{"failures":[24,26,27,28,44,29,30,31,32,45,33,34,35,46,47,36,37,38,40,41,48,42,49],"tindex":"768e707f-82a1-11e5-aecc-f9d39e83f6d8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:228","type":"CtAssertImpl","sourcecode":"assert (int + 4) <= (int) : \"integer cannot be distributed over two segments\""},"variableMap":{"segmentSizeInBytes":"tmpNode","index":"tmpNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:715","type":"CtIfImpl","sourcecode":"if (!boolean) {\n    int = int;\n} "},"status":-1},{"failures":[],"tindex":"768e7080-82a1-11e5-aecc-dde3e8ad136f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:203","type":"CtIfImpl","sourcecode":"if (double < 0)\n    double = 0;\n"},"variableMap":{"factor":"minLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:196","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setHeader((3 * 4), com.graphhopper.util.Helper.degreeToInt(com.graphhopper.util.shapes.BBox.double))"},"status":-2},{"failures":[],"tindex":"768e7081-82a1-11e5-aecc-754cc566f803","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:1142","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.BaseGraph.AllEdgeIterator"},"variableMap":{"iter":"closestEdge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.QueryResult:139","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.EdgeIteratorState"},"status":-2},{"failures":[50,51],"tindex":"768e7082-82a1-11e5-aecc-3d90fac3d1f6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:69","type":"CtAssignmentImpl","sourcecode":"int = int / 10"},"variableMap":{"initLeafSize":"delta","maxLeafEntries":"delta"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:290","type":"CtOperatorAssignmentImpl","sourcecode":"int -= int"},"status":-1},{"failures":[],"tindex":"768e7083-82a1-11e5-aecc-dba818940762","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:108","type":"CtAssignmentImpl","sourcecode":"long = (long + long) >>> 1"},"variableMap":{"high":"viaNodeID","guess":"viaNodeID","low":"viaNodeID"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:932","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.reader.OSMRelation.Member.ref()"},"status":0},{"failures":[52,35],"tindex":"768e7084-82a1-11e5-aecc-958ea883c0a0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:670","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = (((com.graphhopper.reader.OSMWay.hasTag(\"oneway\", \"-1\")) || (com.graphhopper.reader.OSMWay.hasTag(\"oneway:bicycle\", \"-1\"))) || (com.graphhopper.reader.OSMWay.hasTag(\"vehicle:forward\", \"no\"))) || (com.graphhopper.reader.OSMWay.hasTag(\"bicycle:forward\", \"no\"))"},"variableMap":{"way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:259","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = com.graphhopper.reader.OSMWay.hasTag(\"junction\", \"roundabout\")"},"status":-1},{"failures":[],"tindex":"768e9795-82a1-11e5-aecc-a7adcb8f58b9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:474","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1131","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.storage.GraphHopperStorage.getNodes()"},"status":-2},{"failures":[],"tindex":"768e9796-82a1-11e5-aecc-1d9001943011","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.AngleCalc:102","type":"CtIfImpl","sourcecode":"if (double > ((+(java.lang.Math.double)) + double))\n    double = double - (2 * (java.lang.Math.double));\nelse\n    double = double;\n"},"variableMap":{"orientation":"meanDegree","resultOrientation":"meanDegree","baseOrientation":"meanDegree","java.lang.Math.PI":"meanDegree"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:582","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n    if ((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int))\n        continue;\n    \n    double double = com.graphhopper.util.EdgeIterator.getDistance();\n    double double = com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.EdgeIterator, true, com.graphhopper.util.EdgeIterator.int);\n    int int = com.graphhopper.util.EdgeIterator.getEdge();\n    int int = com.graphhopper.routing.ch.PrepareContractionHierarchies.getOrigEdgeCount(int);\n    com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.CHEdgeExplorer.setBaseNode(com.graphhopper.routing.ch.PrepareContractionHierarchies.ShortcutHandler.getNode());\n    com.graphhopper.routing.DijkstraOneToMany.clear();\n    long++;\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n        if (((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int)) || (int == int))\n            continue;\n        \n        double double = double + (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.EdgeIterator, false, com.graphhopper.util.EdgeIterator.getEdge()));\n        if (java.lang.Double.isNaN(double))\n            throw new java.lang.IllegalStateException(((((((\"Weighting should never return NaN values\" + \", in:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", out:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", dist:\") + (com.graphhopper.util.EdgeIterator.getDistance())));\n        \n        if (java.lang.Double.isInfinite(double))\n            continue;\n        \n        double double = double + (com.graphhopper.util.EdgeIterator.getDistance());\n        com.graphhopper.routing.DijkstraOneToMany.setWeightLimit(double);\n        com.graphhopper.routing.DijkstraOneToMany.setLimitVisitedNodes((((int)(double)) * 100)).setEdgeFilter(com.graphhopper.routing.ch.PrepareContractionHierarchies.IgnoreNodeFilter.setAvoidNode(com.graphhopper.routing.ch.PrepareContractionHierarchies.ShortcutHandler.getNode()));\n        com.graphhopper.util.StopWatch.start();\n        (long)++;\n        int int = com.graphhopper.routing.DijkstraOneToMany.findEndNode(int, int);\n        com.graphhopper.util.StopWatch.stop();\n        if ((int == int) && ((com.graphhopper.routing.DijkstraOneToMany.getWeight(int)) <= double))\n            continue;\n        \n        com.graphhopper.routing.ch.PrepareContractionHierarchies.ShortcutHandler.foundShortcut(int, int, double, double, com.graphhopper.util.EdgeIterator, int, int);\n    }\n}"},"status":0},{"failures":[],"tindex":"768e9797-82a1-11e5-aecc-85ff65a3af46","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.AStar:90","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.AStar.runAlgo()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:154","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.AStar.extractPath()"},"status":-1},{"failures":[],"tindex":"768ebea8-82a1-11e5-aecc-55b0699ef027","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.AStar:133","type":"CtInvocationImpl","sourcecode":"java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.remove(com.graphhopper.routing.AStar.AStarEdge)"},"variableMap":{"prioQueueOpenSet":"prioQueueOpenSetTo","ase":"currTo"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:141","type":"CtInvocationImpl","sourcecode":"java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.add(com.graphhopper.routing.AStar.AStarEdge)"},"status":-1},{"failures":[53,54,55,56,57,58,59,60],"tindex":"768ebea9-82a1-11e5-aecc-5dab005dbe6c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PMap:59","type":"CtInvocationImpl","sourcecode":"this.java.util.Map<java.lang.String, java.lang.String>.put(java.lang.String.substring(0, int).toLowerCase(), java.lang.String.substring((int + 1)))"},"status":-1},{"failures":[],"tindex":"768ebeaa-82a1-11e5-aecc-a1b488aab060","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:186","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(2000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:271","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.initNodeAndEdgeEntrySize()"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":19,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
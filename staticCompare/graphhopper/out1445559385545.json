{"failureDictionary":{"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":74,"com.graphhopper.reader.OSMReaderTest.testFerry":87,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":21,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":84,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":32,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":73,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":36,"com.graphhopper.util.DistanceCalcEarthTest.testDistance":79,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":39,"com.graphhopper.reader.OSMReaderTest.testWithBounds":90,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":2,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":13,"com.graphhopper.util.shapes.CircleTest.testContainsCircle":81,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":11,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":82,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":17,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":4,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":18,"com.graphhopper.GraphHopperTest.testPrepare":63,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":40,"com.graphhopper.util.InstructionListTest.testWayList2":54,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":9,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":24,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":86,"com.graphhopper.util.InstructionListTest.testWayList":53,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijectionBug2":83,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":33,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":52,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":16,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":25,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":30,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":50,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":48,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":12,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":41,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":46,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":10,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":19,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":64,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":96,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":78,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":95,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":61,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":20,"com.graphhopper.GraphHopperTest.testLoadOSM":67,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":56,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnsureSize":5,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":60,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":59,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":70,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":58,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":1,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":57,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":35,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":38,"com.graphhopper.reader.OSMReaderTest.testMain":88,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":15,"com.graphhopper.reader.OSMReaderTest.testEstimatedCenter":91,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijection":85,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":43,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":0,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":45,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":22,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":71,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":77,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":92,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":44,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":23,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":94,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":31,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":14,"com.graphhopper.storage.GraphHopperStorageCHTest.testCheckFirstNode":6,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":37,"com.graphhopper.GraphHopperTest.testFootAndCar":65,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":49,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":28,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":27,"com.graphhopper.util.InstructionListTest.testCreateGPX":80,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":75,"com.graphhopper.storage.SimpleFSLockFactoryTest.testForceDelete":7,"com.graphhopper.GraphHopperTest.testVia":62,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":76,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":3,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":68,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":34,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":72,"com.graphhopper.GraphHopperAPITest.testLoad":8,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":66,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":42,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":55,"com.graphhopper.GraphHopperTest.testFootOnly":69,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":89,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":47,"com.graphhopper.util.InstructionListTest.testFind":51,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":26,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":93,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":29},"transformations":[{"failures":[0,1,2,3,4,5,6],"tindex":"4c49a21d-791b-11e5-8dae-19989827229e","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:967","type":"CtAssignmentImpl","sourcecode":"int = (23 * int) + (int)"},"variableMap":{"from":"nodeEntryIndex","hash":"nodeEntryBytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:310","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-1},{"failures":[7],"tindex":"4c49c92e-791b-11e5-8dae-5bd087867f82","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:723","type":"CtLocalVariableImpl","sourcecode":"java.io.File java.io.File = new java.io.File((java.lang.String + \".ghz\"))"},"variableMap":{"graphHopperFolder":"fileName"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.SimpleFSLockFactory:63","type":"CtLocalVariableImpl","sourcecode":"java.io.File java.io.File = new java.io.File(java.io.File , java.lang.String)"},"status":-1},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"tindex":"4c49c92f-791b-11e5-8dae-09cf418b456a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:586","type":"CtIfImpl","sourcecode":"if (int == (com.graphhopper.reader.OSMReader.int))\n    return false;\n"},"variableMap":{"com.graphhopper.reader.OSMReader.EMPTY":"prevOrNextEdgeId","nodeType":"prevOrNextEdgeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AbstractRoutingAlgorithm:75","type":"CtIfImpl","sourcecode":"if ((!(com.graphhopper.routing.util.TraversalMode.hasUTurnSupport())) && ((com.graphhopper.util.EdgeIterator.getEdge()) == int))\n    return false;\n"},"status":-1},{"failures":[70,71,72,73,74,75,76,77,78,21,24,25,29,33,36,37,39,40,41,43,44,79,80,81,82,83,84,85,86,87,88,89,90,91,62,65],"tindex":"4c49c930-791b-11e5-8dae-63b84bae617b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:166","type":"CtLocalVariableImpl","sourcecode":"double double = double / double"},"variableMap":{"dx":"fromLon","dy":"toLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:54","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Math.java.lang.Math.sin((java.lang.Math.(java.lang.Math.toRadians((double - double))) / 2))"},"status":-1},{"failures":[],"tindex":"4c49c931-791b-11e5-8dae-592d7ff8d284","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:52","type":"CtOperatorAssignmentImpl","sourcecode":"double += (((0.1963 * double) * double) - 0.9817) * double"},"variableMap":{"r":"resultOrientation","angle":"java.lang.Math.PI"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:103","type":"CtAssignmentImpl","sourcecode":"double = double - (2 * (java.lang.Math.double))"},"status":-2},{"failures":[92,93,94,95,96],"tindex":"4c49f042-791b-11e5-8dae-15d04ff0e3b1","series":0,"name":"add","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:89","type":"CtIfImpl","sourcecode":"if (int > 64)\n    throw new java.lang.IllegalStateException(\"allBits is too big and does not fit into 8 bytes\");\n"},"variableMap":{"allBits":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:366","type":"CtInvocationImpl","sourcecode":"com.graphhopper.search.NameIndex.setSegmentSize(int)"},"status":-1},{"failures":[],"tindex":"4c49f043-791b-11e5-8dae-17d869980965","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphBuilder:56","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = java.lang.String"},"variableMap":{"location":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:210","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += \"0\""},"status":-2},{"failures":[],"tindex":"4c49f044-791b-11e5-8dae-615e5bc839e6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:101","type":"CtUnaryOperatorImpl","sourcecode":"int--"},"variableMap":{"retBucket":"wayIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.QueryResult:94","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"status":-2},{"failures":[],"tindex":"4c49f045-791b-11e5-8dae-2fd518270dac","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:869","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMInputFile:95","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = new byte[6]"},"status":-2},{"failures":[],"tindex":"4c49f046-791b-11e5-8dae-0bb22ae3ee65","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:848","type":"CtReturnImpl","sourcecode":"return ((int)(int))"},"variableMap":{"tmpNode":"exitNumber"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.RoundaboutInstruction:84","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"4c49f047-791b-11e5-8dae-53ae84bb13e4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.CmdArgs:93","type":"CtIfImpl","sourcecode":"if (int <= 0) {\n    continue;\n} "},"variableMap":{"index":"speed"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:394","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.reader.OSMWay.hasTag(\"service\")))\n    int = java.lang.Integer;\nelse\n    int = java.util.Map<java.lang.String, java.lang.Integer>.get(\"living_street\");\n"},"status":-2},{"failures":[],"tindex":"4c4a1758-791b-11e5-8dae-f5624cae0b0a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHTreeMapComposed:32","type":"CtUnaryOperatorImpl","sourcecode":"-3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:296","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.CHGraphImpl.setEdgesHeader()"},"status":-2},{"failures":[],"tindex":"4c4a1759-791b-11e5-8dae-358ed107ee06","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:520","type":"CtReturnImpl","sourcecode":"return com.graphhopper.reader.OSMReader.int"},"variableMap":{"com.graphhopper.reader.OSMReader.EMPTY":"segmentSizeInBytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:261","type":"CtReturnImpl","sourcecode":"return ((int)((long) / (int)))"},"status":-2},{"failures":[],"tindex":"4c4a175a-791b-11e5-8dae-0763c3e32859","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:586","type":"CtIfImpl","sourcecode":"if (int == (com.graphhopper.reader.OSMReader.int))\n    return false;\n"},"variableMap":{"com.graphhopper.reader.OSMReader.EMPTY":"com.graphhopper.reader.OSMElement.RELATION","nodeType":"com.graphhopper.reader.OSMElement.RELATION"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMRelation:77","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.reader.OSMRelation.Member com.graphhopper.reader.OSMRelation.Member : java.util.ArrayList<com.graphhopper.reader.OSMRelation.Member>) {\n    if ((com.graphhopper.reader.OSMRelation.Member.type()) == (com.graphhopper.reader.OSMElement.int)) {\n        return true;\n    } \n}"},"status":-2},{"failures":[],"tindex":"4c4a175b-791b-11e5-8dae-b99ab8b877ef","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:167","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.DistanceCalcEarth.calcNormalizedDist(double, (double / double), double, double)"},"variableMap":{"c_lon":"r_lon_deg","r_lat_deg":"r_lat_deg","shrinkFactor":"a_lon_deg","this":"this","r_lon_deg":"r_lat_deg","c_lat":"r_lon_deg"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:151","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.DistanceCalcEarth.calcNormalizedDist(double, double, double, double)"},"status":-2},{"failures":[],"tindex":"4c4a175c-791b-11e5-8dae-51344dda74b5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.CmdArgs:59","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(\"-D\"))\n    java.lang.String = java.lang.String.substring(2);\n"},"variableMap":{"systemProperty":"key"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:67","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.OSMElement.setTag(java.lang.String, java.lang.String)"},"status":-2},{"failures":[],"tindex":"4c4a175d-791b-11e5-8dae-33ef50dd7a6f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:789","type":"CtAssignmentImpl","sourcecode":"double = 1.0E-4"},"variableMap":{"towerNodeDistance":"x2"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:45","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.storage.index.BresenhamLine.com.graphhopper.storage.index.BresenhamLine.fix(double)"},"status":-2},{"failures":[],"tindex":"4c4a3e6e-791b-11e5-8dae-3fe584b182e9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:53","type":"CtForImpl","sourcecode":"for ( ; int < int ; int++) {\n    double double = com.graphhopper.storage.NodeAccess.getLatitude(int);\n    if ((double > 90) || (double < (-90)))\n        java.util.List<java.lang.String>.add((\"latitude is not within its bounds \" + double));\n    \n    double double = com.graphhopper.storage.NodeAccess.getLongitude(int);\n    if ((double > 180) || (double < (-180)))\n        java.util.List<java.lang.String>.add((\"longitude is not within its bounds \" + double));\n    \n    com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        if ((com.graphhopper.util.EdgeIterator.getAdjNode()) >= int) {\n            java.util.List<java.lang.String>.add(((((\"edge of \" + int) + \" has a node \") + (com.graphhopper.util.EdgeIterator.getAdjNode())) + \" greater or equal to getNodes\"));\n        } \n        if ((com.graphhopper.util.EdgeIterator.getAdjNode()) < 0) {\n            java.util.List<java.lang.String>.add((((\"edge of \" + int) + \" has a negative node \") + (com.graphhopper.util.EdgeIterator.getAdjNode())));\n        } \n    }\n}"},"status":-2},{"failures":[],"tindex":"4c4a3e6f-791b-11e5-8dae-cb56c812306d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:562","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(50.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"status":-2},{"failures":[],"tindex":"4c4a3e70-791b-11e5-8dae-b993964c4e54","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PMap:81","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.util.Helper.isEmpty(java.lang.String))) {\n    try {\n        return java.lang.Long.parseLong(java.lang.String);\n    } catch (java.lang.Exception ex) {\n    }\n} "},"variableMap":{"str":"sacScale"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:284","type":"CtIfImpl","sourcecode":"if (java.lang.String != null) {\n    if ((com.graphhopper.reader.OSMWay.hasTag(\"highway\", \"cycleway\")) && (com.graphhopper.reader.OSMWay.hasTag(\"sac_scale\", \"hiking\")))\n        return long;\n    \n    if (!com.graphhopper.routing.util.BikeCommonFlagEncoder.(allowedSacScale(java.lang.String)))\n        return 0;\n    \n} "},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
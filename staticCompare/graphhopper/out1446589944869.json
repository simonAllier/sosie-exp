{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":295,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":43,"com.graphhopper.routing.util.FootFlagEncoderTest.testPriority":159,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":280,"com.graphhopper.reader.OSMReaderTest.testFerry":169,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":21,"com.graphhopper.storage.GraphHopperStorageCHTest.testDoThrowExceptionIfDimDoesNotMatch":329,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":102,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":354,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testService":123,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTram":125,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeightMMap":12,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":89,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidanceOfHighMaxSpeed":122,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":92,"com.graphhopper.routing.util.EncodingManagerTest.testToDetailsStringIncludesEncoderVersionNumber":377,"com.graphhopper.reader.OSMReaderTest.testWithBounds":179,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":302,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAccess":90,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":251,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testInfinityWeight":274,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":292,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeight":14,"com.graphhopper.routing.util.FootFlagEncoderTest.testBasics":166,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":301,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testReduceToMaxSpeed":129,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":225,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":320,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":4,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":300,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":201,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testSacScale":49,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testReduceToMaxSpeed":88,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":132,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":264,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":353,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":8,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetAccess":144,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":229,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":355,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":311,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":257,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":42,"com.graphhopper.storage.GraphStorageViaMMapTest.testInfinityWeight":312,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":190,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":208,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":25,"com.graphhopper.storage.UnsafeDataAccessTest.testLoadFlush":0,"com.graphhopper.storage.GraphHopperStorageTest.testInfinityWeight":223,"com.graphhopper.routing.util.BikeFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":99,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":34,"com.graphhopper.routing.util.BikeFlagEncoderTest.testSacScale":94,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":130,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":344,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":317,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":121,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":287,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":97,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBounds":266,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPreferenceForSlowSpeed":116,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed0_issue367":145,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":282,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":26,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":31,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidTunnel":85,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":200,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdentical":331,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":11,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":276,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":103,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":338,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":139,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":298,"com.graphhopper.routing.util.BikeFlagEncoderTest.testReduceToMaxSpeed":111,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":315,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":196,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":267,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":273,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":269,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":268,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":380,"com.graphhopper.routing.util.FootFlagEncoderTest.handleWayTagsRoundabout":156,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":95,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":214,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":332,"com.graphhopper.reader.OSMReaderTest.testSort":172,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":213,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":37,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":178,"com.graphhopper.routing.DijkstraOneToManyTest.initializationError":20,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":235,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":350,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":220,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":183,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_noCosts":149,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testSetSpeed0_issue367":135,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTram":54,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":112,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":313,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":239,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":47,"com.graphhopper.storage.GraphHopperStorageTest.testNoCreateCalled":189,"com.graphhopper.routing.DijkstraTest.initializationError":16,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":115,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":182,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPriority":55,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":272,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":314,"com.graphhopper.routing.util.CarFlagEncoderTest.testFordAccess":142,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":291,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":343,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":48,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeReturn":364,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":197,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":24,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":233,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":32,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":224,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPropertiesWithNoInit":263,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":246,"com.graphhopper.storage.GraphHopperStorageCHTest.testPrios":318,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":347,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":110,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":77,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":207,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":241,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":63,"com.graphhopper.routing.util.FootFlagEncoderTest.testGetSpeed":157,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":322,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":195,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":248,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":185,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":371,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":205,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":39,"com.graphhopper.reader.dem.SRTMProviderTest.testGetFileString":13,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testBarrierAccess":73,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":80,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":52,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":374,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":288,"com.graphhopper.storage.GraphStorageViaMMapTest.testBounds":304,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":29,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":28,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":368,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidMotorway":109,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testBarrierAccess":124,"com.graphhopper.search.NameIndexTest.testPut":15,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":193,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNoCreateCalled":240,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":255,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":277,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":244,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":261,"com.graphhopper.routing.util.FootFlagEncoderTest.testRailPlatformIssue366":162,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":321,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":79,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":365,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdentical":238,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":70,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":234,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":236,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":210,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":51,"com.graphhopper.storage.GraphHopperStorageCHTest.testBigDataEdge":330,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSetSpeed0_issue367":68,"com.graphhopper.storage.MMapDirectoryTest.testSynched":2,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testBarrierAccess":50,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":252,"com.graphhopper.storage.GraphHopperStorageCHTest.testNoCreateCalled":333,"com.graphhopper.routing.util.FootFlagEncoderTest.testTurnFlagEncoding_noCostsAndRestrictions":163,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":46,"com.graphhopper.routing.util.FootFlagEncoderTest.testBarrierAccess":155,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":258,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":202,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":326,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":192,"com.graphhopper.reader.OSMReaderTest.testBarriers":173,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":242,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testclassBicycle":78,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":305,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes":351,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":67,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":168,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_withCosts":82,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":30,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":284,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":58,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPreferenceForSlowSpeed":133,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAccess":131,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidTunnel":108,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPriority":126,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":22,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPreferenceForSlowSpeed":93,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":243,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":254,"com.graphhopper.util.HelperTest.testCountBitValue":379,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":290,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":164,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":199,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":33,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testReduceToMaxSpeed":59,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":76,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":221,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":206,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":38,"com.graphhopper.routing.util.CarFlagEncoderTest.testSwapDir":153,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetToMaxSpeed":138,"com.graphhopper.routing.util.CarFlagEncoderTest.testBarrierAccess":136,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":209,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":270,"com.graphhopper.storage.GraphHopperStorageCHTest.testFlags":340,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":41,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":363,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":256,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":222,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":87,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":342,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":249,"com.graphhopper.routing.DijkstraBidirectionRefTest.initializationError":18,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":289,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":262,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":279,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":325,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":7,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":188,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":285,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes2":337,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTram":83,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":128,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":259,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":358,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPreferenceForSlowSpeed":64,"com.graphhopper.storage.GraphHopperStorageCHTest.testBounds":359,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidTunnel":56,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":75,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":91,"com.graphhopper.routing.util.BikeFlagEncoderTest.testclassBicycle":101,"com.graphhopper.reader.OSMReaderTest.testFoot":170,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":308,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":303,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testSacScale":117,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":226,"com.graphhopper.reader.OSMReaderTest.testOneWay":181,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":369,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":247,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":100,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":335,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":98,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":275,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":69,"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":184,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":203,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetLocations":348,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":218,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":339,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":217,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_withCosts":105,"com.graphhopper.routing.util.CarFlagEncoderTest.testMilitaryAccess":137,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":271,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidMotorway":127,"com.graphhopper.storage.RAMDirectoryTest.testSynched":1,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":294,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":6,"com.graphhopper.storage.GraphHopperStorageTest.testPropertiesWithNoInit":212,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":253,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSacScale":71,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":191,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":198,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":297,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":174,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":373,"com.graphhopper.routing.AStarTest.initializationError":17,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":45,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":250,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":3,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":9,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":104,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxValue":147,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":360,"com.graphhopper.routing.util.FootFlagEncoderTest.testAccess":165,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTram":106,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":158,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testclassBicycle":120,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":307,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnsureSize":327,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":278,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":118,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":306,"com.graphhopper.routing.util.BikeFlagEncoderTest.testBarrierAccess":96,"com.graphhopper.storage.GraphHopperStorageTest.testIdentical":187,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":230,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":40,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":293,"com.graphhopper.reader.OSMReaderTest.testMain":171,"com.graphhopper.routing.util.EncodingManagerTest.testSupportFords":65,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":366,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":141,"com.graphhopper.storage.GraphHopperStorageCHTest.testInfinityWeight":367,"com.graphhopper.storage.GraphHopperStorageTest.testBigDataEdge":186,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPriority":107,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":260,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":362,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":323,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAccess":113,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":361,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":140,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":23,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBigDataEdge":237,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":310,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":60,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":231,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":228,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":216,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":349,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":62,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":352,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":175,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":160,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":316,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPriority":84,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":265,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":74,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":180,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":44,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":334,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":5,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidMotorway":86,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":319,"com.graphhopper.storage.GraphHopperStorageTest.testClone":194,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":227,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":219,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":309,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":370,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":148,"com.graphhopper.storage.GraphHopperStorageCHTest.testCheckFirstNode":357,"com.graphhopper.routing.util.CarFlagEncoderTest.testRegisterOnlyOnceAllowed":150,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":146,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":204,"com.graphhopper.GraphHopperTest.testFootAndCar":167,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":211,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":81,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAccess":61,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":328,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":53,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":286,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidMotorway":57,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibility":66,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":283,"com.graphhopper.routing.util.CarFlagEncoderTest.testOneway":151,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":341,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed":154,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_withCosts":152,"com.graphhopper.util.InstructionListTest.testRoundaboutJsonIntegrity":375,"com.graphhopper.reader.OSMReaderTest.testRelation":10,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":36,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":299,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":245,"com.graphhopper.storage.GraphHopperStorageCHTest.testPropertiesWithNoInit":356,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":346,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":114,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":376,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":281,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":35,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":177,"com.graphhopper.reader.OSMReaderTest.testTurnFlagCombination":378,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":324,"com.graphhopper.storage.GraphHopperStorageTest.testBounds":215,"com.graphhopper.routing.util.FootFlagEncoderTest.testCombined":161,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidTunnel":119,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":176,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":143,"com.graphhopper.routing.AStarBidirectionTest.initializationError":19,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":296,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":345,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":372,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":134,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":27,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":72,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":232,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":336},"transformations":[{"failures":[],"tindex":"c182e4e2-827a-11e5-baa6-477a08da6f41","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:1106","type":"CtIfImpl","sourcecode":"if ((int) == (com.graphhopper.storage.EdgeAccess.int))\n    continue;\n"},"variableMap":{"baseNode":"length","com.graphhopper.storage.EdgeAccess.NO_NODE":"index"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:275","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, byte[], int, int)"},"status":-2},{"failures":[0],"tindex":"c182e4e3-827a-11e5-baa6-81b79d37d846","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:133","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"c1830bf4-827a-11e5-baa6-bd99b82d2a56","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:236","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.dem.HeightTile.setCalcMean(boolean)"},"status":0},{"failures":[1,2],"tindex":"c1830bf5-827a-11e5-baa6-a58e8656fe02","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:241","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.copyTo(com.graphhopper.storage.DataAccess)"},"variableMap":{"indexCopy":"da","index":"da"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:134","type":"CtInvocationImpl","sourcecode":"java.util.Map<java.lang.String, com.graphhopper.storage.DataAccess>.put(java.lang.String, com.graphhopper.storage.DataAccess)"},"status":-1},{"failures":[],"tindex":"c1830bf6-827a-11e5-baa6-ab44a0f95a65","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.TranslationMap:250","type":"CtIfImpl","sourcecode":"if (((java.lang.String.isEmpty()) || (java.lang.String.startsWith(\"//\"))) || (java.lang.String.startsWith(\"#\")))\n    continue;\n"},"variableMap":{"line":"cp"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:144","type":"CtIfImpl","sourcecode":"if (double < (double * 11)) {\n    java.lang.String = \"SW\";\n} else if (double < (double * 13)) {\n    java.lang.String = \"W\";\n} else if (double < (double * 15)) {\n    java.lang.String = \"NW\";\n} else {\n    java.lang.String = \"N\";\n}"},"status":-2},{"failures":[],"tindex":"c1830bf7-827a-11e5-baa6-4b894835f9a3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalc2D:64","type":"CtReturnImpl","sourcecode":"return \"2D\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:216","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.StopWatch.toString()"},"status":0},{"failures":[],"tindex":"c1830bf8-827a-11e5-baa6-6dab9559525b","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:131","type":"CtIfImpl","sourcecode":"if (int > 100)\n    throw new java.lang.IllegalArgumentException(\"lazyUpdates has to be in [0, 100], to disable it use 0\");\n"},"variableMap":{"lazyUpdates":"key"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHSortedCollection:72","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.GHSortedCollection.remove(int, int)"},"status":0},{"failures":[3,4,5,6,7,8,9],"tindex":"c1830bf9-827a-11e5-baa6-f7819691f954","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.StopWatch:57","type":"CtOperatorAssignmentImpl","sourcecode":"long += (java.lang.System.nanoTime()) - (long)"},"variableMap":{"lastTime":"tmpDegreeCounter","nanoTime":"tmpDegreeCounter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:597","type":"CtUnaryOperatorImpl","sourcecode":"long++"},"status":-1},{"failures":[10],"tindex":"c183330a-827a-11e5-baa6-8b33416d4aa6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:616","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    com.graphhopper.reader.OSMRelation.Member com.graphhopper.reader.OSMRelation.Member = com.graphhopper.reader.OSMRelation.getMembers().get(int);\n    if ((com.graphhopper.reader.OSMRelation.Member.type()) != (com.graphhopper.reader.OSMRelation.Member.int))\n        continue;\n    \n    long long = com.graphhopper.reader.OSMRelation.Member.ref();\n    long long = com.graphhopper.reader.OSMReader.getRelFlagsMap().get(long);\n    long long = com.graphhopper.routing.util.EncodingManager.handleRelationTags(com.graphhopper.reader.OSMRelation, long);\n    if (long != long)\n        com.graphhopper.reader.OSMReader.getRelFlagsMap().put(long, long);\n    \n}"},"status":-1},{"failures":[11,12,12,13,13,14,14],"tindex":"c183330b-827a-11e5-baa6-f384847444f4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:214","type":"CtReturnImpl","sourcecode":"return 5"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:136","type":"CtReturnImpl","sourcecode":"return (((com.graphhopper.reader.dem.SRTMProvider.(down(double)) + 90) * 1000) + com.graphhopper.reader.dem.SRTMProvider.(down(double))) + 180"},"status":-1},{"failures":[15],"tindex":"c183330c-827a-11e5-baa6-53d7b5c2fb78","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.search.NameIndex:90","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String"},"status":-1},{"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,11,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371],"tindex":"c183330d-827a-11e5-baa6-93918d5bf2e1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.PrinctonReader:62","type":"CtLocalVariableImpl","sourcecode":"java.lang.String[] java.lang.String[] = java.lang.String.split(\" \")"},"variableMap":{"line":"encoderList"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:123","type":"CtLocalVariableImpl","sourcecode":"java.lang.String[] java.lang.String[] = java.lang.String.split(\",\")"},"status":-1},{"failures":[135],"tindex":"c1835a1e-827a-11e5-baa6-2770b1627234","series":0,"name":"replace","transplant":{"position":"com.graphhopper.search.NameIndex:73","type":"CtReturnImpl","sourcecode":"return 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:281","type":"CtReturnImpl","sourcecode":"return com.graphhopper.routing.util.MotorcycleFlagEncoder.setReverseSpeed(long, double)"},"status":-1},{"failures":[372,373,374,375],"tindex":"c1835a1f-827a-11e5-baa6-f5f75d650a53","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.RoundaboutInstruction:108","type":"CtAssignmentImpl","sourcecode":"this.double = double"},"status":-1},{"failures":[],"tindex":"c1835a20-827a-11e5-baa6-9ffcb6bd2bfa","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DouglasPeucker:70","type":"CtLocalVariableImpl","sourcecode":"int int = 500"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:315","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(com.graphhopper.routing.util.EncodedValue.getValue(long)))"},"status":-2},{"failures":[376,377,82,105,152,378,379],"tindex":"c1835a21-827a-11e5-baa6-0b04aae3fcf6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.SRTMProvider:180","type":"CtIfImpl","sourcecode":"if ((double >= 0) || ((int - double) < (double)))\n    return int;\n"},"variableMap":{"val":"val","intVal":"intVal","invPrecision":"val"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:89","type":"CtIfImpl","sourcecode":"if (double == int)\n    return int;\n"},"status":-1},{"failures":[],"tindex":"c1835a22-827a-11e5-baa6-4376660edb26","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:361","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.routing.util.BikeCommonFlagEncoder.int"},"variableMap":{"com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED":"adjNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:99","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.routing.AStar.AStarEdge.int"},"status":-2},{"failures":[],"tindex":"c1838133-827a-11e5-baa6-7f79c89cb30d","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.QueryGraph:258","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.add(java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.get(((java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.size()) - 2)))"},"variableMap":{"virtualEdges":"modifiedEdges"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:415","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.add(com.graphhopper.routing.VirtualEdgeIteratorState)"},"status":0},{"failures":[],"tindex":"c1838134-827a-11e5-baa6-193eb5154c8b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:158","type":"CtAssignmentImpl","sourcecode":"int = 16"},"variableMap":{"tmpNo":"usedBits"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:189","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":0},{"failures":[3,4,5,6,7,8,9,380],"tindex":"c1838135-827a-11e5-baa6-87bb765dbaf3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:234","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    throw new java.lang.IllegalStateException(\"at least one entry has to be != null, which should have happened in initIndex\");\n} "},"variableMap":{"initializedCounter":"level"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:265","type":"CtWhileImpl","sourcecode":"while (!(com.graphhopper.coll.GHTreeMapComposed.isEmpty())) {\n    if ((boolean && ((long) > 0)) && (((long) % long) == 0)) {\n        com.graphhopper.util.StopWatch.start();\n        com.graphhopper.coll.GHTreeMapComposed.clear();\n        int int = com.graphhopper.storage.CHGraphImpl.getNodes();\n        for (int int = 0 ; int < int ; int++) {\n            if ((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int))\n                continue;\n            \n            int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n            com.graphhopper.coll.GHTreeMapComposed.insert(int, int);\n        }\n        com.graphhopper.util.StopWatch.stop();\n        int++;\n        if (com.graphhopper.coll.GHTreeMapComposed.isEmpty())\n            throw new java.lang.IllegalStateException(\"Cannot prepare as no unprepared nodes where found. Called preparation twice?\");\n        \n    } \n    if (((long) % long) == 0) {\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        double += com.graphhopper.util.StopWatch.getSeconds();\n        org.slf4j.Logger.info((((((((((((((((((com.graphhopper.util.Helper.nf(long)) + \", updates:\") + int) + \", nodes: \") + (com.graphhopper.util.Helper.nf(com.graphhopper.coll.GHTreeMapComposed.getSize()))) + \", shortcuts:\") + (com.graphhopper.util.Helper.nf(int))) + \", dijkstras:\") + (com.graphhopper.util.Helper.nf(long))) + \", \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getTimesAsString())) + \", meanDegree:\") + ((long)(double))) + \", algo:\") + (com.graphhopper.routing.DijkstraOneToMany.getMemoryUsageAsString())) + \", \") + (com.graphhopper.util.Helper.getMemInfo())));\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n        com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch();\n    } \n    (long)++;\n    int int = com.graphhopper.coll.GHTreeMapComposed.pollKey();\n    if ((!(com.graphhopper.coll.GHTreeMapComposed.isEmpty())) && ((com.graphhopper.coll.GHTreeMapComposed.getSize()) < long)) {\n        com.graphhopper.util.StopWatch.start();\n        int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n        if (int > (com.graphhopper.coll.GHTreeMapComposed.peekValue())) {\n            com.graphhopper.coll.GHTreeMapComposed.insert(int, int);\n            com.graphhopper.util.StopWatch.stop();\n            continue;\n        } \n        com.graphhopper.util.StopWatch.stop();\n    } \n    int += com.graphhopper.routing.ch.PrepareContractionHierarchies.addShortcuts(int);\n    com.graphhopper.storage.CHGraphImpl.setLevel(int, int);\n    int++;\n    if ((com.graphhopper.coll.GHTreeMapComposed.getSize()) < long)\n        break;\n    \n    com.graphhopper.util.CHEdgeIterator com.graphhopper.util.CHEdgeIterator = com.graphhopper.util.CHEdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.CHEdgeIterator.next()) {\n        int int = com.graphhopper.util.CHEdgeIterator.getAdjNode();\n        if ((com.graphhopper.storage.CHGraphImpl.getLevel(int)) != (int))\n            continue;\n        \n        if (boolean && ((java.util.Random.nextInt(100)) < (int))) {\n            com.graphhopper.util.StopWatch.start();\n            int int = int[][int];\n            int int = int[][int] = com.graphhopper.routing.ch.PrepareContractionHierarchies.calculatePriority(int);\n            if (int != int)\n                com.graphhopper.coll.GHTreeMapComposed.update(int, int, int);\n            \n            com.graphhopper.util.StopWatch.stop();\n        } \n        com.graphhopper.storage.CHGraphImpl.disconnect(com.graphhopper.util.CHEdgeExplorer, com.graphhopper.util.CHEdgeIterator);\n    }\n}"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"c1830bf4-827a-11e5-baa6-bd99b82d2a56","diffs":[{"methodsDiff":{"delete":["com.graphhopper.reader.dem.HeightTile.setCalcMean"]},"type":"staticDiff"},{"branches":{"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":["com.graphhopper.reader.dem.HeightTile_com.graphhopper.reader.dem.HeightTile_setCalcMean(boolean).b"],"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeight":["com.graphhopper.reader.dem.HeightTile_com.graphhopper.reader.dem.HeightTile_setCalcMean(boolean).b"]},"type":"branch"}]},{"transformation":"c1830bf7-827a-11e5-baa6-4b894835f9a3","diffs":[{"branches":{"com.graphhopper.GraphHopperAPITest.testLoad":["com.graphhopper.util.StopWatch_java.lang.String_toString().b","com.graphhopper.util.StopWatch_java.lang.String_toString().t1"],"com.graphhopper.GraphHopperTest.testFootAndCar":["com.graphhopper.util.StopWatch_java.lang.String_toString().b","com.graphhopper.util.StopWatch_java.lang.String_toString().t1"]},"type":"branch"},{"methodsDiff":{"delete":["com.graphhopper.util.StopWatch.toString"]},"type":"staticDiff"}]}]}
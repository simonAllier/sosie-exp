{"failureDictionary":{"com.graphhopper.util.GHUtilityTest.testSort2":10,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":41,"com.graphhopper.routing.PathTest.testFindInstruction":55,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":31,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":7,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":8,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":14,"com.graphhopper.storage.GraphHopperStorageTest.testNoCreateCalled":18,"com.graphhopper.routing.PathBidirRefTest.testExtract2":47,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":58,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":48,"com.graphhopper.util.InstructionListTest.testEmptyList":2,"com.graphhopper.routing.PathTest.testWayList":54,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":36,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":9,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":28,"com.graphhopper.reader.PrinctonReaderTest.testRead":60,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":38,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":39,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":26,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":30,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":32,"com.graphhopper.util.InstructionListTest.testWayList2":5,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":56,"com.graphhopper.util.GHUtilityTest.testSort":12,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":22,"com.graphhopper.routing.PathTest.testTime":51,"com.graphhopper.util.InstructionListTest.testWayList":4,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNoCreateCalled":21,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":3,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":15,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":29,"com.graphhopper.GraphHopperAPITest.testDisconnected179":17,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":43,"com.graphhopper.util.GHUtilityTest.testSortDirected":13,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":40,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":57,"com.graphhopper.reader.OSMReaderTest.testTurnFlagCombination":59,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":61,"com.graphhopper.storage.GraphHopperStorageCHTest.testNoCreateCalled":20,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":53,"com.graphhopper.GraphHopperAPITest.testLoad":16,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":27,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":42,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":19,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":49,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":6,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":24,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":34,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":37,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":25,"com.graphhopper.routing.PathBidirRefTest.testExtract":46,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":0,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":52,"com.graphhopper.util.InstructionListTest.testFind":1,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":44,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":45,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":35,"com.graphhopper.routing.PathTest.testFound":50,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":33,"com.graphhopper.util.GHUtilityTest.testCopy":11,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":23},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"tindex":"0f09d16b-790f-11e5-95f7-4bbb47f0138d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:45","type":"CtAssignmentImpl","sourcecode":"java.lang.String = new java.io.File(\"\").getAbsolutePath()"},"status":-1},{"failures":[],"tindex":"0f09f87c-790f-11e5-95f7-a1f23d0a921e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:163","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.QueryResult.setWayIndex((((com.graphhopper.util.PointList.getSize()) - (com.graphhopper.storage.index.QueryResult.getWayIndex())) - 2))"},"status":-2},{"failures":[],"tindex":"0f09f87d-790f-11e5-95f7-15fcd05495e4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.RoundaboutInstruction:117","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.RoundaboutInstruction.getTurnAngle()"},"variableMap":{"this":"nextI"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:214","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.Instruction.calcAzimuth(com.graphhopper.util.Instruction)"},"status":-2},{"failures":[],"tindex":"0f0a1f8e-790f-11e5-95f7-a190cd478570","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalc3D:38","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Math.abs((double - double))"},"variableMap":{"fromHeight":"maxLonTmp","toHeight":"maxLonTmp"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:184","type":"CtLocalVariableImpl","sourcecode":"double double = (double + double) / 2"},"status":-2},{"failures":[],"tindex":"0f0a1f8f-790f-11e5-95f7-092a2010a13c","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:254","type":"CtAssertImpl","sourcecode":"assert (int + 2) <= (int) : \"integer cannot be distributed over two segments\""},"variableMap":{"segmentSizeInBytes":"speed","index":"speed"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:388","type":"CtIfImpl","sourcecode":"if (java.lang.Integer != null)\n    int = java.lang.Integer;\n"},"status":-2},{"failures":[],"tindex":"0f0a1f90-790f-11e5-95f7-93306b262ee8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:58","type":"CtLocalVariableImpl","sourcecode":"double double = double * (1.0 - double)"},"variableMap":{"deltaX":"maxLat","tmp":"minLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:215","type":"CtLocalVariableImpl","sourcecode":"double double = ((com.graphhopper.util.shapes.BBox.double) - (com.graphhopper.util.shapes.BBox.double)) / 2"},"status":-2},{"failures":[],"tindex":"0f0a1f91-790f-11e5-95f7-cfe59cd020ab","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.TurnWeighting:85","type":"CtReturnImpl","sourcecode":"return double + (double)"},"variableMap":{"defaultUTurnCost":"java.lang.Double.NaN","weight":"java.lang.Double.NaN"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:241","type":"CtReturnImpl","sourcecode":"return java.lang.Double.double"},"status":-2},{"failures":[],"tindex":"0f0a1f92-790f-11e5-95f7-43185e990f8c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:154","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:357","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.reader.TLongList.size()) > 1) {\n    int int = com.graphhopper.reader.OSMReader.getNodeMap().get(com.graphhopper.reader.TLongList.get(0));\n    int int = com.graphhopper.reader.OSMReader.getNodeMap().get(com.graphhopper.reader.TLongList.get(((com.graphhopper.reader.TLongList.size()) - 1)));\n    double double = com.graphhopper.reader.OSMReader.getTmpLatitude(int);\n    double double = com.graphhopper.reader.OSMReader.getTmpLongitude(int);\n    double double = com.graphhopper.reader.OSMReader.getTmpLatitude(int);\n    double double = com.graphhopper.reader.OSMReader.getTmpLongitude(int);\n    if ((((!(java.lang.Double.isNaN(double))) && (!(java.lang.Double.isNaN(double)))) && (!(java.lang.Double.isNaN(double)))) && (!(java.lang.Double.isNaN(double)))) {\n        double double = com.graphhopper.util.DistanceCalc.calcDist(double, double, double, double);\n        com.graphhopper.reader.OSMWay.setTag(\"estimated_distance\", double);\n        com.graphhopper.reader.OSMWay.setTag(\"estimated_center\", new com.graphhopper.util.shapes.GHPoint(((double + double) / 2) , ((double + double) / 2)));\n    } \n} "},"status":-2},{"failures":[],"tindex":"0f0a46a3-790f-11e5-95f7-397bcdd9350c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:197","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    if (!com.graphhopper.routing.AbstractRoutingAlgorithm.(accept(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.EdgeEntry.int)))\n        continue;\n    \n    int int = com.graphhopper.routing.util.TraversalMode.createTraversalId(com.graphhopper.util.EdgeIterator, boolean);\n    double double = (com.graphhopper.routing.util.Weighting.calcWeight(com.graphhopper.util.EdgeIterator, boolean, com.graphhopper.storage.EdgeEntry.int)) + (com.graphhopper.storage.EdgeEntry.double);\n    if (java.lang.Double.isInfinite(double))\n        continue;\n    \n    com.graphhopper.storage.EdgeEntry com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.TIntObjectMap<com.graphhopper.storage.EdgeEntry>.get(int);\n    if (com.graphhopper.storage.EdgeEntry == null) {\n        com.graphhopper.storage.EdgeEntry = new com.graphhopper.storage.EdgeEntry(com.graphhopper.util.EdgeIterator.getEdge() , com.graphhopper.util.EdgeIterator.getAdjNode() , double);\n        com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n        com.graphhopper.routing.TIntObjectMap<com.graphhopper.storage.EdgeEntry>.put(int, com.graphhopper.storage.EdgeEntry);\n        java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.add(com.graphhopper.storage.EdgeEntry);\n    } else if ((com.graphhopper.storage.EdgeEntry.double) > double) {\n        java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.remove(com.graphhopper.storage.EdgeEntry);\n        com.graphhopper.storage.EdgeEntry.int = com.graphhopper.util.EdgeIterator.getEdge();\n        com.graphhopper.storage.EdgeEntry.double = double;\n        com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n        java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.add(com.graphhopper.storage.EdgeEntry);\n    } else\n        continue;\n    \n    if (boolean)\n        com.graphhopper.routing.DijkstraBidirectionRef.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.EdgeEntry, int);\n    \n}"},"status":-2},{"failures":[],"tindex":"0f0a46a4-790f-11e5-95f7-87c2a071971e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:571","type":"CtIfImpl","sourcecode":"if (((com.graphhopper.util.EdgeIteratorState.getAdjNode()) == int) || (int == (java.lang.Integer.int)))\n    return com.graphhopper.util.EdgeIteratorState;\n"},"status":-2},{"failures":[],"tindex":"0f0a46a5-790f-11e5-95f7-5bc0b0e9b767","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.EdgeAccess:185","type":"CtIfImpl","sourcecode":"if (int > int) {\n    int int = int;\n    int = int;\n    int = int;\n    int = int;\n    int = int;\n    int = int;\n} "},"variableMap":{"nodeThis":"node","nextEdgeOther":"start","nodeOther":"start","nextEdge":"node"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:120","type":"CtWhileImpl","sourcecode":"while ((int = com.graphhopper.routing.util.TIntArrayStack.pop()) != int) {\n    com.graphhopper.routing.util.TIntArrayList.add(int);\n    com.graphhopper.coll.GHBitSetImpl.clear(int);\n}"},"status":-2},{"failures":[],"tindex":"0f0a46a6-790f-11e5-95f7-c106443cd003","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:44","type":"CtAssignmentImpl","sourcecode":"double = (double + double) / (double - double)"},"variableMap":{"r":"maxEle","x":"maxEle","absY":"maxEle"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:185","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.shapes.BBox.double = com.graphhopper.util.Helper.intToEle(com.graphhopper.storage.DataAccess.getHeader((8 * 4)))"},"status":-2},{"failures":[],"tindex":"0f0a46a7-790f-11e5-95f7-c7f622e907bd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:154","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.CompressedArray:140","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.VLongStorage.trimToSize()"},"status":-2},{"failures":[],"tindex":"0f0a6db8-790f-11e5-95f7-f992cf4dd427","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PMap:113","type":"CtTryImpl","sourcecode":"try {\n    return java.lang.Boolean.parseBoolean(java.lang.String);\n} catch (java.lang.Exception ex) {\n}"},"variableMap":{"str":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PMap:111","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.util.Helper.isEmpty(java.lang.String))) {\n    try {\n        return java.lang.Boolean.parseBoolean(java.lang.String);\n    } catch (java.lang.Exception ex) {\n    }\n} "},"status":-2},{"failures":[],"tindex":"0f0a6db9-790f-11e5-95f7-3b7dff8787a0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:73","type":"CtOperatorAssignmentImpl","sourcecode":"double += double"},"variableMap":{"deltaX":"prevLat","maxX":"lat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:770","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.DistanceCalc3D.calcDist(double, double, double, double, double, double)"},"status":-2},{"failures":[],"tindex":"0f0a6dba-790f-11e5-95f7-fdc83f4a1b7b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:184","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"variableMap":{"shift":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHSortedCollection:63","type":"CtUnaryOperatorImpl","sourcecode":"(int)--"},"status":-2},{"failures":[],"tindex":"0f0a6dbb-790f-11e5-95f7-519fb31259da","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:77","type":"CtIfImpl","sourcecode":"if (long == (int)) {\n    throw new java.lang.IllegalArgumentException((\"Illegal key \" + long));\n} "},"variableMap":{"noNumberValue":"guess","key":"guessedKey"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHLongIntBTree:480","type":"CtIfImpl","sourcecode":"if (long < long) {\n    int = int;\n} else {\n    int = int;\n}"},"status":-2},{"failures":[],"tindex":"0f0a6dbc-790f-11e5-95f7-2d8f5363d154","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:884","type":"CtIfImpl","sourcecode":"if ((int & 2) != 0)\n    com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n"},"status":-2},{"failures":[],"tindex":"0f0a6dbd-790f-11e5-95f7-559d53c010f2","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.SRTMProvider:324","type":"CtReturnImpl","sourcecode":"return \"SRTM\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:230","type":"CtReturnImpl","sourcecode":"return java.lang.StringBuilder.toString().replaceAll(\"\\\\\\'\", \"\\\"\")"},"status":-2},{"failures":[],"tindex":"0f0a6dbe-790f-11e5-95f7-91ad363ae217","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.VirtualEdgeIteratorState:95","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.util.PointList.getSize()) == 1)\n    return com.graphhopper.util.PointList.com.graphhopper.util.PointList;\n"},"variableMap":{"pointList":"copyPL","com.graphhopper.util.PointList.EMPTY":"copyPL"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:384","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.PointList"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
{"failureDictionary":{"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":18,"com.graphhopper.coll.OSMIDSegmentedMapTest.testGet":25,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":15,"com.graphhopper.reader.OSMReaderTest.testFerry":0,"com.graphhopper.reader.OSMReaderTest.testOneWay":2,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":11,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":7,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":8,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":6,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":24,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":5,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":13,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":17,"com.graphhopper.coll.OSMIDSegmentedMapTest.testZeroKey":27,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":20,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidanceOfHighMaxSpeed":22,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":19,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":14,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":9,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":1,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":3,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":10,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":16,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":4,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":23,"com.graphhopper.coll.OSMIDSegmentedMapTest.testGet2":26,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":12,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":21},"transformations":[{"failures":[],"tindex":"bacecc96-7944-11e5-b52a-396ebfd3edd6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.DefaultEdgeFilter:36","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.DefaultEdgeFilter.this(com.graphhopper.routing.util.FlagEncoder, true, true)"},"status":-2},{"failures":[],"tindex":"bacef3a7-7944-11e5-b52a-9729779b1ff8","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:178","type":"CtIfImpl","sourcecode":"if (int > 64)\n    throw new java.lang.IllegalStateException(\"sum of all shifts does not fit into a long variable\");\n"},"variableMap":{"shiftSum":"N_ADDITIONAL"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:266","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.GraphExtension.isRequireNodeField())\n    int = com.graphhopper.storage.BaseGraph.nextNodeEntryIndex(4);\nelse\n    int = -1;\n"},"status":0},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"tindex":"bacef3a8-7944-11e5-b52a-478cb6d1695b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:178","type":"CtIfImpl","sourcecode":"if (int > 64)\n    throw new java.lang.IllegalStateException(\"sum of all shifts does not fit into a long variable\");\n"},"variableMap":{"shiftSum":"priorityFromRelation"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:474","type":"CtIfImpl","sourcecode":"if (int == 0)\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(0.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\nelse\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(110.0, int);\n"},"status":-1},{"failures":[25],"tindex":"bacef3a9-7944-11e5-b52a-652750e1749b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.SparseLongLongArray:361","type":"CtAssignmentImpl","sourcecode":"long[] = long[]"},"variableMap":{"mKeys":"keys","nkeys":"keys"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:73","type":"CtAssignmentImpl","sourcecode":"long[] = java.util.Arrays.copyOf(long[], int)"},"status":-1},{"failures":[],"tindex":"bacf1aba-7944-11e5-b52a-2dadf4b3a177","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:172","type":"CtLocalVariableImpl","sourcecode":"long long = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:151","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.storage.AbstractDataAccess.(readHeader(java.io.RandomAccessFile)) - (com.graphhopper.storage.AbstractDataAccess.int)"},"status":-2},{"failures":[],"tindex":"bacf41cb-7944-11e5-b52a-8b9e63463fc2","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Unzipper:45","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[],"tindex":"bacf41cc-7944-11e5-b52a-d1f53b6beeff","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.MapEntry:92","type":"CtLocalVariableImpl","sourcecode":"int int = 7"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMInputFile:151","type":"CtLocalVariableImpl","sourcecode":"int int = javax.xml.stream.XMLStreamReader.next()"},"status":-2},{"failures":[25,26,27],"tindex":"bacf41cd-7944-11e5-b52a-f75107ca9ea3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:236","type":"CtLocalVariableImpl","sourcecode":"int int = ((int) - int) - 1"},"variableMap":{"size":"currentBucket","i":"currentBucket"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:97","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.coll.SparseLongLongArray.binarySearch(long[], 0, ((int) + 1), long)"},"status":-1},{"failures":[],"tindex":"bacf68de-7944-11e5-b52a-d94e09817540","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:124","type":"CtBreakImpl","sourcecode":"break"},"status":0},{"failures":[],"tindex":"bacf68df-7944-11e5-b52a-a14add2372da","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:124","type":"CtIfImpl","sourcecode":"if (int > 0)\n    continue;\n"},"variableMap":{"i":"lonSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:239","type":"CtWhileImpl","sourcecode":"while (int < int) {\n    com.graphhopper.storage.DataAccess.copyTo(com.graphhopper.storage.DataAccess);\n    com.graphhopper.coll.GHBitSet.copyTo(com.graphhopper.coll.GHBitSet);\n    int = com.graphhopper.coll.GHBitSet.getCardinality();\n    for (int int = 0 ; int < int ; int++) {\n        int int = -1;\n        int int = -1;\n        if (com.graphhopper.coll.GHBitSet.contains(int)) {\n            if ((((int + 1) % (int)) != 0) && (!(com.graphhopper.coll.GHBitSet.contains((int + 1))))) {\n                int = int;\n                int = int + 1;\n            } else if (((int + (int)) < int) && (!(com.graphhopper.coll.GHBitSet.contains((int + (int)))))) {\n                int = int;\n                int = int + (int);\n            } \n        } else {\n            if ((((int + 1) % (int)) != 0) && (com.graphhopper.coll.GHBitSet.contains((int + 1)))) {\n                int = int + 1;\n                int = int;\n            } else if (((int + (int)) < int) && (com.graphhopper.coll.GHBitSet.contains((int + (int))))) {\n                int = int + (int);\n                int = int;\n            } \n        }\n        if (int >= 0) {\n            if ((int[][int]) >= 0) {\n                if (((int[][int]) == int) || (com.graphhopper.storage.index.Location2IDQuadtree.(getNormedDist(int, int)) >= com.graphhopper.storage.index.Location2IDQuadtree.(getNormedDist(int[][int], int)))) {\n                    continue;\n                } \n            } \n            com.graphhopper.storage.DataAccess.setInt((int * 4), com.graphhopper.storage.DataAccess.getInt((int * 4)));\n            int[][int] = int[][int];\n            com.graphhopper.coll.GHBitSet.add(int);\n            int++;\n        } \n    }\n}"},"status":-2},{"failures":[],"tindex":"bacf68e0-7944-11e5-b52a-33142c199997","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:704","type":"CtIfImpl","sourcecode":"if (int == (com.graphhopper.storage.EdgeAccess.int))\n    continue;\n"},"variableMap":{"com.graphhopper.storage.EdgeAccess.NO_NODE":"from","nodeId":"originalEdges"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:660","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.CHEdgeIterator.next()) {\n    if (((com.graphhopper.util.CHEdgeIterator.isShortcut()) && ((com.graphhopper.util.CHEdgeIterator.getAdjNode()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) && (com.graphhopper.util.CHEdgeIterator.canBeOverwritten(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long))) {\n        if ((com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double) >= (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.CHEdgeIterator, false, com.graphhopper.util.EdgeIterator.int)))\n            continue NEXT_SC;\n        \n        if (((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) || ((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) {\n            throw new java.lang.IllegalStateException((((((((((((((((((\"Shortcut cannot update itself! \" + (com.graphhopper.util.CHEdgeIterator.getEdge())) + \", skipEdge1:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", skipEdge2:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", edge \") + com.graphhopper.util.CHEdgeIterator) + \":\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.CHEdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", sc:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut) + \", skippedEdge1: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", skippedEdge2: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", neighbors:\") + (com.graphhopper.util.GHUtility.getNeighbors(com.graphhopper.util.CHEdgeIterator))));\n        } \n        com.graphhopper.util.CHEdgeIterator.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n        com.graphhopper.util.CHEdgeIterator.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIterator.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIterator.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIterator.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        boolean = true;\n        break;\n    } \n}"},"status":-2},{"failures":[],"tindex":"bacf8ff1-7944-11e5-b52a-470d7589aa47","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:447","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtil:134","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.BitUtil.fromShort(byte[], short, 0)"},"status":-2},{"failures":[],"tindex":"bacf8ff2-7944-11e5-b52a-d93cb720e5b5","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PointList:361","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.reverse()"},"variableMap":{"clonePL":"points"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:107","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.set(int, com.graphhopper.util.PointList.getLatitude(int), com.graphhopper.util.PointList.getLongitude(int), com.graphhopper.util.PointList.getElevation(int))"},"status":-2},{"failures":[],"tindex":"bacf8ff3-7944-11e5-b52a-6b21e93acb36","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:124","type":"CtIfImpl","sourcecode":"if (long == long)\n    return long;\nelse\n    return ~long;\n"},"variableMap":{"high":"flags","highKey":"flags","key":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:125","type":"CtReturnImpl","sourcecode":"return long"},"status":-2},{"failures":[],"tindex":"bacf8ff4-7944-11e5-b52a-4926141c241f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:520","type":"CtReturnImpl","sourcecode":"return com.graphhopper.reader.OSMReader.int"},"variableMap":{"com.graphhopper.reader.OSMReader.EMPTY":"bufferIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:235","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.BitUtil.toInt(byte[][][int], int)"},"status":-2},{"failures":[],"tindex":"bacf8ff5-7944-11e5-b52a-7d664e912530","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:126","type":"CtIfImpl","sourcecode":"if ((int) < 0) {\n    throw new java.lang.IllegalStateException(\"collection is already empty!?\");\n} "},"variableMap":{"size":"connectedId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DepthFirstSearch:52","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.XFirstSearch.checkAdjacent(com.graphhopper.util.EdgeIterator)) {\n    com.graphhopper.util.TIntArrayStack.push(int);\n} "},"status":-2},{"failures":[],"tindex":"bacf8ff6-7944-11e5-b52a-41571f4abc01","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMTurnRelation:158","type":"CtReturnImpl","sourcecode":"return (((long)(int)) << 32) | ((long)(int))"},"variableMap":{"edgeTo":"length","edgeFrom":"length"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:55","type":"CtReturnImpl","sourcecode":"return byte[].int"},"status":-2},{"failures":[],"tindex":"bacf8ff7-7944-11e5-b52a-9f69915f14a0","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.DijkstraOneToMany:204","type":"CtReturnImpl","sourcecode":"return (int) == (int)"},"variableMap":{"currNode":"current","to":"current"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.VirtualEdgeIterator:168","type":"CtReturnImpl","sourcecode":"return java.util.List<com.graphhopper.util.EdgeIteratorState>.get(int).isBackward(com.graphhopper.routing.util.FlagEncoder)"},"status":-2},{"failures":[],"tindex":"bacfb708-7944-11e5-b52a-015358b6f5f1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:125","type":"CtIfImpl","sourcecode":"if (long > long) {\n    break;\n} "},"variableMap":{"storedKey":"address","key":"address"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:230","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.UnsafeDataAccess.sun.misc.Unsafe.putShort(((long) + long), short)"},"status":-2},{"failures":[],"tindex":"bacfb709-7944-11e5-b52a-0900dbbed751","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PathMerger:91","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.PointList.isEmpty())\n    com.graphhopper.util.PointList = new com.graphhopper.util.PointList(com.graphhopper.util.PointList.size() , com.graphhopper.util.PointList.is3D());\n"},"variableMap":{"tmpPoints":"clonePL","fullPoints":"clonePL"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:361","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.reverse()"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
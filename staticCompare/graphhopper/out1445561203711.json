{"failureDictionary":{"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testNoErrorOnEdgeCase_lastIndex":0,"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":25,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":23,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":11,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":47,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":43,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":9,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":49,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":4,"com.graphhopper.storage.MMapDataAccessTest.testCopy":56,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":44,"com.graphhopper.storage.MMapDataAccessTest.textMixRAM2MMAP":51,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":21,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":40,"com.graphhopper.storage.MMapDataAccessTest.testRenameNoFlush":59,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeightMMap":68,"com.graphhopper.storage.index.Location2IDFullIndexTest.testNoErrorOnEdgeCase_lastIndex":8,"com.graphhopper.storage.MMapDataAccessTest.testSegments":61,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":32,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":22,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":46,"com.graphhopper.storage.MMapDataAccessTest.testLoadFlush":63,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":65,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeight":69,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":31,"com.graphhopper.coll.CompressedArrayTest.testCompress":72,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testNoErrorOnEdgeCase_lastIndex":7,"com.graphhopper.util.SimpleIntDequeTest.testPush":70,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":20,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":30,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":10,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":16,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":39,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":48,"com.graphhopper.storage.MMapDataAccessTest.testTrimTo":60,"com.graphhopper.storage.MMapDataAccessTest.textMixMMAP2RAM":52,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":41,"com.graphhopper.storage.GraphStorageViaMMapTest.testInfinityWeight":42,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":50,"com.graphhopper.storage.MMapDataAccessTest.testSet_GetBytes":55,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":17,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":19,"com.graphhopper.storage.GraphStorageViaMMapTest.testBounds":34,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":38,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":33,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":14,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":6,"com.graphhopper.storage.MMapDataAccessTest.testSet_Get_Short_Long":53,"com.graphhopper.storage.MMapDataAccessTest.testBoundsCheck":54,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNoErrorOnEdgeCase_lastIndex":5,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":18,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":29,"com.graphhopper.storage.MMapDataAccessTest.testLoadClose":62,"com.graphhopper.coll.CompressedArrayTest.testCompress2":71,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":24,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":13,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":1,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":12,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":66,"com.graphhopper.storage.MMapDataAccessTest.testRenameFlush":57,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":27,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":67,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":28,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":45,"com.graphhopper.storage.MMapDataAccessTest.testEnsureCapacity":58,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":2,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":3,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":26,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":35,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":37,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":15,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":36,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":64},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"tindex":"880082bc-791f-11e5-8508-bd1f7c6fa77d","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:126","type":"CtAssignmentImpl","sourcecode":"long = 0"},"variableMap":{"size":"longSegmentSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:146","type":"CtOperatorAssignmentImpl","sourcecode":"long += (java.util.List<java.nio.ByteBuffer>.size()) * long"},"status":-1},{"failures":[],"tindex":"8800a9cd-791f-11e5-8508-e1b1feaf0f6f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:118","type":"CtAssignmentImpl","sourcecode":"int = int * 2"},"status":-2},{"failures":[],"tindex":"8800a9ce-791f-11e5-8508-c538ee22b51e","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Downloader:119","type":"CtLocalVariableImpl","sourcecode":"int int = 8 * 1024"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:351","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[70],"tindex":"8800a9cf-791f-11e5-8508-73c36eb9fa2c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.SimpleIntDeque:82","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(int[], int, int[], 0, int)"},"status":-1},{"failures":[71,72],"tindex":"8800d0e0-791f-11e5-8508-9144c8560810","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.CompressedArray:106","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.CompressedArray:102","type":"CtTryImpl","sourcecode":"try {\n    if (int >= (java.util.List<byte[]>.size())) {\n        return null;\n    } \n    byte[] byte[] = java.util.List<byte[]>.get(int);\n    com.graphhopper.storage.VLongStorage com.graphhopper.storage.VLongStorage = new com.graphhopper.storage.VLongStorage(com.graphhopper.coll.CompressedArray.com.graphhopper.coll.CompressedArray.decompress(byte[]));\n    long long = com.graphhopper.storage.VLongStorage.getLength();\n    for (int int = 0 ; (com.graphhopper.storage.VLongStorage.getPosition()) < long ; int++) {\n        long long = com.graphhopper.storage.VLongStorage.readVLong();\n        if (int == int) {\n            com.graphhopper.util.shapes.GHPoint com.graphhopper.util.shapes.GHPoint = new com.graphhopper.util.shapes.GHPoint();\n            com.graphhopper.geohash.SpatialKeyAlgo.decode(long, com.graphhopper.util.shapes.GHPoint);\n            return com.graphhopper.util.shapes.GHPoint;\n        } \n    }\n    return null;\n} catch (java.lang.ArrayIndexOutOfBoundsException ex) {\n    throw new java.lang.RuntimeException((((((((\"index \" + long) + \"=> segNo:\") + int) + \", entry=\") + int) + \", segments:\") + (java.util.List<byte[]>.size())) , java.lang.ArrayIndexOutOfBoundsException);\n} catch (java.lang.Exception ex) {\n    throw new java.lang.RuntimeException(java.lang.Exception);\n}"},"status":-1},{"failures":[],"tindex":"8800d0e1-791f-11e5-8508-29f33c2aedff","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:154","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:819","type":"CtInvocationImpl","sourcecode":"java.util.Map<com.graphhopper.routing.util.Weighting, com.graphhopper.routing.RoutingAlgorithmFactory>.clear()"},"status":-2},{"failures":[],"tindex":"8800d0e2-791f-11e5-8508-278cdad960b3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:349","type":"CtIfImpl","sourcecode":"if (long == 0)\n    return ;\n"},"status":-2},{"failures":[],"tindex":"8800d0e3-791f-11e5-8508-3db307e34101","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.BigLongIntMap:73","type":"CtLocalVariableImpl","sourcecode":"long long = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtil:225","type":"CtLocalVariableImpl","sourcecode":"long long = 1L << 63"},"status":-2},{"failures":[],"tindex":"8800f7f4-791f-11e5-8508-0133b573bb5d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:183","type":"CtIfImpl","sourcecode":"if (int == (int))\n    break;\n"},"variableMap":{"turnCostIndex":"len","NO_TURN_ENTRY":"initializedCounter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:239","type":"CtWhileImpl","sourcecode":"while (int < int) {\n    com.graphhopper.storage.DataAccess.copyTo(com.graphhopper.storage.DataAccess);\n    com.graphhopper.coll.GHBitSet.copyTo(com.graphhopper.coll.GHBitSet);\n    int = com.graphhopper.coll.GHBitSet.getCardinality();\n    for (int int = 0 ; int < int ; int++) {\n        int int = -1;\n        int int = -1;\n        if (com.graphhopper.coll.GHBitSet.contains(int)) {\n            if ((((int + 1) % (int)) != 0) && (!(com.graphhopper.coll.GHBitSet.contains((int + 1))))) {\n                int = int;\n                int = int + 1;\n            } else if (((int + (int)) < int) && (!(com.graphhopper.coll.GHBitSet.contains((int + (int)))))) {\n                int = int;\n                int = int + (int);\n            } \n        } else {\n            if ((((int + 1) % (int)) != 0) && (com.graphhopper.coll.GHBitSet.contains((int + 1)))) {\n                int = int + 1;\n                int = int;\n            } else if (((int + (int)) < int) && (com.graphhopper.coll.GHBitSet.contains((int + (int))))) {\n                int = int + (int);\n                int = int;\n            } \n        }\n        if (int >= 0) {\n            if ((int[][int]) >= 0) {\n                if (((int[][int]) == int) || (com.graphhopper.storage.index.Location2IDQuadtree.(getNormedDist(int, int)) >= com.graphhopper.storage.index.Location2IDQuadtree.(getNormedDist(int[][int], int)))) {\n                    continue;\n                } \n            } \n            com.graphhopper.storage.DataAccess.setInt((int * 4), com.graphhopper.storage.DataAccess.getInt((int * 4)));\n            int[][int] = int[][int];\n            com.graphhopper.coll.GHBitSet.add(int);\n            int++;\n        } \n    }\n}"},"status":-2},{"failures":[],"tindex":"8800f7f5-791f-11e5-8508-0974d62097b6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.CompressedArray:106","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:194","type":"CtReturnImpl","sourcecode":"return new com.graphhopper.util.shapes.GHPoint(double , double)"},"status":-2},{"failures":[],"tindex":"8800f7f6-791f-11e5-8508-efc215a1ebee","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:220","type":"CtLocalVariableImpl","sourcecode":"double double = double * double"},"variableMap":{"a_lon_deg":"lon","shrinkFactor":"maxLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:660","type":"CtLocalVariableImpl","sourcecode":"double double = double - (com.graphhopper.util.shapes.GHPoint.double)"},"status":-2},{"failures":[],"tindex":"88011f07-791f-11e5-8508-93dea5dabde3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:228","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.Path.addEdge(int)"},"status":-2},{"failures":[],"tindex":"88011f08-791f-11e5-8508-85c263714783","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphBuilder:74","type":"CtAssignmentImpl","sourcecode":"this.long = byte"},"variableMap":{"byteCapacity":"i","cap":"b"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:121","type":"CtOperatorAssignmentImpl","sourcecode":"long |= (byte & 127L) << 7"},"status":-2},{"failures":[],"tindex":"88011f09-791f-11e5-8508-5fce668e2178","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.TestAlgoCollector:193","type":"CtReturnImpl","sourcecode":"return new com.graphhopper.routing.RoutingAlgorithmFactorySimple().createAlgo(com.graphhopper.storage.Graph, com.graphhopper.routing.AlgorithmOptions)"},"variableMap":{"opts":"opts","qGraph":"g"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.RoutingAlgorithmFactorySimple:42","type":"CtReturnImpl","sourcecode":"return new com.graphhopper.routing.Dijkstra(com.graphhopper.storage.Graph , com.graphhopper.routing.AlgorithmOptions.getFlagEncoder() , com.graphhopper.routing.AlgorithmOptions.getWeighting() , com.graphhopper.routing.AlgorithmOptions.getTraversalMode())"},"status":-2},{"failures":[],"tindex":"88011f0a-791f-11e5-8508-1540e8cc2279","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:239","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.dem.HeightTile.setHeights(com.graphhopper.storage.DataAccess)"},"status":-2},{"failures":[],"tindex":"88011f0b-791f-11e5-8508-496b8c86d461","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.Location2IDFullIndex:109","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.shapes.Circle = new com.graphhopper.util.shapes.Circle(double , double , double , com.graphhopper.util.DistanceCalc)"},"variableMap":{"tmpLon":"lat","dist":"lon","calc":"com.graphhopper.util.Helper.DIST_EARTH","circle":"this","tmpLat":"lat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.shapes.Circle:37","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.shapes.Circle.this(double, double, double, com.graphhopper.util.Helper.com.graphhopper.util.DistanceCalc)"},"status":-2},{"failures":[],"tindex":"8801461c-791f-11e5-8508-3b90a453b794","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:359","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.add(com.graphhopper.routing.VirtualEdgeIteratorState)"},"status":-2},{"failures":[],"tindex":"8801461d-791f-11e5-8508-3beab64686c4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:65","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:310","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = ((com.graphhopper.storage.GHDirectory)(com.graphhopper.storage.GraphStorage.getDirectory())).isStoring()"},"status":-2},{"failures":[],"tindex":"8801461e-791f-11e5-8508-8b708556d06a","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:821","type":"CtIfImpl","sourcecode":"if (boolean || (double < double))\n    return double * 0.9;\n"},"variableMap":{"force":"calcMean","maxSpeed":"lat","speed":"lat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:224","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.dem.HeightTile == null) {\n    if (!(java.io.File.exists()))\n        java.io.File.mkdirs();\n    \n    java.lang.String java.lang.String = com.graphhopper.reader.dem.SRTMProvider.getFileString(double, double);\n    if (java.lang.String == null)\n        return 0;\n    \n    int int = com.graphhopper.reader.dem.SRTMProvider.down(double);\n    int int = com.graphhopper.reader.dem.SRTMProvider.down(double);\n    com.graphhopper.reader.dem.HeightTile = new com.graphhopper.reader.dem.HeightTile(int , int , int , double , 1);\n    com.graphhopper.reader.dem.HeightTile.setCalcMean(boolean);\n    com.graphhopper.reader.dem.TIntObjectHashMap<com.graphhopper.reader.dem.HeightTile>.put(int, com.graphhopper.reader.dem.HeightTile);\n    com.graphhopper.storage.DataAccess com.graphhopper.storage.DataAccess = com.graphhopper.reader.dem.SRTMProvider.getDirectory().find((\"dem\" + int));\n    com.graphhopper.reader.dem.HeightTile.setHeights(com.graphhopper.storage.DataAccess);\n    boolean boolean = false;\n    try {\n        boolean = com.graphhopper.storage.DataAccess.loadExisting();\n    } catch (java.lang.Exception ex) {\n        com.graphhopper.reader.dem.Logger.warn((((\"cannot load dem\" + int) + \", error:\") + (java.lang.Exception.getMessage())));\n    }\n    if (!boolean) {\n        byte[] byte[] = new byte[(2 * (int)) * (int)];\n        com.graphhopper.storage.DataAccess.create(byte[].int);\n        try {\n            java.lang.String java.lang.String = (((java.lang.String) + \"/\") + java.lang.String) + \".hgt.zip\";\n            java.io.File java.io.File = new java.io.File(java.io.File , new java.io.File(java.lang.String).getName());\n            java.io.InputStream java.io.InputStream;\n            if (!(java.io.File.exists())) {\n                for (int int = 0 ; int < 3 ; int++) {\n                    try {\n                        com.graphhopper.util.Downloader.downloadFile(java.lang.String, java.io.File.getAbsolutePath());\n                        break;\n                    } catch (java.net.SocketTimeoutException ex) {\n                        java.lang.Thread.sleep(2000);\n                        continue;\n                    } catch (java.io.FileNotFoundException ex) {\n                        java.lang.String = (((java.lang.String) + \"/\") + java.lang.String) + \"hgt.zip\";\n                        continue;\n                    }\n                }\n            } \n            java.io.InputStream = new java.io.FileInputStream(java.io.File);\n            java.util.zip.ZipInputStream java.util.zip.ZipInputStream = new java.util.zip.ZipInputStream(java.io.InputStream);\n            java.util.zip.ZipInputStream.getNextEntry();\n            java.io.BufferedInputStream java.io.BufferedInputStream = new java.io.BufferedInputStream(java.util.zip.ZipInputStream);\n            int int;\n            while ((int = java.io.BufferedInputStream.read(byte[])) > 0) {\n                for (int int = 0 ; int < int ; int += 2) {\n                    short short = com.graphhopper.reader.dem.SRTMProvider.com.graphhopper.util.BitUtil.toShort(byte[], int);\n                    if ((short < (-1000)) || (short > 12000))\n                        short = java.lang.Short.short;\n                    \n                    com.graphhopper.storage.DataAccess.setShort(int, short);\n                }\n            }\n            com.graphhopper.storage.DataAccess.flush();\n        } catch (java.lang.Exception ex) {\n            throw new java.lang.RuntimeException(java.lang.Exception);\n        }\n    } \n} "},"status":-2},{"failures":[],"tindex":"88016d2f-791f-11e5-8508-571d3002bb15","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.SparseArray:132","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:396","type":"CtLocalVariableImpl","sourcecode":"int int"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
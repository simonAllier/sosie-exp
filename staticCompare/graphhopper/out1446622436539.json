{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":358,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":385,"com.graphhopper.routing.util.FootFlagEncoderTest.testPriority":488,"com.graphhopper.routing.util.EncodedDoubleValueTest.testMaxValueAndSwap":520,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":176,"com.graphhopper.GraphHopperAPITest.testNoLoad":549,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":84,"com.graphhopper.reader.OSMReaderTest.testFerry":398,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":286,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":287,"com.graphhopper.storage.GraphHopperStorageCHTest.testDoThrowExceptionIfDimDoesNotMatch":40,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":433,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testService":474,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":310,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidanceOfHighMaxSpeed":473,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":538,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":541,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":106,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":207,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":319,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeight":417,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testReduceToMaxSpeed":480,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":31,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":278,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testNoErrorOnEdgeCase_lastIndex":153,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":368,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":104,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":254,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":302,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":64,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":66,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":376,"com.graphhopper.GraphHopperTest.testPrepare":6,"com.graphhopper.storage.GraphStorageViaMMapTest.testInfinityWeight":116,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":357,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":261,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":364,"com.graphhopper.routing.util.BikeFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":430,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":295,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":349,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNormedDist":128,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":481,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":301,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":28,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":323,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":472,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":428,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":341,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":253,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":346,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":159,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":336,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":404,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":232,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":434,"com.graphhopper.GraphHopperTest.testNoNPE_ifLoadNotSuccessful":314,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":328,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":379,"com.graphhopper.GraphHopperTest.testLoadOSM":10,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":167,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":142,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":43,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":160,"com.graphhopper.routing.util.EncodingManagerTest.testEncoderAcceptNoException":501,"com.graphhopper.reader.OSMReaderTest.testSort":401,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":321,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":408,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":61,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":191,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":273,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":236,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":117,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":390,"com.graphhopper.routing.DijkstraTest.initializationError":548,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":418,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":327,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":228,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeReturn":75,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":250,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBits":545,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":189,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":339,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":277,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":58,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":202,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":527,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":197,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":466,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":154,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":238,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":82,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":258,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":354,"com.graphhopper.routing.util.FastestWeightingTest.testWeightWrongHeading":450,"com.graphhopper.GraphHopperTest.testFailsForMissingParameters":311,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":530,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":92,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":344,"com.graphhopper.coll.OSMIDMapTest.testGetLong":26,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":343,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":211,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":395,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":200,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":217,"com.graphhopper.routing.util.FootFlagEncoderTest.testRailPlatformIssue366":491,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdentical":194,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":263,"com.graphhopper.storage.GraphHopperStorageCHTest.testBigDataEdge":41,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":454,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSetSpeed0_issue367":521,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":174,"com.graphhopper.storage.GraphHopperStorageCHTest.testNoCreateCalled":44,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":208,"com.graphhopper.GraphHopperAPITest.testLoad":13,"com.graphhopper.routing.util.FootFlagEncoderTest.testBarrierAccess":485,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":255,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":245,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":198,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":324,"com.graphhopper.reader.OSMReaderTest.testBarriers":402,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testclassBicycle":528,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes":62,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_withCosts":19,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":88,"com.graphhopper.util.GHUtilityTest.testCopy":290,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":345,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":461,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testNoErrorOnEdgeCase_lastIndex":178,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAccess":482,"com.graphhopper.routing.PathTest.testFindInstruction":334,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPriority":477,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":199,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPreferenceForSlowSpeed":542,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":493,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":175,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":526,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":274,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":259,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":226,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":288,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":212,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":370,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":536,"com.graphhopper.routing.DijkstraBidirectionRefTest.initializationError":547,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":36,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":89,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":241,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":375,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":69,"com.graphhopper.storage.GraphHopperStorageCHTest.testBounds":70,"com.graphhopper.util.InstructionListTest.testWayList2":297,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":145,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":540,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":112,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":168,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":279,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":203,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":431,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":46,"com.graphhopper.storage.StorablePropertiesTest.testVersionCheck":185,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":231,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":429,"com.graphhopper.routing.util.FastestWeightingTest.testMinWeightHasSameUnitAs_getWeight":449,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetLocations":59,"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":237,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":325,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_withCosts":15,"com.graphhopper.routing.util.CarFlagEncoderTest.testMilitaryAccess":504,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":98,"com.graphhopper.storage.RAMDirectoryTest.testSynched":551,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":209,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":129,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":244,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":403,"com.graphhopper.storage.SynchedDAWrapperTest.testCopy":0,"com.graphhopper.routing.AStarTest.initializationError":544,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":360,"com.graphhopper.coll.OSMIDMapTest.testGet":23,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":206,"com.graphhopper.storage.UnsafeDataAccessTest.testCopy":3,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":71,"com.graphhopper.routing.PathBidirRefTest.testExtract":380,"com.graphhopper.routing.util.FootFlagEncoderTest.testAccess":494,"com.graphhopper.coll.OSMIDMapTest.testBinSearch":25,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTram":436,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":309,"com.graphhopper.storage.RAMDataAccessTest.testCopy":4,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":163,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":304,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnsureSize":38,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":111,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":234,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":308,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":151,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":307,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":110,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":306,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":469,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":305,"com.graphhopper.routing.util.BikeFlagEncoderTest.testBarrierAccess":427,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":173,"com.graphhopper.util.GHUtilityTest.testSort2":289,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":355,"com.graphhopper.reader.OSMReaderTest.testMain":400,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":508,"com.graphhopper.storage.GraphHopperStorageCHTest.testInfinityWeight":78,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":216,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPriority":437,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":73,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":72,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAccess":443,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":507,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":114,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBigDataEdge":193,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":316,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":60,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPriority":533,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":221,"com.graphhopper.storage.RAMIntDataAccessTest.testCopy":1,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":524,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":410,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":45,"com.graphhopper.storage.StorablePropertiesTest.testStore":183,"com.graphhopper.storage.GraphHopperStorageTest.testClone":247,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":280,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":113,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":515,"com.graphhopper.storage.GraphHopperStorageCHTest.testCheckFirstNode":68,"com.graphhopper.storage.RAMDirectoryTest.testNoDuplicates":186,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":257,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":513,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAccess":464,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":90,"com.graphhopper.routing.PathTest.testTime":330,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidMotorway":460,"com.graphhopper.util.InstructionListTest.testCreateGPX":425,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":52,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed":519,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNoErrorOnEdgeCase_lastIndex":133,"com.graphhopper.util.InstructionListTest.testRoundaboutJsonIntegrity":422,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":170,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":103,"com.graphhopper.reader.OSMReaderTest.testRelation":406,"com.graphhopper.util.GHUtilityTest.testSortDirected":292,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":57,"com.graphhopper.util.InstructionListTest.testCreateGPXWithEle":423,"com.graphhopper.storage.MMapDirectoryTest.testNoDuplicates":181,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":387,"com.graphhopper.GraphHopperTest.testFootOnly":12,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":144,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidTunnel":470,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":130,"com.graphhopper.routing.util.CarFlagEncoderTest.testRailway":510,"com.graphhopper.storage.RAMDirectoryTest.testNoErrorForDACreate":187,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":331,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":500,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":342,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":365,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":18,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":47,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":172,"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":99,"com.graphhopper.search.NameIndexTest.testCreate":285,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":394,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":162,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":383,"com.graphhopper.routing.QueryGraphTest.testOneWay":393,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":171,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":65,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTram":476,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSortHighLevelFirst":137,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeightMMap":416,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":158,"com.graphhopper.routing.util.EncodingManagerTest.testToDetailsStringIncludesEncoderVersionNumber":496,"com.graphhopper.reader.OSMReaderTest.testWithBounds":409,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAccess":539,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":96,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testInfinityWeight":230,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":318,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":388,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":105,"com.graphhopper.routing.util.FootFlagEncoderTest.testBasics":495,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":499,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":139,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testSacScale":452,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testReduceToMaxSpeed":537,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":483,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":122,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":220,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":127,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetAccess":511,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":115,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":213,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":243,"com.graphhopper.search.NameIndexTest.testFlush":283,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":391,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":340,"com.graphhopper.storage.GraphHopperStorageTest.testInfinityWeight":276,"com.graphhopper.util.InstructionListTest.testWayList":296,"com.graphhopper.routing.util.BikeFlagEncoderTest.testSacScale":426,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":55,"com.graphhopper.GraphHopperAPITest.testDisconnected179":397,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":91,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":312,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBounds":222,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":156,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":320,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPreferenceForSlowSpeed":446,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":86,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetSpeed0_issue367":512,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidTunnel":534,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":420,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdentical":42,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":322,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":49,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":102,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":506,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":119,"com.graphhopper.routing.util.BikeFlagEncoderTest.testReduceToMaxSpeed":441,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":7,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":249,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":131,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":223,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":229,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":225,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":224,"com.graphhopper.routing.util.FootFlagEncoderTest.handleWayTagsRoundabout":486,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":377,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_DefaultNoRestrictionsAndNoCosts":14,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":267,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":266,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":352,"com.graphhopper.routing.DijkstraOneToManyTest.initializationError":546,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":373,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_noCosts":16,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":147,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":148,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testSetSpeed0_issue367":448,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTram":457,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":442,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":195,"com.graphhopper.storage.GraphHopperStorageTest.testNoCreateCalled":242,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":362,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":445,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":235,"com.graphhopper.storage.MMapDataAccessTest.testCopy":2,"com.graphhopper.routing.PathTest.testWayList":333,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":118,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPriority":458,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":95,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":152,"com.graphhopper.routing.util.CarFlagEncoderTest.testFordAccess":509,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":54,"com.graphhopper.coll.OSMIDMapTest.testGet2":24,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":363,"com.graphhopper.reader.dem.HeightTileTest.testGetHeightForNegativeTile":413,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":157,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":347,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":384,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":141,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPropertiesWithNoInit":219,"com.graphhopper.storage.GraphHopperStorageCHTest.testPrios":29,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":440,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":260,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":33,"com.graphhopper.routing.util.FootFlagEncoderTest.testGetSpeed":487,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":204,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":248,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testBarrierAccess":523,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":335,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":455,"com.graphhopper.util.GHUtilityTest.testSort":291,"com.graphhopper.storage.GraphStorageViaMMapTest.testBounds":108,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":164,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":392,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":79,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidMotorway":439,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testBarrierAccess":475,"com.graphhopper.search.NameIndexTest.testPut":282,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNoCreateCalled":196,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":233,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":246,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":177,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":134,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":123,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":32,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":529,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":76,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":389,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":121,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":326,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":11,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":190,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":192,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testBarrierAccess":453,"com.graphhopper.storage.MMapDirectoryTest.testSynched":550,"com.graphhopper.reader.dem.HeightTileTest.testCalcMean":414,"com.graphhopper.routing.util.FastestWeightingTest.testSpeed0":451,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":9,"com.graphhopper.routing.util.FootFlagEncoderTest.testTurnFlagEncoding_noCostsAndRestrictions":492,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":214,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":361,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":317,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":37,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":109,"com.graphhopper.routing.PathTest.testFound":329,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":313,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":502,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":135,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPreferenceForSlowSpeed":484,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidTunnel":438,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":337,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":300,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":210,"com.graphhopper.search.NameIndexTest.testNoErrorOnLargeName":284,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":94,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":252,"com.graphhopper.util.InstructionListTest.testEmptyList":294,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":348,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testReduceToMaxSpeed":462,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":353,"com.graphhopper.routing.util.CarFlagEncoderTest.testSwapDir":518,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetToMaxSpeed":505,"com.graphhopper.routing.util.CarFlagEncoderTest.testBarrierAccess":503,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":262,"com.graphhopper.storage.GraphHopperStorageCHTest.testFlags":51,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":356,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":74,"com.graphhopper.reader.PrinctonReaderTest.testRead":419,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":275,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":53,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":205,"com.graphhopper.coll.OSMIDMapTest.testUpdateOfLowerKeys":27,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":93,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":218,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":83,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes2":48,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":382,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":215,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":479,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTram":532,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPreferenceForSlowSpeed":467,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidTunnel":459,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":525,"com.graphhopper.routing.util.BikeFlagEncoderTest.testclassBicycle":432,"com.graphhopper.reader.OSMReaderTest.testFoot":399,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":107,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":396,"com.graphhopper.reader.dem.HeightTileTest.testGetHeight":415,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":165,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testSacScale":468,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":80,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":166,"com.graphhopper.reader.OSMReaderTest.testOneWay":412,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":256,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":50,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":271,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":270,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":227,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidMotorway":478,"com.graphhopper.storage.GraphHopperStorageTest.testPropertiesWithNoInit":265,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":374,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSacScale":522,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":101,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":251,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":332,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":369,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":149,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":366,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":378,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":435,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxValue":514,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":124,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":367,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":299,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":315,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testclassBicycle":471,"com.graphhopper.storage.GraphHopperStorageTest.testIdentical":240,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":97,"com.graphhopper.routing.util.EncodingManagerTest.testSupportFords":497,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":77,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":386,"com.graphhopper.storage.GraphHopperStorageTest.testBigDataEdge":239,"com.graphhopper.reader.OSMReaderTest.testEstimatedCenter":411,"com.graphhopper.util.InstructionListTest.testRoundaboutJsonNaN":424,"com.graphhopper.storage.MMapDirectoryTest.testNoErrorForDACreate":182,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":34,"com.graphhopper.routing.PathBidirRefTest.testExtract2":381,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":132,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":338,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":143,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":169,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":180,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":463,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":155,"com.graphhopper.search.NameIndexTest.testTooLongNameNoError":281,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":269,"com.graphhopper.storage.index.Location2IDFullIndexTest.testNoErrorOnEdgeCase_lastIndex":125,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":63,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":465,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":21,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":136,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":120,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":489,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":126,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":359,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":372,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidMotorway":535,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":30,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":161,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":81,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":272,"com.graphhopper.util.GHUtilityTest.testEdgeStuff":421,"com.graphhopper.routing.util.CarFlagEncoderTest.testRegisterOnlyOnceAllowed":516,"com.graphhopper.GraphHopperTest.testFootAndCar":8,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":264,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":531,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":39,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":456,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":87,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibility":498,"com.graphhopper.routing.util.CarFlagEncoderTest.testOneway":517,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_withCosts":17,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":371,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":140,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":351,"com.graphhopper.storage.GraphHopperStorageCHTest.testPropertiesWithNoInit":67,"com.graphhopper.storage.StorablePropertiesTest.testLoad":184,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":201,"com.graphhopper.GraphHopperTest.testPrepareOnly":303,"com.graphhopper.GraphHopperTest.testVia":5,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":179,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":20,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":444,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":85,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":350,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":407,"com.graphhopper.reader.OSMReaderTest.testTurnFlagCombination":22,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":150,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":138,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":35,"com.graphhopper.storage.GraphHopperStorageTest.testBounds":268,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":298,"com.graphhopper.routing.util.FootFlagEncoderTest.testCombined":490,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":405,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":146,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":56,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":100,"com.graphhopper.routing.AStarBidirectionTest.initializationError":543,"com.graphhopper.util.InstructionListTest.testFind":293,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":447,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":188},"transformations":[{"failures":[0,1,2,3,4],"tindex":"680e96bf-82c6-11e5-9042-330c60eae1d2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:132","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < ((int[].int) * 4) ; int += 4) {\n    com.graphhopper.storage.DataAccess.setHeader(int, com.graphhopper.storage.AbstractDataAccess.getHeader(int));\n}"},"status":-1},{"failures":[5,6,7,8,9,10,11,12,13],"tindex":"680ebdd0-82c6-11e5-9042-a3b32abde680","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PathMerger:116","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GHResponse.addError(new java.lang.RuntimeException(\"Connection between locations not found\"))"},"variableMap":{"rsp":"rsp"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:119","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GHResponse.setPoints(com.graphhopper.util.PointList)"},"status":-1},{"failures":[],"tindex":"680ebdd1-82c6-11e5-9042-c14833da67cf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1146","type":"CtInvocationImpl","sourcecode":"org.slf4j.Logger.info(((((((\"flushing graph \" + (com.graphhopper.storage.GraphHopperStorage.toString())) + \", details:\") + (com.graphhopper.storage.GraphHopperStorage.toDetailsString())) + \", \") + (com.graphhopper.util.Helper.getMemInfo())) + \")\"))"},"status":0},{"failures":[],"tindex":"680ebdd2-82c6-11e5-9042-fb1413818163","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:65","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:175","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = com.graphhopper.util.InstructionList.(getSize()) > 0 ? com.graphhopper.util.InstructionList.get(0).getPoints().is3D() : false"},"status":-2},{"failures":[14,15,16,17,18,19,20,21,22],"tindex":"680ebdd3-82c6-11e5-9042-b753851921ce","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:362","type":"CtIfImpl","sourcecode":"if (int == int)\n    return true;\n"},"variableMap":{"baseNode":"maxTurnCosts","id":"maxTurnCosts"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:631","type":"CtIfImpl","sourcecode":"if ((int) == 0)\n    return false;\nelse if ((int) == 1)\n    return (long & (long)) != 0;\n"},"status":-1},{"failures":[],"tindex":"680ebdd4-82c6-11e5-9042-8fe3b9d4045b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:131","type":"CtIfImpl","sourcecode":"if (int > 100)\n    throw new java.lang.IllegalArgumentException(\"lazyUpdates has to be in [0, 100], to disable it use 0\");\n"},"variableMap":{"lazyUpdates":"edgeFrom"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:444","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMRelation.hasTag(\"type\", \"restriction\")) {\n    com.graphhopper.reader.OSMTurnRelation com.graphhopper.reader.OSMTurnRelation = com.graphhopper.reader.OSMReader.createTurnRelation(com.graphhopper.reader.OSMRelation);\n    if (com.graphhopper.reader.OSMTurnRelation != null) {\n        com.graphhopper.storage.GraphExtension com.graphhopper.storage.GraphExtension = com.graphhopper.storage.Graph.getExtension();\n        if (com.graphhopper.storage.GraphExtension instanceof com.graphhopper.storage.TurnCostExtension) {\n            com.graphhopper.storage.TurnCostExtension com.graphhopper.storage.TurnCostExtension = ((com.graphhopper.storage.TurnCostExtension)(com.graphhopper.storage.GraphExtension));\n            java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry> java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry> = com.graphhopper.reader.OSMReader.analyzeTurnRelation(com.graphhopper.reader.OSMTurnRelation);\n            for (com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry : java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>) {\n                com.graphhopper.storage.TurnCostExtension.addTurnInfo(com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int, com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int, com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int, com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.long);\n            }\n        } \n    } \n} "},"status":-2},{"failures":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,5,6,7,8,9,10,311,312,11,12,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,382,383,383,20,20,384,384,385,385,386,386,387,387,388,388,389,389,390,390,391,391,392,392,393,393,394,394,395,395,396,396,13,397,398,399,400,401,402,403,404,21,405,406,22,407,408,409,410,411,412,413,414,415,416,417,418,419,420],"tindex":"680ee4e5-82c6-11e5-9042-0f89ff6ebfe3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:90","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.DAType == null)\n    com.graphhopper.storage.DAType = com.graphhopper.storage.DAType;\n"},"status":-1},{"failures":[],"tindex":"680ee4e6-82c6-11e5-9042-7ff0899f8366","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.QueryGraph:376","type":"CtIfImpl","sourcecode":"if (java.lang.Double.isNaN(double))\n    return false;\n"},"variableMap":{"favoredHeading":"queryLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:739","type":"CtIfImpl","sourcecode":"if ((int % 2) == 1) {\n    if (!(gnu.trove.set.hash.TIntHashSet.isEmpty())) {\n        double double = com.graphhopper.storage.index.LocationIndexTree.calculateRMin(double, double, int);\n        double double = com.graphhopper.storage.index.LocationIndexTree.calcMinDistance(double, double, gnu.trove.set.hash.TIntHashSet);\n        if (double < double)\n            return true;\n        \n    } \n} "},"status":0},{"failures":[],"tindex":"680f0bf7-82c6-11e5-9042-7bf1d517e490","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:106","type":"CtAssignmentImpl","sourcecode":"this.com.graphhopper.storage.GraphHopperStorage = com.graphhopper.storage.GraphHopperStorage"},"variableMap":{"ghStorage":"graph","g":"graph"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphBuilder:114","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.GraphHopperStorage = new com.graphhopper.storage.GraphHopperStorage(java.util.Arrays.asList(com.graphhopper.routing.util.Weighting) , com.graphhopper.storage.Directory , com.graphhopper.routing.util.EncodingManager , boolean , new com.graphhopper.storage.GraphExtension.NoOpExtension())"},"status":-2},{"failures":[],"tindex":"680f0bf8-82c6-11e5-9042-45828548028c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:191","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(5)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:284","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.MMapDataAccess.close(true)"},"status":-2},{"failures":[],"tindex":"680f0bf9-82c6-11e5-9042-33c843f350ac","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:447","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:312","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.CHGraphImpl.close()"},"status":0},{"failures":[],"tindex":"680f0bfa-82c6-11e5-9042-17e296120468","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedValue:48","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.EncodedValue.this(java.lang.String, int, int, double, long, int, true)"},"status":-2},{"failures":[12,400,403,404,409],"tindex":"680f0bfb-82c6-11e5-9042-71c760a35c83","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:173","type":"CtIfImpl","sourcecode":"if (double > 100)\n    throw new java.lang.IllegalArgumentException(\"setNodesContracted can be 100% maximum\");\n"},"variableMap":{"nodesContracted":"ele"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:842","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.PointList.is3D())\n    com.graphhopper.util.PointList.add(double, double, double);\nelse\n    com.graphhopper.util.PointList.add(double, double);\n"},"status":-1},{"failures":[28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,286,287,288,289,290,291,421,292,293,294,422,295,296,423,424,425,297,298,299,300,301,302,303,304,305,306,307,308,309,310,5,6,7,8,9,10,311,312,11,12,313,314,426,14,427,428,429,430,431,432,433,434,435,15,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,315,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,16,516,517,17,518,519,316,317,318,319,320,321,322,323,324,520,521,325,326,522,18,523,524,525,526,527,528,529,530,531,19,532,533,534,535,536,537,538,539,540,541,542,327,328,329,330,331,332,333,334,335,336,543,544,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,545,366,367,368,369,370,371,372,373,374,375,376,377,378,379,546,547,548,380,381,382,382,383,383,20,20,384,384,385,385,386,386,387,387,388,388,389,389,390,390,391,391,392,392,393,393,394,394,395,395,396,396,13,397,549,398,399,400,401,402,403,404,21,405,406,22,407,408,409,410,411,412,418,419,420],"tindex":"680f330c-82c6-11e5-9042-a1d47ac8afe0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:209","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>.add(com.graphhopper.routing.util.AbstractFlagEncoder)"},"status":-1},{"failures":[],"tindex":"680f5a1d-82c6-11e5-9042-8102ccc6b177","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PMap:54","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.trim()"},"variableMap":{"s":"hourStr"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:494","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(0, int)"},"status":0},{"failures":[],"tindex":"680f5a1e-82c6-11e5-9042-1b985a61059b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:177","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"UTF-8\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:352","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"highway\")"},"status":-2},{"failures":[302,303,310,5,6,7,8,9,10,312,11,12,313,398,399,400,401,402,403,404,405,407,408,409,410,412],"tindex":"680f5a1f-82c6-11e5-9042-6d1cfcb74150","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:57","type":"CtIfImpl","sourcecode":"if (long <= (long)) {\n    throw new java.lang.IllegalStateException((((\"Not supported: key \" + long) + \" is lower than last one \") + (long)));\n} "},"variableMap":{"lastKey":"nodeFlags","key":"nodeFlags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:572","type":"CtIfImpl","sourcecode":"if (long != 0)\n    com.graphhopper.reader.OSMReader.getNodeFlagsMap().put(com.graphhopper.reader.OSMNode.getId(), long);\n"},"status":-1},{"failures":[510,515,398],"tindex":"680f5a20-82c6-11e5-9042-e35a0cd6c079","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:251","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"railway\", \"platform\"))\n    return long;\n"},"variableMap":{"acceptBit":"ferryBit","way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:188","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"route\", java.util.Set<java.lang.String>)) {\n    java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motorcar\");\n    if (java.lang.String == null)\n        java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motor_vehicle\");\n    \n    if ((((java.lang.String == null) && (!(com.graphhopper.reader.OSMWay.hasTag(\"foot\")))) && (!(com.graphhopper.reader.OSMWay.hasTag(\"bicycle\")))) || (\"yes\".equals(java.lang.String)))\n        return (long) | (long);\n    \n} "},"status":-1},{"failures":[5,6,7,8,9,10,11,12,13],"tindex":"680f8131-82c6-11e5-9042-2d982d1c0fe2","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PathMerger:116","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GHResponse.addError(new java.lang.RuntimeException(\"Connection between locations not found\"))"},"variableMap":{"rsp":"rsp"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:119","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GHResponse.setPoints(com.graphhopper.util.PointList).setRouteWeight(double).setDistance(double).setTime(long)"},"status":-1},{"failures":[550,551],"tindex":"680f8132-82c6-11e5-9042-07cb38d01f05","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.DAType:140","type":"CtReturnImpl","sourcecode":"return boolean"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"680ee4e6-82c6-11e5-9042-7ff0899f8366","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.index.LocationIndexTree.calcMinDistance","com.graphhopper.storage.index.LocationIndexTree.calculateRMin","gnu.trove.impl.hash.THash.isEmpty"]},"branchesDiff":{"delete":["t0","t1","t2"]},"type":"staticDiff"},{"branches":{"com.graphhopper.reader.OSMReaderTest.testBarriers":["com.graphhopper.geohash.SpatialKeyAlgo_long_encode(com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.util.shapes.GHPoint_com.graphhopper.util.shapes.GHPoint().b","com.graphhopper.util.DistancePlaneProjection_double_calcDist(double,double,double,double).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).l4","com.graphhopper.storage.GHNodeAccess_double_getLon(int).b","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).b","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).l2","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t3","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).e1","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).b","com.graphhopper.storage.GHNodeAccess_double_getLat(int).b","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e3","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e2","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).t1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t2","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.GraphHopperAPITest.testLoad":["com.graphhopper.geohash.SpatialKeyAlgo_long_encode(com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.util.shapes.GHPoint_com.graphhopper.util.shapes.GHPoint().b","com.graphhopper.util.DistancePlaneProjection_double_calcDist(double,double,double,double).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).l4","com.graphhopper.storage.GHNodeAccess_double_getLon(int).b","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).b","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).l2","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t2","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t3","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).e1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e2","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).b","com.graphhopper.storage.GHNodeAccess_double_getLat(int).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e3","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e2","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).t1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t2","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t1","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":["com.graphhopper.geohash.SpatialKeyAlgo_long_encode(com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.util.shapes.GHPoint_com.graphhopper.util.shapes.GHPoint().b","com.graphhopper.util.DistancePlaneProjection_double_calcDist(double,double,double,double).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).l4","com.graphhopper.storage.GHNodeAccess_double_getLon(int).b","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).b","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).l2","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e2","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).b","com.graphhopper.storage.GHNodeAccess_double_getLat(int).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e3","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e2","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).t1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t1","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":["com.graphhopper.geohash.SpatialKeyAlgo_long_encode(com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.util.shapes.GHPoint_com.graphhopper.util.shapes.GHPoint().b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).l4","com.graphhopper.storage.GHNodeAccess_double_getLon(int).b","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).b","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).l2","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t2","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t1","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).e1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e2","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).b","com.graphhopper.storage.GHNodeAccess_double_getLat(int).b","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e3","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e2","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).t1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t2","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":["com.graphhopper.geohash.SpatialKeyAlgo_long_encode(com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.util.shapes.GHPoint_com.graphhopper.util.shapes.GHPoint().b","com.graphhopper.util.DistancePlaneProjection_double_calcDist(double,double,double,double).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).l4","com.graphhopper.storage.GHNodeAccess_double_getLon(int).b","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).b","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).l2","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t3","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).e1","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).b","com.graphhopper.storage.GHNodeAccess_double_getLat(int).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.storage.index.LocationIndexTree_void_fillIDs(long,int,gnu.trove.set.hash.TIntHashSet,int).e3","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e3","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e2","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).t1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t2","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t1","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":["com.graphhopper.geohash.SpatialKeyAlgo_long_encode(com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.util.shapes.GHPoint_com.graphhopper.util.shapes.GHPoint().b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).l4","com.graphhopper.storage.GHNodeAccess_double_getLon(int).b","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).b","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).l2","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t2","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t1","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).e1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e2","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).b","com.graphhopper.storage.GHNodeAccess_double_getLat(int).b","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e3","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e2","com.graphhopper.storage.index.LocationIndexTree_double_calcMinDistance(double,double,gnu.trove.set.hash.TIntHashSet).t1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t1","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"]},"type":"branch"}]},{"transformation":"680ebdd1-82c6-11e5-9042-c14833da67cf","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.GraphHopperStorage.toString","com.graphhopper.util.Helper.getMemInfo","com.graphhopper.storage.GraphHopperStorage.toDetailsString","org.slf4j.Logger.info"]},"type":"staticDiff"},{"branches":{"com.graphhopper.reader.OSMReaderTest.testNegativeIds":["com.graphhopper.storage.StorableProperties_java.lang.String_get(java.lang.String).e1"],"com.graphhopper.GraphHopperTest.testFootAndCar":["com.graphhopper.storage.StorableProperties_java.lang.String_get(java.lang.String).e1"]},"type":"branch"}]},{"transformation":"680f0bf9-82c6-11e5-9042-33c843f350ac","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.CHGraphImpl.close"]},"type":"staticDiff"},{"branches":{"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":["com.graphhopper.storage.CHGraphImpl_void_close().b"],"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":["com.graphhopper.storage.CHGraphImpl_void_close().b"],"com.graphhopper.GraphHopperTest.testLoadOSM":["com.graphhopper.storage.CHGraphImpl_void_close().b"]},"type":"branch"}]}]}
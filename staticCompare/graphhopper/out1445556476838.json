{"failureDictionary":{"com.graphhopper.GraphHopperTest.testLoadOSM":5,"com.graphhopper.util.PointListTest.testAddPL":8,"com.graphhopper.GraphHopperAPITest.testLoad":9,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":4,"com.graphhopper.GraphHopperTest.testFootOnly":7,"com.graphhopper.GraphHopperTest.testPrepare":1,"com.graphhopper.GraphHopperTest.testVia":0,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":2,"com.graphhopper.GraphHopperTest.testFootAndCar":3,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":6},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9],"tindex":"8690790c-7914-11e5-ac2e-5b212f0192ee","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:350","type":"CtIfImpl","sourcecode":"if (boolean)\n    for (int int = 0 ; int < (int) ; int++) {\n        com.graphhopper.util.PointList.add(double[][int], double[][int], double[][int]);\n    }\nelse\n    for (int int = 0 ; int < (int) ; int++) {\n        com.graphhopper.util.PointList.add(double[][int], double[][int]);\n    }\n"},"variableMap":{"size":"size","longitudes":"elevations","is3D":"is3D","clonePL":"points","latitudes":"longitudes","elevations":"latitudes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:157","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (com.graphhopper.util.PointList.getSize()) ; int++) {\n    int int = (int) + int;\n    double[][int] = com.graphhopper.util.PointList.getLatitude(int);\n    double[][int] = com.graphhopper.util.PointList.getLongitude(int);\n    if (boolean)\n        double[][int] = com.graphhopper.util.PointList.getElevation(int);\n    \n}"},"status":-1},{"failures":[],"tindex":"8690790d-7914-11e5-ac2e-bf319aaa19d9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:615","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.util.EdgeFilter.accept(com.graphhopper.util.EdgeIteratorState))\n    com.graphhopper.routing.VirtualEdgeIterator.add(com.graphhopper.util.EdgeIteratorState);\n"},"status":-2},{"failures":[],"tindex":"8690a01e-7914-11e5-ac2e-519c5a8a1341","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.QueryGraph:343","type":"CtForImpl","sourcecode":"for (int int = int ; int < int ; int++) {\n    com.graphhopper.util.PointList.add(com.graphhopper.util.PointList, int);\n}"},"variableMap":{"max":"i","fullPL":"clonePL","prevWayIndex":"i","basePoints":"clonePL"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:353","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(double[][int], double[][int], double[][int])"},"status":-2},{"failures":[],"tindex":"8690a01f-7914-11e5-ac2e-0dabea82e53e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Instruction:166","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.util.PointList.size()"},"variableMap":{"points":"pointList"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:761","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.util.PointList.getSize()"},"status":-2},{"failures":[],"tindex":"8690a020-7914-11e5-ac2e-1732dbb2d924","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.EdgeAccess:52","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"variableMap":{"flagsSizeIsLong":"alreadyRun"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AbstractRoutingAlgorithm:90","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":-2},{"failures":[],"tindex":"8690a021-7914-11e5-ac2e-115da5955dce","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MountainBikeFlagEncoder:167","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(90.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\nelse if (java.lang.String.startsWith(\"grade\"))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(100.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"status":-2},{"failures":[],"tindex":"8690a022-7914-11e5-ac2e-07ae1897f97e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:571","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt(long, 0)"},"variableMap":{"dataAccess":"nodes","refPointer":"nodeCap"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:621","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.trimTo(long)"},"status":-2},{"failures":[],"tindex":"8690a023-7914-11e5-ac2e-690534e62f68","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.CarFlagEncoder:188","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"route\", java.util.Set<java.lang.String>)) {\n    java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motorcar\");\n    if (java.lang.String == null)\n        java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"motor_vehicle\");\n    \n    if ((((java.lang.String == null) && (!(com.graphhopper.reader.OSMWay.hasTag(\"foot\")))) && (!(com.graphhopper.reader.OSMWay.hasTag(\"bicycle\")))) || (\"yes\".equals(java.lang.String)))\n        return (long) | (long);\n    \n} "},"variableMap":{"acceptBit":"acceptBit","ferryBit":"ferryBit","ferries":"ferries","way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:207","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    if (com.graphhopper.reader.OSMWay.hasTag(\"route\", java.util.Set<java.lang.String>)) {\n        java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"foot\");\n        if ((java.lang.String == null) || (\"yes\".equals(java.lang.String)))\n            return (long) | (long);\n        \n    } \n    if (com.graphhopper.reader.OSMWay.hasTag(\"railway\", \"platform\"))\n        return long;\n    \n    return 0;\n} "},"status":-2},{"failures":[],"tindex":"8690c734-7914-11e5-ac2e-79a51b2904b6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DouglasPeucker:70","type":"CtLocalVariableImpl","sourcecode":"int int = 500"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:246","type":"CtLocalVariableImpl","sourcecode":"int int = -1"},"status":-2},{"failures":[],"tindex":"8690c735-7914-11e5-ac2e-afefb25f918a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:256","type":"CtAssignmentImpl","sourcecode":"int = -1"},"variableMap":{"E_ADDITIONAL":"to"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:69","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-2},{"failures":[],"tindex":"8690c736-7914-11e5-ac2e-a5197566d5f6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:417","type":"CtAssignmentImpl","sourcecode":"double = double[][int]"},"status":-2},{"failures":[],"tindex":"8690c737-7914-11e5-ac2e-a9f0ce2ad1e9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:203","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.routing.ch.PrepareContractionHierarchies.(prepareNodes()))\n    return ;\n"},"variableMap":{"this":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMNode:87","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null)\n    java.lang.Object = null;\nelse if (java.lang.Object instanceof java.lang.String) {\n    java.lang.String java.lang.String = ((java.lang.String)(java.lang.Object));\n    java.lang.String = java.lang.String.trim().replaceAll(\"\\\\,\", \".\");\n    if (java.lang.String.isEmpty())\n        java.lang.Object = null;\n    else\n        try {\n            java.lang.Object = java.lang.Double.parseDouble(java.lang.String);\n        } catch (java.lang.NumberFormatException ex) {\n            return ;\n        }\n    \n} else\n    java.lang.Object = ((java.lang.Number)(java.lang.Object)).doubleValue();\n"},"status":-2},{"failures":[],"tindex":"8690c738-7914-11e5-ac2e-e35dbbcc2ef2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:99","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(com.graphhopper.util.PointList)"},"status":-2},{"failures":[],"tindex":"8690c739-7914-11e5-ac2e-ebb50a625f84","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:111","type":"CtIfImpl","sourcecode":"if ((int) <= 0) {\n    throw new java.lang.IllegalStateException(\"An empty queue does not have a minimum value.\");\n} "},"variableMap":{"size":"x1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:126","type":"CtWhileImpl","sourcecode":"while (true) {\n    com.graphhopper.storage.index.PointEmitter.set(int, int);\n    if ((int == int) && (int == int))\n        break;\n    \n    int int = 2 * int;\n    if (int > (-int)) {\n        int -= int;\n        int += int;\n    } \n    if (int < int) {\n        int += int;\n        int += int;\n    } \n}"},"status":-2},{"failures":[],"tindex":"8690ee4a-7914-11e5-ac2e-0b118b001499","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:631","type":"CtReturnImpl","sourcecode":"return (long & (long)) != 0"},"status":-2},{"failures":[],"tindex":"8690ee4b-7914-11e5-ac2e-6b8ad1b7a815","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.RacingBikeFlagEncoder:157","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(110.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"variableMap":{"weightToPrioMap":"weightToPrioMap","com.graphhopper.routing.util.PriorityCode.PREFER":"com.graphhopper.routing.util.PriorityCode.UNCHANGED"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:556","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(100.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"status":-2},{"failures":[],"tindex":"8690ee4c-7914-11e5-ac2e-b5d82d37bdf9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:623","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setHeader((1 * 4), int)"},"status":-2},{"failures":[],"tindex":"8690ee4d-7914-11e5-ac2e-05d4b4479154","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:361","type":"CtOperatorAssignmentImpl","sourcecode":"double += com.graphhopper.util.StopWatch.getSeconds()"},"status":-2},{"failures":[],"tindex":"8690ee4e-7914-11e5-ac2e-575f2d0dea9c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:52","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.Path.getTime()"},"status":-2},{"failures":[],"tindex":"8690ee4f-7914-11e5-ac2e-336805a1db90","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtilBig:91","type":"CtIfImpl","sourcecode":"if ((int % 8) != 0)\n    int++;\n"},"variableMap":{"strLen":"foundInstruction","bLen":"foundInstruction"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:295","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < com.graphhopper.util.InstructionList.(getSize()) ; int++) {\n    com.graphhopper.util.PointList = com.graphhopper.util.InstructionList.get(int).getPoints();\n    for (int int = 0 ; int < (com.graphhopper.util.PointList.size()) ; int++) {\n        double double = com.graphhopper.util.PointList.getLatitude(int);\n        double double = com.graphhopper.util.PointList.getLongitude(int);\n        if (!((int == 0) && (int == 0))) {\n            double double;\n            int int = int;\n            if (com.graphhopper.util.DistanceCalc.validEdgeDistance(double, double, double, double, double, double)) {\n                double = com.graphhopper.util.DistanceCalc.calcNormalizedEdgeDistance(double, double, double, double, double, double);\n                if (int > 0)\n                    int++;\n                \n            } else {\n                double = com.graphhopper.util.DistanceCalc.calcNormalizedDist(double, double, double, double);\n                if (int > 0)\n                    int++;\n                \n            }\n            if (double < double) {\n                double = double;\n                int = int;\n            } \n        } \n        double = double;\n        double = double;\n    }\n}"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
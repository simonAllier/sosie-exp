{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":15,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":165,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":214,"com.graphhopper.search.NameIndexTest.testCreate":236,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":174,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":61,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":79,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":1,"com.graphhopper.reader.OSMReaderTest.testFerry":128,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":123,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":124,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":162,"com.graphhopper.storage.GraphHopperStorageCHTest.testDoThrowExceptionIfDimDoesNotMatch":261,"com.graphhopper.routing.QueryGraphTest.testOneWay":173,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":286,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSortHighLevelFirst":266,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":57,"com.graphhopper.reader.OSMReaderTest.testWithBounds":139,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":22,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":12,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":151,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":168,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":152,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":21,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":240,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":257,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":181,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":20,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":46,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":92,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":284,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":84,"com.graphhopper.storage.RAMDataAccessTest.testRenameNoFlush":274,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":88,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":189,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":263,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":30,"com.graphhopper.GraphHopperTest.testPrepare":287,"com.graphhopper.storage.GraphStorageViaMMapTest.testInfinityWeight":31,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":213,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":251,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":177,"com.graphhopper.search.NameIndexTest.testFlush":234,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":171,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":196,"com.graphhopper.util.InstructionListTest.testWayList":115,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":114,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":205,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":112,"com.graphhopper.GraphHopperAPITest.testDisconnected179":109,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":156,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":232,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":8,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":291,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":55,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":153,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":3,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":197,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":202,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":58,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":126,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":231,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":134,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":155,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":238,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":223,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":18,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":34,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":148,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":74,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":249,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":192,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":248,"com.graphhopper.GraphHopperTest.testLoadOSM":290,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":66,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":190,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":95,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":59,"com.graphhopper.reader.OSMReaderTest.testSort":131,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":208,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":138,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":154,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":245,"com.graphhopper.storage.SynchedDAWrapperTest.testRenameFlush":268,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":43,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":186,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":100,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":101,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":32,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":170,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":218,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":127,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":42,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":222,"com.graphhopper.routing.PathTest.testWayList":228,"com.graphhopper.storage.MMapDataAccessTest.testCopy":296,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":33,"com.graphhopper.storage.MMapDataAccessTest.textMixRAM2MMAP":255,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":11,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":105,"com.graphhopper.coll.OSMIDMapTest.testGet2":280,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":219,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":37,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":195,"com.graphhopper.reader.dem.HeightTileTest.testGetHeightForNegativeTile":276,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":56,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":164,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":203,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":239,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":94,"com.graphhopper.storage.GraphHopperStorageCHTest.testPrios":256,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":246,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":48,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":106,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":44,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":210,"com.graphhopper.storage.RAMDataAccessTest.testRenameFlush":273,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":230,"com.graphhopper.util.GHUtilityTest.testSort":121,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":9,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":63,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":172,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":200,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":199,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":241,"com.graphhopper.coll.OSMIDMapTest.testGetLong":282,"com.graphhopper.search.NameIndexTest.testPut":233,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":175,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":80,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":76,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":85,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":258,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":169,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":83,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":160,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":38,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":292,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":39,"com.graphhopper.storage.GraphHopperStorageCHTest.testBigDataEdge":53,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":77,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":41,"com.graphhopper.GraphHopperAPITest.testLoad":108,"com.graphhopper.reader.dem.HeightTileTest.testCalcMean":277,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":289,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":217,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":150,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":260,"com.graphhopper.reader.OSMReaderTest.testBarriers":132,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":157,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":24,"com.graphhopper.routing.PathTest.testFound":224,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":294,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":89,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":5,"com.graphhopper.util.GHUtilityTest.testCopy":120,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":201,"com.graphhopper.routing.PathTest.testFindInstruction":229,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":193,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":111,"com.graphhopper.search.NameIndexTest.testNoErrorOnLargeName":235,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":10,"com.graphhopper.util.InstructionListTest.testEmptyList":295,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":204,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":78,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":209,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":118,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":212,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":183,"com.graphhopper.reader.PrinctonReaderTest.testRead":125,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":254,"com.graphhopper.coll.OSMIDMapTest.testUpdateOfLowerKeys":283,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":247,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":0,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":259,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":6,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":161,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":188,"com.graphhopper.util.InstructionListTest.testWayList2":116,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":98,"com.graphhopper.reader.OSMReaderTest.testFoot":129,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":27,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":23,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":67,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":176,"com.graphhopper.reader.dem.HeightTileTest.testGetHeight":278,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":64,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":65,"com.graphhopper.reader.OSMReaderTest.testOneWay":141,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":242,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":237,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":159,"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":250,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":253,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":14,"com.graphhopper.storage.SynchedDAWrapperTest.testSegments":270,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":187,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":72,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":17,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":133,"com.graphhopper.storage.SynchedDAWrapperTest.testCopy":267,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":227,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":182,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":102,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":216,"com.graphhopper.coll.OSMIDMapTest.testGet":279,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":179,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":191,"com.graphhopper.storage.UnsafeDataAccessTest.testCopy":297,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":86,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":180,"com.graphhopper.routing.PathBidirRefTest.testExtract":220,"com.graphhopper.coll.OSMIDMapTest.testBinSearch":281,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":110,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":147,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":158,"com.graphhopper.storage.RAMDataAccessTest.testCopy":272,"com.graphhopper.storage.SynchedDAWrapperTest.testRenameNoFlush":269,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":62,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":142,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":26,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnsureSize":51,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":146,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":104,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":145,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":25,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":144,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":143,"com.graphhopper.storage.RAMDataAccessTest.testSegments":275,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":71,"com.graphhopper.util.GHUtilityTest.testSort2":119,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":211,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":13,"com.graphhopper.reader.OSMReaderTest.testMain":130,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":166,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":265,"com.graphhopper.storage.GraphHopperStorageTest.testBigDataEdge":45,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":49,"com.graphhopper.routing.PathBidirRefTest.testExtract2":221,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":264,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":75,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":29,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBigDataEdge":40,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":194,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":96,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":68,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":82,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":149,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":107,"com.graphhopper.search.NameIndexTest.testTooLongNameNoError":244,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":90,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":135,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":35,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":140,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":87,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":215,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":262,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":185,"com.graphhopper.storage.StorablePropertiesTest.testStore":271,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":47,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":60,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":28,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":252,"com.graphhopper.GraphHopperTest.testFootAndCar":288,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":52,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":7,"com.graphhopper.routing.PathTest.testTime":225,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":4,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":184,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":69,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":93,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":19,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":207,"com.graphhopper.util.GHUtilityTest.testSortDirected":122,"com.graphhopper.GraphHopperTest.testPrepareOnly":285,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":81,"com.graphhopper.GraphHopperTest.testVia":243,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":163,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":2,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":206,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":137,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":103,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":91,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":50,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":167,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":117,"com.graphhopper.GraphHopperTest.testFootOnly":293,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":97,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":136,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":73,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":99,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":16,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":54,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":226,"com.graphhopper.util.InstructionListTest.testFind":113,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":198,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":178,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":36,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":70},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231],"tindex":"438a6543-8286-11e5-8e25-c72889bedf48","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:393","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.create(long)"},"status":-1},{"failures":[232,187,188,191],"tindex":"438ab364-8286-11e5-8e25-0d3488478fb5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:461","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.EdgeAccess.internalEdgeDisconnect(com.graphhopper.util.EdgeIteratorState.getEdge(), long, com.graphhopper.util.EdgeIteratorState.getAdjNode(), com.graphhopper.util.EdgeIteratorState.getBaseNode())"},"status":-1},{"failures":[],"tindex":"438ab365-8286-11e5-8e25-f146c17e3dea","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:277","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.equals(java.lang.String)))\n    throw new java.lang.IllegalStateException((((\"Configured graph.chWeightings: \" + java.lang.String) + \" is not equal to loaded \") + java.lang.String));\n"},"variableMap":{"loadedCHWeightings":"locale","configuredCHWeightings":"locale"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.TranslationMap:122","type":"CtIfImpl","sourcecode":"if ((java.lang.String.contains(\"_\")) && (com.graphhopper.util.Translation == null))\n    com.graphhopper.util.Translation = java.util.Map<java.lang.String, com.graphhopper.util.Translation>.get(java.lang.String.substring(0, 2));\n"},"status":0},{"failures":[],"tindex":"438ab366-8286-11e5-8e25-17b97fc11343","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:235","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"\\n<rtept lat=\\\"\").append(com.graphhopper.util.Helper.round6(com.graphhopper.util.Instruction.getFirstLat())).append(\"\\\" lon=\\\"\")"},"status":0},{"failures":[],"tindex":"438ab367-8286-11e5-8e25-415806e31b7a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:717","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.contains(\".\"))) {\n    if (new java.io.File((java.lang.String + \"-gh\")).exists())\n        java.lang.String += \"-gh\";\n    \n} else {\n    java.io.File java.io.File = new java.io.File((java.lang.String + \".ghz\"));\n    if ((java.io.File.exists()) && (!(java.io.File.isDirectory()))) {\n        try {\n            new com.graphhopper.util.Unzipper().unzip(java.io.File.getAbsolutePath(), java.lang.String, boolean);\n        } catch (java.io.IOException ex) {\n            throw new java.lang.RuntimeException((((\"Couldn\\'t extract file \" + (java.io.File.getAbsolutePath())) + \" to \") + java.lang.String) , java.io.IOException);\n        }\n    } \n}"},"status":0},{"failures":[233,234,235,236,32,33,36,237,238,43,239,240,52,241,242,113,114,115,116,117,130,243,222,223,224,225,226,227,228,229,230,231],"tindex":"438ada78-8286-11e5-8e25-cdbf1238fd70","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:72","type":"CtOperatorAssignmentImpl","sourcecode":"long *= 4"},"variableMap":{"oldValueIndex":"bytePointer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.search.NameIndex:87","type":"CtUnaryOperatorImpl","sourcecode":"(long)++"},"status":-1},{"failures":[36,135,163],"tindex":"438ada79-8286-11e5-8e25-718df71f2fa3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHNodeAccess:117","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.storage.BaseGraph.com.graphhopper.storage.GraphExtension.isRequireNodeField()) && ((com.graphhopper.storage.BaseGraph.int) >= 0)) {\n    com.graphhopper.storage.BaseGraph.ensureNodeIndex(int);\n    long long = ((long)(int)) * (com.graphhopper.storage.BaseGraph.int);\n    com.graphhopper.storage.BaseGraph.com.graphhopper.storage.DataAccess.setInt((long + (com.graphhopper.storage.BaseGraph.int)), int);\n} else {\n    throw new java.lang.AssertionError(\"This graph does not provide an additional node field\");\n}"},"status":-1},{"failures":[244,233,234,235,236,36,245,39,246,247,248,249,238,43,250,44,251,252,253,254,240,255,232,256,47,257,258,48,49,50,259,260,52,261,262,263,264,265,242,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,89,90,266,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,267,268,269,270,271,272,273,274,275,108,109,110,113,114,115,116,117,120,276,277,278,128,129,130,131,132,133,134,135,136,137,138,139,140,141,279,280,281,282,283,284,285,142,143,144,145,146,147,286,243,287,148,288,289,290,291,292,293,294,159,160,161,162,163,164,165,167,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,222,223,224,225,226,227,228,229,230,231],"tindex":"438ada7a-8286-11e5-8e25-e793a5c47be1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:108","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[],"tindex":"438ada7b-8286-11e5-8e25-017e1578a1f3","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:67","type":"CtReturnImpl","sourcecode":"return (java.lang.String) + (java.lang.String)"},"variableMap":{"name":"file","location":"file"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:315","type":"CtReturnImpl","sourcecode":"return java.lang.String.substring(0, int)"},"status":-2},{"failures":[283],"tindex":"438b018c-8286-11e5-8e25-f91bd177ae6d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDMap:74","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt(long, int)"},"status":-1},{"failures":[113,295,114,115,116,117,143,182,183,222,223,226,227,230,231],"tindex":"438b018d-8286-11e5-8e25-a7423bd5e6d9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:287","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.DijkstraBidirectionRef.com.graphhopper.storage.EdgeEntry"},"variableMap":{"currFrom":"currEdge","dijkstra":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Dijkstra:64","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AbstractRoutingAlgorithm.createEdgeEntry(int, 0)"},"status":-1},{"failures":[243,193,196,197,201,204,209,210,212,213,215,216,218],"tindex":"438b018e-8286-11e5-8e25-81819d91c3bd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:204","type":"CtAssignmentImpl","sourcecode":"double = 0"},"variableMap":{"factor":"prevLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:413","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.DistanceCalc.calcDist(double, double, double[][int], double[][int])"},"status":-1},{"failures":[142,143,144,145,146,243,287,148,288,289,290,292,164,168,170,172,201,204,209,210,213,219],"tindex":"438b018f-8286-11e5-8e25-790b0365163b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.QueryGraph:354","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.routing.VirtualEdgeIteratorState com.graphhopper.routing.VirtualEdgeIteratorState = new com.graphhopper.routing.VirtualEdgeIteratorState(int , int , int , int , double , com.graphhopper.util.EdgeIteratorState.getFlags() , com.graphhopper.util.EdgeIteratorState.getName() , com.graphhopper.util.PointList)"},"variableMap":{"closestEdge":"closestEdge","baseDistance":"baseDistance","prevNodeId":"prevNodeId","virtEdgeId":"origRevTraversalKey","origTraversalKey":"virtEdgeId","nodeId":"prevNodeId","basePoints":"baseReversePoints"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:356","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.routing.VirtualEdgeIteratorState com.graphhopper.routing.VirtualEdgeIteratorState = new com.graphhopper.routing.VirtualEdgeIteratorState(int , int , int , int , double , long , com.graphhopper.util.EdgeIteratorState.getName() , com.graphhopper.util.PointList)"},"status":-1},{"failures":[296,72,73,74,75,76,297],"tindex":"438b28a0-8286-11e5-8e25-bbc7e9312e69","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GHRequest:151","type":"CtIfImpl","sourcecode":"if (!(boolean))\n    throw new java.lang.IllegalStateException((\"Please call empty constructor if you intent to use \" + \"more than two places via addPoint method.\"));\n"},"variableMap":{"possibleToAdd":"externalIntBased"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:148","type":"CtForImpl","sourcecode":"for (long long = 0 ; long < long ; long += int) {\n    if (com.graphhopper.storage.AbstractDataAccess.isIntBased()) {\n        for (int int = 0 ; int < int ; int += 4) {\n            com.graphhopper.util.BitUtil.fromInt(byte[], com.graphhopper.storage.DataAccess.getInt((long + int)), int);\n        }\n    } else {\n        com.graphhopper.storage.DataAccess.getBytes(long, byte[], int);\n    }\n    if (boolean) {\n        for (int int = 0 ; int < int ; int += 4) {\n            com.graphhopper.storage.DataAccess.setInt((long + int), com.graphhopper.util.BitUtil.toInt(byte[], int));\n        }\n    } else {\n        com.graphhopper.storage.DataAccess.setBytes(long, byte[], int);\n    }\n}"},"status":-1},{"failures":[],"tindex":"438b28a1-8286-11e5-8e25-4d3deba8eebe","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PointList:110","type":"CtAssignmentImpl","sourcecode":"int = 15"},"variableMap":{"cap":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:187","type":"CtAssignmentImpl","sourcecode":"int[][int] = int[][(int / 2)]"},"status":-2},{"failures":[],"tindex":"438b28a2-8286-11e5-8e25-491065765ca1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:63","type":"CtIfImpl","sourcecode":"if ((int) >= (int)) {\n    (int)++;\n    int = 0;\n} "},"variableMap":{"currentBucket":"length","currentIndex":"length","bucketSize":"length"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.search.NameIndex:102","type":"CtIfImpl","sourcecode":"if ((byte[].int) > 255) {\n    java.lang.String java.lang.String = java.lang.String.substring(0, (256 / 4));\n    com.graphhopper.search.NameIndex.org.slf4j.Logger.info((((\"Way name is too long: \" + java.lang.String) + \" truncated to \") + java.lang.String));\n    java.lang.String = java.lang.String;\n    continue;\n} "},"status":-2},{"failures":[],"tindex":"438b28a3-8286-11e5-8e25-cbaa06338a63","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.SparseArray:132","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:925","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(com.graphhopper.search.NameIndex.put(java.lang.String)))"},"status":-2},{"failures":[145,174],"tindex":"438b4fb4-8286-11e5-8e25-a37a43d67ced","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.QueryGraph:258","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.add(java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.get(((java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.size()) - 2)))"},"variableMap":{"virtualEdges":"modifiedEdges"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:439","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.routing.VirtualEdgeIteratorState>.add(com.graphhopper.routing.VirtualEdgeIteratorState)"},"status":-1},{"failures":[],"tindex":"438b4fb5-8286-11e5-8e25-19eea71aeb32","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:996","type":"CtIfImpl","sourcecode":"if ((int == (int)) || (int == (java.lang.Integer.int))) {\n    boolean = false;\n    return true;\n} else if (int == (int)) {\n    boolean = true;\n    int = int;\n    int = int;\n    return true;\n} "},"variableMap":{"adjNode":"i","baseNode":"newSegments","expectedAdjNode":"i","java.lang.Integer.MIN_VALUE":"newSegments","reverse":"cleanAndRemap"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:131","type":"CtTryImpl","sourcecode":"try {\n    if (boolean) {\n        int = int;\n        com.graphhopper.storage.MMapDataAccess.clean(0, java.util.List<java.nio.ByteBuffer>.size());\n        com.graphhopper.util.Helper.cleanHack();\n        java.util.List<java.nio.ByteBuffer>.clear();\n    } else {\n        long += (java.util.List<java.nio.ByteBuffer>.size()) * long;\n        int = int - (java.util.List<java.nio.ByteBuffer>.size());\n    }\n    for ( ; int < int ; int++) {\n        java.util.List<java.nio.ByteBuffer>.add(com.graphhopper.storage.MMapDataAccess.newByteBuffer(long, long));\n        long += long;\n    }\n    return true;\n} catch (java.io.IOException ex) {\n    throw new java.lang.RuntimeException((((((((((((\"Couldn\\'t map buffer \" + int) + \" of \") + int) + \" at position \") + long) + \" for \") + long) + \" bytes with offset \") + long) + \", new fileLength:\") + long) , java.io.IOException);\n}"},"status":-2},{"failures":[68,77,78,79,80,81,82,104],"tindex":"438b4fb6-8286-11e5-8e25-8b6325e592be","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:770","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double = double;\n} "},"variableMap":{"min":"foundDist","dist":"fromLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:131","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.DistanceCalc.validEdgeDistance(double, double, double, double, double, double)) {\n    double double = com.graphhopper.util.DistanceCalc.calcDenormalizedDist(com.graphhopper.util.DistanceCalc.calcNormalizedEdgeDistance(double, double, double, double, double, double));\n    if (double < double) {\n        com.graphhopper.storage.index.QueryResult.setQueryDistance(double);\n        com.graphhopper.storage.index.QueryResult.setClosestNode(int);\n        com.graphhopper.storage.index.QueryResult.setClosestEdge(com.graphhopper.routing.util.AllEdgesIterator);\n        if (double > (com.graphhopper.util.DistanceCalc.calcDist(double, double, double, double)))\n            com.graphhopper.storage.index.QueryResult.setClosestNode(int);\n        \n        double = double;\n    } \n} "},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"438ab367-8286-11e5-8e25-415806e31b7a","diffs":[{"methodsDiff":{"delete":["java.io.File.exists","java.io.File.getAbsolutePath","com.graphhopper.util.Unzipper.unzip","java.io.File.isDirectory"]},"branchesDiff":{"delete":["c4","t0","e1","t2","t3"]},"type":"staticDiff"}]},{"transformation":"438ab366-8286-11e5-8e25-17b97fc11343","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.Instruction.getFirstLat","java.lang.StringBuilder.append","com.graphhopper.util.Helper.round6"]},"type":"staticDiff"}]}]}
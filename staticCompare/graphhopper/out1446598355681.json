{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":111,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":333,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":343,"com.graphhopper.search.NameIndexTest.testCreate":358,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":352,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":189,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":202,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":97,"com.graphhopper.reader.OSMReaderTest.testFerry":4,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":46,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":47,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":340,"com.graphhopper.routing.QueryGraphTest.testOneWay":351,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":255,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":29,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":185,"com.graphhopper.reader.OSMReaderTest.testWithBounds":15,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":118,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testInfinityWeight":91,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":108,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":284,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":346,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":285,"com.graphhopper.coll.CompressedArrayTest.testCompress":1,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":117,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":169,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":226,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":300,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":364,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":116,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":146,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":209,"com.graphhopper.util.BitUtilBigTest.testReverse":367,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":21,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":173,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":82,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":254,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":177,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":256,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":308,"com.graphhopper.GraphHopperTest.testPrepare":31,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":126,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":75,"com.graphhopper.storage.GraphStorageViaMMapTest.testInfinityWeight":127,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":332,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":136,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":153,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":296,"com.graphhopper.search.NameIndexTest.testFlush":356,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":349,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":315,"com.graphhopper.util.InstructionListTest.testWayList":50,"com.graphhopper.storage.GraphHopperStorageTest.testInfinityWeight":167,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":49,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":324,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":54,"com.graphhopper.GraphHopperAPITest.testDisconnected179":3,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":225,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":289,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":104,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":36,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":183,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":286,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":99,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":316,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":321,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":186,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":20,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":281,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":10,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":288,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":93,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":240,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":273,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":114,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":363,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":130,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":32,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":142,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":180,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":84,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":90,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":86,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":85,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":311,"com.graphhopper.GraphHopperTest.testLoadOSM":35,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":194,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":309,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":212,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":159,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":187,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":235,"com.graphhopper.reader.OSMReaderTest.testSort":7,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":158,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":327,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":14,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":287,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":251,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":164,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":133,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":305,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":217,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":218,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":128,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":59,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":337,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":348,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":18,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":132,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":272,"com.graphhopper.routing.PathTest.testWayList":278,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":89,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":129,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":107,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":222,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":245,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":338,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeReturn":264,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":143,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":56,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":314,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":168,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":184,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":322,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":342,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":211,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPropertiesWithNoInit":81,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":65,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":248,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":152,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":60,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":228,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":67,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":141,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":223,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":134,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":271,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":150,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":329,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":280,"com.graphhopper.util.GHUtilityTest.testSort":43,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":105,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":191,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":350,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":319,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":268,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":318,"com.graphhopper.search.NameIndexTest.testPut":355,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":73,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":94,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":139,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":353,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":203,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":63,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":79,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":182,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":174,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":227,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":265,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":347,"com.graphhopper.coll.CompressedArrayTest.testCompress2":0,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":172,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":292,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":37,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":57,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":58,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":155,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":200,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":70,"com.graphhopper.GraphHopperAPITest.testLoad":2,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":34,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":76,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":336,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":147,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":283,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":232,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":138,"com.graphhopper.reader.OSMReaderTest.testBarriers":8,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":61,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":290,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":120,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes":252,"com.graphhopper.routing.PathTest.testFound":274,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":39,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":366,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":206,"com.graphhopper.util.GHUtilityTest.testCopy":42,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":101,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":320,"com.graphhopper.routing.PathTest.testFindInstruction":279,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":312,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":53,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":62,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":72,"com.graphhopper.search.NameIndexTest.testNoErrorOnLargeName":357,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":106,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":145,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":323,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":201,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":165,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":151,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":328,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":40,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":87,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":154,"com.graphhopper.storage.GraphHopperStorageCHTest.testFlags":242,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":331,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":263,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":74,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":302,"com.graphhopper.reader.PrinctonReaderTest.testRead":19,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":166,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":244,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":68,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":80,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":96,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":231,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":102,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":135,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes2":239,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":307,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":339,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":77,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":259,"com.graphhopper.util.InstructionListTest.testWayList2":51,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":215,"com.graphhopper.reader.OSMReaderTest.testFoot":5,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":123,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":119,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":195,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":354,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":192,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":170,"com.graphhopper.reader.OSMReaderTest.testOneWay":17,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":193,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":269,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":66,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":237,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":92,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":148,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetLocations":249,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":291,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":162,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":241,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":161,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":88,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":110,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":71,"com.graphhopper.storage.GraphHopperStorageTest.testPropertiesWithNoInit":157,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":306,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":178,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":113,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":137,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":144,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":9,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":277,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":301,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":219,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":335,"com.graphhopper.storage.UnsafeDataAccessTest.testLoadClose":359,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":69,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":260,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":298,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":310,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":175,"com.graphhopper.routing.PathBidirRefTest.testExtract":294,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":299,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":28,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":45,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":293,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":23,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":190,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":122,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnsureSize":233,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":27,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":95,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":26,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":221,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":25,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":121,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":24,"com.graphhopper.util.GHUtilityTest.testSort2":41,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":199,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":330,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":109,"com.graphhopper.reader.OSMReaderTest.testMain":6,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":266,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":344,"com.graphhopper.storage.GraphHopperStorageCHTest.testInfinityWeight":267,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":78,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":262,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":229,"com.graphhopper.routing.PathBidirRefTest.testExtract2":295,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":261,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":181,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":125,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":313,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":213,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":196,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":205,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":282,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":224,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":160,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":250,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":253,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":11,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":207,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":131,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":83,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":16,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":176,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":236,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":334,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":304,"com.graphhopper.storage.StorablePropertiesTest.testStore":361,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":362,"com.graphhopper.storage.GraphHopperStorageTest.testClone":140,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":171,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":188,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":124,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":163,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":270,"com.graphhopper.storage.GraphHopperStorageCHTest.testCheckFirstNode":258,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":149,"com.graphhopper.GraphHopperTest.testFootAndCar":33,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":156,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":234,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":103,"com.graphhopper.routing.PathTest.testTime":275,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":100,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":243,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":303,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":197,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":210,"com.graphhopper.util.BitUtilLittleTest.testReverse":368,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":115,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":326,"com.graphhopper.util.GHUtilityTest.testSortDirected":44,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":64,"com.graphhopper.storage.GraphHopperStorageCHTest.testPropertiesWithNoInit":257,"com.graphhopper.GraphHopperTest.testPrepareOnly":22,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":247,"com.graphhopper.GraphHopperTest.testVia":30,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":204,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":341,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":98,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":325,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":13,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":220,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":208,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":230,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":345,"com.graphhopper.GraphHopperTest.testFootOnly":38,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":52,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":214,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":12,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":179,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":216,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":112,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":246,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":276,"com.graphhopper.util.InstructionListTest.testFind":48,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":360,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":365,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":317,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":297,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":55,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":198,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":238},"transformations":[{"failures":[0,1],"tindex":"56c0a25e-828e-11e5-a86a-eb04f35c9b3e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:154","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.CompressedArray:203","type":"CtWhileImpl","sourcecode":"while (!(java.util.zip.Inflater.finished())) {\n    int int = java.util.zip.Inflater.inflate(byte[]);\n    java.io.ByteArrayOutputStream.write(byte[], 0, int);\n}"},"status":-1},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354],"tindex":"56c0f07f-828e-11e5-a86a-e3d859a8e2d9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:243","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.EdgeAccess.init(com.graphhopper.storage.BaseGraph.nextEdgeEntryIndex(4), com.graphhopper.storage.BaseGraph.nextEdgeEntryIndex(4), com.graphhopper.storage.BaseGraph.nextEdgeEntryIndex(4), com.graphhopper.storage.BaseGraph.nextEdgeEntryIndex(4), com.graphhopper.storage.BaseGraph.nextEdgeEntryIndex(4), com.graphhopper.storage.BaseGraph.nextEdgeEntryIndex(com.graphhopper.routing.util.EncodingManager.getBytesForFlags()), boolean)"},"status":-1},{"failures":[2,23,24,25,26,27,28,30,31,32,33,34,35,37,38,296,298,304,305,306,307,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,327,328,329,330,331,332,335,336,337,338],"tindex":"56c11790-828e-11e5-a86a-ff1522519e57","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(5);\n} catch (java.lang.InterruptedException iex) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:208","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.EdgeEntry == null) {\n    com.graphhopper.storage.EdgeEntry = new com.graphhopper.storage.EdgeEntry(com.graphhopper.util.EdgeIterator.getEdge() , com.graphhopper.util.EdgeIterator.getAdjNode() , double);\n    com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n    gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry>.put(int, com.graphhopper.storage.EdgeEntry);\n    java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.add(com.graphhopper.storage.EdgeEntry);\n} else if ((com.graphhopper.storage.EdgeEntry.double) > double) {\n    java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.remove(com.graphhopper.storage.EdgeEntry);\n    com.graphhopper.storage.EdgeEntry.int = com.graphhopper.util.EdgeIterator.getEdge();\n    com.graphhopper.storage.EdgeEntry.double = double;\n    com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n    java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.add(com.graphhopper.storage.EdgeEntry);\n} else\n    continue;\n"},"status":-1},{"failures":[6,30,48,49,50,51,52,355,356,357,358,55,92,128,133,168,234,268,272,273,276,277,278,279,280,281],"tindex":"56c11791-828e-11e5-a86a-c7b887393b11","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.search.NameIndex:132","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.getBytes((long + (byte[].int)), byte[], int)"},"status":-1},{"failures":[359],"tindex":"56c13ea2-828e-11e5-a86a-53ca84c86959","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:284","type":"CtLocalVariableImpl","sourcecode":"int int = 64 - int"},"variableMap":{"maxBits":"segmentSizeInBytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:145","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long / (int)))"},"status":-1},{"failures":[360],"tindex":"56c13ea3-828e-11e5-a86a-29f8c19cd557","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:367","type":"CtIfImpl","sourcecode":"if (int > int)\n    throw new java.lang.IllegalArgumentException(\"from must be smaller or equals to end\");\n"},"variableMap":{"from":"com.graphhopper.routing.util.FlagEncoder.K_ROUNDABOUT","end":"com.graphhopper.routing.util.FlagEncoder.K_ROUNDABOUT"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:189","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.routing.util.AbstractFlagEncoder.(isFerry(long))) {\n    double double = com.graphhopper.routing.util.CarFlagEncoder.getSpeed(com.graphhopper.reader.OSMWay);\n    double = com.graphhopper.routing.util.AbstractFlagEncoder.applyMaxSpeed(com.graphhopper.reader.OSMWay, double, true);\n    double double = com.graphhopper.routing.util.AbstractFlagEncoder.parseSpeed(com.graphhopper.reader.OSMWay.getTag(\"maxspeed:motorcycle\"));\n    if ((double > 0) && (double < double))\n        double = double * 0.9;\n    \n    if ((double > 30) && (com.graphhopper.reader.OSMWay.hasTag(\"surface\", java.util.Set<java.lang.String>)))\n        double = 30;\n    \n    boolean boolean = com.graphhopper.reader.OSMWay.hasTag(\"junction\", \"roundabout\");\n    if (boolean)\n        long = com.graphhopper.routing.util.AbstractFlagEncoder.setBool(0, com.graphhopper.routing.util.FlagEncoder.int, true);\n    \n    if ((com.graphhopper.reader.OSMWay.hasTag(\"oneway\", java.util.Set<java.lang.String>)) || boolean) {\n        if (com.graphhopper.reader.OSMWay.hasTag(\"oneway\", \"-1\")) {\n            long = com.graphhopper.routing.util.MotorcycleFlagEncoder.setReverseSpeed(long, double);\n            long |= long;\n        } else {\n            long = com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(long, double);\n            long |= long;\n        }\n    } else {\n        long = com.graphhopper.routing.util.AbstractFlagEncoder.setSpeed(long, double);\n        long = com.graphhopper.routing.util.MotorcycleFlagEncoder.setReverseSpeed(long, double);\n        long |= long;\n    }\n} else {\n    long = com.graphhopper.routing.util.AbstractFlagEncoder.handleFerryTags(com.graphhopper.reader.OSMWay, java.util.Map<java.lang.String, java.lang.Integer>.get(\"living_street\"), java.util.Map<java.lang.String, java.lang.Integer>.get(\"service\"), java.util.Map<java.lang.String, java.lang.Integer>.get(\"residential\"));\n    long |= long;\n}"},"status":-1},{"failures":[],"tindex":"56c165b4-828e-11e5-a86a-f371a3df3abb","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:822","type":"CtReturnImpl","sourcecode":"return double * 0.9"},"variableMap":{"maxSpeed":"java.lang.Double.MAX_VALUE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:380","type":"CtReturnImpl","sourcecode":"return java.lang.Double.double"},"status":-2},{"failures":[22,34,35,36,37,361,55,58,133,134,362,229,234],"tindex":"56c165b5-828e-11e5-a86a-197ea03f65b8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:143","type":"CtInvocationImpl","sourcecode":"java.io.BufferedWriter.append('\\n')"},"variableMap":{"writer":"writer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:140","type":"CtInvocationImpl","sourcecode":"java.io.BufferedWriter.append(java.util.Map.Entry<java.lang.String, java.lang.String>.getKey())"},"status":-1},{"failures":[23,24,25,26,27,30,31,32,33,34,35,37,320,323,328,329,332,338,342,343,347,352],"tindex":"56c165b6-828e-11e5-a86a-db2242bd8026","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.SparseArray:191","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.util.Helper.idealIntArraySize(((int) + 1))"},"variableMap":{"mSize":"mainEdges"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:569","type":"CtLocalVariableImpl","sourcecode":"int int = int - (int)"},"status":-1},{"failures":[],"tindex":"56c165b7-828e-11e5-a86a-01da53e4790d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:225","type":"CtLocalVariableImpl","sourcecode":"long long = 1L << 63"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDMap:111","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.coll.OSMIDMap.com.graphhopper.util.BitUtil.toLong(byte[])"},"status":-2},{"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,22,29,30,31,32,33,34,35,36,37,38,39,52,363,364,365,366],"tindex":"56c18cc8-828e-11e5-a86a-058bdddcf654","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:233","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= 1"},"variableMap":{"value":"relationFlags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:274","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.AbstractFlagEncoder.handleWayTags(com.graphhopper.reader.OSMWay, long, (long & (com.graphhopper.routing.util.AbstractFlagEncoder.getRelBitMask())))"},"status":-1},{"failures":[48,279],"tindex":"56c18cc9-828e-11e5-a86a-698edc927bc8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:121","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(double, double, java.lang.Double.double)"},"variableMap":{"java.lang.Double.NaN":"prevLon","this":"points","lon":"prevLon","lat":"lon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:293","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.InstructionList.(getSize()) > 1) {\n    for (int int = 0 ; int < com.graphhopper.util.InstructionList.(getSize()) ; int++) {\n        com.graphhopper.util.PointList = com.graphhopper.util.InstructionList.get(int).getPoints();\n        for (int int = 0 ; int < (com.graphhopper.util.PointList.size()) ; int++) {\n            double double = com.graphhopper.util.PointList.getLatitude(int);\n            double double = com.graphhopper.util.PointList.getLongitude(int);\n            if (!((int == 0) && (int == 0))) {\n                double double;\n                int int = int;\n                if (com.graphhopper.util.DistanceCalc.validEdgeDistance(double, double, double, double, double, double)) {\n                    double = com.graphhopper.util.DistanceCalc.calcNormalizedEdgeDistance(double, double, double, double, double, double);\n                    if (int > 0)\n                        int++;\n                    \n                } else {\n                    double = com.graphhopper.util.DistanceCalc.calcNormalizedDist(double, double, double, double);\n                    if (int > 0)\n                        int++;\n                    \n                }\n                if (double < double) {\n                    double = double;\n                    int = int;\n                } \n            } \n            double = double;\n            double = double;\n        }\n    }\n} "},"status":-1},{"failures":[],"tindex":"56c18cca-828e-11e5-a86a-134e15ad85c3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:331","type":"CtInvocationImpl","sourcecode":"org.slf4j.Logger.info((((((((((((((((\"location index created in \" + (com.graphhopper.util.StopWatch.stop().getSeconds())) + \"s, size:\") + (com.graphhopper.util.Helper.nf(com.graphhopper.storage.index.LocationIndexTree.InMemConstructionIndex.int))) + \", leafs:\") + (com.graphhopper.util.Helper.nf(com.graphhopper.storage.index.LocationIndexTree.InMemConstructionIndex.int))) + \", precision:\") + (int)) + \", depth:\") + (int[].int)) + \", checksum:\") + com.graphhopper.storage.index.LocationIndexTree.(calcChecksum())) + \", entries:\") + (java.util.Arrays.toString(int[]))) + \", entriesPerLeaf:\") + float))"},"status":0},{"failures":[],"tindex":"56c1b3db-828e-11e5-a86a-957df3a4c9b7","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntIntBinHeap:235","type":"CtAssignmentImpl","sourcecode":"this.int = 0"},"variableMap":{"size":"prepareLazyUpdates"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:575","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.util.CmdArgs.getInt(\"prepare.updates.lazy\", int)"},"status":0},{"failures":[],"tindex":"56c1b3dc-828e-11e5-a86a-5dfdd57f3b26","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.shapes.BBox:230","type":"CtLocalVariableImpl","sourcecode":"int int = 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMInputFile:151","type":"CtLocalVariableImpl","sourcecode":"int int = javax.xml.stream.XMLStreamReader.next()"},"status":-2},{"failures":[48,279],"tindex":"56c1b3dd-828e-11e5-a86a-73f5ad3c1143","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:119","type":"CtOperatorAssignmentImpl","sourcecode":"double += 2 * (java.lang.Math.double)"},"variableMap":{"orientation":"foundMinDistance","java.lang.Math.PI":"distance"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:322","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-1},{"failures":[],"tindex":"56c1b3de-828e-11e5-a86a-a7844032396f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:96","type":"CtAssignmentImpl","sourcecode":"double = double + (2 * (java.lang.Math.double))"},"variableMap":{"resultOrientation":"equalNormedDelta","orientation":"equalNormedDelta","java.lang.Math.PI":"equalNormedDelta"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:129","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.DistanceCalc.calcNormalizedDist(0.1)"},"status":0},{"failures":[],"tindex":"56c1daef-828e-11e5-a86a-21bd76ea21aa","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:68","type":"CtReturnImpl","sourcecode":"return 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:804","type":"CtReturnImpl","sourcecode":"return 1"},"status":0},{"failures":[],"tindex":"56c1daf0-828e-11e5-a86a-a7ee4eb75e75","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:113","type":"CtContinueImpl","sourcecode":"continue"},"status":0},{"failures":[367,368,183,190,192,193,208,215,217,218],"tindex":"56c1daf1-828e-11e5-a86a-b3807fc6c67f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtil:256","type":"CtUnaryOperatorImpl","sourcecode":"int--"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"56c18cca-828e-11e5-a86a-134e15ad85c3","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.index.LocationIndexTree.calcChecksum","com.graphhopper.util.StopWatch.stop","com.graphhopper.util.StopWatch.getSeconds","com.graphhopper.util.Helper.nf","java.util.Arrays.toString","org.slf4j.Logger.info"]},"type":"staticDiff"},{"branches":{"com.graphhopper.GraphHopperAPITest.testLoad":["com.graphhopper.util.Helper_java.lang.String_nf(long).b"],"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":["com.graphhopper.util.StopWatch_com.graphhopper.util.StopWatch_stop().b","com.graphhopper.util.StopWatch_com.graphhopper.util.StopWatch_stop().e1","com.graphhopper.util.StopWatch_float_getSeconds().b","com.graphhopper.util.Helper_java.lang.String_nf(long).b"],"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":["com.graphhopper.util.StopWatch_com.graphhopper.util.StopWatch_stop().b","com.graphhopper.util.StopWatch_com.graphhopper.util.StopWatch_stop().e1","com.graphhopper.util.StopWatch_float_getSeconds().b","com.graphhopper.util.Helper_java.lang.String_nf(long).b"],"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":["com.graphhopper.util.Helper_java.lang.String_nf(long).b"]},"type":"branch"}]},{"transformation":"56c1b3de-828e-11e5-a86a-a7844032396f","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.DistanceCalc.calcNormalizedDist"]},"type":"staticDiff"},{"branches":{"com.graphhopper.GraphHopperAPITest.testLoad":["com.graphhopper.storage.index.LocationIndexTree$XFirstSearchCheck_boolean_checkAdjacent(com.graphhopper.util.EdgeIteratorState).e3","com.graphhopper.util.BreadthFirstSearch_void_start(com.graphhopper.util.EdgeExplorer,int).t2","com.graphhopper.util.BreadthFirstSearch_void_start(com.graphhopper.util.EdgeExplorer,int).t1","com.graphhopper.coll.GHTBitSet_boolean_contains(int).b","com.graphhopper.storage.index.LocationIndexTree$XFirstSearchCheck_boolean_checkAdjacent(com.graphhopper.util.EdgeIteratorState).t7"],"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":["com.graphhopper.util.BreadthFirstSearch_void_start(com.graphhopper.util.EdgeExplorer,int).e2","com.graphhopper.storage.index.LocationIndexTree$XFirstSearchCheck_boolean_checkAdjacent(com.graphhopper.util.EdgeIteratorState).t7","com.graphhopper.util.DistancePlaneProjection_double_calcNormalizedDist(double).b"],"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":["com.graphhopper.storage.index.LocationIndexTree$XFirstSearchCheck_boolean_checkAdjacent(com.graphhopper.util.EdgeIteratorState).t7","com.graphhopper.util.DistancePlaneProjection_double_calcNormalizedDist(double).b"],"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":["com.graphhopper.util.DistancePlaneProjection_double_calcNormalizedDist(double).b"],"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":["com.graphhopper.util.DistancePlaneProjection_double_calcNormalizedDist(double).b"]},"type":"branch"}]}]}
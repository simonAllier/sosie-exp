{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":5,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":62,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":70,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDoThrowExceptionIfDimDoesNotMatch":15,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":80,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":11,"com.graphhopper.storage.GraphHopperStorageCHTest.testDoThrowExceptionIfDimDoesNotMatch":10,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":41,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":59,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":37,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":6,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":66,"com.graphhopper.routing.QueryGraphTest.testOneWay":69,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":8,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":42,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":0,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":19,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":4,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":55,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":58,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":33,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":43,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":64,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":44,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":61,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":45,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":28,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":1,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":40,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":34,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":73,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":76,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":7,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":13,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":17,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":31,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":56,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":74,"com.graphhopper.GraphHopperTest.testPrepare":51,"com.graphhopper.GraphHopperTest.testFailsForMissingParameters":23,"com.graphhopper.GraphHopperTest.testFootAndCar":53,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":75,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":57,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":9,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":32,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":67,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":68,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":71,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":36,"com.graphhopper.storage.StorablePropertiesTest.testVersionCheck":81,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNormedDist":72,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":35,"com.graphhopper.storage.GraphHopperStorageTest.testDoThrowExceptionIfDimDoesNotMatch":12,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":24,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":65,"com.graphhopper.GraphHopperTest.testPrepareOnly":18,"com.graphhopper.GraphHopperTest.testVia":20,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":79,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":2,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":25,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":60,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":3,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":16,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":77,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":78,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":21,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":38,"com.graphhopper.GraphHopperTest.testNoNPE_ifLoadNotSuccessful":27,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":63,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":39,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":52,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":29,"com.graphhopper.GraphHopperTest.testLoadOSM":22,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":26,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":30,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":46,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":54,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":50,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":49,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":48,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":14,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":47},"transformations":[{"failures":[0],"tindex":"f2dc3e24-8276-11e5-a6f2-7948f372da60","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:665","type":"CtIfImpl","sourcecode":"if ((java.lang.String) == null)\n    throw new java.lang.IllegalStateException(((\"Couldn\\'t load from existing folder: \" + (java.lang.String)) + \" but also cannot import from OSM file as it wasn\\'t specified!\"));\n"},"variableMap":{"ghLocation":"tt","osmFile":"tt"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:171","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.util.Helper.isEmpty(java.lang.String))) {\n    java.lang.Integer java.lang.Integer = java.util.Map<java.lang.String, java.lang.Integer>.get(java.lang.String);\n    if (java.lang.Integer != null)\n        java.lang.Integer = java.lang.Integer;\n    \n} "},"status":-1},{"failures":[1,2,3,4,5,6],"tindex":"f2dc6535-8276-11e5-a6f2-0fbea8a35a97","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.Path4CH:66","type":"CtIfImpl","sourcecode":"if (boolean) {\n    int int = int;\n    int = int;\n    int = int;\n} "},"variableMap":{"from":"from","to":"from","reverse":"finishedTo"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:74","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.routing.util.TraversalMode.isEdgeBased())) {\n    gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry>.put(int, com.graphhopper.storage.EdgeEntry);\n    if ((com.graphhopper.storage.EdgeEntry) != null) {\n        gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry> = gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry>;\n        com.graphhopper.routing.DijkstraBidirectionRef.updateBestPath(com.graphhopper.util.GHUtility.getEdge(com.graphhopper.storage.Graph, int, com.graphhopper.storage.EdgeEntry.int), com.graphhopper.storage.EdgeEntry, int);\n    } \n} else {\n    if (((com.graphhopper.storage.EdgeEntry) != null) && ((com.graphhopper.storage.EdgeEntry.int) == int)) {\n        com.graphhopper.routing.PathBidirRef.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n        com.graphhopper.routing.PathBidirRef.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n        boolean = true;\n        boolean = true;\n    } \n}"},"status":-1},{"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],"tindex":"f2dc6536-8276-11e5-a6f2-5bb7ae1dc3f2","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.SynchedDAWrapper:45","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.rename(java.lang.String)"},"variableMap":{"newName":"location","inner":"da"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:112","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.DAType.isStoring())\n    com.graphhopper.storage.DataAccess = new com.graphhopper.storage.RAMIntDataAccess(java.lang.String , java.lang.String , true , java.nio.ByteOrder);\nelse\n    com.graphhopper.storage.DataAccess = new com.graphhopper.storage.RAMIntDataAccess(java.lang.String , java.lang.String , false , java.nio.ByteOrder);\n"},"status":-1},{"failures":[28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"tindex":"f2dc6537-8276-11e5-a6f2-23b65149032e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodedValue:95","type":"CtOperatorAssignmentImpl","sourcecode":"long >>>= long"},"variableMap":{"shift":"encoded","flags":"encoded"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:355","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.EncodedValue.setValue(long, com.graphhopper.routing.util.BikeCommonFlagEncoder.handlePriority(com.graphhopper.reader.OSMWay, int))"},"status":-1},{"failures":[],"tindex":"f2dc6538-8276-11e5-a6f2-1305dea9dc57","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:118","type":"CtIfImpl","sourcecode":"if (long == (long + long))\n    return ~(long + long);\n"},"variableMap":{"high":"maxValue","len":"maxValue","start":"maxValue"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedValue:111","type":"CtReturnImpl","sourcecode":"return long"},"status":-2},{"failures":[],"tindex":"f2dc6539-8276-11e5-a6f2-393437b5004a","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:159","type":"CtAssignmentImpl","sourcecode":"double = double"},"variableMap":{"x1":"midLat","x2":"midLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:224","type":"CtOperatorAssignmentImpl","sourcecode":"double += double"},"status":0},{"failures":[],"tindex":"f2dc8c4a-8276-11e5-a6f2-8bfad2bf80ba","series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:227","type":"CtOperatorAssignmentImpl","sourcecode":"double /= 2"},"variableMap":{"midLat":"max"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:168","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.DistanceCalc.calcNormalizedDist(((double / (java.lang.Math.sqrt(com.graphhopper.storage.index.Location2IDQuadtree.getCapacity()))) * 2))"},"status":0},{"failures":[43],"tindex":"f2dc8c4b-8276-11e5-a6f2-d9a914ce4717","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMTurnRelation:158","type":"CtReturnImpl","sourcecode":"return (((long)(int)) << 32) | ((long)(int))"},"variableMap":{"edgeTo":"edgeId","edgeFrom":"edgeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:511","type":"CtReturnImpl","sourcecode":"return com.graphhopper.reader.OSMReader.getEdgeIdToOsmWayIdMap().get(int)"},"status":-1},{"failures":[],"tindex":"f2dc8c4c-8276-11e5-a6f2-4148b0c0b8a6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedValue:85","type":"CtUnaryOperatorImpl","sourcecode":"~(long)"},"status":0},{"failures":[44],"tindex":"f2dc8c4d-8276-11e5-a6f2-95382cbebcda","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:102","type":"CtLocalVariableImpl","sourcecode":"long long = long - long"},"variableMap":{"cap":"byteCount","bytes":"byteCount"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:174","type":"CtLocalVariableImpl","sourcecode":"long long = java.lang.Math.max(long, 100)"},"status":-1},{"failures":[45,46,47,48,49,50,20,51,52,53,21,22,25,54,4,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"tindex":"f2dc8c4e-8276-11e5-a6f2-cd70c7ab1cb2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.QueryGraph:354","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.routing.VirtualEdgeIteratorState com.graphhopper.routing.VirtualEdgeIteratorState = new com.graphhopper.routing.VirtualEdgeIteratorState(int , int , int , int , double , com.graphhopper.util.EdgeIteratorState.getFlags() , com.graphhopper.util.EdgeIteratorState.getName() , com.graphhopper.util.PointList)"},"variableMap":{"closestEdge":"closestEdge","baseDistance":"baseDistance","prevNodeId":"virtEdgeId","virtEdgeId":"virtEdgeId","origTraversalKey":"virtEdgeId","nodeId":"nodeId","basePoints":"baseReversePoints"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:356","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.routing.VirtualEdgeIteratorState com.graphhopper.routing.VirtualEdgeIteratorState = new com.graphhopper.routing.VirtualEdgeIteratorState(int , int , int , int , double , long , com.graphhopper.util.EdgeIteratorState.getName() , com.graphhopper.util.PointList)"},"status":-1},{"failures":[],"tindex":"f2dcb35f-8276-11e5-a6f2-2de01adf5b8d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDMap:112","type":"CtIfImpl","sourcecode":"if (long < long)\n    long = long;\nelse\n    long = long;\n"},"status":-2},{"failures":[],"tindex":"f2dcb360-8276-11e5-a6f2-6d93e9fd14d2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:659","type":"CtAssignmentImpl","sourcecode":"int = (int) + 4"},"variableMap":{"S_SKIP_EDGE1":"tmpNo","S_SKIP_EDGE2":"tmpNo"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:155","type":"CtAssignmentImpl","sourcecode":"int = 64"},"status":-2},{"failures":[],"tindex":"f2dcb361-8276-11e5-a6f2-3fb615cb0a80","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:742","type":"CtIfImpl","sourcecode":"if (int < 0)\n    int = int;\n"},"variableMap":{"updatedA":"x","nodeA":"endX"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:83","type":"CtIfImpl","sourcecode":"if (int > 0.0) {\n    if (int >= int)\n        boolean = true;\n    \n} else if (int <= int) {\n    boolean = true;\n} "},"status":0},{"failures":[72],"tindex":"f2dcb362-8276-11e5-a6f2-0950f5ac8bb4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:474","type":"CtLocalVariableImpl","sourcecode":"int int = int - 1"},"variableMap":{"start":"to"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:303","type":"CtLocalVariableImpl","sourcecode":"int int = int % (int)"},"status":-1},{"failures":[73,9,74,11,75,14,76,77,78,79,80],"tindex":"f2dcb363-8276-11e5-a6f2-fd5923573da4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.PillarInfo:93","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.Helper.intToDegree(int)"},"variableMap":{"intVal":"nodeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHNodeAccess:93","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.Helper.intToEle(com.graphhopper.storage.BaseGraph.com.graphhopper.storage.DataAccess.getInt(((((long)(int)) * (com.graphhopper.storage.BaseGraph.int)) + (com.graphhopper.storage.BaseGraph.int))))"},"status":-1},{"failures":[81,7,8,9,11,13,14,16,18,21,22,24,25],"tindex":"f2dcb364-8276-11e5-a6f2-e76290d79832","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:137","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.put(\"locationIndex.version\", com.graphhopper.util.Constants.int)"},"status":-1},{"failures":[],"tindex":"f2dcb365-8276-11e5-a6f2-399329ccf865","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:899","type":"CtInvocationImpl","sourcecode":"gnu.trove.list.TLongList.clear()"},"status":0},{"failures":[],"tindex":"f2dcda76-8276-11e5-a6f2-d9cffc8cd430","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PMap:56","type":"CtIfImpl","sourcecode":"if (int < 0)\n    continue;\n"},"variableMap":{"index":"javax.xml.stream.XMLStreamConstants.END_DOCUMENT"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:58","type":"CtWhileImpl","sourcecode":"while ((int != (javax.xml.stream.XMLStreamConstants.int)) && (javax.xml.stream.XMLStreamReader.getLocalName().equals(\"tag\"))) {\n    if (int == (javax.xml.stream.XMLStreamConstants.int)) {\n        java.lang.String java.lang.String = javax.xml.stream.XMLStreamReader.getAttributeValue(null, \"k\");\n        java.lang.String java.lang.String = javax.xml.stream.XMLStreamReader.getAttributeValue(null, \"v\");\n        if ((java.lang.String != null) && ((java.lang.String.length()) > 0))\n            com.graphhopper.reader.OSMElement.setTag(java.lang.String, java.lang.String);\n        \n    } \n    int = javax.xml.stream.XMLStreamReader.nextTag();\n}"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":19,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"f2dc8c4a-8276-11e5-a6f2-8bfad2bf80ba","diffs":[{"methodsDiff":{"delete":["java.lang.Math.sqrt","com.graphhopper.storage.index.Location2IDQuadtree.getCapacity","com.graphhopper.util.DistanceCalc.calcNormalizedDist"]},"type":"staticDiff"},{"branches":{"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":["com.graphhopper.util.DistancePlaneProjection_double_calcNormalizedDist(double).b"]},"type":"branch"}]},{"transformation":"f2dcb365-8276-11e5-a6f2-399329ccf865","diffs":[{"methodsDiff":{"delete":["gnu.trove.list.TLongList.clear"]},"type":"staticDiff"}]}]}
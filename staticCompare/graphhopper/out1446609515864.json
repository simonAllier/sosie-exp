{"failureDictionary":{"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAccess":47,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":37,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":72,"com.graphhopper.storage.SynchedDAWrapperTest.testRenameFlush":3,"com.graphhopper.reader.OSMReaderTest.testMain":29,"com.graphhopper.routing.util.EncodingManagerTest.testSupportFords":46,"com.graphhopper.reader.OSMReaderTest.testFerry":27,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":54,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijection":89,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":69,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":66,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":76,"com.graphhopper.routing.QueryGraphTest.testOneWay":79,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAccess":45,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":87,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":23,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":58,"com.graphhopper.routing.util.CarFlagEncoderTest.testFordAccess":43,"com.graphhopper.storage.UnsafeDataAccessTest.testHeader":16,"com.graphhopper.GHResponseTest.testToString":13,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":60,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":67,"com.graphhopper.geohash.SpatialKeyAlgoTest.testOddBits":85,"com.graphhopper.reader.OSMReaderTest.testWithBounds":38,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":62,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":34,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAccess":41,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":74,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":91,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":71,"com.graphhopper.coll.CompressedArrayTest.testCompress":84,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":68,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":39,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":64,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":92,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":86,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":93,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":21,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":44,"com.graphhopper.storage.RAMDataAccessTest.testRenameFlush":4,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":61,"com.graphhopper.GraphHopperTest.testPrepare":7,"com.graphhopper.GraphHopperTest.testFootAndCar":9,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":63,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAccess":48,"com.graphhopper.reader.OSMReaderTest.testFoot":28,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":77,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":78,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":55,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":81,"com.graphhopper.storage.UnsafeDataAccessTest.testLoadFlush":20,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":90,"com.graphhopper.reader.OSMReaderTest.testOneWay":40,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":80,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":59,"com.graphhopper.storage.UnsafeDataAccessTest.testEnsureCapacity":15,"com.graphhopper.geohash.SpatialKeyAlgoTest.testNoFurtherIterationIfBitsIs1":88,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":24,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":75,"com.graphhopper.GraphHopperTest.testPrepareOnly":22,"com.graphhopper.coll.CompressedArrayTest.testCompress2":83,"com.graphhopper.GraphHopperTest.testVia":6,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":12,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":70,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":56,"com.graphhopper.storage.MMapDataAccessTest.testRenameFlush":2,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":36,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":32,"com.graphhopper.GraphHopperAPITest.testLoad":5,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":33,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":10,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":65,"com.graphhopper.storage.RAMIntDataAccessTest.testRenameFlush":0,"com.graphhopper.storage.UnsafeDataAccessTest.testLoadClose":19,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":73,"com.graphhopper.GraphHopperTest.testFootOnly":25,"com.graphhopper.storage.RAMIntDataAccessTest.testSet_Get_Short_Long":82,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":8,"com.graphhopper.storage.UnsafeDataAccessTest.testCopy":14,"com.graphhopper.routing.util.FootFlagEncoderTest.testAccess":42,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":35,"com.graphhopper.storage.UnsafeDataAccessTest.testRenameFlush":1,"com.graphhopper.reader.OSMReaderTest.testBarriers":31,"com.graphhopper.storage.UnsafeDataAccessTest.testSegments":18,"com.graphhopper.GraphHopperTest.testLoadOSM":11,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":26,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":49,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":57,"com.graphhopper.storage.UnsafeDataAccessTest.testTrimTo":17,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":53,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":52,"com.graphhopper.reader.OSMReaderTest.testSort":30,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":51,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":94,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":50},"transformations":[{"failures":[],"tindex":"52bd6afc-82a8-11e5-a45a-0b968aea005a","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:82","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalThreadStateException(\"already created\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:129","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(\"already closed\")"},"status":-2},{"failures":[],"tindex":"52bdb91d-82a8-11e5-a45a-b39c8ee42059","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:152","type":"CtIfImpl","sourcecode":"if (long < 0) {\n    return false;\n} "},"variableMap":{"byteCount":"newBytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:105","type":"CtIfImpl","sourcecode":"if (long <= 0)\n    return false;\n"},"status":0},{"failures":[0,1,2,3,4],"tindex":"52bdb91e-82a8-11e5-a45a-6987422bc9b2","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.TranslationMap:225","type":"CtIfImpl","sourcecode":"if (java.lang.String != null)\n    throw new java.lang.IllegalStateException((((((\"Cannot overwrite key \" + java.lang.String) + \" with \") + java.lang.String) + \", was: \") + java.lang.String));\n"},"variableMap":{"val":"name","existing":"location","key":"location"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:207","type":"CtIfImpl","sourcecode":"if (java.io.File.exists()) {\n    try {\n        if (!(java.io.File.renameTo(new java.io.File(((java.lang.String) + java.lang.String))))) {\n            throw new java.lang.IllegalStateException((((\"Couldn\\'t rename this \" + com.graphhopper.storage.DataAccess.(getType())) + \" object to \") + java.lang.String));\n        } \n        java.lang.String = java.lang.String;\n    } catch (java.lang.Exception ex) {\n        throw new java.lang.IllegalStateException(((\"Couldn\\'t rename this \" + com.graphhopper.storage.DataAccess.(getType())) + \" object!\") , java.lang.Exception);\n    }\n} else {\n    throw new java.lang.IllegalStateException((((\"File does not exist!? \" + com.graphhopper.storage.AbstractDataAccess.(getFullName())) + \" Make sure that you flushed before renaming. Otherwise it could make problems\") + \" for memory mapped DataAccess objects\"));\n}"},"status":-1},{"failures":[5,6,7,8,9,10,11,12,13],"tindex":"52bdb91f-82a8-11e5-a45a-77a1fd6d2170","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GHResponse:92","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.PointList = com.graphhopper.util.PointList"},"variableMap":{"list":"pl","points":"pl"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:65","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.PointList = new com.graphhopper.util.PointList(((com.graphhopper.util.InstructionList.size()) * (java.lang.Math.min(10, com.graphhopper.util.PointList.size()))) , com.graphhopper.util.PointList.is3D())"},"status":-1},{"failures":[],"tindex":"52bde030-82a8-11e5-a45a-434465874a37","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:60","type":"CtAssignmentImpl","sourcecode":"float = 2"},"variableMap":{"factor":"factor"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHLongIntBTree:68","type":"CtAssignmentImpl","sourcecode":"float = 1.7F"},"status":0},{"failures":[],"tindex":"52bde031-82a8-11e5-a45a-c150ca4c9fa6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:75","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.incCap((int + 1))"},"variableMap":{"this":"points","nodeId":"searchIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:115","type":"CtIfImpl","sourcecode":"if (java.lang.Double.isNaN(com.graphhopper.util.PointList.getLatitude(int))) {\n    int = int;\n    break;\n} "},"status":-2},{"failures":[],"tindex":"52bde032-82a8-11e5-a45a-19481451c71b","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:337","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.CHGraphImpl.CHEdgeIteratorImpl.checkShortcut(true, \"getSkippedEdge2\")"},"variableMap":{"this":"inEdgeExplorer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:169","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.DijkstraBidirectionRef.fillEdges(com.graphhopper.storage.EdgeEntry, java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>, gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry>, com.graphhopper.util.EdgeExplorer, true)"},"status":-2},{"failures":[],"tindex":"52be0743-82a8-11e5-a45a-35c6133c0aa1","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:754","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.EdgeAccess.writeEdge(int, int, int, int, int)"},"variableMap":{"edgeAccess":"this","edgeId":"fromNodeId","updatedB":"fromNodeId","updatedA":"fromNodeId","linkA":"com.graphhopper.util.EdgeIterator.NO_EDGE","linkB":"com.graphhopper.util.EdgeIterator.NO_EDGE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:143","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.EdgeAccess.writeEdge(int, int, int, com.graphhopper.util.EdgeIterator.int, com.graphhopper.util.EdgeIterator.int)"},"status":-2},{"failures":[14,1,15,16,17,18,19,20],"tindex":"52be0744-82a8-11e5-a45a-7bc64a59c640","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:288","type":"CtReturnImpl","sourcecode":"return long ^ (long)"},"variableMap":{"directionBitMask":"capacity","flags":"capacity"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:255","type":"CtReturnImpl","sourcecode":"return long"},"status":-1},{"failures":[],"tindex":"52be0745-82a8-11e5-a45a-ed9e8cc94ee2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.VirtualEdgeIterator:138","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.util.EdgeIteratorState>.get(int)"},"status":0},{"failures":[21,22,23,6,7,8,9,10,11,24,12,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"tindex":"52be0746-82a8-11e5-a45a-9fdc18f8984a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:199","type":"CtIfImpl","sourcecode":"if (int > 1000)\n    throw new java.lang.IllegalStateException(\"something went wrong: there seems to be no end of the turn cost-list!?\");\n"},"variableMap":{"i":"com.graphhopper.reader.OSMReader.TOWER_NODE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:635","type":"CtIfImpl","sourcecode":"if (int == (com.graphhopper.reader.OSMReader.int)) {\n    com.graphhopper.reader.OSMReader.getNodeMap().put(long, com.graphhopper.reader.OSMReader.int);\n} else if (int > (com.graphhopper.reader.OSMReader.int)) {\n    com.graphhopper.reader.OSMReader.getNodeMap().put(long, com.graphhopper.reader.OSMReader.int);\n} else {\n}"},"status":-1},{"failures":[41,42,43,44,45,46,47,48],"tindex":"52be2e57-82a8-11e5-a45a-c5ba6a26bef8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionAnnotation:43","type":"CtAssignmentImpl","sourcecode":"this.boolean = false"},"variableMap":{"empty":"blockFords"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:149","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"status":-1},{"failures":[],"tindex":"52be2e58-82a8-11e5-a45a-bba38c2fce22","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:219","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"\\' lon=\\'\").append(com.graphhopper.util.Helper.round6(com.graphhopper.util.GPXEntry.getLon()))"},"status":0},{"failures":[],"tindex":"52be2e59-82a8-11e5-a45a-d17c41883687","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:136","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.split(\"\\\\|\")[0]"},"variableMap":{"entry":"newName"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:354","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String"},"status":0},{"failures":[49,50,51,52,53,6,7,8,9,10,11,12,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"tindex":"52be2e5a-82a8-11e5-a45a-8f1c06649708","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:416","type":"CtAssignmentImpl","sourcecode":"double = double[][int]"},"status":-1},{"failures":[68,49,50,51,52,53,6,7,8,9,10,11,12,57,60,61,63,67,69,70,71,72,73,74,75,76,77,78,79,80,81],"tindex":"52be556b-82a8-11e5-a45a-1d50d2ae87fc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:135","type":"CtOperatorAssignmentImpl","sourcecode":"int -= int"},"variableMap":{"err":"current","dLat":"current"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.VirtualEdgeIterator:45","type":"CtAssignmentImpl","sourcecode":"int = -1"},"status":-1},{"failures":[82],"tindex":"52be556c-82a8-11e5-a45a-c914552cd5c2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:183","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)((java.lang.Math.log(int)) / (java.lang.Math.log(2))))"},"variableMap":{"bytes":"indexDivisor"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:255","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long & (int)))"},"status":-1},{"failures":[],"tindex":"52be556d-82a8-11e5-a45a-bf01b273e316","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:103","type":"CtLocalVariableImpl","sourcecode":"long long"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMInputFile:190","type":"CtLocalVariableImpl","sourcecode":"long long = 0"},"status":-2},{"failures":[83,84,85,86,87,88,89,90],"tindex":"52be556e-82a8-11e5-a45a-bd331602a8ed","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:789","type":"CtAssignmentImpl","sourcecode":"double = 1.0E-4"},"variableMap":{"towerNodeDistance":"lat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:245","type":"CtOperatorAssignmentImpl","sourcecode":"double += double"},"status":-1},{"failures":[91,41,92,45,93,47,94,48],"tindex":"52be7c7f-82a8-11e5-a45a-0fa0e4590f8d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:286","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.reader.OSMWay.hasTag(\"highway\", \"cycleway\")) && (com.graphhopper.reader.OSMWay.hasTag(\"sac_scale\", \"hiking\")))\n    return long;\n"},"variableMap":{"acceptBit":"acceptBit","way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:261","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"bicycle\", java.util.Set<java.lang.String>))\n    return long;\n"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"52be2e58-82a8-11e5-a45a-bba38c2fce22","diffs":[{"methodsDiff":{"delete":["java.lang.StringBuilder.append","com.graphhopper.util.Helper.round6","com.graphhopper.util.shapes.GHPoint.getLon"]},"type":"staticDiff"}]},{"transformation":"52be0745-82a8-11e5-a45a-ed9e8cc94ee2","diffs":[{"methodsDiff":{"delete":["java.util.List<com.graphhopper.util.EdgeIteratorState>.get"]},"type":"staticDiff"}]}]}
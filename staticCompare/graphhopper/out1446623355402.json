{"failureDictionary":{"com.graphhopper.routing.util.FootFlagEncoderTest.testPriority":100,"com.graphhopper.routing.util.EncodedDoubleValueTest.testMaxValueAndSwap":75,"com.graphhopper.GraphHopperAPITest.testNoLoad":70,"com.graphhopper.reader.OSMReaderTest.testFerry":176,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":43,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":44,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":12,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testService":129,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":55,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTram":130,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":3,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidanceOfHighMaxSpeed":128,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":4,"com.graphhopper.reader.OSMReaderTest.testWithBounds":188,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAccess":95,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":78,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":196,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":79,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testReduceToMaxSpeed":133,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":194,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":122,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":153,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":47,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testReduceToMaxSpeed":94,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":135,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":159,"com.graphhopper.GraphHopperTest.testPrepare":57,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":149,"com.graphhopper.util.InstructionListTest.testWayList":29,"com.graphhopper.routing.util.BikeFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":9,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":28,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":21,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":46,"com.graphhopper.GraphHopperAPITest.testDisconnected179":69,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":83,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":20,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":7,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":63,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPreferenceForSlowSpeed":19,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":80,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidTunnel":91,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":172,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":175,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":82,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":182,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":13,"com.graphhopper.GraphHopperTest.testNoNPE_ifLoadNotSuccessful":67,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":164,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":106,"com.graphhopper.routing.util.BikeFlagEncoderTest.testReduceToMaxSpeed":118,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":58,"com.graphhopper.routing.util.EncodedValueTest.testSwap":5,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":162,"com.graphhopper.GraphHopperTest.testLoadOSM":61,"com.graphhopper.routing.util.FootFlagEncoderTest.handleWayTagsRoundabout":98,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":160,"com.graphhopper.reader.OSMReaderTest.testSort":179,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":81,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":187,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":158,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTram":138,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":17,"com.graphhopper.storage.GraphHopperStorageTest.testNoCreateCalled":71,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":173,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":120,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":163,"com.graphhopper.routing.PathTest.testWayList":169,"com.graphhopper.routing.util.CarFlagEncoderTest.testFordAccess":109,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testAcceptsCar":114,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":117,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":1,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":145,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":195,"com.graphhopper.GraphHopperTest.testFailsForMissingParameters":62,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":2,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":22,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":171,"com.graphhopper.util.GHUtilityTest.testSort":41,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":197,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidMotorway":16,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNoCreateCalled":74,"com.graphhopper.routing.util.FootFlagEncoderTest.testRailPlatformIssue366":102,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":88,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":64,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":137,"com.graphhopper.storage.GraphHopperStorageCHTest.testNoCreateCalled":73,"com.graphhopper.GraphHopperAPITest.testLoad":68,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":60,"com.graphhopper.util.TranslationMapTest.testToString":36,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":77,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":84,"com.graphhopper.reader.OSMReaderTest.testBarriers":180,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testclassBicycle":87,"com.graphhopper.routing.PathTest.testFound":165,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":66,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":124,"com.graphhopper.util.GHUtilityTest.testCopy":40,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":141,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPreferenceForSlowSpeed":136,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAccess":134,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidTunnel":15,"com.graphhopper.routing.PathTest.testFindInstruction":170,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":45,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPreferenceForSlowSpeed":97,"com.graphhopper.util.InstructionListTest.testEmptyList":26,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":103,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testReduceToMaxSpeed":142,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":86,"com.graphhopper.routing.util.CarFlagEncoderTest.testSetToMaxSpeed":105,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":38,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":155,"com.graphhopper.reader.PrinctonReaderTest.testRead":174,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":93,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTram":90,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":132,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPreferenceForSlowSpeed":146,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidTunnel":139,"com.graphhopper.util.InstructionListTest.testWayList2":33,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":0,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":96,"com.graphhopper.routing.util.BikeFlagEncoderTest.testclassBicycle":11,"com.graphhopper.reader.OSMReaderTest.testFoot":177,"com.graphhopper.reader.OSMReaderTest.testOneWay":191,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":10,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":8,"com.graphhopper.storage.SynchedDAWrapperTest.testSet_GetBytes":192,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidMotorway":131,"com.graphhopper.util.TranslationMapTest.testToRoundaboutString":37,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":181,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":168,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":154,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxValue":111,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":116,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":151,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":161,"com.graphhopper.routing.util.FootFlagEncoderTest.testAccess":104,"com.graphhopper.routing.PathBidirRefTest.testExtract":147,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":152,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTram":14,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":35,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":54,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":99,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":49,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testclassBicycle":127,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":53,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":52,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":51,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":125,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":50,"com.graphhopper.util.GHUtilityTest.testSort2":39,"com.graphhopper.reader.OSMReaderTest.testMain":178,"com.graphhopper.routing.util.EncodingManagerTest.testSupportFords":121,"com.graphhopper.routing.util.CarFlagEncoderTest.testRoundabout":108,"com.graphhopper.reader.OSMReaderTest.testEstimatedCenter":190,"com.graphhopper.util.InstructionListTest.testRoundaboutJsonNaN":31,"com.graphhopper.routing.PathBidirRefTest.testExtract2":148,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAccess":119,"com.graphhopper.routing.util.CarFlagEncoderTest.testSpeed":107,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":24,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":76,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":144,"com.graphhopper.routing.util.EncodedValueTest.testSetValue":6,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":183,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":101,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":85,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":189,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidMotorway":92,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":157,"com.graphhopper.storage.RAMDataAccessTest.testSet_GetBytes":193,"com.graphhopper.routing.util.CarFlagEncoderTest.testAccess":112,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxSpeed":110,"com.graphhopper.GraphHopperTest.testFootAndCar":59,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":89,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAccess":143,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":23,"com.graphhopper.routing.PathTest.testTime":166,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidMotorway":140,"com.graphhopper.util.InstructionListTest.testCreateGPX":32,"com.graphhopper.routing.util.CarFlagEncoderTest.testOneway":113,"com.graphhopper.util.InstructionListTest.testRoundaboutJsonIntegrity":27,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":156,"com.graphhopper.util.GHUtilityTest.testSortDirected":42,"com.graphhopper.GraphHopperTest.testPrepareOnly":48,"com.graphhopper.GraphHopperTest.testVia":56,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":18,"com.graphhopper.util.InstructionListTest.testCreateGPXWithEle":30,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":186,"com.graphhopper.reader.OSMReaderTest.testTurnFlagCombination":185,"com.graphhopper.util.shapes.CircleTest.testIntersectCircleBBox":198,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":72,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":34,"com.graphhopper.GraphHopperTest.testFootOnly":65,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidTunnel":126,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":184,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":167,"com.graphhopper.util.InstructionListTest.testFind":25,"com.graphhopper.routing.util.MotorcycleFlagEncoderTest.testHandleWayTags":115,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":123,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":150},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"tindex":"8bcfce7c-82c8-11e5-a88a-6961c9450541","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:91","type":"CtUnaryOperatorImpl","sourcecode":"(long)++"},"variableMap":{"size":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedValue:94","type":"CtOperatorAssignmentImpl","sourcecode":"long &= long"},"status":-1},{"failures":[],"tindex":"8bd302cd-82c8-11e5-a88a-735b6163604f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:265","type":"CtInvocationImpl","sourcecode":"((java.nio.MappedByteBuffer)(java.nio.ByteBuffer)).force()"},"status":0},{"failures":[],"tindex":"8bd302ce-82c8-11e5-a88a-ad5e29d5c81e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:1133","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.PrepareRoutingSubnetworks.setMinNetworkSize(int)"},"variableMap":{"minNetworkSize":"minOneWayNetworkSize","preparation":"preparation"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1134","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.PrepareRoutingSubnetworks.setMinOneWayNetworkSize(int)"},"status":0},{"failures":[],"tindex":"8bd302cf-82c8-11e5-a88a-8f9f060cf0d6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:526","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"bicycle\", \"designated\"))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(100.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"variableMap":{"weightToPrioMap":"weightToPrioMap","com.graphhopper.routing.util.PriorityCode.PREFER":"com.graphhopper.routing.util.PriorityCode.PREFER","way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:534","type":"CtIfImpl","sourcecode":"if (double < (int)) {\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(40.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    if (com.graphhopper.reader.OSMWay.hasTag(\"tunnel\", java.util.Set<java.lang.String>))\n        java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(40.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    \n} "},"status":-2},{"failures":[25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,0,86,1,87,88,2,89,90,91,92,93,94,3,95,96,4,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,7,8,9,10,11,12,13,116,14,15,16,117,118,17,119,18,120,19,121,122,123,124,125,126,127,20,128,129,130,131,132,133,21,134,135,136,137,22,23,138,139,140,141,142,24,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191],"tindex":"8bd329e0-82c8-11e5-a88a-35f854e50554","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:298","type":"CtReturnImpl","sourcecode":"return \"hiking\".equals(java.lang.String)"},"variableMap":{"sacScale":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:277","type":"CtReturnImpl","sourcecode":"return (java.lang.String == null) || ((java.lang.String.trim().length()) == 0)"},"status":-1},{"failures":[],"tindex":"8bd350f1-82c8-11e5-a88a-7f513b51e1da","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:128","type":"CtLocalVariableImpl","sourcecode":"double double = 360.0 / 16"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.QueryResult:179","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.PointList.getLatitude(((int) + 1))"},"status":-2},{"failures":[192,193],"tindex":"8bd350f2-82c8-11e5-a88a-658af9382340","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:408","type":"CtAssignmentImpl","sourcecode":"int = (com.graphhopper.routing.util.BikeCommonFlagEncoder.int) / 2"},"variableMap":{"com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED":"length","speed":"delta"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:290","type":"CtOperatorAssignmentImpl","sourcecode":"int -= int"},"status":-1},{"failures":[],"tindex":"8bd350f3-82c8-11e5-a88a-25bea2168911","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:247","type":"CtReturnImpl","sourcecode":"return (long) | (long)"},"variableMap":{"acceptBit":"directionBitMask","ferryBit":"directionBitMask"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:264","type":"CtReturnImpl","sourcecode":"return long"},"status":0},{"failures":[49,50,52,53,57,58,59,60,61,64,194,195,196,197],"tindex":"8bd350f4-82c8-11e5-a88a-09860deca012","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.CompressedArray:72","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"variableMap":{"compressionLevel":"towerNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:636","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.util.EdgeIteratorState.getAdjNode()"},"status":-1},{"failures":[],"tindex":"8bd37805-82c8-11e5-a88a-dd9cde9f853f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:118","type":"CtIfImpl","sourcecode":"if (long == (long + long))\n    return ~(long + long);\n"},"variableMap":{"high":"res","len":"res","start":"res"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtil:263","type":"CtReturnImpl","sourcecode":"return long"},"status":-2},{"failures":[],"tindex":"8bd37806-82c8-11e5-a88a-47db52f479d4","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:122","type":"CtIfImpl","sourcecode":"if (boolean)\n    return com.graphhopper.routing.util.EncodedDoubleValue.setDefaultValue(long);\n"},"variableMap":{"flags":"flags","backward":"reverse","reverseSpeedEncoder":"reverseSpeedEncoder"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:112","type":"CtIfImpl","sourcecode":"if (boolean)\n    return com.graphhopper.routing.util.BikeCommonFlagEncoder.setBool(com.graphhopper.routing.util.EncodedDoubleValue.setDoubleValue(long, 0), com.graphhopper.routing.util.AbstractFlagEncoder.int, false);\n"},"status":0},{"failures":[109],"tindex":"8bd37807-82c8-11e5-a88a-377b46578c64","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:239","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMNode.hasTag(\"barrier\", java.util.Set<java.lang.String>)) {\n    boolean boolean = false;\n    if (com.graphhopper.reader.OSMNode.hasTag(\"locked\", \"yes\"))\n        boolean = true;\n    \n    for (java.lang.String java.lang.String : java.util.List<java.lang.String>) {\n        if ((!boolean) && (com.graphhopper.reader.OSMNode.hasTag(java.lang.String, java.util.Set<java.lang.String>)))\n            return 0;\n        \n        if (com.graphhopper.reader.OSMNode.hasTag(java.lang.String, java.util.Set<java.lang.String>))\n            return long;\n        \n    }\n    if (boolean)\n        return long;\n    \n} "},"variableMap":{"node":"node","directionBitMask":"directionBitMask","intendedValues":"intendedValues","restrictedValues":"intendedValues","potentialBarriers":"intendedValues","restrictions":"restrictions","blockByDefault":"blockFords"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:259","type":"CtIfImpl","sourcecode":"if ((((boolean) && ((com.graphhopper.reader.OSMNode.hasTag(\"highway\", \"ford\")) || (com.graphhopper.reader.OSMNode.hasTag(\"ford\")))) && (!(com.graphhopper.reader.OSMNode.hasTag(java.util.List<java.lang.String>, java.util.Set<java.lang.String>)))) && (!(com.graphhopper.reader.OSMNode.hasTag(\"ford\", \"no\")))) {\n    return long;\n} "},"status":-1},{"failures":[],"tindex":"8bd39f18-82c8-11e5-a88a-5103378d3736","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:194","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:114","type":"CtReturnImpl","sourcecode":"return false"},"status":0},{"failures":[],"tindex":"8bd39f19-82c8-11e5-a88a-5f3463881738","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:146","type":"CtAssignmentImpl","sourcecode":"double = double * double"},"variableMap":{"tmp":"weight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Dijkstra:105","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry.double = double"},"status":-2},{"failures":[],"tindex":"8bd39f1a-82c8-11e5-a88a-5d0893b3a498","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:363","type":"CtLocalVariableImpl","sourcecode":"int int = (int + int) - (int)"},"variableMap":{"segmentSizeInBytes":"indexDivisor","length":"indexDivisor","index":"indexDivisor"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:271","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long & (int)))"},"status":-2},{"failures":[33],"tindex":"8bd3c62b-82c8-11e5-a88a-1d09ed119352","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:282","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[198],"tindex":"8bd3c62c-82c8-11e5-a88a-9901086909ec","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.shapes.BBox:168","type":"CtReturnImpl","sourcecode":"return ((com.graphhopper.util.shapes.Circle)(com.graphhopper.util.shapes.Circle)).intersect(this)"},"status":-1},{"failures":[],"tindex":"8bd3c62d-82c8-11e5-a88a-f3a138165ae5","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:707","type":"CtReturnImpl","sourcecode":"return (long & (long)) != 0"},"status":-2},{"failures":[],"tindex":"8bd3c62e-82c8-11e5-a88a-c58c7658dca1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:878","type":"CtIfImpl","sourcecode":"if (int == 0)\n    return com.graphhopper.util.PointList.com.graphhopper.util.PointList;\n"},"variableMap":{"mode":"mode","com.graphhopper.util.PointList.EMPTY":"com.graphhopper.util.PointList.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:870","type":"CtIfImpl","sourcecode":"if (long > 0) {\n    long *= 4;\n    int = com.graphhopper.storage.DataAccess.getInt(long);\n    long += 4;\n    byte[] = new byte[(int * (com.graphhopper.storage.NodeAccess.getDimension())) * 4];\n    com.graphhopper.storage.DataAccess.getBytes(long, byte[], byte[].int);\n} else if (int == 0)\n    return com.graphhopper.util.PointList.com.graphhopper.util.PointList;\n"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":19,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"8bd302cd-82c8-11e5-a88a-735b6163604f","diffs":[{"methodsDiff":{"delete":["java.nio.MappedByteBuffer.force"]},"type":"staticDiff"}]},{"transformation":"8bd302ce-82c8-11e5-a88a-ad5e29d5c81e","diffs":[{"branches":{"com.graphhopper.reader.OSMReaderTest.testNegativeIds":["com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_goFurther(int).t1","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_removeEdges(com.graphhopper.util.EdgeExplorer,com.graphhopper.routing.util.FlagEncoder,gnu.trove.list.TIntList,int).t1","com.graphhopper.coll.GHBitSetImpl_boolean_contains(int).b","com.graphhopper.coll.GHBitSetImpl_com.graphhopper.coll.GHBitSetImpl(int).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_removeEdges(com.graphhopper.util.EdgeExplorer,com.graphhopper.routing.util.FlagEncoder,gnu.trove.list.TIntList,int).l2","com.graphhopper.storage.GraphHopperStorage_void_optimize().t2","com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter_com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter(com.graphhopper.routing.util.FlagEncoder).b","com.graphhopper.util.SimpleIntDeque_com.graphhopper.util.SimpleIntDeque(int,float).e1","com.graphhopper.util.SimpleIntDeque_com.graphhopper.util.SimpleIntDeque(int,float).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_com.graphhopper.routing.util.PrepareRoutingSubnetworks_setMinOneWayNetworkSize(int).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_java.util.List_findSubnetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_boolean_detectNodeRemovedForAllEncoders(com.graphhopper.util.EdgeExplorer,int).e1","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_goFurther(int).t3","com.graphhopper.util.SimpleIntDeque_int_pop().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_doWork().e1","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_doWork().e2","com.graphhopper.routing.util.EdgeFilter$1_boolean_accept(com.graphhopper.util.EdgeIteratorState).b","com.graphhopper.storage.BaseGraph$EdgeIterable_boolean_next().e2","com.graphhopper.routing.util.PrepareRoutingSubnetworks_java.util.List_findSubnetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter).t1","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_checkAdjacent(com.graphhopper.util.EdgeIteratorState).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_doWork().t1","com.graphhopper.routing.util.PrepareRoutingSubnetworks_java.util.List_findSubnetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter).l4","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_markNodesRemovedIfUnreachable().l2","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_markNodesRemovedIfUnreachable().b","com.graphhopper.storage.BaseGraph_com.graphhopper.util.EdgeExplorer_createEdgeExplorer().b","com.graphhopper.util.BreadthFirstSearch_void_start(com.graphhopper.util.EdgeExplorer,int).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_doWork().l3","com.graphhopper.util.BreadthFirstSearch_void_start(com.graphhopper.util.EdgeExplorer,int).e2","com.graphhopper.util.BreadthFirstSearch_void_start(com.graphhopper.util.EdgeExplorer,int).e1","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_checkAdjacent(com.graphhopper.util.EdgeIteratorState).t1","com.graphhopper.storage.BaseGraph$CommonEdgeIterator_boolean_isBackward(com.graphhopper.routing.util.FlagEncoder).b","com.graphhopper.storage.GraphHopperStorage_boolean_isFrozen().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_checkAdjacent(com.graphhopper.util.EdgeIteratorState).t2","com.graphhopper.storage.BaseGraph$CommonEdgeIterator_long_getDirectFlags().e1","com.graphhopper.coll.GHBitSetImpl_void_add(int).b","com.graphhopper.util.BreadthFirstSearch_void_start(com.graphhopper.util.EdgeExplorer,int).t2","com.graphhopper.util.BreadthFirstSearch_void_start(com.graphhopper.util.EdgeExplorer,int).l3","com.graphhopper.util.BreadthFirstSearch_void_start(com.graphhopper.util.EdgeExplorer,int).l4","com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter_com.graphhopper.routing.util.FlagEncoder_getEncoder().b","com.graphhopper.util.SimpleIntDeque_com.graphhopper.util.SimpleIntDeque().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_goFurther(int).e1","com.graphhopper.routing.util.DefaultEdgeFilter_com.graphhopper.routing.util.DefaultEdgeFilter(com.graphhopper.routing.util.FlagEncoder).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_goFurther(int).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_boolean_detectNodeRemovedForAllEncoders(com.graphhopper.util.EdgeExplorer,int).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).t2","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).t1","com.graphhopper.storage.BaseGraph_com.graphhopper.coll.GHBitSet_getRemovedNodes().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).l5","com.graphhopper.util.SimpleIntDeque_void_push(int).e1","com.graphhopper.util.SimpleIntDeque_void_push(int).b","com.graphhopper.storage.GraphHopperStorage_void_optimize().e1","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_removeEdges(com.graphhopper.util.EdgeExplorer,com.graphhopper.routing.util.FlagEncoder,gnu.trove.list.TIntList,int).b","com.graphhopper.util.SimpleIntDeque_int_pop().e1","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_goFurther(int).e3","com.graphhopper.routing.util.PrepareRoutingSubnetworks_boolean_detectNodeRemovedForAllEncoders(com.graphhopper.util.EdgeExplorer,int).t1","com.graphhopper.routing.util.PrepareRoutingSubnetworks_boolean_detectNodeRemovedForAllEncoders(com.graphhopper.util.EdgeExplorer,int).l3","com.graphhopper.routing.util.AbstractFlagEncoder_boolean_isBackward(long).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_boolean_detectNodeRemovedForAllEncoders(com.graphhopper.util.EdgeExplorer,int).l2","com.graphhopper.storage.BaseGraph$CommonEdgeIterator_long_getFlags().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).e4","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).e3","com.graphhopper.storage.GraphHopperStorage_com.graphhopper.util.EdgeExplorer_createEdgeExplorer().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).e2","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).e1","com.graphhopper.util.SimpleIntDeque_boolean_isEmpty().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).b","com.graphhopper.storage.GraphHopperStorage_void_optimize().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_com.graphhopper.coll.GHBitSet_createBitSet().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_markNodesRemovedIfUnreachable().e1","com.graphhopper.routing.util.PrepareRoutingSubnetworks_java.util.List_findSubnetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter).e1","com.graphhopper.coll.GHBitSetImpl_int_getCardinality().b","com.graphhopper.storage.BaseGraph_com.graphhopper.coll.GHBitSet_getRemovedNodes().t1"],"com.graphhopper.GraphHopperTest.testFootAndCar":["com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_goFurther(int).t1","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_removeEdges(com.graphhopper.util.EdgeExplorer,com.graphhopper.routing.util.FlagEncoder,gnu.trove.list.TIntList,int).t1","com.graphhopper.coll.GHBitSetImpl_boolean_contains(int).b","com.graphhopper.coll.GHBitSetImpl_com.graphhopper.coll.GHBitSetImpl(int).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_removeEdges(com.graphhopper.util.EdgeExplorer,com.graphhopper.routing.util.FlagEncoder,gnu.trove.list.TIntList,int).l2","com.graphhopper.storage.GraphHopperStorage_void_optimize().t2","com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter_com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter(com.graphhopper.routing.util.FlagEncoder).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_com.graphhopper.routing.util.PrepareRoutingSubnetworks_setMinOneWayNetworkSize(int).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_boolean_detectNodeRemovedForAllEncoders(com.graphhopper.util.EdgeExplorer,int).e1","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_goFurther(int).t3","com.graphhopper.routing.util.PrepareRoutingSubnetworks_java.util.List_findSubnetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_doWork().e1","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_doWork().e2","com.graphhopper.routing.util.PrepareRoutingSubnetworks_java.util.List_findSubnetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter).t1","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_checkAdjacent(com.graphhopper.util.EdgeIteratorState).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_doWork().t1","com.graphhopper.routing.util.PrepareRoutingSubnetworks_java.util.List_findSubnetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter).l4","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_markNodesRemovedIfUnreachable().l2","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_markNodesRemovedIfUnreachable().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_doWork().l3","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_checkAdjacent(com.graphhopper.util.EdgeIteratorState).t1","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_checkAdjacent(com.graphhopper.util.EdgeIteratorState).t2","com.graphhopper.storage.GraphHopperStorage_boolean_isFrozen().b","com.graphhopper.coll.GHBitSetImpl_void_add(int).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter_com.graphhopper.routing.util.FlagEncoder_getEncoder().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_goFurther(int).e1","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_goFurther(int).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_boolean_detectNodeRemovedForAllEncoders(com.graphhopper.util.EdgeExplorer,int).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).t2","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).t1","com.graphhopper.storage.BaseGraph_com.graphhopper.coll.GHBitSet_getRemovedNodes().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).l5","com.graphhopper.storage.GraphHopperStorage_void_optimize().e1","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_removeEdges(com.graphhopper.util.EdgeExplorer,com.graphhopper.routing.util.FlagEncoder,gnu.trove.list.TIntList,int).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_boolean_detectNodeRemovedForAllEncoders(com.graphhopper.util.EdgeExplorer,int).t1","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_boolean_goFurther(int).e3","com.graphhopper.routing.util.PrepareRoutingSubnetworks_boolean_detectNodeRemovedForAllEncoders(com.graphhopper.util.EdgeExplorer,int).l3","com.graphhopper.routing.util.PrepareRoutingSubnetworks_boolean_detectNodeRemovedForAllEncoders(com.graphhopper.util.EdgeExplorer,int).l2","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).e4","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).e3","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).e2","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).e1","com.graphhopper.storage.GraphHopperStorage_void_optimize().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_int_keepLargeNetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter,java.util.List).b","com.graphhopper.routing.util.PrepareRoutingSubnetworks$1_com.graphhopper.coll.GHBitSet_createBitSet().b","com.graphhopper.routing.util.PrepareRoutingSubnetworks_void_markNodesRemovedIfUnreachable().e1","com.graphhopper.routing.util.PrepareRoutingSubnetworks_java.util.List_findSubnetworks(com.graphhopper.routing.util.PrepareRoutingSubnetworks$PrepEdgeFilter).e1","com.graphhopper.coll.GHBitSetImpl_int_getCardinality().b","com.graphhopper.storage.BaseGraph_com.graphhopper.coll.GHBitSet_getRemovedNodes().t1"]},"type":"branch"},{"methodsDiff":{"delete":["com.graphhopper.routing.util.PrepareRoutingSubnetworks.setMinOneWayNetworkSize"]},"type":"staticDiff"}]},{"transformation":"8bd39f18-82c8-11e5-a88a-5103378d3736","diffs":[{"branches":{"com.graphhopper.storage.index.LocationIndexTreeCHTest.testNoErrorOnEdgeCase_lastIndex":["com.graphhopper.storage.BaseGraph_void_ensureNodeIndex(int).t3","com.graphhopper.storage.BaseGraph_void_ensureNodeIndex(int).e3"],"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":["com.graphhopper.storage.BaseGraph_void_ensureNodeIndex(int).t3","com.graphhopper.storage.BaseGraph_void_ensureNodeIndex(int).e3"]},"type":"branch"}]}]}
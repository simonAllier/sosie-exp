{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":184,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":209,"com.graphhopper.routing.util.FootFlagEncoderTest.testPriority":273,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":216,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":22,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":53,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":91,"com.graphhopper.reader.OSMReaderTest.testFerry":240,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":15,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":16,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":206,"com.graphhopper.routing.QueryGraphTest.testOneWay":215,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":133,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":262,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":49,"com.graphhopper.reader.OSMReaderTest.testWithBounds":251,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":100,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":211,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":223,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":224,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":194,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":76,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":254,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":26,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":132,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":30,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":201,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":110,"com.graphhopper.GraphHopperTest.testPrepare":264,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":183,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":68,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":80,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":190,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":213,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":166,"com.graphhopper.util.InstructionListTest.testWayList":1,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":13,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":175,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":19,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":112,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":228,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":96,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":269,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":48,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":225,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":167,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":172,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":50,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":237,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":239,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":227,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":246,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":122,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":231,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":103,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":111,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":265,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":64,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":159,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":163,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":161,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":160,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":204,"com.graphhopper.GraphHopperTest.testLoadOSM":268,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":57,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":202,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":36,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":51,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":83,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":118,"com.graphhopper.reader.OSMReaderTest.testSort":243,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":178,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":226,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":250,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":66,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":198,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":40,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":41,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":142,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":188,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":253,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":230,"com.graphhopper.routing.PathTest.testWayList":234,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":45,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":99,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":126,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":189,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":73,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":4,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":173,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":208,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":35,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":129,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":147,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":143,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":114,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":72,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":148,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":46,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":79,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":180,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":236,"com.graphhopper.util.GHUtilityTest.testSort":10,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":97,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":54,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":214,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":170,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":169,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":164,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":23,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":157,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":27,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":113,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":212,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":219,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":270,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":82,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":20,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":151,"com.graphhopper.GraphHopperAPITest.testLoad":0,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":267,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":187,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":77,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":222,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":70,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":144,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":229,"com.graphhopper.reader.OSMReaderTest.testBarriers":244,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":106,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":272,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":31,"com.graphhopper.util.GHUtilityTest.testCopy":9,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":94,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":171,"com.graphhopper.routing.PathTest.testFindInstruction":235,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":3,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":18,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":145,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":153,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":98,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":75,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":174,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":21,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":179,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":81,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":162,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":182,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":138,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":5,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":154,"com.graphhopper.reader.PrinctonReaderTest.testRead":238,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":88,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":125,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":149,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":90,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":116,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":67,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":200,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":205,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":155,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":134,"com.graphhopper.util.InstructionListTest.testWayList2":14,"com.graphhopper.reader.OSMReaderTest.testFoot":241,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":109,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":58,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":105,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":217,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":55,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":89,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":56,"com.graphhopper.reader.OSMReaderTest.testOneWay":252,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":120,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":78,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":218,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":86,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":123,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":85,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":101,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":152,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":199,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":69,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":74,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":102,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":245,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":233,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":195,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":42,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":186,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":150,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":135,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":192,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":203,"com.graphhopper.routing.PathBidirRefTest.testExtract":6,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":28,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":193,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":17,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":261,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":220,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":256,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":108,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":260,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":44,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":259,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":107,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":258,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":257,"com.graphhopper.util.GHUtilityTest.testSort2":8,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":62,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":181,"com.graphhopper.reader.OSMReaderTest.testMain":242,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":139,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":156,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":137,"com.graphhopper.routing.PathBidirRefTest.testExtract2":7,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":136,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":65,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":165,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":37,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":25,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":59,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":221,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":47,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":84,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":130,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":131,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":32,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":247,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":158,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":274,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":29,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":119,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":185,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":197,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":52,"com.graphhopper.storage.GraphHopperStorageTest.testClone":71,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":87,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":140,"com.graphhopper.GraphHopperTest.testFootAndCar":266,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":117,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":95,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":93,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":124,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":196,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":60,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":34,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":104,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":177,"com.graphhopper.util.GHUtilityTest.testSortDirected":11,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":146,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":128,"com.graphhopper.GraphHopperTest.testPrepareOnly":255,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":24,"com.graphhopper.GraphHopperTest.testVia":263,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":207,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":92,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":176,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":249,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":43,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":33,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":115,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":210,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":2,"com.graphhopper.GraphHopperTest.testFootOnly":271,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":38,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":248,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":63,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":39,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":127,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":232,"com.graphhopper.util.InstructionListTest.testFind":12,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":168,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":191,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":61,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":121,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":141},"transformations":[{"failures":[],"tindex":"489931b5-82c7-11e5-8401-f9deff93b758","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:127","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GHResponse:197","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = ((\"nodes:\" + (com.graphhopper.util.PointList.getSize())) + \"; \") + (com.graphhopper.util.PointList.toString())"},"status":-2},{"failures":[],"tindex":"489958c6-82c7-11e5-8401-af2ee9fafc93","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:92","type":"CtLocalVariableImpl","sourcecode":"double double"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:237","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.routing.util.Bike2WeightFlagEncoder.getReverseSpeed(long)"},"status":-2},{"failures":[0,1,2,3,4,5,6,7],"tindex":"489958c7-82c7-11e5-8401-ad58d0b0d6b0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:231","type":"CtAssignmentImpl","sourcecode":"double = (double * (((double * double) + (double * double)) + (1 * double))) / double"},"variableMap":{"fwdFaster":"dist","incDist2DSum":"dist","fwdSlower":"distance","fullDist2D":"distance","restDist2D":"distance","speed":"dist","decDist2DSum":"distance"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:226","type":"CtOperatorAssignmentImpl","sourcecode":"double += double"},"status":-1},{"failures":[],"tindex":"48997fd8-82c7-11e5-8401-69c234a81155","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:128","type":"CtLocalVariableImpl","sourcecode":"double double = 360.0 / 16"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:895","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.Helper.intToDegree(com.graphhopper.util.BitUtil.toInt(byte[], int))"},"status":-2},{"failures":[],"tindex":"48997fd9-82c7-11e5-8401-7965c54ce6b6","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.Path:243","type":"CtIfImpl","sourcecode":"if (((java.lang.Double.isInfinite(double)) || (java.lang.Double.isNaN(double))) || (double < 0))\n    throw new java.lang.IllegalStateException((\"Invalid speed stored in edge! \" + double));\n"},"variableMap":{"speed":"azimuth"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:147","type":"CtIfImpl","sourcecode":"if (double < (double * 13)) {\n    java.lang.String = \"W\";\n} else if (double < (double * 15)) {\n    java.lang.String = \"NW\";\n} else {\n    java.lang.String = \"N\";\n}"},"status":0},{"failures":[],"tindex":"48997fda-82c7-11e5-8401-c5afa774671d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:79","type":"CtLocalVariableImpl","sourcecode":"double double = (com.graphhopper.util.AngleCalc.double) - ((double / 180.0) * (java.lang.Math.double))"},"variableMap":{"com.graphhopper.util.AngleCalc.PI_2":"deltaX","azimuth":"tmp","java.lang.Math.PI":"deltaX"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:58","type":"CtLocalVariableImpl","sourcecode":"double double = double * (1.0 - double)"},"status":0},{"failures":[0,8,9,10,11,12,13,1,14,2,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,3,165,4,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,5,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,6,7,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272],"tindex":"4899a6eb-82c7-11e5-8401-e1d9934ee33b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:51","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"status":-1},{"failures":[],"tindex":"4899cdfc-82c7-11e5-8401-c7b141887016","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:177","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.StorableProperties.put(\"graph.bytesForFlags\", com.graphhopper.routing.util.EncodingManager.getBytesForFlags())"},"status":0},{"failures":[205,209,211,213,215,256,257,258,260,263,264,265,266,267,268,270],"tindex":"4899cdfd-82c7-11e5-8401-7f8e8e6b8a12","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.VirtualEdgeIteratorState:84","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.util.PointList.getSize()) == 0)\n    return com.graphhopper.util.PointList.com.graphhopper.util.PointList;\n"},"variableMap":{"pointList":"pointList","com.graphhopper.util.PointList.EMPTY":"pointList"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.VirtualEdgeIteratorState:88","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.PointList.clone(false)"},"status":-1},{"failures":[],"tindex":"4899cdfe-82c7-11e5-8401-3d3ca00cb776","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.FootFlagEncoder:376","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(44.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"variableMap":{"weightToPrioMap":"weightToPrioMap","com.graphhopper.routing.util.PriorityCode.AVOID_IF_POSSIBLE":"com.graphhopper.routing.util.PriorityCode.UNCHANGED"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:475","type":"CtInvocationImpl","sourcecode":"java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(0.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue())"},"status":-2},{"failures":[],"tindex":"4899f50f-82c7-11e5-8401-83503455701e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDFullIndex:106","type":"CtIfImpl","sourcecode":"if (double <= 0)\n    break;\n"},"variableMap":{"dist":"java.lang.Double.NaN"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:379","type":"CtForImpl","sourcecode":"for (int int = int ; int < int ; int++) {\n    com.graphhopper.util.PointList.add(double[][int], double[][int], java.lang.Double.double);\n}"},"status":-2},{"failures":[],"tindex":"4899f510-82c7-11e5-8401-4b1a7f5992c8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:405","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.AbstractFlagEncoder.applyWayTags(com.graphhopper.reader.OSMWay, com.graphhopper.util.EdgeIteratorState)"},"status":0},{"failures":[],"tindex":"4899f511-82c7-11e5-8401-6b2308f68dde","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:53","type":"CtLocalVariableImpl","sourcecode":"final double double = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:897","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.Helper.intToDegree(com.graphhopper.util.BitUtil.toInt(byte[], int))"},"status":-2},{"failures":[],"tindex":"4899f512-82c7-11e5-8401-29cebc7fa615","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:94","type":"CtInvocationImpl","sourcecode":"java.util.Map<java.lang.String, java.lang.Object>.put(\"sign\", com.graphhopper.util.Instruction.getSign())"},"status":0},{"failures":[273],"tindex":"4899f513-82c7-11e5-8401-dbdd689495ea","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(5);\n} catch (java.lang.InterruptedException iex) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:353","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"foot\", \"designated\"))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(100.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"status":-1},{"failures":[9,15,69,70,75,83,88,89,91,92,97,105,110,111,112,120,121,126,134,139,140,144,145,150,158,163,164,3,166,179,189,190,191,192,193,197,198,201,204,221,230,231,232,236,237,238,239,241,252,263],"tindex":"489a1c24-82c7-11e5-8401-5b25ffa9b9be","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.VLongStorage:86","type":"CtAssertImpl","sourcecode":"assert long >= 0L"},"variableMap":{"i":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:127","type":"CtIfImpl","sourcecode":"if (boolean)\n    long = com.graphhopper.storage.EdgeAccess.reverseFlags(long, long);\n"},"status":-1},{"failures":[],"tindex":"489a1c25-82c7-11e5-8401-b3e7bd15a8e6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:153","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MountainBikeFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.FootFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MotorcycleFlagEncoder(com.graphhopper.util.PMap);\nelse\n    throw new java.lang.IllegalArgumentException((\"entry in encoder list not supported \" + java.lang.String));\n"},"variableMap":{"entry":"com.graphhopper.routing.util.EncodingManager.MOUNTAINBIKE","configuration":"configuration","com.graphhopper.routing.util.EncodingManager.FOOT":"entry","com.graphhopper.routing.util.EncodingManager.MOTORCYCLE":"com.graphhopper.routing.util.EncodingManager.MOUNTAINBIKE","com.graphhopper.routing.util.EncodingManager.MOUNTAINBIKE":"com.graphhopper.routing.util.EncodingManager.MOTORCYCLE","fe":"fe"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:144","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.BikeFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.Bike2WeightFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.RacingBikeFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MountainBikeFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.FootFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MotorcycleFlagEncoder(com.graphhopper.util.PMap);\nelse\n    throw new java.lang.IllegalArgumentException((\"entry in encoder list not supported \" + java.lang.String));\n"},"status":-2},{"failures":[240,241,242,243,244,245,246,247,248,249,250,251,274,252,254,255,262,263,264,265,266,267,268,269,270,271,272],"tindex":"489a4336-82c7-11e5-8401-f1d2bfab8af0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:674","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (gnu.trove.list.TLongList.size()) ; int++) {\n    long long = gnu.trove.list.TLongList.get(int);\n    int int = com.graphhopper.reader.OSMReader.getNodeMap().get(long);\n    if (int == (com.graphhopper.reader.OSMReader.int))\n        continue;\n    \n    if (int == (com.graphhopper.reader.OSMReader.int))\n        continue;\n    \n    if (int == (com.graphhopper.reader.OSMReader.int)) {\n        if ((!(com.graphhopper.util.PointList.isEmpty())) && (int > (-(com.graphhopper.reader.OSMReader.int)))) {\n            int = int;\n            int = com.graphhopper.reader.OSMReader.handlePillarNode(int, long, null, true);\n            int = (-int) - 3;\n            if (((com.graphhopper.util.PointList.getSize()) > 1) && (int >= 0)) {\n                java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long));\n                com.graphhopper.util.PointList.clear();\n                com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n            } \n            int = int;\n            int = -1;\n        } \n        continue;\n    } \n    if ((int <= (-(com.graphhopper.reader.OSMReader.int))) && (int >= (com.graphhopper.reader.OSMReader.int)))\n        throw new java.lang.AssertionError((((\"Mapped index not in correct bounds \" + int) + \", \") + long));\n    \n    if (int > (-(com.graphhopper.reader.OSMReader.int))) {\n        boolean boolean = (int == 0) || (int == int);\n        if (!boolean) {\n            int = int;\n        } \n        int = com.graphhopper.reader.OSMReader.handlePillarNode(int, long, com.graphhopper.util.PointList, boolean);\n    } \n    if (int < (com.graphhopper.reader.OSMReader.int)) {\n        int = (-int) - 3;\n        com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n        if (int >= 0) {\n            java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long));\n            com.graphhopper.util.PointList.clear();\n            com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n        } \n        int = int;\n    } \n}"},"status":-1},{"failures":[240,241,242,243,244,245,246,247,248,249,251,274,252,254,255,262,263,264,265,266,267,268,269,270,271,272],"tindex":"489a6a47-82c7-11e5-8401-51d23bc7750e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:976","type":"CtAssignmentImpl","sourcecode":"this.int = this.int = int"},"variableMap":{"edgeId":"id","nextEdgeId":"id"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:531","type":"CtAssignmentImpl","sourcecode":"int = (-int) - 3"},"status":-1},{"failures":[240,241,242,243,244,245,246,247,248,249,250,251,274,252,254,255,262,263,264,265,266,267,268,269,270,271,272],"tindex":"489a6a48-82c7-11e5-8401-e940a88a5823","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:273","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(java.lang.Math.max(((com.graphhopper.reader.OSMReader.getNodeMap().getSize()) / 50), 100)))"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:677","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.reader.OSMReader.getNodeMap().get(long)"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"4899f510-82c7-11e5-8401-4b1a7f5992c8","diffs":[{"methodsDiff":{"delete":["com.graphhopper.routing.util.AbstractFlagEncoder.applyWayTags"]},"type":"staticDiff"},{"branches":{"com.graphhopper.reader.OSMReaderTest.testNegativeIds":["com.graphhopper.routing.util.AbstractFlagEncoder_void_applyWayTags(com.graphhopper.reader.OSMWay,com.graphhopper.util.EdgeIteratorState).b"],"com.graphhopper.GraphHopperTest.testFootAndCar":["com.graphhopper.routing.util.AbstractFlagEncoder_void_applyWayTags(com.graphhopper.reader.OSMWay,com.graphhopper.util.EdgeIteratorState).b"]},"type":"branch"}]},{"transformation":"4899cdfc-82c7-11e5-8401-c7b141887016","diffs":[{"methodsDiff":{"delete":["com.graphhopper.routing.util.EncodingManager.getBytesForFlags","com.graphhopper.storage.StorableProperties.put"]},"type":"staticDiff"}]},{"transformation":"4899f512-82c7-11e5-8401-29cebc7fa615","diffs":[{"methodsDiff":{"delete":["java.util.Map<java.lang.String, java.lang.Object>.put","com.graphhopper.util.Instruction.getSign"]},"type":"staticDiff"}]}]}
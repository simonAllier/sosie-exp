{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":110,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":67,"com.graphhopper.reader.OSMReaderTest.testFerry":40,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":48,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":18,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":30,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":73,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":114,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":105,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":66,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":53,"com.graphhopper.util.DistanceCalcEarthTest.testDistance":45,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":12,"com.graphhopper.reader.OSMReaderTest.testWithBounds":43,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":55,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":19,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":91,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":34,"com.graphhopper.util.shapes.CircleTest.testContainsCircle":46,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":80,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":123,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":89,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":71,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":128,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":2,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":8,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":29,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":95,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":83,"com.graphhopper.GraphHopperTest.testPrepare":115,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":56,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":85,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":49,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":75,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijectionBug2":72,"com.graphhopper.reader.OSMReaderTest.testOneWay":0,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":52,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":10,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":24,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":15,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":14,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":118,"com.graphhopper.util.shapes.GHPoint3DTest.testEquals":76,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":35,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":1,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":17,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":50,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":103,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":7,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":77,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":90,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":57,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":36,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":3,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":87,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":88,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":64,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":81,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":84,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":23,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":22,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":97,"com.graphhopper.GraphHopperTest.testLoadOSM":117,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":96,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":39,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":25,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":63,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":38,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":108,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":6,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":109,"com.graphhopper.reader.OSMReaderTest.testMain":41,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":82,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":94,"com.graphhopper.reader.OSMReaderTest.testEstimatedCenter":44,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":20,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijection":74,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":16,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":58,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":32,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":126,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":31,"com.graphhopper.routing.PathTest.testWayList":79,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":33,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":98,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":4,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":62,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":70,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":59,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":28,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":121,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":99,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":104,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":27,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":111,"com.graphhopper.storage.GraphHopperStorageCHTest.testPrios":122,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":93,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":125,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":11,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":54,"com.graphhopper.GraphHopperTest.testFootAndCar":61,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":102,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":101,"com.graphhopper.util.InstructionListTest.testCreateGPX":47,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":68,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":21,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":92,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":124,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":37,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":107,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":26,"com.graphhopper.GraphHopperTest.testPrepareOnly":113,"com.graphhopper.GraphHopperTest.testVia":60,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":69,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":13,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":106,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":65,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":116,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":127,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":112,"com.graphhopper.GraphHopperTest.testFootOnly":119,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":9,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":5,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":42,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":129,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":100,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":120,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":51,"com.graphhopper.util.GHUtilityTest.testCopy":78,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":86},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],"tindex":"af918293-7933-11e5-a0bb-433d87692e27","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:926","type":"CtIfImpl","sourcecode":"if (int < 0)\n    throw new java.lang.IllegalStateException(\"Too many names are stored, currently limited to int pointer\");\n"},"variableMap":{"nameIndexRef":"nextEdgeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:218","type":"CtIfImpl","sourcecode":"if (long < 0) {\n    com.graphhopper.storage.EdgeAccess.setEdgeRef(int, int);\n} else {\n    long long = (com.graphhopper.storage.DataAccess.getInt((long + (int)))) == int ? long + (int) : long + (int);\n    com.graphhopper.storage.DataAccess.setInt(long, int);\n}"},"status":-1},{"failures":[40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"tindex":"af91d0b4-7933-11e5-a0bb-53791c307210","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:680","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Math.min(double, double)"},"variableMap":{"dMinLon":"toLat","dMinLat":"fromLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:53","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Math.java.lang.Math.sin((java.lang.Math.(java.lang.Math.toRadians((double - double))) / 2))"},"status":-1},{"failures":[],"tindex":"af91d0b5-7933-11e5-a0bb-832fd2ef576e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDFullIndex:103","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.QueryResult.setClosestEdge(com.graphhopper.routing.util.AllEdgesIterator.detach(false))"},"variableMap":{"res":"res","iter":"iter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:140","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.QueryResult.setClosestEdge(com.graphhopper.routing.util.AllEdgesIterator)"},"status":0},{"failures":[76],"tindex":"af91d0b6-7933-11e5-a0bb-032504b6b72e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.NumHelper:34","type":"CtReturnImpl","sourcecode":"return (java.lang.Math.abs((double - double))) < double"},"variableMap":{"epsilon":"lat","d1":"lat","d2":"ele"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.shapes.GHPoint3D:66","type":"CtReturnImpl","sourcecode":"return ((com.graphhopper.util.NumHelper.equalsEps(double, com.graphhopper.util.shapes.GHPoint3D.double)) && (com.graphhopper.util.NumHelper.equalsEps(double, com.graphhopper.util.shapes.GHPoint3D.double))) && (com.graphhopper.util.NumHelper.equalsEps(double, com.graphhopper.util.shapes.GHPoint3D.double))"},"status":-1},{"failures":[77,78,79,80,81,82,83],"tindex":"af91f7c7-7933-11e5-a0bb-7dc8c7daf8d7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:188","type":"CtIfImpl","sourcecode":"if (boolean) {\n    throw new java.lang.IllegalStateException(\"already closed\");\n} "},"variableMap":{"closed":"reverse"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:838","type":"CtIfImpl","sourcecode":"if (boolean)\n    com.graphhopper.util.PointList.reverse();\n"},"status":-1},{"failures":[],"tindex":"af91f7c8-7933-11e5-a0bb-5ded4d6aed6c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.StorableProperties:181","type":"CtIfImpl","sourcecode":"if (boolean) {\n    return false;\n} "},"variableMap":{"silent":"closed"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:172","type":"CtReturnImpl","sourcecode":"return boolean"},"status":-2},{"failures":[78,84,85,86,87,88,89,90,91,92,93,94,1,2,95,96,3,97,48,98,99,49,50,100,101,102,51,103,104,105,52,106,107,108,53,54,109,55,56,110,111,57,112,58,59,113,114,60,115,116,117,118,119,120,121,24,122,123,124,125,126,127,128,129],"tindex":"af91f7c9-7933-11e5-a0bb-1967bbac3268","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:307","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:250","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.BaseGraph.getNodes()"},"status":-1},{"failures":[],"tindex":"af921eda-7933-11e5-a0bb-67ab4d783a97","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:222","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setHeader((3 * 4), com.graphhopper.storage.GraphExtension.hashCode())"},"status":0},{"failures":[],"tindex":"af921edb-7933-11e5-a0bb-5ffb105f8441","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:244","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:183","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.util.TIntArrayList.size()"},"status":-2},{"failures":[],"tindex":"af921edc-7933-11e5-a0bb-f33d73d0f47b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:176","type":"CtLocalVariableImpl","sourcecode":"int int = 1024 * 8"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:444","type":"CtLocalVariableImpl","sourcecode":"int int = java.lang.String.indexOf(\"km\")"},"status":-2},{"failures":[],"tindex":"af921edd-7933-11e5-a0bb-c32657b700dc","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PointList:130","type":"CtIfImpl","sourcecode":"if (boolean)\n    double[][int] = double;\nelse if (!(java.lang.Double.isNaN(double)))\n    throw new java.lang.IllegalStateException((\"This is a 2D list we cannot store elevation: \" + double));\n"},"variableMap":{"size":"end","is3D":"is3D","elevations":"latitudes","ele":"java.lang.Double.NaN"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:373","type":"CtIfImpl","sourcecode":"if (boolean)\n    for (int int = int ; int < int ; int++) {\n        com.graphhopper.util.PointList.add(double[][int], double[][int], double[][int]);\n    }\nelse\n    for (int int = int ; int < int ; int++) {\n        com.graphhopper.util.PointList.add(double[][int], double[][int], java.lang.Double.double);\n    }\n"},"status":-2},{"failures":[],"tindex":"af9245ee-7933-11e5-a0bb-cdbe71b2ed34","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:934","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.coll.GHBitSet) == null)\n    com.graphhopper.coll.GHBitSet = new com.graphhopper.coll.GHBitSetImpl(com.graphhopper.storage.BaseGraph.getNodes());\n"},"status":-2},{"failures":[],"tindex":"af9245ef-7933-11e5-a0bb-459cc6a75a0e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:285","type":"CtIfImpl","sourcecode":"if ((long == (long)) || (long == 0))\n    return long;\n"},"variableMap":{"directionBitMask":"flags","flags":"flags","dir":"flags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:313","type":"CtIfImpl","sourcecode":"if (double < ((com.graphhopper.routing.util.EncodedDoubleValue.double) / 2))\n    return com.graphhopper.routing.util.AbstractFlagEncoder.setLowSpeed(long, double, false);\n"},"status":-2},{"failures":[],"tindex":"af9245f0-7933-11e5-a0bb-f9c40a66a985","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMInputFile:249","type":"CtIfImpl","sourcecode":"if ((int) <= 0)\n    int = 2;\n"},"variableMap":{"workerThreads":"freeIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:96","type":"CtIfImpl","sourcecode":"if (java.lang.Double.isNaN(com.graphhopper.util.PointList.getLatitude(int))) {\n    if (int < 0)\n        int = int;\n    \n    continue;\n} else if (int < 0) {\n    continue;\n} "},"status":-2},{"failures":[],"tindex":"af9245f1-7933-11e5-a0bb-f550e6b01daf","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:77","type":"CtAssignmentImpl","sourcecode":"boolean = boolean"},"variableMap":{"calcMean":"eof","eleCalcMean":"eof"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMInputFile:174","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":-2},{"failures":[],"tindex":"af9245f2-7933-11e5-a0bb-3fc70cb9f4be","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntIntBinHeap:150","type":"CtIfImpl","sourcecode":"if (int > (int)) {\n    return ;\n} "},"variableMap":{"size":"minOneWayNetworkSize","i":"minOneWayNetworkSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:71","type":"CtIfImpl","sourcecode":"if (((int) <= 0) && ((int) <= 0))\n    return ;\n"},"status":-2},{"failures":[],"tindex":"af926d03-7933-11e5-a0bb-a9ea757395b8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionAnnotation:81","type":"CtAssignmentImpl","sourcecode":"int = (83 * int) + (this.int)"},"variableMap":{"importance":"minResolutionInMeter","hash":"minResolutionInMeter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:104","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"status":-2},{"failures":[],"tindex":"af926d04-7933-11e5-a0bb-a70005934037","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:458","type":"CtAssignmentImpl","sourcecode":"int = 8"},"variableMap":{"bytesForFlags":"id"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:657","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.OSMReader.getNodeMap().put(long, int)"},"status":-2},{"failures":[],"tindex":"af926d05-7933-11e5-a0bb-f773cafbd0cc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:147","type":"CtIfImpl","sourcecode":"if ((int++) > 1000) {\n    throw new java.lang.IllegalStateException(\"Something unexpected happened. A node probably will not have 1000+ relations.\");\n} "},"variableMap":{"i":"nextTowerId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:652","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.NodeAccess.setNode(int, double, double, double)"},"status":-2},{"failures":[],"tindex":"af929416-7933-11e5-a0bb-23792831607c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:191","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(5)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GHResponse:63","type":"CtIfImpl","sourcecode":"if (com.graphhopper.GHResponse.hasErrors()) {\n    throw new java.lang.RuntimeException(((((\"You cannot call \" + java.lang.String) + \" if response contains errors. Check this with ghResponse.hasErrors(). \") + \"Errors are: \") + com.graphhopper.GHResponse.(getErrors())));\n} "},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"6a58fc75-794c-11e5-b282-0ba406587c52","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:165","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.geohash.KeyAlgo = new com.graphhopper.geohash.LinearKeyAlgo(int , int).setBounds(com.graphhopper.util.shapes.BBox)"},"status":-2},{"failures":[],"tindex":"6a58fc76-794c-11e5-b282-17398d0da795","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHTreeMapComposed:32","type":"CtUnaryOperatorImpl","sourcecode":"-3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:415","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.setNodesHeader()"},"status":-2},{"failures":[],"tindex":"6a58fc77-794c-11e5-b282-8d604d2e4863","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:119","type":"CtAssignmentImpl","sourcecode":"int[][] = int[][]"},"variableMap":{"newSegs":"segments","segments":"segments"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:294","type":"CtAssignmentImpl","sourcecode":"int[][] = new int[0][]"},"status":-2},{"failures":[],"tindex":"6a58fc78-794c-11e5-b282-4fbd68099f0a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:326","type":"CtLocalVariableImpl","sourcecode":"long long = int"},"variableMap":{"nodeCount":"key"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHTreeMapComposed:64","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.util.BitUtil.toLong(int, int)"},"status":-2},{"failures":[],"tindex":"6a58fc79-794c-11e5-b282-f3e14b7a6200","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:169","type":"CtIfImpl","sourcecode":"if (int > int) {\n    int = int;\n} "},"variableMap":{"min":"index","tmpSize":"index"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:139","type":"CtIfImpl","sourcecode":"if (boolean)\n    com.graphhopper.util.PointList.add(com.graphhopper.util.PointAccess.getLatitude(int), com.graphhopper.util.PointAccess.getLongitude(int), com.graphhopper.util.PointAccess.getElevation(int));\nelse\n    com.graphhopper.util.PointList.add(com.graphhopper.util.PointAccess.getLatitude(int), com.graphhopper.util.PointAccess.getLongitude(int));\n"},"status":-2},{"failures":[],"tindex":"6a59238a-794c-11e5-b282-29a756796750","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:115","type":"CtIfImpl","sourcecode":"if (int > 100)\n    throw new java.lang.IllegalArgumentException(\"periodicUpdates has to be in [0, 100], to disable it use 0\");\n"},"variableMap":{"periodicUpdates":"com.graphhopper.reader.OSMElement.RELATION"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:168","type":"CtTryImpl","sourcecode":"try {\n    com.graphhopper.reader.OSMInputFile = new com.graphhopper.reader.OSMInputFile(java.io.File).setWorkerThreads(int).open();\n    long long = 1;\n    long long = 1;\n    com.graphhopper.reader.OSMElement com.graphhopper.reader.OSMElement;\n    while ((com.graphhopper.reader.OSMElement = com.graphhopper.reader.OSMInputFile.getNext()) != null) {\n        if (com.graphhopper.reader.OSMElement.isType(com.graphhopper.reader.OSMElement.int)) {\n            final com.graphhopper.reader.OSMWay com.graphhopper.reader.OSMWay = ((com.graphhopper.reader.OSMWay)(com.graphhopper.reader.OSMElement));\n            boolean boolean = com.graphhopper.reader.OSMReader.filterWay(com.graphhopper.reader.OSMWay);\n            if (boolean) {\n                TLongList TLongList = com.graphhopper.reader.OSMWay.getNodes();\n                int int = com.graphhopper.reader.TLongList.size();\n                for (int int = 0 ; int < int ; int++) {\n                    com.graphhopper.reader.OSMReader.prepareHighwayNode(com.graphhopper.reader.TLongList.get(int));\n                }\n                if (((++long) % 5000000) == 0) {\n                    com.graphhopper.reader.OSMReader.com.graphhopper.routing.util.Logger.info(((((((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \" (preprocess), osmIdMap:\") + com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(com.graphhopper.reader.OSMReader.getNodeMap().getSize()))) + \" (\") + (com.graphhopper.reader.OSMReader.getNodeMap().getMemoryUsage())) + \"MB) \") + (com.graphhopper.util.Helper.getMemInfo())));\n                } \n            } \n        } \n        if (com.graphhopper.reader.OSMElement.isType(com.graphhopper.reader.OSMElement.int)) {\n            final com.graphhopper.reader.OSMRelation com.graphhopper.reader.OSMRelation = ((com.graphhopper.reader.OSMRelation)(com.graphhopper.reader.OSMElement));\n            if ((!(com.graphhopper.reader.OSMRelation.isMetaRelation())) && (com.graphhopper.reader.OSMRelation.hasTag(\"type\", \"route\")))\n                com.graphhopper.reader.OSMReader.prepareWaysWithRelationInfo(com.graphhopper.reader.OSMRelation);\n            \n            if (com.graphhopper.reader.OSMRelation.hasTag(\"type\", \"restriction\"))\n                com.graphhopper.reader.OSMReader.prepareRestrictionRelation(com.graphhopper.reader.OSMRelation);\n            \n            if (((++long) % 50000) == 0) {\n                com.graphhopper.reader.OSMReader.com.graphhopper.routing.util.Logger.info(((((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \" (preprocess), osmWayMap:\") + com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(com.graphhopper.reader.OSMReader.getRelFlagsMap().size()))) + \" \") + (com.graphhopper.util.Helper.getMemInfo())));\n            } \n        } \n    }\n} catch (java.lang.Exception ex) {\n    throw new java.lang.RuntimeException(\"Problem while parsing file\" , java.lang.Exception);\n} finally {\n    com.graphhopper.util.Helper.close(com.graphhopper.reader.OSMInputFile);\n}"},"status":-2},{"failures":[],"tindex":"6a59238b-794c-11e5-b282-ffd217849344","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.TranslationMap:225","type":"CtIfImpl","sourcecode":"if (java.lang.String != null)\n    throw new java.lang.IllegalStateException((((((\"Cannot overwrite key \" + java.lang.String) + \" with \") + java.lang.String) + \", was: \") + java.lang.String));\n"},"variableMap":{"val":"com.graphhopper.routing.util.EncodingManager.RACINGBIKE","existing":"com.graphhopper.routing.util.EncodingManager.MOTORCYCLE","key":"entry"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:150","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.RacingBikeFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MountainBikeFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.FootFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MotorcycleFlagEncoder(com.graphhopper.util.PMap);\nelse\n    throw new java.lang.IllegalArgumentException((\"entry in encoder list not supported \" + java.lang.String));\n"},"status":-2},{"failures":[],"tindex":"6a59238c-794c-11e5-b282-bd256b212306","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:163","type":"CtIfImpl","sourcecode":"if (int > 255)\n    int = 255;\n"},"variableMap":{"red":"counter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:93","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    int++;\n}"},"status":-2},{"failures":[],"tindex":"6a5971ad-794c-11e5-b282-77ffe5a30146","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:355","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.EncodedValue.setValue(long, com.graphhopper.routing.util.BikeCommonFlagEncoder.handlePriority(com.graphhopper.reader.OSMWay, int))"},"status":-2},{"failures":[],"tindex":"6a5971ae-794c-11e5-b282-e7eb4e723a45","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.SparseIntIntArray:46","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.util.Helper.idealIntArraySize(int)"},"variableMap":{"cap":"to"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.PrinctonReader:79","type":"CtAssignmentImpl","sourcecode":"int = java.lang.Integer.parseInt(java.lang.String[][int])"},"status":-2},{"failures":[],"tindex":"6a5971af-794c-11e5-b282-1fd0d4e8f40e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:97","type":"CtWhileImpl","sourcecode":"while (true) {\n    int int = com.graphhopper.routing.AStar.AStarEdge.int;\n    (int)++;\n    if (com.graphhopper.routing.AStar.isWeightLimitExceeded())\n        return com.graphhopper.routing.AbstractRoutingAlgorithm.createEmptyPath();\n    \n    if (com.graphhopper.routing.AStar.finished())\n        break;\n    \n    com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        if (!com.graphhopper.routing.AbstractRoutingAlgorithm.(accept(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge.int)))\n            continue;\n        \n        int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n        int int = com.graphhopper.routing.util.TraversalMode.createTraversalId(com.graphhopper.util.EdgeIterator, false);\n        float float = ((float)((com.graphhopper.routing.util.Weighting.calcWeight(com.graphhopper.util.EdgeIterator, false, com.graphhopper.routing.AStar.AStarEdge.int)) + (com.graphhopper.routing.AStar.AStarEdge.double)));\n        if (java.lang.Double.isInfinite(float))\n            continue;\n        \n        com.graphhopper.routing.AStar.AStarEdge com.graphhopper.routing.AStar.AStarEdge = com.graphhopper.routing.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.get(int);\n        if ((com.graphhopper.routing.AStar.AStarEdge == null) || ((com.graphhopper.routing.AStar.AStarEdge.double) > float)) {\n            double = com.graphhopper.routing.util.WeightApproximator.approximate(int);\n            double = float + double;\n            if (com.graphhopper.routing.AStar.AStarEdge == null) {\n                com.graphhopper.routing.AStar.AStarEdge = new com.graphhopper.routing.AStar.AStarEdge(com.graphhopper.util.EdgeIterator.getEdge() , int , double , float);\n                com.graphhopper.routing.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.put(int, com.graphhopper.routing.AStar.AStarEdge);\n            } else {\n                assert (com.graphhopper.routing.AStar.AStarEdge.double) > double : \"Inconsistent distance estimate\";\n                java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.remove(com.graphhopper.routing.AStar.AStarEdge);\n                com.graphhopper.routing.AStar.AStarEdge.int = com.graphhopper.util.EdgeIterator.getEdge();\n                com.graphhopper.routing.AStar.AStarEdge.double = double;\n                com.graphhopper.routing.AStar.AStarEdge.double = float;\n            }\n            com.graphhopper.routing.AStar.AStarEdge.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge;\n            java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.add(com.graphhopper.routing.AStar.AStarEdge);\n            com.graphhopper.routing.AbstractRoutingAlgorithm.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge, int);\n        } \n    }\n    if (java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.isEmpty())\n        return com.graphhopper.routing.AbstractRoutingAlgorithm.createEmptyPath();\n    \n    com.graphhopper.routing.AStar.AStarEdge = java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.poll();\n    if ((com.graphhopper.routing.AStar.AStarEdge) == null)\n        throw new java.lang.AssertionError(\"Empty edge cannot happen\");\n    \n}"},"status":-2},{"failures":[],"tindex":"6a5997c0-794c-11e5-b282-d93913fa5ec4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:182","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.shapes.BBox.hasElevation()) {\n    com.graphhopper.util.shapes.BBox.double = com.graphhopper.util.Helper.intToEle(com.graphhopper.storage.DataAccess.getHeader((7 * 4)));\n    com.graphhopper.util.shapes.BBox.double = com.graphhopper.util.Helper.intToEle(com.graphhopper.storage.DataAccess.getHeader((8 * 4)));\n} "},"status":-2},{"failures":[],"tindex":"6a5997c1-794c-11e5-b282-d963f54315b2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:183","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.StopWatch.start()"},"status":-2},{"failures":[],"tindex":"6a5997c2-794c-11e5-b282-bfc3a6773795","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper:447","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:362","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.checkInit()"},"status":-2},{"failures":[],"tindex":"6a5997c3-794c-11e5-b282-bd36ab906c6f","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:124","type":"CtIfImpl","sourcecode":"if (long == long)\n    return long;\nelse\n    return ~long;\n"},"variableMap":{"high":"acceptBit","highKey":"acceptBit","key":"acceptBit"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:286","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.reader.OSMWay.hasTag(\"highway\", \"cycleway\")) && (com.graphhopper.reader.OSMWay.hasTag(\"sac_scale\", \"hiking\")))\n    return long;\n"},"status":-2},{"failures":[],"tindex":"6a5997c4-794c-11e5-b282-e58ea3e9c4fc","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.InstructionList:92","type":"CtInvocationImpl","sourcecode":"java.util.Map<java.lang.String, java.lang.Object>.put(\"time\", com.graphhopper.util.Instruction.getTime())"},"variableMap":{"instruction":"instruction","instrJson":"instrJson"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:93","type":"CtInvocationImpl","sourcecode":"java.util.Map<java.lang.String, java.lang.Object>.put(\"distance\", com.graphhopper.util.Helper.round(com.graphhopper.util.Instruction.getDistance(), 3))"},"status":-2},{"failures":[],"tindex":"6a5997c5-794c-11e5-b282-01fa5d28fbb5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:192","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setSegmentSize(100).create(10)"},"variableMap":{"heights":"names"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.search.NameIndex:50","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.create(long)"},"status":-2},{"failures":[],"tindex":"6a59bed6-794c-11e5-b282-2d0f31d3a5d4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:54","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Create DataAccess object via its corresponding Directory!\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:542","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException(((((\"adjNode \" + int) + \" out of bounds [0,\") + com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(int))) + \")\"))"},"status":-2},{"failures":[],"tindex":"6a59bed7-794c-11e5-b282-4b17e72394a6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:714","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = (int == 0) || (int == int)"},"variableMap":{"i":"len","lastIndex":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:179","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = (int + 1) == int"},"status":-2},{"failures":[],"tindex":"6a59bed8-794c-11e5-b282-519ae1d50922","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:54","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.CarFlagEncoder.this(5, 5, 0)"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":79,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":113,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":118,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":50,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":71,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":36,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":83,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":37,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":2,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":18,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testReduceToMaxSpeed":137,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":19,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":49,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":78,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":33,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":59,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":97,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":114,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":60,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":99,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":103,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":98,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":1,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":68,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":111,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testSacScale":127,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":69,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":107,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":100,"com.graphhopper.storage.RAMDirectoryTest.testRequestedDataAccessHasToBeTheIdenticalType":8,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPreferenceForSlowSpeed":142,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidTunnel":134,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":22,"com.graphhopper.util.InstructionListTest.testWayList2":122,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":95,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":64,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":116,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":15,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":51,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":119,"com.graphhopper.util.InstructionListTest.testWayList":85,"com.graphhopper.reader.OSMReaderTest.testOneWay":90,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":75,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":29,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":84,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":63,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":31,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":30,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":13,"com.graphhopper.storage.MMapDirectoryTest.testRequestedDataAccessHasToBeTheIdenticalType":6,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":16,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":124,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":62,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":125,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":120,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":66,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":70,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":55,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":104,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":93,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":39,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":38,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":91,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnsureSize":9,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":35,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":109,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":110,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":26,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":25,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":47,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":34,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":92,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":24,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":77,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":61,"com.graphhopper.util.GHUtilityTest.testSort2":86,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":21,"com.graphhopper.reader.OSMReaderTest.testMain":123,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":108,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":67,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":94,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTram":132,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":23,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":115,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":43,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":42,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":0,"com.graphhopper.routing.PathTest.testWayList":121,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPriority":133,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":14,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":52,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":57,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":138,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":82,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":140,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":88,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":72,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":74,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":112,"com.graphhopper.util.SimpleIntDequeTest.testPush":11,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":41,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":80,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":106,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":12,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":102,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":141,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":48,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":20,"com.graphhopper.storage.RAMDirectoryTest.testNoDuplicates":7,"com.graphhopper.GraphHopperTest.testFootAndCar":27,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":96,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":105,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":130,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAccess":139,"com.graphhopper.util.GHUtilityTest.testSort":87,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":131,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":117,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidMotorway":135,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":56,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":44,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":76,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":3,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":32,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":89,"com.graphhopper.storage.MMapDirectoryTest.testNoDuplicates":5,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":129,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testBarrierAccess":128,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":4,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":46,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":81,"com.graphhopper.GraphHopperTest.testFootOnly":126,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":58,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":45,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":54,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":28,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":10,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":17,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":65,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":73,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":136,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":40,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":53,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":101},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10],"tindex":"a18650a6-7940-11e5-b1cb-e1ab4139682a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:136","type":"CtIfImpl","sourcecode":"if (!(boolean))\n    return false;\n"},"variableMap":{"store":"synched"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.DAType:209","type":"CtIfImpl","sourcecode":"if ((this.boolean) != (com.graphhopper.storage.DAType.boolean))\n    return false;\n"},"status":-1},{"failures":[11],"tindex":"a18677b7-7940-11e5-b1cb-dfaf93edd504","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.SimpleIntDeque:83","type":"CtAssignmentImpl","sourcecode":"int[] = int[]"},"status":-1},{"failures":[],"tindex":"a18677b8-7940-11e5-b1cb-91348c2212da","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:91","type":"CtUnaryOperatorImpl","sourcecode":"(long)++"},"variableMap":{"size":"encoded"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:345","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.AbstractFlagEncoder.handleFerryTags(com.graphhopper.reader.OSMWay, java.util.Map<java.lang.String, java.lang.Integer>.get(\"living_street\"), java.util.Map<java.lang.String, java.lang.Integer>.get(\"track\"), java.util.Map<java.lang.String, java.lang.Integer>.get(\"primary\"))"},"status":0},{"failures":[],"tindex":"a1869ec9-7940-11e5-b1cb-bf9a69cbcb4f","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.GHUtility:526","type":"CtReturnImpl","sourcecode":"return int > int ? int + 1 : int"},"variableMap":{"nodeB":"tmp","edgeId":"tmp","nodeA":"tmp"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.SimpleIntDeque:87","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"a1869eca-7940-11e5-b1cb-776fcc726a6a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:247","type":"CtReturnImpl","sourcecode":"return (long) | (long)"},"variableMap":{"acceptBit":"edgePointer","ferryBit":"edgePointer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:202","type":"CtReturnImpl","sourcecode":"return long"},"status":0},{"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],"tindex":"a1869ecb-7940-11e5-b1cb-3964bc044d92","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.PathBidirRef:75","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry"},"status":-1},{"failures":[28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,12,67,13,68,69,70,71,14,72,15,16,73,74,18,75,76,77,19,21,78,22,79,80,81,23,82,83,84,85,86,87,88,89,90,91,24,92,25,26,93],"tindex":"a1869ecc-7940-11e5-b1cb-2b33cf5f03f3","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:517","type":"CtIfImpl","sourcecode":"if (int < (com.graphhopper.reader.OSMReader.int))\n    return (-int) - 3;\n"},"variableMap":{"com.graphhopper.reader.OSMReader.TOWER_NODE":"nodeA","id":"E_NODEB"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:153","type":"CtIfImpl","sourcecode":"if (int == int)\n    return com.graphhopper.storage.DataAccess.getInt((long + (int)));\n"},"status":-1},{"failures":[],"tindex":"a186c5dd-7940-11e5-b1cb-9d46b15f3095","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:147","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.Bike2WeightFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.RacingBikeFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MountainBikeFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.FootFlagEncoder(com.graphhopper.util.PMap);\nelse if (java.lang.String.equals(com.graphhopper.routing.util.EncodingManager.java.lang.String))\n    com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MotorcycleFlagEncoder(com.graphhopper.util.PMap);\nelse\n    throw new java.lang.IllegalArgumentException((\"entry in encoder list not supported \" + java.lang.String));\n"},"status":-2},{"failures":[],"tindex":"a186c5de-7940-11e5-b1cb-1b8d90cdcbd3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:366","type":"CtInvocationImpl","sourcecode":"com.graphhopper.search.NameIndex.setSegmentSize(int)"},"status":0},{"failures":[94,95,96,30,97,98,99,34,100,101,102,103,38,104,105,106,107,42,108,44,109,49,110,111,112,113,114,115,116,117,118,119,120,121,85,122,123,124,125,126],"tindex":"a186c5df-7940-11e5-b1cb-593955d6fcf2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:893","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    double double = com.graphhopper.util.Helper.intToDegree(com.graphhopper.util.BitUtil.toInt(byte[], int));\n    int += 4;\n    double double = com.graphhopper.util.Helper.intToDegree(com.graphhopper.util.BitUtil.toInt(byte[], int));\n    int += 4;\n    if (com.graphhopper.storage.NodeAccess.is3D()) {\n        com.graphhopper.util.PointList.add(double, double, com.graphhopper.util.Helper.intToEle(com.graphhopper.util.BitUtil.toInt(byte[], int)));\n        int += 4;\n    } else {\n        com.graphhopper.util.PointList.add(double, double);\n    }\n}"},"status":-1},{"failures":[127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],"tindex":"a186ebf0-7940-11e5-b1cb-25ebc828d14e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:157","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.FootFlagEncoder(com.graphhopper.util.PMap)"},"variableMap":{"configuration":"configuration","fe":"fe"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:154","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.util.AbstractFlagEncoder = new com.graphhopper.routing.util.MountainBikeFlagEncoder(com.graphhopper.util.PMap)"},"status":-1},{"failures":[],"tindex":"a186ebf1-7940-11e5-b1cb-5d98b0bbef9e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:124","type":"CtIfImpl","sourcecode":"if (long == long)\n    return long;\nelse\n    return ~long;\n"},"variableMap":{"high":"turnRestrictionBit","highKey":"turnRestrictionBit","key":"turnRestrictionBit"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:659","type":"CtIfImpl","sourcecode":"if ((int) == 0)\n    return 0;\nelse if ((int) == 1) {\n    if (double != 0)\n        throw new java.lang.IllegalArgumentException(\"Only restrictions are supported\");\n    \n    return boolean ? long : 0;\n} "},"status":-2},{"failures":[],"tindex":"a186ebf2-7940-11e5-b1cb-f9b0d06d3dc2","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:233","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.EdgeEntry == null)\n    return ;\n"},"variableMap":{"entryOther":"parent"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:299","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.routing.AStar.AStarEdge.int) != (com.graphhopper.routing.AStar.AStarEdge.int)) {\n    com.graphhopper.routing.AStar.AStarEdge = ((com.graphhopper.routing.AStar.AStarEdge)(com.graphhopper.routing.AStar.AStarEdge.com.graphhopper.storage.EdgeEntry));\n    double -= com.graphhopper.routing.util.Weighting.calcWeight(com.graphhopper.util.EdgeIteratorState, boolean, com.graphhopper.util.EdgeIterator.int);\n} else {\n    if (!(com.graphhopper.routing.util.TraversalMode.hasUTurnSupport()))\n        return ;\n    \n}"},"status":-2},{"failures":[],"tindex":"a1871303-7940-11e5-b1cb-8bf60956b8ce","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.EdgeWrapper:54","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHTreeMapComposed:32","type":"CtUnaryOperatorImpl","sourcecode":"-3"},"status":-2},{"failures":[],"tindex":"a1871304-7940-11e5-b1cb-0f83cbdcf897","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:461","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.EdgeAccess.internalEdgeDisconnect(com.graphhopper.util.EdgeIteratorState.getEdge(), long, com.graphhopper.util.EdgeIteratorState.getAdjNode(), com.graphhopper.util.EdgeIteratorState.getBaseNode())"},"status":-2},{"failures":[],"tindex":"a1871305-7940-11e5-b1cb-4b890dfb778a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:368","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.routing.util.AbstractFlagEncoder com.graphhopper.routing.util.AbstractFlagEncoder : java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>) {\n    long |= com.graphhopper.routing.util.AbstractFlagEncoder.handleNodeTags(com.graphhopper.reader.OSMNode);\n}"},"status":-2},{"failures":[],"tindex":"a1871306-7940-11e5-b1cb-3f26c1a069c1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:224","type":"CtIfImpl","sourcecode":"if (int < (int)) {\n    throw new java.lang.IllegalStateException(\"BinHeap contains too many elements to fit in new capacity.\");\n} "},"variableMap":{"size":"segmentSizeInBytes","capacity":"segmentSizeInBytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:180","type":"CtTryImpl","sourcecode":"try {\n    long long = com.graphhopper.storage.UnsafeDataAccess.getCapacity();\n    com.graphhopper.storage.AbstractDataAccess.writeHeader(java.io.RandomAccessFile, long, int);\n    java.io.RandomAccessFile.seek(com.graphhopper.storage.AbstractDataAccess.int);\n    byte[] byte[] = new byte[int];\n    int int = com.graphhopper.storage.UnsafeDataAccess.getSegments();\n    for (int int = 0 ; int < int ; int++) {\n        com.graphhopper.storage.UnsafeDataAccess.getBytes((int * (int)), byte[], int);\n        java.io.RandomAccessFile.write(byte[]);\n    }\n} finally {\n    java.io.RandomAccessFile.close();\n}"},"status":-2},{"failures":[],"tindex":"a1871307-7940-11e5-b1cb-a5c1025bd700","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.pbf.PbfBlobDecoder:87","type":"CtLocalVariableImpl","sourcecode":"java.util.List<java.lang.String> java.util.List<java.lang.String> = java.util.Arrays.asList(\"OsmSchema-V0.6\", \"DenseNodes\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:161","type":"CtLocalVariableImpl","sourcecode":"java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>()"},"status":-2},{"failures":[],"tindex":"a1873a18-7940-11e5-b1cb-610c9dc39dce","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:541","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.util.CmdArgs.get(\"graph.elevation.cachedir\", \"\")"},"variableMap":{"args":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PMap:95","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.util.PMap.get(java.lang.String)"},"status":-2},{"failures":[],"tindex":"a1873a19-7940-11e5-b1cb-798646d904ca","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:194","type":"CtLocalVariableImpl","sourcecode":"long long = ((long)(int)) * 4"},"variableMap":{"key":"otherNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:177","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.storage.EdgeAccess._getLinkPosInEdgeArea(int, int, long)"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":42,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":39,"com.graphhopper.reader.OSMReaderTest.testMain":49,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":28,"com.graphhopper.util.BitUtilLittleTest.testFromBitString":17,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":46,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":53,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":35,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testAcceptsCar":56,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":37,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":47,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":40,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":21,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":29,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":34,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":19,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":43,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":22,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":24,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":38,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":25,"com.graphhopper.GraphHopperTest.testPrepare":7,"com.graphhopper.GraphHopperTest.testFootAndCar":9,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":41,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":30,"com.graphhopper.util.BitUtilLittleTest.testToBitString":16,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":55,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":36,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testNoErrorOnEdgeCase_lastIndex":54,"com.graphhopper.GraphHopperAPITest.testDisconnected179":15,"com.graphhopper.GraphHopperTest.testVia":6,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":12,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":23,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":31,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":50,"com.graphhopper.GraphHopperAPITest.testLoad":14,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":20,"com.graphhopper.reader.dem.HeightTileTest.testCalcMean":48,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":10,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":44,"com.graphhopper.GraphHopperTest.testFootOnly":13,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":45,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":8,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":18,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":26,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":51,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":52,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":5,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":27,"com.graphhopper.GraphHopperTest.testLoadOSM":11,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":32,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":0,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":33,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":4,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":3,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":2,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":1},"transformations":[{"failures":[],"tindex":"224623c9-82bd-11e5-a348-03e1d6c56d7e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:191","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(5)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:672","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.DataReader.readGraph()"},"status":-2},{"failures":[],"tindex":"224671ea-82bd-11e5-a348-b75360875406","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:268","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.ensureCapacity(long)"},"variableMap":{"maxCapacity":"doubleSize","nodesCH":"keys"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.OSMIDMap:81","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.ensureCapacity((long + 8))"},"status":0},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"tindex":"224671eb-82bd-11e5-a348-178aefee1370","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:1020","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.storage.index.QueryResult com.graphhopper.storage.index.QueryResult = java.util.List<com.graphhopper.storage.index.QueryResult>.get(0)"},"variableMap":{"qResults":"qResults"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1042","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.storage.index.QueryResult com.graphhopper.storage.index.QueryResult = java.util.List<com.graphhopper.storage.index.QueryResult>.get(int)"},"status":-1},{"failures":[16,17],"tindex":"224671ec-82bd-11e5-a348-799873fa1892","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMNode:114","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"Node: \")"},"variableMap":{"txt":"sb"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilLittle:123","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('0')"},"status":-1},{"failures":[],"tindex":"224671ed-82bd-11e5-a348-a7c97658599c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:640","type":"CtSwitchImpl","sourcecode":"switch (int) {\n    case com.graphhopper.routing.util.PriorityWeighting.int :\n        return ((double)(com.graphhopper.routing.util.EncodedValue.getValue(long))) / (com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n    default :\n        return super.getDouble(long, int);\n}"},"status":-2},{"failures":[],"tindex":"224698fe-82bd-11e5-a348-ff9e08b57ca6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.AStar:101","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.AStar.isWeightLimitExceeded())\n    return com.graphhopper.routing.AbstractRoutingAlgorithm.createEmptyPath();\n"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:97","type":"CtWhileImpl","sourcecode":"while (true) {\n    int int = com.graphhopper.routing.AStar.AStarEdge.int;\n    (int)++;\n    if (com.graphhopper.routing.AStar.isWeightLimitExceeded())\n        return com.graphhopper.routing.AbstractRoutingAlgorithm.createEmptyPath();\n    \n    if (com.graphhopper.routing.AStar.finished())\n        break;\n    \n    com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        if (!com.graphhopper.routing.AbstractRoutingAlgorithm.(accept(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge.int)))\n            continue;\n        \n        int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n        int int = com.graphhopper.routing.util.TraversalMode.createTraversalId(com.graphhopper.util.EdgeIterator, false);\n        float float = ((float)((com.graphhopper.routing.util.Weighting.calcWeight(com.graphhopper.util.EdgeIterator, false, com.graphhopper.routing.AStar.AStarEdge.int)) + (com.graphhopper.routing.AStar.AStarEdge.double)));\n        if (java.lang.Double.isInfinite(float))\n            continue;\n        \n        com.graphhopper.routing.AStar.AStarEdge com.graphhopper.routing.AStar.AStarEdge = gnu.trove.map.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.get(int);\n        if ((com.graphhopper.routing.AStar.AStarEdge == null) || ((com.graphhopper.routing.AStar.AStarEdge.double) > float)) {\n            double = com.graphhopper.routing.util.WeightApproximator.approximate(int);\n            double = float + double;\n            if (com.graphhopper.routing.AStar.AStarEdge == null) {\n                com.graphhopper.routing.AStar.AStarEdge = new com.graphhopper.routing.AStar.AStarEdge(com.graphhopper.util.EdgeIterator.getEdge() , int , double , float);\n                gnu.trove.map.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.put(int, com.graphhopper.routing.AStar.AStarEdge);\n            } else {\n                assert (com.graphhopper.routing.AStar.AStarEdge.double) > double : \"Inconsistent distance estimate\";\n                java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.remove(com.graphhopper.routing.AStar.AStarEdge);\n                com.graphhopper.routing.AStar.AStarEdge.int = com.graphhopper.util.EdgeIterator.getEdge();\n                com.graphhopper.routing.AStar.AStarEdge.double = double;\n                com.graphhopper.routing.AStar.AStarEdge.double = float;\n            }\n            com.graphhopper.routing.AStar.AStarEdge.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge;\n            java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.add(com.graphhopper.routing.AStar.AStarEdge);\n            com.graphhopper.routing.AbstractRoutingAlgorithm.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge, int);\n        } \n    }\n    if (java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.isEmpty())\n        return com.graphhopper.routing.AbstractRoutingAlgorithm.createEmptyPath();\n    \n    com.graphhopper.routing.AStar.AStarEdge = java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.poll();\n    if ((com.graphhopper.routing.AStar.AStarEdge) == null)\n        throw new java.lang.AssertionError(\"Empty edge cannot happen\");\n    \n}"},"status":-1},{"failures":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"tindex":"2246c00f-82bd-11e5-a348-b35634bc091e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:254","type":"CtReturnImpl","sourcecode":"return (int * (((4 + 4) + 4) + 4)) + (8 * int)"},"variableMap":{"length":"size","factor":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:90","type":"CtIfImpl","sourcecode":"if ((int) > 0) {\n    return int[][1];\n} else {\n    throw new java.lang.IllegalStateException(\"An empty queue does not have a minimum value.\");\n}"},"status":-1},{"failures":[],"tindex":"2246c010-82bd-11e5-a348-dd8bd4cba557","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:79","type":"CtLocalVariableImpl","sourcecode":"double double = (com.graphhopper.util.AngleCalc.double) - ((double / 180.0) * (java.lang.Math.double))"},"variableMap":{"com.graphhopper.util.AngleCalc.PI_2":"tmp","azimuth":"tmp","java.lang.Math.PI":"deltaY"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.BresenhamLine:63","type":"CtLocalVariableImpl","sourcecode":"double double = double * (1.0 - double)"},"status":0},{"failures":[23],"tindex":"2246c011-82bd-11e5-a348-1b847b2e00ac","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:408","type":"CtAssignmentImpl","sourcecode":"int = (com.graphhopper.routing.util.BikeCommonFlagEncoder.int) / 2"},"variableMap":{"com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED":"maxEdgesCount","speed":"edgeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:785","type":"CtOperatorAssignmentImpl","sourcecode":"int -= int"},"status":-1},{"failures":[],"tindex":"2246e722-82bd-11e5-a348-6133d90d9b58","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:547","type":"CtIfImpl","sourcecode":"if (int < (com.graphhopper.reader.OSMReader.int)) {\n    int = (-int) - 3;\n    return com.graphhopper.storage.NodeAccess.getLongitude(int);\n} else if (int > (-(com.graphhopper.reader.OSMReader.int))) {\n    int = int - 3;\n    return com.graphhopper.reader.PillarInfo.getLon(int);\n} else\n    return java.lang.Double.double;\n"},"status":-2},{"failures":[],"tindex":"2246e723-82bd-11e5-a348-4772c05e9d37","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.EdgeEntry:47","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.storage.EdgeEntry com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry.clone()"},"variableMap":{"this":"edgeEntry"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:184","type":"CtLocalVariableImpl","sourcecode":"com.graphhopper.storage.EdgeEntry com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry"},"status":-2},{"failures":[48],"tindex":"2246e724-82bd-11e5-a348-2f58bb88b792","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:318","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.util.EdgeIterator.Edge.isValid(int)) != (com.graphhopper.util.EdgeIterator.Edge.isValid(int))) {\n    throw new java.lang.IllegalStateException(((((\"Skipped edges of a shortcut needs \" + \"to be both valid or invalid but they were not \") + int) + \", \") + int));\n} "},"variableMap":{"edge1":"latSimilar","edge2":"width"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.HeightTile:118","type":"CtIfImpl","sourcecode":"if (int < ((int) - 1))\n    int += com.graphhopper.reader.dem.HeightTile.includePoint((int + (2 * (int))), java.util.concurrent.atomic.AtomicInteger);\n"},"status":-1},{"failures":[],"tindex":"2246e725-82bd-11e5-a348-55df616e5a59","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.EdgeWrapper:54","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:161","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-2},{"failures":[],"tindex":"22470e36-82bd-11e5-a348-71ae3f4f6cdd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:447","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:182","type":"CtInvocationImpl","sourcecode":"java.text.SimpleDateFormat.setTimeZone(java.util.TimeZone.getTimeZone(\"UTC\"))"},"status":0},{"failures":[],"tindex":"22470e37-82bd-11e5-a348-23e73c9ef5dc","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.AStarBidirection:201","type":"CtIfImpl","sourcecode":"if ((boolean) || (boolean))\n    return true;\n"},"variableMap":{"finishedTo":"_default","finishedFrom":"_default"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PMap:120","type":"CtReturnImpl","sourcecode":"return boolean"},"status":-2},{"failures":[13,49],"tindex":"22470e38-82bd-11e5-a348-d5fc723697bd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:199","type":"CtIfImpl","sourcecode":"if (false) {\n    if (double > 1)\n        double = 1;\n    else if (double < 0)\n        double = 0;\n    \n} "},"variableMap":{"factor":"lat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:781","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(double, double)"},"status":-1},{"failures":[50,51,52,53,54,55],"tindex":"22470e39-82bd-11e5-a348-73c2ed2cc125","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:447","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:131","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.Location2IDQuadtree.initBuffer()"},"status":-1},{"failures":[],"tindex":"2247354a-82bd-11e5-a348-4b94346692c6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphBuilder:106","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.Directory = new com.graphhopper.storage.MMapDirectory(java.lang.String)"},"variableMap":{"location":"location","dir":"outdir"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:311","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.Directory = new com.graphhopper.storage.RAMDirectory(java.lang.String , boolean)"},"status":0},{"failures":[56],"tindex":"2247354b-82bd-11e5-a348-1b834e28e6a9","series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:520","type":"CtAssignmentImpl","sourcecode":"java.lang.String = (com.graphhopper.util.Helper.pruneFileEnd(java.lang.String)) + \"-gh\""},"variableMap":{"graphHopperFolder":"str","osmFile":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:439","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(0, int).trim()"},"status":-1},{"failures":[],"tindex":"2247354c-82bd-11e5-a348-1d4abb6939d2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:463","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.MMapDataAccess.close()"},"variableMap":{"this":"nodes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:422","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.flush()"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"2247354a-82bd-11e5-a348-4b94346692c6","diffs":[{"branches":{"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":["com.graphhopper.storage.MMapDataAccess_java.nio.ByteBuffer_newByteBuffer(long,long).e1","com.graphhopper.storage.MMapDataAccess_boolean_loadExisting().t3","com.graphhopper.storage.MMapDataAccess_com.graphhopper.storage.MMapDataAccess(java.lang.String,java.lang.String,java.nio.ByteOrder,boolean).b","com.graphhopper.storage.GHDirectory_com.graphhopper.storage.DataAccess_find(java.lang.String,com.graphhopper.storage.DAType).t7","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).e6","com.graphhopper.storage.MMapDataAccess_com.graphhopper.storage.MMapDataAccess_create(long).b","com.graphhopper.storage.MMapDataAccess_java.nio.ByteBuffer_newByteBuffer(long,long).e3","com.graphhopper.storage.MMapDataAccess_void_flush().e1","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).e1","com.graphhopper.storage.MMapDataAccess_com.graphhopper.storage.MMapDataAccess_create(long).e1","com.graphhopper.storage.AbstractDataAccess_void_writeHeader(java.io.RandomAccessFile,long,int).l1","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).e5","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).e3","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).e2","com.graphhopper.storage.MMapDataAccess_long_getCapacity().b","com.graphhopper.storage.RAMDataAccess_void_flush().e1","com.graphhopper.storage.DAType_java.lang.String_toString().t1","com.graphhopper.storage.DAType_java.lang.String_toString().t4","com.graphhopper.storage.MMapDataAccess_void_flush().l3","com.graphhopper.storage.MMapDataAccess_boolean_ensureCapacity(long).b","com.graphhopper.storage.MMapDataAccess_void_getBytes(long,byte[],int).e1","com.graphhopper.storage.DAType_boolean_isAllowWrites().b","com.graphhopper.storage.GHDirectory_com.graphhopper.storage.GHDirectory(java.lang.String,com.graphhopper.storage.DAType).e4","com.graphhopper.storage.AbstractDataAccess_void_writeHeader(java.io.RandomAccessFile,long,int).b","com.graphhopper.storage.MMapDataAccess_int_getInt(long).b","com.graphhopper.storage.MMapDataAccess_void_initRandomAccessFile().b","com.graphhopper.storage.DAType_boolean_isMMap().b","com.graphhopper.storage.GHDirectory_com.graphhopper.storage.DataAccess_find(java.lang.String,com.graphhopper.storage.DAType).e3","com.graphhopper.storage.MMapDataAccess_boolean_loadExisting().b","com.graphhopper.storage.RAMIntDataAccess_void_flush().t2","com.graphhopper.storage.MMapDataAccess_void_setInt(long,int).b","com.graphhopper.storage.MMapDataAccess_void_getBytes(long,byte[],int).b","com.graphhopper.storage.MMapDataAccess_void_initRandomAccessFile().e1","com.graphhopper.storage.RAMIntDataAccess_void_flush().b","com.graphhopper.storage.MMapDataAccess_void_setBytes(long,byte[],int).e1","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).t4","com.graphhopper.storage.MMapDataAccess_void_setBytes(long,byte[],int).b","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).t2","com.graphhopper.storage.RAMDataAccess_void_flush().t2","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).b","com.graphhopper.storage.AbstractDataAccess_java.lang.String_getFullName().b","com.graphhopper.storage.MMapDataAccess_java.nio.ByteBuffer_newByteBuffer(long,long).b","com.graphhopper.storage.GHDirectory_void_mkdirs().t1","com.graphhopper.storage.MMapDataAccess_void_flush().t2","com.graphhopper.storage.MMapDataAccess_long_getCapacity().l1","com.graphhopper.storage.MMapDataAccess_void_flush().b","com.graphhopper.storage.RAMDirectory_com.graphhopper.storage.RAMDirectory(java.lang.String,boolean).b","com.graphhopper.storage.MMapDataAccess_java.nio.ByteBuffer_newByteBuffer(long,long).l5","com.graphhopper.storage.RAMIntDataAccess_void_flush().e1","com.graphhopper.storage.MMapDirectory_com.graphhopper.storage.MMapDirectory(java.lang.String).b","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).l7","com.graphhopper.storage.MMapDataAccess_boolean_loadExisting().e2","com.graphhopper.storage.MMapDataAccess_boolean_loadExisting().e1","com.graphhopper.storage.RAMDataAccess_void_flush().b"],"com.graphhopper.reader.OSMReaderTest.testSort":["com.graphhopper.storage.MMapDataAccess_java.nio.ByteBuffer_newByteBuffer(long,long).e1","com.graphhopper.storage.MMapDataAccess_boolean_loadExisting().t3","com.graphhopper.storage.GHDirectory_com.graphhopper.storage.DataAccess_find(java.lang.String,com.graphhopper.storage.DAType).t7","com.graphhopper.storage.MMapDataAccess_com.graphhopper.storage.MMapDataAccess(java.lang.String,java.lang.String,java.nio.ByteOrder,boolean).b","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).e6","com.graphhopper.storage.MMapDataAccess_com.graphhopper.storage.MMapDataAccess_create(long).b","com.graphhopper.storage.MMapDataAccess_void_flush().e1","com.graphhopper.storage.MMapDataAccess_java.nio.ByteBuffer_newByteBuffer(long,long).e3","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).e1","com.graphhopper.storage.MMapDataAccess_com.graphhopper.storage.MMapDataAccess_create(long).e1","com.graphhopper.storage.AbstractDataAccess_void_writeHeader(java.io.RandomAccessFile,long,int).l1","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).e5","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).e3","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).e2","com.graphhopper.storage.MMapDataAccess_long_getCapacity().b","com.graphhopper.storage.RAMDataAccess_void_flush().e1","com.graphhopper.storage.DAType_java.lang.String_toString().t1","com.graphhopper.storage.DAType_java.lang.String_toString().t4","com.graphhopper.storage.MMapDataAccess_void_flush().l3","com.graphhopper.storage.MMapDataAccess_boolean_ensureCapacity(long).b","com.graphhopper.storage.MMapDataAccess_void_getBytes(long,byte[],int).e1","com.graphhopper.storage.DAType_boolean_isAllowWrites().b","com.graphhopper.storage.GHDirectory_com.graphhopper.storage.GHDirectory(java.lang.String,com.graphhopper.storage.DAType).e4","com.graphhopper.storage.AbstractDataAccess_void_writeHeader(java.io.RandomAccessFile,long,int).b","com.graphhopper.storage.MMapDataAccess_int_getInt(long).b","com.graphhopper.storage.GHDirectory_com.graphhopper.storage.DataAccess_find(java.lang.String,com.graphhopper.storage.DAType).e3","com.graphhopper.storage.MMapDataAccess_void_initRandomAccessFile().b","com.graphhopper.storage.DAType_boolean_isMMap().b","com.graphhopper.storage.MMapDataAccess_boolean_loadExisting().b","com.graphhopper.storage.RAMIntDataAccess_void_flush().t2","com.graphhopper.storage.MMapDataAccess_void_setInt(long,int).b","com.graphhopper.storage.MMapDataAccess_void_getBytes(long,byte[],int).b","com.graphhopper.storage.MMapDataAccess_void_initRandomAccessFile().e1","com.graphhopper.storage.RAMIntDataAccess_void_flush().b","com.graphhopper.storage.MMapDataAccess_void_setBytes(long,byte[],int).e1","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).t4","com.graphhopper.storage.MMapDataAccess_void_setBytes(long,byte[],int).b","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).t2","com.graphhopper.util.Helper_void_close(java.io.Closeable).b","com.graphhopper.storage.RAMDataAccess_void_flush().t2","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).b","com.graphhopper.util.Helper_void_close(java.io.Closeable).t1","com.graphhopper.storage.AbstractDataAccess_java.lang.String_getFullName().b","com.graphhopper.storage.MMapDataAccess_java.nio.ByteBuffer_newByteBuffer(long,long).b","com.graphhopper.storage.GHDirectory_void_mkdirs().t1","com.graphhopper.storage.MMapDataAccess_void_flush().t2","com.graphhopper.storage.MMapDataAccess_long_getCapacity().l1","com.graphhopper.storage.MMapDataAccess_void_flush().b","com.graphhopper.storage.MMapDataAccess_java.nio.ByteBuffer_newByteBuffer(long,long).l5","com.graphhopper.storage.RAMIntDataAccess_void_flush().e1","com.graphhopper.storage.MMapDirectory_com.graphhopper.storage.MMapDirectory(java.lang.String).b","com.graphhopper.storage.MMapDataAccess_boolean_loadExisting().e2","com.graphhopper.storage.MMapDataAccess_boolean_mapIt(long,long,boolean).l7","com.graphhopper.storage.MMapDataAccess_boolean_loadExisting().e1","com.graphhopper.storage.RAMDataAccess_void_flush().b"]},"type":"branch"}]},{"transformation":"224671ea-82bd-11e5-a348-b75360875406","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.DataAccess.ensureCapacity"]},"type":"staticDiff"}]},{"transformation":"22470e36-82bd-11e5-a348-71ae3f4f6cdd","diffs":[{"methodsDiff":{"delete":["java.text.DateFormat.setTimeZone","java.util.TimeZone.getTimeZone"]},"type":"staticDiff"}]}]}
{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":66,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":5,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":291,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":321,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":123,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":136,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":52,"com.graphhopper.reader.OSMReaderTest.testFerry":326,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":221,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":222,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":313,"com.graphhopper.routing.QueryGraphTest.testOneWay":320,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":34,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":343,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":119,"com.graphhopper.reader.OSMReaderTest.testWithBounds":337,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":73,"com.graphhopper.coll.GHLongIntBTreeTest.testTwoSplits":346,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":63,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testInfinityWeight":176,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":254,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":317,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":255,"com.graphhopper.storage.GraphStorageViaMMapTest.testPropertiesWithNoInit":72,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":218,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":300,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":71,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":195,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":101,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":235,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":88,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":33,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":167,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":35,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":92,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":307,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":81,"com.graphhopper.GraphHopperTest.testPrepare":244,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":160,"com.graphhopper.storage.GraphStorageViaMMapTest.testInfinityWeight":82,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":290,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":185,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":202,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":355,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":7,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":275,"com.graphhopper.coll.IntDoubleBinHeapTest.testSpreading":352,"com.graphhopper.storage.GraphHopperStorageTest.testInfinityWeight":216,"com.graphhopper.util.InstructionListTest.testWayList":230,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":229,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":283,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":234,"com.graphhopper.GraphHopperAPITest.testDisconnected179":325,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":259,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":59,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":247,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":117,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":256,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":54,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":276,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":281,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":120,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":272,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":342,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":258,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":332,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":178,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":19,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":264,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":69,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":85,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":0,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":191,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":95,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":169,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":175,"com.graphhopper.coll.IntDoubleBinHeapTest.testSize":351,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":171,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":170,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":309,"com.graphhopper.GraphHopperTest.testLoadOSM":246,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":128,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":308,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":104,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":14,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":121,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":208,"com.graphhopper.reader.OSMReaderTest.testSort":329,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":207,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":286,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":257,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":336,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":30,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeReturn":213,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":182,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":356,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":109,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":110,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":83,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":144,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":6,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":295,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":340,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":181,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":263,"com.graphhopper.routing.PathTest.testWayList":269,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":84,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":174,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":62,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":114,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":24,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":296,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeReturn":43,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":192,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":141,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":274,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":4,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":118,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":217,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":282,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":103,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPropertiesWithNoInit":166,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":27,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":150,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":201,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":145,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":9,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":152,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":190,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":115,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_Freeze":183,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":50,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":199,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":3,"com.graphhopper.coll.IntDoubleBinHeapTest.testRekey":350,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":271,"com.graphhopper.util.GHUtilityTest.testSort":226,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":60,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":125,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":319,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":279,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":47,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":278,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":158,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":179,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":188,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":322,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":137,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":97,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":148,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":164,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":89,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":8,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":44,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":318,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":87,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":262,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":142,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":248,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_Freeze":143,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":204,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":134,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":155,"com.graphhopper.GraphHopperAPITest.testLoad":324,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":245,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":161,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":294,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":196,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":253,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":187,"com.graphhopper.routing.util.AbstractFlagEncoderTest.testParseDuration":357,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":146,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":260,"com.graphhopper.reader.OSMReaderTest.testBarriers":330,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes":31,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":75,"com.graphhopper.routing.PathTest.testFound":265,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":250,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":98,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":56,"com.graphhopper.util.GHUtilityTest.testCopy":225,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":280,"com.graphhopper.routing.PathTest.testFindInstruction":270,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":273,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":147,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":233,"com.graphhopper.coll.IntDoubleBinHeapTest.testBasic":348,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":157,"com.graphhopper.coll.IntDoubleBinHeapTest.testClear":349,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":61,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":194,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":2,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":135,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":214,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":200,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":287,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":172,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":203,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":223,"com.graphhopper.storage.GraphHopperStorageCHTest.testFlags":21,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":289,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":42,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":159,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":302,"com.graphhopper.reader.PrinctonReaderTest.testRead":341,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":215,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":23,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":153,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":165,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":51,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes2":18,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":57,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":184,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":306,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":312,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":162,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":38,"com.graphhopper.util.InstructionListTest.testWayList2":231,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":107,"com.graphhopper.reader.OSMReaderTest.testFoot":327,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":78,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":74,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":129,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":323,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":126,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":219,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":48,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":127,"com.graphhopper.reader.OSMReaderTest.testOneWay":339,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":151,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":16,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":177,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetLocations":28,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":197,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":261,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":20,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":211,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":210,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeReturn":173,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":65,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":156,"com.graphhopper.storage.GraphHopperStorageTest.testPropertiesWithNoInit":206,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":305,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":93,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":68,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":186,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":193,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":331,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":268,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":301,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":111,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":293,"com.graphhopper.coll.GHLongIntBTreeTest.testSplitAndOverwrite":344,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":154,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":39,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":298,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":353,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":90,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":299,"com.graphhopper.routing.PathBidirRefTest.testExtract":310,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":242,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":251,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":124,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":237,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnsureSize":12,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":77,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":180,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":241,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":113,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":240,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":76,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":239,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":238,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":133,"com.graphhopper.util.GHUtilityTest.testSort2":224,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":288,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":64,"com.graphhopper.reader.OSMReaderTest.testMain":328,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":45,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":315,"com.graphhopper.storage.GraphHopperStorageCHTest.testInfinityWeight":46,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":163,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":41,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":10,"com.graphhopper.routing.PathBidirRefTest.testExtract2":311,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":40,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":96,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":80,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":354,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":105,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":130,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":139,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":252,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":116,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":209,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":29,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":32,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":99,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":333,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":86,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":168,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":338,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":15,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":91,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":292,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":304,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":122,"com.graphhopper.storage.GraphHopperStorageTest.testClone":189,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":220,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":49,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeReturn":79,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":212,"com.graphhopper.storage.GraphHopperStorageCHTest.testCheckFirstNode":37,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":198,"com.graphhopper.GraphHopperTest.testFootAndCar":1,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":205,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":13,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":58,"com.graphhopper.routing.PathTest.testTime":266,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":55,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":22,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":303,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":131,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":102,"com.graphhopper.coll.GHLongIntBTreeTest.testPut":345,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":70,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":285,"com.graphhopper.storage.GraphHopperStorageCHTest.testPropertiesWithNoInit":36,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":149,"com.graphhopper.util.GHUtilityTest.testSortDirected":227,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":26,"com.graphhopper.GraphHopperTest.testPrepareOnly":236,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":138,"com.graphhopper.GraphHopperTest.testVia":243,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":314,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":53,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":284,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":335,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":112,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":100,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":11,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":316,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":232,"com.graphhopper.GraphHopperTest.testFootOnly":249,"com.graphhopper.coll.GHLongIntBTreeTest.testRandom":347,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":106,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":334,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":94,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":108,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":25,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":67,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":267,"com.graphhopper.util.InstructionListTest.testFind":228,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":277,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":297,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":17,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":132,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":140},"transformations":[{"failures":[],"tindex":"8fc5553e-828a-11e5-8c28-afd486c97ae9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:368","type":"CtIfImpl","sourcecode":"if ((double >= 0) && ((double < 0) || (double < double)))\n    double = double;\n"},"variableMap":{"maxSpeed":"baseOrientation","fwdSpeed":"java.lang.Math.PI"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:95","type":"CtIfImpl","sourcecode":"if (double < ((-(java.lang.Math.double)) + double))\n    double = double + (2 * (java.lang.Math.double));\nelse\n    double = double;\n"},"status":-2},{"failures":[0],"tindex":"8fc57c4f-828a-11e5-8c28-b5ef68e8d96a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.VirtualEdgeIteratorState:97","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.PointList.copy(1, ((com.graphhopper.util.PointList.getSize()) - 1))"},"variableMap":{"pointList":"copyPL"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:384","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.PointList"},"status":-1},{"failures":[1,2,3,4,5,6,7],"tindex":"8fc57c50-828a-11e5-8c28-5d8ec4fb30de","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:153","type":"CtIfImpl","sourcecode":"if (boolean) {\n    com.graphhopper.util.EdgeIteratorState = com.graphhopper.util.EdgeIteratorState.detach(true);\n    com.graphhopper.util.PointList com.graphhopper.util.PointList = com.graphhopper.util.EdgeIteratorState.fetchWayGeometry(3);\n    com.graphhopper.storage.index.QueryResult.setClosestEdge(com.graphhopper.util.EdgeIteratorState);\n    if ((com.graphhopper.storage.index.QueryResult.getSnappedPosition()) == (com.graphhopper.storage.index.QueryResult.Position.com.graphhopper.storage.index.QueryResult.Position))\n        com.graphhopper.storage.index.QueryResult.setWayIndex((((com.graphhopper.util.PointList.getSize()) - (com.graphhopper.storage.index.QueryResult.getWayIndex())) - 1));\n    else\n        com.graphhopper.storage.index.QueryResult.setWayIndex((((com.graphhopper.util.PointList.getSize()) - (com.graphhopper.storage.index.QueryResult.getWayIndex())) - 2));\n    \n    if ((com.graphhopper.storage.index.QueryResult.getWayIndex()) < 0)\n        throw new java.lang.IllegalStateException((((\"Problem with wayIndex while reversing closest edge:\" + com.graphhopper.util.EdgeIteratorState) + \", \") + com.graphhopper.storage.index.QueryResult));\n    \n} "},"status":-1},{"failures":[],"tindex":"8fc5a361-828a-11e5-8c28-099f14bb169d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:155","type":"CtIfImpl","sourcecode":"if (int > (int)) {\n    return false;\n} "},"variableMap":{"size":"segmentSizeInBytes","i":"segmentSizeInBytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:138","type":"CtTryImpl","sourcecode":"try {\n    long long = com.graphhopper.storage.AbstractDataAccess.(readHeader(java.io.RandomAccessFile)) - (com.graphhopper.storage.AbstractDataAccess.int);\n    if (long < 0)\n        return false;\n    \n    java.io.RandomAccessFile.seek(com.graphhopper.storage.AbstractDataAccess.int);\n    int int = ((int)(long / (int)));\n    if ((long % (int)) != 0)\n        int++;\n    \n    com.graphhopper.storage.UnsafeDataAccess.ensureCapacity(long, false);\n    byte[] byte[] = new byte[int];\n    for (int int = 0 ; int < int ; int++) {\n        int int = java.io.RandomAccessFile.read(byte[]);\n        if (int <= 0)\n            throw new java.lang.IllegalStateException((((\"segment \" + int) + \" is empty? \") + com.graphhopper.storage.AbstractDataAccess.(toString())));\n        \n        com.graphhopper.storage.UnsafeDataAccess.setBytes((int * (int)), byte[], int);\n    }\n    return true;\n} finally {\n    java.io.RandomAccessFile.close();\n}"},"status":-2},{"failures":[],"tindex":"8fc5a362-828a-11e5-8c28-2b6ee2e6f597","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:186","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(2000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:855","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.dem.ElevationProvider.release()"},"status":-2},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,0,1,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,2,283,284,285,286,287,3,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,4,5,315,316,317,318,6,7,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342],"tindex":"8fc5a363-828a-11e5-8c28-b3e91e52db9c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:120","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = int < int"},"variableMap":{"y1":"nodeB","y2":"edgeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:500","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = com.graphhopper.storage.BaseGraph.EdgeIterable.init(int, int)"},"status":-1},{"failures":[],"tindex":"8fc5ca74-828a-11e5-8c28-cd181aa95a5d","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DouglasPeucker:70","type":"CtLocalVariableImpl","sourcecode":"int int = 500"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.CGIARProvider:279","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(double))"},"status":-2},{"failures":[],"tindex":"8fc5ca75-828a-11e5-8c28-adb98f02b42b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.RoundaboutInstruction:97","type":"CtIfImpl","sourcecode":"if ((java.lang.Math.abs(int)) != 1)\n    return java.lang.Double.double;\nelse\n    return ((java.lang.Math.double) * (int)) - (double);\n"},"variableMap":{"java.lang.Double.NaN":"defaultUTurnCost","clockwise":"edgeId","java.lang.Math.PI":"defaultUTurnCost","radian":"weight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TurnWeighting:84","type":"CtIfImpl","sourcecode":"if ((double == 0) && (int == int))\n    return double + (double);\n"},"status":-2},{"failures":[13,140,182,331,332],"tindex":"8fc5ca76-828a-11e5-8c28-e9b93ca827f5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:196","type":"CtIfImpl","sourcecode":"if ((double > 0) && (double < double))\n    double = double * 0.9;\n"},"variableMap":{"maxMCSpeed":"minEle","speed":"minEle"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.shapes.BBox:120","type":"CtIfImpl","sourcecode":"if (double < (double)) {\n    double = double;\n} "},"status":-1},{"failures":[],"tindex":"8fc5ca77-828a-11e5-8c28-873417270fec","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.PathBidir:70","type":"CtIfImpl","sourcecode":"if (int < 0)\n    break;\n"},"variableMap":{"edgeId":"segmentsToCreate"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:110","type":"CtTryImpl","sourcecode":"try {\n    byte[][] byte[][] = java.util.Arrays.copyOf(byte[][], ((byte[][].int) + int));\n    for (int int = byte[][].int ; int < (byte[][].int) ; int++) {\n        byte[][][int] = new byte[1 << (int)];\n    }\n    byte[][] = byte[][];\n} catch (java.lang.OutOfMemoryError err) {\n    throw new java.lang.OutOfMemoryError((((((((((((java.lang.OutOfMemoryError.getMessage()) + \" - problem when allocating new memory. Old capacity: \") + long) + \", new bytes:\") + long) + \", segmentSizeIntsPower:\") + (int)) + \", new segments:\") + int) + \", existing:\") + (byte[][].int)));\n}"},"status":-2},{"failures":[],"tindex":"8fc5f188-828a-11e5-8c28-03b48d5e5cc9","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:1060","type":"CtLocalVariableImpl","sourcecode":"boolean boolean"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:241","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"status":-2},{"failures":[235,236,343,243,244,0,1,245,246,247,248,249,250,326,327,328,329,330,331,332,333,334,335,336,337,338,339],"tindex":"8fc5f189-828a-11e5-8c28-b9ab115141b5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMInputFile:92","type":"CtInvocationImpl","sourcecode":"java.io.InputStream.mark(10)"},"status":-1},{"failures":[],"tindex":"8fc5f18a-828a-11e5-8c28-339db193e0a8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphExtension:146","type":"CtReturnImpl","sourcecode":"return \"NoExt\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:292","type":"CtReturnImpl","sourcecode":"return java.lang.StringBuilder.toString()"},"status":0},{"failures":[344,345,346,347],"tindex":"8fc5f18b-828a-11e5-8c28-f9303b5af26d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:204","type":"CtIfImpl","sourcecode":"if (int <= ((1 << int) - 12)) {\n    return (1 << int) - 12;\n} "},"variableMap":{"need":"start","i":"start"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHLongIntBTree:489","type":"CtIfImpl","sourcecode":"if (int == (int + int)) {\n    return ~(int + int);\n} "},"status":-1},{"failures":[],"tindex":"8fc5f18c-828a-11e5-8c28-1b9c189b866b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:622","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.StopWatch.start()"},"status":0},{"failures":[348,349,350,351,352,273,274,275,276,277,280,282,2,283,286,287,3,288,289,290,291,292,293,294,295,296,298,300,301,302,303,304,305,306,307,353],"tindex":"8fc5f18d-828a-11e5-8c28-d320498afeff","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:664","type":"CtIfImpl","sourcecode":"if (double != 0)\n    throw new java.lang.IllegalArgumentException(\"Only restrictions are supported\");\n"},"variableMap":{"costs":"lastPrio"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:116","type":"CtForImpl","sourcecode":"for (int = 1 ; (int * 2) <= (int) ; int = int) {\n    int = int * 2;\n    if ((int != (int)) && ((float[][(int + 1)]) < (float[][int]))) {\n        int++;\n    } \n    if (double > (float[][int])) {\n        int[][int] = int[][int];\n        float[][int] = float[][int];\n    } else {\n        break;\n    }\n}"},"status":-1},{"failures":[],"tindex":"8fc5f18e-828a-11e5-8c28-cfcc376fe1da","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.EdgeAccess:104","type":"CtIfImpl","sourcecode":"if (int == (java.lang.Integer.int))\n    return java.lang.Double.double;\n"},"variableMap":{"val":"val","java.lang.Double.POSITIVE_INFINITY":"com.graphhopper.util.DistanceCalcEarth.KM_MILE","java.lang.Integer.MAX_VALUE":"val"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:433","type":"CtReturnImpl","sourcecode":"return int * (com.graphhopper.util.DistanceCalcEarth.double)"},"status":-2},{"failures":[],"tindex":"8fc6189f-828a-11e5-8c28-798ea9ed90ee","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.EdgeEntry:52","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry.clone()"},"variableMap":{"parent":"parent","cl":"parent","tmpPrev":"currEdge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.PathBidirRef:83","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry"},"status":-2},{"failures":[237,238,239,240,241,242,243,244,0,1,245,246,248,249,273,354,274,275,276,277,278,279,280,281,282,2,283,284,286,287,3,288,289,290,293,294,295,296,355,298,304,356,305,306,309,324],"tindex":"8fc618a0-828a-11e5-8c28-d702b7509a97","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:197","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.util.EdgeIterator.next()) {\n    if (!com.graphhopper.routing.AbstractRoutingAlgorithm.(accept(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.EdgeEntry.int)))\n        continue;\n    \n    int int = com.graphhopper.routing.util.TraversalMode.createTraversalId(com.graphhopper.util.EdgeIterator, boolean);\n    double double = (com.graphhopper.routing.util.Weighting.calcWeight(com.graphhopper.util.EdgeIterator, boolean, com.graphhopper.storage.EdgeEntry.int)) + (com.graphhopper.storage.EdgeEntry.double);\n    if (java.lang.Double.isInfinite(double))\n        continue;\n    \n    com.graphhopper.storage.EdgeEntry com.graphhopper.storage.EdgeEntry = gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry>.get(int);\n    if (com.graphhopper.storage.EdgeEntry == null) {\n        com.graphhopper.storage.EdgeEntry = new com.graphhopper.storage.EdgeEntry(com.graphhopper.util.EdgeIterator.getEdge() , com.graphhopper.util.EdgeIterator.getAdjNode() , double);\n        com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n        gnu.trove.map.TIntObjectMap<com.graphhopper.storage.EdgeEntry>.put(int, com.graphhopper.storage.EdgeEntry);\n        java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.add(com.graphhopper.storage.EdgeEntry);\n    } else if ((com.graphhopper.storage.EdgeEntry.double) > double) {\n        java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.remove(com.graphhopper.storage.EdgeEntry);\n        com.graphhopper.storage.EdgeEntry.int = com.graphhopper.util.EdgeIterator.getEdge();\n        com.graphhopper.storage.EdgeEntry.double = double;\n        com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry;\n        java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.add(com.graphhopper.storage.EdgeEntry);\n    } else\n        continue;\n    \n    if (boolean)\n        com.graphhopper.routing.DijkstraBidirectionRef.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.storage.EdgeEntry, int);\n    \n}"},"status":-1},{"failures":[357],"tindex":"8fc618a1-828a-11e5-8c28-a31e53d7e6b7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:37","type":"CtAssignmentImpl","sourcecode":"int = 10"},"variableMap":{"capacity":"minutes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:496","type":"CtAssignmentImpl","sourcecode":"int = ((java.lang.Integer.parseInt(java.lang.String)) * 60) * 24"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"8fc5f18c-828a-11e5-8c28-1b9c189b866b","diffs":[{"branches":{"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":["com.graphhopper.util.StopWatch_com.graphhopper.util.StopWatch_stop().t1","com.graphhopper.util.StopWatch_com.graphhopper.util.StopWatch_start().b"]},"type":"branch"},{"methodsDiff":{"delete":["com.graphhopper.util.StopWatch.start"]},"type":"staticDiff"}]},{"transformation":"8fc5f18a-828a-11e5-8c28-339db193e0a8","diffs":[{"methodsDiff":{"delete":["java.lang.StringBuilder.toString"]},"type":"staticDiff"}]}]}
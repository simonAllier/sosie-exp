{"failureDictionary":{"com.graphhopper.reader.OSMReaderTest.testMain":6,"com.graphhopper.reader.OSMReaderTest.testFerry":4,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":18,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeightMMap":0,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":54,"com.graphhopper.reader.OSMReaderTest.testWithBounds":13,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":10,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":47,"com.graphhopper.reader.dem.SRTMProviderTest.testGetHeight":1,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":14,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":40,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":41,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":43,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":16,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":44,"com.graphhopper.GraphHopperTest.testPrepare":20,"com.graphhopper.GraphHopperTest.testFootAndCar":22,"com.graphhopper.reader.dem.SRTMProviderTest.testGetFileString":3,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":51,"com.graphhopper.reader.OSMReaderTest.testFoot":5,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":48,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":50,"com.graphhopper.reader.OSMReaderTest.testOneWay":15,"com.graphhopper.GraphHopperAPITest.testDisconnected179":31,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":25,"com.graphhopper.storage.UnsafeDataAccessTest.testNativeOrder":38,"com.graphhopper.GraphHopperTest.testPrepareOnly":17,"com.graphhopper.GraphHopperTest.testVia":19,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":26,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":42,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":49,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":12,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":9,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":2,"com.graphhopper.reader.dem.HeightTileTest.testCalcMean":29,"com.graphhopper.GraphHopperAPITest.testLoad":30,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":23,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":52,"com.graphhopper.GraphHopperTest.testFootOnly":27,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":53,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":21,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":39,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":45,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":11,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":37,"com.graphhopper.reader.OSMReaderTest.testBarriers":8,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":46,"com.graphhopper.GraphHopperTest.testLoadOSM":24,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":28,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":32,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":36,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":35,"com.graphhopper.reader.OSMReaderTest.testSort":7,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":34,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":33},"transformations":[{"failures":[],"tindex":"fcb8bc45-8283-11e5-bc8c-e7aa5b466848","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:157","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.CHGraphImpl.checkNodeId(int)"},"status":0},{"failures":[0,1,2],"tindex":"fcb8bc46-8283-11e5-bc8c-f384b1afb394","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:253","type":"CtTryImpl","sourcecode":"try {\n    java.lang.String java.lang.String = (((java.lang.String) + \"/\") + java.lang.String) + \".hgt.zip\";\n    java.io.File java.io.File = new java.io.File(java.io.File , new java.io.File(java.lang.String).getName());\n    java.io.InputStream java.io.InputStream;\n    if (!(java.io.File.exists())) {\n        for (int int = 0 ; int < 3 ; int++) {\n            try {\n                com.graphhopper.util.Downloader.downloadFile(java.lang.String, java.io.File.getAbsolutePath());\n                break;\n            } catch (java.net.SocketTimeoutException ex) {\n                java.lang.Thread.sleep(2000);\n                continue;\n            } catch (java.io.FileNotFoundException ex) {\n                java.lang.String = (((java.lang.String) + \"/\") + java.lang.String) + \"hgt.zip\";\n                continue;\n            }\n        }\n    } \n    java.io.InputStream = new java.io.FileInputStream(java.io.File);\n    java.util.zip.ZipInputStream java.util.zip.ZipInputStream = new java.util.zip.ZipInputStream(java.io.InputStream);\n    java.util.zip.ZipInputStream.getNextEntry();\n    java.io.BufferedInputStream java.io.BufferedInputStream = new java.io.BufferedInputStream(java.util.zip.ZipInputStream);\n    int int;\n    while ((int = java.io.BufferedInputStream.read(byte[])) > 0) {\n        for (int int = 0 ; int < int ; int += 2) {\n            short short = com.graphhopper.reader.dem.SRTMProvider.com.graphhopper.util.BitUtil.toShort(byte[], int);\n            if ((short < (-1000)) || (short > 12000))\n                short = java.lang.Short.short;\n            \n            com.graphhopper.storage.DataAccess.setShort(int, short);\n        }\n    }\n    com.graphhopper.storage.DataAccess.flush();\n} catch (java.lang.Exception ex) {\n    throw new java.lang.RuntimeException(java.lang.Exception);\n}"},"status":-1},{"failures":[],"tindex":"fcb8e357-8283-11e5-bc8c-0174bb0ee600","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:64","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= long"},"variableMap":{"shift":"edgePointer","tmpValue":"edgePointer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:689","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.storage.BaseGraph.EdgeIterable.long"},"status":-2},{"failures":[],"tindex":"fcb8e358-8283-11e5-bc8c-072d2df35755","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Unzipper:93","type":"CtInvocationImpl","sourcecode":"java.util.zip.ZipInputStream.closeEntry()"},"variableMap":{"zis":"ips"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMInputFile:85","type":"CtTryImpl","sourcecode":"try {\n    java.io.InputStream = new java.io.BufferedInputStream(new java.io.FileInputStream(java.io.File) , 50000);\n} catch (java.io.FileNotFoundException e) {\n    throw new java.lang.RuntimeException(java.io.FileNotFoundException);\n}"},"status":-2},{"failures":[],"tindex":"fcb8e359-8283-11e5-bc8c-43b89fb95e39","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:221","type":"CtAssignmentImpl","sourcecode":"double = ((int)((double * (double)))) / (double)"},"status":0},{"failures":[],"tindex":"fcb8e35a-8283-11e5-bc8c-73422adbeceb","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Instruction:244","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.PointList.getLatitude(0)"},"variableMap":{"points":"points"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:287","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.PointList.getLongitude(0)"},"status":0},{"failures":[0,3,1,2],"tindex":"fcb8e35b-8283-11e5-bc8c-5d27b733ee66","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:799","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.trim().toLowerCase()"},"variableMap":{"s":"str"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:202","type":"CtOperatorAssignmentImpl","sourcecode":"java.lang.String += int"},"status":-1},{"failures":[],"tindex":"fcb90a6c-8283-11e5-bc8c-3bc5200049fe","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:178","type":"CtIfImpl","sourcecode":"if (int > 64)\n    throw new java.lang.IllegalStateException(\"sum of all shifts does not fit into a long variable\");\n"},"variableMap":{"shiftSum":"length"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:67","type":"CtIfImpl","sourcecode":"if ((int) >= (byte[].int)) {\n    int int = java.lang.Math.max(10, ((int)((int) * 1.5F)));\n    byte[] = java.util.Arrays.copyOf(byte[], int);\n} "},"status":-2},{"failures":[],"tindex":"fcb90a6d-8283-11e5-bc8c-6d4e606261af","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.FastestWeighting:67","type":"CtIfImpl","sourcecode":"if (double == 0)\n    return java.lang.Double.double;\n"},"variableMap":{"java.lang.Double.POSITIVE_INFINITY":"weight","speed":"weight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:166","type":"CtReturnImpl","sourcecode":"return double"},"status":-2},{"failures":[4,5,6,7,8,9,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],"tindex":"fcb90a6e-8283-11e5-bc8c-9d4be39c8bff","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:169","type":"CtIfImpl","sourcecode":"if ((int == (com.graphhopper.util.EdgeIterator.int)) || (int == (com.graphhopper.util.EdgeIterator.int)))\n    throw new java.lang.IllegalArgumentException(\"from and to edge cannot be NO_EDGE\");\n"},"variableMap":{"com.graphhopper.util.EdgeIterator.NO_EDGE":"com.graphhopper.reader.OSMReader.EMPTY","edgeTo":"com.graphhopper.reader.OSMReader.EMPTY","edgeFrom":"com.graphhopper.reader.OSMReader.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:639","type":"CtIfImpl","sourcecode":"if (int > (com.graphhopper.reader.OSMReader.int)) {\n    com.graphhopper.reader.OSMReader.getNodeMap().put(long, com.graphhopper.reader.OSMReader.int);\n} else {\n}"},"status":-1},{"failures":[29],"tindex":"fcb90a6f-8283-11e5-bc8c-1788167430b9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.HeightTile:107","type":"CtIfImpl","sourcecode":"if (boolean) {\n    if (int > 0)\n        int += com.graphhopper.reader.dem.HeightTile.includePoint((int - 2), java.util.concurrent.atomic.AtomicInteger);\n    \n    if (int < ((int) - 1))\n        int += com.graphhopper.reader.dem.HeightTile.includePoint((int + 2), java.util.concurrent.atomic.AtomicInteger);\n    \n    if (int > 0)\n        int += com.graphhopper.reader.dem.HeightTile.includePoint((int - (2 * (int))), java.util.concurrent.atomic.AtomicInteger);\n    \n    if (int < ((int) - 1))\n        int += com.graphhopper.reader.dem.HeightTile.includePoint((int + (2 * (int))), java.util.concurrent.atomic.AtomicInteger);\n    \n} "},"status":-1},{"failures":[],"tindex":"fcb90a70-8283-11e5-bc8c-5d6b21bb3356","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:232","type":"CtLocalVariableImpl","sourcecode":"double double = (double * double) + (double * double)"},"variableMap":{"ar_y":"fromHeight","ab_y":"fromHeight","ar_x":"fromHeight","ab_x":"fromHeight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalc3D:38","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Math.abs((double - double))"},"status":0},{"failures":[],"tindex":"fcb93181-8283-11e5-bc8c-a50ed740e1ce","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:306","type":"CtAssignmentImpl","sourcecode":"double = java.lang.Math.min((double / 1000), 50000)"},"variableMap":{"dist":"maxLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:180","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.shapes.BBox.double = com.graphhopper.util.Helper.intToDegree(com.graphhopper.storage.DataAccess.getHeader((6 * 4)))"},"status":-2},{"failures":[],"tindex":"fcb93182-8283-11e5-bc8c-c91a6bf2fc22","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:163","type":"CtIfImpl","sourcecode":"if (int > 255)\n    int = 255;\n"},"variableMap":{"red":"length"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.search.NameIndex:132","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.getBytes((long + (byte[].int)), byte[], int)"},"status":-2},{"failures":[30,31,32,33,34,35,36,37,19,20,21,22,23,24,26,27],"tindex":"fcb93183-8283-11e5-bc8c-396ee01629d7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.MiniPerfTest:50","type":"CtIfImpl","sourcecode":"if (long < (double))\n    double = long;\n"},"variableMap":{"min":"weightLimit","time":"visitedNodesSum"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:1029","type":"CtForImpl","sourcecode":"for (int int = 1 ; int < (java.util.List<com.graphhopper.util.shapes.GHPoint>.size()) ; int++) {\n    if (int == 1) {\n        com.graphhopper.routing.QueryGraph.enforceHeading(com.graphhopper.storage.index.QueryResult.getClosestNode(), com.graphhopper.GHRequest.getFavoredHeading(0), false);\n    } else if (boolean) {\n        com.graphhopper.util.EdgeIteratorState com.graphhopper.util.EdgeIteratorState = java.util.List<com.graphhopper.routing.Path>.get((int - 2)).getFinalEdge();\n        com.graphhopper.routing.QueryGraph.enforceHeadingByEdgeId(com.graphhopper.storage.index.QueryResult.getClosestNode(), com.graphhopper.util.EdgeIteratorState.getEdge(), false);\n    } \n    com.graphhopper.storage.index.QueryResult com.graphhopper.storage.index.QueryResult = java.util.List<com.graphhopper.storage.index.QueryResult>.get(int);\n    com.graphhopper.routing.QueryGraph.enforceHeading(com.graphhopper.storage.index.QueryResult.getClosestNode(), com.graphhopper.GHRequest.getFavoredHeading(int), true);\n    com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch().start();\n    com.graphhopper.routing.RoutingAlgorithm com.graphhopper.routing.RoutingAlgorithm = com.graphhopper.routing.RoutingAlgorithmFactory.createAlgo(com.graphhopper.routing.QueryGraph, com.graphhopper.routing.AlgorithmOptions);\n    com.graphhopper.routing.RoutingAlgorithm.setWeightLimit(double);\n    java.lang.String += (\", algoInit:\" + (com.graphhopper.util.StopWatch.stop().getSeconds())) + \"s\";\n    com.graphhopper.util.StopWatch = new com.graphhopper.util.StopWatch().start();\n    com.graphhopper.routing.Path com.graphhopper.routing.Path = com.graphhopper.routing.RoutingAlgorithm.calcPath(com.graphhopper.storage.index.QueryResult.getClosestNode(), com.graphhopper.storage.index.QueryResult.getClosestNode());\n    if ((com.graphhopper.routing.Path.getTime()) < 0)\n        throw new java.lang.RuntimeException((\"Time was negative. Please report as bug and include:\" + com.graphhopper.GHRequest));\n    \n    java.util.List<com.graphhopper.routing.Path>.add(com.graphhopper.routing.Path);\n    java.lang.String += ((((\", \" + (com.graphhopper.routing.RoutingAlgorithm.getName())) + \"-routing:\") + (com.graphhopper.util.StopWatch.stop().getSeconds())) + \"s, \") + (com.graphhopper.routing.Path.getDebugInfo());\n    com.graphhopper.routing.QueryGraph.clearUnfavoredStatus();\n    long += com.graphhopper.routing.RoutingAlgorithm.getVisitedNodes();\n    com.graphhopper.storage.index.QueryResult = com.graphhopper.storage.index.QueryResult;\n}"},"status":-1},{"failures":[],"tindex":"fcb95894-8283-11e5-bc8c-8366cb105a83","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHTreeMapComposed:32","type":"CtUnaryOperatorImpl","sourcecode":"-3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:257","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-2},{"failures":[12],"tindex":"fcb95895-8283-11e5-bc8c-db61f4b85a1c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.GPXEntry:80","type":"CtAssignmentImpl","sourcecode":"this.long = long"},"variableMap":{"time":"newNodeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:413","type":"CtInvocationImpl","sourcecode":"gnu.trove.list.TLongList.set(0, long)"},"status":-1},{"failures":[38],"tindex":"fcb95896-8283-11e5-bc8c-9385311d1de6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.VLongStorage:86","type":"CtAssertImpl","sourcecode":"assert long >= 0L"},"variableMap":{"i":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtil:165","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.BitUtil.fromLong(byte[], long, 0)"},"status":-1},{"failures":[39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"tindex":"fcb95897-8283-11e5-bc8c-4536e8944f21","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:655","type":"CtForEachImpl","sourcecode":"NEXT_SC : for (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut : java.util.Map<com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut>.keySet()) {\n    boolean boolean = false;\n    com.graphhopper.util.CHEdgeIterator com.graphhopper.util.CHEdgeIterator = com.graphhopper.util.CHEdgeExplorer.setBaseNode(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n    while (com.graphhopper.util.CHEdgeIterator.next()) {\n        if (((com.graphhopper.util.CHEdgeIterator.isShortcut()) && ((com.graphhopper.util.CHEdgeIterator.getAdjNode()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) && (com.graphhopper.util.CHEdgeIterator.canBeOverwritten(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long))) {\n            if ((com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double) >= (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.CHEdgeIterator, false, com.graphhopper.util.EdgeIterator.int)))\n                continue NEXT_SC;\n            \n            if (((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) || ((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) {\n                throw new java.lang.IllegalStateException((((((((((((((((((\"Shortcut cannot update itself! \" + (com.graphhopper.util.CHEdgeIterator.getEdge())) + \", skipEdge1:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", skipEdge2:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", edge \") + com.graphhopper.util.CHEdgeIterator) + \":\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.CHEdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", sc:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut) + \", skippedEdge1: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", skippedEdge2: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", neighbors:\") + (com.graphhopper.util.GHUtility.getNeighbors(com.graphhopper.util.CHEdgeIterator))));\n            } \n            com.graphhopper.util.CHEdgeIterator.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n            com.graphhopper.util.CHEdgeIterator.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n            com.graphhopper.util.CHEdgeIterator.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n            com.graphhopper.util.CHEdgeIterator.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n            com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIterator.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n            boolean = true;\n            break;\n        } \n    }\n    if (!boolean) {\n        com.graphhopper.util.CHEdgeIteratorState com.graphhopper.util.CHEdgeIteratorState = com.graphhopper.storage.CHGraphImpl.shortcut(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        com.graphhopper.util.CHEdgeIteratorState.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n        com.graphhopper.util.CHEdgeIteratorState.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIteratorState.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIteratorState.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIteratorState.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        int++;\n    } \n}"},"status":-1},{"failures":[],"tindex":"fcb97fa8-8283-11e5-bc8c-b33ae60f28fb","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:186","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(2000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:622","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setHeader((0 * 4), int)"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"fcb90a70-8283-11e5-bc8c-5d6b21bb3356","diffs":[{"methodsDiff":{"delete":["java.lang.Math.abs"]},"type":"staticDiff"}]},{"transformation":"fcb8e35a-8283-11e5-bc8c-73422adbeceb","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.PointList.getLongitude"]},"type":"staticDiff"}]},{"transformation":"fcb8bc45-8283-11e5-bc8c-e7aa5b466848","diffs":[{"branches":{"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":["com.graphhopper.storage.CHGraphImpl_void_checkNodeId(int).b"]},"type":"branch"},{"methodsDiff":{"delete":["com.graphhopper.storage.CHGraphImpl.checkNodeId"]},"type":"staticDiff"}]}]}
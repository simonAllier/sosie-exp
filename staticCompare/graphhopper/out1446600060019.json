{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":116,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":280,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":301,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":309,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":159,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":103,"com.graphhopper.reader.OSMReaderTest.testFerry":312,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":233,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":234,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":298,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":3,"com.graphhopper.routing.QueryGraphTest.testOneWay":308,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":90,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidanceOfHighMaxSpeed":18,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":28,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":155,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":30,"com.graphhopper.reader.OSMReaderTest.testWithBounds":322,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":122,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":180,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":114,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":258,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":303,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":259,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":66,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":287,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":121,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":213,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":248,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":21,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":89,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":191,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":91,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":132,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":292,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":129,"com.graphhopper.GraphHopperTest.testPrepare":251,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":185,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":55,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":203,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":219,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":284,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":306,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":44,"com.graphhopper.util.InstructionListTest.testWayList":242,"com.graphhopper.routing.util.BikeFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":2,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":49,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":241,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":20,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":247,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":81,"com.graphhopper.GraphHopperAPITest.testDisconnected179":311,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":65,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":263,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":109,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":1,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":252,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":154,"com.graphhopper.routing.util.BikeFlagEncoderTest.testPreferenceForSlowSpeed":9,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":260,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":105,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":45,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidTunnel":26,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":212,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":276,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":156,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":272,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":326,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":262,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":318,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":76,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":268,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":119,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":130,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":38,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":209,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":135,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":193,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":198,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":195,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":194,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":294,"com.graphhopper.GraphHopperTest.testLoadOSM":62,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":162,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":293,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":143,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":71,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":157,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":224,"com.graphhopper.reader.OSMReaderTest.testSort":315,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":223,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":50,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":261,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":321,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":86,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":201,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":291,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":147,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":6,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":170,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":283,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":305,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":324,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":8,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":267,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":197,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":113,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":151,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":80,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":57,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":43,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":48,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":300,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":142,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":84,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":176,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":218,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":171,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":16,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":208,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":152,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":101,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":216,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":52,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":271,"com.graphhopper.util.GHUtilityTest.testSort":237,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":110,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":160,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":307,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":275,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":274,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidMotorway":5,"com.graphhopper.search.NameIndexTest.testPut":327,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":199,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":206,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":137,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":174,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":189,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":67,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":25,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":98,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":304,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":266,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":41,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":221,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":10,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":181,"com.graphhopper.GraphHopperAPITest.testLoad":61,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":40,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":56,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":186,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":214,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":257,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":205,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":172,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":264,"com.graphhopper.reader.OSMReaderTest.testBarriers":316,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes":87,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":124,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":254,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":138,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":47,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":107,"com.graphhopper.util.GHUtilityTest.testCopy":236,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testPreferenceForSlowSpeed":22,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAvoidTunnel":4,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":42,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testPreferenceForSlowSpeed":31,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":173,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":246,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":183,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":112,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":211,"com.graphhopper.util.InstructionListTest.testEmptyList":240,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":277,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedRelationShouldNotInfluencePriority":24,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":229,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":217,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":51,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":196,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":220,"com.graphhopper.storage.GraphHopperStorageCHTest.testFlags":78,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":54,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":97,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":184,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":289,"com.graphhopper.reader.PrinctonReaderTest.testRead":325,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":230,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":79,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":178,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":111,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":190,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":102,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":69,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":60,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes2":75,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":108,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":202,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":297,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":187,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":93,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testPreferenceForSlowSpeed":17,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidTunnel":12,"com.graphhopper.util.InstructionListTest.testWayList2":243,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":29,"com.graphhopper.reader.OSMReaderTest.testFoot":313,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":127,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":123,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":163,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":310,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":231,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":161,"com.graphhopper.reader.OSMReaderTest.testOneWay":323,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":177,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":73,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":215,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":265,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":77,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":227,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":226,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAvoidMotorway":19,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":115,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":59,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":182,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":133,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":118,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":204,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":210,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":317,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":270,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":288,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":148,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":282,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":179,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":58,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":64,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":94,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":286,"com.graphhopper.routing.PathBidirRefTest.testExtract":295,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":37,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":245,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":255,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":32,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":126,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":36,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":200,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":35,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":150,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":34,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":125,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":33,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":167,"com.graphhopper.util.GHUtilityTest.testSort2":235,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":53,"com.graphhopper.reader.OSMReaderTest.testMain":314,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":99,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":188,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":96,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":68,"com.graphhopper.routing.PathBidirRefTest.testExtract2":296,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":95,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":136,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":128,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":273,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":144,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":14,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":164,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":168,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":256,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":153,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":225,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":85,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":15,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":88,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":139,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":319,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":131,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":192,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":23,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":72,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":281,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAvoidMotorway":27,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":63,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":158,"com.graphhopper.storage.GraphHopperStorageTest.testClone":207,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":232,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":100,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":228,"com.graphhopper.storage.GraphHopperStorageCHTest.testCheckFirstNode":92,"com.graphhopper.GraphHopperTest.testFootAndCar":39,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":222,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":70,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":11,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAvoidMotorway":13,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":106,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":290,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":165,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":141,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":120,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":279,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":175,"com.graphhopper.util.GHUtilityTest.testSortDirected":238,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":83,"com.graphhopper.GraphHopperTest.testPrepareOnly":249,"com.graphhopper.GraphHopperTest.testVia":250,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":7,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":299,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":104,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":278,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":320,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":149,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":140,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":302,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":244,"com.graphhopper.GraphHopperTest.testFootOnly":253,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":145,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":0,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":134,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":146,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":82,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":117,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":269,"com.graphhopper.util.InstructionListTest.testFind":239,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":46,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":285,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":74,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":166,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":169},"transformations":[{"failures":[],"tindex":"4e9c4bf5-8292-11e5-8b1f-f9f95474627a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:286","type":"CtForImpl","sourcecode":"for ( ; int > 0 ; long <<= 1) {\n    if ((long & long) != 0)\n        long |= 1;\n    \n    long <<= 1;\n    int--;\n    if (long == 0) {\n        long <<= int;\n        break;\n    } \n}"},"variableMap":{"res":"osmId","maxBit":"osmId","delta":"tmpIndex","maxBits":"com.graphhopper.reader.OSMReader.TOWER_NODE","value":"osmId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:635","type":"CtIfImpl","sourcecode":"if (int == (com.graphhopper.reader.OSMReader.int)) {\n    com.graphhopper.reader.OSMReader.getNodeMap().put(long, com.graphhopper.reader.OSMReader.int);\n} else if (int > (com.graphhopper.reader.OSMReader.int)) {\n    com.graphhopper.reader.OSMReader.getNodeMap().put(long, com.graphhopper.reader.OSMReader.int);\n} else {\n}"},"status":-2},{"failures":[],"tindex":"4e9c7306-8292-11e5-8b1f-298cd41022a0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtil:225","type":"CtLocalVariableImpl","sourcecode":"long long = 1L << 63"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:177","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.storage.EdgeAccess._getLinkPosInEdgeArea(int, int, long)"},"status":-2},{"failures":[],"tindex":"4e9c9a17-8292-11e5-8b1f-d300f92e0f5a","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.MiniPerfTest:44","type":"CtLocalVariableImpl","sourcecode":"long long = java.lang.System.nanoTime()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:103","type":"CtLocalVariableImpl","sourcecode":"long long = com.graphhopper.storage.RAMIntDataAccess.getCapacity()"},"status":-2},{"failures":[],"tindex":"4e9c9a18-8292-11e5-8b1f-cb050af983da","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullIndex:103","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.QueryResult.setClosestEdge(com.graphhopper.routing.util.AllEdgesIterator.detach(false))"},"status":0},{"failures":[],"tindex":"4e9c9a19-8292-11e5-8b1f-717884b3910e","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtil:225","type":"CtLocalVariableImpl","sourcecode":"long long = 1L << 63"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHNodeAccess:120","type":"CtLocalVariableImpl","sourcecode":"long long = ((long)(int)) * (com.graphhopper.storage.BaseGraph.int)"},"status":-2},{"failures":[],"tindex":"4e9c9a1a-8292-11e5-8b1f-d3a5fda5983f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntDoubleBinHeap:116","type":"CtForImpl","sourcecode":"for (int = 1 ; (int * 2) <= (int) ; int = int) {\n    int = int * 2;\n    if ((int != (int)) && ((float[][(int + 1)]) < (float[][int]))) {\n        int++;\n    } \n    if (double > (float[][int])) {\n        int[][int] = int[][int];\n        float[][int] = float[][int];\n    } else {\n        break;\n    }\n}"},"status":-2},{"failures":[],"tindex":"4e9c9a1b-8292-11e5-8b1f-f3669c769018","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.TraversalMode:115","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.GHUtility.reverseEdgeKey(int)"},"variableMap":{"edgeKey":"shift"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:168","type":"CtReturnImpl","sourcecode":"return int"},"status":0},{"failures":[0],"tindex":"4e9c9a1c-8292-11e5-8b1f-a3494b60f150","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:110","type":"CtIfImpl","sourcecode":"if (long < 0)\n    throw new java.lang.IllegalArgumentException(\"new capacity has to be strictly positive\");\n"},"variableMap":{"byteCount":"nodeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:384","type":"CtIfImpl","sourcecode":"if (long > 0) {\n    if ((long & long) > 0) {\n        com.graphhopper.reader.OSMReader.getNodeFlagsMap().put(long, 0);\n        long long = com.graphhopper.reader.OSMReader.addBarrierNode(long);\n        if (int > 0) {\n            if (int < 0)\n                int = 0;\n            \n            long[] long[] = gnu.trove.list.TLongList.toArray(int, ((int - int) + 1));\n            long[][((long[].int) - 1)] = long;\n            gnu.trove.list.TLongList gnu.trove.list.TLongList = new gnu.trove.list.array.TLongArrayList(long[]);\n            java.util.List<com.graphhopper.util.EdgeIteratorState>.addAll(com.graphhopper.reader.OSMReader.addOSMWay(gnu.trove.list.TLongList, long, long));\n            java.util.List<com.graphhopper.util.EdgeIteratorState>.addAll(com.graphhopper.reader.OSMReader.addBarrierEdge(long, long, long, long, long));\n        } else {\n            java.util.List<com.graphhopper.util.EdgeIteratorState>.addAll(com.graphhopper.reader.OSMReader.addBarrierEdge(long, long, long, long, long));\n            gnu.trove.list.TLongList.set(0, long);\n        }\n        int = int;\n    } \n} "},"status":-1},{"failures":[],"tindex":"4e9cc12d-8292-11e5-8b1f-e1989183e7d9","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:313","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.StopWatch.start()"},"variableMap":{"lazySW":"extractSW"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:194","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.StopWatch.stop()"},"status":0},{"failures":[],"tindex":"4e9cc12e-8292-11e5-8b1f-ef888e443100","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:967","type":"CtAssignmentImpl","sourcecode":"int = (23 * int) + (int)"},"variableMap":{"from":"frontIndex","hash":"frontIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.SimpleIntDeque:73","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-2},{"failures":[],"tindex":"4e9cc12f-8292-11e5-8b1f-33d1765cd04b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.EdgeEntry:52","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.storage.EdgeEntry.com.graphhopper.storage.EdgeEntry = com.graphhopper.storage.EdgeEntry.clone()"},"variableMap":{"parent":"edgeTo","cl":"edgeTo","tmpPrev":"edgeTo"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:163","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.routing.PathBidirRef.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge"},"status":-2},{"failures":[],"tindex":"4e9cc130-8292-11e5-8b1f-699d5874b11f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:478","type":"CtAssignmentImpl","sourcecode":"int = (int + int) >>> 1"},"variableMap":{"high":"maxLeafEntries","guess":"maxLeafEntries","low":"maxLeafEntries"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHLongIntBTree:54","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":0},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"tindex":"4e9cc131-8292-11e5-8b1f-d145999579fc","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:384","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"tracktype\")"},"variableMap":{"way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:525","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = com.graphhopper.reader.OSMWay.getTag(\"highway\")"},"status":-1},{"failures":[32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"tindex":"4e9cc132-8292-11e5-8b1f-1fd4d51b29b1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.Dijkstra:103","type":"CtInvocationImpl","sourcecode":"java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.remove(com.graphhopper.storage.EdgeEntry)"},"variableMap":{"nEdge":"ee","fromHeap":"prioQueue"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:213","type":"CtInvocationImpl","sourcecode":"java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.add(com.graphhopper.storage.EdgeEntry)"},"status":-1},{"failures":[],"tindex":"4e9ce843-8292-11e5-8b1f-a3e91d194ed3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:803","type":"CtIfImpl","sourcecode":"if (int < 0)\n    return 1;\n"},"variableMap":{"edgeId":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntIntBinHeap:68","type":"CtIfImpl","sourcecode":"if ((int) > 0) {\n    return int[][1];\n} else {\n    throw new java.lang.IllegalStateException(\"An empty queue does not have a minimum key.\");\n}"},"status":-2},{"failures":[],"tindex":"4e9ce844-8292-11e5-8b1f-71220783393f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.DijkstraBidirectionRef:216","type":"CtInvocationImpl","sourcecode":"java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.remove(com.graphhopper.storage.EdgeEntry)"},"status":0},{"failures":[62,41],"tindex":"4e9ce845-8292-11e5-8b1f-97a48448522a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:773","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GraphHopper.postProcessing()"},"status":-1},{"failures":[49,56,57,58,63,59,60,64],"tindex":"4e9ce846-8292-11e5-8b1f-9fa93155d64c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:118","type":"CtIfImpl","sourcecode":"if (int < 0)\n    throw new java.lang.IllegalStateException(\"Too many segments needs to be allocated. Increase segmentSize.\");\n"},"variableMap":{"segmentsToMap":"priority"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:346","type":"CtIfImpl","sourcecode":"if (int != int)\n    com.graphhopper.coll.GHTreeMapComposed.update(int, int, int);\n"},"status":-1},{"failures":[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,32,33,34,35,36,37,250,251,38,39,40,62,252,41,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,42,273,43,44,45,46,274,275,47,276,48,277,49,278,279,50,51,52,53,54,55,280,281,282,56,283,57,284,285,58,286,287,288,289,290,63,291,59,60,292,293,64,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,61,311,312,313,314,315,316,317,318,319,0,320,321,322,323,324,325,326],"tindex":"4e9ce847-8292-11e5-8b1f-bf8203b2444b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:281","type":"CtForImpl","sourcecode":"for (long long = long + (int) ; long < long ; long += int) {\n    com.graphhopper.storage.DataAccess.setInt(long, com.graphhopper.util.EdgeIterator.int);\n}"},"status":-1},{"failures":[327],"tindex":"4e9d0f58-8292-11e5-8b1f-0f2a69e2185d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.search.NameIndex:75","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(java.lang.String)) {\n    return long;\n} "},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"4e9c9a18-8292-11e5-8b1f-cb050af983da","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.EdgeIteratorState.detach","com.graphhopper.storage.index.QueryResult.setClosestEdge"]},"type":"staticDiff"},{"branches":{"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":["com.graphhopper.storage.BaseGraph$AllEdgeIterator_com.graphhopper.util.EdgeIteratorState_detach(boolean).e1","com.graphhopper.storage.index.QueryResult_void_setClosestEdge(com.graphhopper.util.EdgeIteratorState).b","com.graphhopper.storage.BaseGraph$AllEdgeIterator_com.graphhopper.util.EdgeIteratorState_detach(boolean).e2","com.graphhopper.storage.BaseGraph$AllEdgeIterator_com.graphhopper.util.EdgeIteratorState_detach(boolean).b"],"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":["com.graphhopper.storage.BaseGraph$AllEdgeIterator_com.graphhopper.util.EdgeIteratorState_detach(boolean).e1","com.graphhopper.storage.index.QueryResult_void_setClosestEdge(com.graphhopper.util.EdgeIteratorState).b","com.graphhopper.storage.BaseGraph$AllEdgeIterator_com.graphhopper.util.EdgeIteratorState_detach(boolean).e2","com.graphhopper.storage.BaseGraph$AllEdgeIterator_com.graphhopper.util.EdgeIteratorState_detach(boolean).b"]},"type":"branch"}]},{"transformation":"4e9cc12d-8292-11e5-8b1f-e1989183e7d9","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.StopWatch.stop"]},"type":"staticDiff"},{"branches":{"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":["com.graphhopper.util.StopWatch_com.graphhopper.util.StopWatch_stop().b","com.graphhopper.util.StopWatch_com.graphhopper.util.StopWatch_stop().e1"],"com.graphhopper.util.InstructionListTest.testFind":["com.graphhopper.util.StopWatch_com.graphhopper.util.StopWatch_stop().b","com.graphhopper.util.StopWatch_com.graphhopper.util.StopWatch_stop().e1"]},"type":"branch"}]},{"transformation":"4e9ce844-8292-11e5-8b1f-71220783393f","diffs":[{"methodsDiff":{"delete":["java.util.PriorityQueue<com.graphhopper.storage.EdgeEntry>.remove"]},"type":"staticDiff"}]}]}
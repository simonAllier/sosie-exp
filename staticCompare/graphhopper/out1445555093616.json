{"failureDictionary":{"com.graphhopper.reader.OSMReaderTest.testMain":4,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":53,"com.graphhopper.reader.OSMReaderTest.testFerry":2,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":51,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleCommonWayTags":27,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":23,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testService":33,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":29,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleCommonWayTags":17,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleCommonWayTags":44,"com.graphhopper.coll.IntIntBinHeapTest.testRekey":0,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsCallsHandlePriority":46,"com.graphhopper.reader.OSMReaderTest.testWithBounds":10,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testService":18,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":8,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":43,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testGetSpeed":37,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":11,"com.graphhopper.routing.util.EncodingManagerTest.testMixBikeTypesAndRelationCombination":47,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":26,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":39,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":19,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":34,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsCallsHandlePriority":36,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTagsInfluencedByRelation":41,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":42,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTags":14,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testCalcPriority":38,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testService":45,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":50,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":15,"com.graphhopper.reader.OSMReaderTest.testFoot":3,"com.graphhopper.coll.IntIntBinHeapTest.test0":1,"com.graphhopper.reader.OSMReaderTest.testOneWay":12,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":22,"com.graphhopper.routing.util.BikeFlagEncoderTest.testCalcPriority":21,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleCommonWayTags":35,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":32,"com.graphhopper.routing.util.BikeFlagEncoderTest.testGetSpeed":20,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":40,"com.graphhopper.routing.util.BikeFlagEncoderTest.testService":28,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":6,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testGetSpeed":13,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":7,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTagsInfluencedByRelation":24,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":30,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":25,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":9,"com.graphhopper.routing.util.EncodingManagerTest.testCombineRelations":48,"com.graphhopper.routing.util.EncodingManagerTest.testCompatibilityBug":49,"com.graphhopper.reader.OSMReaderTest.testSort":5,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":16,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testGetSpeed":31,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":52},"transformations":[{"failures":[],"tindex":"4e1aebba-7911-11e5-9bc5-a17dee742a8e","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:54","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"variableMap":{"maxLeafEntries":"mSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:202","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":0},{"failures":[0,1],"tindex":"4e1b39db-7911-11e5-9bc5-9319d4d484a9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.IntIntBinHeap:147","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[],"tindex":"4e1b39dc-7911-11e5-9bc5-7da77f2589eb","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.CompressedArray:178","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[1024]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:156","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = new byte[int]"},"status":-2},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"tindex":"4e1b39dd-7911-11e5-9bc5-95e2e34b02cb","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:307","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:413","type":"CtReturnImpl","sourcecode":"return int"},"status":-1},{"failures":[50,51,52],"tindex":"4e1b60ee-7911-11e5-9bc5-a5cc4814ef99","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:182","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.shapes.BBox.hasElevation()) {\n    com.graphhopper.util.shapes.BBox.double = com.graphhopper.util.Helper.intToEle(com.graphhopper.storage.DataAccess.getHeader((7 * 4)));\n    com.graphhopper.util.shapes.BBox.double = com.graphhopper.util.Helper.intToEle(com.graphhopper.storage.DataAccess.getHeader((8 * 4)));\n} "},"status":-1},{"failures":[53],"tindex":"4e1b60ef-7911-11e5-9bc5-8dd9d01832fe","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.QueryResult:171","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.PointList.getElevation(int)"},"variableMap":{"wayIndex":"wayIndex","fullPL":"fullPL"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.QueryResult:183","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.PointList.getElevation(((int) + 1))"},"status":-1},{"failures":[],"tindex":"4e1b60f0-7911-11e5-9bc5-b52c4c0a8460","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:463","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.MMapDataAccess.close()"},"variableMap":{"this":"da"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:110","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.close()"},"status":-2},{"failures":[],"tindex":"4e1b60f1-7911-11e5-9bc5-87dc52fd5570","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:169","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = (((java.lang.String) + \"/\") + java.lang.String) + \".zip\""},"variableMap":{"baseUrl":"line","name":"line"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:124","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = java.lang.String.substring((int + 1))"},"status":-2},{"failures":[],"tindex":"4e1b8802-7911-11e5-9bc5-815ce18d300f","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:119","type":"CtIfImpl","sourcecode":"if ((int % 2) == 1)\n    int++;\n"},"variableMap":{"numTiles":"com.graphhopper.util.EdgeIterator.NO_EDGE"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.CHGraphImpl:186","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.CHGraphImpl.CHEdgeIteratorImpl.setSkippedEdges(com.graphhopper.util.EdgeIterator.int, com.graphhopper.util.EdgeIterator.int)"},"status":-2},{"failures":[],"tindex":"4e1b8803-7911-11e5-9bc5-1748f9134c52","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:115","type":"CtIfImpl","sourcecode":"if (int > 100)\n    throw new java.lang.IllegalArgumentException(\"periodicUpdates has to be in [0, 100], to disable it use 0\");\n"},"variableMap":{"periodicUpdates":"itemsToMove"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:697","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    int int = com.graphhopper.coll.SparseIntIntArray.keyAt(int);\n    com.graphhopper.util.EdgeIterator com.graphhopper.util.EdgeIterator = com.graphhopper.util.EdgeExplorer.setBaseNode(int);\n    while (com.graphhopper.util.EdgeIterator.next()) {\n        int int = com.graphhopper.util.EdgeIterator.getAdjNode();\n        if (int == (com.graphhopper.storage.EdgeAccess.int))\n            continue;\n        \n        if (com.graphhopper.coll.GHBitSet.contains(int))\n            throw new java.lang.IllegalStateException((((\"shouldn\\'t happen the edge to the node \" + int) + \" should be already deleted. \") + int));\n        \n        com.graphhopper.coll.GHBitSet.add(int);\n    }\n}"},"status":-2},{"failures":[],"tindex":"4e1b8804-7911-11e5-9bc5-f99a29b8cd34","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:1148","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.GraphHopperStorage.flush()"},"variableMap":{"ghStorage":"ghStorage"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:662","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.storage.GraphHopperStorage) == null)\n    throw new java.lang.IllegalStateException(\"Load graph before importing OSM data\");\n"},"status":-2},{"failures":[],"tindex":"4e1b8805-7911-11e5-9bc5-93dc00a6b42b","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.BitUtil:255","type":"CtOperatorAssignmentImpl","sourcecode":"long |= long & 1"},"variableMap":{"res":"skippedLocations","value":"skippedLocations"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:579","type":"CtUnaryOperatorImpl","sourcecode":"(long)++"},"status":-2},{"failures":[],"tindex":"4e1baf16-7911-11e5-9bc5-6b65cf1235d3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDSegmentedMap:125","type":"CtIfImpl","sourcecode":"if (long > long) {\n    break;\n} "},"variableMap":{"storedKey":"directionBitMask","key":"backwardBit"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.CarFlagEncoder:269","type":"CtIfImpl","sourcecode":"if (boolean || boolean) {\n    boolean boolean = ((com.graphhopper.reader.OSMWay.hasTag(\"oneway\", \"-1\")) || (com.graphhopper.reader.OSMWay.hasTag(\"vehicle:forward\", \"no\"))) || (com.graphhopper.reader.OSMWay.hasTag(\"motor_vehicle:forward\", \"no\"));\n    if (boolean)\n        long |= long;\n    else\n        long |= long;\n    \n} else\n    long |= long;\n"},"status":-2},{"failures":[],"tindex":"4e1baf17-7911-11e5-9bc5-3fcf72d77d6b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.VLongStorage:86","type":"CtAssertImpl","sourcecode":"assert long >= 0L"},"variableMap":{"i":"edgeToRemovePointer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:686","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.EdgeAccess.invalidateEdge(long)"},"status":-2},{"failures":[],"tindex":"4e1baf18-7911-11e5-9bc5-ddca66cb3615","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(5);\n} catch (java.lang.InterruptedException iex) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:653","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.Lock != null)\n    com.graphhopper.storage.Lock.release();\n"},"status":-2},{"failures":[],"tindex":"4e1baf19-7911-11e5-9bc5-2500a70971ea","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:274","type":"CtOperatorAssignmentImpl","sourcecode":"long |= com.graphhopper.routing.util.AbstractFlagEncoder.handleWayTags(com.graphhopper.reader.OSMWay, long, (long & (com.graphhopper.routing.util.AbstractFlagEncoder.getRelBitMask())))"},"status":-2},{"failures":[],"tindex":"4e1bd62a-7911-11e5-9bc5-d772690613e9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:200","type":"CtInvocationImpl","sourcecode":"java.io.RandomAccessFile.write(byte[])"},"status":-2},{"failures":[],"tindex":"4e1bd62b-7911-11e5-9bc5-d1d6df095db4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:182","type":"CtAssignmentImpl","sourcecode":"long = java.lang.Math.round(java.lang.Math.sqrt(long))"},"status":-2},{"failures":[],"tindex":"4e1bd62c-7911-11e5-9bc5-cbd8b2b92b61","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Helper:176","type":"CtLocalVariableImpl","sourcecode":"int int = 1024 * 8"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:70","type":"CtLocalVariableImpl","sourcecode":"int int = 500"},"status":-2},{"failures":[],"tindex":"4e1bd62d-7911-11e5-9bc5-29c8a26dc14a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:350","type":"CtIfImpl","sourcecode":"if (boolean)\n    for (int int = 0 ; int < (int) ; int++) {\n        com.graphhopper.util.PointList.add(double[][int], double[][int], double[][int]);\n    }\nelse\n    for (int int = 0 ; int < (int) ; int++) {\n        com.graphhopper.util.PointList.add(double[][int], double[][int]);\n    }\n"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
{"failureDictionary":{"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testAccess":94,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":119,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":126,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":66,"com.graphhopper.reader.OSMReaderTest.testFerry":0,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":117,"com.graphhopper.routing.util.BikeFlagEncoderTest.testMaxSpeed":103,"com.graphhopper.storage.index.LocationIndexTreeTest.testNoErrorOnEdgeCase_lastIndex":75,"com.graphhopper.storage.UnsafeDataAccessTest.testSet_GetBytes":111,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":15,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":37,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":38,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":62,"com.graphhopper.reader.OSMReaderTest.testWithBounds":11,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testAccess":100,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":121,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":141,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTramStations":99,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":142,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testNoErrorOnEdgeCase_lastIndex":57,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":134,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":149,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":133,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":43,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testSacScale":89,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":116,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testTramStations":93,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":80,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":144,"com.graphhopper.GraphHopperTest.testPrepare":17,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":136,"com.graphhopper.storage.GraphHopperStorageCHTest.testBounds":160,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":31,"com.graphhopper.util.InstructionListTest.testWayList2":156,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":49,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":138,"com.graphhopper.reader.OSMReaderTest.testFoot":1,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":33,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":124,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":72,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":128,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":69,"com.graphhopper.storage.UnsafeDataAccessTest.testLoadFlush":115,"com.graphhopper.routing.util.RacingBikeFlagEncoderTest.testSacScale":92,"com.graphhopper.util.InstructionListTest.testWayList":155,"com.graphhopper.reader.OSMReaderTest.testOneWay":13,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":70,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":147,"com.graphhopper.routing.util.BikeFlagEncoderTest.testHandleWayTags":102,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":154,"com.graphhopper.routing.util.BikeFlagEncoderTest.testSacScale":101,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":131,"com.graphhopper.GraphHopperAPITest.testDisconnected179":79,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":87,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":140,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testBounds":161,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":60,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":36,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":29,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testSacScale":95,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":63,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":5,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":6,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":152,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":53,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":129,"com.graphhopper.storage.UnsafeDataAccessTest.testLoadClose":114,"com.graphhopper.GraphHopperTest.testNoNPE_ifLoadNotSuccessful":26,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":88,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":18,"com.graphhopper.routing.util.BikeFlagEncoderTest.testOneway":104,"com.graphhopper.storage.UnsafeDataAccessTest.testCopy":112,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":151,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":86,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":150,"com.graphhopper.GraphHopperTest.testLoadOSM":21,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":67,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":71,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":81,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":46,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":64,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":85,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":55,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":84,"com.graphhopper.reader.OSMReaderTest.testSort":3,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":83,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":135,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":82,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":10,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":77,"com.graphhopper.reader.OSMReaderTest.testMain":2,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":146,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":35,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":107,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":51,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":52,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":123,"com.graphhopper.routing.util.BikeFlagEncoderTest.testAccess":106,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":145,"com.graphhopper.routing.PathTest.testWayList":130,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":137,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":27,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":56,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":47,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":73,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":59,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":7,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":41,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":28,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":61,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":118,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":45,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":12,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":143,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":34,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTramStations":105,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testHandleWayTags":96,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":148,"com.graphhopper.storage.GraphHopperStorageCHTest.testCannotBeLoadedWithNormalGraphHopperStorageClass":108,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":58,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":65,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":39,"com.graphhopper.GraphHopperTest.testFootAndCar":19,"com.graphhopper.GraphHopperTest.testFailsForMissingParameters":22,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":139,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testOneway":98,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testAccess":91,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":109,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":68,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":125,"com.graphhopper.storage.GraphStorageViaMMapTest.testBounds":158,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":30,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":127,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":74,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":44,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testMaxSpeed":97,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":122,"com.graphhopper.GraphHopperTest.testPrepareOnly":14,"com.graphhopper.GraphHopperTest.testVia":16,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":132,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":23,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":9,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":54,"com.graphhopper.GraphHopperAPITest.testLoad":78,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":20,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":42,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":120,"com.graphhopper.GraphHopperTest.testFootOnly":24,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":32,"com.graphhopper.storage.GraphHopperStorageTest.testBounds":159,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":48,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":8,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":50,"com.graphhopper.reader.OSMReaderTest.testBarriers":4,"com.graphhopper.util.InstructionListTest.testFind":153,"com.graphhopper.storage.UnsafeDataAccessTest.testSegments":113,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":25,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":40,"com.graphhopper.util.GHUtilityTest.testCopy":157,"com.graphhopper.routing.util.MountainBikeFlagEncoderTest.testTramStations":90,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":76,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":110},"transformations":[{"failures":[],"tindex":"419286a4-827e-11e5-8f8c-715b99f3c016","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:94","type":"CtIfImpl","sourcecode":"if (boolean) {\n    int = com.graphhopper.util.PointList.getSize();\n    com.graphhopper.util.DouglasPeucker.simplify(com.graphhopper.util.PointList);\n} "},"status":0},{"failures":[],"tindex":"419286a5-827e-11e5-8f8c-e56ef41f21f7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:577","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.CHGraphImpl.this.getWeight(this)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:141","type":"CtReturnImpl","sourcecode":"return double"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"tindex":"4192adb6-827e-11e5-8f8c-0d535da36f50","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.NativeFSLockFactory:171","type":"CtReturnImpl","sourcecode":"return !boolean"},"variableMap":{"obtained":"fullyLoaded"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:758","type":"CtTryImpl","sourcecode":"try {\n    if ((com.graphhopper.storage.GraphHopperStorage.getDirectory().getDefaultType().isStoring()) && com.graphhopper.GraphHopper.(isAllowWrites())) {\n        com.graphhopper.storage.LockFactory.setLockDir(new java.io.File(java.lang.String));\n        com.graphhopper.storage.Lock = com.graphhopper.storage.LockFactory.create(java.lang.String, false);\n        if (!(com.graphhopper.storage.Lock.tryLock()))\n            throw new java.lang.RuntimeException((\"To avoid reading partial data we need to obtain the read lock but it failed. In \" + (java.lang.String)) , com.graphhopper.storage.Lock.getObtainFailedReason());\n        \n    } \n    if (!(com.graphhopper.storage.GraphHopperStorage.loadExisting()))\n        return false;\n    \n    com.graphhopper.GraphHopper.postProcessing();\n    boolean = true;\n    return true;\n} finally {\n    if (com.graphhopper.storage.Lock != null)\n        com.graphhopper.storage.Lock.release();\n    \n}"},"status":-1},{"failures":[],"tindex":"4192adb7-827e-11e5-8f8c-458459f6a703","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:721","type":"CtLocalVariableImpl","sourcecode":"double double = double - (int * (double))"},"variableMap":{"deltaLon":"queryLat","queryLon":"queryLon","iteration":"iteration"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:744","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.storage.index.LocationIndexTree.calculateRMin(double, double, int)"},"status":0},{"failures":[27,28,29,30,31,32,33,34,35,36],"tindex":"4192adb8-827e-11e5-8f8c-556dd0f4bac4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.SparseArray:110","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"variableMap":{"mGarbage":"reverseOrder"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Path:132","type":"CtAssignmentImpl","sourcecode":"boolean = false"},"status":-1},{"failures":[],"tindex":"4192adb9-827e-11e5-8f8c-f3510b0c596d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:672","type":"CtIfImpl","sourcecode":"if ((double != 0) || (java.lang.Double.isInfinite(double)))\n    throw new java.lang.IllegalArgumentException(\"Restricted turn can only have infinite costs (or use 0)\");\n"},"variableMap":{"costs":"weight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:655","type":"CtForEachImpl","sourcecode":"NEXT_SC : for (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut : java.util.Map<com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut>.keySet()) {\n    boolean boolean = false;\n    com.graphhopper.util.CHEdgeIterator com.graphhopper.util.CHEdgeIterator = com.graphhopper.util.CHEdgeExplorer.setBaseNode(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n    while (com.graphhopper.util.CHEdgeIterator.next()) {\n        if (((com.graphhopper.util.CHEdgeIterator.isShortcut()) && ((com.graphhopper.util.CHEdgeIterator.getAdjNode()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) && (com.graphhopper.util.CHEdgeIterator.canBeOverwritten(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long))) {\n            if ((com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double) >= (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.CHEdgeIterator, false, com.graphhopper.util.EdgeIterator.int)))\n                continue NEXT_SC;\n            \n            if (((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) || ((com.graphhopper.util.CHEdgeIterator.getEdge()) == (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int))) {\n                throw new java.lang.IllegalStateException((((((((((((((((((\"Shortcut cannot update itself! \" + (com.graphhopper.util.CHEdgeIterator.getEdge())) + \", skipEdge1:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", skipEdge2:\") + (com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int)) + \", edge \") + com.graphhopper.util.CHEdgeIterator) + \":\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.util.CHEdgeIterator, com.graphhopper.storage.CHGraphImpl))) + \", sc:\") + com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut) + \", skippedEdge1: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", skippedEdge2: \") + com.graphhopper.routing.ch.PrepareContractionHierarchies.(getCoords(com.graphhopper.storage.CHGraphImpl.getEdgeIteratorState(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int), com.graphhopper.storage.CHGraphImpl))) + \", neighbors:\") + (com.graphhopper.util.GHUtility.getNeighbors(com.graphhopper.util.CHEdgeIterator))));\n            } \n            com.graphhopper.util.CHEdgeIterator.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n            com.graphhopper.util.CHEdgeIterator.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n            com.graphhopper.util.CHEdgeIterator.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n            com.graphhopper.util.CHEdgeIterator.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n            com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIterator.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n            boolean = true;\n            break;\n        } \n    }\n    if (!boolean) {\n        com.graphhopper.util.CHEdgeIteratorState com.graphhopper.util.CHEdgeIteratorState = com.graphhopper.storage.CHGraphImpl.shortcut(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        com.graphhopper.util.CHEdgeIteratorState.setFlags(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.long);\n        com.graphhopper.util.CHEdgeIteratorState.setWeight(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIteratorState.setDistance(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.double);\n        com.graphhopper.util.CHEdgeIteratorState.setSkippedEdges(com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int, com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        com.graphhopper.routing.ch.PrepareContractionHierarchies.setOrigEdgeCount(com.graphhopper.util.CHEdgeIteratorState.getEdge(), com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut.int);\n        int++;\n    } \n}"},"status":-2},{"failures":[37,38,39,31,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,0,1,2,3,4,5,6,7,8,9,10,11,12,13,78,79,80,14,81,82,83,84,85,86,15,16,17,18,19,20,21,87,23,24,25],"tindex":"4192d4ca-827e-11e5-8f8c-61ba097a9eed","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:197","type":"CtAssignmentImpl","sourcecode":"long[] = new long[int]"},"status":-1},{"failures":[88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,7],"tindex":"4192fbdb-827e-11e5-8f8c-015c66fce5c5","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.FootFlagEncoder:224","type":"CtIfImpl","sourcecode":"if (java.lang.String != null) {\n    if ((((!(\"hiking\".equals(java.lang.String))) && (!(\"mountain_hiking\".equals(java.lang.String)))) && (!(\"demanding_mountain_hiking\".equals(java.lang.String)))) && (!(\"alpine_hiking\".equals(java.lang.String))))\n        return 0;\n    \n} "},"variableMap":{"sacScale":"highwayValue"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:265","type":"CtIfImpl","sourcecode":"if ((\"motorway\".equals(java.lang.String)) || (\"motorway_link\".equals(java.lang.String)))\n    return 0;\n"},"status":-1},{"failures":[],"tindex":"4192fbdc-827e-11e5-8f8c-538e1296d848","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:254","type":"CtAssertImpl","sourcecode":"assert (int + 2) <= (int) : \"integer cannot be distributed over two segments\""},"variableMap":{"segmentSizeInBytes":"edge","index":"edge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:247","type":"CtIfImpl","sourcecode":"if (!com.graphhopper.routing.AbstractRoutingAlgorithm.(accept(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge.int)))\n    continue;\n"},"status":-2},{"failures":[107,108,109,110,14,21,87,23],"tindex":"4192fbdd-827e-11e5-8f8c-67df32d5b1cf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:197","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setHeader((4 * 4), com.graphhopper.util.Helper.degreeToInt(com.graphhopper.util.shapes.BBox.double))"},"status":-1},{"failures":[],"tindex":"4192fbde-827e-11e5-8f8c-f56bcd7bdc43","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:675","type":"CtOperatorAssignmentImpl","sourcecode":"long |= long"},"variableMap":{"encoded":"encoded","backwardBit":"encoded"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:221","type":"CtAssignmentImpl","sourcecode":"long = com.graphhopper.routing.util.MotorcycleFlagEncoder.setReverseSpeed(long, double)"},"status":0},{"failures":[],"tindex":"4192fbdf-827e-11e5-8f8c-ad2637f98a32","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:410","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.routing.util.BikeCommonFlagEncoder.int"},"variableMap":{"com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED":"hash","speed":"hash"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FastestWeighting:90","type":"CtAssignmentImpl","sourcecode":"int = (71 * int) + (com.graphhopper.routing.util.FastestWeighting.toString().hashCode())"},"status":0},{"failures":[],"tindex":"4192fbe0-827e-11e5-8f8c-fb7eea001eab","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:586","type":"CtIfImpl","sourcecode":"if (int == (com.graphhopper.reader.OSMReader.int))\n    return false;\n"},"variableMap":{"com.graphhopper.reader.OSMReader.EMPTY":"index","nodeType":"index"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHTBitSet:50","type":"CtReturnImpl","sourcecode":"return gnu.trove.set.hash.TIntHashSet.contains(int)"},"status":-2},{"failures":[111,112,113,114,115],"tindex":"419322f1-827e-11e5-8f8c-6365d696ab16","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:199","type":"CtIfImpl","sourcecode":"if (int > 1000)\n    throw new java.lang.IllegalStateException(\"something went wrong: there seems to be no end of the turn cost-list!?\");\n"},"variableMap":{"i":"length"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:236","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    com.graphhopper.storage.UnsafeDataAccess.sun.misc.Unsafe.putByte((((long) + long) + int), byte[][int]);\n}"},"status":-1},{"failures":[116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,107,138,139,140,141,142,44,45,46,62,63,64,109,143,144,145,146,147,110,148,149,150,151,152,2,3,4,5,6,8,9,153,154,155,156,157,80,14,15,17,18,20,21,87,23,24],"tindex":"419322f2-827e-11e5-8f8c-5d1c29b29f85","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.PointList:92","type":"CtIfImpl","sourcecode":"if (int >= (int))\n    throw new java.lang.ArrayIndexOutOfBoundsException((\"index has to be smaller than size \" + (int)));\n"},"variableMap":{"size":"i","index":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:848","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.BitUtil.fromInt(byte[], com.graphhopper.util.Helper.degreeToInt(com.graphhopper.util.PointList.getLongitude(int)), int)"},"status":-1},{"failures":[],"tindex":"419322f3-827e-11e5-8f8c-23772ee068fe","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:154","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:222","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setHeader((3 * 4), com.graphhopper.storage.GraphExtension.hashCode())"},"status":0},{"failures":[],"tindex":"419322f4-827e-11e5-8f8c-7bb00e1bb99b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GHDirectory:167","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.DataAccess instanceof com.graphhopper.storage.MMapDataAccess)\n    ((com.graphhopper.storage.MMapDataAccess)(com.graphhopper.storage.DataAccess)).close(boolean);\nelse\n    com.graphhopper.storage.DataAccess.close();\n"},"status":0},{"failures":[],"tindex":"419322f5-827e-11e5-8f8c-f90583d9e062","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:657","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:45","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = true"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,80,14,15,16,17,18,19,20,21,87,23,24,25],"tindex":"41934a06-827e-11e5-8f8c-61439c03bd51","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:406","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.util.EdgeIteratorState>.addAll(com.graphhopper.reader.OSMReader.addBarrierEdge(long, long, long, long, long))"},"variableMap":{"createdEdges":"createdEdges","newNodeId":"wayOsmId","wayOsmId":"wayFlags","wayFlags":"wayFlags","this":"this","nodeFlags":"wayOsmId","nodeId":"wayFlags"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:433","type":"CtInvocationImpl","sourcecode":"java.util.List<com.graphhopper.util.EdgeIteratorState>.addAll(com.graphhopper.reader.OSMReader.addOSMWay(com.graphhopper.reader.OSMWay.getNodes(), long, long))"},"status":-1},{"failures":[158,107,159,109,160,110,161],"tindex":"41934a07-827e-11e5-8f8c-77120dcbcb26","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:770","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double = double;\n} "},"variableMap":{"min":"maxLon","dist":"lon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.shapes.BBox:102","type":"CtIfImpl","sourcecode":"if (double > (double)) {\n    double = double;\n} "},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"419322f4-827e-11e5-8f8c-7bb00e1bb99b","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.MMapDataAccess.close","com.graphhopper.storage.Storable<com.graphhopper.storage.DataAccess>.close"]},"branchesDiff":{"delete":["t0","e1"]},"type":"staticDiff"},{"branches":{"com.graphhopper.reader.OSMReaderTest.testNegativeIds":["com.graphhopper.storage.AbstractDataAccess_void_close().b","com.graphhopper.storage.RAMDataAccess_void_close().b"],"com.graphhopper.GraphHopperTest.testFootAndCar":["com.graphhopper.storage.AbstractDataAccess_void_close().b","com.graphhopper.storage.RAMDataAccess_void_close().b"]},"type":"branch"}]},{"transformation":"4192adb7-827e-11e5-8f8c-458459f6a703","diffs":[{"branches":{"com.graphhopper.reader.OSMReaderTest.testBarriers":["com.graphhopper.storage.index.LocationIndexTree_boolean_findNetworkEntries(double,double,gnu.trove.set.hash.TIntHashSet,int).t4","com.graphhopper.geohash.SpatialKeyAlgo_long_encode(com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.util.shapes.GHPoint_com.graphhopper.util.shapes.GHPoint().b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).l4","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t3","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e1","com.graphhopper.storage.index.LocationIndexTree_boolean_findNetworkEntries(double,double,gnu.trove.set.hash.TIntHashSet,int).e4","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e3","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e2","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t2","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.GraphHopperAPITest.testLoad":["com.graphhopper.storage.index.LocationIndexTree_boolean_findNetworkEntries(double,double,gnu.trove.set.hash.TIntHashSet,int).t4","com.graphhopper.geohash.SpatialKeyAlgo_long_encode(com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.util.shapes.GHPoint_com.graphhopper.util.shapes.GHPoint().b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).l4","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t2","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t3","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e2","com.graphhopper.storage.index.LocationIndexTree_boolean_findNetworkEntries(double,double,gnu.trove.set.hash.TIntHashSet,int).e4","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e3","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e2","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t2","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t1","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":["com.graphhopper.geohash.SpatialKeyAlgo_long_encode(com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.storage.index.LocationIndexTree_boolean_findNetworkEntries(double,double,gnu.trove.set.hash.TIntHashSet,int).t4","com.graphhopper.util.shapes.GHPoint_com.graphhopper.util.shapes.GHPoint().b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).l4","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e3","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e2","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e2","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t1","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":["com.graphhopper.storage.index.LocationIndexTree_boolean_findNetworkEntries(double,double,gnu.trove.set.hash.TIntHashSet,int).t4","com.graphhopper.geohash.SpatialKeyAlgo_long_encode(com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.util.shapes.GHPoint_com.graphhopper.util.shapes.GHPoint().b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).l4","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t2","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e2","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e1","com.graphhopper.storage.index.LocationIndexTree_boolean_findNetworkEntries(double,double,gnu.trove.set.hash.TIntHashSet,int).e4","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e3","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e2","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t2","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":["com.graphhopper.geohash.SpatialKeyAlgo_long_encode(com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.storage.index.LocationIndexTree_boolean_findNetworkEntries(double,double,gnu.trove.set.hash.TIntHashSet,int).t4","com.graphhopper.util.shapes.GHPoint_com.graphhopper.util.shapes.GHPoint().b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).l4","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t3","com.graphhopper.storage.index.LocationIndexTree_boolean_findNetworkEntries(double,double,gnu.trove.set.hash.TIntHashSet,int).e4","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.storage.index.LocationIndexTree_void_fillIDs(long,int,gnu.trove.set.hash.TIntHashSet,int).e3","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e3","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e2","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t2","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t1","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"],"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":["com.graphhopper.storage.index.LocationIndexTree_boolean_findNetworkEntries(double,double,gnu.trove.set.hash.TIntHashSet,int).t4","com.graphhopper.geohash.SpatialKeyAlgo_long_encode(com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.util.shapes.GHPoint_com.graphhopper.util.shapes.GHPoint().b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).l4","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e1","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t2","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).t1","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e2","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).e1","com.graphhopper.storage.index.LocationIndexTree_boolean_findNetworkEntries(double,double,gnu.trove.set.hash.TIntHashSet,int).e4","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).b","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e3","com.graphhopper.geohash.SpatialKeyAlgo_void_decode(long,com.graphhopper.util.shapes.GHPoint).e2","com.graphhopper.storage.index.LocationIndexTree_double_calculateRMin(double,double,int).t1","com.graphhopper.storage.index.LocationIndexTree_com.graphhopper.storage.index.QueryResult_findClosest(double,double,com.graphhopper.routing.util.EdgeFilter).t3"]},"type":"branch"},{"methodsDiff":{"delete":["com.graphhopper.storage.index.LocationIndexTree.calculateRMin"]},"type":"staticDiff"}]},{"transformation":"419286a4-827e-11e5-8f8c-715b99f3c016","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.DouglasPeucker.simplify","com.graphhopper.util.PointList.getSize"]},"branchesDiff":{"delete":["t0"]},"type":"staticDiff"}]},{"transformation":"4192fbdf-827e-11e5-8f8c-ad2637f98a32","diffs":[{"methodsDiff":{"delete":["java.lang.String.hashCode","com.graphhopper.routing.util.FastestWeighting.toString"]},"type":"staticDiff"},{"branches":{"com.graphhopper.GraphHopperAPITest.testLoad":["com.graphhopper.routing.util.FastestWeighting_java.lang.String_toString().b"]},"type":"branch"}]},{"transformation":"419322f3-827e-11e5-8f8c-23772ee068fe","diffs":[{"methodsDiff":{"delete":["com.graphhopper.storage.DataAccess.setHeader","java.lang.Object.hashCode"]},"type":"staticDiff"}]}]}
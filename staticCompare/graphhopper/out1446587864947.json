{"failureDictionary":{"com.graphhopper.routing.util.FootFlagEncoderTest.testPriority":0,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":28,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":36,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":100,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":60,"com.graphhopper.reader.OSMReaderTest.testFerry":81,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":25,"com.graphhopper.routing.QueryGraphTest.testOneWay":35,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":122,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":15,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":110,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":39,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":40,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":57,"com.graphhopper.geohash.SpatialKeyAlgoTest.testOddBits":13,"com.graphhopper.reader.OSMReaderTest.testWithBounds":92,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":123,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":30,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":124,"com.graphhopper.coll.CompressedArrayTest.testCompress":3,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":75,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":14,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":48,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":51,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":50,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":131,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":24,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":103,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":78,"com.graphhopper.GraphHopperTest.testPrepare":112,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":42,"com.graphhopper.util.InstructionListTest.testWayList2":96,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":10,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":54,"com.graphhopper.reader.OSMReaderTest.testFoot":82,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":33,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":37,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":6,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":17,"com.graphhopper.util.InstructionListTest.testWayList":95,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":7,"com.graphhopper.reader.OSMReaderTest.testOneWay":94,"com.graphhopper.util.InstructionTest.testCalcAzimuthAndGetDirection":98,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":126,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":22,"com.graphhopper.util.PointListTest.testAddPL":102,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":56,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":117,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":4,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":125,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":58,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":86,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":87,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":121,"com.graphhopper.storage.index.BresenhamLineTest.testRealBresenham":8,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":43,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEdgeCases":18,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":113,"com.graphhopper.routing.util.FootFlagEncoderTest.testAccess":120,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":49,"com.graphhopper.GraphHopperTest.testLoadOSM":116,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":5,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":105,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":69,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":59,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":109,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":72,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":108,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":52,"com.graphhopper.reader.OSMReaderTest.testSort":84,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":107,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":106,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":91,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":132,"com.graphhopper.reader.OSMReaderTest.testMain":83,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":53,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":11,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":12,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijection":16,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode":19,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":32,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":79,"com.graphhopper.routing.PathTest.testWayList":45,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":73,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":20,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":62,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":44,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":129,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":66,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":88,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":27,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":130,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":68,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":93,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":77,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":128,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":47,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":74,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":127,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":41,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointCount":99,"com.graphhopper.util.DouglasPeuckerTest.testPathSimplify":101,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":55,"com.graphhopper.GraphHopperTest.testFootAndCar":114,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":76,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":34,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":61,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":63,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":67,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":31,"com.graphhopper.coll.CompressedArrayTest.testCompress2":2,"com.graphhopper.GraphHopperTest.testPrepareOnly":104,"com.graphhopper.GraphHopperTest.testVia":111,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":26,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":118,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":90,"com.graphhopper.GraphHopperAPITest.testLoad":80,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":115,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":9,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":29,"com.graphhopper.GraphHopperTest.testFootOnly":1,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":97,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":21,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":70,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":89,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":71,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":23,"com.graphhopper.reader.OSMReaderTest.testBarriers":85,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":119,"com.graphhopper.storage.index.BresenhamLineTest.testBresenhamToLeft":65,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":38,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":46,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":64},"transformations":[{"failures":[0,1],"tindex":"e9c7fb8b-8275-11e5-8120-1bd5d0da6c4b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:154","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:340","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.FootFlagEncoder.collect(com.graphhopper.reader.OSMWay, java.util.TreeMap<java.lang.Double, java.lang.Integer>)"},"status":-1},{"failures":[],"tindex":"e9c8229c-8275-11e5-8120-7fff262151d1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:271","type":"CtAssignmentImpl","sourcecode":"int = int - (int)"},"variableMap":{"intVal":"node","degree":"node"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:106","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.routing.util.AllEdgesIterator.getAdjNode()"},"status":-2},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"tindex":"e9c8229d-8275-11e5-8120-5bac9a89bcec","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:162","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double double = (double + double) / 2;\n    if (double < double) {\n        double = double;\n    } else {\n        long |= 1;\n        double = double;\n    }\n} "},"status":-1},{"failures":[20,21,22,23],"tindex":"e9c8229e-8275-11e5-8120-834eb4d050d0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.EdgeAccess:194","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int == (com.graphhopper.util.EdgeIterator.int)))\n    throw new java.lang.IllegalStateException((((((\"Cannot write edge with illegal ID:\" + int) + \"; nodeThis:\") + int) + \", nodeOther:\") + int));\n"},"variableMap":{"com.graphhopper.util.EdgeIterator.NO_EDGE":"start","nodeThis":"start","edgeId":"start","nodeOther":"start"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TarjansStronglyConnectedComponentsAlgorithm:116","type":"CtIfImpl","sourcecode":"if ((int[][int]) == (int[][int])) {\n    gnu.trove.list.array.TIntArrayList gnu.trove.list.array.TIntArrayList = new gnu.trove.list.array.TIntArrayList();\n    int int;\n    while ((int = gnu.trove.stack.array.TIntArrayStack.pop()) != int) {\n        gnu.trove.list.array.TIntArrayList.add(int);\n        com.graphhopper.coll.GHBitSetImpl.clear(int);\n    }\n    gnu.trove.list.array.TIntArrayList.add(int);\n    gnu.trove.list.array.TIntArrayList.trimToSize();\n    com.graphhopper.coll.GHBitSetImpl.clear(int);\n    java.util.ArrayList<gnu.trove.list.array.TIntArrayList>.add(gnu.trove.list.array.TIntArrayList);\n} "},"status":-1},{"failures":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,4,57,58,59,60,61,62,63,64,65,66,9,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,1,119],"tindex":"e9c8229f-8275-11e5-8120-6d87ac21c6d8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:115","type":"CtReturnImpl","sourcecode":"return (int) / 8"},"variableMap":{"bitsForEdgeFlags":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:175","type":"CtReturnImpl","sourcecode":"return int"},"status":-1},{"failures":[120],"tindex":"e9c849b0-8275-11e5-8120-47fcc174a52c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:268","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"motorroad\", \"yes\"))\n    return 0;\n"},"variableMap":{"way":"way"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:246","type":"CtIfImpl","sourcecode":"if (com.graphhopper.routing.util.AbstractFlagEncoder.(isBlockFords()) && ((com.graphhopper.reader.OSMWay.hasTag(\"highway\", \"ford\")) || (com.graphhopper.reader.OSMWay.hasTag(\"ford\"))))\n    return 0;\n"},"status":-1},{"failures":[],"tindex":"e9c849b1-8275-11e5-8120-47c9a9db0256","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.pbf.PbfBlobDecoder:238","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    break;\n} "},"variableMap":{"keyIndex":"len"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:330","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    long = java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>.get(int).reverseFlags(long);\n}"},"status":-2},{"failures":[],"tindex":"e9c849b2-8275-11e5-8120-038e63756899","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:410","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.CHGraphImpl.CHEdgeIteratorImpl.checkShortcut(false, \"getName\")"},"variableMap":{"this":"iter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BreadthFirstSearch:47","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.XFirstSearch.(checkAdjacent(com.graphhopper.util.EdgeIterator)) && (!(com.graphhopper.coll.GHBitSet.contains(int)))) {\n    com.graphhopper.coll.GHBitSet.add(int);\n    com.graphhopper.util.SimpleIntDeque.push(int);\n} "},"status":-2},{"failures":[],"tindex":"e9c849b3-8275-11e5-8120-013b7705d410","series":0,"name":"add","transplant":{"position":"com.graphhopper.GraphHopper:948","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.GraphHopperStorage.isClosed())\n    throw new java.lang.IllegalStateException(\"You need to create a new GraphHopper instance as it is already closed\");\n"},"variableMap":{"ghStorage":"toSortedGraph"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.GHUtility:246","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.routing.util.AllEdgesIterator.next()) {\n    int int = com.graphhopper.routing.util.AllEdgesIterator.getBaseNode();\n    int int = gnu.trove.list.TIntList.get(int);\n    int int = com.graphhopper.routing.util.AllEdgesIterator.getAdjNode();\n    int int = gnu.trove.list.TIntList.get(int);\n    if ((int < 0) || (int < 0))\n        continue;\n    \n    com.graphhopper.routing.util.AllEdgesIterator.copyPropertiesTo(com.graphhopper.storage.Graph.edge(int, int));\n}"},"status":-2},{"failures":[20,21,121,122,123,124,125,126,127,128,129],"tindex":"e9c849b4-8275-11e5-8120-f36a2d0dd0f2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:591","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.util.EdgeIterator.getEdge()"},"variableMap":{"incomingEdges":"iter"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:774","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.util.EdgeIterator.getAdjNode()"},"status":-1},{"failures":[130,131],"tindex":"e9c870c5-8275-11e5-8120-b9d10821567b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:118","type":"CtIfImpl","sourcecode":"if (double < 0)\n    double += 2 * (java.lang.Math.double);\n"},"variableMap":{"orientation":"min","java.lang.Math.PI":"min"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:770","type":"CtIfImpl","sourcecode":"if (double < double) {\n    double = double;\n} "},"status":-1},{"failures":[],"tindex":"e9c870c6-8275-11e5-8120-2d9480051362","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DouglasPeucker:70","type":"CtLocalVariableImpl","sourcecode":"int int = 500"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:253","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long & (int)))"},"status":-2},{"failures":[],"tindex":"e9c870c7-8275-11e5-8120-071cf0f2556e","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:577","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.CHGraphImpl.this.getWeight(this)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TurnWeighting:87","type":"CtReturnImpl","sourcecode":"return double + double"},"status":-2},{"failures":[83,86,87,1],"tindex":"e9c870c8-8275-11e5-8120-a99169036784","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:169","type":"CtIfImpl","sourcecode":"if (int > int) {\n    int = int;\n} "},"variableMap":{"min":"nodes","tmpSize":"nodes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:800","type":"CtIfImpl","sourcecode":"if (int > 2) {\n    if (boolean)\n        com.graphhopper.util.DouglasPeucker.simplify(com.graphhopper.util.PointList);\n    \n    com.graphhopper.util.EdgeIteratorState.setWayGeometry(com.graphhopper.util.PointList);\n} "},"status":-1},{"failures":[132,85,90],"tindex":"e9c870c9-8275-11e5-8120-81e5c9e6c2a1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.GHUtility:523","type":"CtAssignmentImpl","sourcecode":"int = int << 1"},"variableMap":{"edgeId":"minNetworkSize"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:59","type":"CtAssignmentImpl","sourcecode":"this.int = int"},"status":-1},{"failures":[],"tindex":"e9c870ca-8275-11e5-8120-11d7d9f6057d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:438","type":"CtAssignmentImpl","sourcecode":"java.lang.String = com.graphhopper.util.Translation.tr(\"road\")"},"status":0},{"failures":[],"tindex":"e9c870cb-8275-11e5-8120-cd74f8aaf62e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.TurnWeighting:60","type":"CtAssignmentImpl","sourcecode":"this.double = double"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":17,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"},"diffs":[{"transformation":"e9c870ca-8275-11e5-8120-11d7d9f6057d","diffs":[{"methodsDiff":{"delete":["com.graphhopper.util.Translation.tr"]},"type":"staticDiff"}]}]}
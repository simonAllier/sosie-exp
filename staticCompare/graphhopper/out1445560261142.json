{"failureDictionary":{"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":31,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":58,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":39,"com.graphhopper.reader.OSMReaderTest.testMain":13,"com.graphhopper.routing.PathTest.testFindInstruction":42,"com.graphhopper.routing.QueryGraphTest.testUseMeanElevation":32,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":48,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":73,"com.graphhopper.routing.QueryGraphTest.testOneWay":38,"com.graphhopper.routing.PathTest.testWayList":41,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":23,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":68,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":55,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":70,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":25,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":28,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":60,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":34,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":75,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":62,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":45,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":71,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":77,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":69,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":29,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":26,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":47,"com.graphhopper.GraphHopperTest.testPrepare":6,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":72,"com.graphhopper.GraphHopperTest.testFootAndCar":8,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":74,"com.graphhopper.util.InstructionListTest.testWayList2":19,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":27,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":46,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":36,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":37,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":52,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":40,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":54,"com.graphhopper.util.InstructionListTest.testWayList":18,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":24,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":56,"com.graphhopper.GraphHopperAPITest.testDisconnected179":44,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":35,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":49,"com.graphhopper.GraphHopperTest.testVia":5,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":11,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":30,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":21,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":50,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":15,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":66,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":16,"com.graphhopper.GraphHopperAPITest.testLoad":43,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":9,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":65,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":61,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":33,"com.graphhopper.GraphHopperTest.testFootOnly":12,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":20,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":7,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":64,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":78,"com.graphhopper.util.InstructionListTest.testFind":17,"com.graphhopper.GraphHopperTest.testLoadOSM":10,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":0,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":53,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":59,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":63,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":51,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":22,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":4,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":3,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":67,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":2,"com.graphhopper.reader.OSMReaderTest.testSort":14,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":1,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":57,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":76},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"tindex":"56300c50-791d-11e5-af3f-233a247f8d6f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:889","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int)"},"status":-1},{"failures":[],"tindex":"56303361-791d-11e5-af3f-57cc2fb719bd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:164","type":"CtLocalVariableImpl","sourcecode":"double double = (double + double) / 2"},"variableMap":{"maxLatTmp":"minLat","minLatTmp":"latDelta"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.LinearKeyAlgo:103","type":"CtLocalVariableImpl","sourcecode":"double double = ((long / (int)) * (double)) + (com.graphhopper.util.shapes.BBox.double)"},"status":-2},{"failures":[],"tindex":"56303362-791d-11e5-af3f-e1ed8baa8fb6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.SRTMProvider:112","type":"CtIfImpl","sourcecode":"if ((java.lang.String.substring(0, 1).charAt(0)) == 'S')\n    int = -int;\n"},"variableMap":{"line":"dir","lat":"com.graphhopper.util.Instruction.TURN_SLIGHT_LEFT"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:269","type":"CtSwitchImpl","sourcecode":"switch (int) {\n    case com.graphhopper.util.Instruction.int :\n        java.lang.String = com.graphhopper.util.Translation.tr(\"turn_sharp_left\");\n        break;\n    case com.graphhopper.util.Instruction.int :\n        java.lang.String = com.graphhopper.util.Translation.tr(\"turn_left\");\n        break;\n    case com.graphhopper.util.Instruction.int :\n        java.lang.String = com.graphhopper.util.Translation.tr(\"turn_slight_left\");\n        break;\n    case com.graphhopper.util.Instruction.int :\n        java.lang.String = com.graphhopper.util.Translation.tr(\"turn_slight_right\");\n        break;\n    case com.graphhopper.util.Instruction.int :\n        java.lang.String = com.graphhopper.util.Translation.tr(\"turn_right\");\n        break;\n    case com.graphhopper.util.Instruction.int :\n        java.lang.String = com.graphhopper.util.Translation.tr(\"turn_sharp_right\");\n        break;\n}"},"status":-2},{"failures":[],"tindex":"56305a73-791d-11e5-af3f-73dab2291b8f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.PrepareRoutingSubnetworks:243","type":"CtForEachImpl","sourcecode":"for (TIntArrayList TIntArrayList : java.util.List<com.graphhopper.util.TIntArrayList>) {\n    int += com.graphhopper.routing.util.PrepareRoutingSubnetworks.removeEdges(com.graphhopper.util.EdgeExplorer, com.graphhopper.routing.util.FlagEncoder, com.graphhopper.util.TIntArrayList, int);\n}"},"status":-2},{"failures":[],"tindex":"56305a74-791d-11e5-af3f-659ff4353b86","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:186","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(2000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:375","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.reader.OSMWay.hasTag(\"bicycle\", \"official\")) || (com.graphhopper.reader.OSMWay.hasTag(\"bicycle\", \"designated\")))\n    java.util.TreeMap<java.lang.Double, java.lang.Integer>.put(44.0, com.graphhopper.routing.util.PriorityCode.com.graphhopper.routing.util.PriorityCode.getValue());\n"},"status":-2},{"failures":[],"tindex":"56305a75-791d-11e5-af3f-0f52f3a4b9e4","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:245","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : java.util.List<java.lang.String>) {\n    if ((!boolean) && (com.graphhopper.reader.OSMNode.hasTag(java.lang.String, java.util.Set<java.lang.String>)))\n        return 0;\n    \n    if (com.graphhopper.reader.OSMNode.hasTag(java.lang.String, java.util.Set<java.lang.String>))\n        return long;\n    \n}"},"variableMap":{"node":"node","directionBitMask":"directionBitMask","intendedValues":"intendedValues","restrictedValues":"intendedValues","restrictions":"restrictions","locked":"blockFords"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:259","type":"CtIfImpl","sourcecode":"if ((((boolean) && ((com.graphhopper.reader.OSMNode.hasTag(\"highway\", \"ford\")) || (com.graphhopper.reader.OSMNode.hasTag(\"ford\")))) && (!(com.graphhopper.reader.OSMNode.hasTag(java.util.List<java.lang.String>, java.util.Set<java.lang.String>)))) && (!(com.graphhopper.reader.OSMNode.hasTag(\"ford\", \"no\")))) {\n    return long;\n} "},"status":-2},{"failures":[],"tindex":"56308186-791d-11e5-af3f-012f6d9a6f78","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionList:200","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"\\n<rte>\")"},"variableMap":{"track":"sb"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilBig:124","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('1')"},"status":-2},{"failures":[],"tindex":"56308187-791d-11e5-af3f-e362e28c1d15","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.Location2IDFullWithEdgesIndex:112","type":"CtIfImpl","sourcecode":"if (double < 0)\n    continue;\n"},"variableMap":{"fromDist":"existingDirectWeight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:628","type":"CtIfImpl","sourcecode":"if ((int == int) && ((com.graphhopper.routing.DijkstraOneToMany.getWeight(int)) <= double))\n    continue;\n"},"status":-2},{"failures":[],"tindex":"56308188-791d-11e5-af3f-83a729cc5420","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:1019","type":"CtAssignmentImpl","sourcecode":"int = (-int) - 1"},"variableMap":{"foundIndex":"updatedB"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:747","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-2},{"failures":[],"tindex":"5630a899-791d-11e5-af3f-610a98293cd0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStar:122","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.routing.AStar.AStarEdge == null) || ((com.graphhopper.routing.AStar.AStarEdge.double) > float)) {\n    double = com.graphhopper.routing.util.WeightApproximator.approximate(int);\n    double = float + double;\n    if (com.graphhopper.routing.AStar.AStarEdge == null) {\n        com.graphhopper.routing.AStar.AStarEdge = new com.graphhopper.routing.AStar.AStarEdge(com.graphhopper.util.EdgeIterator.getEdge() , int , double , float);\n        com.graphhopper.routing.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.put(int, com.graphhopper.routing.AStar.AStarEdge);\n    } else {\n        assert (com.graphhopper.routing.AStar.AStarEdge.double) > double : \"Inconsistent distance estimate\";\n        java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.remove(com.graphhopper.routing.AStar.AStarEdge);\n        com.graphhopper.routing.AStar.AStarEdge.int = com.graphhopper.util.EdgeIterator.getEdge();\n        com.graphhopper.routing.AStar.AStarEdge.double = double;\n        com.graphhopper.routing.AStar.AStarEdge.double = float;\n    }\n    com.graphhopper.routing.AStar.AStarEdge.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge;\n    java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.add(com.graphhopper.routing.AStar.AStarEdge);\n    com.graphhopper.routing.AbstractRoutingAlgorithm.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge, int);\n} "},"status":-2},{"failures":[],"tindex":"5630a89a-791d-11e5-af3f-dff6d78645b5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:1013","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.OSMReader.getNodeFlagsMap()"},"status":-2},{"failures":[],"tindex":"5630a89b-791d-11e5-af3f-15f59f5699ee","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:220","type":"CtAssignmentImpl","sourcecode":"double = ((int)((double * (double)))) / (double)"},"status":-2},{"failures":[],"tindex":"5630a89c-791d-11e5-af3f-c786a7f30309","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:191","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(5)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMInputFile:92","type":"CtInvocationImpl","sourcecode":"java.io.InputStream.mark(10)"},"status":-2},{"failures":[],"tindex":"5630a89d-791d-11e5-af3f-cbd862efd391","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHTreeMapComposed:32","type":"CtUnaryOperatorImpl","sourcecode":"-3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:123","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.util.EncodedDoubleValue.getBits()"},"status":-2},{"failures":[],"tindex":"5630a89e-791d-11e5-af3f-2f783017ed84","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:242","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"motorroad\", \"yes\"))\n    return 0;\n"},"status":-2},{"failures":[],"tindex":"5630a89f-791d-11e5-af3f-03db4ff90aa6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.CompressedArray:100","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long / (int)))"},"variableMap":{"index":"tmpIndex","entriesPerSegment":"segmentSizeIntsPower"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:270","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long >> (int)))"},"status":-2},{"failures":[],"tindex":"5630cfb0-791d-11e5-af3f-9fdf62d47fbf","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Constants:76","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = \"0.0\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.search.NameIndex:104","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = java.lang.String.substring(0, (256 / 4))"},"status":-2},{"failures":[],"tindex":"5630cfb1-791d-11e5-af3f-87f7a88bb83d","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:447","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GHRequest:124","type":"CtInvocationImpl","sourcecode":"com.graphhopper.GHRequest.validateAzimuthValue(java.lang.Double)"},"status":-2},{"failures":[],"tindex":"5630cfb2-791d-11e5-af3f-73a35f059b36","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:601","type":"CtIfImpl","sourcecode":"if (boolean && (!(com.graphhopper.reader.OSMWay.hasTag(\"bicycle\", \"designated\"))))\n    com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\nelse\n    com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\n"},"status":-2},{"failures":[],"tindex":"5630cfb3-791d-11e5-af3f-3dd0d9c6f1d9","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:169","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = (((java.lang.String) + \"/\") + java.lang.String) + \".zip\""},"variableMap":{"baseUrl":"line","name":"line"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Helper:123","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = java.lang.String.substring(0, int)"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
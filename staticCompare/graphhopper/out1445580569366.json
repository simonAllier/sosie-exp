{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"9ed458f7-794c-11e5-9ca4-47084d45e44b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:58","type":"CtIfImpl","sourcecode":"if (java.lang.Double.isNaN(double))\n    throw new java.lang.IllegalStateException(\"Value cannot be NaN\");\n"},"variableMap":{"value":"queryLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:764","type":"CtWhileImpl","sourcecode":"while (com.graphhopper.storage.index.TIntIterator.hasNext()) {\n    int int = com.graphhopper.storage.index.TIntIterator.next();\n    double double = com.graphhopper.storage.NodeAccess.getLat(int);\n    double double = com.graphhopper.storage.NodeAccess.getLon(int);\n    double double = com.graphhopper.util.DistanceCalc.calcDist(double, double, double, double);\n    if (double < double) {\n        double = double;\n    } \n}"},"status":-2},{"failures":[],"tindex":"9ed48008-794c-11e5-9ca4-d5a6ee65beb1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:65","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:92","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = com.graphhopper.util.CHEdgeIteratorState == null"},"status":-2},{"failures":[],"tindex":"9ed48009-794c-11e5-9ca4-b96df879c105","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.VLongStorage:86","type":"CtAssertImpl","sourcecode":"assert long >= 0L"},"variableMap":{"i":"i"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.VLongStorage:92","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.VLongStorage.writeByte(((byte)(long)))"},"status":-2},{"failures":[],"tindex":"9ed4800a-794c-11e5-9ca4-bf88531085b1","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Downloader:90","type":"CtReturnImpl","sourcecode":"return java.io.InputStream"},"variableMap":{"is":"java.io.InputStream.class"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMInputFile:104","type":"CtIfImpl","sourcecode":"if (((byte[][0]) == 31) && ((byte[][1]) == (-117))) {\n    java.io.InputStream.reset();\n    return new java.util.zip.GZIPInputStream(java.io.InputStream , 50000);\n} else if (((((((byte[][0]) == 0) && ((byte[][1]) == 0)) && ((byte[][2]) == 0)) && ((byte[][4]) == 10)) && ((byte[][5]) == 9)) && (((byte[][3]) == 13) || ((byte[][3]) == 14))) {\n    java.io.InputStream.reset();\n    boolean = true;\n    return java.io.InputStream;\n} else if (((byte[][0]) == 'P') && ((byte[][1]) == 'K')) {\n    java.io.InputStream.reset();\n    java.util.zip.ZipInputStream java.util.zip.ZipInputStream = new java.util.zip.ZipInputStream(java.io.InputStream);\n    java.util.zip.ZipInputStream.getNextEntry();\n    return java.util.zip.ZipInputStream;\n} else if ((java.lang.String.endsWith(\".osm\")) || (java.lang.String.endsWith(\".xml\"))) {\n    java.io.InputStream.reset();\n    return java.io.InputStream;\n} else if ((java.lang.String.endsWith(\".bz2\")) || (java.lang.String.endsWith(\".bzip2\"))) {\n    java.lang.String java.lang.String = \"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream\";\n    try {\n        java.lang.Class java.lang.Class = java.lang.Class.forName(java.lang.String);\n        java.io.InputStream.reset();\n        java.lang.reflect.Constructor<java.io.InputStream> java.lang.reflect.Constructor<java.io.InputStream> = java.lang.Class.getConstructor(java.io.InputStream.java.io.InputStream, boolean.boolean);\n        return java.lang.reflect.Constructor<java.io.InputStream>.newInstance(java.io.InputStream, true);\n    } catch (java.lang.Exception e) {\n        throw new java.lang.IllegalArgumentException((\"Cannot instantiate \" + java.lang.String) , java.lang.Exception);\n    }\n} else {\n    throw new java.lang.IllegalArgumentException((\"Input file is not of valid type \" + (java.io.File.getPath())));\n}"},"status":-2},{"failures":[],"tindex":"9ed5435b-794c-11e5-9ca4-4b07a6a52698","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.EdgeWrapper:119","type":"CtIfImpl","sourcecode":"if (int < (int[].int))\n    return ;\n"},"variableMap":{"nodes":"entries","size":"length","length":"depth"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:591","type":"CtIfImpl","sourcecode":"if (int == (int[].int)) {\n    int int = com.graphhopper.storage.DataAccess.getInt(long);\n    if (int < 0) {\n        com.graphhopper.storage.index.TIntHashSet.add(-(int + 1));\n    } else {\n        long long = ((long)(int)) * 4;\n        for (long long = long + 4 ; long < long ; long += 4) {\n            com.graphhopper.storage.index.TIntHashSet.add(com.graphhopper.storage.DataAccess.getInt(long));\n        }\n    }\n    return ;\n} "},"status":-2},{"failures":[],"tindex":"9ed5435c-794c-11e5-9ca4-65e388f9811a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(5);\n} catch (java.lang.InterruptedException iex) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:181","type":"CtIfImpl","sourcecode":"if (boolean) {\n    TLongList TLongList = com.graphhopper.reader.OSMWay.getNodes();\n    int int = com.graphhopper.reader.TLongList.size();\n    for (int int = 0 ; int < int ; int++) {\n        com.graphhopper.reader.OSMReader.prepareHighwayNode(com.graphhopper.reader.TLongList.get(int));\n    }\n    if (((++long) % 5000000) == 0) {\n        com.graphhopper.reader.OSMReader.com.graphhopper.routing.util.Logger.info(((((((com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(long)) + \" (preprocess), osmIdMap:\") + com.graphhopper.util.Helper.(com.graphhopper.util.Helper.nf(com.graphhopper.reader.OSMReader.getNodeMap().getSize()))) + \" (\") + (com.graphhopper.reader.OSMReader.getNodeMap().getMemoryUsage())) + \"MB) \") + (com.graphhopper.util.Helper.getMemInfo())));\n    } \n} "},"status":-2},{"failures":[],"tindex":"9ed5435d-794c-11e5-9ca4-f11b2161af68","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.EdgeWrapper:54","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:500","type":"CtInvocationImpl","sourcecode":"java.lang.Integer.parseInt(java.lang.String)"},"status":-2},{"failures":[],"tindex":"9ed5435e-794c-11e5-9ca4-458f8a699336","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:188","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(5);\n} catch (java.lang.InterruptedException iex) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:330","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    long = java.util.List<com.graphhopper.routing.util.AbstractFlagEncoder>.get(int).reverseFlags(long);\n}"},"status":-2},{"failures":[],"tindex":"9ed5435f-794c-11e5-9ca4-479ff69dfbee","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.BaseGraph:926","type":"CtIfImpl","sourcecode":"if (int < 0)\n    throw new java.lang.IllegalStateException(\"Too many names are stored, currently limited to int pointer\");\n"},"variableMap":{"nameIndexRef":"origPoints"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PathMerger:55","type":"CtIfImpl","sourcecode":"if (boolean) {\n    com.graphhopper.util.InstructionList com.graphhopper.util.InstructionList = com.graphhopper.routing.Path.calcInstructions(com.graphhopper.util.Translation);\n    if (!(com.graphhopper.util.InstructionList.isEmpty())) {\n        if (com.graphhopper.util.PointList.isEmpty()) {\n            com.graphhopper.util.PointList com.graphhopper.util.PointList = com.graphhopper.util.InstructionList.get(0).getPoints();\n            com.graphhopper.util.PointList = new com.graphhopper.util.PointList(((com.graphhopper.util.InstructionList.size()) * (java.lang.Math.min(10, com.graphhopper.util.PointList.size()))) , com.graphhopper.util.PointList.is3D());\n        } \n        for (com.graphhopper.util.Instruction com.graphhopper.util.Instruction : com.graphhopper.util.InstructionList) {\n            if (boolean) {\n                int += com.graphhopper.util.Instruction.getPoints().size();\n                com.graphhopper.util.DouglasPeucker.simplify(com.graphhopper.util.Instruction.getPoints());\n            } \n            com.graphhopper.util.InstructionList.add(com.graphhopper.util.Instruction);\n            com.graphhopper.util.PointList.add(com.graphhopper.util.Instruction.getPoints());\n        }\n        if ((int + 1) < (java.util.List<com.graphhopper.routing.Path>.size())) {\n            com.graphhopper.util.ViaInstruction com.graphhopper.util.ViaInstruction = new com.graphhopper.util.ViaInstruction(com.graphhopper.util.InstructionList.get(((com.graphhopper.util.InstructionList.size()) - 1)));\n            com.graphhopper.util.ViaInstruction.setViaCount((int + 1));\n            com.graphhopper.util.InstructionList.replaceLast(com.graphhopper.util.ViaInstruction);\n        } \n    } \n} else if (boolean) {\n    com.graphhopper.util.PointList com.graphhopper.util.PointList = com.graphhopper.routing.Path.calcPoints();\n    if (com.graphhopper.util.PointList.isEmpty())\n        com.graphhopper.util.PointList = new com.graphhopper.util.PointList(com.graphhopper.util.PointList.size() , com.graphhopper.util.PointList.is3D());\n    \n    if (boolean) {\n        int = com.graphhopper.util.PointList.getSize();\n        com.graphhopper.util.DouglasPeucker.simplify(com.graphhopper.util.PointList);\n    } \n    com.graphhopper.util.PointList.add(com.graphhopper.util.PointList);\n} "},"status":-2},{"failures":[],"tindex":"9ed54360-794c-11e5-9ca4-77a390a1e7df","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:158","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt(((((long)(int)) * (int)) + (int)), int)"},"variableMap":{"N_LEVEL":"N_ADDITIONAL","level":"nodeEntryBytes","nodeIndex":"nodeEntryBytes","nodeCHEntryBytes":"nodeEntryBytes","nodesCH":"nodes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:285","type":"CtIfImpl","sourcecode":"if (com.graphhopper.storage.GraphExtension.isRequireNodeField()) {\n    for (long long = long + (int) ; long < long ; long += int) {\n        com.graphhopper.storage.DataAccess.setInt(long, com.graphhopper.storage.GraphExtension.getDefaultNodeFieldValue());\n    }\n} "},"status":-2},{"failures":[],"tindex":"9ed56a71-794c-11e5-9ca4-b53c4c125f88","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.TurnCostExtension:183","type":"CtIfImpl","sourcecode":"if (int == (int))\n    break;\n"},"variableMap":{"turnCostIndex":"daPointer","NO_TURN_ENTRY":"daPointer"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.HeightTile:115","type":"CtIfImpl","sourcecode":"if (int > 0)\n    int += com.graphhopper.reader.dem.HeightTile.includePoint((int - (2 * (int))), java.util.concurrent.atomic.AtomicInteger);\n"},"status":-2},{"failures":[],"tindex":"9ed56a72-794c-11e5-9ca4-4162ccf80e8b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.GHSortedCollection:173","type":"CtIfImpl","sourcecode":"if (int < int) {\n    int = int;\n} "},"variableMap":{"max":"startNode","tmpSize":"startNode"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BreadthFirstSearch:35","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.SimpleIntDeque.push(int)"},"status":-2},{"failures":[],"tindex":"9ed56a73-794c-11e5-9ca4-5fdc545c7da6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.HeightTile:94","type":"CtIfImpl","sourcecode":"if (int >= (int))\n    int = (int) - 1;\n"},"variableMap":{"width":"approxBytesPerEntry","lonSimilar":"approxBytesPerEntry"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.CompressedArray:80","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.storage.VLongStorage) == null)\n    com.graphhopper.storage.VLongStorage = new com.graphhopper.storage.VLongStorage(((int) * (int)));\n"},"status":-2},{"failures":[],"tindex":"9ed56a74-794c-11e5-9ca4-6bef681b0a4c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.GraphHopper:705","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.Helper.isEmpty(java.lang.String))\n    throw new java.lang.IllegalStateException(\"graphHopperLocation is not specified. call init before\");\n"},"variableMap":{"graphHopperFolder":"highway"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:607","type":"CtIfImpl","sourcecode":"if (java.util.Set<java.lang.String>.contains(java.lang.String))\n    com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\n"},"status":-2},{"failures":[],"tindex":"9ed56a75-794c-11e5-9ca4-73e7153d1b6b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.AbstractDataAccess:134","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setHeader(int, com.graphhopper.storage.AbstractDataAccess.getHeader(int))"},"status":-2},{"failures":[],"tindex":"9ed56a76-794c-11e5-9ca4-3b92267b4150","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:115","type":"CtReturnImpl","sourcecode":"return (int) / 8"},"variableMap":{"bitsForEdgeFlags":"length"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:317","type":"CtReturnImpl","sourcecode":"return byte[][].int"},"status":-2},{"failures":[],"tindex":"9ed56a77-794c-11e5-9ca4-b7309473fbe5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:44","type":"CtAssignmentImpl","sourcecode":"double = (double + double) / (double - double)"},"variableMap":{"r":"neighborTime","x":"neighborTime","absY":"neighborTime"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:292","type":"CtOperatorAssignmentImpl","sourcecode":"double += com.graphhopper.util.StopWatch.getSeconds()"},"status":-2},{"failures":[],"tindex":"9ed56a78-794c-11e5-9ca4-7763a66bc485","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:394","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.Helper.isEmpty(java.lang.String))\n    java.lang.String = java.lang.String;\nelse\n    java.lang.String += \", \" + java.lang.String;\n"},"variableMap":{"name":"dim","refName":"dim"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.GraphHopperStorage:273","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.BaseGraph.loadExisting(java.lang.String)"},"status":-2},{"failures":[],"tindex":"9ed56a79-794c-11e5-9ca4-8382b7d46e4c","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:221","type":"CtLocalVariableImpl","sourcecode":"double double = (double - double) - double"},"variableMap":{"incDist2DSum":"queryLat","fullDist2D":"queryLat","decDist2DSum":"queryLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:733","type":"CtLocalVariableImpl","sourcecode":"double double = double - (int * (double))"},"status":-2},{"failures":[],"tindex":"9ed56a7a-794c-11e5-9ca4-bd9cf82ec142","series":0,"name":"replace","transplant":{"position":"com.graphhopper.search.NameIndex:121","type":"CtIfImpl","sourcecode":"if (long < 0)\n    throw new java.lang.IllegalStateException((\"Pointer to access NameIndex cannot be negative:\" + long));\n"},"variableMap":{"pointer":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtil:159","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.BitUtil.fromLong(byte[], long, 0)"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
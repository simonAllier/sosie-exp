{"failureDictionary":{"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":29,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":32,"com.graphhopper.routing.PathTest.testFindInstruction":72,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":9,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":58,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":37,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":54,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":59,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":16,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSortHighLevelFirst":49,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":30,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":38,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":33,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":6,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":48,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":17,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":25,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":51,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":4,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":8,"com.graphhopper.storage.GraphHopperStorageCHTest.testShortcutCreationAndAccessForManyVehicles":53,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":56,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":11,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":74,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":31,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":12,"com.graphhopper.GraphHopperTest.testPrepare":42,"com.graphhopper.GraphHopperTest.testFootAndCar":67,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":34,"com.graphhopper.util.InstructionListTest.testWayList2":78,"com.graphhopper.util.AngleCalcTest.testAlignOrientation":76,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":73,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":0,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":18,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":22,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":21,"com.graphhopper.util.InstructionListTest.testWayList":77,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":26,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":7,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":52,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":50,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":28,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":45,"com.graphhopper.GraphHopperTest.testPrepareOnly":40,"com.graphhopper.GraphHopperTest.testVia":41,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":10,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":68,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":19,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":24,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":27,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":71,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":5,"com.graphhopper.GraphHopperAPITest.testLoad":69,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":43,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":35,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeightIfAdvancedEncoder":55,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":36,"com.graphhopper.GraphHopperTest.testFootOnly":46,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":79,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":2,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":14,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":66,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":3,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetWeight":57,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":65,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":70,"com.graphhopper.util.AngleCalcTest.testCombined":75,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":15,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":20,"com.graphhopper.GraphHopperTest.testLoadOSM":44,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":13,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":60,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":47,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":1,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":23,"com.graphhopper.util.GHUtilityTest.testCopy":39,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":64,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":63,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":62,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":61},"transformations":[{"failures":[],"tindex":"ddb89229-790b-11e5-b792-e7f001882715","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.Unzipper:69","type":"CtLocalVariableImpl","sourcecode":"double double = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:169","type":"CtLocalVariableImpl","sourcecode":"double double = 0"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"tindex":"ddb8922a-790b-11e5-b792-f7f7aee6d228","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:447","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:272","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.InternalGraphEventListener.initStorage()"},"status":-1},{"failures":[0,2,8,9,10,11,15,58,16,17,18,19,20,21,22,23,24,25,59,26,27,29,30,31,32,33,34,35,36,37,38,60,61,62,63,64,65,41,42,66,67,43,44,68,46,69],"tindex":"ddb8b93b-790b-11e5-b792-33aef48681ae","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:182","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new java.lang.IllegalStateException(\"already closed\");\n"},"variableMap":{"closed":"finishedFrom"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AbstractBidirAlgo:69","type":"CtWhileImpl","sourcecode":"while ((!com.graphhopper.routing.AbstractRoutingAlgorithm.(finished())) && (!com.graphhopper.routing.AbstractRoutingAlgorithm.(isWeightLimitExceeded()))) {\n    if ((!(boolean)) && (!(boolean))) {\n        if (com.graphhopper.routing.AbstractBidirAlgo.(getCurrentFromWeight()) < com.graphhopper.routing.AbstractBidirAlgo.(getCurrentToWeight()))\n            boolean = !com.graphhopper.routing.AbstractBidirAlgo.(fillEdgesFrom());\n        else\n            boolean = !com.graphhopper.routing.AbstractBidirAlgo.(fillEdgesTo());\n        \n    } else if (!(boolean)) {\n        boolean = !com.graphhopper.routing.AbstractBidirAlgo.(fillEdgesFrom());\n    } else {\n        boolean = !com.graphhopper.routing.AbstractBidirAlgo.(fillEdgesTo());\n    }\n}"},"status":-1},{"failures":[70,71,72,73,74,75,76,77,78,79,62,64],"tindex":"ddb8b93c-790b-11e5-b792-a9f2159bd9b8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:103","type":"CtAssignmentImpl","sourcecode":"double = double - (2 * (java.lang.Math.double))"},"variableMap":{"resultOrientation":"resultOrientation","orientation":"orientation","java.lang.Math.PI":"orientation"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:98","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-1},{"failures":[],"tindex":"ddb8b93d-790b-11e5-b792-0966f0265672","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:190","type":"CtAssignmentImpl","sourcecode":"double = -double"},"variableMap":{"eleDelta":"lat","decEleSum":"lat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:128","type":"CtAssignmentImpl","sourcecode":"double[][int] = double"},"status":0},{"failures":[],"tindex":"ddb8b93e-790b-11e5-b792-a351ca325be1","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMElement:175","type":"CtIfImpl","sourcecode":"if (java.util.Set<java.lang.String>.contains(com.graphhopper.reader.OSMElement.getTag(java.lang.String, \"\")))\n    return true;\n"},"variableMap":{"values":"values","this":"this","key":"key"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:164","type":"CtReturnImpl","sourcecode":"return java.util.Set<java.lang.String>.contains(com.graphhopper.reader.OSMElement.getTag(java.lang.String, \"\"))"},"status":-2},{"failures":[],"tindex":"ddb8e04f-790b-11e5-b792-d1a806571483","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GHDirectory:154","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.Helper.cleanHack()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:235","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.LocationIndexTree.InMemConstructionIndex.prepare()"},"status":-2},{"failures":[],"tindex":"ddb8e050-790b-11e5-b792-ef8e070eddb1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.shapes.BBox:102","type":"CtIfImpl","sourcecode":"if (double > (double)) {\n    double = double;\n} "},"status":-2},{"failures":[],"tindex":"ddb8e051-790b-11e5-b792-61e00dac8a5b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:711","type":"CtIfImpl","sourcecode":"if (java.lang.String.endsWith(\"-gh\")) {\n} else if ((java.lang.String.endsWith(\".osm\")) || (java.lang.String.endsWith(\".xml\"))) {\n    throw new java.lang.IllegalArgumentException(\"To import an osm file you need to use importOrLoad\");\n} else if (!(java.lang.String.contains(\".\"))) {\n    if (new java.io.File((java.lang.String + \"-gh\")).exists())\n        java.lang.String += \"-gh\";\n    \n} else {\n    java.io.File java.io.File = new java.io.File((java.lang.String + \".ghz\"));\n    if ((java.io.File.exists()) && (!(java.io.File.isDirectory()))) {\n        try {\n            new com.graphhopper.util.Unzipper().unzip(java.io.File.getAbsolutePath(), java.lang.String, boolean);\n        } catch (java.io.IOException ex) {\n            throw new java.lang.RuntimeException((((\"Couldn\\'t extract file \" + (java.io.File.getAbsolutePath())) + \" to \") + java.lang.String) , java.io.IOException);\n        }\n    } \n}"},"status":-2},{"failures":[],"tindex":"ddb8e052-790b-11e5-b792-7bf034a8c6b6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.MMapDataAccess:263","type":"CtForEachImpl","sourcecode":"for (java.nio.ByteBuffer java.nio.ByteBuffer : java.util.List<java.nio.ByteBuffer>) {\n    ((java.nio.MappedByteBuffer)(java.nio.ByteBuffer)).force();\n}"},"variableMap":{"segments":"segments"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:293","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.MMapDataAccess.clean(0, java.util.List<java.nio.ByteBuffer>.size())"},"status":-2},{"failures":[],"tindex":"ddb8e053-790b-11e5-b792-e506b271ee6c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.DijkstraOneToMany:135","type":"CtAssignmentImpl","sourcecode":"double[][int] = 0"},"variableMap":{"currNode":"i","weights":"latitudes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:411","type":"CtOperatorAssignmentImpl","sourcecode":"double += com.graphhopper.util.PointList.com.graphhopper.util.DistanceCalc3D.calcDist(double, double, double, double[][int], double[][int], double[][int])"},"status":-2},{"failures":[],"tindex":"ddb8e054-790b-11e5-b792-f5016cdce981","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:144","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"variableMap":{"blockByDefault":"fullyLoaded"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:774","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":-2},{"failures":[],"tindex":"ddb90765-790b-11e5-b792-0beec1cc37fd","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:966","type":"CtLocalVariableImpl","sourcecode":"int int = 5"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:830","type":"CtLocalVariableImpl","sourcecode":"int int = com.graphhopper.util.PointList.getSize()"},"status":-2},{"failures":[],"tindex":"ddb90766-790b-11e5-b792-791cada4d324","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:307","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHSortedCollection:103","type":"CtReturnImpl","sourcecode":"return java.util.TreeMap<java.lang.Integer, com.graphhopper.coll.TIntHashSet>.firstEntry().getKey()"},"status":-2},{"failures":[],"tindex":"ddb90767-790b-11e5-b792-439f8b7b1bc3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:76","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.DataAccess.setInt((long + (int)), com.graphhopper.storage.EdgeAccess.distToInt(double))"},"status":-2},{"failures":[],"tindex":"ddb90768-790b-11e5-b792-1d7a3b52196a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:193","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.routing.util.FlagEncoder) == null)\n    throw new java.lang.IllegalStateException(\"No vehicle encoder set.\");\n"},"variableMap":{"prepareFlagEncoder":"encoder"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMTurnRelation:115","type":"CtIfImpl","sourcecode":"if ((((int != int) && ((this.com.graphhopper.reader.OSMTurnRelation.Type) == (com.graphhopper.reader.OSMTurnRelation.Type.com.graphhopper.reader.OSMTurnRelation.Type))) && (long != (this.long))) || ((((this.com.graphhopper.reader.OSMTurnRelation.Type) == (com.graphhopper.reader.OSMTurnRelation.Type.com.graphhopper.reader.OSMTurnRelation.Type)) && (long == (this.long))) && (long >= 0))) {\n    final com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry = new com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry();\n    com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int = int;\n    com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int = int;\n    com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.int = com.graphhopper.util.EdgeIterator.getEdge();\n    com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry.long = com.graphhopper.routing.util.TurnCostEncoder.getTurnFlags(true, 0);\n    java.util.Collection<com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry>.add(com.graphhopper.reader.OSMTurnRelation.TurnCostTableEntry);\n    if ((this.com.graphhopper.reader.OSMTurnRelation.Type) == (com.graphhopper.reader.OSMTurnRelation.Type.com.graphhopper.reader.OSMTurnRelation.Type))\n        break;\n    \n} "},"status":-2},{"failures":[],"tindex":"ddb90769-790b-11e5-b792-79981f620c82","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:76","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.DouglasPeucker.simplify(com.graphhopper.util.PointList, int, java.lang.Math.min((int - 1), (int + int)))"},"status":-2},{"failures":[],"tindex":"ddb9076a-790b-11e5-b792-cf0edbf94a5c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.search.NameIndex:125","type":"CtIfImpl","sourcecode":"if (long == 0)\n    return \"\";\n"},"variableMap":{"pointer":"value"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtil:198","type":"CtReturnImpl","sourcecode":"return com.graphhopper.util.BitUtil.toBitString(long, 64)"},"status":-2},{"failures":[],"tindex":"ddb92e7b-790b-11e5-b792-293e2d8174ca","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.BresenhamLine:55","type":"CtLocalVariableImpl","sourcecode":"double double = double / (java.lang.Math.abs((double - double)))"},"variableMap":{"gridCellWidth":"v_u_weight","x1":"v_u_weight","x2":"v_u_weight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:608","type":"CtLocalVariableImpl","sourcecode":"double double = double + (com.graphhopper.routing.ch.PreparationWeighting.calcWeight(com.graphhopper.util.EdgeIterator, false, com.graphhopper.util.EdgeIterator.getEdge()))"},"status":-2},{"failures":[],"tindex":"ddb92e7c-790b-11e5-b792-d993c3a7a7b2","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.pbf.PbfBlobDecoder:252","type":"CtIfImpl","sourcecode":"if (java.util.Map<java.lang.String, java.lang.String> == null) {\n    java.util.Map<java.lang.String, java.lang.String> = new java.util.HashMap<java.lang.String, java.lang.String>();\n} "},"variableMap":{"tags":"enMap"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.TranslationMap:142","type":"CtForEachImpl","sourcecode":"for (com.graphhopper.util.Translation com.graphhopper.util.Translation : java.util.Map<java.lang.String, com.graphhopper.util.Translation>.values()) {\n    java.util.Map<java.lang.String, java.lang.String> java.util.Map<java.lang.String, java.lang.String> = com.graphhopper.util.Translation.asMap();\n    for (java.util.Map.Entry<java.lang.String, java.lang.String> java.util.Map.Entry<java.lang.String, java.lang.String> : java.util.Map<java.lang.String, java.lang.String>.entrySet()) {\n        java.lang.String java.lang.String = java.util.Map<java.lang.String, java.lang.String>.get(java.util.Map.Entry<java.lang.String, java.lang.String>.getKey());\n        if (com.graphhopper.util.Helper.isEmpty(java.lang.String)) {\n            java.util.Map<java.lang.String, java.lang.String>.put(java.util.Map.Entry<java.lang.String, java.lang.String>.getKey(), java.util.Map.Entry<java.lang.String, java.lang.String>.getValue());\n            continue;\n        } \n        int int = com.graphhopper.util.TranslationMap.com.graphhopper.util.TranslationMap.countOccurence(java.util.Map.Entry<java.lang.String, java.lang.String>.getValue(), \"\\\\%\");\n        if (int != com.graphhopper.util.TranslationMap.(com.graphhopper.util.TranslationMap.countOccurence(java.lang.String, \"\\\\%\"))) {\n            java.lang.StringBuilder.append(com.graphhopper.util.Translation.getLocale()).append(\" - error in \").append(java.util.Map.Entry<java.lang.String, java.lang.String>.getKey()).append(\"->\").append(java.lang.String).append(\"\\n\");\n        } else {\n            java.lang.Object[] java.lang.Object[] = new java.lang.String[int];\n            java.util.Arrays.fill(java.lang.Object[], \"tmp\");\n            try {\n                java.lang.String.format(java.lang.String, java.lang.Object[]);\n            } catch (java.lang.Exception ex) {\n                java.lang.StringBuilder.append(com.graphhopper.util.Translation.getLocale()).append(\" - error \").append(java.lang.Exception.getMessage()).append(\"in \").append(java.util.Map.Entry<java.lang.String, java.lang.String>.getKey()).append(\"->\").append(java.lang.String).append(\"\\n\");\n            }\n        }\n    }\n}"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
{"failureDictionary":{"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":34,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":88,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointOrder":65,"com.graphhopper.util.DistanceCalcEarthTest.testEdgeDistance":68,"com.graphhopper.routing.util.EncodedDoubleValueTest.testMaxValueAndSwap":81,"com.graphhopper.reader.OSMReaderTest.testMain":50,"com.graphhopper.routing.PathTest.testFindInstruction":74,"com.graphhopper.util.DistanceCalcEarthTest.testPrecisionBug":67,"com.graphhopper.reader.OSMReaderTest.testFerry":86,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":42,"com.graphhopper.reader.OSMReaderTest.testEstimatedCenter":95,"com.graphhopper.geohash.SpatialKeyAlgoTest.testBijection":9,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode6BytesPrecision":7,"com.graphhopper.GraphHopperTest.testDoNotAllowWritingAndLoadingAtTheSameTime":93,"com.graphhopper.routing.util.FootFlagEncoderTest.testSlowHiking":21,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":70,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":45,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":40,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":31,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":47,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":71,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":24,"com.graphhopper.geohash.SpatialKeyAlgoTest.testOddBits":5,"com.graphhopper.reader.OSMReaderTest.testWithBounds":89,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":35,"com.graphhopper.util.DistanceCalcEarthTest.testPrecisionBug2":69,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":78,"com.graphhopper.routing.util.FootFlagEncoderTest.testMixSpeedAndSafe":19,"com.graphhopper.coll.CompressedArrayTest.testCompress":13,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":38,"com.graphhopper.reader.OSMReaderTest.testMaxSpeed":90,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode3BytesPrecision":6,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":27,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":46,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":92,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":72,"com.graphhopper.GraphHopperTest.testPrepare":58,"com.graphhopper.util.DouglasPeuckerTest.testSimplifyCheckPointCount":64,"com.graphhopper.util.DouglasPeuckerTest.testPathSimplify":66,"com.graphhopper.GraphHopperTest.testFootAndCar":16,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":73,"com.graphhopper.reader.OSMReaderTest.testFoot":14,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":28,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":30,"com.graphhopper.geohash.SpatialKeyAlgoTest.testDifferentInitialBounds":11,"com.graphhopper.geohash.SpatialKeyAlgoTest.testEncode4BytesPrecision":10,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":29,"com.graphhopper.reader.OSMReaderTest.testOneWay":91,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":48,"com.graphhopper.routing.util.CarFlagEncoderTest.testTurnFlagEncoding_withCosts":3,"com.graphhopper.routing.util.FootFlagEncoderTest.testRailPlatformIssue366":20,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":32,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":37,"com.graphhopper.geohash.SpatialKeyAlgoTest.testNoFurtherIterationIfBitsIs1":8,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":94,"com.graphhopper.routing.util.BikeFlagEncoderTest.testTurnFlagEncoding_withCosts":1,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":23,"com.graphhopper.coll.CompressedArrayTest.testCompress2":12,"com.graphhopper.GraphHopperTest.testPrepareOnly":15,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":49,"com.graphhopper.GraphHopperTest.testVia":57,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":62,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":25,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":85,"com.graphhopper.reader.OSMReaderTest.testTurnFlagCombination":0,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":76,"com.graphhopper.reader.dem.CGIARProviderTest.testDown":4,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":43,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":77,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":60,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":36,"com.graphhopper.GraphHopperTest.testFootOnly":17,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":80,"com.graphhopper.routing.util.CarFlagEncoderTest.testCombination":82,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":59,"com.graphhopper.routing.util.CarFlagEncoderTest.testMaxValue":83,"com.graphhopper.routing.util.FootFlagEncoderTest.testAccess":22,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":87,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":75,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":41,"com.graphhopper.util.InstructionListTest.testFind":63,"com.graphhopper.reader.OSMReaderTest.testBarriers":84,"com.graphhopper.routing.util.FootFlagEncoderTest.handleWayTagsRoundabout":18,"com.graphhopper.GraphHopperTest.testLoadOSM":61,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":52,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":79,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":39,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testTurnFlagEncoding_withCosts":2,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":26,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":56,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":44,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":55,"com.graphhopper.reader.OSMReaderTest.testSort":51,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":54,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":33,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":53},"transformations":[{"failures":[],"tindex":"af41898d-82b4-11e5-9941-57614aa25612","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.EncodingManager:115","type":"CtReturnImpl","sourcecode":"return (int) / 8"},"variableMap":{"bitsForEdgeFlags":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.PointList:170","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"af41d7ae-82b4-11e5-9941-dbdf2e21fdb1","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.DistanceCalc3D:38","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Math.abs((double - double))"},"variableMap":{"fromHeight":"deltaLat","toHeight":"deltaLat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:652","type":"CtLocalVariableImpl","sourcecode":"double double = (com.graphhopper.util.shapes.GHPoint.double) - ((0.5 + int) * (double))"},"status":-2},{"failures":[0,1,2,3],"tindex":"af41d7af-82b4-11e5-9941-510c5b2689b7","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:139","type":"CtAssignmentImpl","sourcecode":"double = ((int)((double * (double)))) / (double)"},"variableMap":{"precision":"costs","lat":"costs"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:684","type":"CtAssignmentImpl","sourcecode":"double = int"},"status":-1},{"failures":[4],"tindex":"af41d7b0-82b4-11e5-9941-67c617856307","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:531","type":"CtAssignmentImpl","sourcecode":"int = (-int) - 3"},"variableMap":{"id":"intVal"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.CGIARProvider:271","type":"CtAssignmentImpl","sourcecode":"int = int - (int)"},"status":-1},{"failures":[],"tindex":"af41d7b1-82b4-11e5-9941-4118c7e55c8c","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.GHLongIntBTree:296","type":"CtLocalVariableImpl","sourcecode":"int int = (int) - int"},"variableMap":{"index":"segmentSizeInBytes","entrySize":"segmentSizeInBytes"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMDataAccess:154","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long / (int)))"},"status":-2},{"failures":[5,6,7,8,9,10,11,12,13],"tindex":"af41fec2-82b4-11e5-9941-cd8e5768a67c","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.Bike2WeightFlagEncoder:190","type":"CtAssignmentImpl","sourcecode":"double = -double"},"variableMap":{"eleDelta":"lon","decEleSum":"midLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.geohash.SpatialKeyAlgo:231","type":"CtOperatorAssignmentImpl","sourcecode":"double += double"},"status":-1},{"failures":[],"tindex":"af41fec3-82b4-11e5-9941-05b2b17b7b5e","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.AbstractDataAccess:180","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    int int = ((int)((java.lang.Math.log(int)) / (java.lang.Math.log(2))));\n    int = java.lang.Math.max(((int)(java.lang.Math.pow(2, int))), com.graphhopper.storage.AbstractDataAccess.int);\n} "},"variableMap":{"com.graphhopper.storage.AbstractDataAccess.SEGMENT_SIZE_MIN":"index","bytes":"index","segmentSizeInBytes":"index"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.InstructionList:308","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.DistanceCalc.validEdgeDistance(double, double, double, double, double, double)) {\n    double = com.graphhopper.util.DistanceCalc.calcNormalizedEdgeDistance(double, double, double, double, double, double);\n    if (int > 0)\n        int++;\n    \n} else {\n    double = com.graphhopper.util.DistanceCalc.calcNormalizedDist(double, double, double, double);\n    if (int > 0)\n        int++;\n    \n}"},"status":0},{"failures":[],"tindex":"af41fec4-82b4-11e5-9941-d70afdbeafa0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.BitUtilBig:98","type":"CtLocalVariableImpl","sourcecode":"byte byte = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilLittle:116","type":"CtLocalVariableImpl","sourcecode":"byte byte = ((byte)(1 << 7))"},"status":-2},{"failures":[0,1,2,3],"tindex":"af4225d5-82b4-11e5-9941-e39a4f93a581","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:1015","type":"CtIfImpl","sourcecode":"if (int >= 0) {\n    return false;\n} "},"variableMap":{"foundIndex":"maxTurnCosts"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:634","type":"CtIfImpl","sourcecode":"if ((int) == 1)\n    return (long & (long)) != 0;\n"},"status":-1},{"failures":[14,15,16,17,18,19,20,21,22],"tindex":"af4225d6-82b4-11e5-9941-43a1ae2315d3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.FootFlagEncoder:226","type":"CtIfImpl","sourcecode":"if ((((!(\"hiking\".equals(java.lang.String))) && (!(\"mountain_hiking\".equals(java.lang.String)))) && (!(\"demanding_mountain_hiking\".equals(java.lang.String)))) && (!(\"alpine_hiking\".equals(java.lang.String))))\n    return 0;\n"},"variableMap":{"sacScale":"highwayValue"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.FootFlagEncoder:239","type":"CtIfImpl","sourcecode":"if (!(java.util.Set<java.lang.String>.contains(java.lang.String)))\n    return 0;\n"},"status":-1},{"failures":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,16,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"tindex":"af4225d7-82b4-11e5-9941-572bdb2c9e01","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.CHGraphImpl:607","type":"CtIfImpl","sourcecode":"if (double >= (com.graphhopper.storage.CHGraphImpl.double))\n    return java.lang.Double.double;\n"},"variableMap":{"java.lang.Double.POSITIVE_INFINITY":"r_lon_deg","weight":"r_lon_deg","com.graphhopper.storage.CHGraphImpl.MAX_WEIGHT":"delta_lat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:145","type":"CtIfImpl","sourcecode":"if (double == 0)\n    return com.graphhopper.util.DistanceCalcEarth.calcNormalizedDist(double, double, double, double);\n"},"status":-1},{"failures":[75],"tindex":"af424ce8-82b4-11e5-9941-7191b9372c6e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.Location2IDQuadtree:230","type":"CtForImpl","sourcecode":"for (int int = com.graphhopper.coll.GHBitSet.next(0) ; int >= 0 ; int = com.graphhopper.coll.GHBitSet.next((int + 1))) {\n    int[][int] = int;\n}"},"status":-1},{"failures":[76,77],"tindex":"af424ce9-82b4-11e5-9941-9721bd8106e0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:779","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.PointList.add(double, double, double)"},"status":-1},{"failures":[],"tindex":"af424cea-82b4-11e5-9941-51a496415424","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.pbf.PbfBlobDecoder:238","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    break;\n} "},"variableMap":{"keyIndex":"com.graphhopper.storage.AbstractDataAccess.HEADER_OFFSET"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.UnsafeDataAccess:184","type":"CtInvocationImpl","sourcecode":"java.io.RandomAccessFile.seek(com.graphhopper.storage.AbstractDataAccess.int)"},"status":-2},{"failures":[14,77,78,16,79,80,81,82,83],"tindex":"af424ceb-82b4-11e5-9941-ab5a142441c3","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMInputFile:250","type":"CtAssignmentImpl","sourcecode":"int = 2"},"variableMap":{"workerThreads":"index"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:189","type":"CtOperatorAssignmentImpl","sourcecode":"int *= 2"},"status":-1},{"failures":[84,85],"tindex":"af424cec-82b4-11e5-9941-3fb63b6c744a","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionAnnotation:81","type":"CtAssignmentImpl","sourcecode":"int = (83 * int) + (this.int)"},"variableMap":{"importance":"lastBarrier","hash":"lastBarrier"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:397","type":"CtAssignmentImpl","sourcecode":"int = 0"},"status":-1},{"failures":[86,14,50,51,84,76,77,78,87,85,88,89,90,91,92,15,93,57,58,59,16,60,61,94,62,17,79,82],"tindex":"af4273fd-82b4-11e5-9941-8f3166465493","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:64","type":"CtOperatorAssignmentImpl","sourcecode":"long <<= long"},"variableMap":{"shift":"includeWay","tmpValue":"includeWay"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodingManager:245","type":"CtOperatorAssignmentImpl","sourcecode":"long |= com.graphhopper.routing.util.AbstractFlagEncoder.acceptWay(com.graphhopper.reader.OSMWay)"},"status":-1},{"failures":[],"tindex":"af4273fe-82b4-11e5-9941-e302368b61c8","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:186","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(2000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:739","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.routing.util.EncodingManager) == null)\n    com.graphhopper.GraphHopper.setEncodingManager(com.graphhopper.routing.util.EncodingManager.create(java.lang.String));\n"},"status":-2},{"failures":[95],"tindex":"af4273ff-82b4-11e5-9941-d5e5f5e9bdda","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:58","type":"CtIfImpl","sourcecode":"if (java.lang.Double.isNaN(double))\n    throw new java.lang.IllegalStateException(\"Value cannot be NaN\");\n"},"variableMap":{"value":"firstLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:367","type":"CtInvocationImpl","sourcecode":"com.graphhopper.reader.OSMWay.setTag(\"estimated_center\", new com.graphhopper.util.shapes.GHPoint(((double + double) / 2) , ((double + double) / 2)))"},"status":-1},{"failures":[86,14,50,51,84,76,77,78,87,85,88,89,90,91,92,15,93,57,58,59,16,60,61,94,62,17,79],"tindex":"af429b10-82b4-11e5-9941-85dd309eb581","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.index.LocationIndexTree:178","type":"CtIfImpl","sourcecode":"if (int > 64)\n    throw new java.lang.IllegalStateException(\"sum of all shifts does not fit into a long variable\");\n"},"variableMap":{"shiftSum":"lastIndex"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:672","type":"CtTryImpl","sourcecode":"try {\n    for (int int = 0 ; int < (gnu.trove.list.TLongList.size()) ; int++) {\n        long long = gnu.trove.list.TLongList.get(int);\n        int int = com.graphhopper.reader.OSMReader.getNodeMap().get(long);\n        if (int == (com.graphhopper.reader.OSMReader.int))\n            continue;\n        \n        if (int == (com.graphhopper.reader.OSMReader.int))\n            continue;\n        \n        if (int == (com.graphhopper.reader.OSMReader.int)) {\n            if ((!(com.graphhopper.util.PointList.isEmpty())) && (int > (-(com.graphhopper.reader.OSMReader.int)))) {\n                int = int;\n                int = com.graphhopper.reader.OSMReader.handlePillarNode(int, long, null, true);\n                int = (-int) - 3;\n                if (((com.graphhopper.util.PointList.getSize()) > 1) && (int >= 0)) {\n                    java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long));\n                    com.graphhopper.util.PointList.clear();\n                    com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n                } \n                int = int;\n                int = -1;\n            } \n            continue;\n        } \n        if ((int <= (-(com.graphhopper.reader.OSMReader.int))) && (int >= (com.graphhopper.reader.OSMReader.int)))\n            throw new java.lang.AssertionError((((\"Mapped index not in correct bounds \" + int) + \", \") + long));\n        \n        if (int > (-(com.graphhopper.reader.OSMReader.int))) {\n            boolean boolean = (int == 0) || (int == int);\n            if (!boolean) {\n                int = int;\n            } \n            int = com.graphhopper.reader.OSMReader.handlePillarNode(int, long, com.graphhopper.util.PointList, boolean);\n        } \n        if (int < (com.graphhopper.reader.OSMReader.int)) {\n            int = (-int) - 3;\n            com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n            if (int >= 0) {\n                java.util.List<com.graphhopper.util.EdgeIteratorState>.add(com.graphhopper.reader.OSMReader.addEdge(int, int, com.graphhopper.util.PointList, long, long));\n                com.graphhopper.util.PointList.clear();\n                com.graphhopper.util.PointList.add(com.graphhopper.storage.NodeAccess, int);\n            } \n            int = int;\n        } \n    }\n} catch (java.lang.RuntimeException ex) {\n    com.graphhopper.reader.OSMReader.org.slf4j.Logger.error((\"Couldn\\'t properly add edge with osm ids:\" + gnu.trove.list.TLongList), java.lang.RuntimeException);\n    if (boolean)\n        throw java.lang.RuntimeException;\n    \n}"},"status":-1}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
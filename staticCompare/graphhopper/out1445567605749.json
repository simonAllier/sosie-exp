{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":154,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":241,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":251,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":259,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":60,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":141,"com.graphhopper.reader.OSMReaderTest.testFerry":171,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":293,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":294,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":248,"com.graphhopper.routing.QueryGraphTest.testOneWay":258,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":27,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":56,"com.graphhopper.reader.OSMReaderTest.testWithBounds":182,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":160,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteAndOptimize":119,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":152,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":253,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":271,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":272,"com.graphhopper.storage.GraphHopperStorageCHTest.testQueryGraph":3,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":208,"com.graphhopper.storage.GraphStorageViaMMapTest.testEnabledElevation":159,"com.graphhopper.storage.GraphHopperStorageTest.test8BytesFlags":88,"com.graphhopper.GraphHopperTest.testCustomFactoryForNoneCH":186,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":26,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":130,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnabledElevation":28,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":75,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":216,"com.graphhopper.storage.GraphStorageViaMMapTest.testPillarNodes":167,"com.graphhopper.GraphHopperTest.testPrepare":195,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":124,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":240,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":78,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":94,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":204,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":256,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFastestPath":223,"com.graphhopper.util.InstructionListTest.testWayList":290,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":232,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":289,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":282,"com.graphhopper.GraphHopperAPITest.testDisconnected179":1,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteAndOptimize":18,"com.graphhopper.storage.GraphHopperStorageCHTest.testDisconnectEdge":2,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":276,"com.graphhopper.storage.GraphStorageViaMMapTest.testFootMix":147,"com.graphhopper.GraphHopperTest.testAllowMultipleReadingInstances":200,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":55,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":273,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":143,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":224,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteAndOptimize":87,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":229,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":57,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":185,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":266,"com.graphhopper.reader.OSMReaderTest.testReadEleFromDataProvider":177,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":275,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":13,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":262,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":157,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":168,"com.graphhopper.GraphHopperTest.testSortedGraph_noCH":196,"com.graphhopper.storage.GraphHopperStorageTest.testFlags":84,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":71,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":132,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testPillarNodes":137,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":134,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":133,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":219,"com.graphhopper.GraphHopperTest.testLoadOSM":199,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":63,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":217,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":44,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":8,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":58,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":99,"com.graphhopper.reader.OSMReaderTest.testSort":174,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":98,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcFootPath":235,"com.graphhopper.reader.OSMReaderTest.testWayReferencesNotExistingAdjNode":181,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":274,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":23,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":76,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":213,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":48,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":109,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":245,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":255,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":170,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":261,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":136,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":52,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":151,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":17,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":246,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":222,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":230,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":250,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":43,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":21,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":115,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":93,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":110,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":83,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":53,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":38,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":91,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":237,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":265,"com.graphhopper.util.GHUtilityTest.testSort":285,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":148,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":61,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":257,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":227,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":226,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":81,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":138,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":73,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":113,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":128,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":4,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":35,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":254,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testApplyWayTags":280,"com.graphhopper.GraphHopperTest.testLoadOSMNoCH":201,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":96,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.test8BytesFlags":120,"com.graphhopper.GraphHopperAPITest.testLoad":0,"com.graphhopper.GraphHopperTest.testLoadingWithDifferentCHConfig_issue471":198,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":125,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":244,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":89,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":270,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":80,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":111,"com.graphhopper.reader.OSMReaderTest.testBarriers":175,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":277,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes":24,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":162,"com.graphhopper.GraphHopperTest.testFailsForWrongConfig":203,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":39,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":145,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":228,"com.graphhopper.util.GHUtilityTest.testCopy":284,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraph":220,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":112,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":281,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":122,"com.graphhopper.storage.GraphStorageViaMMapTest.test8BytesFlags":150,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":86,"com.graphhopper.util.InstructionListTest.testEmptyList":288,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":231,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":104,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":92,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testQueryGraphAndFastest":236,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":95,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":135,"com.graphhopper.storage.GraphHopperStorageCHTest.testFlags":15,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":239,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":34,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":123,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":210,"com.graphhopper.reader.PrinctonReaderTest.testRead":184,"com.graphhopper.storage.GraphHopperStorageTest.testPillarNodes":105,"com.graphhopper.storage.GraphHopperStorageCHTest.testFootMix":16,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFootMix":117,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteAndOptimize":149,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnabledElevation":129,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":140,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeFilter":6,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes2":12,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":77,"com.graphhopper.storage.GraphStorageViaMMapTest.testFlags":146,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":215,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":247,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":126,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":30,"com.graphhopper.util.InstructionListTest.testWayList2":291,"com.graphhopper.reader.OSMReaderTest.testFoot":172,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":165,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":64,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":161,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":260,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":106,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":62,"com.graphhopper.reader.OSMReaderTest.testOneWay":183,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testFlags":116,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":10,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":90,"com.graphhopper.routing.util.Bike2WeightFlagEncoderTest.testUnchangedForStepsBridgeAndTunnel":279,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":14,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":102,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":101,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":153,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":121,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":214,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":69,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":79,"com.graphhopper.storage.GraphHopperStorageTest.testFootMix":85,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":156,"com.graphhopper.reader.OSMReaderTest.testReadEleFromCustomOSM":176,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":264,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":209,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":49,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":243,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":118,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":31,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":206,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMoreComplexGraph":218,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":207,"com.graphhopper.routing.PathBidirRefTest.testExtract":267,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":193,"com.graphhopper.util.CHEdgeIteratorTest.testUpdateFlags":295,"com.graphhopper.routing.util.FootFlagEncoderTest.testGraph":278,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":188,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":164,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":139,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":192,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":51,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":191,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":163,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":190,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":189,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":68,"com.graphhopper.util.GHUtilityTest.testSort2":283,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":238,"com.graphhopper.reader.OSMReaderTest.testMain":173,"com.graphhopper.storage.GraphHopperStorageCHTest.testPillarNodes":36,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":127,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":33,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_Freeze":5,"com.graphhopper.routing.PathBidirRefTest.testExtract2":268,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":32,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":72,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":166,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":221,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":45,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":65,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":74,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":269,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":54,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":100,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":22,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":25,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":40,"com.graphhopper.reader.OSMReaderTest.testTurnRestrictions":178,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":169,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":131,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":9,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":242,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":212,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":59,"com.graphhopper.storage.GraphHopperStorageTest.testClone":82,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":107,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":37,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":103,"com.graphhopper.storage.GraphHopperStorageCHTest.testCheckFirstNode":29,"com.graphhopper.storage.GraphHopperStorageTest.testEnabledElevation":97,"com.graphhopper.GraphHopperTest.testFootAndCar":197,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":7,"com.graphhopper.util.InstructionListTest.testCreateGPX":296,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":144,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":211,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":66,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":42,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":158,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":234,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":114,"com.graphhopper.util.GHUtilityTest.testSortDirected":286,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":20,"com.graphhopper.GraphHopperTest.testPrepareOnly":187,"com.graphhopper.GraphHopperTest.testVia":194,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":249,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":142,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.test0SpeedButUnblocked_Issue242":233,"com.graphhopper.reader.OSMReaderTest.testBarriersOnTowerNodes":180,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":50,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":41,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":252,"com.graphhopper.GraphHopperTest.testFootOnly":202,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":292,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":46,"com.graphhopper.reader.OSMReaderTest.testNegativeIds":179,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":70,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":47,"com.graphhopper.storage.GraphHopperStorageCHTest.test8BytesFlags":19,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":155,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":263,"com.graphhopper.util.InstructionListTest.testFind":287,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":225,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":205,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":11,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":67,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":108},"transformations":[{"failures":[],"tindex":"6feb0d8b-792e-11e5-8b9e-39a0ff76d8fa","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.InstructionAnnotation:51","type":"CtAssignmentImpl","sourcecode":"this.boolean = true"},"variableMap":{"empty":"closed"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.RAMIntDataAccess:295","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":0},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295],"tindex":"6feb5bac-792e-11e5-8b9e-6d950a85f716","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMIntDataAccess:266","type":"CtIfImpl","sourcecode":"if (((long % 4) != 0) && ((long % 4) != 2))\n    throw new java.lang.IllegalMonitorStateException((\"bytePos of wrong multiple for RAMInt \" + long));\n"},"variableMap":{"bytePos":"newCapacity"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:281","type":"CtForImpl","sourcecode":"for (long long = long + (int) ; long < long ; long += int) {\n    com.graphhopper.storage.DataAccess.setInt(long, com.graphhopper.util.EdgeIterator.int);\n}"},"status":-1},{"failures":[],"tindex":"6feb82bd-792e-11e5-8b9e-7f0dc8526f20","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:408","type":"CtIfImpl","sourcecode":"if (com.graphhopper.util.Helper.isEmpty(java.lang.String))\n    return -1;\n"},"variableMap":{"str":"ele"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMNode:77","type":"CtIfImpl","sourcecode":"if (java.lang.Object == null)\n    return java.lang.Double.double;\n"},"status":-2},{"failures":[296,292],"tindex":"6feb82be-792e-11e5-8b9e-a514233ff9d6","series":0,"name":"add","transplant":{"position":"com.graphhopper.coll.OSMIDMap:87","type":"CtOperatorAssignmentImpl","sourcecode":"long += 4"},"variableMap":{"size":"time"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.Instruction:186","type":"CtAssignmentImpl","sourcecode":"long = java.lang.Math.round((long + (((this.long) * (com.graphhopper.util.Helper.com.graphhopper.util.DistanceCalc3D.calcDist(double, double, double, double))) / (double))))"},"status":-1},{"failures":[],"tindex":"6feb82bf-792e-11e5-8b9e-bfb3cbf3a0e3","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.NativeFSLockFactory:245","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.GraphHopper:540","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = com.graphhopper.util.CmdArgs.getBool(\"graph.elevation.calcmean\", false)"},"status":-2},{"failures":[],"tindex":"6feba9d0-792e-11e5-8b9e-414a55ca5832","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.IntDoubleBinHeap:157","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.TurnCostExtension:213","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[],"tindex":"6feba9d1-792e-11e5-8b9e-a55250470caf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.SparseIntIntArray:202","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-2},{"failures":[],"tindex":"6feba9d2-792e-11e5-8b9e-a96ac48f00c4","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:176","type":"CtLocalVariableImpl","sourcecode":"int int = 1024 * 8"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.BitUtilLittle:90","type":"CtLocalVariableImpl","sourcecode":"int int = (java.lang.String.length()) / 8"},"status":-2},{"failures":[],"tindex":"6feba9d3-792e-11e5-8b9e-f1e71f1a711d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DouglasPeucker:162","type":"CtForImpl","sourcecode":"for (int int = int + 1 ; int < int ; int++) {\n    com.graphhopper.util.PointList.set(int, java.lang.Double.double, java.lang.Double.double, java.lang.Double.double);\n    int++;\n}"},"status":-2},{"failures":[],"tindex":"6feba9d4-792e-11e5-8b9e-a777218e4bd5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.AngleCalc:93","type":"CtIfImpl","sourcecode":"if (double >= 0) {\n    if (double < ((-(java.lang.Math.double)) + double))\n        double = double + (2 * (java.lang.Math.double));\n    else\n        double = double;\n    \n} else {\n    if (double > ((+(java.lang.Math.double)) + double))\n        double = double - (2 * (java.lang.Math.double));\n    else\n        double = double;\n    \n}"},"status":-2},{"failures":[],"tindex":"6febd0e5-792e-11e5-8b9e-13fdb4d14746","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.RoundaboutInstruction:80","type":"CtIfImpl","sourcecode":"if ((boolean) && ((int) == 0)) {\n    throw new java.lang.IllegalStateException(\"RoundaboutInstruction must contain exitNumber>0\");\n} "},"variableMap":{"exited":"flagsSizeIsLong","exitNumber":"E_FLAGS"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.EdgeAccess:114","type":"CtIfImpl","sourcecode":"if (boolean) {\n    int int = com.graphhopper.storage.DataAccess.getInt(((long + (int)) + 4));\n    long = com.graphhopper.util.BitUtil.combineIntsToLong(int, int);\n} "},"status":-2},{"failures":[],"tindex":"6febd0e6-792e-11e5-8b9e-b3d3757dc11b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.RAMDataAccess:254","type":"CtAssertImpl","sourcecode":"assert (int + 2) <= (int) : \"integer cannot be distributed over two segments\""},"variableMap":{"segmentSizeInBytes":"com.graphhopper.storage.AbstractDataAccess.HEADER_OFFSET","index":"com.graphhopper.storage.AbstractDataAccess.HEADER_OFFSET"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.MMapDataAccess:434","type":"CtInvocationImpl","sourcecode":"java.io.RandomAccessFile.setLength(((com.graphhopper.storage.AbstractDataAccess.int) + (int * (int))))"},"status":-2},{"failures":[],"tindex":"6febd0e7-792e-11e5-8b9e-f3006552f356","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.MotorcycleFlagEncoder:196","type":"CtIfImpl","sourcecode":"if ((double > 0) && (double < double))\n    double = double * 0.9;\n"},"variableMap":{"maxMCSpeed":"weight","speed":"weight"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AStarBidirection:260","type":"CtIfImpl","sourcecode":"if ((com.graphhopper.routing.AStar.AStarEdge == null) || ((com.graphhopper.routing.AStar.AStarEdge.double) > float)) {\n    double double = com.graphhopper.routing.util.ConsistentWeightApproximator.approximate(int, boolean);\n    double double = float + double;\n    if (com.graphhopper.routing.AStar.AStarEdge == null) {\n        com.graphhopper.routing.AStar.AStarEdge = new com.graphhopper.routing.AStar.AStarEdge(com.graphhopper.util.EdgeIterator.getEdge() , int , double , float);\n        com.graphhopper.routing.TIntObjectMap<com.graphhopper.routing.AStar.AStarEdge>.put(int, com.graphhopper.routing.AStar.AStarEdge);\n    } else {\n        assert (com.graphhopper.routing.AStar.AStarEdge.double) > double : \"Inconsistent distance estimate\";\n        java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.remove(com.graphhopper.routing.AStar.AStarEdge);\n        com.graphhopper.routing.AStar.AStarEdge.int = com.graphhopper.util.EdgeIterator.getEdge();\n        com.graphhopper.routing.AStar.AStarEdge.double = double;\n        com.graphhopper.routing.AStar.AStarEdge.double = float;\n    }\n    com.graphhopper.routing.AStar.AStarEdge.com.graphhopper.storage.EdgeEntry = com.graphhopper.routing.AStar.AStarEdge;\n    java.util.PriorityQueue<com.graphhopper.routing.AStar.AStarEdge>.add(com.graphhopper.routing.AStar.AStarEdge);\n    com.graphhopper.routing.AStarBidirection.updateBestPath(com.graphhopper.util.EdgeIterator, com.graphhopper.routing.AStar.AStarEdge, int);\n} "},"status":-2},{"failures":[],"tindex":"6febf7f8-792e-11e5-8b9e-8f1b0858c949","series":0,"name":"replace","transplant":{"position":"com.graphhopper.coll.OSMIDMap:127","type":"CtReturnImpl","sourcecode":"return ~long"},"variableMap":{"high":"turnCostPtr"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.TurnCostExtension:189","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.DataAccess.getInt((long + (int)))"},"status":-2},{"failures":[],"tindex":"6febf7f9-792e-11e5-8b9e-377cee211196","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:260","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.dem.HeightTile.isSeaLevel())\n    return 0;\n"},"variableMap":{"demProvider":"demProvider"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:224","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.dem.HeightTile == null) {\n    if (!(java.io.File.exists()))\n        java.io.File.mkdirs();\n    \n    java.lang.String java.lang.String = com.graphhopper.reader.dem.SRTMProvider.getFileString(double, double);\n    if (java.lang.String == null)\n        return 0;\n    \n    int int = com.graphhopper.reader.dem.SRTMProvider.down(double);\n    int int = com.graphhopper.reader.dem.SRTMProvider.down(double);\n    com.graphhopper.reader.dem.HeightTile = new com.graphhopper.reader.dem.HeightTile(int , int , int , double , 1);\n    com.graphhopper.reader.dem.HeightTile.setCalcMean(boolean);\n    com.graphhopper.reader.dem.TIntObjectHashMap<com.graphhopper.reader.dem.HeightTile>.put(int, com.graphhopper.reader.dem.HeightTile);\n    com.graphhopper.storage.DataAccess com.graphhopper.storage.DataAccess = com.graphhopper.reader.dem.SRTMProvider.getDirectory().find((\"dem\" + int));\n    com.graphhopper.reader.dem.HeightTile.setHeights(com.graphhopper.storage.DataAccess);\n    boolean boolean = false;\n    try {\n        boolean = com.graphhopper.storage.DataAccess.loadExisting();\n    } catch (java.lang.Exception ex) {\n        com.graphhopper.reader.dem.Logger.warn((((\"cannot load dem\" + int) + \", error:\") + (java.lang.Exception.getMessage())));\n    }\n    if (!boolean) {\n        byte[] byte[] = new byte[(2 * (int)) * (int)];\n        com.graphhopper.storage.DataAccess.create(byte[].int);\n        try {\n            java.lang.String java.lang.String = (((java.lang.String) + \"/\") + java.lang.String) + \".hgt.zip\";\n            java.io.File java.io.File = new java.io.File(java.io.File , new java.io.File(java.lang.String).getName());\n            java.io.InputStream java.io.InputStream;\n            if (!(java.io.File.exists())) {\n                for (int int = 0 ; int < 3 ; int++) {\n                    try {\n                        com.graphhopper.util.Downloader.downloadFile(java.lang.String, java.io.File.getAbsolutePath());\n                        break;\n                    } catch (java.net.SocketTimeoutException ex) {\n                        java.lang.Thread.sleep(2000);\n                        continue;\n                    } catch (java.io.FileNotFoundException ex) {\n                        java.lang.String = (((java.lang.String) + \"/\") + java.lang.String) + \"hgt.zip\";\n                        continue;\n                    }\n                }\n            } \n            java.io.InputStream = new java.io.FileInputStream(java.io.File);\n            java.util.zip.ZipInputStream java.util.zip.ZipInputStream = new java.util.zip.ZipInputStream(java.io.InputStream);\n            java.util.zip.ZipInputStream.getNextEntry();\n            java.io.BufferedInputStream java.io.BufferedInputStream = new java.io.BufferedInputStream(java.util.zip.ZipInputStream);\n            int int;\n            while ((int = java.io.BufferedInputStream.read(byte[])) > 0) {\n                for (int int = 0 ; int < int ; int += 2) {\n                    short short = com.graphhopper.reader.dem.SRTMProvider.com.graphhopper.util.BitUtil.toShort(byte[], int);\n                    if ((short < (-1000)) || (short > 12000))\n                        short = java.lang.Short.short;\n                    \n                    com.graphhopper.storage.DataAccess.setShort(int, short);\n                }\n            }\n            com.graphhopper.storage.DataAccess.flush();\n        } catch (java.lang.Exception ex) {\n            throw new java.lang.RuntimeException(java.lang.Exception);\n        }\n    } \n} "},"status":-2},{"failures":[],"tindex":"6fec1f0a-792e-11e5-8b9e-6f676c9d5c25","series":0,"name":"add","transplant":{"position":"com.graphhopper.util.PointList:369","type":"CtIfImpl","sourcecode":"if ((int < 0) || (int > (int)))\n    throw new java.lang.IllegalArgumentException((((((\"Illegal interval: \" + int) + \", \") + int) + \", size:\") + (int)));\n"},"variableMap":{"size":"from","from":"from","end":"from"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.Dijkstra:65","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.routing.util.TraversalMode.isEdgeBased())) {\n    com.graphhopper.routing.TIntObjectMap<com.graphhopper.storage.EdgeEntry>.put(int, com.graphhopper.storage.EdgeEntry);\n} "},"status":-2},{"failures":[],"tindex":"6fec1f0b-792e-11e5-8b9e-e390934355e5","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.OSMReader:755","type":"CtLocalVariableImpl","sourcecode":"double double = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:759","type":"CtLocalVariableImpl","sourcecode":"double double"},"status":-2},{"failures":[],"tindex":"6fec461c-792e-11e5-8b9e-25aef8547ca0","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalc3D:38","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Math.abs((double - double))"},"variableMap":{"fromHeight":"fromLon","toHeight":"fromLon"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:54","type":"CtLocalVariableImpl","sourcecode":"double double = java.lang.Math.java.lang.Math.sin((java.lang.Math.(java.lang.Math.toRadians((double - double))) / 2))"},"status":-2},{"failures":[],"tindex":"6fec461d-792e-11e5-8b9e-5f96c67fc4d1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.coll.GHBitSetImpl:68","type":"CtInvocationImpl","sourcecode":"com.graphhopper.coll.GHBitSet.clear()"},"status":-2},{"failures":[],"tindex":"6fec461e-792e-11e5-8b9e-3bc41bbac7ff","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:179","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.shapes.BBox.double = com.graphhopper.util.Helper.intToDegree(com.graphhopper.storage.DataAccess.getHeader((5 * 4)))"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
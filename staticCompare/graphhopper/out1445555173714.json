{"failureDictionary":{"com.graphhopper.storage.GraphStorageViaMMapTest.testDozendEdges":12,"com.graphhopper.routing.QueryGraphTest.testMultipleVirtualNodes":180,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIfEmptyWay":205,"com.graphhopper.routing.QueryGraphTest.testEnforceHeadingByEdgeId":188,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints120":92,"com.graphhopper.storage.index.LocationIndexTreeTest.testSearchWithFilter_issue318":102,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectionalEdgeFilter":1,"com.graphhopper.util.DepthFirstSearchTest.testDFS1":266,"com.graphhopper.util.DepthFirstSearchTest.testDFS2":267,"com.graphhopper.routing.QueryGraphTest.testLoopStreet_Issue151":177,"com.graphhopper.routing.QueryGraphTest.testOneWay":187,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdgeProperties":48,"com.graphhopper.storage.index.LocationIndexTreeTest.testFindingWayGeometry":98,"com.graphhopper.storage.GraphStorageViaMMapTest.testCheckFirstNode":17,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode":9,"com.graphhopper.routing.QueryGraphTest.testFillVirtualEdges":182,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testFindSubnetworks":236,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkWhenMultipleVehicles":237,"com.graphhopper.storage.GraphHopperStorageTest.testCopyProperties":173,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testAddShortcuts":214,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testRMin":74,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph":66,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode2":47,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCheckFirstNode":134,"com.graphhopper.storage.index.Location2IDFullIndexTest.testDifferentVehicles":70,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testBug178":221,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDozendEdges":129,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_BiGraph":204,"com.graphhopper.storage.GraphHopperStorageTest.testDetachEdge":148,"com.graphhopper.storage.GraphHopperStorageTest.testAddLocation":162,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder":272,"com.graphhopper.routing.QueryGraphTest.testOneVirtualNode":185,"com.graphhopper.util.InstructionListTest.testWayList":256,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge":199,"com.graphhopper.util.InstructionListTest.testNoInstructionIfSameStreet":255,"com.graphhopper.util.BreadthFirstSearchTest.testBFS2":260,"com.graphhopper.GraphHopperAPITest.testDisconnected179":269,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testTarjan":241,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex":96,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveNode":238,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes2":3,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional":191,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCannotCalculateSP":196,"com.graphhopper.storage.index.LocationIndexTreeTest.testMoreReal":99,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutBegin":233,"com.graphhopper.reader.PrinctonReaderTest.testMediumRead":247,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testKeepLargestNetworks":240,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyProperties":142,"com.graphhopper.storage.GraphHopperStorageCHTest.testClone":36,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutIssue353":225,"com.graphhopper.storage.GraphStorageViaMMapTest.testComplexDeleteNode2":15,"com.graphhopper.storage.GraphStorageViaMMapTest.testDirectional":26,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testGrid":62,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCopyTo":136,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete3":138,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete2":137,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph":223,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph":107,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testCircleBug":222,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testWayGeometry":77,"com.graphhopper.storage.GraphHopperStorageCHTest.internalDisconnect":31,"com.graphhopper.storage.index.LocationIndexTreeTest.testWayGeometry":100,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectional":166,"com.graphhopper.storage.GraphHopperStorageTest.testCheckFirstNode":165,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveSubnetworkIfOnlyOneVehicle":239,"com.graphhopper.storage.GraphHopperStorageCHTest.testDozendEdges":44,"com.graphhopper.storage.GraphHopperStorageTest.testSave_and_fileFormat":146,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testUnpackingOrder_Fastest":273,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex2":82,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex3":83,"com.graphhopper.storage.GraphStorageViaMMapTest.testNameIndex":24,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.internalDisconnect":116,"com.graphhopper.routing.QueryGraphTest.testOneWayLoop_Issue162":184,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcIf1EdgeAway":209,"com.graphhopper.reader.OSMTurnRelationTest.testGetRestrictionAsEntries":245,"com.graphhopper.storage.GraphHopperStorageTest.testEnsureSize":145,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutDirectExit":224,"com.graphhopper.routing.PathTest.testWayList":230,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyProperties":25,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateLocation":140,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete":8,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph2":87,"com.graphhopper.storage.GraphHopperStorageCHTest.testUpdateUnidirectional":39,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testTwoWeightsPerEdge2":210,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdges":154,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureCapacity":114,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBaseGraphMultipleVehicles":271,"com.graphhopper.storage.index.LocationIndexTreeTest.testRMin":97,"com.graphhopper.storage.GraphHopperStorageTest.testNameIndex":172,"com.graphhopper.routing.QueryGraphTest.testInternalAPIOriginalTraversalKey":179,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit_issue380":197,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testMoreReal":76,"com.graphhopper.storage.GraphHopperStorageCHTest.testComplexDeleteNode":41,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdges":122,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes":161,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDetachEdge":117,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdges":123,"com.graphhopper.storage.GraphHopperStorageTest.testEdges":153,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints32":88,"com.graphhopper.storage.GraphHopperStorageCHTest.testSetNodes":59,"com.graphhopper.storage.GraphHopperStorageTest.testGetAllEdgesWithDelete":159,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_SpecialCases":201,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout":232,"com.graphhopper.util.GHUtilityTest.testSort":264,"com.graphhopper.storage.GraphStorageViaMMapTest.testUpdateUnidirectional":7,"com.graphhopper.storage.index.LocationIndexTreeTest.testSnappedPointAndGeometry":104,"com.graphhopper.routing.QueryGraphTest.testIteration_Issue163":186,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug2":194,"com.graphhopper.storage.GraphHopperStorageCHTest.testNameIndex":56,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testDirectedGraphBug1":193,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetLocations":127,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDirectional":143,"com.graphhopper.storage.GraphHopperStorageTest.testIdenticalNodes2":151,"com.graphhopper.routing.QueryGraphTest.testVirtEdges":189,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph2":93,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints32":64,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes2":120,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEdgeProperties":133,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints120":67,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleShortcutCreationAndTraversal":28,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateLocation":55,"com.graphhopper.routing.QueryGraphTest.testGetEdgeProps":183,"com.graphhopper.storage.index.Location2IDFullIndexTest.testFullIndex":65,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testEnsureSize":115,"com.graphhopper.storage.GraphHopperStorageTest.testEdgeProperties":164,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testFullIndex":90,"com.graphhopper.GraphHopperAPITest.testLoad":268,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testIdenticalNodes":130,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testRekeyBugOfIntBinHeap":208,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete":156,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testRemoveDeadEndUnvisitedNetworks":235,"com.graphhopper.storage.GraphHopperStorageTest.testDeleteNodeForUnidir":150,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectionalEdgeFilter":118,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.testNodeOrderingRegression":242,"com.graphhopper.storage.GraphStorageViaMMapTest.testCopyTo":19,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes":45,"com.graphhopper.routing.PathTest.testFound":226,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraph":71,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdges":5,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_WithCoordinates":195,"com.graphhopper.util.GHUtilityTest.testCopy":263,"com.graphhopper.routing.PathTest.testFindInstruction":231,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testDeleteNodeForUnidir":119,"com.graphhopper.util.BreadthFirstSearchTest.testBFS":259,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode":126,"com.graphhopper.storage.GraphHopperStorageTest.testUpdateUnidirectional":155,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testViaEdges_FromEqualsTo":198,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSimpleGraph":91,"com.graphhopper.storage.GraphHopperStorageTest.testCreateLocation":171,"com.graphhopper.storage.GraphHopperStorageTest.testDozendEdges":160,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testCreateDuplicateEdges":139,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode2":163,"com.graphhopper.util.GHUtilityTest.testCopyWithSelfRef":261,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testCalcShortestPath":203,"com.graphhopper.storage.GraphHopperStorageCHTest.testCreateDuplicateEdges":54,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testGetAllEdgesWithDelete":128,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode2":216,"com.graphhopper.reader.PrinctonReaderTest.testRead":246,"com.graphhopper.storage.GraphStorageViaMMapTest.testDetachEdge":0,"com.graphhopper.storage.GraphHopperStorageCHTest.testIdenticalNodes2":35,"com.graphhopper.storage.GraphHopperStorageTest.internalDisconnect":147,"com.graphhopper.routing.QueryGraphTest.testEnforceHeading":176,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsIdenticalView":220,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testAddLocation":131,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectional":50,"com.graphhopper.util.InstructionListTest.testWayList2":257,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testReverseSpatialKey":80,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateDuplicateEdges":22,"com.graphhopper.storage.GraphStorageViaMMapTest.testUnidirectional":18,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints120":108,"com.graphhopper.routing.QueryGraphTest.testEdgesShareOneNode":190,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex2":105,"com.graphhopper.storage.GraphHopperStorageTest.testDirectional":174,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyProperties":57,"com.graphhopper.storage.index.LocationIndexTreeTest.testInMemIndex3":106,"com.graphhopper.storage.GraphHopperStorageCHTest.testUnidirectionalEdgeFilter":33,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testNameIndex":141,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetLocations":42,"com.graphhopper.storage.GraphHopperStorageTest.testComplexDeleteNode":157,"com.graphhopper.storage.GraphHopperStorageCHTest.testEdges":37,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete3":169,"com.graphhopper.storage.GraphHopperStorageTest.testSimpleDelete2":168,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdgesWithDelete":11,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSimpleDelete":125,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testMultiplePreparationsDifferentView":219,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph":60,"com.graphhopper.storage.GraphStorageViaMMapTest.testAddLocation":14,"com.graphhopper.storage.GraphHopperStorageTest.testUnidirectionalEdgeFilter":149,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundaboutClockwise":229,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathSkipNode":215,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSimpleGraph":84,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWithCoordinates":207,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUpdateUnidirectional":124,"com.graphhopper.storage.GraphHopperStorageCHTest.testCopyTo":51,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph2":212,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSimpleGraph2":68,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testDirectedGraph3":213,"com.graphhopper.routing.PathBidirRefTest.testExtract":243,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement6":253,"com.graphhopper.storage.index.LocationIndexTreeTest.testReverseSpatialKey":103,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement1":248,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete3":21,"com.graphhopper.storage.GraphHopperStorageCHTest.testEnsureSize":29,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSetNodes":144,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement5":252,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testGrid":86,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement4":251,"com.graphhopper.storage.GraphStorageViaMMapTest.testSimpleDelete2":20,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement3":250,"com.graphhopper.GraphHopperTest.testGetPathsDirectionEnforcement2":249,"com.graphhopper.storage.index.LocationIndexTreeTest.testDifferentVehicles":112,"com.graphhopper.util.GHUtilityTest.testSort2":262,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testBidirectional2":202,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetLocations":10,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testComplexDeleteNode2":132,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete3":53,"com.graphhopper.routing.PathBidirRefTest.testExtract2":244,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete2":52,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSimpleGraph2":63,"com.graphhopper.storage.GraphStorageViaMMapTest.testCreateLocation":23,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testPathRecursiveUnpacking":270,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testEdgeFilter":78,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testDifferentVehicles":95,"com.graphhopper.storage.index.LocationIndexTreeTest.testGrid":109,"com.graphhopper.routing.util.PrepareRoutingSubnetworksTest.test481":234,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testDifferentVehicles":89,"com.graphhopper.storage.GraphHopperStorageTest.testCopyTo":167,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdgesWithDelete":43,"com.graphhopper.storage.GraphHopperStorageCHTest.testAddLocation":46,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testCHGraphBug":72,"com.graphhopper.storage.GraphStorageViaMMapTest.testSetNodes":27,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testUnidirectional":135,"com.graphhopper.storage.GraphHopperStorageCHTest.testDetachEdge":32,"com.graphhopper.storage.index.Location2IDFullIndexTest.testSinglePoints32":69,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWeightLimit":206,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testRoundaboutUnpacking":218,"com.graphhopper.storage.index.LocationIndexTreeTest.testEdgeFilter":101,"com.graphhopper.storage.GraphHopperStorageTest.testClone":152,"com.graphhopper.storage.GraphHopperStorageTest.testSetNodes":175,"com.graphhopper.storage.GraphHopperStorageCHTest.testDirectional":58,"com.graphhopper.storage.GraphHopperStorageTest.testCreateDuplicateEdges":170,"com.graphhopper.storage.GraphHopperStorageCHTest.testCheckFirstNode":49,"com.graphhopper.storage.GraphHopperStorageTest.testGetLocations":158,"com.graphhopper.storage.GraphHopperStorageCHTest.testSave_and_fileFormat":30,"com.graphhopper.storage.GraphStorageViaMMapTest.testGetAllEdges":6,"com.graphhopper.routing.PathTest.testTime":227,"com.graphhopper.storage.GraphStorageViaMMapTest.testClone":4,"com.graphhopper.storage.GraphHopperStorageCHTest.testGetAllEdges":38,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testShortestPathLimit":217,"com.graphhopper.storage.index.LocationIndexTreeTest.testSimpleGraph2":110,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testFindingWayGeometry":75,"com.graphhopper.storage.GraphStorageViaMMapTest.testEdgeProperties":16,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testNoPathFound":200,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testClone":121,"com.graphhopper.util.GHUtilityTest.testSortDirected":265,"com.graphhopper.storage.GraphHopperStorageCHTest.testSimpleDelete":40,"com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest.testSinglePoints32":94,"com.graphhopper.routing.QueryGraphTest.testTurnCostsProperlyPropagated_Issue282":178,"com.graphhopper.storage.GraphStorageViaMMapTest.testDeleteNodeForUnidir":2,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSinglePoints120":85,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testInMemIndex":73,"com.graphhopper.routing.QueryGraphTest.testAvoidDuplicateVirtualNodesIfIdentical":181,"com.graphhopper.util.InstructionListTest.testInstructionsWithTimeAndPlace":258,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSearchWithFilter_issue318":79,"com.graphhopper.storage.index.Location2IDQuadtreeTest.testSinglePoints120":61,"com.graphhopper.storage.index.LocationIndexTreeCHTest.testSnappedPointAndGeometry":81,"com.graphhopper.storage.GraphStorageViaMMapTest.testIdenticalNodes":13,"com.graphhopper.routing.PathTest.testCalcInstructionsRoundabout2":228,"com.graphhopper.util.InstructionListTest.testFind":254,"com.graphhopper.routing.ch.DijkstraBidirectionCHTest.testWikipediaShortestPath":192,"com.graphhopper.routing.ch.PrepareContractionHierarchiesTest.testFindShortcuts_Roundabout":211,"com.graphhopper.storage.GraphHopperStorageCHTest.testDeleteNodeForUnidir":34,"com.graphhopper.storage.index.LocationIndexTreeTest.testSinglePoints32":111,"com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest.testSave_and_fileFormat":113},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269],"tindex":"7dd95ca1-7911-11e5-846f-3f7efb9f8b77","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.GraphHopperStorage:415","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.BaseGraph.getEdgeIteratorState(int, int)"},"variableMap":{"edgeId":"b","adjNode":"b","baseGraph":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:357","type":"CtReturnImpl","sourcecode":"return com.graphhopper.storage.BaseGraph.edge(int, int).setDistance(double).setFlags(com.graphhopper.routing.util.EncodingManager.flagsDefault(true, boolean))"},"status":-1},{"failures":[270,271,191,194,204,208,272,218,273,219],"tindex":"7dd9aac2-7911-11e5-846f-3d77cca2b8ff","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:789","type":"CtIfImpl","sourcecode":"if (int != 1)\n    throw new java.lang.IllegalStateException((((((((\"Trying to set original edge count for normal edge to a value = \" + int) + \", edge:\") + (int + (int))) + \", max:\") + (int)) + \", graph.max:\") + (com.graphhopper.storage.GraphHopperStorage.getAllEdges().getMaxId())));\n"},"variableMap":{"ghStorage":"routingGraph","edgeId":"skippedEdge2","maxEdgesCount":"skippedEdge2","value":"skippedEdge1"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.Path4CH:98","type":"CtIfImpl","sourcecode":"if (boolean)\n    com.graphhopper.util.CHEdgeIteratorState = ((com.graphhopper.util.CHEdgeIteratorState)(com.graphhopper.storage.Graph.getEdgeIteratorState(int, int)));\nelse\n    com.graphhopper.util.CHEdgeIteratorState = ((com.graphhopper.util.CHEdgeIteratorState)(com.graphhopper.storage.Graph.getEdgeIteratorState(int, int)));\n"},"status":-1},{"failures":[],"tindex":"7dd9aac3-7911-11e5-846f-270d96d0df89","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:668","type":"CtLocalVariableImpl","sourcecode":"java.util.List<com.graphhopper.util.EdgeIteratorState> java.util.List<com.graphhopper.util.EdgeIteratorState> = new java.util.ArrayList<com.graphhopper.util.EdgeIteratorState>(5)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMReader:375","type":"CtLocalVariableImpl","sourcecode":"java.util.List<com.graphhopper.util.EdgeIteratorState> java.util.List<com.graphhopper.util.EdgeIteratorState> = new java.util.ArrayList<com.graphhopper.util.EdgeIteratorState>()"},"status":-2},{"failures":[],"tindex":"7dd9d1d4-7911-11e5-846f-a16acdd8eb8f","series":0,"name":"add","transplant":{"position":"com.graphhopper.reader.OSMReader:888","type":"CtReturnImpl","sourcecode":"return (long)++"},"variableMap":{"newUniqueOsmId":"tmpValue"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.EncodedDoubleValue:70","type":"CtReturnImpl","sourcecode":"return long | long"},"status":-2},{"failures":[],"tindex":"7dd9d1d5-7911-11e5-846f-8f08dec820ce","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:592","type":"CtIfImpl","sourcecode":"if ((((\"track\".equals(java.lang.String)) && ((java.lang.String == null) || (!(\"grade1\".equals(java.lang.String))))) || ((\"path\".equals(java.lang.String)) && (java.lang.String == null))) || (java.util.Set<java.lang.String>.contains(java.lang.String))) {\n    long = com.graphhopper.routing.util.BikeCommonFlagEncoder.setBool(long, com.graphhopper.routing.util.BikeCommonFlagEncoder.int, true);\n} "},"status":-2},{"failures":[],"tindex":"7dd9d1d6-7911-11e5-846f-bbb065adbb32","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.AngleCalc:117","type":"CtAssignmentImpl","sourcecode":"double = com.graphhopper.util.Helper.round4((double + ((java.lang.Math.double) / 2)))"},"variableMap":{"orientation":"min","java.lang.Math.PI":"dist"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:772","type":"CtAssignmentImpl","sourcecode":"double = double"},"status":-2},{"failures":[],"tindex":"7dd9d1d7-7911-11e5-846f-09c7d814c426","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.CmdArgs:62","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = java.lang.System.getProperty(java.lang.String)"},"variableMap":{"systemProperty":"key"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.StorableProperties:99","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = java.util.Map<java.lang.String, java.lang.String>.get(java.lang.String)"},"status":-2},{"failures":[],"tindex":"7dd9f8e8-7911-11e5-846f-7b03c432815c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.DistanceCalcEarth:107","type":"CtLocalVariableImpl","sourcecode":"double double = 360 / ((com.graphhopper.util.DistanceCalcEarth.double) / double)"},"variableMap":{"radiusInMeter":"b_lat","com.graphhopper.util.DistanceCalcEarth.C":"b_lat"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.util.DistanceCalcEarth:186","type":"CtLocalVariableImpl","sourcecode":"double double = double - double"},"status":-2},{"failures":[],"tindex":"7dd9f8e9-7911-11e5-846f-d1ff0cffd3da","series":0,"name":"replace","transplant":{"position":"com.graphhopper.storage.BaseGraph:476","type":"CtInvocationImpl","sourcecode":"com.graphhopper.util.EdgeIteratorState.setDistance(com.graphhopper.storage.BaseGraph.CommonEdgeIterator.getDistance()).setName(com.graphhopper.storage.BaseGraph.CommonEdgeIterator.getName()).setFlags(com.graphhopper.storage.BaseGraph.CommonEdgeIterator.getDirectFlags())"},"variableMap":{"from":"closestEdge","to":"closestEdge"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:155","type":"CtAssignmentImpl","sourcecode":"com.graphhopper.util.EdgeIteratorState = com.graphhopper.util.EdgeIteratorState.detach(true)"},"status":-2},{"failures":[],"tindex":"7dd9f8ea-7911-11e5-846f-d1744c427fab","series":0,"name":"add","transplant":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:189","type":"CtOperatorAssignmentImpl","sourcecode":"int *= 2"},"variableMap":{"index":"edgeId"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.QueryGraph:573","type":"CtAssignmentImpl","sourcecode":"int = com.graphhopper.routing.QueryGraph.getPosOfReverseEdge(int)"},"status":-2},{"failures":[],"tindex":"7dd9f8eb-7911-11e5-846f-59963c7b4523","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.index.LocationIndexTree:235","type":"CtInvocationImpl","sourcecode":"com.graphhopper.storage.index.LocationIndexTree.InMemConstructionIndex.prepare()"},"status":-2},{"failures":[],"tindex":"7dda1ffc-7911-11e5-846f-bdd57dc8f766","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.SimpleIntDeque:92","type":"CtReturnImpl","sourcecode":"return (int) - (int)"},"variableMap":{"endIndexPlusOne":"intVal","frontIndex":"intVal"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.dem.SRTMProvider:181","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[],"tindex":"7dda1ffd-7911-11e5-846f-cfbd7979d146","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:160","type":"CtAssignmentImpl","sourcecode":"boolean = com.graphhopper.storage.DataAccess.loadExisting()"},"variableMap":{"heights":"nodes","loadExisting":"frozen"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:188","type":"CtAssignmentImpl","sourcecode":"boolean = (com.graphhopper.storage.DataAccess.getHeader((9 * 4))) == 1"},"status":-2},{"failures":[],"tindex":"7dda1ffe-7911-11e5-846f-f53ef29d00f2","series":0,"name":"replace","transplant":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:614","type":"CtIfImpl","sourcecode":"if (java.lang.Double.isInfinite(double))\n    continue;\n"},"variableMap":{"existingDirectWeight":"longTripsSpeed"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:532","type":"CtIfImpl","sourcecode":"if (java.lang.Number != null) {\n    double double = (java.lang.Number.doubleValue()) / 1000;\n    double = java.lang.Math.round(((double / double) / 1.4));\n    if (double > com.graphhopper.routing.util.AbstractFlagEncoder.(getMaxSpeed()))\n        double = com.graphhopper.routing.util.AbstractFlagEncoder.getMaxSpeed();\n    \n    double = double;\n} "},"status":-2},{"failures":[],"tindex":"7dda1fff-7911-11e5-846f-7d684649eed5","series":0,"name":"add","transplant":{"position":"com.graphhopper.storage.DAType:152","type":"CtAssignmentImpl","sourcecode":"java.lang.String = \"UNSAFE\""},"variableMap":{"str":"minStr"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.AbstractFlagEncoder:495","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring((int + 1))"},"status":-2},{"failures":[],"tindex":"7dda4710-7911-11e5-846f-a7828846c169","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.ch.PrepareContractionHierarchies:346","type":"CtIfImpl","sourcecode":"if (int != int)\n    com.graphhopper.coll.GHTreeMapComposed.update(int, int, int);\n"},"status":-2},{"failures":[],"tindex":"7dda4711-7911-11e5-846f-f5b70cc268b6","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.Helper:447","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.reader.OSMElement:97","type":"CtInvocationImpl","sourcecode":"java.util.Map<java.lang.String, java.lang.Object>.clear()"},"status":-2},{"failures":[],"tindex":"7dda4712-7911-11e5-846f-7f0232df940c","series":0,"name":"replace","transplant":{"position":"com.graphhopper.util.StopWatch:79","type":"CtIfImpl","sourcecode":"if (!(com.graphhopper.util.Helper.isEmpty(java.lang.String))) {\n    java.lang.String += (java.lang.String) + \" \";\n} "},"variableMap":{"str":"highway","name":"highway"},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.util.BikeCommonFlagEncoder:599","type":"CtIfImpl","sourcecode":"if (com.graphhopper.reader.OSMWay.hasTag(\"bicycle\", java.util.Set<java.lang.String>)) {\n    if (boolean && (!(com.graphhopper.reader.OSMWay.hasTag(\"bicycle\", \"designated\"))))\n        com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\n    else\n        com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\n    \n} else if (\"cycleway\".equals(java.lang.String))\n    com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\nelse if (java.util.Set<java.lang.String>.contains(java.lang.String))\n    com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType = com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType.com.graphhopper.routing.util.BikeCommonFlagEncoder.WayType;\n"},"status":-2},{"failures":[],"tindex":"7dda6e23-7911-11e5-846f-c92307919b10","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.dem.CGIARProvider:186","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(2000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.routing.AbstractBidirAlgo:59","type":"CtInvocationImpl","sourcecode":"com.graphhopper.routing.AbstractRoutingAlgorithm.checkAlreadyRun()"},"status":-2},{"failures":[],"tindex":"7dda6e24-7911-11e5-846f-83806d53d25b","series":0,"name":"replace","transplant":{"position":"com.graphhopper.reader.PrinctonReader:65","type":"CtLocalVariableImpl","sourcecode":"double double = -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.graphhopper.storage.BaseGraph:897","type":"CtLocalVariableImpl","sourcecode":"double double = com.graphhopper.util.Helper.intToDegree(com.graphhopper.util.BitUtil.toInt(byte[], int))"},"status":-2}],"header":{"groupId":"com.graphhopper","transformationCount":20,"projectType":"maven","artifactId":"graphhopper-parent","generatorVersion":"1.0","version":"0.5.0"}}
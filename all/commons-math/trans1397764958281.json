[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (int == (int)) {\n    continue;\n} ","position":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer:1313","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.max(double, double)","position":"org.apache.commons.math3.analysis.function.Max:32","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((int & 1) == 0) {\n    double = org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.tanQ(double, double, false);\n} else {\n    double = -org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.tanQ(double, double, true));\n}","position":"org.apache.commons.math3.util.FastMath:2406","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = (double - (double[][int])) / ((double[][(int + 1)]) - (double[][int]))","position":"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction:321","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.math3.util.Decimal64.org.apache.commons.math3.util.Decimal64","position":"org.apache.commons.math3.util.Decimal64Field:55","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double double = 0","position":"org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution:100","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Available choices of update formulas for the &beta; parameter\n * in {@link NonLinearConjugateGradientOptimizer}.\n * <p>\n * The &beta; parameter is used to compute the successive conjugate\n * search directions. For non-linear conjugate gradients, there are\n * two formulas to compute &beta;:\n * <ul>\n * <li>Fletcher-Reeves formula<\/li>\n * <li>Polak-Ribi&egrave;re formula<\/li>\n * <\/ul>\n * On the one hand, the Fletcher-Reeves formula is guaranteed to converge\n * if the start point is close enough of the optimum whether the\n * Polak-Ribi&egrave;re formula may not converge in rare cases. On the\n * other hand, the Polak-Ribi&egrave;re formula is often faster when it\n * does converge. Polak-Ribi&egrave;re is often used.\n * <p>\n * @see NonLinearConjugateGradientOptimizer\n * @version $Id$\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 2.0\n */\n@java.lang.Deprecated\npublic enum ConjugateGradientFormula {\nFLETCHER_REEVES, POLAK_RIBIERE;}","position":"org.apache.commons.math3.optimization.general.ConjugateGradientFormula:43","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (int) ; int++) {\n    final int int = int[][int];\n    if ((int < 0) || (int >= (int[][int]))) {\n        throw new org.apache.commons.math3.exception.OutOfRangeException(int , 0 , ((int[][int]) - 1));\n    } \n    int += (int[][int]) * (int[][int]);\n}","position":"org.apache.commons.math3.util.MultidimensionalCounter:259","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{"yDotKLast":"yDotK","i":"i"},"name":"replace","transplant":{"sourceCode":"final double double = this.double[][][1][int]","position":"org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator:344","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = (double[][][1][int]) + (double[][][2][int])","position":"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:123","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{"inv":"sum","ort":"data","quat":"v"},"name":"replace","transplant":{"sourceCode":"T[][1] = T.multiply(T[][][0][1].add(T[][][1][0]))","position":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation:369","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"T = T.add(T[][][int][int].multiply(T[][int]))","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:447","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Object == this) {\n    return true;\n} ","position":"org.apache.commons.math3.linear.AbstractRealMatrix:930","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator.checkInterpolation()","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:204","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return -0.0","position":"org.apache.commons.math3.util.FastMath:2641","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.linear.RealMatrixPreservingVisitor.end()","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:519","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (int) ; ++int) {\n    int int = int[][int];\n    double[][int] = double[][int];\n}","position":"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:402","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>.start(org.apache.commons.math3.linear.Array2DRowFieldMatrix<T>.getRowDimension(), org.apache.commons.math3.linear.Array2DRowFieldMatrix<T>.getColumnDimension(), int, int, int, int)","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:492","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (double < double) {\n    double = double + double;\n    break;\n} ","position":"org.apache.commons.math3.distribution.PoissonDistribution:360","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = double","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:360","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final int int = int >> int","position":"org.apache.commons.math3.primes.SmallPrimes:152","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int < int ; ++int) {\n    double -= (double[][int]) * (double[][int]);\n}","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:341","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"-4.831068747037129E-118","position":"org.apache.commons.math3.util.FastMathLiteralArrays:2037","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][0][2] = ((double[][][0][0]) * (double[][][0][2])) + ((double[][][2][0]) * (double[][][2][2]))","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:210","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int int = 1","position":"org.apache.commons.math3.linear.OpenMapRealVector:708","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double * ((((-double) + 5) * double) - 1)","position":"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:118","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.math3.linear.FieldMatrix<T> = new org.apache.commons.math3.linear.Array2DRowFieldMatrix<T>(org.apache.commons.math3.Field<T> , int , int)","position":"org.apache.commons.math3.linear.FieldLUDecomposition:195","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = double[][].int","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:92","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"ntrits":"columns","state":"rows"},"name":"replace","transplant":{"sourceCode":"if (int == 0) {\n    int = 60;\n    break;\n} ","position":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer:1102","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.RealMatrixPreservingVisitor.start(int, int, 0, (int - 1), 0, (int - 1))","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:478","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(1 , 0 , 0)","position":"org.apache.commons.math3.geometry.euclidean.threed.Rotation:496","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.geometry.euclidean.threed.Vector3D","position":"org.apache.commons.math3.geometry.euclidean.threed.RotationOrder:158","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"+0.5381823778152466","position":"org.apache.commons.math3.util.FastMathLiteralArrays:5834","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] += (double[][int]) * double","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:179","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if ((int & 1) != 0) {\n    int *= int;\n} ","position":"org.apache.commons.math3.util.ArithmeticUtils:650","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.MatrixUtils.org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(this, int, int, int, int)","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:428","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"char char","position":"org.apache.commons.math3.fraction.AbstractFormat:163","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm.org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm.verifyInputArray(double[], double[])","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm:105","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"double += double * double","position":"org.apache.commons.math3.linear.OpenMapRealVector:434","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int <= int ; ++int) {\n    for (int int = int ; int <= int ; ++int) {\n        final T[] T[] = T[][][int];\n        T[][int] = org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>.visit(int, int, T[][int]);\n    }\n}","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:559","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"int += (400 - int) % 4","position":"org.apache.commons.math3.dfp.DfpField:545","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int = 0","position":"org.apache.commons.math3.random.AbstractWell:168","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (double == 0) {\n    double = double * double;\n} ","position":"org.apache.commons.math3.util.FastMath:2958","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (double[].int) ; ++int) {\n    double[][int] = (double[][int]) - (double * (double[][][0][int]));\n}","position":"org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator:92","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.math.BigDecimal = java.math.BigDecimal.java.math.BigDecimal","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:140","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.math.BigDecimal = java.math.BigDecimal","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:162","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair","position":"org.apache.commons.math3.optimization.univariate.BrentOptimizer:308","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][1][0] += (((double[][0]) * (double[][][1][0])) + ((double[][1]) * (double[][][1][0]))) + ((double[][2]) * (double[][][1][0]))","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:228","type":"CtOperatorAssignmentImpl"},"status":-2},{"transformationPoint":"org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator:107","failures":[],"name":"math","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if ((double[][(int + 1)]) < 0) {\n    double[][int] = -(double[][int]);\n} ","position":"org.apache.commons.math3.linear.SingularValueDecomposition:166","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.System.java.lang.System.arraycopy(double[], int, double[], 0, int)","position":"org.apache.commons.math3.ode.EquationsMapper:80","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"break","position":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer:2015","type":"CtBreakImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.org.apache.commons.math3.linear.RealMatrix = null","position":"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression:71","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * This enumeration defines the type of transform which is to be computed.\n * \n * @since 3.0\n * @version $Id$\n */\npublic enum TransformType {\nFORWARD, INVERSE;}","position":"org.apache.commons.math3.transform.TransformType:25","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.stat.inference.MannWhitneyUTest.ensureDataConformance(double[], double[])","position":"org.apache.commons.math3.stat.inference.MannWhitneyUTest:226","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return ((-0.5) * double) * double","position":"org.apache.commons.math3.util.FastMath:484","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return double","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm:192","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum for tree skew factor.\n */\nprivate static enum Skew {\nLEFT_HIGH, RIGHT_HIGH, BALANCED;}","position":"org.apache.commons.math3.geometry.partitioning.utilities.AVLTree:202","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((double[] == null) || (double[] == null)) {\n    throw new org.apache.commons.math3.exception.NullArgumentException();\n} ","position":"org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest:78","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"+2.133604049682617","position":"org.apache.commons.math3.util.FastMathLiteralArrays:3820","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][int][int] += double","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:324","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.stat.descriptive.moment.Mean[][int] = new org.apache.commons.math3.stat.descriptive.moment.Mean()","position":"org.apache.commons.math3.stat.descriptive.moment.VectorialMean:43","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"double double = (2.0 * double) * double","position":"org.apache.commons.math3.distribution.SaddlePointExpansion:152","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = ((((org.apache.commons.math3.geometry.euclidean.twod.Vector2D.getX()) - (org.apache.commons.math3.geometry.euclidean.twod.Vector2D.getX())) * double) + (((org.apache.commons.math3.geometry.euclidean.twod.Vector2D.getY()) - (org.apache.commons.math3.geometry.euclidean.twod.Vector2D.getY())) * double)) / ((double * double) + (double * double))","position":"org.apache.commons.math3.geometry.euclidean.twod.Segment:87","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.math3.ode.nonstiff.GillStepInterpolator(this)","position":"org.apache.commons.math3.ode.nonstiff.GillStepInterpolator:94","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator(this)","position":"org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator:90","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"long = long & 4294967295L","position":"org.apache.commons.math3.util.FastMath:2102","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return double[]","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:366","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final double double = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getX()","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:249","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final T T = T.subtract(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getY()).abs()","position":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D:821","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"while (!(java.util.SortedSet<org.apache.commons.math3.ode.events.EventState>.isEmpty())) {\n    final java.util.Iterator<org.apache.commons.math3.ode.events.EventState> java.util.Iterator<org.apache.commons.math3.ode.events.EventState> = java.util.SortedSet<org.apache.commons.math3.ode.events.EventState>.iterator();\n    final org.apache.commons.math3.ode.events.EventState org.apache.commons.math3.ode.events.EventState = java.util.Iterator<org.apache.commons.math3.ode.events.EventState>.next();\n    java.util.Iterator<org.apache.commons.math3.ode.events.EventState>.remove();\n    final double double = org.apache.commons.math3.ode.events.EventState.getEventTime();\n    org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.setSoftPreviousTime(double);\n    org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.setSoftCurrentTime(double);\n    org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.setInterpolatedTime(double);\n    final double[] double[] = new double[double[].int];\n    org.apache.commons.math3.ode.ExpandableStatefulODE.getPrimaryMapper().insertEquationData(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.getInterpolatedState(), double[]);\n    int int = 0;\n    for (org.apache.commons.math3.ode.EquationsMapper org.apache.commons.math3.ode.EquationsMapper : org.apache.commons.math3.ode.ExpandableStatefulODE.getSecondaryMappers()) {\n        org.apache.commons.math3.ode.EquationsMapper.insertEquationData(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.getInterpolatedSecondaryState(int++), double[]);\n    }\n    for (final org.apache.commons.math3.ode.events.EventState org.apache.commons.math3.ode.events.EventState : java.util.Collection<org.apache.commons.math3.ode.events.EventState>) {\n        org.apache.commons.math3.ode.events.EventState.stepAccepted(double, double[]);\n        boolean = (boolean) || (org.apache.commons.math3.ode.events.EventState.stop());\n    }\n    for (final org.apache.commons.math3.ode.sampling.StepHandler org.apache.commons.math3.ode.sampling.StepHandler : java.util.Collection<org.apache.commons.math3.ode.sampling.StepHandler>) {\n        org.apache.commons.math3.ode.sampling.StepHandler.handleStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator, boolean);\n    }\n    if (boolean) {\n        java.lang.System.java.lang.System.arraycopy(double[], 0, double[], 0, double[].int);\n        return double;\n    } \n    boolean boolean = false;\n    for (final org.apache.commons.math3.ode.events.EventState org.apache.commons.math3.ode.events.EventState : java.util.Collection<org.apache.commons.math3.ode.events.EventState>) {\n        boolean = boolean || (org.apache.commons.math3.ode.events.EventState.reset(double, double[]));\n    }\n    if (boolean) {\n        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.setInterpolatedTime(double);\n        java.lang.System.java.lang.System.arraycopy(double[], 0, double[], 0, double[].int);\n        org.apache.commons.math3.ode.AbstractIntegrator.computeDerivatives(double, double[], double[]);\n        boolean = true;\n        return double;\n    } \n    double = double;\n    org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.setSoftPreviousTime(double);\n    org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.setSoftCurrentTime(double);\n    if (org.apache.commons.math3.ode.events.EventState.evaluateStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator)) {\n        java.util.SortedSet<org.apache.commons.math3.ode.events.EventState>.add(org.apache.commons.math3.ode.events.EventState);\n    } \n}","position":"org.apache.commons.math3.ode.AbstractIntegrator:346","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.apache.commons.math3.optim.OptimizationData[][int]) instanceof org.apache.commons.math3.optim.MaxEval) {\n    org.apache.commons.math3.optim.OptimizationData[][int] = null;\n    int = int;\n} ","position":"org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer:147","type":"CtIfImpl"},"status":-2},{"transformationPoint":"org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor:43","failures":[],"name":"returnValue","type":"mutation","nodeType":"CtReturnImpl","status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.finalizeStep()","position":"org.apache.commons.math3.ode.sampling.AbstractStepInterpolator:550","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double[][][2][int]","position":"org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator:186","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final int int = org.apache.commons.math3.linear.Array2DRowRealMatrix.getRowDimension()","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:221","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.apache.commons.math3.analysis.differentiation.DerivativeStructure org.apache.commons.math3.analysis.differentiation.DerivativeStructure = org.apache.commons.math3.analysis.solvers.AbstractUnivariateDifferentiableSolver.computeObjectiveValueAndDerivative(double)","position":"org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver:84","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * This enumeration defines the various types of normalizations that can be\n * applied to discrete sine transforms (DST). The exact definition of these\n * normalizations is detailed below.\n * \n * @see FastSineTransformer\n * @version $Id$\n * @since 3.0\n */\npublic enum DstNormalization {\nSTANDARD_DST_I, ORTHOGONAL_DST_I;}","position":"org.apache.commons.math3.transform.DstNormalization:28","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.lang.System.java.lang.System.arraycopy(T[][][int], 0, T[][][int], 0, T[][][int].int);\n}","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:594","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{"mant":"orders","lsd":"j"},"name":"replace","transplant":{"sourceCode":"int[][(int - 1)] %= 1000","position":"org.apache.commons.math3.dfp.DfpDec:201","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int[][int] = 0","position":"org.apache.commons.math3.analysis.differentiation.JacobianFunction:62","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>.visit(int, int, T[][int])","position":"org.apache.commons.math3.linear.BlockFieldMatrix:1457","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][2][0] += ((double[][0]) * (double[][][2][0])) + ((double[][2]) * (double[][][2][0]))","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:229","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return ((2 * (double * double)) * ((double + double) - 2)) / ((double * (double * double)) * (double - 4))","position":"org.apache.commons.math3.distribution.FDistribution:259","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.analysis.function.Sigmoid.org.apache.commons.math3.analysis.function.Sigmoid.value(double, double, double)","position":"org.apache.commons.math3.analysis.function.Sigmoid:78","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"+0.11168810725212097","position":"org.apache.commons.math3.util.FastMathLiteralArrays:5225","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = (double[][int]) + ((double[][int]) * (org.apache.commons.math3.random.NormalizedRandomGenerator.nextNormalizedDouble()))","position":"org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator:86","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"double[] = new double[int]","position":"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:304","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics.getCovariance()","position":"org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics:121","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.math3.util.Precision.((float)(org.apache.commons.math3.util.Precision.roundUnscaled((float * float), float, int))) / float","position":"org.apache.commons.math3.util.Precision:438","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.apache.commons.math3.exception.NumberIsTooLargeException(int , 30 , true)","position":"org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest:315","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"long |= 4503599627370496L","position":"org.apache.commons.math3.util.FastMath:2017","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = 1.0 / (double - (java.util.List<java.lang.Double>.get((int - (int + 1)))))","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:106","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"y0":"oneMinusThetaH","x0":"oneMinusThetaH","y1":"oneMinusThetaH","x1":"oneMinusThetaH"},"name":"replace","transplant":{"sourceCode":"final double double = (double * double) - (double * double)","position":"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:554","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double / 6.0","position":"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:117","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"double[][] double[][] = new double[int][int]","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:143","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = int >= int ? 0 : 1","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:95","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"columns":"length","key":"length"},"name":"add","transplant":{"sourceCode":"final int int = int / (this.int)","position":"org.apache.commons.math3.linear.OpenMapRealMatrix:190","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = double[].int","position":"org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance:85","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"yDotK":"yDotK","i":"i"},"name":"add","transplant":{"sourceCode":"final double double = double[][][1][int]","position":"org.apache.commons.math3.ode.nonstiff.GillStepInterpolator:120","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double[][][0][int]","position":"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:107","type":"CtLocalVariableImpl"},"status":-2},{"transformationPoint":"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction:215","failures":[],"name":"negateConditional","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (double[].int) ; ++int) {\n    final int int = int + 5;\n    double[][int] = 1.0 / (int * int);\n    final double double = 0.5 * org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.sqrt((((double)((int + 1))) / int)));\n    for (int int = 0 ; int <= int ; ++int) {\n        double[][int] *= double / (int + 1);\n    }\n}","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:216","type":"CtForImpl"},"status":0},{"failures":[],"variableMapping":{"ntrits":"nCols","state":"column"},"name":"add","transplant":{"sourceCode":"if (int == 0) {\n    int = 60;\n    break;\n} ","position":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer:1102","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (T[][].int) ; ++int) {\n    if ((T[][][int].int) != int) {\n        throw new org.apache.commons.math3.exception.DimensionMismatchException(int , T[][][int].int);\n    } \n    java.lang.System.java.lang.System.arraycopy(T[][][int], 0, T[][][(int + int)], int, int);\n}","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:350","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (!(this.boolean[][int])) {\n    double += ((double[][int]) * (double[][int])) / (double[][int]);\n} ","position":"org.apache.commons.math3.stat.regression.MillerUpdatingRegression:523","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return double[][]","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:534","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-1","position":"org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer:59","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int / (org.apache.commons.math3.linear.BlockRealMatrix.int) ; int < (1 + (int / (org.apache.commons.math3.linear.BlockRealMatrix.int))) ; ++int) {\n    final int int = org.apache.commons.math3.linear.BlockRealMatrix.blockWidth(int);\n    final int int = int * (org.apache.commons.math3.linear.BlockRealMatrix.int);\n    final int int = org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.max(int, int);\n    final int int = org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.min(((int + 1) * (org.apache.commons.math3.linear.BlockRealMatrix.int)), (1 + int));\n    final double[] double[] = double[][][((int * (int)) + int)];\n    for (int int = int ; int < int ; ++int) {\n        int int = (((int - int) * int) + int) - int;\n        for (int int = int ; int < int ; ++int) {\n            double[][int] = org.apache.commons.math3.linear.RealMatrixChangingVisitor.visit(int, int, double[][int]);\n            ++int;\n        }\n    }\n}","position":"org.apache.commons.math3.linear.BlockRealMatrix:1516","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{"p":"mCol","k":"nCols"},"name":"add","transplant":{"sourceCode":"if (int > 2) {\n    double[][(int - 2)] = ((int - 1) * (double[][(int - 1)])) - ((int - 3) * (double[][(int - 3)]));\n} else if (int == 2) {\n    double[][0] = double[][1];\n} ","position":"org.apache.commons.math3.analysis.differentiation.DSCompiler:1562","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    for (int int = 0 ; int < int ; int++) {\n        double[][int] = double[][][int][int];\n    }\n    for (int int = 0 ; int < int ; int++) {\n        final double[] double[] = double[][][int];\n        double double = 0;\n        for (int int = 0 ; int < int ; int++) {\n            double += (double[][int]) * (double[][int]);\n        }\n        double[][][int][int] = double;\n    }\n}","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:231","type":"CtForImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"-3.343201925128334E60","position":"org.apache.commons.math3.util.FastMathLiteralArrays:2442","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = (((((double[][int]) + (double * double)) + (double * double)) + (double * double)) + (double * double)) + (double * double)","position":"org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator:93","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (double[][] == null) {\n    throw new org.apache.commons.math3.exception.NullArgumentException();\n} ","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:105","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int - 1 ; int >= 0 ; int--) {\n    org.apache.commons.math3.analysis.differentiation.DerivativeStructure = org.apache.commons.math3.analysis.differentiation.DerivativeStructure.subtract(double[][int]).multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure).add(double[][int]);\n}","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm:109","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (((double) < double) && (double <= (double))) {\n    double double = 2 * ((double) - double);\n    double double = ((double) - (double)) * ((double) - (double));\n    return double / double;\n} ","position":"org.apache.commons.math3.distribution.TriangularDistribution:153","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return double","position":"org.apache.commons.math3.optim.linear.LinearObjectiveFunction:86","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * This enumeration defines the various types of normalizations that can be\n * applied to discrete sine transforms (DST). The exact definition of these\n * normalizations is detailed below.\n * \n * @see FastSineTransformer\n * @version $Id$\n * @since 3.0\n */\npublic enum DstNormalization {\nSTANDARD_DST_I, ORTHOGONAL_DST_I;}","position":"org.apache.commons.math3.transform.DstNormalization:28","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int <= int ; ++int) {\n    org.apache.commons.math3.linear.RealMatrixPreservingVisitor.visit(int, int, double[][int]);\n}","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:451","type":"CtForImpl"},"status":-2},{"transformationPoint":"org.apache.commons.math3.geometry.euclidean.oned.Interval:100","failures":[],"name":"math","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex , org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex , org.apache.commons.math3.geometry.euclidean.twod.Line))","position":"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:205","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest.calculateAsymptoticPValue(double, int)","position":"org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest:322","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"exp":"currentDegree"},"name":"add","transplant":{"sourceCode":"(this.int)--","position":"org.apache.commons.math3.dfp.Dfp:675","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int = int","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:393","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (int int = 0 ; int <= int ; int++) {\n    org.apache.commons.math3.linear.Array2DRowRealMatrix.setEntry(int, int, ((org.apache.commons.math3.linear.Array2DRowRealMatrix.getEntry(int, int)) + (double * (org.apache.commons.math3.linear.ArrayRealVector.getEntry(int)))));\n}","position":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer:610","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (((java.math.BigDecimal.signum()) * (java.math.BigDecimal.signum())) <= 0) {\n    java.math.BigDecimal = java.math.BigDecimal;\n    java.math.BigDecimal = java.math.BigDecimal;\n    java.math.BigDecimal = java.math.BigDecimal;\n} else {\n    java.math.BigDecimal = java.math.BigDecimal;\n    java.math.BigDecimal = java.math.BigDecimal;\n    java.math.BigDecimal = java.math.BigDecimal;\n}","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:160","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"lastNorm":"small","rNorm":"small","dropThreshold":"small","thisNorm":"small"},"name":"add","transplant":{"sourceCode":"if ((double == 0) || (((double / double) * double) < double)) {\n    break;\n} ","position":"org.apache.commons.math3.linear.RRQRDecomposition:176","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int < int ; ++int) {\n    if ((double[][][int[][int]][int[][int]]) < (-double)) {\n        throw new org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException(double[][][int[][int]][int[][int]] , int , double);\n    } \n}","position":"org.apache.commons.math3.linear.RectangularCholeskyDecomposition:127","type":"CtForImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new org.apache.commons.math3.exception.DimensionMismatchException(double[][][int].int , int)","position":"org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction:144","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][1][0] += (((double[][0]) * (double[][][1][0])) + ((double[][1]) * (double[][][1][0]))) + ((double[][2]) * (double[][][1][0]))","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:228","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"min":"theta","diff":"s"},"name":"add","transplant":{"sourceCode":"final double double = double + (0.5 * double)","position":"org.apache.commons.math3.analysis.integration.MidPointIntegrator:149","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = (3 * double) * double","position":"org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator:109","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"+0.2539151906967163","position":"org.apache.commons.math3.util.FastMathLiteralArrays:5400","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = org.apache.commons.math3.linear.Array2DRowFieldMatrix<T>.getColumnDimension()","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:263","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"double double = (double[][][int][int]) - double","position":"org.apache.commons.math3.linear.EigenDecomposition:809","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double += double[][int]","position":"org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest:188","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"nordsieck":"this"},"name":"replace","transplant":{"sourceCode":"final int int = (org.apache.commons.math3.linear.Array2DRowRealMatrix.getRowDimension()) - 1","position":"org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator:219","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = org.apache.commons.math3.linear.Array2DRowRealMatrix.getColumnDimension()","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:353","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"+1.6422934532165527","position":"org.apache.commons.math3.util.FastMathLiteralArrays:3552","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = (((double[][int]) + (double * double)) + (double * double)) + (double * double)","position":"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:110","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"totalEvaluations":"i","maxEvalIndex":"i","maxEval":"i","optimData":"optimData"},"name":"add","transplant":{"sourceCode":"this.org.apache.commons.math3.optim.OptimizationData[][int] = new org.apache.commons.math3.optim.MaxEval((int - int))","position":"org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer:180","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.optim.OptimizationData[][int] = null","position":"org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer:152","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"double double = double[][2]","position":"org.apache.commons.math3.geometry.euclidean.threed.Rotation:950","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int < (double[].int) ; ++int) {\n    final double double;\n    if ((double[][int]) < (double[][int])) {\n        double = (double[][int]) * ((double[][int]) - (double[][int]));\n    } else if ((double[][int]) > (double[][int])) {\n        double = (double[][int]) * ((double[][int]) - (double[][int]));\n    } else {\n        double = 0;\n    }\n    double += org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.sqrt(double);\n}","position":"org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter:168","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return new org.apache.commons.math3.stat.regression.RegressionResults(double[] , new double[][]{ double[] } , true , long , 1 , java.lang.Double.double , java.lang.Double.double , java.lang.Double.double , false , false)","position":"org.apache.commons.math3.stat.regression.SimpleRegression:877","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.math.BigDecimal = java.math.BigDecimal","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:162","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"+2.528773307800293","position":"org.apache.commons.math3.util.FastMathLiteralArrays:3994","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double /= double * (double[][(int + 1)])","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:305","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"+0.21135559678077698","position":"org.apache.commons.math3.util.FastMathLiteralArrays:5345","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = 1.0 / (int * int)","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:218","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"householderVectors":"data","h":"data","i":"endRow","m":"startColumn"},"name":"add","transplant":{"sourceCode":"for (int int = int ; int < int ; ++int) {\n    double[][][int][int] = this.double[][][int][int];\n}","position":"org.apache.commons.math3.linear.HessenbergTransformer:154","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int <= int ; ++int) {\n    final double[] double[] = double[][][int];\n    for (int int = int ; int <= int ; ++int) {\n        double[][int] = org.apache.commons.math3.linear.RealMatrixChangingVisitor.visit(int, int, double[][int]);\n    }\n}","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:431","type":"CtForImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"while (int < (int - 3)) {\n    T = T.add(T[][int].multiply(T[][int])).add(T[][(int + 1)].multiply(T[][(int + int)])).add(T[][(int + 2)].multiply(T[][(int + int)])).add(T[][(int + 3)].multiply(T[][(int + int)]));\n    int += 4;\n    int += int;\n}","position":"org.apache.commons.math3.linear.BlockFieldMatrix:600","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < int ; ++int) {\n    T = T.add(T[][][int][int].multiply(T[][int]));\n}","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:446","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"this.double[] = double[]","position":"org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator:135","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[] = double[]","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:113","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final int int = org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.max(int, int)","position":"org.apache.commons.math3.linear.BlockRealMatrix:818","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = double","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:296","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return 0.5 * ((double) + (double))","position":"org.apache.commons.math3.geometry.euclidean.oned.Interval:100","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (double) - (double)","position":"org.apache.commons.math3.geometry.euclidean.oned.Interval:83","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.RuntimeException java.lang.RuntimeException = null","position":"org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer:164","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<T> java.util.List<T> = java.util.Collections.java.util.Collections.unmodifiableList(new java.util.ArrayList<T>(java.util.Collection<T>))","position":"org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer:292","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return -1.0","position":"org.apache.commons.math3.util.FastMath:604","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.stat.inference.TestUtils.org.apache.commons.math3.stat.inference.GTest.gDataSetsComparison(long[], long[])","position":"org.apache.commons.math3.stat.inference.TestUtils:416","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"j":"index","perturb":"index"},"name":"add","transplant":{"sourceCode":"return (((int << 2) + int) + int) + 1","position":"org.apache.commons.math3.util.OpenIntToDoubleHashMap:323","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Integer[][int].intValue()","position":"org.apache.commons.math3.exception.MultiDimensionMismatchException:89","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates.computeHessians()","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:198","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double /= (double[][(int - int)]) * (double[][(int - int)])","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:114","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"+1.372187614440918","position":"org.apache.commons.math3.util.FastMathLiteralArrays:3368","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = (((double * double) + (double * double)) + (double * double)) + (double * double)","position":"org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator:118","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"double[][int] = (double - double) + (double - double)","position":"org.apache.commons.math3.transform.FastFourierTransformer:282","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((double[][int]) > 0) {\n    double += double[][int];\n} ","position":"org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest:187","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"double[][][int][int] = double[][int]","position":"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:350","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator.double[][].int) ; ++int) {\n    double[][][int] = org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator.double[][][int].clone();\n}","position":"org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator:92","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"+1.5762965679168701","position":"org.apache.commons.math3.util.FastMathLiteralArrays:3510","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = (double[][int]) - (double[][int])","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:255","type":"CtLocalVariableImpl"},"status":-2},{"transformationPoint":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:326","failures":[],"name":"math","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"double += org.apache.commons.math3.linear.RealMatrix.getEntry(int, int)","position":"org.apache.commons.math3.optimization.direct.CMAESOptimizer:1216","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.exception.util.ExceptionContext","position":"org.apache.commons.math3.exception.MathIllegalStateException:74","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm:215","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"for (int int = int ; int < int ; ++int) {\n    final double double = double[][][int][int];\n    double += double * double;\n}","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:265","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int < (int - 1)) {\n    double = 0;\n    for (int int = int + 1 ; int < int ; ++int) {\n        final double double = double[][int];\n        double += double * double;\n    }\n    final double double = (double[][(int + 1)]) > 0 ? -org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.sqrt(double)) : org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.sqrt(double);\n    double[][int] = double;\n    if (double != 0.0) {\n        double[][(int + 1)] -= double;\n        for (int int = int + 1 ; int < int ; ++int) {\n            final double[] double[] = double[][][int];\n            double double = 0;\n            for (int int = int + 1 ; int < int ; ++int) {\n                double -= (double[][int]) * (double[][int]);\n            }\n            double /= double * (double[][(int + 1)]);\n            for (int int = int + 1 ; int < int ; ++int) {\n                double[][int] -= double * (double[][int]);\n            }\n        }\n    } \n} ","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:288","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"double += (double[][int]) * (double[][int])","position":"org.apache.commons.math3.linear.TriDiagonalTransformer:233","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (double[].int) ; ++int) {\n    final double double = double[][][0][int];\n    final double double = double[][][1][int];\n    double[][int] = ((double[][int]) + (double * double)) + (double * double);\n    double[][int] = (double * double) + (double * double);\n}","position":"org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator:95","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int--","position":"org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP:357","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.apache.commons.math3.exception.DimensionMismatchException(int , double[][][].int)","position":"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction:159","type":"CtThrowImpl"},"status":-2},{"failureDictionary":{}}]

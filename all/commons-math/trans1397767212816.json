[{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final int int = org.apache.commons.math3.linear.Array2DRowFieldMatrix<T>.getColumnDimension()","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:525","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.analysis.polynomials.PolynomialFunction org.apache.commons.math3.analysis.polynomials.PolynomialFunction = org.apache.commons.math3.analysis.interpolation.HermiteInterpolator.polynomial(1)","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:142","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"+8.948877445235827E-8","position":"org.apache.commons.math3.util.FastMathLiteralArrays:4545","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.System.java.lang.System.arraycopy(T[][][int], 0, T[][][int], 0, T[][][int].int)","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:595","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.abs(double)) > 0.001) {\n    org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] = ((org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet)(org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>.getRemainingRegion())).getVertices();\n    if ((double < 0) ^ boolean) {\n        final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][].int][];\n        for (int int = 0 ; int < (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][].int) ; ++int) {\n            final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] = org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][][int];\n            final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[org.apache.commons.math3.geometry.euclidean.twod.Vector2D[].int];\n            if ((org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][0]) == null) {\n                org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][0] = null;\n                for (int int = 1 ; int < (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[].int) ; ++int) {\n                    org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][int] = org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][((org.apache.commons.math3.geometry.euclidean.twod.Vector2D[].int) - int)];\n                }\n            } else {\n                for (int int = 0 ; int < (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[].int) ; ++int) {\n                    org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][int] = org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][((org.apache.commons.math3.geometry.euclidean.twod.Vector2D[].int) - (int + 1))];\n                }\n            }\n            org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][][int] = org.apache.commons.math3.geometry.euclidean.twod.Vector2D[];\n        }\n        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] = org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][];\n    } \n    final java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>> java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>> = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>>();\n    for (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] : org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][]) {\n        final boolean boolean = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][0]) != null;\n        int int = boolean ? (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[].int) - 1 : 1;\n        org.apache.commons.math3.geometry.euclidean.threed.Vector3D org.apache.commons.math3.geometry.euclidean.threed.Vector3D = org.apache.commons.math3.geometry.euclidean.threed.Plane.toSpace(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][int]);\n        int int = (int + 1) % (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[].int);\n        org.apache.commons.math3.geometry.euclidean.twod.Vector2D org.apache.commons.math3.geometry.euclidean.twod.Vector2D = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D) , org.apache.commons.math3.geometry.euclidean.threed.Vector3D.dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D));\n        while (int < (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[].int)) {\n            final org.apache.commons.math3.geometry.euclidean.threed.Vector3D org.apache.commons.math3.geometry.euclidean.threed.Vector3D = org.apache.commons.math3.geometry.euclidean.threed.Plane.toSpace(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][int]);\n            final org.apache.commons.math3.geometry.euclidean.twod.Vector2D org.apache.commons.math3.geometry.euclidean.twod.Vector2D = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D) , org.apache.commons.math3.geometry.euclidean.threed.Vector3D.dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D));\n            final org.apache.commons.math3.geometry.euclidean.twod.Line org.apache.commons.math3.geometry.euclidean.twod.Line = new org.apache.commons.math3.geometry.euclidean.twod.Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D , org.apache.commons.math3.geometry.euclidean.twod.Vector2D);\n            org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> = org.apache.commons.math3.geometry.euclidean.twod.Line.wholeHyperplane();\n            if (boolean || (int != 1)) {\n                final double double = (org.apache.commons.math3.geometry.euclidean.twod.Line.getAngle()) + (0.5 * (org.apache.commons.math3.util.FastMath.double));\n                final org.apache.commons.math3.geometry.euclidean.twod.Line org.apache.commons.math3.geometry.euclidean.twod.Line = new org.apache.commons.math3.geometry.euclidean.twod.Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D , double);\n                org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> = org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>.split(org.apache.commons.math3.geometry.euclidean.twod.Line).getPlus();\n            } \n            if (boolean || (int != ((org.apache.commons.math3.geometry.euclidean.twod.Vector2D[].int) - 1))) {\n                final double double = (org.apache.commons.math3.geometry.euclidean.twod.Line.getAngle()) + (0.5 * (org.apache.commons.math3.util.FastMath.double));\n                final org.apache.commons.math3.geometry.euclidean.twod.Line org.apache.commons.math3.geometry.euclidean.twod.Line = new org.apache.commons.math3.geometry.euclidean.twod.Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D , double);\n                org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> = org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>.split(org.apache.commons.math3.geometry.euclidean.twod.Line).getMinus();\n            } \n            java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>>.add(org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>);\n            int = int++;\n            org.apache.commons.math3.geometry.euclidean.threed.Vector3D = org.apache.commons.math3.geometry.euclidean.threed.Vector3D;\n            org.apache.commons.math3.geometry.euclidean.twod.Vector2D = org.apache.commons.math3.geometry.euclidean.twod.Vector2D;\n        }\n    }\n    final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet(java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>>);\n    org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet = ((org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet)(new org.apache.commons.math3.geometry.partitioning.RegionFactory<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>().union(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet)));\n} ","position":"org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor:168","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.apache.commons.math3.util.Pair<java.lang.Double, org.apache.commons.math3.distribution.MultivariateNormalDistribution>>.add(new org.apache.commons.math3.util.Pair<java.lang.Double, org.apache.commons.math3.distribution.MultivariateNormalDistribution>(double[][int] , org.apache.commons.math3.distribution.MultivariateNormalDistribution))","position":"org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution:92","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"double[] = new double[int - 4]","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:215","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[] = new double[int + 1]","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm:202","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"observations":"observations"},"name":"replace","transplant":{"sourceCode":"return java.util.List<org.apache.commons.math3.fitting.WeightedObservedPoint>","position":"org.apache.commons.math3.fitting.GaussianCurveFitter:280","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new java.util.ArrayList<org.apache.commons.math3.fitting.WeightedObservedPoint>(java.util.List<org.apache.commons.math3.fitting.WeightedObservedPoint>)","position":"org.apache.commons.math3.fitting.WeightedObservedPoints:104","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-1.2522542401353875E-9","position":"org.apache.commons.math3.util.FastMathLiteralArrays:5833","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.random.RandomDataGenerator.nextGaussian(double, double)","position":"org.apache.commons.math3.random.RandomDataImpl:218","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final double double = (org.apache.commons.math3.util.MathArrays.int) * double","position":"org.apache.commons.math3.util.MathArrays:928","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.random.RandomGenerator.nextGaussian()","position":"org.apache.commons.math3.random.RandomAdaptor:129","type":"CtReturnImpl"},"status":-2},{"transformationPoint":"org.apache.commons.math3.random.AbstractWell:116","failures":[],"name":"removeConditional","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"final int int = 31","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunction:368","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = java.text.ParsePosition.getIndex()","position":"org.apache.commons.math3.fraction.AbstractFormat:158","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Double.double","position":"org.apache.commons.math3.util.FastMath:1494","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return double","position":"org.apache.commons.math3.geometry.euclidean.oned.Interval:49","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int++","position":"org.apache.commons.math3.dfp.Dfp:2136","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = (org.apache.commons.math3.util.Pair<java.lang.Double, T>.getFirst()) / double","position":"org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution:93","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"final double double = (1 << int) - 1","position":"org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver:240","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = (double[][int]) * double","position":"org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator:206","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"+1.5548923015594482","position":"org.apache.commons.math3.util.FastMathLiteralArrays:3496","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double += (double == 0.0) && (double == 0.0) ? 0.0 : double / double","position":"org.apache.commons.math3.ml.distance.CanberraDistance:38","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction = org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction[][][int][int]","position":"org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction:293","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.apache.commons.math3.linear.SparseFieldMatrix:147","type":"CtReturnImpl"},"status":-2},{"transformationPoint":"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction:215","failures":[],"name":"negateConditional","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":0},{"failures":[],"variableMapping":{"org.apache.commons.math3.special.Gamma.C_LIMIT":"x","x":"x","this":"this"},"name":"add","transplant":{"sourceCode":"if (double >= double) {\n    double double = 1 / (double * double);\n    return ((org.apache.commons.math3.util.FastMath.log(double)) - (0.5 / double)) - (double * ((1.0 / 12) + (double * ((1.0 / 120) - (double / 252)))));\n} ","position":"org.apache.commons.math3.special.Gamma:452","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.log(double)","position":"org.apache.commons.math3.analysis.function.Log:36","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.util.ConcurrentModificationException()","position":"org.apache.commons.math3.util.OpenIntToDoubleHashMap:544","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.apache.commons.math3.exception.NullArgumentException()","position":"org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest:80","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"+1.0187183636134904E-106","position":"org.apache.commons.math3.util.FastMathLiteralArrays:2058","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = double * ((double[][int]) - (double[][int]))","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:111","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final double double = 0.01745329052209854","position":"org.apache.commons.math3.util.FastMath:2951","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.exp(-(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.getValue()))","position":"org.apache.commons.math3.analysis.function.Sigmoid:172","type":"CtLocalVariableImpl"},"status":-2},{"transformationPoint":"org.apache.commons.math3.genetics.FixedGenerationCount:57","failures":[],"name":"conditionalBoundary","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator.reinitialize(double, double, double[], org.apache.commons.math3.linear.Array2DRowRealMatrix)","position":"org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator:297","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = T[][].int","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:340","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Describes the type of iteration performed by the\n * {@link #iterator() iterator}.\n */\npublic static enum IterationOrder {\nLEXICOGRAPHIC;}","position":"org.apache.commons.math3.util.Combinations:43","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.text.NumberFormat.setMaximumFractionDigits(0)","position":"org.apache.commons.math3.fraction.AbstractFormat:93","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"int int = 2","position":"org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator:125","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = 0","position":"org.apache.commons.math3.util.MultidimensionalCounter:224","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"stepSize":"c23","factor":"org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.ONE_MINUS_INV_SQRT_2"},"name":"replace","transplant":{"sourceCode":"final double double = double * double","position":"org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator:301","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double * (org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.double)","position":"org.apache.commons.math3.ode.nonstiff.GillStepInterpolator:132","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"-2.394588390685223E199","position":"org.apache.commons.math3.util.FastMathLiteralArrays:2763","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double -= (double[][int]) * (double[][int])","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:278","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.math3.geometry.partitioning.BSPTree<S>.org.apache.commons.math3.geometry.partitioning.BSPTree<S> = new org.apache.commons.math3.geometry.partitioning.BSPTree<S>(org.apache.commons.math3.geometry.partitioning.SubHyperplane<S>.copySelf() , org.apache.commons.math3.geometry.partitioning.BSPTree<S>.copySelf() , org.apache.commons.math3.geometry.partitioning.BSPTree<S>.org.apache.commons.math3.geometry.partitioning.BSPTree<S> , java.lang.Object)","position":"org.apache.commons.math3.geometry.partitioning.BSPTree:522","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory<? extends java.lang.Number>.getRule(int)","position":"org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory:140","type":"CtReturnImpl"},"status":-2},{"transformationPoint":"org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance:88","failures":[],"name":"conditionalBoundary","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * This enumeration defines the various types of normalizations that can be\n * applied to discrete sine transforms (DST). The exact definition of these\n * normalizations is detailed below.\n * \n * @see FastSineTransformer\n * @version $Id$\n * @since 3.0\n */\npublic enum DstNormalization {\nSTANDARD_DST_I, ORTHOGONAL_DST_I;}","position":"org.apache.commons.math3.transform.DstNormalization:28","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.AbstractFieldMatrix<T>.checkSubtractionCompatible(org.apache.commons.math3.linear.Array2DRowFieldMatrix<T>)","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:260","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"+3.691814001080034E75","position":"org.apache.commons.math3.util.FastMathLiteralArrays:954","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] -= double * (double[][int])","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:307","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final double double = org.apache.commons.math3.geometry.partitioning.SubHyperplane<S>.getHyperplane().getOffset(org.apache.commons.math3.geometry.Vector<S>)","position":"org.apache.commons.math3.geometry.partitioning.BSPTree:317","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][1][1] = (((double[][][1][0]) * (double[][][0][1])) + ((double[][][1][1]) * (double[][][1][1]))) + ((double[][][2][1]) * (double[][][2][1]))","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:212","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"plusCode":"org.apache.commons.math3.geometry.partitioning.Region.Location.BOUNDARY","minusCode":"org.apache.commons.math3.geometry.partitioning.Region.Location.BOUNDARY","org.apache.commons.math3.geometry.partitioning.Region.Location.BOUNDARY":"org.apache.commons.math3.geometry.partitioning.Region.Location.BOUNDARY"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.math3.geometry.partitioning.Region.Location == org.apache.commons.math3.geometry.partitioning.Region.Location ? org.apache.commons.math3.geometry.partitioning.Region.Location : this.org.apache.commons.math3.geometry.partitioning.Region.Location.org.apache.commons.math3.geometry.partitioning.Region.Location","position":"org.apache.commons.math3.geometry.partitioning.AbstractRegion:274","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.geometry.partitioning.Region.Location.org.apache.commons.math3.geometry.partitioning.Region.Location","position":"org.apache.commons.math3.geometry.euclidean.oned.Interval:126","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal((int + 1) , java.math.MathContext)","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:145","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"java.lang.Double.POSITIVE_INFINITY":"searchMax","x":"searchMax"},"name":"replace","transplant":{"sourceCode":"if (double == (this.double)) {\n    return this.double;\n} ","position":"org.apache.commons.math3.util.FastMath:1368","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return double","position":"org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:87","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.org.apache.commons.math3.exception.util.LocalizedFormats)","position":"org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:79","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = (-double) * double","position":"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:99","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.math3.stat.inference.TestUtils.org.apache.commons.math3.stat.inference.TTest.t(double, org.apache.commons.math3.stat.descriptive.StatisticalSummary)","position":"org.apache.commons.math3.stat.inference.TestUtils:147","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics.getSumLogImpl()","position":"org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics:253","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"double[][int] = org.apache.commons.math3.linear.AbstractRealMatrix.getEntry(int, int)","position":"org.apache.commons.math3.linear.JacobiPreconditioner:70","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.random.RandomGenerator.setSeed(long)","position":"org.apache.commons.math3.random.RandomAdaptor:194","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"double = org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.double","position":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer:2126","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.stat.descriptive.SummaryStatistics.getMax()","position":"org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics:136","type":"CtReturnImpl"},"status":-2},{"transformationPoint":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:330","failures":[],"name":"conditionalBoundary","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":0},{"failures":[],"variableMapping":{"hdiag":"rho","d1":"rhor2","beta":"rhor2"},"name":"add","transplant":{"sourceCode":"final double double = (double * double) + (double * double)","position":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer:903","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double * double","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:326","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"final int int = 31","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunction:368","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = 64","position":"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction:398","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"case INCREASING :\n    if (boolean) {\n        if ((double[][int]) <= double) {\n            break ITEM;\n        } \n    } else {\n        if ((double[][int]) < double) {\n            break ITEM;\n        } \n    }\n    break;","position":"org.apache.commons.math3.util.MathArrays:386","type":"CtCaseImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.optimization.GoalType = org.apache.commons.math3.optimization.GoalType","position":"org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:130","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"+8.90737333900943E103","position":"org.apache.commons.math3.util.FastMathLiteralArrays:2543","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = org.apache.commons.math3.linear.RealMatrixChangingVisitor.visit(int, int, double[][int])","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:499","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][0][0] = (double * double) + (double * double)","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:303","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"for (int int = int ; int < int ; ++int) {\n    final double[] double[] = double[][][int];\n    double -= (double[][int]) * (double[][int]);\n}","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:276","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int < int ; ++int) {\n    double[][][int][int] += (-double) * (double[][][int][(int - int)]);\n}","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:116","type":"CtForImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.RuntimeException java.lang.RuntimeException = null","position":"org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer:166","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.RuntimeException java.lang.RuntimeException","position":"org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer:202","type":"CtLocalVariableImpl"},"status":-2},{"transformationPoint":"org.apache.commons.math3.linear.Array2DRowRealMatrix:383","failures":[],"name":"math","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":0},{"failures":[],"variableMapping":{"yDotKLast":"subMatrix"},"name":"add","transplant":{"sourceCode":"double[][] = new double[3][]","position":"org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator:257","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][] = new double[double[][].int][int]","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:289","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"int int = 7","position":"org.apache.commons.math3.linear.AbstractRealMatrix:959","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = org.apache.commons.math3.linear.Array2DRowFieldMatrix<T>.getColumnDimension()","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:525","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return int[]","position":"org.apache.commons.math3.util.Combinations:208","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.RealMatrix org.apache.commons.math3.linear.RealMatrix = new org.apache.commons.math3.linear.LUDecomposition(org.apache.commons.math3.linear.RealMatrix).getSolver().getInverse()","position":"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression:98","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"+0.4914994239807129","position":"org.apache.commons.math3.util.FastMathLiteralArrays:5754","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] *= double","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:96","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * This enumeration defines the type of transform which is to be computed.\n * \n * @since 3.0\n * @version $Id$\n */\npublic enum TransformType {\nFORWARD, INVERSE;}","position":"org.apache.commons.math3.transform.TransformType:25","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.text.NumberFormat.setParseIntegerOnly(true)","position":"org.apache.commons.math3.fraction.AbstractFormat:94","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new org.apache.commons.math3.optim.linear.Relationship(\"<=\")","position":"org.apache.commons.math3.optim.linear.Relationship:28","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = (double[][int]) * double","position":"org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator:206","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = ((((3 * double) - 4) * double) + 1) / (double)","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:328","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"+1.2154183152078517E234","position":"org.apache.commons.math3.util.FastMathLiteralArrays:1319","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double = double","position":"org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator:165","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"T[] T[]","position":"org.apache.commons.math3.distribution.EnumeratedDistribution:251","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final T[] T[] = org.apache.commons.math3.linear.Array2DRowFieldMatrix<T>.T[][][int]","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:267","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    final double[] double[] = double[][][int];\n    final double[] double[] = org.apache.commons.math3.linear.Array2DRowRealMatrix.double[][][int];\n    final double[] double[] = double[][][int];\n    for (int int = 0 ; int < int ; int++) {\n        double[][int] = (double[][int]) + (double[][int]);\n    }\n}","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:170","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    final T[] T[] = T[][][int];\n    final T[] T[] = org.apache.commons.math3.linear.Array2DRowFieldMatrix<T>.T[][][int];\n    final T[] T[] = T[][][int];\n    for (int int = 0 ; int < int ; int++) {\n        T[][int] = T[][int].add(T[][int]);\n    }\n}","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:237","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-7518495577824189882L","position":"org.apache.commons.math3.linear.NonSymmetricMatrixException:30","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = double","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:360","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction:190","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.apache.commons.math3.genetics.FixedGenerationCount:59","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return true","position":"org.apache.commons.math3.distribution.LogNormalDistribution:319","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double[][][5][int]","position":"org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator:189","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"java.lang.Double.NaN":"x","x":"x","mu":"x"},"name":"replace","transplant":{"sourceCode":"if (double < double) {\n    return double;\n} ","position":"org.apache.commons.math3.distribution.LevyDistribution:91","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.expm1(double)","position":"org.apache.commons.math3.analysis.function.Expm1:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"xm":"dimension","lower":"dimension","upper":"dimension"},"name":"add","transplant":{"sourceCode":"if ((int < int) || (int > int)) {\n    int = int + ((int - int) / 2);\n} ","position":"org.apache.commons.math3.distribution.AbstractIntegerDistribution:160","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (int) ; int++) {\n    final double double = org.apache.commons.math3.random.RandomGenerator.nextGaussian();\n    double[][int] = double;\n    double += double * double;\n}","position":"org.apache.commons.math3.random.UnitSphereRandomVectorGenerator:68","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final double double = (double[][(int - 1)]) / double","position":"org.apache.commons.math3.linear.SingularValueDecomposition:380","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.linear.RealVector","position":"org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent:123","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Strategies for handling NaN values in rank transformations.\n * <ul>\n * <li>MINIMAL - NaNs are treated as minimal in the ordering, equivalent to\n * (that is, tied with) <code>Double.NEGATIVE_INFINITY<\/code>.<\/li>\n * <li>MAXIMAL - NaNs are treated as maximal in the ordering, equivalent to\n * <code>Double.POSITIVE_INFINITY<\/code><\/li>\n * <li>REMOVED - NaNs are removed before the rank transform is applied<\/li>\n * <li>FIXED - NaNs are left \"in place,\" that is the rank transformation is\n * applied to the other elements in the input array, but the NaN elements\n * are returned unchanged.<\/li>\n * <li>FAILED - If any NaN is encountered in the input array, an appropriate\n * exception is thrown<\/li>\n * <\/ul>\n * \n * @since 2.0\n * @version $Id$\n */\npublic enum NaNStrategy {\nMINIMAL, MAXIMAL, REMOVED, FIXED, FAILED;}","position":"org.apache.commons.math3.stat.ranking.NaNStrategy:38","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.AbstractFieldMatrix<T>.checkColumnIndex(int)","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:377","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"c":"f","x":"f","y":"f","coefficients":"f","n":"length","tc":"f"},"name":"add","transplant":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    double double = 1;\n    for (int int = 0 ; int < int ; int++) {\n        if (int != int) {\n            double *= (double[][int]) - (double[][int]);\n        } \n    }\n    final double double = (double[][int]) / double;\n    double[][(int - 1)] = double[][int];\n    double[][(int - 1)] += double * (double[][(int - 1)]);\n    for (int int = int - 2 ; int >= 0 ; int--) {\n        double[][int] = (double[][(int + 1)]) + ((double[][(int + 1)]) * (double[][int]));\n        double[][int] += double * (double[][int]);\n    }\n}","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm:275","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Arrays.java.util.Arrays.fill(double[], 1, double[].int, 0.0)","position":"org.apache.commons.math3.analysis.function.Sigmoid:177","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"k":"i"},"name":"replace","transplant":{"sourceCode":"final double double = 1.0 / ((2 * int) + 1)","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator:702","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double[][][5][int]","position":"org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator:110","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"double double = double[][int]","position":"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:687","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int[][int] = int","position":"org.apache.commons.math3.util.MultidimensionalCounter:178","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"valueCoeff":"rowI","tj":"rowI","j":"i"},"name":"replace","transplant":{"sourceCode":"T[][int] = T[][int].add(T[][int].multiply(T[][(int - 1)]))","position":"org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolator:201","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"T[][int] = org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>.visit(int, int, T[][int])","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:530","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{"min":"alpha","max":"alpha"},"name":"add","transplant":{"sourceCode":"if (double >= double) {\n    throw new org.apache.commons.math3.exception.NumberIsTooLargeException(double , double , false);\n} ","position":"org.apache.commons.math3.analysis.FunctionUtils:434","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int < int ; ++int) {\n    final double[] double[] = double[][][int];\n    double[][int] -= double * (double[][int]);\n}","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:281","type":"CtForImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ((double) * org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.exp(-double))) * org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.pow(double, ((double) - 1)))","position":"org.apache.commons.math3.distribution.GammaDistribution:270","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < int ; ++int) {\n    for (int int = 0 ; int < int ; ++int) {\n        final T[] T[] = T[][][int];\n        T[][int] = org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>.visit(int, int, T[][int]);\n    }\n}","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:527","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{"point":"point","points":"neighbors"},"name":"add","transplant":{"sourceCode":"java.util.List<T>.add(T)","position":"org.apache.commons.math3.stat.clustering.Cluster:58","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<T>.size()) >= (int)) {\n    final org.apache.commons.math3.ml.clustering.Cluster<T> org.apache.commons.math3.ml.clustering.Cluster<T> = new org.apache.commons.math3.ml.clustering.Cluster<T>();\n    java.util.List<org.apache.commons.math3.ml.clustering.Cluster<T>>.add(org.apache.commons.math3.ml.clustering.DBSCANClusterer<T>.expandCluster(org.apache.commons.math3.ml.clustering.Cluster<T>, T, java.util.List<T>, java.util.Collection<T>, java.util.Map<org.apache.commons.math3.ml.clustering.Clusterable, org.apache.commons.math3.ml.clustering.DBSCANClusterer.PointStatus>));\n} else {\n    java.util.Map<org.apache.commons.math3.ml.clustering.Clusterable, org.apache.commons.math3.ml.clustering.DBSCANClusterer.PointStatus>.put(T, org.apache.commons.math3.ml.clustering.DBSCANClusterer.PointStatus.org.apache.commons.math3.ml.clustering.DBSCANClusterer.PointStatus);\n}","position":"org.apache.commons.math3.ml.clustering.DBSCANClusterer:148","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"+0.6543170213699341","position":"org.apache.commons.math3.util.FastMathLiteralArrays:6050","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double -= (double[][][int][int]) * (double[][][int][(int - int)])","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:112","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"double[][][2][1] = (((double[][][2][0]) * (double[][][0][1])) + ((double[][][2][1]) * (double[][][1][1]))) + ((double[][][2][2]) * (double[][][2][1]))","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:215","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][1][1] = (((double[][][1][0]) * (double[][][0][1])) + ((double[][][1][1]) * (double[][][1][1]))) + ((double[][][2][1]) * (double[][][2][1]))","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:212","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"final int int","position":"org.apache.commons.math3.analysis.interpolation.LoessInterpolator:281","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = org.apache.commons.math3.linear.Array2DRowRealMatrix.getRowDimension()","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:221","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"+0.09495499730110168","position":"org.apache.commons.math3.util.FastMathLiteralArrays:5206","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return boolean ? double : -double","position":"org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint:59","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.ObjectOutputStream.writeObject(java.lang.Object)","position":"org.apache.commons.math3.exception.util.ExceptionContext:295","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int < int ; ++int) {\n    final double[] double[] = java.util.List<double[]>.get((int - (int + 1)));\n    final double double = 1.0 / (double - (java.util.List<java.lang.Double>.get((int - (int + 1)))));\n    if (java.lang.Double.java.lang.Double.isInfinite(double)) {\n        throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.org.apache.commons.math3.exception.util.LocalizedFormats , double);\n    } \n    for (int int = 0 ; int < (double[].int) ; ++int) {\n        double[][int] = double * ((double[][int]) - (double[][int]));\n    }\n    double[] = double[];\n}","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:104","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"+2.5217716516462005E-184","position":"org.apache.commons.math3.util.FastMathLiteralArrays:1878","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int[][int] = int","position":"org.apache.commons.math3.util.MultidimensionalCounter:234","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"+1.5705861683841123E-72","position":"org.apache.commons.math3.util.FastMathLiteralArrays:2137","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][2][2] = (-double) / double","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:271","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.lang.System.java.lang.System.arraycopy(double[][][int], 0, double[][][int], 0, double[][][int].int);\n}","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:531","type":"CtForImpl"},"status":0},{"failures":[],"variableMapping":{"xa":"Umax","idx":"length","org.apache.commons.math3.util.FastMath.EIGHTHS":"x"},"name":"add","transplant":{"sourceCode":"final double double = double - (double[][int])","position":"org.apache.commons.math3.util.FastMath:1720","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = ((double[].int) * (double[].int)) - double","position":"org.apache.commons.math3.stat.inference.MannWhitneyUTest:233","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    if (int < int) {\n        double double = double[][int];\n        double[][int] = double[][int];\n        double[][int] = double;\n        double = double[][int];\n        double[][int] = double[][int];\n        double[][int] = double;\n    } \n    int int = int;\n    while ((int <= int) && (int > 0)) {\n        int -= int;\n        int >>= 1;\n    }\n    int += int;\n}","position":"org.apache.commons.math3.transform.FastFourierTransformer:135","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][1][0] = (-double) * double","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:304","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.apache.commons.math3.linear.RealMatrix org.apache.commons.math3.linear.RealMatrix = org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.getOmegaInverse()","position":"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression:95","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.apache.commons.math3.linear.FieldMatrix<T> org.apache.commons.math3.linear.FieldMatrix<T> = org.apache.commons.math3.linear.AbstractFieldMatrix<T>.createMatrix(1, int)","position":"org.apache.commons.math3.linear.AbstractFieldMatrix:494","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"double[] = double[]","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:113","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"T[][int] = T.multiply(T[][int].subtract(T[][int]))","position":"org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolator:119","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"for (int int = 1 ; int < int ; int += 2) {\n    final java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal(int , java.math.MathContext);\n    final java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal((int + 1) , java.math.MathContext);\n    java.math.BigDecimal = java.math.BigDecimal.multiply(java.math.BigDecimal, java.math.MathContext);\n    java.math.BigDecimal = java.math.BigDecimal.divide(java.math.BigDecimal, java.math.MathContext);\n    java.math.BigDecimal = java.math.BigDecimal.negate(java.math.MathContext);\n}","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:194","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (!boolean) {\n    java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal.subtract(java.math.BigDecimal, java.math.MathContext);\n    java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal.ulp().multiply(java.math.BigDecimal.java.math.BigDecimal, java.math.MathContext);\n    boolean = (java.math.BigDecimal.compareTo(java.math.BigDecimal)) <= 0;\n    java.math.BigDecimal = java.math.BigDecimal.java.math.BigDecimal;\n    java.math.BigDecimal = java.math.BigDecimal;\n    for (int int = 1 ; int < int ; int++) {\n        final java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal(((2 * int) + 1) , java.math.MathContext);\n        final java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal(int , java.math.MathContext);\n        final java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal((int + 1) , java.math.MathContext);\n        java.math.BigDecimal = java.math.BigDecimal.multiply(java.math.BigDecimal, java.math.MathContext);\n        java.math.BigDecimal = java.math.BigDecimal.multiply(java.math.BigDecimal, java.math.MathContext);\n        java.math.BigDecimal = java.math.BigDecimal.multiply(java.math.BigDecimal, java.math.MathContext);\n        java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal.subtract(java.math.BigDecimal, java.math.MathContext);\n        java.math.BigDecimal = java.math.BigDecimal.divide(java.math.BigDecimal, java.math.MathContext);\n        java.math.BigDecimal = java.math.BigDecimal;\n        java.math.BigDecimal = java.math.BigDecimal;\n    }\n    if (!boolean) {\n        if (((java.math.BigDecimal.signum()) * (java.math.BigDecimal.signum())) <= 0) {\n            java.math.BigDecimal = java.math.BigDecimal;\n            java.math.BigDecimal = java.math.BigDecimal;\n            java.math.BigDecimal = java.math.BigDecimal;\n        } else {\n            java.math.BigDecimal = java.math.BigDecimal;\n            java.math.BigDecimal = java.math.BigDecimal;\n            java.math.BigDecimal = java.math.BigDecimal;\n        }\n        java.math.BigDecimal = java.math.BigDecimal.add(java.math.BigDecimal, java.math.MathContext).multiply(java.math.BigDecimal, java.math.MathContext);\n    } \n}","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:136","type":"CtWhileImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (org.apache.commons.math3.linear.RealMatrix.getRowDimension()) ; int++) {\n    for (int int = 0 ; int < (int[].int) ; int++) {\n        double[][][int][int] = org.apache.commons.math3.linear.RealMatrix.getEntry(int, int[][int]);\n    }\n}","position":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:1054","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double / double","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:299","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"double double = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.double","position":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer:968","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][] double[][] = new double[int][int]","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:97","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"double += org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.log(int)","position":"org.apache.commons.math3.util.CombinatoricsUtils:243","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double * ((6 - (9 * double)) + double)","position":"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:103","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"final double double = (((double * double) * 2) * double) * double","position":"org.apache.commons.math3.analysis.function.Gaussian:164","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double double = (double) - (double)","position":"org.apache.commons.math3.analysis.function.Sigmoid:190","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"-6337346779577272307L","position":"org.apache.commons.math3.fraction.ProperBigFractionFormat:41","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"long = 0","position":"org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance:116","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((double[][int]) != (org.apache.commons.math3.linear.RealVector.getEntry(int))) {\n    return false;\n} ","position":"org.apache.commons.math3.linear.ArrayRealVector:822","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return double","position":"org.apache.commons.math3.ml.distance.CanberraDistance:40","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"data":"values","column":"length","row":"begin"},"name":"replace","transplant":{"sourceCode":"return int == int ? double[][int] : 0","position":"org.apache.commons.math3.linear.DiagonalMatrix:228","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.stat.descriptive.moment.Variance.evaluate(double[], int, int))","position":"org.apache.commons.math3.stat.descriptive.moment.StandardDeviation:181","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"ipt":"i","jpt":"i"},"name":"add","transplant":{"sourceCode":"final int int = (((int * (int - 1)) / 2) + int) - 1","position":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer:1742","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = int[][int]","position":"org.apache.commons.math3.util.MultidimensionalCounter:227","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"double[][] = new double[3][3]","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:330","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][2][1] = (double * (double - double)) / double","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:335","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return new org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator(this)","position":"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:87","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.math3.ode.nonstiff.GillStepInterpolator(this)","position":"org.apache.commons.math3.ode.nonstiff.GillStepInterpolator:94","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"boolean boolean = (org.apache.commons.math3.ode.sampling.StepNormalizerBounds.lastIncluded()) && ((double) != (org.apache.commons.math3.ode.sampling.StepInterpolator.getCurrentTime()))","position":"org.apache.commons.math3.ode.sampling.StepNormalizer:247","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.linear.RealMatrixPreservingVisitor.end()","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:484","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"x":"U1"},"name":"add","transplant":{"sourceCode":"if (double < (-20)) {\n    return -1.0;\n} ","position":"org.apache.commons.math3.util.FastMath:603","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.max(double, double)","position":"org.apache.commons.math3.stat.inference.MannWhitneyUTest:155","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"xbar":"fx","values":"ordinate","length":"index","correction":"fx","begin":"index"},"name":"add","transplant":{"sourceCode":"for (int int = int ; int < (int + int) ; int++) {\n    double += (double[][int]) - double;\n}","position":"org.apache.commons.math3.stat.descriptive.moment.Mean:172","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int >= 0) {\n    double = double[][int];\n} else {\n    double = double[][0];\n}","position":"org.apache.commons.math3.analysis.function.StepFunction:90","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"+2.1863350868225098","position":"org.apache.commons.math3.util.FastMathLiteralArrays:3845","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][int][0] = double[][int]","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:136","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final T T = T.subtract(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getX()).abs()","position":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D:820","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.MatrixUtils.org.apache.commons.math3.linear.MatrixUtils.deserializeRealVector(this, \"coefficients\", java.io.ObjectInputStream)","position":"org.apache.commons.math3.optim.linear.LinearObjectiveFunction:147","type":"CtInvocationImpl"},"status":-2},{"failureDictionary":{}}]

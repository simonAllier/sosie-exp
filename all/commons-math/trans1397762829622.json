[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 1","position":"org.apache.commons.math3.distribution.PoissonDistribution:183","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < int ; ++int) {\n    T = T.add(T[][][int][int].multiply(T[][int]));\n}","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:446","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{"c":"b","pc":"a","pmc":"oneHalf","mContext":"mContext"},"name":"add","transplant":{"sourceCode":"java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal.subtract(java.math.BigDecimal.multiply(java.math.BigDecimal, this.java.math.MathContext), this.java.math.MathContext)","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal.add(java.math.BigDecimal, java.math.MathContext).multiply(java.math.BigDecimal, java.math.MathContext)","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:130","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int = org.apache.commons.math3.primes.SmallPrimes.org.apache.commons.math3.primes.SmallPrimes.smallTrialDivision(int, java.util.List<java.lang.Integer>)","position":"org.apache.commons.math3.primes.SmallPrimes:130","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double += org.apache.commons.math3.util.Pair<java.lang.Double, T>.getFirst()","position":"org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution:80","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"+3.886891475472745E177","position":"org.apache.commons.math3.util.FastMathLiteralArrays:2712","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][2][0] += ((double[][0]) * (double[][][2][0])) + ((double[][2]) * (double[][][2][0]))","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:229","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"valueCoeff":"rowI","tj":"rowI","j":"j"},"name":"replace","transplant":{"sourceCode":"T[][int] = T[][int].add(T[][int].multiply(T[][(int - 1)]))","position":"org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolator:201","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"T[][int] = org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>.visit(int, int, T[][int])","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:562","type":"CtAssignmentImpl"},"status":0},{"transformationPoint":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:209","failures":[],"name":"removeConditional","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Strategies for handling NaN values in rank transformations.\n * <ul>\n * <li>MINIMAL - NaNs are treated as minimal in the ordering, equivalent to\n * (that is, tied with) <code>Double.NEGATIVE_INFINITY<\/code>.<\/li>\n * <li>MAXIMAL - NaNs are treated as maximal in the ordering, equivalent to\n * <code>Double.POSITIVE_INFINITY<\/code><\/li>\n * <li>REMOVED - NaNs are removed before the rank transform is applied<\/li>\n * <li>FIXED - NaNs are left \"in place,\" that is the rank transformation is\n * applied to the other elements in the input array, but the NaN elements\n * are returned unchanged.<\/li>\n * <li>FAILED - If any NaN is encountered in the input array, an appropriate\n * exception is thrown<\/li>\n * <\/ul>\n * \n * @since 2.0\n * @version $Id$\n */\npublic enum NaNStrategy {\nMINIMAL, MAXIMAL, REMOVED, FIXED, FAILED;}","position":"org.apache.commons.math3.stat.ranking.NaNStrategy:38","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.RealMatrixPreservingVisitor.start(int, int, 0, (int - 1), 0, (int - 1))","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:478","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-6195664516687396620L","position":"org.apache.commons.math3.complex.Complex:72","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Arrays.java.util.Arrays.fill(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[], org.apache.commons.math3.analysis.differentiation.DerivativeStructure.getField().getZero())","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:207","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (int) ; int++) {\n    double[][int] = (double[][int]) + (double[][int]);\n}","position":"org.apache.commons.math3.optimization.direct.AbstractSimplex:231","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = ((double * 5.0) / 8.0) * ((2 * double) - 1)","position":"org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator:78","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"oldLength":"length","org.apache.commons.math3.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER":"length"},"name":"replace","transplant":{"sourceCode":"final int int = (this.int) * int","position":"org.apache.commons.math3.util.OpenIntToDoubleHashMap:439","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = double[][].int","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:259","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"double double = 0.25 / (double[][2])","position":"org.apache.commons.math3.geometry.euclidean.threed.Rotation:430","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = (double - (double[][int])) / ((double[][(int + 1)]) - (double[][int]))","position":"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction:321","type":"CtLocalVariableImpl"},"status":-2},{"transformationPoint":"org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest:321","failures":[],"name":"removeConditional","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ((double) == (org.apache.commons.math3.optim.linear.LinearObjectiveFunction.double)) && (org.apache.commons.math3.linear.RealVector.equals(org.apache.commons.math3.optim.linear.LinearObjectiveFunction.org.apache.commons.math3.linear.RealVector))","position":"org.apache.commons.math3.optim.linear.LinearObjectiveFunction:116","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double[][][2][int]","position":"org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator:132","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"+2.1735615730285645","position":"org.apache.commons.math3.util.FastMathLiteralArrays:3839","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double /= (double[][(int - int)]) * (double[][int])","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:195","type":"CtOperatorAssignmentImpl"},"status":-2},{"transformationPoint":"org.apache.commons.math3.linear.BiDiagonalTransformer:291","failures":[],"name":"negateConditional","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int int = java.lang.Math.((int)(java.lang.Math.ceil(((int) * double))))","position":"org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution:269","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double / double","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:297","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Double.java.lang.Double.isInfinite(double[][int])) {\n    org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.Mapper[][int] = new org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.NoBoundsMapper();\n} else {\n    org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.Mapper[][int] = new org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.UpperBoundMapper(double[][int]);\n}","position":"org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter:119","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{"point":"point","points":"neighbors"},"name":"add","transplant":{"sourceCode":"java.util.List<T>.add(T)","position":"org.apache.commons.math3.stat.clustering.Cluster:58","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.apache.commons.math3.stat.clustering.Cluster<T>>.add(org.apache.commons.math3.stat.clustering.DBSCANClusterer<T>.expandCluster(org.apache.commons.math3.stat.clustering.Cluster<T>, T, java.util.List<T>, java.util.Collection<T>, java.util.Map<org.apache.commons.math3.stat.clustering.Clusterable<T>, org.apache.commons.math3.stat.clustering.DBSCANClusterer.PointStatus>))","position":"org.apache.commons.math3.stat.clustering.DBSCANClusterer:144","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"+1.5762965679168701","position":"org.apache.commons.math3.util.FastMathLiteralArrays:3510","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double[][][1][int]","position":"org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator:106","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.math3.dfp.DfpField.setIEEEFlagsBits(org.apache.commons.math3.dfp.DfpField.int)","position":"org.apache.commons.math3.dfp.Dfp:1492","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.util.MathUtils.org.apache.commons.math3.util.MathUtils.checkNotNull(org.apache.commons.math3.stat.descriptive.moment.StandardDeviation)","position":"org.apache.commons.math3.stat.descriptive.moment.StandardDeviation:276","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final int int = 31","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunction:368","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.stat.inference.TestUtils.org.apache.commons.math3.stat.inference.ChiSquareTest.chiSquareTest(long[][], double)","position":"org.apache.commons.math3.stat.inference.TestUtils:287","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"x":"x","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.math3.util.FastMath.ulp(double)","position":"org.apache.commons.math3.analysis.function.Ulp:32","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.cbrt(double)","position":"org.apache.commons.math3.analysis.function.Cbrt:36","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-5.207000323380292E-8","position":"org.apache.commons.math3.util.FastMath:169","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = (((double)((int * (int + 1)))) / 2.0) - double","position":"org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest:321","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"final double[][] double[][] = new double[2][]","position":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:288","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double[][] double[][] = new double[3][3]","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:204","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.apache.commons.math3.analysis.polynomials.PolynomialFunction org.apache.commons.math3.analysis.polynomials.PolynomialFunction = org.apache.commons.math3.analysis.interpolation.HermiteInterpolator.polynomial(1)","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:142","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.apache.commons.math3.analysis.polynomials.PolynomialFunction org.apache.commons.math3.analysis.polynomials.PolynomialFunction = org.apache.commons.math3.analysis.interpolation.HermiteInterpolator.polynomial(0)","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:137","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"while (double >= 1.0) {\n    if (boolean || (!(boolean))) {\n        org.apache.commons.math3.ode.AbstractIntegrator.computeDerivatives(double, double[], double[][][0]);\n    } \n    if (boolean) {\n        final double[] double[] = new double[int];\n        if ((double[]) == null) {\n            for (int int = 0 ; int < (double[].int) ; ++int) {\n                double[][int] = (double) + ((double) * org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.abs(double[][int])));\n            }\n        } else {\n            for (int int = 0 ; int < (double[].int) ; ++int) {\n                double[][int] = (double[][int]) + ((double[][int]) * org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.abs(double[][int])));\n            }\n        }\n        double = org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.initializeStep(boolean, org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator.getOrder(), double[], double, double[], double[][][0], double[], double[][][1]);\n        boolean = false;\n    } \n    double = double;\n    if (boolean) {\n        if (((double) + (double)) >= double) {\n            double = double - (double);\n        } \n    } else {\n        if (((double) + (double)) <= double) {\n            double = double - (double);\n        } \n    }\n    for (int int = 1 ; int < int ; ++int) {\n        for (int int = 0 ; int < (double[].int) ; ++int) {\n            double double = (double[][][(int - 1)][0]) * (double[][][0][int]);\n            for (int int = 1 ; int < int ; ++int) {\n                double += (double[][][(int - 1)][int]) * (double[][][int][int]);\n            }\n            double[][int] = (double[][int]) + ((double) * double);\n        }\n        org.apache.commons.math3.ode.AbstractIntegrator.computeDerivatives(((double) + ((double[][(int - 1)]) * (double))), double[], double[][][int]);\n    }\n    for (int int = 0 ; int < (double[].int) ; ++int) {\n        double double = (double[][0]) * (double[][][0][int]);\n        for (int int = 1 ; int < int ; ++int) {\n            double += (double[][int]) * (double[][][int][int]);\n        }\n        double[][int] = (double[][int]) + ((double) * double);\n    }\n    double = org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator.estimateError(double[][], double[], double[], double);\n    if (double >= 1.0) {\n        final double double = org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.min(double, org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.max(double, ((double) * org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.pow(double, double)))));\n        double = org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.filterStep(((double) * double), boolean, false);\n    } \n}","position":"org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator:229","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.RealMatrix org.apache.commons.math3.linear.RealMatrix = org.apache.commons.math3.linear.MatrixUtils.org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(int, int)","position":"org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance:86","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.math3.random.ValueServer.resetReplayFile()","position":"org.apache.commons.math3.random.ValueServer:418","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (double[].int) ; ++int) {\n    double[][int] = (double[][int]) - (double * ((double[][int]) - (double * ((double[][int]) + (double * ((double[][int]) + (double * (double[][int]))))))));\n    double[][int] = (((double[][int]) + (double * (double[][int]))) + (double * (double[][int]))) + (double * (double[][int]));\n}","position":"org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator:214","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (!(org.apache.commons.math3.Field<T>.equals(org.apache.commons.math3.linear.SparseFieldVector<T>.org.apache.commons.math3.Field<T>))) {\n    return false;\n} ","position":"org.apache.commons.math3.linear.SparseFieldVector:580","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.apache.commons.math3.exception.NullArgumentException()","position":"org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest:80","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"+0.6808650493621826","position":"org.apache.commons.math3.util.FastMathLiteralArrays:6103","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.random.RandomDataGenerator.nextGaussian(double, double)","position":"org.apache.commons.math3.random.RandomDataImpl:218","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 1 ; int < int ; int++) {\n    if (double <= (double[][int])) {\n        return int - 1;\n    } \n}","position":"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction:340","type":"CtForImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final double double = (double * (double)) / 6.0","position":"org.apache.commons.math3.ode.nonstiff.GillStepInterpolator:112","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = (double) * (((-5.0) / 48.0) + (double * (((-5.0) / 16.0) + ((double * 5.0) / 12.0))))","position":"org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator:104","type":"CtLocalVariableImpl"},"status":-2},{"transformationPoint":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:110","failures":[],"name":"inlineConstant","type":"mutation","nodeType":"CtLocalVariableImpl","status":0},{"failures":[],"variableMapping":{"y":"y"},"name":"add","transplant":{"sourceCode":"return double","position":"org.apache.commons.math3.optimization.fitting.WeightedObservedPoint:73","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (double < 0.5) {\n    return double;\n} ","position":"org.apache.commons.math3.util.FastMath:3397","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"+1.9284247135543574E-8","position":"org.apache.commons.math3.util.FastMathLiteralArrays:5400","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = org.apache.commons.math3.linear.RealMatrixChangingVisitor.visit(int, int, double[][int])","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:434","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.RealMatrix org.apache.commons.math3.linear.RealMatrix = org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.getOmegaInverse()","position":"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression:95","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"+2.7106814809424793E-8","position":"org.apache.commons.math3.util.FastMathLiteralArrays:5666","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][0][0] = (((double[][][0][0]) * (double[][][0][0])) + ((double[][][1][0]) * (double[][][1][0]))) + ((double[][][2][0]) * (double[][][2][0]))","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:219","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"numberOfPoints":"numberOfPoints"},"name":"replace","transplant":{"sourceCode":"final java.math.BigDecimal[] java.math.BigDecimal[] = new java.math.BigDecimal[int]","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:80","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.math.BigDecimal[] java.math.BigDecimal[] = org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory<java.math.BigDecimal>.getRuleInternal((int - 1)).getFirst()","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:77","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-6.892713087722722E-8","position":"org.apache.commons.math3.util.FastMathLiteralArrays:5041","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = double","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:360","type":"CtAssignmentImpl"},"status":-2},{"transformationPoint":"org.apache.commons.math3.linear.Array2DRowRealMatrix:531","failures":[],"name":"negateConditional","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.math3.complex.Complex.org.apache.commons.math3.complex.Complex","position":"org.apache.commons.math3.complex.Complex:467","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.lang.System.java.lang.System.arraycopy(T[][][int], 0, T[][][int], 0, T[][][int].int);\n}","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:594","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"double = org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.getPoint()","position":"org.apache.commons.math3.optimization.direct.PowellOptimizer:245","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>.((org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint)(getHyperplane()))","position":"org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint:58","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"+8.694853785564504E-179","position":"org.apache.commons.math3.util.FastMathLiteralArrays:370","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int >= 0 ; --int) {\n    double = (double * double) + (double[][int]);\n    if (int > 1) {\n        double[][(int - 1)] = (((int - int) + 2) * (double[][(int - 2)])) - ((int - 1) * (double[][(int - 1)]));\n    } else {\n        double[][0] = 0;\n    }\n}","position":"org.apache.commons.math3.analysis.function.Sigmoid:196","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-2.7501042008405925E-8","position":"org.apache.commons.math3.util.FastMathLiteralArrays:5548","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double = double","position":"org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:128","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return ((int) * 4) - 2","position":"org.apache.commons.math3.dfp.Dfp:1194","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.apache.commons.math3.exception.DimensionMismatchException:63","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"double double = 1.0 + double","position":"org.apache.commons.math3.util.FastMath:2485","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (double[].int) ; ++int) {\n    double[][int] += (double[][int]) * double;\n}","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:178","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final double double = 1.0 - double","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:321","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double * ((375.0 / 16.0) + (double * (((-625.0) / 8.0) + ((125.0 / 2.0) * double))))","position":"org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator:77","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final double double = (4 * double) * double","position":"org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator:124","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = ((double * 5.0) / 8.0) * ((2 * double) - 1)","position":"org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator:78","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"continue","position":"org.apache.commons.math3.dfp.Dfp:1813","type":"CtContinueImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return PAIR[][0]","position":"org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer:217","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return false","position":"org.apache.commons.math3.genetics.FixedGenerationCount:59","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.util.Precision.(org.apache.commons.math3.util.Precision.equalsIncludingNaN(float, float)) || (org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.abs((float - float))) <= float)","position":"org.apache.commons.math3.util.Precision:181","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"p":"length","augIData":"y","i":"length","n":"length"},"name":"add","transplant":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    if ((int == int) && (int < int)) {\n        double[][][int][int] = 1.0;\n    } else {\n        double[][][int][int] = 0.0;\n    }\n}","position":"org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression:113","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (org.apache.commons.math3.analysis.differentiation.DerivativeStructure[].int) ; ++int) {\n    for (int int = 0 ; int < (double[].int) ; ++int) {\n        int[][int] = 1;\n        double[][][int][int] = org.apache.commons.math3.analysis.differentiation.DerivativeStructure[][int].getPartialDerivative(int[]);\n        int[][int] = 0;\n    }\n}","position":"org.apache.commons.math3.analysis.differentiation.JacobianFunction:58","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"+1.4408516883850098","position":"org.apache.commons.math3.util.FastMathLiteralArrays:3418","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics.getCovariance()","position":"org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics:121","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"+1.9711751621240536E163","position":"org.apache.commons.math3.util.FastMathLiteralArrays:1156","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.optimization.linear.LinearObjectiveFunction org.apache.commons.math3.optimization.linear.LinearObjectiveFunction = ((org.apache.commons.math3.optimization.linear.LinearObjectiveFunction)(java.lang.Object))","position":"org.apache.commons.math3.optimization.linear.LinearObjectiveFunction:114","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"double double = 3.834E-20","position":"org.apache.commons.math3.util.MathArrays:586","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = org.apache.commons.math3.analysis.differentiation.DerivativeStructure.getValue()","position":"org.apache.commons.math3.analysis.function.HarmonicOscillator:167","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"final double double = 1.0 / ((double) - double)","position":"org.apache.commons.math3.analysis.function.Logit:202","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double * (1.0 + double)","position":"org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator:103","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"secondary":"secondary","i":"i","ba":"ba"},"name":"add","transplant":{"sourceCode":"if (int > 0) {\n    double[][][int][(int - 1)] = double[][(int - 1)];\n} ","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:147","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][int][(int - 1)] = double[][(int - 1)]","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:148","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"double[][int] -= double * (double[][int])","position":"org.apache.commons.math3.linear.CholeskyDecomposition:240","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    return org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest.calculateExactPValue(double, int);\n} else {\n    final double double = (((double)((int * (int + 1)))) / 2.0) - double;\n    return org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest.calculateAsymptoticPValue(double, int);\n}","position":"org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest:318","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.math3.stat.descriptive.SummaryStatistics.getStandardDeviation()","position":"org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics:186","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.analysis.polynomials.PolynomialFunction[]","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:153","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.math.BigDecimal[] java.math.BigDecimal[] = new java.math.BigDecimal[int]","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:81","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * This enumeration defines the various types of normalizations that can be\n * applied to discrete sine transforms (DST). The exact definition of these\n * normalizations is detailed below.\n * \n * @see FastSineTransformer\n * @version $Id$\n * @since 3.0\n */\npublic enum DstNormalization {\nSTANDARD_DST_I, ORTHOGONAL_DST_I;}","position":"org.apache.commons.math3.transform.DstNormalization:28","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator.checkInterpolation()","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:172","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator.advance()","position":"org.apache.commons.math3.linear.OpenMapRealMatrix:124","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return double[][]","position":"org.apache.commons.math3.analysis.differentiation.JacobianFunction:66","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (double > ((double + 1.0) / ((double + double) + 2.0))) {\n    double = 1.0 - org.apache.commons.math3.special.Beta.(org.apache.commons.math3.special.Beta.regularizedBeta((1.0 - double), double, double, double, int));\n} else {\n    org.apache.commons.math3.util.ContinuedFraction org.apache.commons.math3.util.ContinuedFraction = new org.apache.commons.math3.util.ContinuedFraction() {\n        @java.lang.Override\n        protected double getB(int n, double x) {\n            double double;\n            double double;\n            if ((int % 2) == 0) {\n                double = int / 2.0;\n                double = ((double * (double - double)) * double) / (((double + (2 * double)) - 1) * (double + (2 * double)));\n            } else {\n                double = (int - 1.0) / 2.0;\n                double = (-(((double + double) * ((double + double) + double)) * double)) / ((double + (2 * double)) * ((double + (2 * double)) + 1.0));\n            }\n            return double;\n        }\n\n        @java.lang.Override\n        protected double getA(int n, double x) {\n            return 1.0;\n        }\n    };\n    double = (org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.exp(((((double * org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.log(double))) + (double * org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.log((1.0 - double))))) - org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.log(double))) - org.apache.commons.math3.special.Beta.(org.apache.commons.math3.special.Beta.logBeta(double, double))))) * 1.0) / (org.apache.commons.math3.util.ContinuedFraction.evaluate(double, double, int));\n}","position":"org.apache.commons.math3.special.Beta:195","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Double.java.lang.Double.isInfinite(double[][int])) {\n    org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.Mapper[][int] = new org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.LowerBoundMapper(double[][int]);\n} else {\n    org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.Mapper[][int] = new org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.LowerUpperBoundMapper(double[][int] , double[][int]);\n}","position":"org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter:127","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"s":"x","shape":"x","scale":"x"},"name":"replace","transplant":{"sourceCode":"return (((double * double) * double) / (double * double)) / (double - 2)","position":"org.apache.commons.math3.distribution.ParetoDistribution:241","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 1 / double","position":"org.apache.commons.math3.analysis.function.Inverse:35","type":"CtReturnImpl"},"status":0},{"transformationPoint":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:99","failures":[],"name":"math","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":-2},{"failures":[],"variableMapping":{"delsq":"c","state":"iMax","org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.ZERO":"s"},"name":"replace","transplant":{"sourceCode":"if (double <= double) {\n    int = 190;\n    break;\n} ","position":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer:1996","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    final double double = org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator.getPoint(int);\n    final double double = org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator.getWeight(int);\n    final double double = org.apache.commons.math3.analysis.UnivariateFunction.value(double);\n    final double double = org.apache.commons.math3.analysis.UnivariateFunction.value(-double);\n    final double double = (double * (double + double)) - double;\n    final double double = double + double;\n    double = (double - double) - double;\n    double = double;\n}","position":"org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator:79","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((boolean) || java.lang.Double.(java.lang.Double.isInfinite(double))) {\n    return org.apache.commons.math3.complex.Complex.org.apache.commons.math3.complex.Complex;\n} ","position":"org.apache.commons.math3.complex.Complex:1067","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((int < 0) || (int >= (int[][int]))) {\n    throw new org.apache.commons.math3.exception.OutOfRangeException(int , 0 , ((int[][int]) - 1));\n} ","position":"org.apache.commons.math3.util.MultidimensionalCounter:261","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"+0.24248650670051575","position":"org.apache.commons.math3.util.FastMathLiteralArrays:5385","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.linear.RealMatrix","position":"org.apache.commons.math3.filter.DefaultMeasurementModel:83","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"comp":"comp","weightSum":"weightSum"},"name":"add","transplant":{"sourceCode":"double += org.apache.commons.math3.util.Pair<java.lang.Double, T>.getFirst()","position":"org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution:80","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = (org.apache.commons.math3.util.Pair<java.lang.Double, T>.getFirst()) / double","position":"org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution:93","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"+0.659380316734314","position":"org.apache.commons.math3.util.FastMathLiteralArrays:6060","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = (double * double) + (double * double)","position":"org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator:99","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"++int","position":"org.apache.commons.math3.linear.BlockRealMatrix:514","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 2 * (int)","position":"org.apache.commons.math3.ode.FirstOrderConverter:92","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (int == 1) {\n    return org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator.(getWeight(0)) * (org.apache.commons.math3.analysis.UnivariateFunction.value(0.0));\n} ","position":"org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator:72","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final T[] T[] = T[][][int]","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:529","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"double = double[][int]","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator:774","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return double / double","position":"org.apache.commons.math3.analysis.function.Divide:31","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final int int = 71","position":"org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple:307","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = java.io.ObjectInput.readInt()","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:391","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return (org.apache.commons.math3.optim.univariate.UnivariatePointValuePair.getValue()) >= (org.apache.commons.math3.optim.univariate.UnivariatePointValuePair.getValue()) ? org.apache.commons.math3.optim.univariate.UnivariatePointValuePair : org.apache.commons.math3.optim.univariate.UnivariatePointValuePair","position":"org.apache.commons.math3.optim.univariate.BrentOptimizer:312","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = (long * ((int + int) + 1)) / 12.0","position":"org.apache.commons.math3.stat.inference.MannWhitneyUTest:180","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"final int int = (double[]) == null ? -1 : double[].int","position":"org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator:463","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = double[].int","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm:186","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"for (int int = int + 1 ; int < int ; int++) {\n    final double double = double[][int];\n    int int = int - 1;\n    while ((int >= int) && (double < (double[][int]))) {\n        double[][(int + 1)] = double[][int];\n        int--;\n    }\n    double[][(int + 1)] = double;\n}","position":"org.apache.commons.math3.stat.descriptive.rank.Percentile:443","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.System.java.lang.System.arraycopy(double[], 0, double[], 0, double[].int)","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm:164","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.apache.commons.math3.analysis.polynomials.PolynomialFunction org.apache.commons.math3.analysis.polynomials.PolynomialFunction = org.apache.commons.math3.analysis.interpolation.HermiteInterpolator.polynomial(1)","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:142","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.apache.commons.math3.analysis.polynomials.PolynomialFunction org.apache.commons.math3.analysis.polynomials.PolynomialFunction = org.apache.commons.math3.analysis.interpolation.HermiteInterpolator.polynomial(0)","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:137","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double * ((1 + double) + double)","position":"org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator:128","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"double double = 1","position":"org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution:160","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = (double) * (((-5.0) / 48.0) + (double * (((-5.0) / 16.0) + ((double * 5.0) / 12.0))))","position":"org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator:104","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (((org.apache.commons.math3.linear.FieldMatrix<T>.getRowDimension()) != int) || ((org.apache.commons.math3.linear.FieldMatrix<T>.getColumnDimension()) != 1)) {\n    throw new org.apache.commons.math3.linear.MatrixDimensionMismatchException(org.apache.commons.math3.linear.FieldMatrix<T>.getRowDimension() , org.apache.commons.math3.linear.FieldMatrix<T>.getColumnDimension() , int , 1);\n} ","position":"org.apache.commons.math3.linear.AbstractFieldMatrix:540","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.optimization.fitting.CurveFitter<org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric>.fit(new org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric(), double[])","position":"org.apache.commons.math3.optimization.fitting.HarmonicFitter:64","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"int[][int] = int","position":"org.apache.commons.math3.util.MultidimensionalCounter:178","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final int int = ((int ^ (int ^ (int << 9))) ^ (int ^ (int << 21))) ^ (int ^ (int >>> 21))","position":"org.apache.commons.math3.random.Well19937a:98","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][0][1] = double / (double)","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:260","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"state":"j"},"name":"add","transplant":{"sourceCode":"int = 360","position":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer:1193","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int[][int] = 0","position":"org.apache.commons.math3.analysis.differentiation.JacobianFunction:62","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (int == (-1)) {\n    int = int;\n} ","position":"org.apache.commons.math3.linear.AbstractRealMatrix:204","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((double[].int) > 1) {\n    double[][1] = ((-(double)) * (double)) * org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.sin(double));\n    final double double = (-(double)) * (double);\n    for (int int = 2 ; int < (double[].int) ; ++int) {\n        double[][int] = double * (double[][(int - 2)]);\n    }\n} ","position":"org.apache.commons.math3.analysis.function.HarmonicOscillator:172","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"final double double = double - 2","position":"org.apache.commons.math3.distribution.FDistribution:257","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double * double","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:326","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"+3269017.5","position":"org.apache.commons.math3.util.FastMathLiteralArrays:795","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][1][0] = (double * double) - (double * double)","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:318","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Strategies for handling NaN values in rank transformations.\n * <ul>\n * <li>MINIMAL - NaNs are treated as minimal in the ordering, equivalent to\n * (that is, tied with) <code>Double.NEGATIVE_INFINITY<\/code>.<\/li>\n * <li>MAXIMAL - NaNs are treated as maximal in the ordering, equivalent to\n * <code>Double.POSITIVE_INFINITY<\/code><\/li>\n * <li>REMOVED - NaNs are removed before the rank transform is applied<\/li>\n * <li>FIXED - NaNs are left \"in place,\" that is the rank transformation is\n * applied to the other elements in the input array, but the NaN elements\n * are returned unchanged.<\/li>\n * <li>FAILED - If any NaN is encountered in the input array, an appropriate\n * exception is thrown<\/li>\n * <\/ul>\n * \n * @since 2.0\n * @version $Id$\n */\npublic enum NaNStrategy {\nMINIMAL, MAXIMAL, REMOVED, FIXED, FAILED;}","position":"org.apache.commons.math3.stat.ranking.NaNStrategy:38","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm.computeCoefficients()","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm:161","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"i":"length","rawData":"householderVectors"},"name":"replace","transplant":{"sourceCode":"final int int = double[][][int].int","position":"org.apache.commons.math3.linear.BlockRealMatrix:210","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = double[][].int","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:141","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"for (int int = 0 ; int < int ; ++int) {\n    int[][int] = (4 * int) + 2;\n}","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator:377","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (int) ; int++) {\n    int int = 0;\n    final int int = int[][int];\n    while (int <= int) {\n        int += int;\n        ++int;\n    }\n    --int;\n    int -= int;\n    int[][int] = int;\n}","position":"org.apache.commons.math3.util.MultidimensionalCounter:225","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.apache.commons.math3.analysis.differentiation.DerivativeStructure = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(int , int , 1.0)","position":"org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator:224","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.analysis.differentiation.DerivativeStructure = org.apache.commons.math3.analysis.differentiation.DerivativeStructure.subtract(double[][int]).multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure).add(double[][int])","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm:110","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"this.java.text.NumberFormat = java.text.NumberFormat","position":"org.apache.commons.math3.fraction.AbstractFormat:123","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    final T[] T[] = T[][][int];\n    final T[] T[] = org.apache.commons.math3.linear.Array2DRowFieldMatrix<T>.T[][][int];\n    final T[] T[] = T[][][int];\n    for (int int = 0 ; int < int ; int++) {\n        T[][int] = T[][int].subtract(T[][int]);\n    }\n}","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:265","type":"CtForImpl"},"status":-2},{"transformationPoint":"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction:158","failures":[],"name":"negateConditional","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":0},{"transformationPoint":"org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance:155","failures":[],"name":"returnValue","type":"mutation","nodeType":"CtReturnImpl","status":0},{"failures":[],"variableMapping":{"p":"w"},"name":"add","transplant":{"sourceCode":"return double","position":"org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution:104","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (double * double) / double","position":"org.apache.commons.math3.special.Beta:373","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Goal type for an optimization problem (minimization or maximization of\n * a scalar function.\n * \n * @version $Id$\n * @since 2.0\n */\npublic enum GoalType implements org.apache.commons.math3.optim.OptimizationData {\nMAXIMIZE, MINIMIZE;}","position":"org.apache.commons.math3.optim.nonlinear.scalar.GoalType:28","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.stat.descriptive.moment.Variance.clear()","position":"org.apache.commons.math3.stat.descriptive.moment.StandardDeviation:138","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"t":"t"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.math3.analysis.differentiation.DerivativeStructure.exp()","position":"org.apache.commons.math3.analysis.function.Exp:51","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.analysis.differentiation.DerivativeStructure.compose(double[])","position":"org.apache.commons.math3.analysis.function.HarmonicOscillator:180","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.math3.linear.RealMatrix = org.apache.commons.math3.optimization.direct.CMAESOptimizer.org.apache.commons.math3.optimization.direct.CMAESOptimizer.diag(org.apache.commons.math3.linear.RealMatrix)","position":"org.apache.commons.math3.optimization.direct.CMAESOptimizer:918","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int + 1 ; int < int ; ++int) {\n    final double[] double[] = double[][][int];\n    double[][int] -= double * (double[][int]);\n}","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:370","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{"coefficients":"previousState","n":"n"},"name":"add","transplant":{"sourceCode":"this.double[] = new double[int + 1]","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm:202","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[] = new double[int]","position":"org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator:186","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{"length":"length","coefficients":"y","newCoefficients":"y"},"name":"add","transplant":{"sourceCode":"for (int int = 0 ; int < (this.int) ; ++int) {\n    double[][int] = -(double[][int]);\n}","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunction:223","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (((double[].int) == 0) || ((double[].int) == 0)) {\n    throw new org.apache.commons.math3.exception.NoDataException();\n} ","position":"org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest:82","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException(false)","position":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation:600","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.apache.commons.math3.exception.NotPositiveException(org.apache.commons.math3.util.Pair<java.lang.Double, T>.getFirst())","position":"org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution:78","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[int]","position":"org.apache.commons.math3.analysis.FunctionUtils:546","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[java.util.List<double[]>.get(0).int]","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:206","type":"CtLocalVariableImpl"},"status":-2},{"failureDictionary":{}}]

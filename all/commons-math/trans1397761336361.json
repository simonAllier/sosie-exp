[{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"-2.3259315921149476E-8","position":"org.apache.commons.math3.util.FastMathLiteralArrays:5857","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = double","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:296","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"s":"s","theta":"fourTheta"},"name":"add","transplant":{"sourceCode":"final double double = (3 * double) * double","position":"org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator:109","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double * ((((-double) + 5) * double) - 1)","position":"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:118","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Arrays.java.util.Arrays.fill(double[], 0.0)","position":"org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance:118","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = 2 * double","position":"org.apache.commons.math3.ode.nonstiff.GillStepInterpolator:103","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"+0.41065990924835205","position":"org.apache.commons.math3.util.FastMathLiteralArrays:5624","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.double = double","position":"org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator:133","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.math.BigDecimal = java.math.BigDecimal.java.math.BigDecimal","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:140","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.math.BigDecimal = java.math.BigDecimal.multiply(java.math.BigDecimal)","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:174","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.printMethod()","position":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer:2297","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double + double","position":"org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator:96","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"int = ((int + int) - int) - 1","position":"org.apache.commons.math3.stat.regression.MillerUpdatingRegression:654","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int = int + 4","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:249","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-3.4893601256685762E283","position":"org.apache.commons.math3.util.FastMathLiteralArrays:2957","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][1] = ((-(double)) * (double)) * org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.sin(double))","position":"org.apache.commons.math3.analysis.function.HarmonicOscillator:173","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final double double = org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator.getPoint(int)","position":"org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator:80","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = org.apache.commons.math3.random.HaltonSequenceGenerator.scramble(int, int, int[][int], (int % (int[][int])))","position":"org.apache.commons.math3.random.HaltonSequenceGenerator:133","type":"CtLocalVariableImpl"},"status":-2},{"transformationPoint":"org.apache.commons.math3.linear.Array2DRowRealMatrix:382","failures":[],"name":"removeConditional","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"double += (double[][int]) * (double[][int])","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:362","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"T = T.add(T[][int].multiply(T[][int]))","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:427","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"this.org.apache.commons.math3.linear.RealMatrix = new org.apache.commons.math3.linear.Array2DRowRealMatrix(double[][])","position":"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression:70","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{"shape":"offset","this":"this","scale":"offset","n":"offset"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.math3.util.FastMath.exp(((this.double) + ((this.double) * double)))","position":"org.apache.commons.math3.distribution.LogNormalDistribution:326","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (((double[][int]) < (double[][int])) || ((double[][int]) > (double[][int]))) {\n    double double = 0;\n    for (int int = int ; int < (double[].int) ; ++int) {\n        final double double;\n        if ((double[][int]) < (double[][int])) {\n            double = (double[][int]) * ((double[][int]) - (double[][int]));\n        } else if ((double[][int]) > (double[][int])) {\n            double = (double[][int]) * ((double[][int]) - (double[][int]));\n        } else {\n            double = 0;\n        }\n        double += org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.sqrt(double);\n    }\n    return (double) + double;\n} ","position":"org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapter:167","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return int < int ? ((int * (int + 1)) / 2) + int : ((int * (int + 1)) / 2) + int","position":"org.apache.commons.math3.stat.correlation.StorelessCovariance:99","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.apache.commons.math3.util.MultidimensionalCounter:205","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-2.7501042008405925E-8","position":"org.apache.commons.math3.util.FastMathLiteralArrays:5548","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int < int) {\n    if (int > 0) {\n        double[][][int][(int - 1)] = double[][(int - 1)];\n    } \n} else {\n    if (int < ((double[].int) - 1)) {\n        double[][][int][(int + 1)] = double[][int];\n    } \n}","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:146","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][int][int] = java.io.ObjectInput.readDouble()","position":"org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator:197","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"final double double = double * (((double - 2) * double) - 2)","position":"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:119","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = 1 + (double * (((-15.0) / 2.0) + (double * (16.0 - (10.0 * double)))))","position":"org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator:74","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (int < 0) {\n    int = (-int) - 2;\n} ","position":"org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction:141","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    final double[] double[] = double[][][int];\n    double double = 0;\n    for (int int = 0 ; int < int ; int++) {\n        double += (double[][int]) * (double[][int]);\n    }\n    double[][int] = double;\n}","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:358","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.math3.stat.inference.TestUtils.org.apache.commons.math3.stat.inference.OneWayAnova.anovaPValue(java.util.Collection<double[]>)","position":"org.apache.commons.math3.stat.inference.TestUtils:353","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.stat.inference.TestUtils.org.apache.commons.math3.stat.inference.OneWayAnova.anovaFValue(java.util.Collection<double[]>)","position":"org.apache.commons.math3.stat.inference.TestUtils:342","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"break","position":"org.apache.commons.math3.linear.SingularValueDecomposition:350","type":"CtBreakImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double[][int]","position":"org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator:94","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Map.Entry<org.apache.commons.math3.linear.RealVector, java.lang.Double> = null","position":"org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction:94","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.lang.System.java.lang.System.arraycopy(T[][][int], 0, T[][][int], 0, T[][][int].int);\n}","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:594","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"double double = 0","position":"org.apache.commons.math3.analysis.differentiation.DSCompiler:783","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    double += (double[][int]) * (double[][int]);\n}","position":"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction:404","type":"CtForImpl"},"status":0},{"transformationPoint":"org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest:213","failures":[],"name":"inlineConstant","type":"mutation","nodeType":"CtLocalVariableImpl","status":0},{"failures":[],"variableMapping":{"x":"z"},"name":"replace","transplant":{"sourceCode":"if (double < (-20)) {\n    return -1.0;\n} ","position":"org.apache.commons.math3.util.FastMath:603","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 2 * (org.apache.commons.math3.distribution.NormalDistribution.cumulativeProbability(double))","position":"org.apache.commons.math3.stat.inference.MannWhitneyUTest:187","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"+1.5683802588004895E-170","position":"org.apache.commons.math3.util.FastMathLiteralArrays:1910","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = org.apache.commons.math3.linear.Array2DRowFieldMatrix<T>.getColumnDimension()","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:474","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new org.apache.commons.math3.exception.NullArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.org.apache.commons.math3.exception.util.LocalizedFormats)","position":"org.apache.commons.math3.distribution.EnumeratedDistribution:248","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.genetics.AbstractListChromosome<T>.getRepresentation().size()","position":"org.apache.commons.math3.genetics.AbstractListChromosome:76","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"numCols":"i"},"name":"replace","transplant":{"sourceCode":"final double[] double[] = new double[int]","position":"org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization:347","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double[] double[] = double[][][int]","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:432","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{"org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO":"location"},"name":"add","transplant":{"sourceCode":"return this.org.apache.commons.math3.geometry.euclidean.oned.Vector1D","position":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D:138","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.geometry.euclidean.oned.Vector1D","position":"org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint:94","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final int int = int / (org.apache.commons.math3.linear.BlockRealMatrix.int)","position":"org.apache.commons.math3.linear.BlockRealMatrix:1206","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.double[][] = double[][]","position":"org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator:136","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (((org.apache.commons.math3.dfp.Dfp[][0].classify()) == (org.apache.commons.math3.dfp.Dfp.byte)) || (org.apache.commons.math3.dfp.Dfp[][0].equals(org.apache.commons.math3.dfp.Dfp[][1]))) {\n    return org.apache.commons.math3.dfp.Dfp[];\n} ","position":"org.apache.commons.math3.dfp.DfpMath:120","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Double.java.lang.Double.isInfinite(double)) {\n    double[][0] = double;\n    java.util.Arrays.java.util.Arrays.fill(double[], 1, double[].int, 0.0);\n} else {\n    final double[] double[] = new double[double[].int];\n    final double double = 1 / (1 + double);\n    double double = (double) - (double);\n    for (int int = 0 ; int < (double[].int) ; ++int) {\n        double double = 0;\n        double[][int] = 1;\n        for (int int = int ; int >= 0 ; --int) {\n            double = (double * double) + (double[][int]);\n            if (int > 1) {\n                double[][(int - 1)] = (((int - int) + 2) * (double[][(int - 2)])) - ((int - 1) * (double[][(int - 1)]));\n            } else {\n                double[][0] = 0;\n            }\n        }\n        double *= double;\n        double[][int] = double * double;\n    }\n    double[][0] += double;\n}","position":"org.apache.commons.math3.analysis.function.Sigmoid:173","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"double double = double[][2]","position":"org.apache.commons.math3.linear.SchurTransformer:358","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double = double * ((double * double) + double)","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:344","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"final double double = 6.123233995736766E-17 * 2","position":"org.apache.commons.math3.util.FastMath:2557","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double double = 0","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:381","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"+5.148199748336684E-131","position":"org.apache.commons.math3.util.FastMathLiteralArrays:480","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double = 0","position":"org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter:175","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"theta":"theta"},"name":"add","transplant":{"sourceCode":"final double double = 1 - double","position":"org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator:202","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = (4 * double) * double","position":"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:101","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Specification of expansion algorithm.\n * @since 3.1\n */\npublic static enum ExpansionMode {\nMULTIPLICATIVE, ADDITIVE;}","position":"org.apache.commons.math3.util.ResizableDoubleArray:153","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer<PAIR>.clear()","position":"org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer:166","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.apache.commons.math3.analysis.differentiation.DerivativeStructure[][int] = org.apache.commons.math3.analysis.differentiation.DerivativeStructure[][int].add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.multiply(double[][int]))","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:212","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] += (double[][int]) * double","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:179","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"+5.094280572218447E-8","position":"org.apache.commons.math3.util.FastMathLiteralArrays:4183","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][int][int] = org.apache.commons.math3.analysis.differentiation.DerivativeStructure[][int].getPartialDerivative(int[])","position":"org.apache.commons.math3.analysis.differentiation.JacobianFunction:61","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.util.List<java.lang.Integer>.size()) > 1) {\n    if ((org.apache.commons.math3.optim.linear.SimplexTableau.getNumArtificialVariables()) > 0) {\n        for (java.lang.Integer java.lang.Integer : java.util.List<java.lang.Integer>) {\n            for (int int = 0 ; int < (org.apache.commons.math3.optim.linear.SimplexTableau.getNumArtificialVariables()) ; int++) {\n                int int = int + (org.apache.commons.math3.optim.linear.SimplexTableau.getArtificialVariableOffset());\n                final double double = org.apache.commons.math3.optim.linear.SimplexTableau.getEntry(java.lang.Integer, int);\n                if (org.apache.commons.math3.util.Precision.(org.apache.commons.math3.util.Precision.equals(double, 1.0, int)) && (java.lang.Integer.equals(org.apache.commons.math3.optim.linear.SimplexTableau.getBasicRow(int)))) {\n                    return java.lang.Integer;\n                } \n            }\n        }\n    } \n    if (org.apache.commons.math3.optim.BaseOptimizer<org.apache.commons.math3.optim.PointValuePair>.(getEvaluations()) < (org.apache.commons.math3.optim.BaseOptimizer<org.apache.commons.math3.optim.PointValuePair>.(getMaxEvaluations()) / 2)) {\n        java.lang.Integer java.lang.Integer = null;\n        int int = org.apache.commons.math3.optim.linear.SimplexTableau.getWidth();\n        final int int = org.apache.commons.math3.optim.linear.SimplexTableau.getNumObjectiveFunctions();\n        final int int = (org.apache.commons.math3.optim.linear.SimplexTableau.getWidth()) - 1;\n        for (java.lang.Integer java.lang.Integer : java.util.List<java.lang.Integer>) {\n            for (int int = int ; (int < int) && (!(java.lang.Integer.equals(java.lang.Integer))) ; int++) {\n                final java.lang.Integer java.lang.Integer = org.apache.commons.math3.optim.linear.SimplexTableau.getBasicRow(int);\n                if (((java.lang.Integer != null) && (java.lang.Integer.equals(java.lang.Integer))) && (int < int)) {\n                    int = int;\n                    java.lang.Integer = java.lang.Integer;\n                } \n            }\n        }\n        return java.lang.Integer;\n    } \n} ","position":"org.apache.commons.math3.optim.linear.SimplexSolver:170","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.analysis.differentiation.DerivativeStructure[][int] = org.apache.commons.math3.analysis.differentiation.DerivativeStructure[][int].add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.multiply(double[][int]))","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:212","type":"CtAssignmentImpl"},"status":-2},{"transformationPoint":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:318","failures":[],"name":"math","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":0},{"failures":[],"variableMapping":{"org.apache.commons.math3.util.FastMath.F_1_4":"z","java.lang.Math.PI":"z"},"name":"add","transplant":{"sourceCode":"return double * double","position":"org.apache.commons.math3.util.FastMath:2613","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 2 * (org.apache.commons.math3.distribution.NormalDistribution.cumulativeProbability(double))","position":"org.apache.commons.math3.stat.inference.MannWhitneyUTest:187","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.apache.commons.math3.distribution.PoissonDistribution:180","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<T>","position":"org.apache.commons.math3.stat.clustering.Cluster:66","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.math3.util.IterationManager.fireIterationPerformedEvent(org.apache.commons.math3.linear.IterativeLinearSolverEvent)","position":"org.apache.commons.math3.linear.SymmLQ:1193","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = (double - double) / org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.sqrt(double))","position":"org.apache.commons.math3.stat.inference.MannWhitneyUTest:182","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"+1.5627006743114285E-7","position":"org.apache.commons.math3.util.FastMathLiteralArrays:5074","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int <= int ; ++int) {\n    final T[] T[] = T[][][int];\n    T[][int] = org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>.visit(int, int, T[][int]);\n}","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:560","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (double != 0) {\n    double double = 0;\n    for (int int = 0 ; int <= int ; ++int) {\n        double += (double[][][int][int]) * (double[][int]);\n    }\n    double = org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.max(double, (org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.abs(double)) / (double * double)));\n} ","position":"org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer:380","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.ml.distance.DistanceMeasure","position":"org.apache.commons.math3.ml.clustering.Clusterer:66","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"double = java.lang.Double.double","position":"org.apache.commons.math3.distribution.WeibullDistribution:202","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.stat.inference.TestUtils.org.apache.commons.math3.stat.inference.GTest.gTest(double[], long[], double)","position":"org.apache.commons.math3.stat.inference.TestUtils:406","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"while (true) {\n    final double double = double - ((double * (double - double)) / (double - double));\n    final double double = org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver<org.apache.commons.math3.analysis.UnivariateFunction>.computeObjectiveValue(double);\n    if (double == 0.0) {\n        return double;\n    } \n    double = double;\n    double = double;\n    double = double;\n    double = double;\n    if (org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.abs(double)) <= double) {\n        return double;\n    } \n    if (org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.abs((double - double))) < org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.max((double * org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.abs(double))), double))) {\n        return double;\n    } \n}","position":"org.apache.commons.math3.analysis.solvers.SecantSolver:103","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.random.HaltonSequenceGenerator.nextVector()","position":"org.apache.commons.math3.random.HaltonSequenceGenerator:171","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return (double[]) == null ? null : double[].clone()","position":"org.apache.commons.math3.optim.BaseMultivariateOptimizer:121","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.math.BigDecimal java.math.BigDecimal = int == 0 ? java.math.BigDecimal : java.math.BigDecimal[][(int - 1)];\n    java.math.BigDecimal java.math.BigDecimal = int == 1 ? java.math.BigDecimal.java.math.BigDecimal : java.math.BigDecimal[][int];\n    java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal.java.math.BigDecimal;\n    java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal;\n    java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal.java.math.BigDecimal;\n    java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal;\n    for (int int = 1 ; int < int ; int++) {\n        final java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal(((2 * int) + 1) , java.math.MathContext);\n        final java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal(int , java.math.MathContext);\n        final java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal((int + 1) , java.math.MathContext);\n        java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal.multiply(java.math.BigDecimal, java.math.MathContext);\n        java.math.BigDecimal = java.math.BigDecimal.multiply(java.math.BigDecimal, java.math.MathContext);\n        java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal.multiply(java.math.BigDecimal, java.math.MathContext);\n        java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal.subtract(java.math.BigDecimal, java.math.MathContext);\n        java.math.BigDecimal = java.math.BigDecimal.divide(java.math.BigDecimal, java.math.MathContext);\n        java.math.BigDecimal = java.math.BigDecimal.multiply(java.math.BigDecimal, java.math.MathContext);\n        java.math.BigDecimal = java.math.BigDecimal.multiply(java.math.BigDecimal, java.math.MathContext);\n        java.math.BigDecimal = java.math.BigDecimal.multiply(java.math.BigDecimal, java.math.MathContext);\n        java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal.subtract(java.math.BigDecimal, java.math.MathContext);\n        java.math.BigDecimal = java.math.BigDecimal.divide(java.math.BigDecimal, java.math.MathContext);\n        java.math.BigDecimal = java.math.BigDecimal;\n        java.math.BigDecimal = java.math.BigDecimal;\n        java.math.BigDecimal = java.math.BigDecimal;\n        java.math.BigDecimal = java.math.BigDecimal;\n    }\n    java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal.add(java.math.BigDecimal, java.math.MathContext).multiply(java.math.BigDecimal, java.math.MathContext);\n    java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal.java.math.BigDecimal;\n    java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal;\n    boolean boolean = false;\n    while (!boolean) {\n        java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal.subtract(java.math.BigDecimal, java.math.MathContext);\n        java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal.ulp().multiply(java.math.BigDecimal.java.math.BigDecimal, java.math.MathContext);\n        boolean = (java.math.BigDecimal.compareTo(java.math.BigDecimal)) <= 0;\n        java.math.BigDecimal = java.math.BigDecimal.java.math.BigDecimal;\n        java.math.BigDecimal = java.math.BigDecimal;\n        for (int int = 1 ; int < int ; int++) {\n            final java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal(((2 * int) + 1) , java.math.MathContext);\n            final java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal(int , java.math.MathContext);\n            final java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal((int + 1) , java.math.MathContext);\n            java.math.BigDecimal = java.math.BigDecimal.multiply(java.math.BigDecimal, java.math.MathContext);\n            java.math.BigDecimal = java.math.BigDecimal.multiply(java.math.BigDecimal, java.math.MathContext);\n            java.math.BigDecimal = java.math.BigDecimal.multiply(java.math.BigDecimal, java.math.MathContext);\n            java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal.subtract(java.math.BigDecimal, java.math.MathContext);\n            java.math.BigDecimal = java.math.BigDecimal.divide(java.math.BigDecimal, java.math.MathContext);\n            java.math.BigDecimal = java.math.BigDecimal;\n            java.math.BigDecimal = java.math.BigDecimal;\n        }\n        if (!boolean) {\n            if (((java.math.BigDecimal.signum()) * (java.math.BigDecimal.signum())) <= 0) {\n                java.math.BigDecimal = java.math.BigDecimal;\n                java.math.BigDecimal = java.math.BigDecimal;\n                java.math.BigDecimal = java.math.BigDecimal;\n            } else {\n                java.math.BigDecimal = java.math.BigDecimal;\n                java.math.BigDecimal = java.math.BigDecimal;\n                java.math.BigDecimal = java.math.BigDecimal;\n            }\n            java.math.BigDecimal = java.math.BigDecimal.add(java.math.BigDecimal, java.math.MathContext).multiply(java.math.BigDecimal, java.math.MathContext);\n        } \n    }\n    final java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal(int , java.math.MathContext);\n    java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal.subtract(java.math.BigDecimal.multiply(java.math.BigDecimal, java.math.MathContext), java.math.MathContext);\n    java.math.BigDecimal = java.math.BigDecimal.multiply(java.math.BigDecimal);\n    java.math.BigDecimal = java.math.BigDecimal.pow(2, java.math.MathContext);\n    java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal.pow(2, java.math.MathContext);\n    java.math.BigDecimal = java.math.BigDecimal.java.math.BigDecimal.subtract(java.math.BigDecimal, java.math.MathContext);\n    java.math.BigDecimal = java.math.BigDecimal.multiply(java.math.BigDecimal, java.math.MathContext);\n    java.math.BigDecimal = java.math.BigDecimal.divide(java.math.BigDecimal, java.math.MathContext);\n    java.math.BigDecimal[][int] = java.math.BigDecimal;\n    java.math.BigDecimal[][int] = java.math.BigDecimal;\n    final int int = (int - int) - 1;\n    java.math.BigDecimal[][int] = java.math.BigDecimal.negate(java.math.MathContext);\n    java.math.BigDecimal[][int] = java.math.BigDecimal;\n}","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:85","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"int int = -1","position":"org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer:351","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = org.apache.commons.math3.linear.Array2DRowRealMatrix.getRowDimension()","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:395","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"double double = -1.0","position":"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer:428","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double[][][6][int]","position":"org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator:190","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator(this)","position":"org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator:279","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator(this)","position":"org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator:142","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-1.589678872195875E-8","position":"org.apache.commons.math3.util.FastMathLiteralArrays:5954","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = double * double","position":"org.apache.commons.math3.analysis.function.Sigmoid:206","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"double double = 1","position":"org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution:160","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.abs(((double[][int]) - (double[][int])))","position":"org.apache.commons.math3.ml.distance.CanberraDistance:36","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Specification for indicating that some operation applies\n * before or after a given index.\n */\npublic static enum Position {\nHEAD, TAIL;}","position":"org.apache.commons.math3.util.MathArrays:1433","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.stat.inference.MannWhitneyUTest.ensureDataConformance(double[], double[])","position":"org.apache.commons.math3.stat.inference.MannWhitneyUTest:129","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"max":"i","rh":"i","trial":"i"},"name":"add","transplant":{"sourceCode":"if (int == 0) {\n    int = int - 1;\n    continue;\n} ","position":"org.apache.commons.math3.dfp.Dfp:1801","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>.visit(int, int, T[][][int][int])","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:544","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"work1":"hK","dirJ":"xNormSqr","weightedJacobian":"householderVectors","j":"m","pj":"n"},"name":"replace","transplant":{"sourceCode":"for (int int = 0 ; int <= int ; ++int) {\n    double[][int] += (this.double[][][int][int]) * double;\n}","position":"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer:440","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int < (int - 1)) {\n    double = 0;\n    for (int int = int + 1 ; int < int ; ++int) {\n        final double double = double[][int];\n        double += double * double;\n    }\n    final double double = (double[][(int + 1)]) > 0 ? -org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.sqrt(double)) : org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.sqrt(double);\n    double[][int] = double;\n    if (double != 0.0) {\n        double[][(int + 1)] -= double;\n        for (int int = int + 1 ; int < int ; ++int) {\n            final double[] double[] = double[][][int];\n            double double = 0;\n            for (int int = int + 1 ; int < int ; ++int) {\n                double -= (double[][int]) * (double[][int]);\n            }\n            double /= double * (double[][(int + 1)]);\n            for (int int = int + 1 ; int < int ; ++int) {\n                double[][int] -= double * (double[][int]);\n            }\n        }\n    } \n} ","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:288","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{"jWidth":"i","outIndex":"i","array":"rowI","jColumn":"i","i":"i","block":"rowI"},"name":"replace","transplant":{"sourceCode":"T[][((int * int) + int)] = T[][int++]","position":"org.apache.commons.math3.linear.BlockFieldMatrix:1152","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"T[][int] = org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>.visit(int, int, T[][int])","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:530","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final org.apache.commons.math3.linear.RealMatrix org.apache.commons.math3.linear.RealMatrix","position":"org.apache.commons.math3.linear.RealVector:655","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.RealMatrix org.apache.commons.math3.linear.RealMatrix = org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression.getX().transpose()","position":"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression:96","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"nonNegative":"vectorsInitialized","restrictToNonNegative":"vectorsInitialized"},"name":"add","transplant":{"sourceCode":"this.boolean = boolean","position":"org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer:146","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.boolean","position":"org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator:133","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{"max":"columns","rh":"rows","trial":"rows"},"name":"add","transplant":{"sourceCode":"if (int == 0) {\n    int = int - 1;\n    continue;\n} ","position":"org.apache.commons.math3.dfp.Dfp:1801","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.RealMatrixChangingVisitor.start(int, int, 0, (int - 1), 0, (int - 1))","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:397","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"rkIntegrator"},"name":"add","transplant":{"sourceCode":"this(null)","position":"org.apache.commons.math3.ode.AbstractIntegrator:99","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.org.apache.commons.math3.ode.AbstractIntegrator = org.apache.commons.math3.ode.AbstractIntegrator","position":"org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator:137","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.cbrt(double)","position":"org.apache.commons.math3.analysis.function.Cbrt:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (double > org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.pow(double, ((double) - 1)))) {\n    continue;\n} else {\n    return (double) * double;\n}","position":"org.apache.commons.math3.distribution.GammaDistribution:416","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (int) ; int++) {\n    double[][][int][int] = 0;\n}","position":"org.apache.commons.math3.linear.SingularValueDecomposition:216","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double += org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.sqrt(double)","position":"org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter:177","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Strategies for handling NaN values in rank transformations.\n * <ul>\n * <li>MINIMAL - NaNs are treated as minimal in the ordering, equivalent to\n * (that is, tied with) <code>Double.NEGATIVE_INFINITY<\/code>.<\/li>\n * <li>MAXIMAL - NaNs are treated as maximal in the ordering, equivalent to\n * <code>Double.POSITIVE_INFINITY<\/code><\/li>\n * <li>REMOVED - NaNs are removed before the rank transform is applied<\/li>\n * <li>FIXED - NaNs are left \"in place,\" that is the rank transformation is\n * applied to the other elements in the input array, but the NaN elements\n * are returned unchanged.<\/li>\n * <li>FAILED - If any NaN is encountered in the input array, an appropriate\n * exception is thrown<\/li>\n * <\/ul>\n * \n * @since 2.0\n * @version $Id$\n */\npublic enum NaNStrategy {\nMINIMAL, MAXIMAL, REMOVED, FIXED, FAILED;}","position":"org.apache.commons.math3.stat.ranking.NaNStrategy:38","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutput.writeObject(org.apache.commons.math3.linear.Array2DRowRealMatrix)","position":"org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator:247","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"errorCovariance":"cachedU","processNoise":"cachedU"},"name":"replace","transplant":{"sourceCode":"this.org.apache.commons.math3.linear.RealMatrix = org.apache.commons.math3.linear.RealMatrix.copy()","position":"org.apache.commons.math3.filter.KalmanFilter:170","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.RealMatrix = org.apache.commons.math3.linear.MatrixUtils.org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:125","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return 0.0","position":"org.apache.commons.math3.distribution.AbstractRealDistribution:287","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.analysis.MultivariateFunction.value(double[])","position":"org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapter:187","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT":"cHessian"},"name":"add","transplant":{"sourceCode":"return double[][].clone()","position":"org.apache.commons.math3.util.FastMathLiteralArrays:6174","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return double[][]","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:239","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"(long)++","position":"org.apache.commons.math3.stat.descriptive.SummaryStatistics:168","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double[] double[] = double[][][int]","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:200","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"yDotK":"yDotK","i":"i"},"name":"add","transplant":{"sourceCode":"final double double = double[][][0][int]","position":"org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator:112","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double[][][5][int]","position":"org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator:189","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    org.apache.commons.math3.linear.ArrayRealVector.setEntry(int, org.apache.commons.math3.linear.ArrayRealVector.getEntry(int));\n}","position":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer:1551","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double double = 1.0 / org.apache.commons.math3.util.CombinatoricsUtils.(org.apache.commons.math3.util.CombinatoricsUtils.factorial(int))","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:94","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"+8.098545495417704E274","position":"org.apache.commons.math3.util.FastMathLiteralArrays:1413","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics.hashCode()","position":"org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics:177","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final double[] double[]","position":"org.apache.commons.math3.linear.DiagonalMatrix:303","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double[] double[] = java.util.List<double[]>.get((int - (int + 1)))","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:105","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm.org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm.verifyInputArray(double[], double[])","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm:105","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-5.6696107089038004E-8","position":"org.apache.commons.math3.util.FastMathLiteralArrays:4350","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double double = 0","position":"org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator:77","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"int = 150","position":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer:2264","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"--int","position":"org.apache.commons.math3.util.MultidimensionalCounter:232","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new org.apache.commons.math3.linear.SingularMatrixException()","position":"org.apache.commons.math3.linear.FieldLUDecomposition:306","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][int][int] = double[][int]","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:145","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int++","position":"org.apache.commons.math3.util.FastMath:2020","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"do {\n    char = java.lang.String.charAt(int++);\n} while (java.lang.Character.(java.lang.Character.isWhitespace(char)) && (int < int) )","position":"org.apache.commons.math3.fraction.AbstractFormat:164","type":"CtDoImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-7.369842361872221E127","position":"org.apache.commons.math3.util.FastMathLiteralArrays:2597","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = (((double[][int]) + (double * double)) + (double * double)) + (double * double)","position":"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:125","type":"CtAssignmentImpl"},"status":-2},{"transformationPoint":"org.apache.commons.math3.linear.BiDiagonalTransformer:299","failures":[],"name":"conditionalBoundary","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"T[][int] = T","position":"org.apache.commons.math3.linear.MatrixUtils:201","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (double[].int) ; ++int) {\n    final double double = double[][][0][int];\n    final double double = double[][][1][int];\n    final double double = double[][][2][int];\n    final double double = double[][][3][int];\n    double[][int] = ((((double[][int]) - (double * double)) - (double * double)) - (double * double)) - (double * double);\n    double[][int] = (((double * double) + (double * double)) + (double * double)) + (double * double);\n}","position":"org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator:129","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{"interpolatedDerivatives":"interpolatedDerivatives","yDot1":"coeffDot1","i":"i","coeffDot2":"coeffDot1","coeffDot1":"yDot3","yDot2":"yDot3"},"name":"add","transplant":{"sourceCode":"double[][int] = (double * double) + (double * double)","position":"org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator:108","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = (((double * double) + (double * double)) + (double * double)) + (double * double)","position":"org.apache.commons.math3.ode.nonstiff.GillStepInterpolator:125","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.math3.linear.Array2DRowRealMatrix.setEntry(int, int, (((org.apache.commons.math3.linear.Array2DRowRealMatrix.getEntry(int, int)) + ((org.apache.commons.math3.linear.ArrayRealVector.getEntry(int)) * (org.apache.commons.math3.linear.ArrayRealVector.getEntry(int)))) + ((org.apache.commons.math3.linear.ArrayRealVector.getEntry(int)) * (org.apache.commons.math3.linear.ArrayRealVector.getEntry(int)))))","position":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer:577","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int <= int ; ++int) {\n    T[][int] = org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>.visit(int, int, T[][int]);\n}","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:496","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"int int = int[][int]","position":"org.apache.commons.math3.linear.RectangularCholeskyDecomposition:100","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = org.apache.commons.math3.random.HaltonSequenceGenerator.scramble(int, int, int[][int], (int % (int[][int])))","position":"org.apache.commons.math3.random.HaltonSequenceGenerator:133","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"exp":"sumRankX"},"name":"replace","transplant":{"sourceCode":"final double double = 1 / (1 + double)","position":"org.apache.commons.math3.analysis.function.Sigmoid:189","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double - (((double[].int) * ((double[].int) + 1)) / 2)","position":"org.apache.commons.math3.stat.inference.MannWhitneyUTest:148","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{"dim":"index","dimension":"index"},"name":"replace","transplant":{"sourceCode":"if (int > int) {\n    return int;\n} ","position":"org.apache.commons.math3.random.SobolSequenceGenerator:220","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Integer[][int].intValue()","position":"org.apache.commons.math3.exception.MultiDimensionMismatchException:82","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-626730818244969716L","position":"org.apache.commons.math3.random.RandomDataGenerator:116","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.readBaseExternal(java.io.ObjectInput)","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:387","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"double = 0.0","position":"org.apache.commons.math3.stat.regression.SimpleRegression:341","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (((double[].int) == 0) || ((double[].int) == 0)) {\n    throw new org.apache.commons.math3.exception.NoDataException();\n} ","position":"org.apache.commons.math3.stat.inference.MannWhitneyUTest:78","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!boolean) {\n    double = -double;\n} ","position":"org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator:304","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double double = 0","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:340","type":"CtLocalVariableImpl"},"status":-2},{"transformationPoint":"org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution:146","failures":[],"name":"removeConditional","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.apache.commons.math3.ml.clustering.Clusterable org.apache.commons.math3.ml.clustering.Clusterable = org.apache.commons.math3.ml.clustering.CentroidCluster<T>.getCenter()","position":"org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer:501","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = 1 / double","position":"org.apache.commons.math3.linear.RectangularCholeskyDecomposition:144","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = org.apache.commons.math3.linear.Array2DRowFieldMatrix<T>.getRowDimension()","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:539","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Double[][int] = -double","position":"org.apache.commons.math3.analysis.integration.gauss.HermiteRuleFactory:156","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((int) > 3) {\n    double double = 0;\n    double double = double[][][int][int];\n    for (int int = (int) - 1 ; int > 3 ; --int) {\n        final double double = 1.0 / (int - 3);\n        double = double * ((double * double) + double);\n        double = (double[][][int][int]) + ((double * double) * double);\n    }\n    double[][int] += double * double;\n    double[][int] += ((double * double) + (double * double)) / (double);\n} ","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:339","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization:435","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return boolean","position":"org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint:102","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[][int] = new org.apache.commons.math3.stat.descriptive.moment.Mean()","position":"org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics:133","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double[] double[] = double[][][int]","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:106","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = java.io.ObjectInput.readDouble()","position":"org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator:271","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{"determinant":"ratio"},"name":"replace","transplant":{"sourceCode":"final double double = 1.0 / double","position":"org.apache.commons.math3.geometry.euclidean.threed.Plane:366","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double double = double","position":"org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator:156","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"thetaHessian":"cHessian","sGradient":"sGradient","phiHessian":"phiHessian","rHessian":"phiHessian","cHessian":"cHessian"},"name":"add","transplant":{"sourceCode":"double[][][1][0] += (((double[][0]) * (double[][][1][0])) + ((double[][1]) * (double[][][1][0]))) + ((double[][2]) * (double[][][1][0]))","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:228","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][0][0] += (((double[][0]) * (double[][][0][0])) + ((double[][1]) * (double[][][0][0]))) + ((double[][2]) * (double[][][0][0]))","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:227","type":"CtOperatorAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.math3.linear.MatrixUtils.org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(this, int[], int[])","position":"org.apache.commons.math3.linear.AbstractRealMatrix:394","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm.org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm.verifyInputArray(double[], double[])","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm:184","type":"CtInvocationImpl"},"status":-2},{"failureDictionary":{}}]

[{"transformationPoint":"org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance:73","failures":[],"name":"math","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.apache.commons.math3.exception.NullArgumentException()","position":"org.apache.commons.math3.stat.inference.MannWhitneyUTest:76","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((double[].int) == 1) {\n    return 0.0;\n} else {\n    final boolean boolean = org.apache.commons.math3.stat.descriptive.moment.SemiVariance.Direction.getDirection();\n    double double = 0.0;\n    double double = 0.0;\n    for (int int = int ; int < int ; int++) {\n        if (((double[][int]) > double) == boolean) {\n            double = (double[][int]) - double;\n            double += double * double;\n        } \n    }\n    if (boolean) {\n        return double / (int - 1.0);\n    } else {\n        return double / int;\n    }\n}","position":"org.apache.commons.math3.stat.descriptive.moment.SemiVariance:271","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] += int * double","position":"org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator:208","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.apache.commons.math3.exception.OutOfRangeException(int , 1 , org.apache.commons.math3.random.SobolSequenceGenerator.int)","position":"org.apache.commons.math3.random.SobolSequenceGenerator:94","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.apache.commons.math3.exception.DimensionMismatchException(double[][][][int][int].int , int)","position":"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction:246","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"+1.8267512321472168","position":"org.apache.commons.math3.util.FastMathLiteralArrays:3661","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.Mapper[][int].boundedToUnbounded(double[][int])","position":"org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter:164","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"x":"x","this":"this"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.cos(double)","position":"org.apache.commons.math3.analysis.function.Cos:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (double == 1) {\n    if ((double) < 1) {\n        throw new org.apache.commons.math3.exception.NumberIsTooSmallException(org.apache.commons.math3.exception.util.LocalizedFormats.org.apache.commons.math3.exception.util.LocalizedFormats , double , 1 , false);\n    } \n    return 0;\n} else {\n    double double = org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.log(double);\n    double double = org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.log1p(-double);\n    return org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.exp((((((double) - 1) * double) + (((double) - 1) * double)) - (double)));\n}","position":"org.apache.commons.math3.distribution.BetaDistribution:147","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"double += (org.apache.commons.math3.linear.ArrayRealVector.getEntry(int)) * (org.apache.commons.math3.linear.ArrayRealVector.getEntry(int))","position":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer:2136","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int = org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.int","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:180","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"bIsNull":"vectorsInitialized"},"name":"replace","transplant":{"sourceCode":"this.boolean = false","position":"org.apache.commons.math3.linear.SymmLQ:565","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator:197","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{"errorCovariance":"Omega","processNoise":"OmegaInverse"},"name":"replace","transplant":{"sourceCode":"this.org.apache.commons.math3.linear.RealMatrix = org.apache.commons.math3.linear.RealMatrix.copy()","position":"org.apache.commons.math3.filter.KalmanFilter:170","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.RealMatrix = new org.apache.commons.math3.linear.LUDecomposition(org.apache.commons.math3.linear.RealMatrix).getSolver().getInverse()","position":"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression:81","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"double[][int] = double","position":"org.apache.commons.math3.linear.EigenDecomposition:745","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.math3.linear.Array2DRowRealMatrix(int , int)","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:145","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>.end()","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:482","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.linear.AbstractFieldMatrix<T>.walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>)","position":"org.apache.commons.math3.linear.AbstractFieldMatrix:919","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"java.lang.Double.POSITIVE_INFINITY":"searchStart","x":"searchStart"},"name":"replace","transplant":{"sourceCode":"if ((double * double) < 1.0) {\n    return this.double;\n} else {\n    return 0.0;\n}","position":"org.apache.commons.math3.util.FastMath:1534","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return double","position":"org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:93","type":"CtReturnImpl"},"status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"int int = 0","position":"org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance:69","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 0 ; int < int ; ++int) {\n    final double double = double[][int];\n    double[][int] += double[][int];\n    org.apache.commons.math3.ode.FirstOrderDifferentialEquations.computeDerivatives(double, double[], double[]);\n    for (int int = 0 ; int < int ; ++int) {\n        double[][][int][int] = ((double[][int]) - (double[][int])) / (double[][int]);\n    }\n    double[][int] = double;\n}","position":"org.apache.commons.math3.ode.JacobianMatrices:464","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutput.writeDouble(double[][][int][int])","position":"org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator:165","type":"CtInvocationImpl"},"status":-2},{"transformationPoint":"org.apache.commons.math3.linear.BiDiagonalTransformer:100","failures":[],"name":"conditionalBoundary","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.math3.optim.PointVectorValuePair = new org.apache.commons.math3.optim.PointVectorValuePair(double[] , double[])","position":"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:435","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = java.io.ObjectInput.readBoolean()","position":"org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator:277","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.apache.commons.math3.exception.DimensionMismatchException(int , double[][][].int)","position":"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction:162","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"+1.3404009342193604","position":"org.apache.commons.math3.util.FastMathLiteralArrays:3344","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((double[][][][int].int) != int) {\n    throw new org.apache.commons.math3.exception.DimensionMismatchException(double[][][][int].int , int);\n} ","position":"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction:212","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    final double[] double[] = org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex.getPoint(int).getPointRef();\n    for (int int = 0 ; int < int ; int++) {\n        double[][int] += double[][int];\n    }\n}","position":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex:200","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.util.Incrementor.incrementCount()","position":"org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:106","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"startIndex":"i","numElements":"i"},"name":"replace","transplant":{"sourceCode":"final int int = int + (int - 1)","position":"org.apache.commons.math3.util.ResizableDoubleArray:515","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = int + 5","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:217","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"+3.6637673548790206E194","position":"org.apache.commons.math3.util.FastMathLiteralArrays:1228","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][int][int] = 1","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:182","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.math.BigDecimal = java.math.BigDecimal.multiply(java.math.BigDecimal, java.math.MathContext)","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:118","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.stat.inference.TestUtils.org.apache.commons.math3.stat.inference.TTest.tTest(double, double[], double)","position":"org.apache.commons.math3.stat.inference.TestUtils:173","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Available choices of update formulas for the updating the parameter\n * that is used to compute the successive conjugate search directions.\n * For non-linear conjugate gradients, there are\n * two formulas:\n * <ul>\n * <li>Fletcher-Reeves formula<\/li>\n * <li>Polak-Ribière formula<\/li>\n * <\/ul>\n * \n * On the one hand, the Fletcher-Reeves formula is guaranteed to converge\n * if the start point is close enough of the optimum whether the\n * Polak-Ribière formula may not converge in rare cases. On the\n * other hand, the Polak-Ribière formula is often faster when it\n * does converge. Polak-Ribière is often used.\n * \n * @since 2.0\n */\npublic static enum Formula {\nFLETCHER_REEVES, POLAK_RIBIERE;}","position":"org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:95","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.updateHighOrderDerivativesPhase2(double[], double[], org.apache.commons.math3.linear.Array2DRowRealMatrix)","position":"org.apache.commons.math3.ode.nonstiff.AdamsIntegrator:134","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"final double double = 6.123233995736766E-17 * 2","position":"org.apache.commons.math3.util.FastMath:2557","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double[][][1][int]","position":"org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator:131","type":"CtLocalVariableImpl"},"status":0},{"transformationPoint":"org.apache.commons.math3.linear.Array2DRowRealMatrix:463","failures":[],"name":"math","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = (double[][int]) + ((double * (double)) * (double[][][0][int]))","position":"org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator:88","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-1","position":"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction:60","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.AbstractFieldMatrix<T>.checkRowIndex(int)","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:376","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"xInt":"columnCount","org.apache.commons.math3.util.Precision.SGN_MASK_FLOAT":"columnCount"},"name":"add","transplant":{"sourceCode":"if (int < 0) {\n    int = int - int;\n} ","position":"org.apache.commons.math3.util.Precision:207","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    double[][int] = (double[][int]) - (double[][int]);\n}","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:201","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-6337346779577272307L","position":"org.apache.commons.math3.fraction.ProperBigFractionFormat:41","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.math.BigDecimal = java.math.BigDecimal.multiply(java.math.BigDecimal)","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:174","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (int int = 0 ; int < int ; ++int) {\n    for (int int = 0 ; int < int ; ++int) {\n        double double = 0;\n        for (int int = 0 ; int < int ; ++int) {\n            double += org.apache.commons.math3.linear.AbstractRealMatrix.(getEntry(int, int)) * (org.apache.commons.math3.linear.RealMatrix.getEntry(int, int));\n        }\n        org.apache.commons.math3.linear.RealMatrix.setEntry(int, int, double);\n    }\n}","position":"org.apache.commons.math3.linear.AbstractRealMatrix:147","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][1][0] = (-double) / double","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:264","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final double double = org.apache.commons.math3.linear.RealVector.getEntry(int)","position":"org.apache.commons.math3.linear.SymmLQ:525","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (org.apache.commons.math3.analysis.polynomials.PolynomialFunction[].int) ; ++int) {\n    org.apache.commons.math3.analysis.polynomials.PolynomialFunction[][int] = org.apache.commons.math3.analysis.polynomials.PolynomialFunction;\n}","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:139","type":"CtForImpl"},"status":-2},{"transformationPoint":"org.apache.commons.math3.util.Precision:494","failures":[],"name":"removeConditional","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException(true)","position":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation:504","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.apache.commons.math3.exception.DimensionMismatchException(int , double[][][].int)","position":"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction:168","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"this.int = int","position":"org.apache.commons.math3.genetics.TournamentSelection:112","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (org.apache.commons.math3.analysis.polynomials.PolynomialFunction[].int) ; ++int) {\n    org.apache.commons.math3.analysis.polynomials.PolynomialFunction[][int] = org.apache.commons.math3.analysis.polynomials.PolynomialFunction;\n}","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:139","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"final double double = double / 8.0","position":"org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator:123","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = (3 * double) * double","position":"org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator:109","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"iBlock":"row","jBlock":"row","blocks":"data","blockColumns":"row"},"name":"add","transplant":{"sourceCode":"final T[] T[] = this.T[][][((int * int) + int)]","position":"org.apache.commons.math3.linear.BlockFieldMatrix:1533","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final T[] T[] = T[][][int]","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:238","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"r":"upper","n":"i"},"name":"add","transplant":{"sourceCode":"for (int int = 0 ; int < int ; ++int) {\n    double[][int] = -(double[][int]);\n}","position":"org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:242","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Double.java.lang.Double.isInfinite(double[][int])) {\n    org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.Mapper[][int] = new org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.NoBoundsMapper();\n} else {\n    org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.Mapper[][int] = new org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.UpperBoundMapper(double[][int]);\n}","position":"org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter:119","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"while ((!boolean) && (double <= 0.0)) {\n    double = org.apache.commons.math3.random.RandomGenerator.nextDouble();\n}","position":"org.apache.commons.math3.random.RandomDataGenerator:613","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.RealMatrixPreservingVisitor.visit(int, int, double[][int])","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:452","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = (double[][int]) + ((double * (double)) * (double[][][0][int]))","position":"org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator:88","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.util.NoSuchElementException()","position":"org.apache.commons.math3.linear.RealVector:1204","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.apache.commons.math3.exception.OutOfRangeException(int , 0 , int)","position":"org.apache.commons.math3.util.MultidimensionalCounter:219","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"wfixsq":"theta","adelt":"theta"},"name":"replace","transplant":{"sourceCode":"final double double = (double * double) - double","position":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer:1450","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double * ((-44.0) + (double * (152.0 - (120.0 * double))))","position":"org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator:76","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException()","position":"org.apache.commons.math3.linear.RealLinearOperator:95","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.apache.commons.math3.exception.DimensionMismatchException(double[][][][int].int , int)","position":"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction:213","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    org.apache.commons.math3.linear.ArrayRealVector.setEntry(int, ((org.apache.commons.math3.linear.Array2DRowRealMatrix.getEntry(int, 0)) * (org.apache.commons.math3.linear.Array2DRowRealMatrix.getEntry(int, 0))));\n}","position":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer:2339","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double[][][4][int]","position":"org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator:109","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-1.2322940607922115E-8","position":"org.apache.commons.math3.util.FastMathLiteralArrays:5793","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][int][int] = 1","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:182","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"cmaxdigits":"yLen","lsbthreshold":"i","msb":"i"},"name":"replace","transplant":{"sourceCode":"while (int > int) {\n    int /= 10;\n    int--;\n}","position":"org.apache.commons.math3.dfp.DfpDec:175","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((double[][][][int].int) != int) {\n    throw new org.apache.commons.math3.exception.DimensionMismatchException(double[][][][int].int , int);\n} ","position":"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction:215","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"boolean = true","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm:215","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm.computeCoefficients();\n} ","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm:160","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return new org.apache.commons.math3.util.Pair<java.lang.Double[], java.lang.Double[]>(new java.lang.Double[]{ 0.0 } , new java.lang.Double[]{ 2.0 })","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreRuleFactory:41","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.math3.util.Pair<java.math.BigDecimal[], java.math.BigDecimal[]>(java.math.BigDecimal[] , java.math.BigDecimal[])","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:214","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"double[][1] = double - (double[][0])","position":"org.apache.commons.math3.util.FastMathCalc:333","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (((double[]) != null) && (double <= 0.5)) {\n    final double double = (double) * double;\n    final double double = double * (1.0 + (double * (((-15.0) / 4.0) + (double * ((16.0 / 3.0) - ((5.0 / 2.0) * double))))));\n    final double double = double * (double * ((459.0 / 32.0) + (double * (((-243.0) / 8.0) + ((double * 135.0) / 8.0)))));\n    final double double = double * (double * ((-22.0) + (double * ((152.0 / 3.0) + (double * (-30.0))))));\n    final double double = double * (double * ((375.0 / 32.0) + (double * (((-625.0) / 24.0) + ((double * 125.0) / 8.0)))));\n    final double double = double * (double * (((-5.0) / 16.0) + ((double * 5.0) / 12.0)));\n    for (int int = 0 ; int < (double[].int) ; ++int) {\n        final double double = double[][][0][int];\n        final double double = double[][][2][int];\n        final double double = double[][][3][int];\n        final double double = double[][][4][int];\n        final double double = double[][][5][int];\n        double[][int] = (((((double[][int]) + (double * double)) + (double * double)) + (double * double)) + (double * double)) + (double * double);\n        double[][int] = ((((double * double) + (double * double)) + (double * double)) + (double * double)) + (double * double);\n    }\n} else {\n    final double double = double * double;\n    final double double = (double) * (((-1.0) / 12.0) + (double * (1.0 + (double * (((-15.0) / 4.0) + (double * ((16.0 / 3.0) + ((double * (-5.0)) / 2.0))))))));\n    final double double = (double) * (((-27.0) / 32.0) + (double * ((459.0 / 32.0) + (double * (((-243.0) / 8.0) + ((double * 135.0) / 8.0))))));\n    final double double = (double) * ((4.0 / 3.0) + (double * ((-22.0) + (double * ((152.0 / 3.0) + (double * (-30.0)))))));\n    final double double = (double) * (((-125.0) / 96.0) + (double * ((375.0 / 32.0) + (double * (((-625.0) / 24.0) + ((double * 125.0) / 8.0))))));\n    final double double = (double) * (((-5.0) / 48.0) + (double * (((-5.0) / 16.0) + ((double * 5.0) / 12.0))));\n    for (int int = 0 ; int < (double[].int) ; ++int) {\n        final double double = double[][][0][int];\n        final double double = double[][][2][int];\n        final double double = double[][][3][int];\n        final double double = double[][][4][int];\n        final double double = double[][][5][int];\n        double[][int] = (((((double[][int]) + (double * double)) + (double * double)) + (double * double)) + (double * double)) + (double * double);\n        double[][int] = ((((double * double) + (double * double)) + (double * double)) + (double * double)) + (double * double);\n    }\n}","position":"org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator:80","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.RealMatrix.setEntry(int[][int], int, double[][][int][int])","position":"org.apache.commons.math3.linear.RectangularCholeskyDecomposition:169","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"double double = 0.04168701738764507","position":"org.apache.commons.math3.util.FastMath:929","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double * double","position":"org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator:99","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{"theta":"theta","theta2":"theta"},"name":"add","transplant":{"sourceCode":"final double double = (double * double) * (4 + (double * ((-15) + (double * (18 - (7 * double))))))","position":"org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator:371","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = 0.75 * double","position":"org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator:99","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"evaluations":"evaluations"},"name":"add","transplant":{"sourceCode":"org.apache.commons.math3.util.Incrementor.resetCount()","position":"org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:133","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.util.Incrementor.setMaximalCount(int)","position":"org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator:248","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"+2.482285499572754","position":"org.apache.commons.math3.util.FastMathLiteralArrays:3975","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][1][int] = double","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:260","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.math3.optimization.general.AbstractScalarDifferentiableOptimizer.optimizeInternal(int, org.apache.commons.math3.analysis.FunctionUtils.org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction), org.apache.commons.math3.optimization.GoalType, double[])","position":"org.apache.commons.math3.optimization.general.AbstractScalarDifferentiableOptimizer:110","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.analysis.differentiation.DerivativeStructure[]","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:218","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"final java.math.BigDecimal[] java.math.BigDecimal[] = new java.math.BigDecimal[int]","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:80","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.math.BigDecimal[] java.math.BigDecimal[] = org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory<java.math.BigDecimal>.getRuleInternal((int - 1)).getFirst()","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:77","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"+4.247240125405735E-8","position":"org.apache.commons.math3.util.FastMathLiteralArrays:4743","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = ((((3 * double) - 4) * double) + 1) / (double)","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:328","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    final double double = (double * (org.apache.commons.math3.linear.Array2DRowRealMatrix.getEntry(int, 0))) + (double * (org.apache.commons.math3.linear.Array2DRowRealMatrix.getEntry(int, int)));\n    org.apache.commons.math3.linear.Array2DRowRealMatrix.setEntry(int, int, ((double * (org.apache.commons.math3.linear.Array2DRowRealMatrix.getEntry(int, int))) - (double * (org.apache.commons.math3.linear.Array2DRowRealMatrix.getEntry(int, 0)))));\n    org.apache.commons.math3.linear.Array2DRowRealMatrix.setEntry(int, 0, double);\n}","position":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer:2327","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double = (double[][][int][int]) + ((double * double) * double)","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:345","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"double double = 1","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm:277","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (int) ; int++) {\n    final double double = org.apache.commons.math3.random.RandomGenerator.nextGaussian();\n    double[][int] = double;\n    double += double * double;\n}","position":"org.apache.commons.math3.random.UnitSphereRandomVectorGenerator:68","type":"CtForImpl"},"status":0},{"failures":[],"variableMapping":{"col":"col","dataRow":"dataRow","outDataRow":"dataRow","mRow":"mRow"},"name":"add","transplant":{"sourceCode":"T[][int] = T[][int].subtract(T[][int])","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:270","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"T[][int] = T[][int].add(T[][int])","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:242","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enumerate for actions to be performed when an event occurs.\n */\npublic enum Action {\nSTOP, RESET_STATE, RESET_DERIVATIVES, CONTINUE;}","position":"org.apache.commons.math3.ode.events.EventHandler:54","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.random.RandomDataGenerator.reSeed(long)","position":"org.apache.commons.math3.random.RandomDataImpl:461","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"c":"parameterName"},"name":"add","transplant":{"sourceCode":"return java.lang.String.substring(0, ((java.lang.String.length()) - 2))","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunction:359","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String","position":"org.apache.commons.math3.ode.ParameterConfiguration:51","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final double[] double[] = new double[]{ double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] , double[][][][int][int][int] }","position":"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction:253","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"double[][][1][2] = double[][][2][1]","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:313","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][0][0] = (double * double) + (double * double)","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:303","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum for tree skew factor.\n */\nprivate static enum Skew {\nLEFT_HIGH, RIGHT_HIGH, BALANCED;}","position":"org.apache.commons.math3.geometry.partitioning.utilities.AVLTree:202","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((double[][][][int].int) != int) {\n    throw new org.apache.commons.math3.exception.DimensionMismatchException(double[][][][int].int , int);\n} ","position":"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction:218","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((double[][int]) > double) {\n    int = int;\n    double = double[][int];\n} ","position":"org.apache.commons.math3.linear.EigenDecomposition:682","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > 0) {\n    throw new org.apache.commons.math3.exception.MathIllegalStateException(org.apache.commons.math3.exception.util.LocalizedFormats.org.apache.commons.math3.exception.util.LocalizedFormats , int);\n} ","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:334","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>.((org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint)(getHyperplane()))","position":"org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint:58","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.apache.commons.math3.linear.RealLinearOperator != null) {\n    org.apache.commons.math3.linear.RealVector = org.apache.commons.math3.linear.RealLinearOperator.operate(org.apache.commons.math3.linear.RealVector);\n} ","position":"org.apache.commons.math3.linear.ConjugateGradient:195","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.apache.commons.math3.exception.DimensionMismatchException(double[].int , double[].int)","position":"org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest:87","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final double[] double[] = double[][][int]","position":"org.apache.commons.math3.util.MathArrays:693","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.geometry.euclidean.oned.Vector1D","position":"org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint:94","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int = int","position":"org.apache.commons.math3.dfp.DfpMath:236","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return double[]","position":"org.apache.commons.math3.stat.descriptive.moment.VectorialMean:70","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"double += -((double - double) - double)","position":"org.apache.commons.math3.util.FastMath:2741","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (double[][]) == null ? 0 : double[][].int","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:339","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"lower":"m","upper":"m","x":"m"},"name":"replace","transplant":{"sourceCode":"if ((int < int) || (int > int)) {\n    return 0;\n} ","position":"org.apache.commons.math3.distribution.UniformIntegerDistribution:82","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (2 * ((double)(int))) / ((double)(int))","position":"org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest:236","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"double += double * double","position":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer:995","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.geometry.partitioning.Region.Location.org.apache.commons.math3.geometry.partitioning.Region.Location","position":"org.apache.commons.math3.geometry.euclidean.oned.Interval:122","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"theta":"h","hTheta":"theta"},"name":"add","transplant":{"sourceCode":"final double double = double * (double * ((459.0 / 32.0) + (double * (((-243.0) / 8.0) + ((double * 135.0) / 8.0)))))","position":"org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator:83","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = (double * double) * (double)","position":"org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator:94","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 1 ; int < int ; int++) {\n    double[][int] = ((double[][(int - 1)]) * double) - ((double[][(int - 1)]) * double);\n    double[][int] = ((double[][(int - 1)]) * double) + ((double[][(int - 1)]) * double);\n    double[][int] = -(double[][int]);\n}","position":"org.apache.commons.math3.complex.RootsOfUnity:143","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.text.NumberFormat","position":"org.apache.commons.math3.fraction.AbstractFormat:111","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"double = org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.sqrt(double)","position":"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:426","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][2][0] += ((double[][0]) * (double[][][2][0])) + ((double[][2]) * (double[][][2][0]))","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:229","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-1.5529608026276525E-8","position":"org.apache.commons.math3.util.FastMathLiteralArrays:6090","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = ((double * double) + (double * double)) + (double * double)","position":"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:127","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.apache.commons.math3.geometry.partitioning.utilities.AVLTree:483","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double[] double[] = new double[double[].int]","position":"org.apache.commons.math3.analysis.function.Sigmoid:187","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final double double = double[][][1][int]","position":"org.apache.commons.math3.ode.nonstiff.GillStepInterpolator:120","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double[][][6][int]","position":"org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator:190","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.apache.commons.math3.util.ArithmeticUtils:509","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = 2 * double","position":"org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator:89","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"double[][][0][0] = (((double[][][0][0]) * (double[][][0][0])) + ((double[][][1][0]) * (double[][][1][0]))) + ((double[][][2][0]) * (double[][][2][0]))","position":"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates:219","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double[][int]","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:331","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.math3.linear.ArrayRealVector.setEntry(int, ((org.apache.commons.math3.linear.ArrayRealVector.getEntry(int)) - (org.apache.commons.math3.linear.ArrayRealVector.getEntry(int))))","position":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer:634","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.stat.inference.TestUtils.org.apache.commons.math3.stat.inference.GTest.gTest(double[], long[], double)","position":"org.apache.commons.math3.stat.inference.TestUtils:406","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final double[] double[] = new double[int]","position":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex:242","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.util.List<double[]>.size()) ; ++int) {\n    double[] double[] = java.util.List<double[]>.get(int);\n    for (int int = 0 ; int < (org.apache.commons.math3.analysis.differentiation.DerivativeStructure[].int) ; ++int) {\n        org.apache.commons.math3.analysis.differentiation.DerivativeStructure[][int] = org.apache.commons.math3.analysis.differentiation.DerivativeStructure[][int].add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.multiply(double[][int]));\n    }\n    final org.apache.commons.math3.analysis.differentiation.DerivativeStructure org.apache.commons.math3.analysis.differentiation.DerivativeStructure = org.apache.commons.math3.analysis.differentiation.DerivativeStructure.subtract(java.util.List<java.lang.Double>.get(int));\n    org.apache.commons.math3.analysis.differentiation.DerivativeStructure = org.apache.commons.math3.analysis.differentiation.DerivativeStructure.multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure);\n}","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:209","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final double double = (long & 4398046511103L) / ((org.apache.commons.math3.util.FastMath.double) + (long & 4499201580859392L))","position":"org.apache.commons.math3.util.FastMath:1241","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Double.java.lang.Double.isInfinite(double)) {\n    double[][0] = double;\n    java.util.Arrays.java.util.Arrays.fill(double[], 1, double[].int, 0.0);\n} else {\n    final double[] double[] = new double[double[].int];\n    final double double = 1 / (1 + double);\n    double double = (double) - (double);\n    for (int int = 0 ; int < (double[].int) ; ++int) {\n        double double = 0;\n        double[][int] = 1;\n        for (int int = int ; int >= 0 ; --int) {\n            double = (double * double) + (double[][int]);\n            if (int > 1) {\n                double[][(int - 1)] = (((int - int) + 2) * (double[][(int - 2)])) - ((int - 1) * (double[][(int - 1)]));\n            } else {\n                double[][0] = 0;\n            }\n        }\n        double *= double;\n        double[][int] = double * double;\n    }\n    double[][0] += double;\n}","position":"org.apache.commons.math3.analysis.function.Sigmoid:173","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"int int = 2","position":"org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator:125","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = java.io.ObjectInput.readInt()","position":"org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator:192","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return T.multiply(T).add(T.multiply(T)).add(T.multiply(T))","position":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D:917","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal(((2 * int) + 1) , java.math.MathContext)","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:143","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return double","position":"org.apache.commons.math3.geometry.euclidean.oned.Interval:49","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (double * (double)) + ((1 - double) * (double))","position":"org.apache.commons.math3.distribution.UniformRealDistribution:228","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"final int int = (int + 62) / 63","position":"org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple:195","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = double[][].int","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:259","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.apache.commons.math3.optim.OptimizationData[][int] = null","position":"org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer:149","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.optim.OptimizationData[][int] = new org.apache.commons.math3.optim.MaxEval((int - (int)))","position":"org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer:178","type":"CtAssignmentImpl"},"status":0},{"transformationPoint":"org.apache.commons.math3.linear.BiDiagonalTransformer:177","failures":[],"name":"conditionalBoundary","type":"mutation","nodeType":"CtBinaryOperatorImpl","status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return T[].clone()","position":"org.apache.commons.math3.linear.ArrayFieldVector:675","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return T[]","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:452","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"+5.602796449011294E-9","position":"org.apache.commons.math3.util.FastMathLiteralArrays:761","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double[][int]","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:331","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int += double[].int","position":"org.apache.commons.math3.util.ResizableDoubleArray:460","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = int[][int]","position":"org.apache.commons.math3.util.MultidimensionalCounter:227","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-2.2667181460478093E132","position":"org.apache.commons.math3.util.FastMathLiteralArrays:2608","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][int][int] = double","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:315","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"b":"p","costB":"p","sintB":"p","sinEpsA":"p","cosEpsB":"p","sinEpsB":"p"},"name":"replace","transplant":{"sourceCode":"double = (((double + double) + (double * double)) + (double * double)) + (double * double)","position":"org.apache.commons.math3.util.FastMath:1794","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double += (double[][int]) * (java.util.List<T>.get(int).density(double[]))","position":"org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution:102","type":"CtOperatorAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"double = (double - double) + double","position":"org.apache.commons.math3.util.FastMath:1272","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.stat.descriptive.moment.Variance.getResult())","position":"org.apache.commons.math3.stat.descriptive.moment.StandardDeviation:130","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"double[] double[] = new double[org.apache.commons.math3.optim.linear.SimplexTableau.getOriginalNumDecisionVariables()]","position":"org.apache.commons.math3.optim.linear.SimplexTableau:428","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = java.io.ObjectInput.readBoolean()","position":"org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator:277","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"index":"length","numElements":"length"},"name":"replace","transplant":{"sourceCode":"if ((int + 1) > (this.int)) {\n    this.int = int + 1;\n} ","position":"org.apache.commons.math3.util.ResizableDoubleArray:966","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (((double[].int) == 0) || ((double[].int) == 0)) {\n    throw new org.apache.commons.math3.exception.NoDataException();\n} ","position":"org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest:82","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (int < 0) {\n    return new org.apache.commons.math3.fitting.WeightedObservedPoint[]{ org.apache.commons.math3.fitting.WeightedObservedPoint , org.apache.commons.math3.fitting.WeightedObservedPoint };\n} else {\n    return new org.apache.commons.math3.fitting.WeightedObservedPoint[]{ org.apache.commons.math3.fitting.WeightedObservedPoint , org.apache.commons.math3.fitting.WeightedObservedPoint };\n}","position":"org.apache.commons.math3.fitting.GaussianCurveFitter:391","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.analysis.differentiation.DerivativeStructure.negate().add(double).multiply(double).exp().multiply(double).add(1)","position":"org.apache.commons.math3.analysis.function.Logistic:226","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Available choices of update formulas for the updating the parameter\n * that is used to compute the successive conjugate search directions.\n * For non-linear conjugate gradients, there are\n * two formulas:\n * <ul>\n * <li>Fletcher-Reeves formula<\/li>\n * <li>Polak-Ribière formula<\/li>\n * <\/ul>\n * \n * On the one hand, the Fletcher-Reeves formula is guaranteed to converge\n * if the start point is close enough of the optimum whether the\n * Polak-Ribière formula may not converge in rare cases. On the\n * other hand, the Polak-Ribière formula is often faster when it\n * does converge. Polak-Ribière is often used.\n * \n * @since 2.0\n */\npublic static enum Formula {\nFLETCHER_REEVES, POLAK_RIBIERE;}","position":"org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:95","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.stat.descriptive.moment.StandardDeviation.org.apache.commons.math3.stat.descriptive.moment.StandardDeviation.copy(this, org.apache.commons.math3.stat.descriptive.moment.StandardDeviation)","position":"org.apache.commons.math3.stat.descriptive.moment.StandardDeviation:260","type":"CtInvocationImpl"},"status":-2},{"failureDictionary":{}}]

[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"double = double","position":"org.apache.commons.math3.analysis.solvers.RiddersSolver:140","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double[][] double[][] = new double[int][int]","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:169","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    final T[] T[] = T[][][int];\n    T T = org.apache.commons.math3.linear.AbstractFieldMatrix<T>.getField().getZero();\n    for (int int = 0 ; int < int ; int++) {\n        T = T.add(T[][int].multiply(T[][int]));\n    }\n    T[][int] = T;\n}","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:423","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < int ; ++int) {\n    T T = org.apache.commons.math3.linear.AbstractFieldMatrix<T>.getField().getZero();\n    for (int int = 0 ; int < int ; ++int) {\n        T = T.add(T[][][int][int].multiply(T[][int]));\n    }\n    T[][int] = T;\n}","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:444","type":"CtForImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Available choices of update formulas for the &beta; parameter\n * in {@link NonLinearConjugateGradientOptimizer}.\n * <p>\n * The &beta; parameter is used to compute the successive conjugate\n * search directions. For non-linear conjugate gradients, there are\n * two formulas to compute &beta;:\n * <ul>\n * <li>Fletcher-Reeves formula<\/li>\n * <li>Polak-Ribi&egrave;re formula<\/li>\n * <\/ul>\n * On the one hand, the Fletcher-Reeves formula is guaranteed to converge\n * if the start point is close enough of the optimum whether the\n * Polak-Ribi&egrave;re formula may not converge in rare cases. On the\n * other hand, the Polak-Ribi&egrave;re formula is often faster when it\n * does converge. Polak-Ribi&egrave;re is often used.\n * <p>\n * @see NonLinearConjugateGradientOptimizer\n * @version $Id$\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 2.0\n */\n@java.lang.Deprecated\npublic enum ConjugateGradientFormula {\nFLETCHER_REEVES, POLAK_RIBIERE;}","position":"org.apache.commons.math3.optimization.general.ConjugateGradientFormula:43","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.MatrixUtils.org.apache.commons.math3.linear.MatrixUtils.deserializeRealVector(this, \"coefficients\", java.io.ObjectInputStream)","position":"org.apache.commons.math3.optim.linear.LinearObjectiveFunction:147","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"+4.363736368635843E-9","position":"org.apache.commons.math3.util.FastMathLiteralArrays:5369","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double /= double * (double[][][int][int])","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:280","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"final double double = 1.997844754509471E-9","position":"org.apache.commons.math3.util.FastMath:2952","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double double = 0","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:240","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.RealMatrixChangingVisitor.start(int, int, 0, (int - 1), 0, (int - 1))","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:463","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{"toAppendTo":"buffer"},"name":"replace","transplant":{"sourceCode":"return java.lang.StringBuffer","position":"org.apache.commons.math3.geometry.VectorFormat:215","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.text.NumberFormat.format(java.lang.Long.java.lang.Long.valueOf(long), java.lang.StringBuffer, java.text.FieldPosition)","position":"org.apache.commons.math3.fraction.AbstractFormat:207","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"rem":"diagOffset","n":"diagOffset"},"name":"add","transplant":{"sourceCode":"if (1 == int) {\n    int += 4;\n} ","position":"org.apache.commons.math3.primes.Primes:95","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > 0) {\n    double[][][0][0] = 1;\n} ","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:122","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"+2.210442148596269E80","position":"org.apache.commons.math3.util.FastMathLiteralArrays:965","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int < (int - 1)) {\n    final double[] double[] = double[][][(int + 1)];\n    double = 0;\n    for (int int = int + 1 ; int < int ; ++int) {\n        final double double = double[][][int][int];\n        double += double * double;\n    }\n    final double double = (double[][int]) > 0 ? -org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.sqrt(double)) : org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.sqrt(double);\n    double[][int] = double;\n    if (double != 0.0) {\n        double[][int] -= double;\n        for (int int = int + 1 ; int < int ; ++int) {\n            double double = 0;\n            for (int int = int + 1 ; int < int ; ++int) {\n                final double[] double[] = double[][][int];\n                double -= (double[][int]) * (double[][int]);\n            }\n            double /= double * (double[][int]);\n            for (int int = int + 1 ; int < int ; ++int) {\n                final double[] double[] = double[][][int];\n                double[][int] -= double * (double[][int]);\n            }\n        }\n    } \n} ","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:351","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"+1.0189624503698769E-162","position":"org.apache.commons.math3.util.FastMathLiteralArrays:407","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double = double","position":"org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator:90","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"maximalOrder":"i"},"name":"add","transplant":{"sourceCode":"final double[] double[] = new double[int + 1]","position":"org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver:150","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double[] double[] = double[][][int].clone()","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:92","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"for (int int = 0 ; int < int ; ++int) {\n    double double = 0;\n    for (int int = 0 ; int < int ; ++int) {\n        double += (double[][][int][int]) * (double[][int]);\n    }\n    double[][int] = double;\n}","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:380","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (double[].int) ; int++) {\n    final org.apache.commons.math3.distribution.MultivariateNormalDistribution org.apache.commons.math3.distribution.MultivariateNormalDistribution = new org.apache.commons.math3.distribution.MultivariateNormalDistribution(double[][][int] , double[][][][int]);\n    java.util.List<org.apache.commons.math3.util.Pair<java.lang.Double, org.apache.commons.math3.distribution.MultivariateNormalDistribution>>.add(new org.apache.commons.math3.util.Pair<java.lang.Double, org.apache.commons.math3.distribution.MultivariateNormalDistribution>(double[][int] , org.apache.commons.math3.distribution.MultivariateNormalDistribution));\n}","position":"org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution:88","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"+9.222671009756424E-306","position":"org.apache.commons.math3.util.FastMathLiteralArrays:1601","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][int][int] = double[][int]","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:145","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return (int) + (org.apache.commons.math3.random.RandomGenerator.nextInt(int))","position":"org.apache.commons.math3.distribution.UniformIntegerDistribution:172","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (double[].int) ; ++int) {\n    org.apache.commons.math3.analysis.differentiation.DerivativeStructure[][int] = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(double[].int , 1 , int , double[][int]);\n}","position":"org.apache.commons.math3.analysis.differentiation.JacobianFunction:48","type":"CtForImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"double[] = null","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:194","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"final double[] double[] = org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.getLowerBound()","position":"org.apache.commons.math3.optimization.direct.CMAESOptimizer:1045","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double[] double[] = new double[int]","position":"org.apache.commons.math3.random.UnitSphereRandomVectorGenerator:62","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"d":"error","y":"error"},"name":"replace","transplant":{"sourceCode":"if (double > 0.5) {\n    if (double == (-1.0)) {\n        return -0.0;\n    } \n    return double + 1.0;\n} ","position":"org.apache.commons.math3.util.FastMath:3391","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return double","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:311","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"(double)++","position":"org.apache.commons.math3.stat.correlation.StorelessBivariateCovariance:85","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator(this)","position":"org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator:100","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.math3.dfp.Dfp","position":"org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP:136","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator(this)","position":"org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator:80","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"+7.283163019991001E-164","position":"org.apache.commons.math3.util.FastMathLiteralArrays:1926","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = double * double","position":"org.apache.commons.math3.analysis.function.Sigmoid:206","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.RealMatrix.setEntry(int, int, double)","position":"org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance:95","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{"length":"length","idx":"length"},"name":"replace","transplant":{"sourceCode":"if (int >= int) {\n    int = 0;\n} ","position":"org.apache.commons.math3.genetics.CycleCrossover:173","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((double[].int) != (double[].int)) {\n    throw new org.apache.commons.math3.exception.DimensionMismatchException(double[].int , double[].int);\n} ","position":"org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance:66","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"+0.0354953333735466","position":"org.apache.commons.math3.util.FastMathLiteralArrays:5141","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.optimization.fitting.HarmonicFitter.fit(new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(org.apache.commons.math3.optimization.fitting.CurveFitter<org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric>.getObservations()).guess())","position":"org.apache.commons.math3.optimization.fitting.HarmonicFitter:79","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"double double","position":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer:1819","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = ((double)((int * (int + 1)))) / 4.0","position":"org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest:246","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.apache.commons.math3.exception.NullArgumentException()","position":"org.apache.commons.math3.stat.inference.MannWhitneyUTest:76","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{"hiPrec":"expected"},"name":"add","transplant":{"sourceCode":"return ((-1.0) + (double[][0])) + (double[][1])","position":"org.apache.commons.math3.util.FastMath:988","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.stat.inference.TestUtils.org.apache.commons.math3.stat.inference.ChiSquareTest.chiSquare(double[], long[])","position":"org.apache.commons.math3.stat.inference.TestUtils:250","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"double = double","position":"org.apache.commons.math3.transform.FastFourierTransformer:351","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int[][int] = int","position":"org.apache.commons.math3.util.MultidimensionalCounter:178","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.resetTables(int)","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:392","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (double[].int) ; ++int) {\n    final double double = double[][][0][int];\n    final double double = double[][][1][int];\n    final double double = double[][][2][int];\n    final double double = double[][][3][int];\n    double[][int] = ((((double[][int]) - (double * double)) - (double * double)) - (double * double)) - (double * double);\n    double[][int] = (((double * double) + (double * double)) + (double * double)) + (double * double);\n}","position":"org.apache.commons.math3.ode.nonstiff.GillStepInterpolator:135","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum for tree skew factor.\n */\nprivate static enum Skew {\nLEFT_HIGH, RIGHT_HIGH, BALANCED;}","position":"org.apache.commons.math3.geometry.partitioning.utilities.AVLTree:202","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.apache.commons.math3.util.Pair<java.lang.Double, T>.getFirst()) < 0) {\n    throw new org.apache.commons.math3.exception.NotPositiveException(org.apache.commons.math3.util.Pair<java.lang.Double, T>.getFirst());\n} ","position":"org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution:77","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (int > 1) {\n    throw new org.apache.commons.math3.exception.NumberIsTooLargeException(int , 1 , true);\n} ","position":"org.apache.commons.math3.analysis.FunctionUtils:627","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < int ; ++int) {\n    for (int int = 0 ; int < int ; ++int) {\n        final T[] T[] = T[][][int];\n        T[][int] = org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>.visit(int, int, T[][int]);\n    }\n}","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:527","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"final double double = double * ((459.0 / 16.0) + (double * (((-729.0) / 8.0) + ((135.0 / 2.0) * double))))","position":"org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator:75","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double * (double * ((375.0 / 32.0) + (double * (((-625.0) / 24.0) + ((double * 125.0) / 8.0)))))","position":"org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator:85","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"final double[] double[]","position":"org.apache.commons.math3.linear.DiagonalMatrix:303","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double[] double[] = org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest.calculateAbsoluteDifferences(double[])","position":"org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest:180","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"double[][int] = (double[][int]) - (double[][int])","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:202","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((double[] == null) || (double[] == null)) {\n    throw new org.apache.commons.math3.exception.NullArgumentException();\n} ","position":"org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest:78","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"int int = 17","position":"org.apache.commons.math3.complex.Quaternion:289","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = org.apache.commons.math3.linear.Array2DRowRealMatrix.getColumnDimension()","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:353","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int[][1] += int[][6]","position":"org.apache.commons.math3.random.ISAACRandom:251","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[] double[] = new double[double[].int]","position":"org.apache.commons.math3.random.CorrelatedRandomVectorGenerator:173","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (double == (-1.0)) {\n    return -0.0;\n} ","position":"org.apache.commons.math3.util.FastMath:3392","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return double","position":"org.apache.commons.math3.fitting.WeightedObservedPoint:75","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"toAppendTo":"buffer"},"name":"replace","transplant":{"sourceCode":"return java.lang.StringBuffer","position":"org.apache.commons.math3.geometry.VectorFormat:215","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.text.NumberFormat.format(java.lang.Double.java.lang.Double.valueOf(double), java.lang.StringBuffer, java.text.FieldPosition)","position":"org.apache.commons.math3.fraction.AbstractFormat:190","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"secondary":"b","k":"i"},"name":"replace","transplant":{"sourceCode":"double double = 1.0 / (double[][(int - 1)])","position":"org.apache.commons.math3.linear.TriDiagonalTransformer:108","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.abs(((double[][int]) - (double[][int])))","position":"org.apache.commons.math3.ml.distance.CanberraDistance:36","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{"pos":"idx","row":"idx","nvars":"idx"},"name":"add","transplant":{"sourceCode":"int += (int - int) - 2","position":"org.apache.commons.math3.stat.regression.MillerUpdatingRegression:878","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"--int","position":"org.apache.commons.math3.util.MultidimensionalCounter:232","type":"CtUnaryOperatorImpl"},"status":0},{"failures":[],"variableMapping":{"x":"x","this":"this"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.math3.util.FastMath.org.apache.commons.math3.util.FastMath.exp(double)","position":"org.apache.commons.math3.analysis.function.Exp:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (double <= 0.5) {\n    return org.apache.commons.math3.special.Gamma.org.apache.commons.math3.special.Gamma.logGamma1p((1.0 + double));\n} else if (double <= 1.5) {\n    return org.apache.commons.math3.special.Gamma.(org.apache.commons.math3.special.Gamma.logGamma1p(double)) + org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.log1p(double));\n} else {\n    return org.apache.commons.math3.special.Gamma.(org.apache.commons.math3.special.Gamma.logGamma1p((double - 1.0))) + org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.log((double * (1.0 + double))));\n}","position":"org.apache.commons.math3.special.Beta:280","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.math3.geometry.partitioning.BSPTree.LeafMerger<S>.merge(this, org.apache.commons.math3.geometry.partitioning.BSPTree<S>, org.apache.commons.math3.geometry.partitioning.BSPTree<S>, boolean, true)","position":"org.apache.commons.math3.geometry.partitioning.BSPTree:387","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = (((double * double) + (double * double)) + (double * double)) + (double * double)","position":"org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator:136","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.apache.commons.math3.random.RandomDataGenerator.reSeed(long)","position":"org.apache.commons.math3.random.RandomDataImpl:461","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.random.RandomDataGenerator.reSeedSecure(long)","position":"org.apache.commons.math3.random.RandomDataImpl:485","type":"CtInvocationImpl"},"status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"while (!boolean) {\n    java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal.subtract(java.math.BigDecimal, java.math.MathContext);\n    java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal.ulp().multiply(java.math.BigDecimal.java.math.BigDecimal, java.math.MathContext);\n    boolean = (java.math.BigDecimal.compareTo(java.math.BigDecimal)) <= 0;\n    java.math.BigDecimal = java.math.BigDecimal.java.math.BigDecimal;\n    java.math.BigDecimal = java.math.BigDecimal;\n    for (int int = 1 ; int < int ; int++) {\n        final java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal(((2 * int) + 1) , java.math.MathContext);\n        final java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal(int , java.math.MathContext);\n        final java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal((int + 1) , java.math.MathContext);\n        java.math.BigDecimal = java.math.BigDecimal.multiply(java.math.BigDecimal, java.math.MathContext);\n        java.math.BigDecimal = java.math.BigDecimal.multiply(java.math.BigDecimal, java.math.MathContext);\n        java.math.BigDecimal = java.math.BigDecimal.multiply(java.math.BigDecimal, java.math.MathContext);\n        java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal.subtract(java.math.BigDecimal, java.math.MathContext);\n        java.math.BigDecimal = java.math.BigDecimal.divide(java.math.BigDecimal, java.math.MathContext);\n        java.math.BigDecimal = java.math.BigDecimal;\n        java.math.BigDecimal = java.math.BigDecimal;\n    }\n    if (!boolean) {\n        if (((java.math.BigDecimal.signum()) * (java.math.BigDecimal.signum())) <= 0) {\n            java.math.BigDecimal = java.math.BigDecimal;\n            java.math.BigDecimal = java.math.BigDecimal;\n            java.math.BigDecimal = java.math.BigDecimal;\n        } else {\n            java.math.BigDecimal = java.math.BigDecimal;\n            java.math.BigDecimal = java.math.BigDecimal;\n            java.math.BigDecimal = java.math.BigDecimal;\n        }\n        java.math.BigDecimal = java.math.BigDecimal.add(java.math.BigDecimal, java.math.MathContext).multiply(java.math.BigDecimal, java.math.MathContext);\n    } \n}","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:136","type":"CtWhileImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"for (int int = int ; int < (int) ; int++) {\n    double[][][int][int] = -(double[][][int][int]);\n}","position":"org.apache.commons.math3.linear.SingularValueDecomposition:233","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int <= int ; ++int) {\n    for (int int = int ; int <= int ; ++int) {\n        org.apache.commons.math3.linear.RealMatrixPreservingVisitor.visit(int, int, double[][][int][int]);\n    }\n}","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:514","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{"x":"mMinusX","this":"this","y":"mMinusX"},"name":"add","transplant":{"sourceCode":"return (org.apache.commons.math3.util.FastMath.abs(double)) + (org.apache.commons.math3.util.FastMath.abs(double))","position":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D:181","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return double + ((double - double) / org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.pow((1 + (double * org.apache.commons.math3.util.FastMath.(org.apache.commons.math3.util.FastMath.exp((double * double))))), double)))","position":"org.apache.commons.math3.analysis.function.Logistic:219","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final int int = 134217729","position":"org.apache.commons.math3.util.FastMath:1624","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = org.apache.commons.math3.linear.Array2DRowFieldMatrix<T>.getColumnDimension()","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:474","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.math3.linear.RealVector.mapDivide(double)","position":"org.apache.commons.math3.linear.RealVector:1408","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Arrays.java.util.Arrays.fill(double[], 0.0)","position":"org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator:196","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"final java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal((int + 1) , java.math.MathContext)","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:101","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal(((2 * int) + 1) , java.math.MathContext)","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:99","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.math3.linear.MatrixUtils.org.apache.commons.math3.linear.MatrixUtils.checkMatrixIndex(this, int, int)","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:323","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double * (double * ((375.0 / 32.0) + (double * (((-625.0) / 24.0) + ((double * 125.0) / 8.0)))))","position":"org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator:85","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"+0.5444341897964478","position":"org.apache.commons.math3.util.FastMathLiteralArrays:5845","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.updateHighOrderDerivativesPhase2(double[], double[], org.apache.commons.math3.linear.Array2DRowRealMatrix)","position":"org.apache.commons.math3.ode.nonstiff.AdamsIntegrator:134","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"int int","position":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer:1820","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = 0","position":"org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance:90","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return double[][int]","position":"org.apache.commons.math3.random.EmpiricalDistribution:837","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double double = 1.0 / org.apache.commons.math3.util.CombinatoricsUtils.(org.apache.commons.math3.util.CombinatoricsUtils.factorial(int))","position":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator:94","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"double += (double[][int]) - double","position":"org.apache.commons.math3.stat.descriptive.moment.Mean:173","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = (((double * double) + (double * double)) + (double * double)) + (double * double)","position":"org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator:136","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.apache.commons.math3.fraction.ProperFractionFormat:173","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.math3.stat.descriptive.SummaryStatistics.getMin()","position":"org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics:144","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"double double = 0","position":"org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator:77","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = ((org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.double) * double) * double","position":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer:1527","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"double = -double","position":"org.apache.commons.math3.analysis.solvers.BrentSolver:197","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.optimization.GoalType = org.apache.commons.math3.optimization.GoalType","position":"org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:130","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"final long long = 1L << (int - 1)","position":"org.apache.commons.math3.analysis.integration.MidPointIntegrator:125","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final long long = ((long)(int)) * int","position":"org.apache.commons.math3.stat.inference.MannWhitneyUTest:176","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"while (int < int) {\n    double += (double[][int++]) * (double[][int++]);\n}","position":"org.apache.commons.math3.linear.BlockRealMatrix:1289","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (((double[]) != null) && (double <= 0.5)) {\n    final double double = (double * (double)) / 8.0;\n    final double double = (4 * double) * double;\n    final double double = double * ((8 - (15 * double)) + (2 * double));\n    final double double = (3 * double) * ((5 * double) - double);\n    final double double = (3 * double) * double;\n    final double double = double * (((-3) * double) + double);\n    for (int int = 0 ; int < (double[].int) ; ++int) {\n        final double double = double[][][0][int];\n        final double double = double[][][1][int];\n        final double double = double[][][2][int];\n        final double double = double[][][3][int];\n        double[][int] = ((((double[][int]) + (double * double)) + (double * double)) + (double * double)) + (double * double);\n        double[][int] = (((double * double) + (double * double)) + (double * double)) + (double * double);\n    }\n} else {\n    final double double = double / 8.0;\n    final double double = (4 * double) * double;\n    final double double = double * ((1 - (7 * double)) + (2 * double));\n    final double double = (3 * double) * ((1 + double) - double);\n    final double double = (3 * double) * (1 + double);\n    final double double = double * ((1 + double) + double);\n    for (int int = 0 ; int < (double[].int) ; ++int) {\n        final double double = double[][][0][int];\n        final double double = double[][][1][int];\n        final double double = double[][][2][int];\n        final double double = double[][][3][int];\n        double[][int] = ((((double[][int]) - (double * double)) - (double * double)) - (double * double)) - (double * double);\n        double[][int] = (((double * double) + (double * double)) + (double * double)) + (double * double);\n    }\n}","position":"org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator:104","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-2.929085835358592E-8","position":"org.apache.commons.math3.util.FastMathLiteralArrays:4340","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = org.apache.commons.math3.linear.RealMatrixChangingVisitor.visit(int, int, double[][int])","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:467","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"double += (double[][int]) * (double[][int])","position":"org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:263","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < int ; ++int) {\n    final T[] T[] = T[][][int];\n    for (int int = 0 ; int < int ; ++int) {\n        org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>.visit(int, int, T[][int]);\n    }\n}","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:476","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return new org.apache.commons.math3.ode.nonstiff.GillStepInterpolator(this)","position":"org.apache.commons.math3.ode.nonstiff.GillStepInterpolator:94","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator(this)","position":"org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator:65","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"+8.537829238438662E-288","position":"org.apache.commons.math3.util.FastMathLiteralArrays:119","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = T[][].int","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:340","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[][int].clear()","position":"org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics:352","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (double[].int) ; ++int) {\n    org.apache.commons.math3.analysis.differentiation.DerivativeStructure[][int] = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(double[].int , 1 , int , double[][int]);\n}","position":"org.apache.commons.math3.analysis.differentiation.JacobianFunction:48","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"for (int int = int ; int > 1 ; int -= 2) {\n    double[][int] = ((int - int) * (double[][int])) - (double[][(int - 1)]);\n    double = (double * double) + (double[][int]);\n    double[][(int - 1)] = (((int - 1) - int) * (double[][(int - 1)])) + (double[][(int - 2)]);\n    double = (double * double) + (double[][(int - 1)]);\n}","position":"org.apache.commons.math3.analysis.function.Sinc:173","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (double[].int) ; ++int) {\n    final double double = double[][][0][int];\n    final double double = double[][][1][int];\n    double[][int] = ((double[][int]) + (double * double)) + (double * double);\n    double[][int] = (double * double) + (double * double);\n}","position":"org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator:95","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Available choices of update formulas for the updating the parameter\n * that is used to compute the successive conjugate search directions.\n * For non-linear conjugate gradients, there are\n * two formulas:\n * <ul>\n * <li>Fletcher-Reeves formula<\/li>\n * <li>Polak-Ribière formula<\/li>\n * <\/ul>\n * \n * On the one hand, the Fletcher-Reeves formula is guaranteed to converge\n * if the start point is close enough of the optimum whether the\n * Polak-Ribière formula may not converge in rare cases. On the\n * other hand, the Polak-Ribière formula is often faster when it\n * does converge. Polak-Ribière is often used.\n * \n * @since 2.0\n */\npublic static enum Formula {\nFLETCHER_REEVES, POLAK_RIBIERE;}","position":"org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:95","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.util.MathUtils.org.apache.commons.math3.util.MathUtils.checkNotNull(org.apache.commons.math3.stat.descriptive.moment.StandardDeviation)","position":"org.apache.commons.math3.stat.descriptive.moment.StandardDeviation:275","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"double double = 0","position":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer:1828","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.analysis.function.Sigmoid.this(0, 1)","position":"org.apache.commons.math3.analysis.function.Sigmoid:53","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    final double double = double * (org.apache.commons.math3.linear.Array2DRowRealMatrix.getEntry(int, int));\n    for (int int = 0 ; int <= int ; int++) {\n        org.apache.commons.math3.linear.ArrayRealVector.setEntry(int, ((org.apache.commons.math3.linear.ArrayRealVector.getEntry(int)) + (double * (org.apache.commons.math3.linear.Array2DRowRealMatrix.getEntry(int, int)))));\n        int++;\n    }\n}","position":"org.apache.commons.math3.optimization.direct.BOBYQAOptimizer:945","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = org.apache.commons.math3.optim.BaseOptimizer<PAIR>.getMaxEvaluations()","position":"org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer:168","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"absX":"theta"},"name":"replace","transplant":{"sourceCode":"final double double = 1 - ((double * double) * double)","position":"org.apache.commons.math3.analysis.interpolation.LoessInterpolator:458","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = double * (1 + (double * (double - 3)))","position":"org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator:206","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.apache.commons.math3.exception.NumberIsTooSmallException(int , 2 , true)","position":"org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP:79","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.apache.commons.math3.exception.DimensionMismatchException(double[][][][int].int , int)","position":"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction:198","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"double double = -((double + 1.0) - (double[][0]))","position":"org.apache.commons.math3.util.FastMath:991","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm.org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm.verifyInputArray(double[], double[])","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm:184","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"cmaxdigits":"column","lsbthreshold":"column","msb":"column"},"name":"replace","transplant":{"sourceCode":"while (int > int) {\n    int /= 10;\n    int--;\n}","position":"org.apache.commons.math3.dfp.DfpDec:175","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.AbstractFieldMatrix<T>.checkColumnIndex(int)","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:367","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"final double double = (2 * double) * (1 - (2 * double))","position":"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:325","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = (double * (double)) / 6.0","position":"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:102","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer<FUNC>.optimizeInternal(int, FUNC, org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.OptimizationData[])","position":"org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer:145","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (double[].int) ; ++int) {\n    double[][int] = org.apache.commons.math3.random.NormalizedRandomGenerator.nextNormalizedDouble();\n}","position":"org.apache.commons.math3.random.CorrelatedRandomVectorGenerator:168","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"+0.3325583338737488","position":"org.apache.commons.math3.util.FastMathLiteralArrays:5508","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][int] = 1","position":"org.apache.commons.math3.analysis.function.Sigmoid:195","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"this.double = this.double","position":"org.apache.commons.math3.linear.SymmLQ:597","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int - 1 ; int >= 0 ; int--) {\n    double = (double[][int]) + ((double - (double[][int])) * double);\n}","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm:188","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (int[][int]) ; int++) {\n    int[][int] = int;\n    org.apache.commons.math3.transform.FastFourierTransformer.MultiDimensionalComplexMatrix.set(org.apache.commons.math3.complex.Complex[][int], int[]);\n}","position":"org.apache.commons.math3.transform.FastFourierTransformer:474","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.linear.RealMatrix.multiply(org.apache.commons.math3.linear.RealMatrix).multiply(org.apache.commons.math3.linear.RealMatrix)","position":"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression:99","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enumerate for the location of a point with respect to the region.\n */\npublic static enum Location {\nINSIDE, OUTSIDE, BOUNDARY;}","position":"org.apache.commons.math3.geometry.partitioning.Region:50","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((double[] == null) || (double[] == null)) {\n    throw new org.apache.commons.math3.exception.NullArgumentException();\n} ","position":"org.apache.commons.math3.stat.inference.MannWhitneyUTest:74","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"c":"columns","value":"columns"},"name":"add","transplant":{"sourceCode":"while ((int & 1) == 1) {\n    int >>= 1;\n    int++;\n}","position":"org.apache.commons.math3.random.SobolSequenceGenerator:268","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < int ; ++int) {\n    final T[] T[] = T[][][int];\n    for (int int = 0 ; int < int ; ++int) {\n        T[][int] = org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>.visit(int, int, T[][int]);\n    }\n}","position":"org.apache.commons.math3.linear.Array2DRowFieldMatrix:461","type":"CtForImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics.setMaxImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[])","position":"org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics:245","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(\"std dev: \")","position":"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics:465","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double[][][int][int] = double","position":"org.apache.commons.math3.linear.RectangularCholeskyDecomposition:143","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal(int , java.math.MathContext)","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:195","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal((int + 1) , java.math.MathContext)","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:101","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.util.List<org.apache.commons.math3.genetics.Chromosome>.size()) >= (int)) {\n    throw new org.apache.commons.math3.exception.NumberIsTooLargeException(org.apache.commons.math3.exception.util.LocalizedFormats.org.apache.commons.math3.exception.util.LocalizedFormats , java.util.List<org.apache.commons.math3.genetics.Chromosome>.size() , int , false);\n} ","position":"org.apache.commons.math3.genetics.ListPopulation:150","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = (double) * (((-5.0) / 48.0) + (double * (((-5.0) / 16.0) + ((double * 5.0) / 12.0))))","position":"org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator:104","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"double = 0","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:354","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double = double[][((-int) - 2)]","position":"org.apache.commons.math3.analysis.function.StepFunction:89","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((org.apache.commons.math3.geometry.partitioning.utilities.AVLTree<T>.Node) != null) {\n    org.apache.commons.math3.geometry.partitioning.utilities.AVLTree<T>.Node.org.apache.commons.math3.geometry.partitioning.utilities.AVLTree<T>.Node = this;\n} ","position":"org.apache.commons.math3.geometry.partitioning.utilities.AVLTree:621","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((double[][][int].int) != int) {\n    throw new org.apache.commons.math3.exception.DimensionMismatchException(double[][][int].int , int);\n} ","position":"org.apache.commons.math3.linear.Array2DRowRealMatrix:291","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final double[] double[] = org.apache.commons.math3.optim.BaseMultivariateOptimizer<PAIR>.getUpperBound()","position":"org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer:170","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final double double = org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer.computeObjectiveValue(double[])","position":"org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:218","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"double[] = new double[int + 1]","position":"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm:202","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"double[][int] = -(double[][int])","position":"org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer:158","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.math3.util.Pair<java.math.BigDecimal[], java.math.BigDecimal[]>(java.math.BigDecimal[] , java.math.BigDecimal[])","position":"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory:214","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int = int","position":"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer:803","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.java.text.NumberFormat = java.text.NumberFormat","position":"org.apache.commons.math3.fraction.AbstractFormat:135","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"integrator"},"name":"replace","transplant":{"sourceCode":"this(null)","position":"org.apache.commons.math3.ode.AbstractIntegrator:99","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.math3.ode.AbstractIntegrator = null","position":"org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator:201","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"int[] int[] = new int[double[].int]","position":"org.apache.commons.math3.stat.regression.MillerUpdatingRegression:961","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int[] int[] = new int[double[].int]","position":"org.apache.commons.math3.analysis.differentiation.JacobianFunction:57","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"int int = (int) - int","position":"org.apache.commons.math3.dfp.Dfp:702","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = double[][].int","position":"org.apache.commons.math3.linear.BiDiagonalTransformer:173","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"sredg":"x","dhd":"normalizedAbscissa","temp":"normalizedAbscissa","org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.HALF":"normalizedAbscissa","sth":"x","org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.ONE":"x","rednew":"x","iu":"length","dredg":"normalizedAbscissa","dhs":"x","isav":"length","redsav":"normalizedAbscissa","redmax":"normalizedAbscissa","angbd":"normalizedAbscissa","angt":"normalizedAbscissa","rdnext":"normalizedAbscissa","rdprev":"x","shs":"x"},"name":"add","transplant":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    double = (double * int) / int;\n    double = (double + double) / (double + (double * double));\n    double = double + (double * (((double * double) - double) - double));\n    double = double * (((double * double) - double) - ((double * double) * double));\n    if (double > double) {\n        double = double;\n        int = int;\n        double = double;\n    } else if (int == (int + 1)) {\n        double = double;\n    } \n    double = double;\n}","position":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer:2144","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (double[].int) ; ++int) {\n    double[][int] += (double[][int]) * double;\n    double[][int] = (double[][int]) + (double[][int]);\n    double[][int] = ((double[][int]) + ((double[][int]) * double)) / double;\n}","position":"org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator:212","type":"CtForImpl"},"status":-2},{"failureDictionary":{}}]

[{"failures":[],"variableMapping":{"resolvedBinding":"supertypeBinding","provideKey":"membersKey","membersKey":"membersKey","key":"membersKey"},"name":"replace","transplant":{"sourceCode":"if ((!(java.lang.String.equals(this.java.lang.String))) && (!(java.lang.String.equals(this.java.lang.String)))) {\n    throw new java.lang.IllegalStateException((\"Unable to create binding for \" + java.lang.String));\n} ","position":"dagger.internal.Linker:147","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (((java.lang.Class<?>) != null) && ((dagger.internal.Binding<? super T>) == null)) {\n    dagger.internal.Binding<? super T> = ((dagger.internal.Binding<? super T>)(dagger.internal.Linker.requestBinding(java.lang.String[][int], java.lang.String, java.lang.ClassLoader, false, true)));\n} ","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:86","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if ((dagger.internal.Binding<? super T>) != null) {\n    dagger.internal.Binding<? super T>.injectMembers(T);\n} ","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:122","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.Binding<? super T>.injectMembers(T)","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:123","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"inlineConstant","inlineConstant":"int int = 0","position":"dagger.internal.Keys:247","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.String java.lang.String","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:190","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.String java.lang.String = dagger.internal.Keys.dagger.internal.Keys.getLazyKey(java.lang.String)","position":"dagger.internal.Linker:215","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return null","position":"dagger.internal.Loader:81","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return dagger.internal.Binding<T>.get()","position":"dagger.ObjectGraph:299","type":"CtReturnImpl"},"status":0},{"failures":[],"binaryOperator":"(dagger.internal.loaders.GeneratedAdapters.java.lang.String) + \"ModuleAdapter\"","name":"math","position":"dagger.internal.loaders.GeneratedAdapters:26","type":"mutation","status":-2},{"failures":[],"variableMapping":{"type":"type"},"name":"add","transplant":{"sourceCode":"return java.lang.reflect.Type","position":"dagger.internal.Keys:271","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type == (long.long))\n    return java.lang.Long.java.lang.Long;\n","position":"dagger.internal.Keys:265","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"int < (dagger.internal.Binding<?>[].int)","name":"conditionalBoundary","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:79","type":"mutation","status":0},{"failures":[],"variableMapping":{"getBindings":"get","contributors":"get"},"name":"add","transplant":{"sourceCode":"java.util.Set<dagger.internal.Binding<?>>.addAll(java.util.Set<dagger.internal.Binding<?>>)","position":"dagger.internal.SetBinding:98","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Collections.java.util.Collections.addAll(java.util.Set<dagger.internal.Binding<?>>, dagger.internal.Binding<?>[])","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:132","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{"type":"type"},"name":"replace","transplant":{"sourceCode":"return ((java.lang.Class<?>)(java.lang.reflect.Type)).getName()","position":"dagger.internal.Keys:74","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return dagger.internal.Keys.dagger.internal.Keys.get(java.lang.reflect.Type, dagger.internal.Keys.dagger.internal.Keys.extractQualifier(java.lang.annotation.Annotation[], java.lang.Object))","position":"dagger.internal.Keys:112","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return dagger.internal.Binding<T>.get()","position":"dagger.ObjectGraph:299","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"Deferred bindings must resolve first.\")","position":"dagger.internal.Linker:461","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * The type of binding into which the return type of the annotated method contributes.\n */\nenum Type {\nUNIQUE, SET, SET_VALUES;}","position":"dagger.Provides:36","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Field[].int) ; int++) {\n    java.lang.reflect.Field[][int].set(null, dagger.internal.Binding<?>[][int].get());\n}","position":"dagger.internal.loaders.ReflectiveStaticInjection:52","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()","position":"dagger.internal.Keys:76","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((int) & (dagger.internal.Binding.int)) != 0","position":"dagger.internal.Binding:138","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Class<?> = dagger.ObjectGraph.DaggerObjectGraph.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String)","position":"dagger.ObjectGraph:325","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.annotation.Annotation java.lang.annotation.Annotation = dagger.internal.Keys.dagger.internal.Keys.extractQualifier(java.lang.annotation.Annotation[], java.lang.Object)","position":"dagger.internal.Keys:92","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"getBindings":"get","contributors":"get"},"name":"replace","transplant":{"sourceCode":"java.util.Set<dagger.internal.Binding<?>>.addAll(java.util.Set<dagger.internal.Binding<?>>)","position":"dagger.internal.SetBinding:98","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Collections.java.util.Collections.addAll(java.util.Set<dagger.internal.Binding<?>>, dagger.internal.Binding<?>[])","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:132","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(java.lang.StringBuilder.toString())","position":"dagger.internal.ThrowingErrorHandler:34","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((!(java.lang.String.equals(dagger.internal.Binding<?>.java.lang.String))) && (!(java.lang.String.equals(dagger.internal.Binding<?>.java.lang.String)))) {\n    throw new java.lang.IllegalStateException((\"Unable to create binding for \" + java.lang.String));\n} ","position":"dagger.internal.Linker:147","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"while ((dagger.internal.Binding<?> = java.util.Queue<dagger.internal.Binding<?>>.poll()) != null) {\n    if (dagger.internal.Binding<?> instanceof dagger.internal.Linker.DeferredBinding) {\n        dagger.internal.Linker.DeferredBinding dagger.internal.Linker.DeferredBinding = ((dagger.internal.Linker.DeferredBinding)(dagger.internal.Binding<?>));\n        java.lang.String java.lang.String = dagger.internal.Linker.DeferredBinding.java.lang.String;\n        boolean boolean = dagger.internal.Linker.DeferredBinding.boolean;\n        if (java.util.Map<java.lang.String, dagger.internal.Binding<?>>.containsKey(java.lang.String)) {\n            continue;\n        } \n        try {\n            dagger.internal.Binding<?> dagger.internal.Binding<?> = dagger.internal.Linker.createBinding(java.lang.String, dagger.internal.Binding<?>.java.lang.Object, dagger.internal.Linker.DeferredBinding.java.lang.ClassLoader, boolean);\n            dagger.internal.Binding<?>.setLibrary(dagger.internal.Binding<?>.library());\n            dagger.internal.Binding<?>.setDependedOn(dagger.internal.Binding<?>.dependedOn());\n            if ((!(java.lang.String.equals(dagger.internal.Binding<?>.java.lang.String))) && (!(java.lang.String.equals(dagger.internal.Binding<?>.java.lang.String)))) {\n                throw new java.lang.IllegalStateException((\"Unable to create binding for \" + java.lang.String));\n            } \n            dagger.internal.Binding<?> dagger.internal.Binding<?> = dagger.internal.Linker.dagger.internal.Linker.scope(dagger.internal.Binding<?>);\n            java.util.Queue<dagger.internal.Binding<?>>.add(dagger.internal.Binding<?>);\n            dagger.internal.Linker.putBinding(dagger.internal.Binding<?>);\n        } catch (dagger.internal.Binding.InvalidBindingException dagger.internal.Binding.InvalidBindingException) {\n            dagger.internal.Linker.addError((((((dagger.internal.Binding.InvalidBindingException.java.lang.String) + \" \") + (dagger.internal.Binding.InvalidBindingException.getMessage())) + \" required by \") + (dagger.internal.Binding<?>.java.lang.Object)));\n            java.util.Map<java.lang.String, dagger.internal.Binding<?>>.put(java.lang.String, dagger.internal.Binding.dagger.internal.Binding<java.lang.Object>);\n        } catch (java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException) {\n            dagger.internal.Linker.addError((((\"Unsupported: \" + (java.lang.UnsupportedOperationException.getMessage())) + \" required by \") + (dagger.internal.Binding<?>.java.lang.Object)));\n            java.util.Map<java.lang.String, dagger.internal.Binding<?>>.put(java.lang.String, dagger.internal.Binding.dagger.internal.Binding<java.lang.Object>);\n        } catch (java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n            dagger.internal.Linker.addError((((java.lang.IllegalArgumentException.getMessage()) + \" required by \") + (dagger.internal.Binding<?>.java.lang.Object)));\n            java.util.Map<java.lang.String, dagger.internal.Binding<?>>.put(java.lang.String, dagger.internal.Binding.dagger.internal.Binding<java.lang.Object>);\n        } catch (java.lang.RuntimeException java.lang.RuntimeException) {\n            throw java.lang.RuntimeException;\n        } catch (java.lang.Exception java.lang.Exception) {\n            throw new java.lang.RuntimeException(java.lang.Exception);\n        }\n    } else {\n        boolean = true;\n        dagger.internal.Binding<?>.attach(this);\n        if (boolean) {\n            dagger.internal.Binding<?>.setLinked();\n        } else {\n            java.util.Queue<dagger.internal.Binding<?>>.add(dagger.internal.Binding<?>);\n        }\n    }\n}","position":"dagger.internal.Linker:133","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.util.Map<dagger.internal.ModuleAdapter<?>, java.lang.Object>.containsKey(dagger.internal.ModuleAdapter<?>))) {\n    java.util.Map<dagger.internal.ModuleAdapter<?>, java.lang.Object>.put(dagger.internal.ModuleAdapter<?>, dagger.internal.ModuleAdapter<?>.newModule());\n} ","position":"dagger.internal.Modules:61","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"dagger.internal.Binding<?> dagger.internal.Binding<?> = dagger.internal.Loader.getAtInjectBinding(java.lang.String, java.lang.String, java.lang.ClassLoader, boolean)","position":"dagger.internal.Linker:225","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return dagger.ObjectGraph.DaggerObjectGraph.dagger.ObjectGraph.DaggerObjectGraph.makeGraph(this, dagger.internal.Loader, java.lang.Object[])","position":"dagger.ObjectGraph:231","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.AssertionError(\"Unresolved binding should never be called to inject.\")","position":"dagger.internal.Binding:28","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.AssertionError()","position":"dagger.internal.Linker:276","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"classLoader":"classLoader","className":"className"},"name":"replace","transplant":{"sourceCode":"return java.lang.ClassLoader.loadClass(java.lang.String)","position":"dagger.internal.Loader:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return java.lang.ClassLoader.loadClass(java.lang.String);\n} catch (java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    return java.lang.Void.java.lang.Void;\n}","position":"dagger.internal.Loader:33","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (!(dagger.internal.Binding<?>.isLinked())) {\n    java.util.Queue<dagger.internal.Binding<?>>.add(dagger.internal.Binding<?>);\n} ","position":"dagger.internal.Linker:106","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return T","position":"dagger.internal.Loader:85","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"dagger.internal.SetBinding<T> = ((dagger.internal.SetBinding<T>)(dagger.internal.Binding<?>))","position":"dagger.internal.SetBinding:41","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((!(java.lang.String.equals(dagger.internal.Binding<?>.java.lang.String))) && (!(java.lang.String.equals(dagger.internal.Binding<?>.java.lang.String)))) {\n    throw new java.lang.IllegalStateException((\"Unable to create binding for \" + java.lang.String));\n} ","position":"dagger.internal.Linker:147","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"key":"key"},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String)","position":"dagger.internal.Linker:223","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException((\"Unable to create binding for \" + java.lang.String))","position":"dagger.internal.Linker:148","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()","position":"dagger.internal.Keys:94","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException()","position":"dagger.internal.LazyBinding:45","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Module overrides cannot contribute set bindings.\")","position":"dagger.ObjectGraph:202","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException((\"Unable to create binding for \" + java.lang.String))","position":"dagger.internal.Linker:148","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.String + (java.lang.String.substring((int + (java.lang.String.length())), ((java.lang.String.length()) - 1)))","position":"dagger.internal.Keys:228","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"continue","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:170","type":"CtContinueImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (K == null) {\n    throw new java.lang.NullPointerException(\"key == null\");\n} ","position":"dagger.internal.Memoizer:40","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return dagger.internal.SetBinding<T>","position":"dagger.internal.SetBinding:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (dagger.internal.Binding<?> != null) {\n    throw new java.lang.IllegalArgumentException((((\"Duplicate:\\n    \" + dagger.internal.Binding<?>) + \"\\n    \") + dagger.internal.Binding<?>));\n} else {\n    dagger.internal.SetBinding<T> = new dagger.internal.SetBinding<T>(java.lang.String , dagger.internal.Binding<?>.java.lang.Object);\n    dagger.internal.SetBinding<T>.setLibrary(dagger.internal.Binding<?>.library());\n    java.util.Map<java.lang.String, dagger.internal.Binding<?>>.put(java.lang.String, dagger.internal.SetBinding<T>);\n    return ((dagger.internal.SetBinding<T>)(java.util.Map<java.lang.String, dagger.internal.Binding<?>>.get(java.lang.String)));\n}","position":"dagger.internal.SetBinding:44","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"int < (java.lang.reflect.Field[].int)","name":"conditionalBoundary","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:119","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.List<java.lang.String>.add(dagger.internal.Keys.dagger.internal.Keys.getMembersKey(java.lang.Class<? super T>))","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:220","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"No static injections: \" + (java.lang.Class<?>.getName())))","position":"dagger.internal.loaders.ReflectiveStaticInjection:69","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"dagger.internal.ModuleAdapter:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.String.startsWith(\"java.\")) || (java.lang.String.startsWith(\"javax.\"))) || (java.lang.String.startsWith(\"android.\"))","position":"dagger.internal.Keys:258","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object) == (dagger.internal.Linker.java.lang.Object)) {\n    synchronized(this) {\n        if ((java.lang.Object) == (dagger.internal.Linker.java.lang.Object)) {\n            java.lang.Object = dagger.internal.Binding<T>.get();\n        } \n    }\n} ","position":"dagger.internal.Linker:362","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"dagger.internal.Binding<?>[] = new dagger.internal.Binding<?>[java.lang.reflect.Field[].int]","position":"dagger.internal.loaders.ReflectiveStaticInjection:42","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((dagger.internal.Binding<?>[][int]) == null) {\n    dagger.internal.Binding<?>[][int] = dagger.internal.Linker.requestBinding(java.lang.String[][int], java.lang.reflect.Constructor<T>, java.lang.ClassLoader);\n} ","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:80","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    return java.util.Map<K, V>.toString();\n} finally {\n    java.util.concurrent.locks.Lock.unlock();\n}","position":"dagger.internal.Memoizer:75","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection>.getValue().inject()","position":"dagger.ObjectGraph:288","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return (\"DeferredBinding[deferredKey=\" + (java.lang.String)) + \"]\"","position":"dagger.internal.Linker:465","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.String java.lang.String = dagger.internal.Keys.dagger.internal.Keys.getBuiltInBindingsKey(java.lang.String)","position":"dagger.internal.Linker:211","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"private static class DeferredBinding extends dagger.internal.Binding<java.lang.Object> {\n    /** \n     * Loader originally intended to load this binding, to be used in loading the actual one\n     */\nfinal java.lang.ClassLoader classLoader;\n\n    final java.lang.String deferredKey;\n\n    final boolean mustHaveInjections;\n\n    private DeferredBinding(java.lang.String deferredKey ,java.lang.ClassLoader classLoader ,java.lang.Object requiredBy ,boolean mustHaveInjections) {\n        dagger.internal.Binding<java.lang.Object>.super(null, null, false, java.lang.Object);\n        this.java.lang.String = java.lang.String;\n        this.java.lang.ClassLoader = java.lang.ClassLoader;\n        this.boolean = boolean;\n    }\n\n    @java.lang.Override\n    public void injectMembers(java.lang.Object t) {\n        throw new java.lang.UnsupportedOperationException(\"Deferred bindings must resolve first.\");\n    }\n\n    @java.lang.Override\n    public void getDependencies(java.util.Set<dagger.internal.Binding<?>> get, java.util.Set<dagger.internal.Binding<?>> injectMembers) {\n        throw new java.lang.UnsupportedOperationException(\"Deferred bindings must resolve first.\");\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return (\"DeferredBinding[deferredKey=\" + (java.lang.String)) + \"]\";\n    }\n}","position":"dagger.internal.Linker:442","type":"CtClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<? super T> java.lang.Class<? super T> = java.lang.Class<T>.getSuperclass()","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:215","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = int ; int < (java.util.List<dagger.internal.Binding<?>>.size()) ; int++) {\n    java.lang.StringBuilder.append(\"\\n    \").append((int - int)).append(\". \").append(java.util.List<dagger.internal.Binding<?>>.get(int).java.lang.String).append(\" bound by \").append(java.util.List<dagger.internal.Binding<?>>.get(int));\n}","position":"dagger.internal.ProblemDetector:62","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException((\"No no-args constructor on \" + (java.lang.Object.getClass().getName())))","position":"dagger.internal.ModuleAdapter:60","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection> java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection> : java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection>.entrySet()) {\n    dagger.internal.StaticInjection dagger.internal.StaticInjection = java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection>.getValue();\n    if (dagger.internal.StaticInjection == null) {\n        dagger.internal.StaticInjection = dagger.internal.Loader.getStaticInjection(java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection>.getKey());\n        java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection>.setValue(dagger.internal.StaticInjection);\n    } \n    dagger.internal.StaticInjection.attach(dagger.internal.Linker);\n}","position":"dagger.ObjectGraph:235","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append((int - int))","position":"dagger.internal.ProblemDetector:63","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor()","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:180","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new dagger.internal.Binding.InvalidBindingException(java.lang.Class<T>.getName() , \"has too many injectable constructors\");\n} ","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:172","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"dagger.internal.UniqueMap<K, V>.put(java.util.Map.Entry<? extends K, ? extends V>.getKey(), java.util.Map.Entry<? extends K, ? extends V>.getValue())","position":"dagger.internal.UniqueMap:35","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append((int - int)).append(\". \").append(java.util.List<dagger.internal.Binding<?>>.get(int).java.lang.String).append(\" bound by \").append(java.util.List<dagger.internal.Binding<?>>.get(int))","position":"dagger.internal.ProblemDetector:63","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException()","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:94","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((dagger.internal.ModuleAdapter<java.lang.Object>.java.lang.Class<java.lang.Object>.getSimpleName()) + \" is an overriding module and cannot contribute set bindings.\"))","position":"dagger.ObjectGraph:180","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new dagger.internal.Linker.ErrorHandler() {\n    @java.lang.Override\n    public void handleErrors(java.util.List<java.lang.String> errors) {\n    }\n}","position":"dagger.internal.Linker:427","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.Binding<?> dagger.internal.Binding<?> = java.util.Map<java.lang.String, dagger.internal.Binding<?>>.get(java.lang.String)","position":"dagger.internal.SetBinding:38","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Module overrides cannot contribute set bindings.\")","position":"dagger.ObjectGraph:202","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.NullPointerException(\"linker\")","position":"dagger.ObjectGraph:147","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"resolvedBinding":"binding","binding":"binding"},"name":"replace","transplant":{"sourceCode":"dagger.internal.Binding<?>.setDependedOn(dagger.internal.Binding<?>.dependedOn())","position":"dagger.internal.Linker:145","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.Binding<?>.setLinked()","position":"dagger.internal.Linker:175","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * The type of binding into which the return type of the annotated method contributes.\n */\nenum Type {\nUNIQUE, SET, SET_VALUES;}","position":"dagger.Provides:36","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.Binding<?>.setDependedOn(true)","position":"dagger.internal.Linker:286","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"dagger.internal.Linker:413","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == this) {\n    return true;\n} else if (java.lang.Object instanceof dagger.internal.ModuleAdapter<?>) {\n    dagger.internal.ModuleAdapter<?> dagger.internal.ModuleAdapter<?> = ((dagger.internal.ModuleAdapter<?>)(java.lang.Object));\n    return this.java.lang.Class<T>.equals(dagger.internal.ModuleAdapter<?>.java.lang.Class<?>);\n} else {\n    return false;\n}","position":"dagger.internal.ModuleAdapter:65","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Cannot install further bindings after calling linkAll().\")","position":"dagger.internal.Linker:84","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((((\"Duplicate:\\n    \" + V) + \"\\n    \") + V))","position":"dagger.internal.UniqueMap:29","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"dagger.internal.Linker:413","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((int) & (dagger.internal.Binding.int)) != 0","position":"dagger.internal.Binding:138","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(java.lang.annotation.Annotation)","position":"dagger.internal.Keys:96","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    dagger.internal.Keys.dagger.internal.Keys.typeToString(java.lang.reflect.ParameterizedType.getRawType(), java.lang.StringBuilder, true);\n    java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    java.lang.StringBuilder.append(\"<\");\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        if (int != 0) {\n            java.lang.StringBuilder.append(\", \");\n        } \n        dagger.internal.Keys.dagger.internal.Keys.typeToString(java.lang.reflect.Type[][int], java.lang.StringBuilder, true);\n    }\n    java.lang.StringBuilder.append(\">\");\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type));\n    dagger.internal.Keys.dagger.internal.Keys.typeToString(java.lang.reflect.GenericArrayType.getGenericComponentType(), java.lang.StringBuilder, false);\n    java.lang.StringBuilder.append(\"[]\");\n} else {\n    throw new java.lang.UnsupportedOperationException((\"Uninjectable type \" + java.lang.reflect.Type));\n}","position":"dagger.internal.Keys:153","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"type":"type"},"name":"add","transplant":{"sourceCode":"return java.lang.reflect.Type","position":"dagger.internal.Keys:271","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type == (boolean.boolean))\n    return java.lang.Boolean.java.lang.Boolean;\n","position":"dagger.internal.Keys:267","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.AssertionError(java.lang.IllegalAccessException)","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:126","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException((\"Failed to initialize \" + java.lang.String) , java.lang.IllegalAccessException)","position":"dagger.internal.Loader:89","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * The type of binding into which the return type of the annotated method contributes.\n */\nenum Type {\nUNIQUE, SET, SET_VALUES;}","position":"dagger.Provides:36","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.loaders.ReflectiveAtInjectBinding<T>.injectMembers(T)","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:113","type":"CtInvocationImpl"},"status":-2},{"failures":[],"binaryOperator":"((java.lang.reflect.Constructor<T>.getModifiers()) & (java.lang.reflect.Modifier.int)) != 0","name":"negateConditional","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:192","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((dagger.internal.Binding<?>[][int]) == null) {\n    dagger.internal.Binding<?>[][int] = dagger.internal.Linker.requestBinding(java.lang.String[][int], java.lang.reflect.Constructor<T>, java.lang.ClassLoader);\n} ","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:80","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (dagger.ObjectGraph.DaggerObjectGraph != null) {\n    java.util.Map<java.lang.String, dagger.internal.Binding<?>> java.util.Map<java.lang.String, dagger.internal.Binding<?>> = dagger.ObjectGraph.DaggerObjectGraph.linkEverything();\n    for (java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>> java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>> : java.util.Map<java.lang.String, dagger.internal.Binding<?>>.entrySet()) {\n        if ((java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>>.getValue()) instanceof dagger.internal.SetBinding) {\n            dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>>.put(java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>>.getKey(), new dagger.internal.SetBinding<java.lang.Object>(((dagger.internal.SetBinding<java.lang.Object>)(java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>>.getValue()))));\n        } \n    }\n} ","position":"dagger.ObjectGraph:218","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.NullPointerException(\"staticInjections\")","position":"dagger.ObjectGraph:149","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException((\"Unable to create binding for \" + java.lang.String))","position":"dagger.internal.Linker:148","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"dagger.internal.Binding<?>.setVisiting(true)","position":"dagger.internal.ProblemDetector:70","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    dagger.internal.ProblemDetector.ArraySet<dagger.internal.Binding<?>> dagger.internal.ProblemDetector.ArraySet<dagger.internal.Binding<?>> = new dagger.internal.ProblemDetector.ArraySet<dagger.internal.Binding<?>>();\n    dagger.internal.Binding<?>.getDependencies(dagger.internal.ProblemDetector.ArraySet<dagger.internal.Binding<?>>, dagger.internal.ProblemDetector.ArraySet<dagger.internal.Binding<?>>);\n    dagger.internal.ProblemDetector.dagger.internal.ProblemDetector.detectCircularDependencies(dagger.internal.ProblemDetector.ArraySet<dagger.internal.Binding<?>>, java.util.List<dagger.internal.Binding<?>>);\n    dagger.internal.Binding<?>.setCycleFree(true);\n} finally {\n    java.util.List<dagger.internal.Binding<?>>.remove(((java.util.List<dagger.internal.Binding<?>>.size()) - 1));\n    dagger.internal.Binding<?>.setVisiting(false);\n}","position":"dagger.internal.ProblemDetector:72","type":"CtTryImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ((java.lang.String.indexOf('<', int)) == (-1)) && ((java.lang.String.indexOf('[', int)) == (-1)) ? java.lang.String.substring(int) : null","position":"dagger.internal.Keys:251","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Float.java.lang.Float","position":"dagger.internal.Keys:268","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"T T","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:100","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.IllegalArgumentException java.lang.IllegalArgumentException","position":"dagger.internal.Linker:160","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.util.Set<T>.addAll(((java.util.Set<T>)(java.lang.Object)))","position":"dagger.internal.SetBinding:88","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Set<T>.add(((T)(java.lang.Object)))","position":"dagger.internal.SetBinding:90","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Map<java.lang.String, dagger.internal.Binding<?>> = java.util.Collections.java.util.Collections.unmodifiableMap(java.util.Map<java.lang.String, dagger.internal.Binding<?>>)","position":"dagger.internal.Linker:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Void.java.lang.Void)) {\n    throw new java.lang.IllegalStateException(java.lang.String.java.lang.String.format(\"Could not load class %s needed for binding %s\", java.lang.String, java.lang.String));\n} ","position":"dagger.internal.FailoverLoader:67","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.annotation.Annotation[][] java.lang.annotation.Annotation[][] = java.lang.reflect.Constructor<T>.getParameterAnnotations()","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:201","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.Constructor<T>.getGenericParameterTypes()","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:198","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return new dagger.internal.Linker.SingletonBinding<T>(dagger.internal.Binding<T>)","position":"dagger.internal.Linker:321","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (dagger.internal.Binding<?> == null) {\n    dagger.internal.Binding<?> dagger.internal.Binding<?> = new dagger.internal.Linker.DeferredBinding(java.lang.String , java.lang.ClassLoader , java.lang.Object , boolean);\n    dagger.internal.Binding<?>.setLibrary(boolean);\n    dagger.internal.Binding<?>.setDependedOn(true);\n    java.util.Queue<dagger.internal.Binding<?>>.add(dagger.internal.Binding<?>);\n    boolean = false;\n    return null;\n} ","position":"dagger.internal.Linker:281","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.String java.lang.String = dagger.internal.Keys.dagger.internal.Keys.getMembersKey(java.lang.Class<T>)","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:224","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Void.java.lang.Void","position":"dagger.internal.Loader:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"dagger.internal.Binding<?>[][int] = dagger.internal.Linker.requestBinding(java.lang.String, java.lang.reflect.Field, java.lang.ClassLoader)","position":"dagger.internal.loaders.ReflectiveStaticInjection:46","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.Binding<?>[][int] = dagger.internal.Linker.requestBinding(java.lang.String[][int], java.lang.reflect.Field[][int], java.lang.ClassLoader)","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:74","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"injectedClass":"injectedClass","fields":"fields"},"name":"add","transplant":{"sourceCode":"if (java.util.List<java.lang.reflect.Field>.isEmpty()) {\n    throw new java.lang.IllegalArgumentException((\"No static injections: \" + (java.lang.Class<?>.getName())));\n} ","position":"dagger.internal.loaders.ReflectiveStaticInjection:68","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (java.lang.reflect.Field java.lang.reflect.Field : java.lang.Class<?>.getDeclaredFields()) {\n    if (java.lang.reflect.Modifier.(java.lang.reflect.Modifier.isStatic(java.lang.reflect.Field.getModifiers())) && (java.lang.reflect.Field.isAnnotationPresent(javax.inject.Inject.javax.inject.Inject))) {\n        java.lang.reflect.Field.setAccessible(true);\n        java.util.List<java.lang.reflect.Field>.add(java.lang.reflect.Field);\n    } \n}","position":"dagger.internal.loaders.ReflectiveStaticInjection:62","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"dagger.internal.Binding<?> dagger.internal.Binding<?> = null","position":"dagger.internal.Linker:272","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.Binding<?> dagger.internal.Binding<?> = java.util.Map<java.lang.String, dagger.internal.Binding<?>>.get(java.lang.String)","position":"dagger.internal.SetBinding:38","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * The type of binding into which the return type of the annotated method contributes.\n */\nenum Type {\nUNIQUE, SET, SET_VALUES;}","position":"dagger.Provides:36","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (dagger.internal.ModuleAdapter<java.lang.Object>.java.lang.Class<?>[].int) ; int++) {\n    java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection>.put(dagger.internal.ModuleAdapter<java.lang.Object>.java.lang.Class<?>[][int], null);\n}","position":"dagger.ObjectGraph:173","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int = 0","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:208","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException((\"Can\\'t inject private field: \" + java.lang.reflect.Field))","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:156","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"binding":"value"},"name":"replace","transplant":{"sourceCode":"dagger.internal.Binding<?>.setVisiting(true)","position":"dagger.internal.ProblemDetector:70","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (dagger.internal.Binding<?> instanceof dagger.internal.SetBinding) {\n    throw new java.lang.IllegalArgumentException(\"Module overrides cannot contribute set bindings.\");\n} ","position":"dagger.ObjectGraph:201","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return T","position":"dagger.ObjectGraph:309","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?> == null) {\n    throw new java.lang.IllegalArgumentException(((\"No inject registered for \" + java.lang.String) + \". You must explicitly add it to the \\'injects\\' option in one of your modules.\"));\n} ","position":"dagger.ObjectGraph:328","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"getBindings":"injectMembers","contributors":"injectMembers"},"name":"replace","transplant":{"sourceCode":"java.util.Set<dagger.internal.Binding<?>>.addAll(java.util.Set<dagger.internal.Binding<?>>)","position":"dagger.internal.SetBinding:98","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Set<dagger.internal.Binding<?>>.add(dagger.internal.Binding<? super T>)","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:136","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"dagger.ObjectGraph.DaggerObjectGraph.linkStaticInjections()","position":"dagger.ObjectGraph:282","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new dagger.internal.LazyBinding<java.lang.Object>(java.lang.String , java.lang.Object , java.lang.ClassLoader , java.lang.String)","position":"dagger.internal.Linker:217","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.String = null","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:207","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.String java.lang.String = dagger.internal.Keys.dagger.internal.Keys.getClassName(java.lang.String)","position":"dagger.internal.Linker:220","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"deferredBinding":"binding"},"name":"add","transplant":{"sourceCode":"dagger.internal.Binding<?>.setDependedOn(true)","position":"dagger.internal.Linker:286","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    dagger.internal.Binding<?>.setLinked();\n} else {\n    java.util.Queue<dagger.internal.Binding<?>>.add(dagger.internal.Binding<?>);\n}","position":"dagger.internal.Linker:174","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Class<?> != null)\n    break;\n","position":"dagger.ObjectGraph:326","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return dagger.internal.Binding<?>","position":"dagger.internal.BuiltInBinding:48","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor()","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:180","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (java.lang.reflect.Constructor<T> java.lang.reflect.Constructor<T> : dagger.internal.loaders.ReflectiveAtInjectBinding<T>.dagger.internal.loaders.ReflectiveAtInjectBinding.getConstructorsForType(java.lang.Class<T>)) {\n    if (!(java.lang.reflect.Constructor<T>.isAnnotationPresent(javax.inject.Inject.javax.inject.Inject))) {\n        continue;\n    } \n    if (java.lang.reflect.Constructor<T> != null) {\n        throw new dagger.internal.Binding.InvalidBindingException(java.lang.Class<T>.getName() , \"has too many injectable constructors\");\n    } \n    java.lang.reflect.Constructor<T> = java.lang.reflect.Constructor<T>;\n}","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:168","type":"CtForEachImpl"},"status":-2},{"failures":[],"binaryOperator":"java.lang.String != null","name":"negateConditional","position":"dagger.internal.Linker:216","type":"mutation","status":0},{"failures":[],"variableMapping":{"entry":"entry","staticInjection":"staticInjection"},"name":"add","transplant":{"sourceCode":"java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection>.setValue(dagger.internal.StaticInjection)","position":"dagger.ObjectGraph:239","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.StaticInjection = dagger.internal.Loader.getStaticInjection(java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection>.getKey())","position":"dagger.ObjectGraph:238","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"dagger.internal.Binding<?>.setLibrary(boolean)","position":"dagger.internal.Linker:296","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return dagger.internal.Linker.requestBinding(java.lang.String, java.lang.Object, java.lang.Object.getClass().getClassLoader(), boolean, boolean)","position":"dagger.internal.Linker:253","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (dagger.internal.Binding<?> instanceof dagger.internal.SetBinding) {\n    dagger.internal.SetBinding<T> = ((dagger.internal.SetBinding<T>)(dagger.internal.Binding<?>));\n    dagger.internal.SetBinding<T>.setLibrary(((dagger.internal.SetBinding<T>.library()) && (dagger.internal.Binding<?>.library())));\n    return dagger.internal.SetBinding<T>;\n} else if (dagger.internal.Binding<?> != null) {\n    throw new java.lang.IllegalArgumentException((((\"Duplicate:\\n    \" + dagger.internal.Binding<?>) + \"\\n    \") + dagger.internal.Binding<?>));\n} else {\n    dagger.internal.SetBinding<T> = new dagger.internal.SetBinding<T>(java.lang.String , dagger.internal.Binding<?>.java.lang.Object);\n    dagger.internal.SetBinding<T>.setLibrary(dagger.internal.Binding<?>.library());\n    java.util.Map<java.lang.String, dagger.internal.Binding<?>>.put(java.lang.String, dagger.internal.SetBinding<T>);\n    return ((dagger.internal.SetBinding<T>)(java.util.Map<java.lang.String, dagger.internal.Binding<?>>.get(java.lang.String)));\n}","position":"dagger.internal.SetBinding:40","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return dagger.internal.ModuleAdapter<?>","position":"dagger.internal.FailoverLoader:48","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (V == null) {\n    throw new java.lang.NullPointerException(\"create returned null\");\n} ","position":"dagger.internal.Memoizer:57","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.StaticInjection dagger.internal.StaticInjection = dagger.internal.Loader.instantiate(java.lang.Class<?>.getName().concat(dagger.internal.loaders.GeneratedAdapters.java.lang.String), java.lang.Class<?>.getClassLoader())","position":"dagger.internal.FailoverLoader:78","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"linker"},"name":"replace","transplant":{"sourceCode":"dagger.internal.Linker.linkRequested()","position":"dagger.internal.Linker:110","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.Binding<T>.attach(dagger.internal.Linker)","position":"dagger.internal.Linker:353","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.NullPointerException(\"staticInjections\")","position":"dagger.ObjectGraph:149","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException((\"Uninjectable type \" + java.lang.reflect.Type))","position":"dagger.internal.Keys:170","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * The type of binding into which the return type of the annotated method contributes.\n */\nenum Type {\nUNIQUE, SET, SET_VALUES;}","position":"dagger.Provides:36","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (dagger.internal.ModuleAdapter<java.lang.Object>.java.lang.String[].int) ; int++) {\n    java.util.Map<java.lang.String, java.lang.Class<?>>.put(dagger.internal.ModuleAdapter<java.lang.Object>.java.lang.String[][int], dagger.internal.ModuleAdapter<java.lang.Object>.java.lang.Class<java.lang.Object>);\n}","position":"dagger.ObjectGraph:170","type":"CtForImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<dagger.internal.Binding>.add(dagger.internal.Binding<?>)","position":"dagger.internal.ProblemDetector:36","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(java.lang.annotation.Annotation)","position":"dagger.internal.Keys:96","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.IllegalArgumentException java.lang.IllegalArgumentException","position":"dagger.internal.Linker:160","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if ((java.lang.Object) == (dagger.internal.LazyBinding.java.lang.Object)) {\n    synchronized(this) {\n        if ((java.lang.Object) == (dagger.internal.LazyBinding.java.lang.Object)) {\n            java.lang.Object = dagger.internal.Binding<T>.get();\n        } \n    }\n} ","position":"dagger.internal.LazyBinding:56","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(this) {\n    if ((java.lang.Object) == (dagger.internal.LazyBinding.java.lang.Object)) {\n        java.lang.Object = dagger.internal.Binding<T>.get();\n    } \n}","position":"dagger.internal.LazyBinding:57","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append((int + 1)).append(\". \").append(java.util.List<dagger.internal.Binding>.get(int).java.lang.Object)","position":"dagger.internal.ProblemDetector:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((dagger.internal.Binding<T>.java.lang.String) != null) {\n    dagger.internal.Linker.putIfAbsent(java.util.Map<java.lang.String, dagger.internal.Binding<?>>, dagger.internal.Binding<T>.java.lang.String, dagger.internal.Binding<T>);\n} ","position":"dagger.internal.Linker:306","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"dagger.internal.Linker:413","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String.startsWith(\"@\")","position":"dagger.internal.Keys:238","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"dagger.internal.Binding<T>.setLibrary(true)","position":"dagger.internal.Linker:405","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((dagger.internal.Linker != this) && (!(dagger.internal.Binding<?>.isLinked())))\n    throw new java.lang.AssertionError();\n","position":"dagger.internal.Linker:276","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"dagger.internal.UniqueMap<K, V>.put(java.util.Map.Entry<? extends K, ? extends V>.getKey(), java.util.Map.Entry<? extends K, ? extends V>.getValue())","position":"dagger.internal.UniqueMap:35","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type))","position":"dagger.internal.Keys:154","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(java.lang.Class<?>.getName())","position":"dagger.internal.Keys:149","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (dagger.internal.Binding<?> != null) {\n    throw new java.lang.IllegalArgumentException((((\"Duplicate:\\n    \" + dagger.internal.Binding<?>) + \"\\n    \") + dagger.internal.Binding<?>));\n} else {\n    dagger.internal.SetBinding<T> = new dagger.internal.SetBinding<T>(java.lang.String , dagger.internal.Binding<?>.java.lang.Object);\n    dagger.internal.SetBinding<T>.setLibrary(dagger.internal.Binding<?>.library());\n    java.util.Map<java.lang.String, dagger.internal.Binding<?>>.put(java.lang.String, dagger.internal.SetBinding<T>);\n    return ((dagger.internal.SetBinding<T>)(java.util.Map<java.lang.String, dagger.internal.Binding<?>>.get(java.lang.String)));\n}","position":"dagger.internal.SetBinding:44","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    for (int int = 0 ; int < (java.lang.reflect.Field[].int) ; int++) {\n        java.lang.reflect.Field[][int].set(T, dagger.internal.Binding<?>[][int].get());\n    }\n    if ((dagger.internal.Binding<? super T>) != null) {\n        dagger.internal.Binding<? super T>.injectMembers(T);\n    } \n} catch (java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.AssertionError(java.lang.IllegalAccessException);\n}","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:118","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<dagger.internal.Binding>.add(dagger.internal.Binding<?>)","position":"dagger.internal.ProblemDetector:36","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"int |= dagger.internal.Binding.int","position":"dagger.internal.Binding:106","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.int = boolean ? (int) | (dagger.internal.Binding.int) : (int) & (~(dagger.internal.Binding.int))","position":"dagger.internal.Binding:130","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.AssertionError()","position":"dagger.internal.Linker:276","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String)","position":"dagger.internal.Linker:223","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"static class DaggerObjectGraph extends dagger.ObjectGraph {\n    private final dagger.ObjectGraph.DaggerObjectGraph base;\n\n    private final dagger.internal.Linker linker;\n\n    private final dagger.internal.Loader plugin;\n\n    private final java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection> staticInjections;\n\n    private final java.util.Map<java.lang.String, java.lang.Class<?>> injectableTypes;\n\n    DaggerObjectGraph(dagger.ObjectGraph.DaggerObjectGraph base ,dagger.internal.Linker linker ,dagger.internal.Loader plugin ,java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection> staticInjections ,java.util.Map<java.lang.String, java.lang.Class<?>> injectableTypes) {\n        if (dagger.internal.Linker == null)\n            throw new java.lang.NullPointerException(\"linker\");\n        \n        if (dagger.internal.Loader == null)\n            throw new java.lang.NullPointerException(\"plugin\");\n        \n        if (java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection> == null)\n            throw new java.lang.NullPointerException(\"staticInjections\");\n        \n        if (java.util.Map<java.lang.String, java.lang.Class<?>> == null)\n            throw new java.lang.NullPointerException(\"injectableTypes\");\n        \n        this.dagger.ObjectGraph.DaggerObjectGraph = dagger.ObjectGraph.DaggerObjectGraph;\n        this.dagger.internal.Linker = dagger.internal.Linker;\n        this.dagger.internal.Loader = dagger.internal.Loader;\n        this.java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection> = java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection>;\n        this.java.util.Map<java.lang.String, java.lang.Class<?>> = java.util.Map<java.lang.String, java.lang.Class<?>>;\n    }\n\n    private static dagger.ObjectGraph makeGraph(dagger.ObjectGraph.DaggerObjectGraph base, dagger.internal.Loader plugin, java.lang.Object... modules) {\n        java.util.Map<java.lang.String, java.lang.Class<?>> java.util.Map<java.lang.String, java.lang.Class<?>> = new java.util.LinkedHashMap<java.lang.String, java.lang.Class<?>>();\n        java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection> java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection> = new java.util.LinkedHashMap<java.lang.Class<?>, dagger.internal.StaticInjection>();\n        dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>> dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>> = dagger.ObjectGraph.DaggerObjectGraph.dagger.ObjectGraph.DaggerObjectGraph.initBaseBindings(dagger.ObjectGraph.DaggerObjectGraph);\n        dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>> dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>> = dagger.ObjectGraph.DaggerObjectGraph.dagger.ObjectGraph.DaggerObjectGraph.initOverrideBindings();\n        java.util.Map<dagger.internal.ModuleAdapter<?>, java.lang.Object> java.util.Map<dagger.internal.ModuleAdapter<?>, java.lang.Object> = dagger.internal.Modules.dagger.internal.Modules.loadModules(dagger.internal.Loader, java.lang.Object[]);\n        for (java.util.Map.Entry<dagger.internal.ModuleAdapter<?>, java.lang.Object> java.util.Map.Entry<dagger.internal.ModuleAdapter<?>, java.lang.Object> : java.util.Map<dagger.internal.ModuleAdapter<?>, java.lang.Object>.entrySet()) {\n            @java.lang.SuppressWarnings(value = \"unchecked\")\n            dagger.internal.ModuleAdapter<java.lang.Object> dagger.internal.ModuleAdapter<java.lang.Object> = ((dagger.internal.ModuleAdapter<java.lang.Object>)(java.util.Map.Entry<dagger.internal.ModuleAdapter<?>, java.lang.Object>.getKey()));\n            for (int int = 0 ; int < (dagger.internal.ModuleAdapter<java.lang.Object>.java.lang.String[].int) ; int++) {\n                java.util.Map<java.lang.String, java.lang.Class<?>>.put(dagger.internal.ModuleAdapter<java.lang.Object>.java.lang.String[][int], dagger.internal.ModuleAdapter<java.lang.Object>.java.lang.Class<java.lang.Object>);\n            }\n            for (int int = 0 ; int < (dagger.internal.ModuleAdapter<java.lang.Object>.java.lang.Class<?>[].int) ; int++) {\n                java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection>.put(dagger.internal.ModuleAdapter<java.lang.Object>.java.lang.Class<?>[][int], null);\n            }\n            try {\n                java.util.Map<java.lang.String, dagger.internal.Binding<?>> java.util.Map<java.lang.String, dagger.internal.Binding<?>> = dagger.internal.ModuleAdapter<java.lang.Object>.boolean ? dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>> : dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>>;\n                dagger.internal.ModuleAdapter<java.lang.Object>.getBindings(java.util.Map<java.lang.String, dagger.internal.Binding<?>>, java.util.Map.Entry<dagger.internal.ModuleAdapter<?>, java.lang.Object>.getValue());\n            } catch (java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n                throw new java.lang.IllegalArgumentException(((dagger.internal.ModuleAdapter<java.lang.Object>.java.lang.Class<java.lang.Object>.getSimpleName()) + \" is an overriding module and cannot contribute set bindings.\"));\n            }\n        }\n        dagger.internal.Linker dagger.internal.Linker = new dagger.internal.Linker((dagger.ObjectGraph.DaggerObjectGraph != null ? dagger.ObjectGraph.DaggerObjectGraph.dagger.internal.Linker : null) , dagger.internal.Loader , new dagger.internal.ThrowingErrorHandler());\n        dagger.internal.Linker.installBindings(dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>>);\n        dagger.internal.Linker.installBindings(dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>>);\n        return new dagger.ObjectGraph.DaggerObjectGraph(dagger.ObjectGraph.DaggerObjectGraph , dagger.internal.Linker , dagger.internal.Loader , java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection> , java.util.Map<java.lang.String, java.lang.Class<?>>);\n    }\n\n    /** \n     * Returns an empty {@code UniqueMap} which will throw errors if a SetBinding is added\n     * to it.\n     */\nprivate static dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>> initOverrideBindings() {\n        return new dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>>() {\n            @java.lang.Override\n            public dagger.internal.Binding<?> put(java.lang.String key, dagger.internal.Binding<?> value) {\n                if (dagger.internal.Binding<?> instanceof dagger.internal.SetBinding) {\n                    throw new java.lang.IllegalArgumentException(\"Module overrides cannot contribute set bindings.\");\n                } \n                return dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>>.put(java.lang.String, dagger.internal.Binding<?>);\n            }\n        };\n    }\n\n    /** \n     * Extract bindings in the 'base' and 'overrides' set. Within each set no\n     * duplicates are permitted.  Set-bindings are propagated (and cloned) from the parent\n     * to ensure that parent graph participants only see parent bindings, but the child\n     * graph sees parent+child contributions.\n     */\nprivate static dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>> initBaseBindings(dagger.ObjectGraph.DaggerObjectGraph base) {\n        dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>> dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>> = new dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>>();\n        if (dagger.ObjectGraph.DaggerObjectGraph != null) {\n            java.util.Map<java.lang.String, dagger.internal.Binding<?>> java.util.Map<java.lang.String, dagger.internal.Binding<?>> = dagger.ObjectGraph.DaggerObjectGraph.linkEverything();\n            for (java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>> java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>> : java.util.Map<java.lang.String, dagger.internal.Binding<?>>.entrySet()) {\n                if ((java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>>.getValue()) instanceof dagger.internal.SetBinding) {\n                    dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>>.put(java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>>.getKey(), new dagger.internal.SetBinding<java.lang.Object>(((dagger.internal.SetBinding<java.lang.Object>)(java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>>.getValue()))));\n                } \n            }\n        } \n        return dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>>;\n    }\n\n    @java.lang.Override\n    public dagger.ObjectGraph plus(java.lang.Object... modules) {\n        return dagger.ObjectGraph.DaggerObjectGraph.dagger.ObjectGraph.DaggerObjectGraph.makeGraph(this, dagger.internal.Loader, java.lang.Object[]);\n    }\n\n    private void linkStaticInjections() {\n        for (java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection> java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection> : java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection>.entrySet()) {\n            dagger.internal.StaticInjection dagger.internal.StaticInjection = java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection>.getValue();\n            if (dagger.internal.StaticInjection == null) {\n                dagger.internal.StaticInjection = dagger.internal.Loader.getStaticInjection(java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection>.getKey());\n                java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection>.setValue(dagger.internal.StaticInjection);\n            } \n            dagger.internal.StaticInjection.attach(dagger.internal.Linker);\n        }\n    }\n\n    private void linkInjectableTypes() {\n        for (java.util.Map.Entry<java.lang.String, java.lang.Class<?>> java.util.Map.Entry<java.lang.String, java.lang.Class<?>> : java.util.Map<java.lang.String, java.lang.Class<?>>.entrySet()) {\n            dagger.internal.Linker.requestBinding(java.util.Map.Entry<java.lang.String, java.lang.Class<?>>.getKey(), java.util.Map.Entry<java.lang.String, java.lang.Class<?>>.getValue(), java.util.Map.Entry<java.lang.String, java.lang.Class<?>>.getValue().getClassLoader(), false, true);\n        }\n    }\n\n    @java.lang.Override\n    public void validate() {\n        java.util.Map<java.lang.String, dagger.internal.Binding<?>> java.util.Map<java.lang.String, dagger.internal.Binding<?>> = dagger.ObjectGraph.DaggerObjectGraph.linkEverything();\n        new dagger.internal.ProblemDetector().detectProblems(java.util.Map<java.lang.String, dagger.internal.Binding<?>>.values());\n    }\n\n    /** \n     * Links all bindings, injectable types and static injections.\n     */\nprivate java.util.Map<java.lang.String, dagger.internal.Binding<?>> linkEverything() {\n        java.util.Map<java.lang.String, dagger.internal.Binding<?>> java.util.Map<java.lang.String, dagger.internal.Binding<?>> = dagger.internal.Linker.fullyLinkedBindings();\n        if (java.util.Map<java.lang.String, dagger.internal.Binding<?>> != null) {\n            return java.util.Map<java.lang.String, dagger.internal.Binding<?>>;\n        } \n        synchronized(dagger.internal.Linker) {\n            if ((java.util.Map<java.lang.String, dagger.internal.Binding<?>> = dagger.internal.Linker.fullyLinkedBindings()) != null) {\n                return java.util.Map<java.lang.String, dagger.internal.Binding<?>>;\n            } \n            dagger.ObjectGraph.DaggerObjectGraph.linkStaticInjections();\n            dagger.ObjectGraph.DaggerObjectGraph.linkInjectableTypes();\n            return dagger.internal.Linker.linkAll();\n        }\n    }\n\n    @java.lang.Override\n    public void injectStatics() {\n        synchronized(dagger.internal.Linker) {\n            dagger.ObjectGraph.DaggerObjectGraph.linkStaticInjections();\n            dagger.internal.Linker.linkRequested();\n            dagger.ObjectGraph.DaggerObjectGraph.linkStaticInjections();\n        }\n        for (java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection> java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection> : java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection>.entrySet()) {\n            java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection>.getValue().inject();\n        }\n    }\n\n    @java.lang.Override\n    public <T>T get(java.lang.Class<T> type) {\n        java.lang.String java.lang.String = dagger.internal.Keys.dagger.internal.Keys.get(java.lang.Class<T>);\n        java.lang.String java.lang.String = java.lang.Class<T>.isInterface() ? java.lang.String : dagger.internal.Keys.dagger.internal.Keys.getMembersKey(java.lang.Class<T>);\n        java.lang.ClassLoader java.lang.ClassLoader = java.lang.Class<T>.getClassLoader();\n        @java.lang.SuppressWarnings(value = \"unchecked\")\n        dagger.internal.Binding<T> dagger.internal.Binding<T> = dagger.ObjectGraph.DaggerObjectGraph.((dagger.internal.Binding<T>)(getInjectableTypeBinding(java.lang.ClassLoader, java.lang.String, java.lang.String)));\n        return dagger.internal.Binding<T>.get();\n    }\n\n    @java.lang.Override\n    public <T>T inject(T instance) {\n        java.lang.String java.lang.String = dagger.internal.Keys.dagger.internal.Keys.getMembersKey(T.getClass());\n        java.lang.ClassLoader java.lang.ClassLoader = T.getClass().getClassLoader();\n        @java.lang.SuppressWarnings(value = \"unchecked\")\n        dagger.internal.Binding<T> dagger.internal.Binding<T> = dagger.ObjectGraph.DaggerObjectGraph.((dagger.internal.Binding<T>)(getInjectableTypeBinding(java.lang.ClassLoader, java.lang.String, java.lang.String)));\n        dagger.internal.Binding<T>.injectMembers(T);\n        return T;\n    }\n\n    /** \n     * @param classLoader the {@code ClassLoader} used to load dependent bindings.\n     * @param injectableKey the key used to store the injectable type. This\n     * is a provides key for interfaces and a members injection key for\n     * other types. That way keys can always be created, even if the type\n     * has no injectable constructor.\n     * @param key the key to use when retrieving the binding. This may be a\n     * regular (provider) key or a members key.\n     */\nprivate dagger.internal.Binding<?> getInjectableTypeBinding(java.lang.ClassLoader classLoader, java.lang.String injectableKey, java.lang.String key) {\n        java.lang.Class<?> java.lang.Class<?> = null;\n        for (dagger.ObjectGraph.DaggerObjectGraph dagger.ObjectGraph.DaggerObjectGraph = this ; dagger.ObjectGraph.DaggerObjectGraph != null ; dagger.ObjectGraph.DaggerObjectGraph = dagger.ObjectGraph.DaggerObjectGraph.dagger.ObjectGraph.DaggerObjectGraph) {\n            java.lang.Class<?> = dagger.ObjectGraph.DaggerObjectGraph.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String);\n            if (java.lang.Class<?> != null)\n                break;\n            \n        }\n        if (java.lang.Class<?> == null) {\n            throw new java.lang.IllegalArgumentException(((\"No inject registered for \" + java.lang.String) + \". You must explicitly add it to the \\'injects\\' option in one of your modules.\"));\n        } \n        synchronized(dagger.internal.Linker) {\n            dagger.internal.Binding<?> dagger.internal.Binding<?> = dagger.internal.Linker.requestBinding(java.lang.String, java.lang.Class<?>, java.lang.ClassLoader, false, true);\n            if ((dagger.internal.Binding<?> == null) || (!(dagger.internal.Binding<?>.isLinked()))) {\n                dagger.internal.Linker.linkRequested();\n                dagger.internal.Binding<?> = dagger.internal.Linker.requestBinding(java.lang.String, java.lang.Class<?>, java.lang.ClassLoader, false, true);\n            } \n            return dagger.internal.Binding<?>;\n        }\n    }\n}","position":"dagger.ObjectGraph:135","type":"CtClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((T)(dagger.internal.Binding<?>))","position":"dagger.internal.BuiltInBinding:44","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"dagger.internal.Linker.putIfAbsent(java.util.Map<java.lang.String, dagger.internal.Binding<?>>, dagger.internal.Binding<T>.java.lang.String, dagger.internal.Binding<T>)","position":"dagger.internal.Linker:310","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = 0","position":"dagger.internal.Keys:247","type":"CtLocalVariableImpl"},"status":-2},{"failureDictionary":{}}]

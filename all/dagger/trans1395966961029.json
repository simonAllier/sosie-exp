[{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.List<java.lang.reflect.Field>.add(java.lang.reflect.Field)","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:159","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.util.List<java.lang.reflect.Field>.isEmpty())) {\n    try {\n        java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor();\n    } catch (java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    }\n} else if (boolean) {\n    throw new dagger.internal.Binding.InvalidBindingException(java.lang.Class<T>.getName() , \"has no injectable members. Do you want to add an injectable constructor?\");\n} ","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:178","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if ((!(java.lang.reflect.Field.isAnnotationPresent(javax.inject.Inject.javax.inject.Inject))) || java.lang.reflect.Modifier.(java.lang.reflect.Modifier.isStatic(java.lang.reflect.Field.getModifiers()))) {\n    continue;\n} ","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:152","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.(java.lang.reflect.Modifier.isStatic(java.lang.reflect.Field.getModifiers())) && (java.lang.reflect.Field.isAnnotationPresent(javax.inject.Inject.javax.inject.Inject))) {\n    java.lang.reflect.Field.setAccessible(true);\n    java.util.List<java.lang.reflect.Field>.add(java.lang.reflect.Field);\n} ","position":"dagger.internal.loaders.ReflectiveStaticInjection:63","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * The type of binding into which the return type of the annotated method contributes.\n */\nenum Type {\nUNIQUE, SET, SET_VALUES;}","position":"dagger.Provides:36","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.Modules.dagger.internal.Modules.collectIncludedModulesRecursively(dagger.internal.Loader, dagger.internal.ModuleAdapter<?>, java.util.Map<java.lang.Class<?>, dagger.internal.ModuleAdapter<?>>)","position":"dagger.internal.Modules:57","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.Class<?> != null)\n    break;\n","position":"dagger.ObjectGraph:326","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (boolean) {\n        throw new java.lang.UnsupportedOperationException((\"Uninjectable type \" + (java.lang.Class<?>.getName())));\n    } \n    java.lang.StringBuilder.append(java.lang.Class<?>.getName());\n} else {\n    java.lang.StringBuilder.append(java.lang.Class<?>.getName());\n}","position":"dagger.internal.Keys:145","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Constructor<T> java.lang.reflect.Constructor<T> = null","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:167","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = dagger.internal.Keys.dagger.internal.Keys.startOfType(java.lang.String)","position":"dagger.internal.Keys:181","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.AssertionError()","position":"dagger.internal.Linker:276","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(java.lang.StringBuilder.toString())","position":"dagger.internal.ProblemDetector:67","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.concurrent.locks.Lock.lock()","position":"dagger.internal.Memoizer:62","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<? super T> != null) {\n    if (dagger.internal.Keys.dagger.internal.Keys.isPlatformType(java.lang.Class<? super T>.getName())) {\n        java.lang.Class<? super T> = null;\n    } else {\n        java.util.List<java.lang.String>.add(dagger.internal.Keys.dagger.internal.Keys.getMembersKey(java.lang.Class<? super T>));\n    }\n} ","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:216","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.reflect.Type","position":"dagger.internal.Keys:271","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type == (char.char))\n    return java.lang.Character.java.lang.Character;\n","position":"dagger.internal.Keys:266","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"dagger.internal.ProblemDetector.detectUnusedBinding(java.util.Collection<dagger.internal.Binding<?>>)","position":"dagger.internal.ProblemDetector:86","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (dagger.internal.Binding<?> dagger.internal.Binding<?> : java.util.Collection<dagger.internal.Binding<?>>) {\n    if (dagger.internal.Binding<?>.isCycleFree()) {\n        continue;\n    } \n    if (dagger.internal.Binding<?>.isVisiting()) {\n        int int = java.util.List<dagger.internal.Binding<?>>.indexOf(dagger.internal.Binding<?>);\n        java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder().append(\"Dependency cycle:\");\n        for (int int = int ; int < (java.util.List<dagger.internal.Binding<?>>.size()) ; int++) {\n            java.lang.StringBuilder.append(\"\\n    \").append((int - int)).append(\". \").append(java.util.List<dagger.internal.Binding<?>>.get(int).java.lang.String).append(\" bound by \").append(java.util.List<dagger.internal.Binding<?>>.get(int));\n        }\n        java.lang.StringBuilder.append(\"\\n    \").append(0).append(\". \").append(dagger.internal.Binding<?>.java.lang.String);\n        throw new java.lang.IllegalStateException(java.lang.StringBuilder.toString());\n    } \n    dagger.internal.Binding<?>.setVisiting(true);\n    java.util.List<dagger.internal.Binding<?>>.add(dagger.internal.Binding<?>);\n    try {\n        dagger.internal.ProblemDetector.ArraySet<dagger.internal.Binding<?>> dagger.internal.ProblemDetector.ArraySet<dagger.internal.Binding<?>> = new dagger.internal.ProblemDetector.ArraySet<dagger.internal.Binding<?>>();\n        dagger.internal.Binding<?>.getDependencies(dagger.internal.ProblemDetector.ArraySet<dagger.internal.Binding<?>>, dagger.internal.ProblemDetector.ArraySet<dagger.internal.Binding<?>>);\n        dagger.internal.ProblemDetector.dagger.internal.ProblemDetector.detectCircularDependencies(dagger.internal.ProblemDetector.ArraySet<dagger.internal.Binding<?>>, java.util.List<dagger.internal.Binding<?>>);\n        dagger.internal.Binding<?>.setCycleFree(true);\n    } finally {\n        java.util.List<dagger.internal.Binding<?>>.remove(((java.util.List<dagger.internal.Binding<?>>.size()) - 1));\n        dagger.internal.Binding<?>.setVisiting(false);\n    }\n}","position":"dagger.internal.ProblemDetector:53","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Cannot install further bindings after calling linkAll().\")","position":"dagger.internal.Linker:84","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new dagger.internal.Binding.InvalidBindingException(java.lang.String , (\"could not be bound with key \" + java.lang.String))","position":"dagger.internal.Linker:230","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Queue<dagger.internal.Binding<?>>.add(dagger.internal.Binding<?>)","position":"dagger.internal.Linker:107","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()","position":"dagger.internal.Keys:76","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * The type of binding into which the return type of the annotated method contributes.\n */\nenum Type {\nUNIQUE, SET, SET_VALUES;}","position":"dagger.Provides:36","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.Modules.dagger.internal.Modules.collectIncludedModulesRecursively(dagger.internal.Loader, dagger.internal.ModuleAdapter<?>, java.util.Map<java.lang.Class<?>, dagger.internal.ModuleAdapter<?>>)","position":"dagger.internal.Modules:78","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"dagger.internal.ModuleAdapter:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return dagger.internal.Binding<T>.isLinked()","position":"dagger.internal.Linker:381","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.reflect.Constructor<T>.setAccessible(true)","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:197","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((dagger.internal.Binding<?>[][int]) == null) {\n    dagger.internal.Binding<?>[][int] = dagger.internal.Linker.requestBinding(java.lang.String[][int], java.lang.reflect.Constructor<T>, java.lang.ClassLoader);\n} ","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:80","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * The type of binding into which the return type of the annotated method contributes.\n */\nenum Type {\nUNIQUE, SET, SET_VALUES;}","position":"dagger.Provides:36","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.Modules.dagger.internal.Modules.collectIncludedModulesRecursively(dagger.internal.Loader, dagger.internal.ModuleAdapter<?>, java.util.Map<java.lang.Class<?>, dagger.internal.ModuleAdapter<?>>)","position":"dagger.internal.Modules:57","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = dagger.internal.Loader.loadClass(java.lang.ClassLoader, java.lang.String)","position":"dagger.internal.FailoverLoader:66","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return dagger.internal.Binding<?>","position":"dagger.ObjectGraph:339","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"((java.lang.String.indexOf('<', int)) == (-1)) && ((java.lang.String.indexOf('[', int)) == (-1))","name":"removeConditional","position":"dagger.internal.Keys:251","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Field[].int) ; int++) {\n    java.lang.reflect.Field[][int].set(null, dagger.internal.Binding<?>[][int].get());\n}","position":"dagger.internal.loaders.ReflectiveStaticInjection:52","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.SetBinding<T> = new dagger.internal.SetBinding<T>(java.lang.String , dagger.internal.Binding<?>.java.lang.Object)","position":"dagger.internal.SetBinding:47","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"getBindings":"get","contributors":"get"},"name":"add","transplant":{"sourceCode":"java.util.Set<dagger.internal.Binding<?>>.addAll(java.util.Set<dagger.internal.Binding<?>>)","position":"dagger.internal.SetBinding:98","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Collections.java.util.Collections.addAll(java.util.Set<dagger.internal.Binding<?>>, dagger.internal.Binding<?>[])","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:132","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"delegate":"binding"},"name":"replace","transplant":{"sourceCode":"return dagger.internal.Binding<?>","position":"dagger.internal.BuiltInBinding:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (dagger.internal.Binding<?> != null) {\n    return dagger.internal.Binding<?>;\n} ","position":"dagger.internal.Linker:227","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * The type of binding into which the return type of the annotated method contributes.\n */\nenum Type {\nUNIQUE, SET, SET_VALUES;}","position":"dagger.Provides:36","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.Linker.linkRequested()","position":"dagger.internal.Linker:110","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.String java.lang.String = java.lang.Class<T>.isInterface() ? java.lang.String : dagger.internal.Keys.dagger.internal.Keys.getMembersKey(java.lang.Class<T>)","position":"dagger.ObjectGraph:294","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * The type of binding into which the return type of the annotated method contributes.\n */\nenum Type {\nUNIQUE, SET, SET_VALUES;}","position":"dagger.Provides:36","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.Linker.linkRequested()","position":"dagger.ObjectGraph:283","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Module overrides cannot contribute set bindings.\")","position":"dagger.ObjectGraph:202","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new dagger.internal.Binding.InvalidBindingException(dagger.internal.Keys.dagger.internal.Keys.getClassName(java.lang.String) , \"is exclusively members injected and therefore cannot be scoped\")","position":"dagger.internal.Binding:66","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return null","position":"dagger.internal.FailoverLoader:72","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(dagger.internal.Linker) {\n    dagger.internal.Binding<?> dagger.internal.Binding<?> = dagger.internal.Linker.requestBinding(java.lang.String, java.lang.Class<?>, java.lang.ClassLoader, false, true);\n    if ((dagger.internal.Binding<?> == null) || (!(dagger.internal.Binding<?>.isLinked()))) {\n        dagger.internal.Linker.linkRequested();\n        dagger.internal.Binding<?> = dagger.internal.Linker.requestBinding(java.lang.String, java.lang.Class<?>, java.lang.ClassLoader, false, true);\n    } \n    return dagger.internal.Binding<?>;\n}","position":"dagger.ObjectGraph:333","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (dagger.internal.Binding<?>.isCycleFree()) {\n    continue;\n} ","position":"dagger.internal.ProblemDetector:54","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.Binding<?>.setVisiting(false)","position":"dagger.internal.ProblemDetector:79","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"dagger.internal.Loader:88","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = java.util.List<dagger.internal.Binding<?>>.indexOf(dagger.internal.Binding<?>)","position":"dagger.internal.ProblemDetector:59","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int = java.lang.reflect.Type[].int","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:199","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.String java.lang.String = dagger.internal.Keys.dagger.internal.Keys.getBuiltInBindingsKey(java.lang.String)","position":"dagger.internal.Linker:211","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"Deferred bindings must resolve first.\")","position":"dagger.internal.Linker:461","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.NullPointerException(\"linker\")","position":"dagger.ObjectGraph:147","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"injectedConstructor":"injectedConstructor","mustHaveInjections":"mustHaveInjections","type":"type","injectedFields":"injectedFields"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Constructor<T> == null) {\n    if (!(java.util.List<java.lang.reflect.Field>.isEmpty())) {\n        try {\n            java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor();\n        } catch (java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n        }\n    } else if (boolean) {\n        throw new dagger.internal.Binding.InvalidBindingException(java.lang.Class<T>.getName() , \"has no injectable members. Do you want to add an injectable constructor?\");\n    } \n} ","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:177","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.util.List<java.lang.reflect.Field>.isEmpty())) {\n    try {\n        java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor();\n    } catch (java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    }\n} else if (boolean) {\n    throw new dagger.internal.Binding.InvalidBindingException(java.lang.Class<T>.getName() , \"has no injectable members. Do you want to add an injectable constructor?\");\n} ","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:178","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * The type of binding into which the return type of the annotated method contributes.\n */\nenum Type {\nUNIQUE, SET, SET_VALUES;}","position":"dagger.Provides:36","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (java.lang.reflect.Field java.lang.reflect.Field : java.lang.Class<?>.getDeclaredFields()) {\n    if (java.lang.reflect.Modifier.(java.lang.reflect.Modifier.isStatic(java.lang.reflect.Field.getModifiers())) && (java.lang.reflect.Field.isAnnotationPresent(javax.inject.Inject.javax.inject.Inject))) {\n        java.lang.reflect.Field.setAccessible(true);\n        java.util.List<java.lang.reflect.Field>.add(java.lang.reflect.Field);\n    } \n}","position":"dagger.internal.loaders.ReflectiveStaticInjection:62","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"dagger.internal.Binding<T>.setLibrary(true)","position":"dagger.internal.Linker:405","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object) == (dagger.internal.LazyBinding.java.lang.Object)) {\n    synchronized(this) {\n        if ((java.lang.Object) == (dagger.internal.LazyBinding.java.lang.Object)) {\n            java.lang.Object = dagger.internal.Binding<T>.get();\n        } \n    }\n} ","position":"dagger.internal.LazyBinding:56","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"((dagger.internal.ModuleAdapter<java.lang.Object>.java.lang.Class<java.lang.Object>.getSimpleName()) + \" is an overriding module and cannot contribute set bindings.\")","name":"math","position":"dagger.DaggerObjectGraph:180","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Constructor<T> == null) {\n    if (!(java.util.List<java.lang.reflect.Field>.isEmpty())) {\n        try {\n            java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor();\n        } catch (java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n        }\n    } else if (boolean) {\n        throw new dagger.internal.Binding.InvalidBindingException(java.lang.Class<T>.getName() , \"has no injectable members. Do you want to add an injectable constructor?\");\n    } \n} ","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:177","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.Modules.dagger.internal.Modules.collectIncludedModulesRecursively(dagger.internal.Loader, dagger.internal.ModuleAdapter<?>, java.util.Map<java.lang.Class<?>, dagger.internal.ModuleAdapter<?>>)","position":"dagger.internal.Modules:78","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (dagger.internal.ModuleAdapter<?> == null) {\n    throw new java.lang.IllegalStateException((((\"Module adapter for \" + java.lang.Class<?>) + \" could not be loaded. \") + \"Please ensure that code generation was run for this module.\"));\n} ","position":"dagger.internal.FailoverLoader:44","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"dagger.internal.Binding<?>.setDependedOn(dagger.internal.Binding<?>.dependedOn())","position":"dagger.internal.Linker:145","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.Binding<?>.setVisiting(false)","position":"dagger.internal.ProblemDetector:79","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.UnsupportedOperationException();\n} ","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:93","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor();\n} catch (java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n}","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:179","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"dagger.internal.Binding<T>.setVisiting(boolean)","position":"dagger.internal.Linker:401","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (dagger.internal.Binding<?>.isVisiting()) {\n    int int = java.util.List<dagger.internal.Binding<?>>.indexOf(dagger.internal.Binding<?>);\n    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder().append(\"Dependency cycle:\");\n    for (int int = int ; int < (java.util.List<dagger.internal.Binding<?>>.size()) ; int++) {\n        java.lang.StringBuilder.append(\"\\n    \").append((int - int)).append(\". \").append(java.util.List<dagger.internal.Binding<?>>.get(int).java.lang.String).append(\" bound by \").append(java.util.List<dagger.internal.Binding<?>>.get(int));\n    }\n    java.lang.StringBuilder.append(\"\\n    \").append(0).append(\". \").append(dagger.internal.Binding<?>.java.lang.String);\n    throw new java.lang.IllegalStateException(java.lang.StringBuilder.toString());\n} ","position":"dagger.internal.ProblemDetector:58","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(java.lang.StringBuilder.toString())","position":"dagger.internal.ProblemDetector:67","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.AssertionError(\"Unresolved binding should never be called to inject.\")","position":"dagger.internal.Binding:31","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"values":"values","this":"this"},"name":"add","transplant":{"sourceCode":"dagger.internal.ProblemDetector.detectUnusedBinding(java.util.Collection<dagger.internal.Binding<?>>)","position":"dagger.internal.ProblemDetector:86","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.ProblemDetector.detectCircularDependencies(java.util.Collection<dagger.internal.Binding<?>>)","position":"dagger.internal.ProblemDetector:85","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (java.util.Map.Entry<java.lang.String, java.lang.Class<?>> java.util.Map.Entry<java.lang.String, java.lang.Class<?>> : java.util.Map<java.lang.String, java.lang.Class<?>>.entrySet()) {\n    dagger.internal.Linker.requestBinding(java.util.Map.Entry<java.lang.String, java.lang.Class<?>>.getKey(), java.util.Map.Entry<java.lang.String, java.lang.Class<?>>.getValue(), java.util.Map.Entry<java.lang.String, java.lang.Class<?>>.getValue().getClassLoader(), false, true);\n}","position":"dagger.ObjectGraph:246","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append((int - int)).append(\". \").append(java.util.List<dagger.internal.Binding<?>>.get(int).java.lang.String)","position":"dagger.internal.ProblemDetector:63","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"/** \n * An exception thrown by anything attempting to construct a binding which is invalid.\n */\npublic static class InvalidBindingException extends java.lang.RuntimeException {\n    public final java.lang.String type;\n\n    public InvalidBindingException(java.lang.String type ,java.lang.String error) {\n        java.lang.RuntimeException.super(java.lang.String);\n        this.java.lang.String = java.lang.String;\n    }\n\n    public InvalidBindingException(java.lang.String type ,java.lang.String error ,java.lang.Throwable cause) {\n        java.lang.RuntimeException.super((((\"Binding for \" + java.lang.String) + \" was invalid: \") + java.lang.String), java.lang.Throwable);\n        this.java.lang.String = java.lang.String;\n    }\n}","position":"dagger.internal.Binding:155","type":"CtClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Collections.java.util.Collections.addAll(java.util.Set<dagger.internal.Binding<?>>, dagger.internal.Binding<?>[])","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:134","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"inlineConstant","inlineConstant":"int int = 0","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:97","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return false","position":"dagger.internal.ModuleAdapter:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String.startsWith(\"@\")","position":"dagger.internal.Keys:238","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * The type of binding into which the return type of the annotated method contributes.\n */\nenum Type {\nUNIQUE, SET, SET_VALUES;}","position":"dagger.Provides:36","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (K == null) {\n    throw new java.lang.NullPointerException(\"key == null\");\n} ","position":"dagger.internal.Memoizer:40","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.annotation.Annotation[]) {\n    if (!(dagger.internal.Keys.dagger.internal.Memoizer<java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Boolean>.get(java.lang.annotation.Annotation.annotationType()))) {\n        continue;\n    } \n    if (java.lang.annotation.Annotation != null) {\n        throw new java.lang.IllegalArgumentException((\"Too many qualifier annotations on \" + java.lang.Object));\n    } \n    java.lang.annotation.Annotation = java.lang.annotation.Annotation;\n}","position":"dagger.internal.Keys:122","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return dagger.internal.ModuleAdapter<?>","position":"dagger.internal.FailoverLoader:48","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Map<dagger.internal.ModuleAdapter<?>, java.lang.Object>.put(dagger.internal.ModuleAdapter<?>, dagger.internal.ModuleAdapter<?>.newModule())","position":"dagger.internal.Modules:62","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.NullPointerException(\"plugin\")","position":"dagger.internal.Linker:66","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"delegate":"delegate","dagger.internal.LazyBinding.NOT_PRESENT":"dagger.internal.LazyBinding.NOT_PRESENT","cacheValue":"cacheValue"},"name":"add","transplant":{"sourceCode":"if ((this.java.lang.Object) == (this.dagger.internal.LazyBinding.java.lang.Object)) {\n    this.java.lang.Object = this.dagger.internal.Binding<T>.get();\n} ","position":"dagger.internal.LazyBinding:58","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object) == (dagger.internal.LazyBinding.java.lang.Object)) {\n    synchronized(this) {\n        if ((java.lang.Object) == (dagger.internal.LazyBinding.java.lang.Object)) {\n            java.lang.Object = dagger.internal.Binding<T>.get();\n        } \n    }\n} ","position":"dagger.internal.LazyBinding:56","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"boolean = true","position":"dagger.internal.Linker:172","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"Cannot inject into a Set binding\")","position":"dagger.internal.SetBinding:102","type":"CtThrowImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"new dagger.Provides.Type()","position":"dagger.Provides:43","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"continue","position":"dagger.internal.Linker:139","type":"CtContinueImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while ((dagger.internal.Binding<?> = java.util.Queue<dagger.internal.Binding<?>>.poll()) != null) {\n    if (dagger.internal.Binding<?> instanceof dagger.internal.Linker.DeferredBinding) {\n        dagger.internal.Linker.DeferredBinding dagger.internal.Linker.DeferredBinding = ((dagger.internal.Linker.DeferredBinding)(dagger.internal.Binding<?>));\n        java.lang.String java.lang.String = dagger.internal.Linker.DeferredBinding.java.lang.String;\n        boolean boolean = dagger.internal.Linker.DeferredBinding.boolean;\n        if (java.util.Map<java.lang.String, dagger.internal.Binding<?>>.containsKey(java.lang.String)) {\n            continue;\n        } \n        try {\n            dagger.internal.Binding<?> dagger.internal.Binding<?> = dagger.internal.Linker.createBinding(java.lang.String, dagger.internal.Binding<?>.java.lang.Object, dagger.internal.Linker.DeferredBinding.java.lang.ClassLoader, boolean);\n            dagger.internal.Binding<?>.setLibrary(dagger.internal.Binding<?>.library());\n            dagger.internal.Binding<?>.setDependedOn(dagger.internal.Binding<?>.dependedOn());\n            if ((!(java.lang.String.equals(dagger.internal.Binding<?>.java.lang.String))) && (!(java.lang.String.equals(dagger.internal.Binding<?>.java.lang.String)))) {\n                throw new java.lang.IllegalStateException((\"Unable to create binding for \" + java.lang.String));\n            } \n            dagger.internal.Binding<?> dagger.internal.Binding<?> = dagger.internal.Linker.dagger.internal.Linker.scope(dagger.internal.Binding<?>);\n            java.util.Queue<dagger.internal.Binding<?>>.add(dagger.internal.Binding<?>);\n            dagger.internal.Linker.putBinding(dagger.internal.Binding<?>);\n        } catch (dagger.internal.Binding.InvalidBindingException dagger.internal.Binding.InvalidBindingException) {\n            dagger.internal.Linker.addError((((((dagger.internal.Binding.InvalidBindingException.java.lang.String) + \" \") + (dagger.internal.Binding.InvalidBindingException.getMessage())) + \" required by \") + (dagger.internal.Binding<?>.java.lang.Object)));\n            java.util.Map<java.lang.String, dagger.internal.Binding<?>>.put(java.lang.String, dagger.internal.Binding.dagger.internal.Binding<java.lang.Object>);\n        } catch (java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException) {\n            dagger.internal.Linker.addError((((\"Unsupported: \" + (java.lang.UnsupportedOperationException.getMessage())) + \" required by \") + (dagger.internal.Binding<?>.java.lang.Object)));\n            java.util.Map<java.lang.String, dagger.internal.Binding<?>>.put(java.lang.String, dagger.internal.Binding.dagger.internal.Binding<java.lang.Object>);\n        } catch (java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n            dagger.internal.Linker.addError((((java.lang.IllegalArgumentException.getMessage()) + \" required by \") + (dagger.internal.Binding<?>.java.lang.Object)));\n            java.util.Map<java.lang.String, dagger.internal.Binding<?>>.put(java.lang.String, dagger.internal.Binding.dagger.internal.Binding<java.lang.Object>);\n        } catch (java.lang.RuntimeException java.lang.RuntimeException) {\n            throw java.lang.RuntimeException;\n        } catch (java.lang.Exception java.lang.Exception) {\n            throw new java.lang.RuntimeException(java.lang.Exception);\n        }\n    } else {\n        boolean = true;\n        dagger.internal.Binding<?>.attach(this);\n        if (boolean) {\n            dagger.internal.Binding<?>.setLinked();\n        } else {\n            java.util.Queue<dagger.internal.Binding<?>>.add(dagger.internal.Binding<?>);\n        }\n    }\n}","position":"dagger.internal.Linker:133","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"dagger.internal.ProblemDetector.detectCircularDependencies(java.util.Collection<dagger.internal.Binding<?>>)","position":"dagger.internal.ProblemDetector:85","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new dagger.internal.Binding.InvalidBindingException(java.lang.String , (\"could not be bound with key \" + java.lang.String))","position":"dagger.internal.Linker:230","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if ((java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>>.getValue()) instanceof dagger.internal.SetBinding) {\n    dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>>.put(java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>>.getKey(), new dagger.internal.SetBinding<java.lang.Object>(((dagger.internal.SetBinding<java.lang.Object>)(java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>>.getValue()))));\n} ","position":"dagger.ObjectGraph:221","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>>.put(java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>>.getKey(), new dagger.internal.SetBinding<java.lang.Object>(((dagger.internal.SetBinding<java.lang.Object>)(java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>>.getValue()))))","position":"dagger.ObjectGraph:222","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"start":"start","key":"key"},"name":"add","transplant":{"sourceCode":"if ((java.lang.String.startsWith(\"@\")) || (java.lang.String.startsWith(\"members/\"))) {\n    int = (java.lang.String.lastIndexOf('/')) + 1;\n} ","position":"dagger.internal.Keys:248","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int = (java.lang.String.lastIndexOf('/')) + 1","position":"dagger.internal.Keys:249","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.ArrayList<T>.iterator()","position":"dagger.internal.ProblemDetector:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"Deferred bindings must resolve first.\")","position":"dagger.internal.Linker:457","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"static class DaggerObjectGraph extends dagger.ObjectGraph {\n    private final dagger.ObjectGraph.DaggerObjectGraph base;\n\n    private final dagger.internal.Linker linker;\n\n    private final dagger.internal.Loader plugin;\n\n    private final java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection> staticInjections;\n\n    private final java.util.Map<java.lang.String, java.lang.Class<?>> injectableTypes;\n\n    DaggerObjectGraph(dagger.ObjectGraph.DaggerObjectGraph base ,dagger.internal.Linker linker ,dagger.internal.Loader plugin ,java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection> staticInjections ,java.util.Map<java.lang.String, java.lang.Class<?>> injectableTypes) {\n        if (dagger.internal.Linker == null)\n            throw new java.lang.NullPointerException(\"linker\");\n        \n        if (dagger.internal.Loader == null)\n            throw new java.lang.NullPointerException(\"plugin\");\n        \n        if (java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection> == null)\n            throw new java.lang.NullPointerException(\"staticInjections\");\n        \n        if (java.util.Map<java.lang.String, java.lang.Class<?>> == null)\n            throw new java.lang.NullPointerException(\"injectableTypes\");\n        \n        this.dagger.ObjectGraph.DaggerObjectGraph = dagger.ObjectGraph.DaggerObjectGraph;\n        this.dagger.internal.Linker = dagger.internal.Linker;\n        this.dagger.internal.Loader = dagger.internal.Loader;\n        this.java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection> = java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection>;\n        this.java.util.Map<java.lang.String, java.lang.Class<?>> = java.util.Map<java.lang.String, java.lang.Class<?>>;\n    }\n\n    private static dagger.ObjectGraph makeGraph(dagger.ObjectGraph.DaggerObjectGraph base, dagger.internal.Loader plugin, java.lang.Object... modules) {\n        java.util.Map<java.lang.String, java.lang.Class<?>> java.util.Map<java.lang.String, java.lang.Class<?>> = new java.util.LinkedHashMap<java.lang.String, java.lang.Class<?>>();\n        java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection> java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection> = new java.util.LinkedHashMap<java.lang.Class<?>, dagger.internal.StaticInjection>();\n        dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>> dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>> = dagger.ObjectGraph.DaggerObjectGraph.dagger.ObjectGraph.DaggerObjectGraph.initBaseBindings(dagger.ObjectGraph.DaggerObjectGraph);\n        dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>> dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>> = dagger.ObjectGraph.DaggerObjectGraph.dagger.ObjectGraph.DaggerObjectGraph.initOverrideBindings();\n        java.util.Map<dagger.internal.ModuleAdapter<?>, java.lang.Object> java.util.Map<dagger.internal.ModuleAdapter<?>, java.lang.Object> = dagger.internal.Modules.dagger.internal.Modules.loadModules(dagger.internal.Loader, java.lang.Object[]);\n        for (java.util.Map.Entry<dagger.internal.ModuleAdapter<?>, java.lang.Object> java.util.Map.Entry<dagger.internal.ModuleAdapter<?>, java.lang.Object> : java.util.Map<dagger.internal.ModuleAdapter<?>, java.lang.Object>.entrySet()) {\n            @java.lang.SuppressWarnings(value = \"unchecked\")\n            dagger.internal.ModuleAdapter<java.lang.Object> dagger.internal.ModuleAdapter<java.lang.Object> = ((dagger.internal.ModuleAdapter<java.lang.Object>)(java.util.Map.Entry<dagger.internal.ModuleAdapter<?>, java.lang.Object>.getKey()));\n            for (int int = 0 ; int < (dagger.internal.ModuleAdapter<java.lang.Object>.java.lang.String[].int) ; int++) {\n                java.util.Map<java.lang.String, java.lang.Class<?>>.put(dagger.internal.ModuleAdapter<java.lang.Object>.java.lang.String[][int], dagger.internal.ModuleAdapter<java.lang.Object>.java.lang.Class<java.lang.Object>);\n            }\n            for (int int = 0 ; int < (dagger.internal.ModuleAdapter<java.lang.Object>.java.lang.Class<?>[].int) ; int++) {\n                java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection>.put(dagger.internal.ModuleAdapter<java.lang.Object>.java.lang.Class<?>[][int], null);\n            }\n            try {\n                java.util.Map<java.lang.String, dagger.internal.Binding<?>> java.util.Map<java.lang.String, dagger.internal.Binding<?>> = dagger.internal.ModuleAdapter<java.lang.Object>.boolean ? dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>> : dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>>;\n                dagger.internal.ModuleAdapter<java.lang.Object>.getBindings(java.util.Map<java.lang.String, dagger.internal.Binding<?>>, java.util.Map.Entry<dagger.internal.ModuleAdapter<?>, java.lang.Object>.getValue());\n            } catch (java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n                throw new java.lang.IllegalArgumentException(((dagger.internal.ModuleAdapter<java.lang.Object>.java.lang.Class<java.lang.Object>.getSimpleName()) + \" is an overriding module and cannot contribute set bindings.\"));\n            }\n        }\n        dagger.internal.Linker dagger.internal.Linker = new dagger.internal.Linker((dagger.ObjectGraph.DaggerObjectGraph != null ? dagger.ObjectGraph.DaggerObjectGraph.dagger.internal.Linker : null) , dagger.internal.Loader , new dagger.internal.ThrowingErrorHandler());\n        dagger.internal.Linker.installBindings(dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>>);\n        dagger.internal.Linker.installBindings(dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>>);\n        return new dagger.ObjectGraph.DaggerObjectGraph(dagger.ObjectGraph.DaggerObjectGraph , dagger.internal.Linker , dagger.internal.Loader , java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection> , java.util.Map<java.lang.String, java.lang.Class<?>>);\n    }\n\n    /** \n     * Returns an empty {@code UniqueMap} which will throw errors if a SetBinding is added\n     * to it.\n     */\nprivate static dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>> initOverrideBindings() {\n        return new dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>>() {\n            @java.lang.Override\n            public dagger.internal.Binding<?> put(java.lang.String key, dagger.internal.Binding<?> value) {\n                if (dagger.internal.Binding<?> instanceof dagger.internal.SetBinding) {\n                    throw new java.lang.IllegalArgumentException(\"Module overrides cannot contribute set bindings.\");\n                } \n                return dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>>.put(java.lang.String, dagger.internal.Binding<?>);\n            }\n        };\n    }\n\n    /** \n     * Extract bindings in the 'base' and 'overrides' set. Within each set no\n     * duplicates are permitted.  Set-bindings are propagated (and cloned) from the parent\n     * to ensure that parent graph participants only see parent bindings, but the child\n     * graph sees parent+child contributions.\n     */\nprivate static dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>> initBaseBindings(dagger.ObjectGraph.DaggerObjectGraph base) {\n        dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>> dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>> = new dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>>();\n        if (dagger.ObjectGraph.DaggerObjectGraph != null) {\n            java.util.Map<java.lang.String, dagger.internal.Binding<?>> java.util.Map<java.lang.String, dagger.internal.Binding<?>> = dagger.ObjectGraph.DaggerObjectGraph.linkEverything();\n            for (java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>> java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>> : java.util.Map<java.lang.String, dagger.internal.Binding<?>>.entrySet()) {\n                if ((java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>>.getValue()) instanceof dagger.internal.SetBinding) {\n                    dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>>.put(java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>>.getKey(), new dagger.internal.SetBinding<java.lang.Object>(((dagger.internal.SetBinding<java.lang.Object>)(java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>>.getValue()))));\n                } \n            }\n        } \n        return dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>>;\n    }\n\n    @java.lang.Override\n    public dagger.ObjectGraph plus(java.lang.Object... modules) {\n        return dagger.ObjectGraph.DaggerObjectGraph.dagger.ObjectGraph.DaggerObjectGraph.makeGraph(this, dagger.internal.Loader, java.lang.Object[]);\n    }\n\n    private void linkStaticInjections() {\n        for (java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection> java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection> : java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection>.entrySet()) {\n            dagger.internal.StaticInjection dagger.internal.StaticInjection = java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection>.getValue();\n            if (dagger.internal.StaticInjection == null) {\n                dagger.internal.StaticInjection = dagger.internal.Loader.getStaticInjection(java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection>.getKey());\n                java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection>.setValue(dagger.internal.StaticInjection);\n            } \n            dagger.internal.StaticInjection.attach(dagger.internal.Linker);\n        }\n    }\n\n    private void linkInjectableTypes() {\n        for (java.util.Map.Entry<java.lang.String, java.lang.Class<?>> java.util.Map.Entry<java.lang.String, java.lang.Class<?>> : java.util.Map<java.lang.String, java.lang.Class<?>>.entrySet()) {\n            dagger.internal.Linker.requestBinding(java.util.Map.Entry<java.lang.String, java.lang.Class<?>>.getKey(), java.util.Map.Entry<java.lang.String, java.lang.Class<?>>.getValue(), java.util.Map.Entry<java.lang.String, java.lang.Class<?>>.getValue().getClassLoader(), false, true);\n        }\n    }\n\n    @java.lang.Override\n    public void validate() {\n        java.util.Map<java.lang.String, dagger.internal.Binding<?>> java.util.Map<java.lang.String, dagger.internal.Binding<?>> = dagger.ObjectGraph.DaggerObjectGraph.linkEverything();\n        new dagger.internal.ProblemDetector().detectProblems(java.util.Map<java.lang.String, dagger.internal.Binding<?>>.values());\n    }\n\n    /** \n     * Links all bindings, injectable types and static injections.\n     */\nprivate java.util.Map<java.lang.String, dagger.internal.Binding<?>> linkEverything() {\n        java.util.Map<java.lang.String, dagger.internal.Binding<?>> java.util.Map<java.lang.String, dagger.internal.Binding<?>> = dagger.internal.Linker.fullyLinkedBindings();\n        if (java.util.Map<java.lang.String, dagger.internal.Binding<?>> != null) {\n            return java.util.Map<java.lang.String, dagger.internal.Binding<?>>;\n        } \n        synchronized(dagger.internal.Linker) {\n            if ((java.util.Map<java.lang.String, dagger.internal.Binding<?>> = dagger.internal.Linker.fullyLinkedBindings()) != null) {\n                return java.util.Map<java.lang.String, dagger.internal.Binding<?>>;\n            } \n            dagger.ObjectGraph.DaggerObjectGraph.linkStaticInjections();\n            dagger.ObjectGraph.DaggerObjectGraph.linkInjectableTypes();\n            return dagger.internal.Linker.linkAll();\n        }\n    }\n\n    @java.lang.Override\n    public void injectStatics() {\n        synchronized(dagger.internal.Linker) {\n            dagger.ObjectGraph.DaggerObjectGraph.linkStaticInjections();\n            dagger.internal.Linker.linkRequested();\n            dagger.ObjectGraph.DaggerObjectGraph.linkStaticInjections();\n        }\n        for (java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection> java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection> : java.util.Map<java.lang.Class<?>, dagger.internal.StaticInjection>.entrySet()) {\n            java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection>.getValue().inject();\n        }\n    }\n\n    @java.lang.Override\n    public <T>T get(java.lang.Class<T> type) {\n        java.lang.String java.lang.String = dagger.internal.Keys.dagger.internal.Keys.get(java.lang.Class<T>);\n        java.lang.String java.lang.String = java.lang.Class<T>.isInterface() ? java.lang.String : dagger.internal.Keys.dagger.internal.Keys.getMembersKey(java.lang.Class<T>);\n        java.lang.ClassLoader java.lang.ClassLoader = java.lang.Class<T>.getClassLoader();\n        @java.lang.SuppressWarnings(value = \"unchecked\")\n        dagger.internal.Binding<T> dagger.internal.Binding<T> = dagger.ObjectGraph.DaggerObjectGraph.((dagger.internal.Binding<T>)(getInjectableTypeBinding(java.lang.ClassLoader, java.lang.String, java.lang.String)));\n        return dagger.internal.Binding<T>.get();\n    }\n\n    @java.lang.Override\n    public <T>T inject(T instance) {\n        java.lang.String java.lang.String = dagger.internal.Keys.dagger.internal.Keys.getMembersKey(T.getClass());\n        java.lang.ClassLoader java.lang.ClassLoader = T.getClass().getClassLoader();\n        @java.lang.SuppressWarnings(value = \"unchecked\")\n        dagger.internal.Binding<T> dagger.internal.Binding<T> = dagger.ObjectGraph.DaggerObjectGraph.((dagger.internal.Binding<T>)(getInjectableTypeBinding(java.lang.ClassLoader, java.lang.String, java.lang.String)));\n        dagger.internal.Binding<T>.injectMembers(T);\n        return T;\n    }\n\n    /** \n     * @param classLoader the {@code ClassLoader} used to load dependent bindings.\n     * @param injectableKey the key used to store the injectable type. This\n     * is a provides key for interfaces and a members injection key for\n     * other types. That way keys can always be created, even if the type\n     * has no injectable constructor.\n     * @param key the key to use when retrieving the binding. This may be a\n     * regular (provider) key or a members key.\n     */\nprivate dagger.internal.Binding<?> getInjectableTypeBinding(java.lang.ClassLoader classLoader, java.lang.String injectableKey, java.lang.String key) {\n        java.lang.Class<?> java.lang.Class<?> = null;\n        for (dagger.ObjectGraph.DaggerObjectGraph dagger.ObjectGraph.DaggerObjectGraph = this ; dagger.ObjectGraph.DaggerObjectGraph != null ; dagger.ObjectGraph.DaggerObjectGraph = dagger.ObjectGraph.DaggerObjectGraph.dagger.ObjectGraph.DaggerObjectGraph) {\n            java.lang.Class<?> = dagger.ObjectGraph.DaggerObjectGraph.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String);\n            if (java.lang.Class<?> != null)\n                break;\n            \n        }\n        if (java.lang.Class<?> == null) {\n            throw new java.lang.IllegalArgumentException(((\"No inject registered for \" + java.lang.String) + \". You must explicitly add it to the \\'injects\\' option in one of your modules.\"));\n        } \n        synchronized(dagger.internal.Linker) {\n            dagger.internal.Binding<?> dagger.internal.Binding<?> = dagger.internal.Linker.requestBinding(java.lang.String, java.lang.Class<?>, java.lang.ClassLoader, false, true);\n            if ((dagger.internal.Binding<?> == null) || (!(dagger.internal.Binding<?>.isLinked()))) {\n                dagger.internal.Linker.linkRequested();\n                dagger.internal.Binding<?> = dagger.internal.Linker.requestBinding(java.lang.String, java.lang.Class<?>, java.lang.ClassLoader, false, true);\n            } \n            return dagger.internal.Binding<?>;\n        }\n    }\n}","position":"dagger.ObjectGraph:135","type":"CtClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"V V = java.util.LinkedHashMap<K, V>.put(K, V)","position":"dagger.internal.UniqueMap:26","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.AssertionError()","position":"dagger.internal.Linker:276","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.AssertionError(\"Unresolved binding should never be called to inject.\")","position":"dagger.internal.Binding:31","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (boolean) {\n    throw new java.lang.UnsupportedOperationException((\"Uninjectable type \" + (java.lang.Class<?>.getName())));\n} ","position":"dagger.internal.Keys:146","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int++","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:76","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{"type":"type"},"name":"add","transplant":{"sourceCode":"return ((java.lang.Class<?>)(java.lang.reflect.Type)).getName()","position":"dagger.internal.Keys:74","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return dagger.internal.Keys.dagger.internal.Keys.get(java.lang.reflect.Type, null)","position":"dagger.internal.Keys:61","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"dagger.internal.Binding<?> == null","name":"negateConditional","position":"dagger.internal.Linker:281","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.lang.Integer.java.lang.Integer","position":"dagger.internal.Keys:264","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Double.java.lang.Double","position":"dagger.internal.Keys:269","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"dagger.internal.Linker.linkRequested()","position":"dagger.internal.Linker:110","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(dagger.internal.Linker) {\n    dagger.ObjectGraph.DaggerObjectGraph.linkStaticInjections();\n    dagger.internal.Linker.linkRequested();\n    dagger.ObjectGraph.DaggerObjectGraph.linkStaticInjections();\n}","position":"dagger.ObjectGraph:281","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{"moduleClass":"injectedClass"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Class<?> != null)\n    break;\n","position":"dagger.ObjectGraph:326","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.List<java.lang.reflect.Field>.isEmpty()) {\n    throw new java.lang.IllegalArgumentException((\"No static injections: \" + (java.lang.Class<?>.getName())));\n} ","position":"dagger.internal.loaders.ReflectiveStaticInjection:68","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?> = dagger.ObjectGraph.DaggerObjectGraph.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String)","position":"dagger.ObjectGraph:325","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return dagger.internal.Keys.dagger.internal.Keys.get(java.lang.reflect.Type, dagger.internal.Keys.dagger.internal.Keys.extractQualifier(java.lang.annotation.Annotation[], java.lang.Object))","position":"dagger.internal.Keys:112","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.Linker.linkRequested()","position":"dagger.ObjectGraph:283","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"injectedConstructor":"constructor"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Constructor<T>.setAccessible(true)","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:197","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    T = java.lang.reflect.Constructor<T>.newInstance(java.lang.Object[]);\n} catch (java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    java.lang.Throwable java.lang.Throwable = java.lang.reflect.InvocationTargetException.getCause();\n    throw java.lang.Throwable instanceof java.lang.RuntimeException ? ((java.lang.RuntimeException)(java.lang.Throwable)) : new java.lang.RuntimeException(java.lang.Throwable);\n} catch (java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.AssertionError(java.lang.IllegalAccessException);\n} catch (java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(java.lang.InstantiationException);\n}","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:101","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Module overrides cannot contribute set bindings.\")","position":"dagger.ObjectGraph:202","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new dagger.Provides.Type()","position":"dagger.Provides:43","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{"bindings":"bindings","length":"length","fields":"fields"},"name":"replace","transplant":{"sourceCode":"try {\n    for (int int = 0 ; int < (this.int) ; int++) {\n        this.java.lang.reflect.Field[][int].set(null, this.dagger.internal.Binding<?>[][int].get());\n    }\n} catch (java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.AssertionError(java.lang.IllegalAccessException);\n}","position":"dagger.internal.loaders.ReflectiveStaticInjection:51","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Field[].int) ; int++) {\n    java.lang.reflect.Field java.lang.reflect.Field = java.lang.reflect.Field[][int];\n    java.lang.String java.lang.String = dagger.internal.Keys.dagger.internal.Keys.get(java.lang.reflect.Field.getGenericType(), java.lang.reflect.Field.getAnnotations(), java.lang.reflect.Field);\n    dagger.internal.Binding<?>[][int] = dagger.internal.Linker.requestBinding(java.lang.String, java.lang.reflect.Field, java.lang.ClassLoader);\n}","position":"dagger.internal.loaders.ReflectiveStaticInjection:43","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ((dagger.internal.SetBinding<T>)(java.util.Map<java.lang.String, dagger.internal.Binding<?>>.get(java.lang.String)))","position":"dagger.internal.SetBinding:50","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>>.getValue()) instanceof dagger.internal.SetBinding) {\n    dagger.internal.UniqueMap<java.lang.String, dagger.internal.Binding<?>>.put(java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>>.getKey(), new dagger.internal.SetBinding<java.lang.Object>(((dagger.internal.SetBinding<java.lang.Object>)(java.util.Map.Entry<java.lang.String, dagger.internal.Binding<?>>.getValue()))));\n} ","position":"dagger.ObjectGraph:221","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"provideKey":"dagger.internal.Keys.PROVIDER_PREFIX","membersKey":"dagger.internal.Keys.PROVIDER_PREFIX"},"name":"replace","transplant":{"sourceCode":"return (this.dagger.internal.Keys.java.lang.String) != null ? this.dagger.internal.Keys.java.lang.String : this.dagger.internal.Keys.java.lang.String","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:141","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return dagger.internal.Keys.dagger.internal.Keys.extractKey(java.lang.String, int, java.lang.String.substring(0, int), dagger.internal.Keys.java.lang.String)","position":"dagger.internal.Keys:183","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"dagger.internal.ProblemDetector.dagger.internal.ProblemDetector.detectCircularDependencies(dagger.internal.ProblemDetector.ArraySet<dagger.internal.Binding<?>>, java.util.List<dagger.internal.Binding<?>>)","position":"dagger.internal.ProblemDetector:75","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return java.lang.ClassLoader.loadClass(java.lang.String);\n} catch (java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    return java.lang.Void.java.lang.Void;\n}","position":"dagger.internal.Loader:33","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * The type of binding into which the return type of the annotated method contributes.\n */\nenum Type {\nUNIQUE, SET, SET_VALUES;}","position":"dagger.Provides:36","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.StaticInjection.attach(dagger.internal.Linker)","position":"dagger.ObjectGraph:241","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Object) == (dagger.internal.LazyBinding.java.lang.Object)) {\n    java.lang.Object = dagger.internal.Binding<T>.get();\n} ","position":"dagger.internal.LazyBinding:58","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Map.Entry<java.lang.Class<?>, dagger.internal.StaticInjection>.setValue(dagger.internal.StaticInjection)","position":"dagger.ObjectGraph:239","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"dagger.internal.Loader:81","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException((\"Can\\'t inject private constructor: \" + java.lang.reflect.Constructor<T>))","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:193","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Map<dagger.internal.ModuleAdapter<?>, java.lang.Object>.put(dagger.internal.ModuleAdapter<?>, java.lang.Object[][int])","position":"dagger.internal.Modules:44","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((dagger.internal.ModuleAdapter<java.lang.Object>.java.lang.Class<java.lang.Object>.getSimpleName()) + \" is an overriding module and cannot contribute set bindings.\"))","position":"dagger.ObjectGraph:180","type":"CtThrowImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field[][int].set(T, dagger.internal.Binding<?>[][int].get())","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:120","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.UnsupportedOperationException();\n} ","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:93","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int != 0) {\n    java.lang.annotation.Annotation[][] java.lang.annotation.Annotation[][] = java.lang.reflect.Constructor<T>.getParameterAnnotations();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        java.util.List<java.lang.String>.add(dagger.internal.Keys.dagger.internal.Keys.get(java.lang.reflect.Type[][int], java.lang.annotation.Annotation[][][int], java.lang.reflect.Constructor<T>));\n    }\n} ","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:200","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"injectedConstructor":"injectedConstructor"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Constructor<T>.setAccessible(true)","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:197","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor();\n} catch (java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n}","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:179","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.Constructor<T>.getGenericParameterTypes()","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:198","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (K == null) {\n    throw new java.lang.NullPointerException(\"key == null\");\n} ","position":"dagger.internal.Memoizer:40","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"dagger.internal.Linker.addError((((\"Unsupported: \" + (java.lang.UnsupportedOperationException.getMessage())) + \" required by \") + (dagger.internal.Binding<?>.java.lang.Object)))","position":"dagger.internal.Linker:158","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(dagger.internal.Binding<?>.isLinked())) {\n    java.util.Queue<dagger.internal.Binding<?>>.add(dagger.internal.Binding<?>);\n} ","position":"dagger.internal.Linker:106","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"k":"dagger.internal.Binding.LIBRARY"},"name":"replace","transplant":{"sourceCode":"int++","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:76","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.int = boolean ? (int) | (dagger.internal.Binding.int) : (int) & (~(dagger.internal.Binding.int))","position":"dagger.internal.Binding:134","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * The type of binding into which the return type of the annotated method contributes.\n */\nenum Type {\nUNIQUE, SET, SET_VALUES;}","position":"dagger.Provides:36","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.Keys.dagger.internal.Keys.typeToString(java.lang.Class<?>.getComponentType(), java.lang.StringBuilder, false)","position":"dagger.internal.Keys:143","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"dagger.internal.Binding<?>.setDependedOn(true)","position":"dagger.internal.Linker:286","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.util.Map<K, V>.put(K, V);\n    return V;\n} finally {\n    java.util.concurrent.locks.Lock.unlock();\n}","position":"dagger.internal.Memoizer:63","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"deferredKey":"membersKey"},"name":"replace","transplant":{"sourceCode":"return (\"DeferredBinding[deferredKey=\" + (this.java.lang.String)) + \"]\"","position":"dagger.internal.Linker:465","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.String) != null ? java.lang.String : java.lang.String","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:141","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((!(dagger.internal.Binding<?>.library())) && (!(dagger.internal.Binding<?>.dependedOn()))) {\n    java.util.List<dagger.internal.Binding>.add(dagger.internal.Binding<?>);\n} ","position":"dagger.internal.ProblemDetector:35","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.Binding<T>.injectMembers(T)","position":"dagger.internal.Linker:357","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"dagger.internal.Binding<?>.setDependedOn(true)","position":"dagger.internal.Linker:297","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (dagger.internal.Binding<?> instanceof dagger.internal.Linker.DeferredBinding) {\n    dagger.internal.Linker.DeferredBinding dagger.internal.Linker.DeferredBinding = ((dagger.internal.Linker.DeferredBinding)(dagger.internal.Binding<?>));\n    java.lang.String java.lang.String = dagger.internal.Linker.DeferredBinding.java.lang.String;\n    boolean boolean = dagger.internal.Linker.DeferredBinding.boolean;\n    if (java.util.Map<java.lang.String, dagger.internal.Binding<?>>.containsKey(java.lang.String)) {\n        continue;\n    } \n    try {\n        dagger.internal.Binding<?> dagger.internal.Binding<?> = dagger.internal.Linker.createBinding(java.lang.String, dagger.internal.Binding<?>.java.lang.Object, dagger.internal.Linker.DeferredBinding.java.lang.ClassLoader, boolean);\n        dagger.internal.Binding<?>.setLibrary(dagger.internal.Binding<?>.library());\n        dagger.internal.Binding<?>.setDependedOn(dagger.internal.Binding<?>.dependedOn());\n        if ((!(java.lang.String.equals(dagger.internal.Binding<?>.java.lang.String))) && (!(java.lang.String.equals(dagger.internal.Binding<?>.java.lang.String)))) {\n            throw new java.lang.IllegalStateException((\"Unable to create binding for \" + java.lang.String));\n        } \n        dagger.internal.Binding<?> dagger.internal.Binding<?> = dagger.internal.Linker.dagger.internal.Linker.scope(dagger.internal.Binding<?>);\n        java.util.Queue<dagger.internal.Binding<?>>.add(dagger.internal.Binding<?>);\n        dagger.internal.Linker.putBinding(dagger.internal.Binding<?>);\n    } catch (dagger.internal.Binding.InvalidBindingException dagger.internal.Binding.InvalidBindingException) {\n        dagger.internal.Linker.addError((((((dagger.internal.Binding.InvalidBindingException.java.lang.String) + \" \") + (dagger.internal.Binding.InvalidBindingException.getMessage())) + \" required by \") + (dagger.internal.Binding<?>.java.lang.Object)));\n        java.util.Map<java.lang.String, dagger.internal.Binding<?>>.put(java.lang.String, dagger.internal.Binding.dagger.internal.Binding<java.lang.Object>);\n    } catch (java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException) {\n        dagger.internal.Linker.addError((((\"Unsupported: \" + (java.lang.UnsupportedOperationException.getMessage())) + \" required by \") + (dagger.internal.Binding<?>.java.lang.Object)));\n        java.util.Map<java.lang.String, dagger.internal.Binding<?>>.put(java.lang.String, dagger.internal.Binding.dagger.internal.Binding<java.lang.Object>);\n    } catch (java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n        dagger.internal.Linker.addError((((java.lang.IllegalArgumentException.getMessage()) + \" required by \") + (dagger.internal.Binding<?>.java.lang.Object)));\n        java.util.Map<java.lang.String, dagger.internal.Binding<?>>.put(java.lang.String, dagger.internal.Binding.dagger.internal.Binding<java.lang.Object>);\n    } catch (java.lang.RuntimeException java.lang.RuntimeException) {\n        throw java.lang.RuntimeException;\n    } catch (java.lang.Exception java.lang.Exception) {\n        throw new java.lang.RuntimeException(java.lang.Exception);\n    }\n} else {\n    boolean = true;\n    dagger.internal.Binding<?>.attach(this);\n    if (boolean) {\n        dagger.internal.Binding<?>.setLinked();\n    } else {\n        java.util.Queue<dagger.internal.Binding<?>>.add(dagger.internal.Binding<?>);\n    }\n}","position":"dagger.internal.Linker:134","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"int int = 0","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:71","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Map<dagger.internal.ModuleAdapter<?>, java.lang.Object> java.util.Map<dagger.internal.ModuleAdapter<?>, java.lang.Object> = new java.util.LinkedHashMap<dagger.internal.ModuleAdapter<?>, java.lang.Object>(java.util.Map<dagger.internal.ModuleAdapter<?>, java.lang.Object>)","position":"dagger.internal.Modules:50","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.String.startsWith(\"@\")) || (java.lang.String.startsWith(\"members/\"))) {\n    int = (java.lang.String.lastIndexOf('/')) + 1;\n} ","position":"dagger.internal.Keys:248","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"No static injections: \" + (java.lang.Class<?>.getName())))","position":"dagger.internal.loaders.ReflectiveStaticInjection:69","type":"CtThrowImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"continue","position":"dagger.internal.ProblemDetector:55","type":"CtContinueImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"private static class DeferredBinding extends dagger.internal.Binding<java.lang.Object> {\n    /** \n     * Loader originally intended to load this binding, to be used in loading the actual one\n     */\nfinal java.lang.ClassLoader classLoader;\n\n    final java.lang.String deferredKey;\n\n    final boolean mustHaveInjections;\n\n    private DeferredBinding(java.lang.String deferredKey ,java.lang.ClassLoader classLoader ,java.lang.Object requiredBy ,boolean mustHaveInjections) {\n        dagger.internal.Binding<java.lang.Object>.super(null, null, false, java.lang.Object);\n        this.java.lang.String = java.lang.String;\n        this.java.lang.ClassLoader = java.lang.ClassLoader;\n        this.boolean = boolean;\n    }\n\n    @java.lang.Override\n    public void injectMembers(java.lang.Object t) {\n        throw new java.lang.UnsupportedOperationException(\"Deferred bindings must resolve first.\");\n    }\n\n    @java.lang.Override\n    public void getDependencies(java.util.Set<dagger.internal.Binding<?>> get, java.util.Set<dagger.internal.Binding<?>> injectMembers) {\n        throw new java.lang.UnsupportedOperationException(\"Deferred bindings must resolve first.\");\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return (\"DeferredBinding[deferredKey=\" + (java.lang.String)) + \"]\";\n    }\n}","position":"dagger.internal.Linker:442","type":"CtClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder().append(\"Dependency cycle:\")","position":"dagger.internal.ProblemDetector:60","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (!(java.util.Map<java.lang.Class<?>, dagger.internal.ModuleAdapter<?>>.containsKey(java.lang.Class<?>))) {\n    dagger.internal.ModuleAdapter<?> dagger.internal.ModuleAdapter<?> = dagger.internal.Loader.getModuleAdapter(java.lang.Class<?>);\n    java.util.Map<java.lang.Class<?>, dagger.internal.ModuleAdapter<?>>.put(java.lang.Class<?>, dagger.internal.ModuleAdapter<?>);\n    dagger.internal.Modules.dagger.internal.Modules.collectIncludedModulesRecursively(dagger.internal.Loader, dagger.internal.ModuleAdapter<?>, java.util.Map<java.lang.Class<?>, dagger.internal.ModuleAdapter<?>>);\n} ","position":"dagger.internal.Modules:75","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this.java.lang.Class<T>.equals(dagger.internal.ModuleAdapter<?>.java.lang.Class<?>)","position":"dagger.internal.ModuleAdapter:69","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.StringBuilder.append(\">\")","position":"dagger.internal.Keys:164","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"dagger.internal.Keys.dagger.internal.Keys.typeToString(java.lang.reflect.Type[][int], java.lang.StringBuilder, true)","position":"dagger.internal.Keys:162","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"dagger.internal.Binding<?>.setLibrary(boolean)","position":"dagger.internal.Linker:296","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor()","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:180","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (((java.lang.reflect.Constructor<T>.getModifiers()) & (java.lang.reflect.Modifier.int)) != 0) {\n    throw new java.lang.IllegalStateException((\"Can\\'t inject private constructor: \" + java.lang.reflect.Constructor<T>));\n} ","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:192","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    for (int int = 0 ; int < (dagger.internal.Binding<?>[].int) ; int++) {\n        if ((dagger.internal.Binding<?>[][int]) == null) {\n            dagger.internal.Binding<?>[][int] = dagger.internal.Linker.requestBinding(java.lang.String[][int], java.lang.reflect.Constructor<T>, java.lang.ClassLoader);\n        } \n        int++;\n    }\n} ","position":"dagger.internal.loaders.ReflectiveAtInjectBinding:78","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.ClassLoader.loadClass(java.lang.String)","position":"dagger.internal.Loader:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map<java.lang.String, dagger.internal.Binding<?>>","position":"dagger.internal.Linker:112","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"dagger.internal.Binding<?>.setDependedOn(true)","position":"dagger.internal.Linker:297","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    dagger.internal.ProblemDetector.ArraySet<dagger.internal.Binding<?>> dagger.internal.ProblemDetector.ArraySet<dagger.internal.Binding<?>> = new dagger.internal.ProblemDetector.ArraySet<dagger.internal.Binding<?>>();\n    dagger.internal.Binding<?>.getDependencies(dagger.internal.ProblemDetector.ArraySet<dagger.internal.Binding<?>>, dagger.internal.ProblemDetector.ArraySet<dagger.internal.Binding<?>>);\n    dagger.internal.ProblemDetector.dagger.internal.ProblemDetector.detectCircularDependencies(dagger.internal.ProblemDetector.ArraySet<dagger.internal.Binding<?>>, java.util.List<dagger.internal.Binding<?>>);\n    dagger.internal.Binding<?>.setCycleFree(true);\n} finally {\n    java.util.List<dagger.internal.Binding<?>>.remove(((java.util.List<dagger.internal.Binding<?>>.size()) - 1));\n    dagger.internal.Binding<?>.setVisiting(false);\n}","position":"dagger.internal.ProblemDetector:72","type":"CtTryImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"dagger.internal.ModuleAdapter:71","type":"mutation","return":"return false","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ((java.lang.String.startsWith(\"java.\")) || (java.lang.String.startsWith(\"javax.\"))) || (java.lang.String.startsWith(\"android.\"))","position":"dagger.internal.Keys:258","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?> != null)\n    break;\n","position":"dagger.ObjectGraph:326","type":"CtIfImpl"},"status":-2},{"failureDictionary":{}}]

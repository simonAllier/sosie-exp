[{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:157","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:315","sourceCode":"return true","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:202","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:48","sourceCode":"if (org.easymock.internal.MocksControl != null) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl);\n} else {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove();\n}","type":"CtIfImpl"},"failures":[43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,0,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,1,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,2,149,150,151,3,4,152,153,5,6,154,155,156,157,158,159,160,161,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,162,163,164,165,28,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,29,30,31,32,33,34,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,35,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,36,37,38,39,364,365,366,367,40,368,369,370,371,372,373,41,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,42,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"control"}},{"transplant":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:91","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[298,299,301,302,303,304,305,306,307,308,317,318,322,323,390,391,392,393,400,401],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack","this":"this"}},{"position":"org.easymock.EasyMock:1848","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[298,299,302,304,305,307,317,322,390,392,400],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:46","sourceCode":"final java.lang.ClassNotFoundException java.lang.ClassNotFoundException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[298,299,301,302,303,304,305,306,307,308,317,318,322,323,390,391,392,393,400,401],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:40","sourceCode":"return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]))","type":"CtReturnImpl"},"failures":[43,44,45,48,49,50,52,57,58,61,62,63,64,65,66,67,68,69,86,92,101,0,102,103,104,105,106,117,118,119,1,120,127,129,130,131,132,133,134,136,137,138,139,140,141,142,143,144,145,147,148,2,149,150,151,3,4,152,153,5,6,154,156,157,158,159,160,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,162,163,164,165,28,166,167,168,171,179,181,191,192,193,194,207,208,211,29,30,31,32,33,34,213,214,215,225,227,228,229,35,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,258,265,266,267,268,269,270,271,273,279,286,288,289,290,291,292,293,294,296,297,298,299,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,343,344,345,347,348,349,350,351,352,355,356,357,358,361,362,363,36,37,38,39,365,367,40,368,369,370,371,372,373,41,374,375,376,377,378,379,380,381,382,383,384,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,42,405,406,407,408,409,413,416,426,432,435,436,437,438,439,440,441,443,446,447,448,449,454,455,461,465,465,466,466,467,468,469,470,471,473,475],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:194","sourceCode":"return false","type":"CtReturnImpl"},"failures":[477,478,479,480,481,272,482],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:60","sourceCode":"java.util.List<T>.clear()","type":"CtInvocationImpl"},"failures":[397,399,483],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.Capture:110","sourceCode":"break","type":"CtBreakImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((this.java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + (org.easymock.Capture<T>.getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"propertyFileName"}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:34","sourceCode":"return this.boolean","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:110","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"shouldFillInStackTrace"}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[44,45,105,484,129,132,163,164,166,167,290,370,375,376],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:603","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[485,296,315,321],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[43,45,49,50,52,61,62,63,64,79,81,90,91,93,101,0,102,103,104,118,119,1,130,132,133,136,137,138,139,140,147,2,149,150,151,3,4,152,153,154,27,162,165,28,168,179,181,207,208,211,225,231,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,258,267,271,279,288,290,291,293,294,296,297,298,299,301,302,303,304,305,306,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,338,339,340,341,343,344,345,352,355,357,358,362,38,40,368,369,371,373,41,374,377,378,379,383,390,391,392,393,394,397,398,399,400,402,403,42,405,406,407,408,409,413,416,426,432,435,436,437,438,439,440,443,447,448,449,454,455,461,467,468,470,471,473],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"value"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[43,44,45,130,133,134,161,162,231,288,291,292,369],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[183],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:42","sourceCode":"throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()","type":"CtThrowImpl"},"failures":[159],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:47","sourceCode":"if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n    org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:49","sourceCode":"org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"failures":[80,265,267],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[43,45,49,50,52,61,62,63,64,101,118,119,1,130,132,133,136,137,138,139,140,147,2,149,150,151,3,4,152,153,154,27,162,165,28,168,179,181,207,208,211,231,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,258,267,271,279,288,290,291,293,294,296,297,298,299,301,302,303,304,305,306,308,309,310,311,312,313,314,315,316,317,318,319,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,338,339,340,341,343,344,345,352,355,357,358,362,38,40,368,369,371,373,41,374,377,378,379,383,390,391,393,394,397,398,399,400,402,403,42,405,406,407,408,409,413,416,426,432,435,436,437,438,439,440,443,447,448,449,454,455,461,467,468,470,471,473],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:622","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[101,308],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[486,487,129,163,488,489],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:230","sourceCode":"throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,490,94,95,96,97,98,99,491,100,101,0,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,492,118,119,1,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,2,149,150,151,3,4,152,153,5,6,154,155,156,157,158,159,160,161,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,162,163,164,165,28,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,29,30,31,32,33,34,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,35,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,493,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,494,352,353,495,354,355,356,357,482,358,359,360,361,362,496,363,36,37,38,39,364,365,366,367,40,368,369,370,371,372,373,41,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,42,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,497,498,499,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"failures":[70,74,75,84,89,101,120,130,136,137,138,139,140,141,142,143,144,145,152,153,154,207,208,288,296,297,301,302,303,304,310,312,313,315,316,322,323,324,401,465,465,466,466],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[44,147,149,150,151,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,33,213,214,215,35,42],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:176","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"delegateTo"}},{"position":"org.easymock.EasyMock:773","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:666","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:83","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"failures":[187,189,196,253,254,255,257,258,259,260,261,264,274,275,276,278,279,280,281,282,285,328,331,333,338,385,386,387,388,389,417,421,427,436,446,449,451,464,476],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:50","failures":[271,272,293,340,345,346,494,495,482,360,500,496,501,502,503,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,465,466],"status":-1,"binaryOperator":"(java.lang.Object[].int) != (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:116","sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:119","sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[477,478,479,504,480,481,505,272,482,506],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"parameterType"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:124","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","bridgeMethod":"hashCodeMethod"}},{"transplant":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[383,384],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"answer":"answer"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:411","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[178],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"clazz"}},{"transplant":{"position":"org.easymock.EasyMock:1803","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:275","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[83,227,273,365,367,379,381,382,384,469],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"failures":[507],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":299,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":27,"org.easymock.tests2.UsageTest.argumentsOrdered":376,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":335,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":259,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":80,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":372,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":464,"org.easymock.tests2.DelegateToTest.testReturnException":266,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":30,"org.easymock.tests.MockingTest.testPartialClassMocking":49,"org.easymock.tests.MockClassControlTest.testToString":218,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":385,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":225,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":451,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":89,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":420,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":416,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":7,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":455,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":477,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":306,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":152,"org.easymock.tests2.UsageTest.wrongArguments":370,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":285,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":193,"org.easymock.samples.ExampleTest.answerVsDelegate":469,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":188,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":54,"org.easymock.tests2.UsageConstraintsTest.testNull":302,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":438,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":223,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":334,"org.easymock.tests2.CaptureTest.testPrimitive":393,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":154,"org.easymock.tests.UsageTest.moreThanOneArgument":162,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":26,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":437,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":143,"org.easymock.tests.UsageTest.argumentsOrdered":167,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":56,"org.easymock.tests.UsageVarargTest.varargIntAccepted":108,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":85,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":136,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":481,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":351,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":498,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":263,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":356,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":72,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":140,"org.easymock.tests.ReplayStateInvalidUsageTest.times":203,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":279,"org.easymock.tests2.DependencyTest.testClassMocking":452,"org.easymock.tests2.AnswerTest.answer":379,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":307,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":87,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":350,"org.easymock.tests2.CaptureTest.testAnd":390,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":185,"org.easymock.tests2.UsageTest.strictResetToDefault":368,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":495,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":446,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":142,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":63,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":329,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":60,"org.easymock.tests2.DelegateToTest.testDelegate":270,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":22,"org.easymock.tests.LimitationsTest.mockFinalMethod":212,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":33,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":69,"org.easymock.tests2.DependencyTest.testClassMockingSupport":453,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":159,"org.easymock.tests2.CaptureTest.testCapture1_2446744":394,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":442,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":20,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":348,"org.easymock.tests.UsageThrowableTest.throwError":147,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":197,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":187,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":492,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":264,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":145,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":501,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":434,"org.easymock.samples.PartialClassMockTest.testGetArea":467,"org.easymock.tests.MockingTest.testInterfaceMocking":51,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":198,"org.easymock.tests2.CompareToTest.testLessOrEqual":485,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":137,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":103,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":421,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":126,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":8,"org.easymock.tests2.UsageTest.niceToStrict":371,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":70,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":355,"org.easymock.tests2.MockBuilderTest.testCreateMock":361,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":429,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":282,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":488,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":16,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":330,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":184,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":215,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":169,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":191,"org.easymock.tests.UsageOverloadedMethodTest.overloading":119,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":431,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":425,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":35,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":312,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":118,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":244,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":311,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":399,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":109,"org.easymock.tests2.EasyMockSupportClassTest.testAll":413,"org.easymock.tests.MockClassControlTest.testEquals":222,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":180,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":24,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":507,"org.easymock.tests2.CaptureTest.testCaptureAll":391,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":67,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":349,"org.easymock.tests.MockNameTest.defaultName":155,"org.easymock.tests2.UsageConstraintsTest.testMatches":313,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":144,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":195,"org.easymock.samples.ExampleTest.voteForRemovals":473,"org.easymock.tests.UsageVarargTest.allKinds":117,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":43,"org.easymock.samples.BasicClassMockTest.testPrintContent":463,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":68,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":3,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":286,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":34,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":260,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":269,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":505,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":491,"org.easymock.tests2.UsageConstraintsTest.greaterThan":315,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":414,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":62,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":449,"org.easymock.samples.ExampleTest.voteForRemoval":470,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":100,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":450,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":406,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":189,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":499,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":441,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":146,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":40,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":360,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":77,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":327,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":2,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":411,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":29,"org.easymock.tests2.CaptureTest.testCaptureFirst":403,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":265,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":76,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":328,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":378,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":232,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":240,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":408,"org.easymock.tests2.CaptureTest.testCapture2_2446744":402,"org.easymock.tests2.UsageTest.moreThanOneArgument":369,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":88,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":362,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":116,"org.easymock.tests.GenericTest.testBridgedEquals":182,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":176,"org.easymock.tests.UsageExpectAndReturnTest.longType":236,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":65,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":325,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":25,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":120,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":320,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":23,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":157,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":141,"org.easymock.tests.UsageCallCountTest.tooManyCalls":177,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":171,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":430,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":241,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":284,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":12,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":151,"org.easymock.tests.MockingTest.testNiceClassMocking":55,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":339,"org.easymock.tests.MockingTest.testClassMocking":47,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":170,"org.easymock.tests2.UsageConstraintsTest.testContains":310,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":38,"org.easymock.tests2.UsageConstraintsTest.testFind":301,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":1,"org.easymock.tests.MockTypeTest.fromEasyMockClass":186,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":127,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":367,"org.easymock.tests.UsageExpectAndReturnTest.object":243,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":443,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":283,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":333,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":478,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":111,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":124,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongNumberOfArgs":503,"org.easymock.tests.UsageTest.exactCallCountByLastCall":168,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":101,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":75,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":57,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":224,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":272,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":106,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":249,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":229,"org.easymock.tests.MockClassControlTest.testHashCode":221,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":254,"org.easymock.tests2.EasyMockSupportTest.testVerify":337,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":423,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":58,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":214,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":227,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":347,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":364,"org.easymock.tests.UsageVarargTest.varargCharAccepted":110,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":490,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":287,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":93,"org.easymock.tests2.UsageTest.openCallCountByLastCall":373,"org.easymock.tests.DefaultClassInstantiatorTest.object":94,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":336,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":213,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":122,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":484,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":424,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":14,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":149,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":277,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":253,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":447,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":220,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":13,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":250,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":156,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":432,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":219,"org.easymock.tests2.UsageTest.resumeIfFailure":377,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":183,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":497,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":32,"org.easymock.tests2.StubTest.stubWithReturnValue":42,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":482,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":242,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":321,"org.easymock.tests2.SerializationTest.testAllMockedMethod":295,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":86,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":489,"org.easymock.samples.SupportTest.voteForRemovals":461,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":178,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":256,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":19,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":92,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":380,"org.easymock.tests.UsageExpectAndThrowTest.object":17,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":226,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":318,"org.easymock.tests2.DelegateToTest.testWrongClass":268,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":207,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":208,"org.easymock.samples.ConstructorCalledMockTest.testTax":465,"org.easymock.tests.UsageStrictMockTest.range":132,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":458,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":332,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":338,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":18,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":357,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":410,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":166,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":205,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":192,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":486,"org.easymock.tests2.CaptureTest.testCaptureNone":398,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":104,"org.easymock.tests.UsageUnorderedTest.message":105,"org.easymock.tests.UsageVerifyTest.twoReturns":45,"org.easymock.tests.UsageVarargTest.varargByteAccepted":115,"org.easymock.tests2.ThreadingTest.testThreadSafe":405,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":427,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":174,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":462,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":125,"org.easymock.tests2.CaptureTest.testCapture_2617107":392,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":161,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":6,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":90,"org.easymock.tests2.UsageConstraintsTest.any":308,"org.easymock.tests2.StubTest.stub":404,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":202,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":158,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":31,"org.easymock.tests.UsageExpectAndThrowTest.longType":10,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":91,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":98,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":201,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":289,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":258,"org.easymock.tests2.SerializationTest.testClass":293,"org.easymock.tests.LimitationsTest.mockNativeMethod":211,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":181,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":252,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":276,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":292,"org.easymock.tests2.NameTest.nameForMocksControl":389,"org.easymock.tests2.MockedExceptionTest.testMockedException":37,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":278,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":415,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":28,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":11,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":52,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":366,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":435,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":358,"org.easymock.tests.MockingTest.testNicePartialClassMocking":50,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":440,"org.easymock.tests2.CaptureTest.testCaptureLast":397,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":274,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":160,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":305,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":345,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":319,"org.easymock.tests.MockingTest.testTwoMocks":48,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":346,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":233,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":15,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":375,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":323,"org.easymock.samples.ExampleTest.removeNonExistingDocument":474,"org.easymock.tests.UsageStrictMockTest.differentMethods":133,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":199,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":281,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":255,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":96,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":407,"org.easymock.tests2.MockBuilderTest.testCreateMockString":363,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":417,"org.easymock.tests.UsageExpectAndThrowTest.floatType":9,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":314,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":412,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":382,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":493,"org.easymock.tests.UsageVerifyTest.twoThrows":44,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":228,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":426,"org.easymock.samples.ExampleTest.voteAgainstRemoval":471,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":102,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":81,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":448,"org.easymock.tests.LimitationsTest.privateConstructor":210,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":502,"org.easymock.tests2.UsageConstraintsTest.testNotNull":322,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":36,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":4,"org.easymock.tests2.UsageTest.defaultResetToNice":374,"org.easymock.samples.ExampleTest.voteAgainstRemovals":468,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":82,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":248,"org.easymock.tests.UsageVarargTest.differentLength":112,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":275,"org.easymock.tests2.CallbackTest.callback":273,"org.easymock.tests2.UsageConstraintsTest.equals":300,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":444,"org.easymock.tests.UsageTest.openCallCountByLastCall":165,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":296,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":5,"org.easymock.tests.UsageCallCountTest.tooFewCalls":172,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":341,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":194,"org.easymock.tests.UsageThrowableTest.throwCheckedException":150,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":487,"org.easymock.tests.MockingTest.testStrictClassMocking":46,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":0,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":344,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":280,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":340,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":204,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":343,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":384,"org.easymock.tests.ObjectMethodsTest.testHashCode":123,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":480,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":409,"org.easymock.tests2.NameTest.nameForNiceMock":388,"org.easymock.tests2.DependencyTest.testInterfaceMocking":454,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":479,"org.easymock.samples.ExampleTest.addDocument":472,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":428,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":433,"org.easymock.tests2.DelegateToTest.testStubDelegate":267,"org.easymock.tests2.AnswerTest.stubAnswer":383,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":130,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":359,"org.easymock.tests.UsageVarargTest.varargLongAccepted":114,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":134,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":79,"org.easymock.tests.UsageExpectAndReturnTest.floatType":235,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":251,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":271,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":466,"org.easymock.tests.UsageThrowableTest.noUpperLimit":148,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":230,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":262,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":316,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":297,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":456,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":395,"org.easymock.tests2.SerializationTest.test":294,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":95,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":234,"org.easymock.tests2.UsageConstraintsTest.testSame":303,"org.easymock.samples.SupportTest.addDocument":460,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":342,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":200,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":418,"org.easymock.tests.GenericTest.testPackageScope":179,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":59,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":74,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":261,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":53,"org.easymock.tests2.NameTest.nameForMock":386,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":245,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":496,"org.easymock.tests2.UsageStrictMockTest.differentMethods":291,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":445,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":237,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":21,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":121,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":64,"org.easymock.tests2.MockedExceptionTest.testRealException":39,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":190,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":459,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":84,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":506,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":83,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":288,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":153,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":206,"org.easymock.tests2.NameTest.nameForStrictMock":387,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":354,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":365,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":439,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":457,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":97,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":317,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":352,"org.easymock.tests2.UsageStrictMockTest.range":290,"org.easymock.tests2.UsageConstraintsTest.lessThan":324,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":257,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":504,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":78,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":326,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":422,"org.easymock.tests2.CaptureTest.testCaptureRightOne":400,"org.easymock.tests2.UsageConstraintsTest.testOr":304,"org.easymock.tests.UsageRangeTest.combination":61,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":436,"org.easymock.tests.UsageTest.wrongArguments":164,"org.easymock.tests2.MockBuilderTest.testWithConstructor":494,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":419,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":217,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":238,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":71,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":246,"org.easymock.tests.UsageVarargTest.varargShortAccepted":113,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":99,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":175,"org.easymock.tests2.UsageConstraintsTest.cmpTo":309,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":381,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":73,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":41,"org.easymock.tests2.CaptureTest.testCaptureFromStub":401,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":196,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":353,"org.easymock.tests.UsageTest.unexpectedCallWithArray":163,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":129,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":173,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":500,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":247,"org.easymock.tests2.CaptureTest.testCapture":483,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":131,"org.easymock.tests2.UsageConstraintsTest.constraints":298,"org.easymock.samples.ExampleTest.addAndChangeDocument":475,"org.easymock.tests.UsageStrictMockTest.testVerify":135,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":476,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":128,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":66,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":396,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":138,"org.easymock.tests.LimitationsTest.abstractClass":209,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":239,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":139,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":231,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":107,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":331}}]

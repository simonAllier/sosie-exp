[{"transplant":{"position":"org.easymock.internal.MockInvocationHandler:43","sourceCode":"final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1847","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(float , float))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:66","sourceCode":"return \"\" + (int)","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1026","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:40","sourceCode":"java.lang.StringBuffer.append(\"notNull()\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[20,21,22],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[23,24,25,26],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1999","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Character>(org.easymock.Capture<java.lang.Character>))","type":"CtInvocationImpl"},"failures":[27],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:39","sourceCode":"return int <= 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"failures":[28,29,30,31],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[32],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1802","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.StartsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[33],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:45","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Boolean.java.lang.Class<java.lang.Boolean>, java.lang.Boolean.java.lang.Boolean)","type":"CtInvocationImpl"},"failures":[0,34,1,35,36,37,38,39,40,11,41,12,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:337","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[57,39,58],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1235","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:127","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[23,59,60],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[61],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:288","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:131","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","type":"CtThrowImpl"},"failures":[62],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:108","sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","type":"CtThrowImpl"},"failures":[63],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"failures":[64],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[64],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:46","sourceCode":"return java.lang.reflect.Field.getType().isAssignableFrom(org.easymock.internal.Injection.getMock().getClass())","type":"CtReturnImpl"},"failures":[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:139","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:226","sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[0,1,83,2,3,4,5,6,11,12,84,85,13,14,16,86,87,88],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:800","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[89],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[90,32,91,92],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[23,24,25,26],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:109","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1107","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1902","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:440","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[93],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"this.org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[94],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable","state":"state"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:74","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[66,67,68,70,71,72,74,75,76,78,79,80],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"checkOrder":"matched","value":"matched"}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.NameTest.nameForStrictMock":3,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":32,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":69,"org.easymock.tests2.UsageTest.argumentsOrdered":9,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":77,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":89,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":81,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":65,"org.easymock.tests2.NameTest.nameForNiceMock":4,"org.easymock.tests2.SerializationTest.testAllMockedMethod":25,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":39,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":91,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":85,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":61,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":60,"org.easymock.tests2.DependencyTest.testInterfaceMocking":36,"org.easymock.tests2.UsageStrictMockTest.range":34,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":55,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":63,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":26,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":78,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":40,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":11,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":76,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":62,"org.easymock.tests2.UsageConstraintsTest.greaterThan":30,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":56,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":31,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":37,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":44,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":8,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":84,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":33,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":70,"org.easymock.tests.UsageStrictMockTest.differentMethods":12,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":92,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":75,"org.easymock.tests2.UsageTest.wrongArguments":7,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":47,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":72,"org.easymock.tests.UsageStrictMockTest.range":41,"org.easymock.tests.UsageRangeTest.combination":43,"org.easymock.tests.UsageTest.wrongArguments":17,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":80,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":74,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":49,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":52,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":20,"org.easymock.tests.UsageVerifyTest.twoThrows":13,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":54,"org.easymock.tests2.SerializationTest.test":24,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":59,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":35,"org.easymock.tests2.CaptureTest.testPrimitive":27,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":94,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":18,"org.easymock.tests.UsageTest.moreThanOneArgument":16,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":48,"org.easymock.tests.UsageUnorderedTest.message":15,"org.easymock.tests2.UsageTest.moreThanOneArgument":6,"org.easymock.tests.UsageVerifyTest.twoReturns":14,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":79,"org.easymock.tests.UsageTest.argumentsOrdered":19,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":57,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":66,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":71,"org.easymock.tests2.NameTest.nameForMock":2,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":10,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":51,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":29,"org.easymock.tests2.UsageStrictMockTest.differentMethods":1,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":86,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":73,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":42,"org.easymock.tests.UsageCallCountTest.tooFewCalls":88,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":38,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":21,"org.easymock.tests2.UsageConstraintsTest.constraints":90,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":22,"org.easymock.tests2.SerializationTest.testClass":23,"org.easymock.tests.ReplayStateInvalidUsageTest.times":58,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":50,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":46,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":87,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":82,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":67,"org.easymock.tests2.UsageTest.strictResetToDefault":64,"org.easymock.tests2.CompareToTest.testGreateThan":28,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":93,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":83,"org.easymock.tests2.NameTest.nameForMocksControl":5,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":68,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":53,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":0,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":45}}]

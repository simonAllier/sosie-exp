[{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[0,1,2,3],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:191","sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:234","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","type":"CtThrowImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"methodName":"failMessage"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:118","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[26,27],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"failures":[28,29],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Results:90","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:41","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:149","sourceCode":"if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n    if (java.lang.reflect.Constructor<T> != null) {\n        throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n    } \n    java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n} ","type":"CtIfImpl"},"failures":[1,30,31,32,33],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:746","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Float>(float))","type":"CtInvocationImpl"},"failures":[34],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:256","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[35],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:392","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:416","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[36],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:90","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[37],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockMethodInterceptor:127","sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:125","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[1,2,3],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:392","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:346","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[38],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1633","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(float[]))","type":"CtInvocationImpl"},"failures":[39],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:132","sourceCode":"final java.util.Stack<org.easymock.internal.Invocation> java.util.Stack<org.easymock.internal.Invocation> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.get()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:132","sourceCode":"final java.util.Stack<org.easymock.internal.Invocation> java.util.Stack<org.easymock.internal.Invocation> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.get()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:109","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[40,41,42,43,44,45],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"failures":[46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,1,3,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:572","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[101],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append(java.lang.String).append(\", actual: \")","type":"CtInvocationImpl"},"failures":[131,132,133,65,134,68,69,70,135,43,136,88,89,91,92,137,114,116,117,120,121,122,123,126,128,129],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[65,138,139,68,69,70,43,136,88,91,114,116,117,128],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:38","sourceCode":"new java.util.HashSet<java.lang.String>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:583","sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToDefault();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[140],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":140,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":26,"org.easymock.tests2.UsageTest.argumentsOrdered":117,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":40,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":97,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":66,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":14,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":115,"org.easymock.samples.ExampleTest.voteForRemovals":56,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":103,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":48,"org.easymock.tests2.NameTest.nameForNiceMock":122,"org.easymock.tests2.SerializationTest.testAllMockedMethod":3,"org.easymock.tests.UsageVarargTest.allKinds":82,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":135,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":32,"org.easymock.samples.SupportTest.voteForRemovals":51,"org.easymock.samples.BasicClassMockTest.testPrintContent":47,"org.easymock.samples.ExampleTest.addDocument":55,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":22,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":124,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":0,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":29,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":89,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":33,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":131,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":35,"org.easymock.tests.UsageVarargTest.varargLongAccepted":79,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":93,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":13,"org.easymock.samples.ExampleTest.voteForRemoval":53,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":34,"org.easymock.tests2.UsageTest.wrongArguments":114,"org.easymock.tests.UsageStrictMockTest.range":91,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":30,"org.easymock.tests.UsageThrowableTest.noUpperLimit":71,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":44,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":67,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":106,"org.easymock.tests2.SerializationTest.test":2,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":96,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":11,"org.easymock.tests.UsageTest.moreThanOneArgument":134,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":42,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":69,"org.easymock.samples.SupportTest.addDocument":50,"org.easymock.tests2.CaptureTest.testCaptureFirst":110,"org.easymock.tests2.CaptureTest.testCaptureNone":109,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":28,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":10,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":95,"org.easymock.tests.UsageUnorderedTest.message":65,"org.easymock.tests2.UsageTest.moreThanOneArgument":137,"org.easymock.tests.UsageVerifyTest.twoReturns":136,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":113,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":21,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":8,"org.easymock.tests.UsageVarargTest.varargByteAccepted":80,"org.easymock.tests.UsageTest.argumentsOrdered":70,"org.easymock.tests.UsageVarargTest.varargIntAccepted":74,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":81,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":62,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":46,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":19,"org.easymock.tests2.NameTest.nameForMock":120,"org.easymock.tests2.CaptureTest.testCapture_2617107":105,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":63,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":102,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":23,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":85,"org.easymock.tests2.UsageStrictMockTest.differentMethods":129,"org.easymock.tests2.UsageConstraintsTest.any":101,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":6,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":24,"org.easymock.tests.UsageCallCountTest.tooManyCalls":64,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":127,"org.easymock.tests2.SerializationTest.testClass":1,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":100,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":20,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":18,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":130,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":36,"org.easymock.tests2.NameTest.nameForMocksControl":123,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":126,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":17,"org.easymock.tests2.NameTest.nameForStrictMock":121,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":41,"org.easymock.tests2.CaptureTest.testCaptureLast":108,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":86,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":132,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":111,"org.easymock.tests2.UsageStrictMockTest.range":128,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":31,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":76,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":116,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":37,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":9,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":12,"org.easymock.tests.UsageStrictMockTest.differentMethods":92,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":38,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":72,"org.easymock.tests.UsageTest.wrongArguments":68,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":27,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":83,"org.easymock.tests2.EasyMockSupportTest.testVerify":99,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":5,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":118,"org.easymock.tests.UsageVerifyTest.twoThrows":43,"org.easymock.tests.UsageVarargTest.varargShortAccepted":78,"org.easymock.tests.UsageVarargTest.varargCharAccepted":75,"org.easymock.samples.ExampleTest.voteAgainstRemoval":54,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":15,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":125,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":7,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":25,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":45,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":98,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":4,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":112,"org.easymock.samples.ExampleTest.voteAgainstRemovals":52,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":16,"org.easymock.tests.UsageVarargTest.differentLength":77,"org.easymock.tests2.CallbackTest.callback":119,"org.easymock.tests.UsageTest.unexpectedCallWithArray":139,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":138,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":88,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":61,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":59,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":84,"org.easymock.tests.UsageCallCountTest.tooFewCalls":60,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":90,"org.easymock.samples.ExampleTest.addAndChangeDocument":57,"org.easymock.tests.UsageStrictMockTest.testVerify":94,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":39,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":49,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":87,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":107,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":58,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":133,"org.easymock.tests2.CaptureTest.testCaptureAll":104,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":73}}]

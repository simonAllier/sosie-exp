[{"transplant":{"position":"org.easymock.internal.Invocation:183","sourceCode":"final java.lang.SecurityException java.lang.SecurityException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:153","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[0],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[1],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:180","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[2,3],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[4,5],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:40","sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:318","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Invocation:121","sourceCode":"if (org.easymock.internal.Invocation.isPrimitiveParameter(int)) {\n    if (!(java.lang.Object.equals(java.lang.Object))) {\n        return false;\n    } \n} else {\n    if (java.lang.Object != java.lang.Object) {\n        return false;\n    } \n}","type":"CtIfImpl"},"failures":[25],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:572","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:56","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","type":"CtLocalVariableImpl"},"failures":[26,26,27,27,28,29,30,31,32,33,34,35,36,37,38],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append(java.lang.String)","type":"CtInvocationImpl"},"failures":[6,8,9,10,39,40,41,42,15,43,44,45,46,47,48,16,17,18,19,49,50,51,52,53,54,55],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[56],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:137","sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","type":"CtInvocationImpl"},"failures":[57,58,59],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockInvocationHandler:40","sourceCode":"return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:36","sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","type":"CtTryImpl"},"failures":[60,61,62,6,7,8,63,64,9,10,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,39,40,41,42,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,15,43,162,44,45,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,26,26,27,27,183,184,185,186,187,188,189,190,4,16,17,191,192,193,194,195,18,19,196,197,28,29,198,3,30,199,31,200,201,32,202,203,204,33,34,205,206,207,208,209,210,211,212,213,214,215,216,217,218,36,219,220,221,222,223,224,37,38,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,53,255,54,55,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,24,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:157","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockStatement:42","sourceCode":"org.easymock.EasyMockSupport.org.easymock.EasyMockSupport.injectMocks(java.lang.Object)","type":"CtInvocationImpl"},"failures":[298,299,214,36],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:148","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"failures":[300],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Not:40","sourceCode":"java.lang.StringBuffer.append(\"not(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[301],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"failures":[57,58,59],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1790","sourceCode":"return null","type":"CtReturnImpl"},"failures":[271],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:169","sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:168","sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"failures":[302,303,304,305,306,307,308,309,310,311,120,312,313,314,315,316,317,318,319,320,57,321,322,176,323,324,181,325,326,327,328,200,202,34,205,207,208,209,210,5,35,213,329,330,331,215,332,333,334,335,336,337,338,339,230,231,340],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"interceptor":"interceptor","mockedMethods":"mockedMethods"}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:38","sourceCode":"new java.util.HashSet<java.lang.String>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"failures":[296,341],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:46","sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","type":"CtThrowImpl"},"failures":[62,64,69,70,76,77,78,79,80,81,84,40,130,135,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,163,165,166,167,168,169,170,190,194,229,230,231,232,253],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[7,11,12,15,20,22],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:327","sourceCode":"return false","type":"CtReturnImpl"},"failures":[87,88,91,92],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[60,61,62,6,8,63,64,9,10,65,342,343,344,345,346,66,347,348,349,350,351,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,302,82,352,83,84,353,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,354,113,355,356,357,115,116,117,118,119,120,39,40,41,42,121,122,123,124,125,126,127,128,129,130,315,131,132,133,358,134,135,359,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,360,15,43,162,44,45,361,362,163,164,165,166,167,168,169,170,171,172,173,174,175,176,323,177,178,179,180,181,363,182,26,26,27,27,183,184,185,186,364,187,188,325,326,189,298,299,190,4,16,17,191,192,193,194,195,18,19,196,197,28,29,198,3,199,200,201,32,202,203,204,33,34,205,206,207,208,209,210,35,211,212,213,214,215,216,217,218,36,219,220,221,222,223,224,37,38,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,365,245,49,50,51,52,246,247,248,249,250,251,252,253,254,366,53,255,54,55,367,256,257,258,259,260,261,262,263,264,265,368,266,267,268,269,270,271,24,272,273,274,275,276,369,277,278,279,280,281,282,283,284,340,285,286,370,287,288,371,372,289,290,291,292,293,294,295,296,297],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.Injector:122","sourceCode":"java.lang.Object java.lang.Object","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[373,37],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:67","sourceCode":"return !(java.util.List<T>.isEmpty())","type":"CtReturnImpl"},"failures":[371,372,289,291,374,295],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:164","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:50","sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","type":"CtIfImpl"},"failures":[40,41,42,44,47,48,54],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:249","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"cls"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:30","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:999","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Byte>(byte))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:370","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[73,75,375,196],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[223,224],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:67","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"))","type":"CtThrowImpl"},"failures":[376],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[58],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:140","sourceCode":"java.lang.StringBuilder.append(\":\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:57","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[6,8,9,10,39,40,41,15,43,44,45,46,16,17,18,19,49,50,51,52,53,54,55],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":259,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":62,"org.easymock.tests2.UsageTest.argumentsOrdered":19,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":243,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":79,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":192,"org.easymock.tests2.StubTest.stubWithReturnValue":253,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":299,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":277,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":102,"org.easymock.tests2.SerializationTest.testAllMockedMethod":340,"org.easymock.tests2.DelegateToTest.testReturnException":247,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":77,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":117,"org.easymock.tests.MockingTest.testPartialClassMocking":131,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":22,"org.easymock.samples.SupportTest.voteForRemovals":182,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":1,"org.easymock.tests.MockClassControlTest.testToString":304,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":89,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":330,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":153,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":216,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":118,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":141,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":220,"org.easymock.tests.UsageExpectAndThrowTest.object":151,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":46,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":282,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":275,"org.easymock.tests2.DelegateToTest.testWrongClass":249,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":121,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":122,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":265,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":67,"org.easymock.tests2.UsageTest.wrongArguments":17,"org.easymock.samples.ConstructorCalledMockTest.testTax":26,"org.easymock.tests.UsageStrictMockTest.range":44,"org.easymock.samples.ExampleTest.answerVsDelegate":184,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":240,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":200,"org.easymock.tests2.UsageConstraintsTest.testNull":261,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":207,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":152,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":309,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":242,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":198,"org.easymock.tests2.CaptureTest.testPrimitive":287,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":71,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":331,"org.easymock.tests.UsageTest.moreThanOneArgument":6,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":9,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":160,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":206,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":11,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":125,"org.easymock.tests2.CaptureTest.testCaptureNone":290,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":180,"org.easymock.tests.UsageUnorderedTest.message":42,"org.easymock.tests.UsageVerifyTest.twoReturns":41,"org.easymock.tests.UsageVarargTest.varargByteAccepted":349,"org.easymock.tests2.ThreadingTest.testThreadSafe":38,"org.easymock.tests.UsageTest.argumentsOrdered":10,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":136,"org.easymock.tests.UsageVarargTest.varargIntAccepted":344,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":337,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":357,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":325,"org.easymock.tests.InvocationTest.testEquals":25,"org.easymock.tests2.CaptureTest.testCapture_2617107":370,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":171,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":23,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":70,"org.easymock.tests2.UsageConstraintsTest.any":266,"org.easymock.tests2.StubTest.stub":252,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":88,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":175,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":78,"org.easymock.tests.UsageExpectAndThrowTest.longType":144,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":57,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":255,"org.easymock.tests2.SerializationTest.testClass":283,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":36,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":214,"org.easymock.tests.LimitationsTest.mockNativeMethod":120,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":300,"org.easymock.tests2.AnswerTest.answer":219,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":112,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":177,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":368,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":375,"org.easymock.tests2.CaptureTest.testAnd":285,"org.easymock.tests2.UsageTest.strictResetToDefault":4,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":367,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":35,"org.easymock.tests2.NameTest.nameForMocksControl":52,"org.easymock.tests2.MockedExceptionTest.testMockedException":230,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":124,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":332,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":237,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":74,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":64,"org.easymock.tests2.DelegateToTest.testDelegate":251,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":140,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":341,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":133,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":145,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":34,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":3,"org.easymock.tests.MockingTest.testNicePartialClassMocking":132,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":156,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":209,"org.easymock.tests.LimitationsTest.mockFinalMethod":312,"org.easymock.tests2.CaptureTest.testCaptureLast":289,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":80,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":61,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":264,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":33,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":276,"org.easymock.tests.MockingTest.testTwoMocks":315,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":60,"org.easymock.tests2.CaptureTest.testCapture1_2446744":288,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":93,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":154,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":149,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":18,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":279,"org.easymock.tests.UsageThrowableTest.throwError":163,"org.easymock.tests.UsageStrictMockTest.differentMethods":45,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":319,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":226,"org.easymock.tests2.MockBuilderTest.testCreateMockString":31,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":302,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":333,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":127,"org.easymock.tests.UsageExpectAndThrowTest.floatType":143,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":24,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":222,"org.easymock.tests.UsageVerifyTest.twoThrows":40,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":352,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":0,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":217,"org.easymock.samples.PartialClassMockTest.testGetArea":189,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":172,"org.easymock.samples.ExampleTest.voteAgainstRemoval":186,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":178,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":179,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":335,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":142,"org.easymock.tests2.UsageTest.niceToStrict":191,"org.easymock.tests.LimitationsTest.privateConstructor":311,"org.easymock.tests2.UsageConstraintsTest.testNotNull":278,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":229,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":170,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":56,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":29,"org.easymock.tests2.UsageTest.defaultResetToNice":195,"org.easymock.tests2.MockBuilderTest.testCreateMock":30,"org.easymock.samples.ExampleTest.voteAgainstRemovals":183,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":108,"org.easymock.tests.UsageVarargTest.differentLength":66,"org.easymock.tests2.CallbackTest.callback":245,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":13,"org.easymock.tests.UsageTest.openCallCountByLastCall":63,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":20,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":150,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":238,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":256,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":92,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":354,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":359,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":69,"org.easymock.tests.UsageCallCountTest.tooFewCalls":355,"org.easymock.tests.UsageOverloadedMethodTest.overloading":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":339,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":270,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":84,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":202,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":104,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":128,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":269,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":58,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":291,"org.easymock.tests.UsageThrowableTest.throwCheckedException":167,"org.easymock.tests.MockClassControlTest.testEquals":308,"org.easymock.tests2.EasyMockSupportClassTest.testAll":215,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":323,"org.easymock.tests.MockingTest.testStrictClassMocking":313,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":21,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":12,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":158,"org.easymock.tests2.CaptureTest.testCaptureAll":286,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":204,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":135,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":32,"org.easymock.tests2.UsageConstraintsTest.testMatches":271,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":203,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":224,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":358,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":126,"org.easymock.samples.ExampleTest.voteForRemovals":187,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":228,"org.easymock.tests2.NameTest.nameForNiceMock":51,"org.easymock.tests.UsageVarargTest.allKinds":351,"org.easymock.tests2.DependencyTest.testInterfaceMocking":281,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":39,"org.easymock.samples.BasicClassMockTest.testPrintContent":326,"org.easymock.samples.ExampleTest.addDocument":364,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":338,"org.easymock.tests2.DelegateToTest.testStubDelegate":248,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":169,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":254,"org.easymock.tests2.AnswerTest.stubAnswer":223,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":250,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":81,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":43,"org.easymock.tests2.UsageConstraintsTest.greaterThan":272,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":73,"org.easymock.tests.UsageVarargTest.varargLongAccepted":348,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":213,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":361,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":322,"org.easymock.samples.ExampleTest.voteForRemoval":185,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":329,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":225,"org.easymock.tests.UsageExpectAndReturnTest.floatType":95,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":111,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":37,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":27,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":353,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":273,"org.easymock.tests.UsageThrowableTest.noUpperLimit":164,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":257,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":181,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":190,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":327,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":371,"org.easymock.tests2.SerializationTest.test":284,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":59,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":318,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":235,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":165,"org.easymock.tests2.UsageConstraintsTest.testSame":262,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":94,"org.easymock.samples.SupportTest.addDocument":363,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":76,"org.easymock.tests2.CaptureTest.testCaptureFirst":295,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":246,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":236,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":197,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":100,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":334,"org.easymock.tests.GenericTest.testPackageScope":176,"org.easymock.tests2.CaptureTest.testCapture2_2446744":294,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":227,"org.easymock.tests2.UsageTest.moreThanOneArgument":16,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":139,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":199,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":350,"org.easymock.tests.GenericTest.testBridgedEquals":324,"org.easymock.tests2.NameTest.nameForMock":49,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":115,"org.easymock.tests.UsageExpectAndReturnTest.longType":96,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":233,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":105,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":159,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":369,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":119,"org.easymock.tests2.UsageStrictMockTest.differentMethods":55,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":157,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":87,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":123,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":5,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":97,"org.easymock.tests.UsageCallCountTest.tooManyCalls":116,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":155,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":75,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":113,"org.easymock.tests2.MockedExceptionTest.testRealException":232,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":101,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":53,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":146,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":68,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":168,"org.easymock.tests.MockingTest.testNiceClassMocking":316,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":201,"org.easymock.tests.MockingTest.testClassMocking":314,"org.easymock.tests2.UsageConstraintsTest.testContains":268,"org.easymock.tests2.NameTest.nameForStrictMock":50,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":231,"org.easymock.tests2.UsageConstraintsTest.testFind":260,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":130,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":296,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":208,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":297,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":161,"org.easymock.tests.UsageExpectAndReturnTest.object":103,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":328,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":320,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":274,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":47,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":210,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":28,"org.easymock.tests2.UsageStrictMockTest.range":54,"org.easymock.tests2.UsageConstraintsTest.lessThan":280,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":241,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":346,"org.easymock.tests.UsageTest.exactCallCountByLastCall":65,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":134,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":234,"org.easymock.tests2.CaptureTest.testCaptureRightOne":292,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":376,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":137,"org.easymock.tests2.UsageConstraintsTest.testOr":263,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":14,"org.easymock.tests.UsageRangeTest.combination":72,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":342,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":205,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":109,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":83,"org.easymock.tests.UsageTest.wrongArguments":8,"org.easymock.tests.MockClassControlTest.testHashCode":307,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":303,"org.easymock.tests2.EasyMockSupportTest.testVerify":365,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":98,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":106,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":138,"org.easymock.tests.UsageVarargTest.varargShortAccepted":347,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":321,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":91,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":82,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":114,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":373,"org.easymock.tests2.UsageConstraintsTest.cmpTo":267,"org.easymock.tests.UsageVarargTest.varargCharAccepted":345,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":221,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":366,"org.easymock.tests2.UsageTest.openCallCountByLastCall":193,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":194,"org.easymock.tests.DefaultClassInstantiatorTest.object":317,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":244,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":90,"org.easymock.tests2.CaptureTest.testCaptureFromStub":293,"org.easymock.tests.UsageTest.unexpectedCallWithArray":7,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":336,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":148,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":15,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":166,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":356,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":107,"org.easymock.tests2.CaptureTest.testCapture":374,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":306,"org.easymock.tests2.UsageConstraintsTest.constraints":258,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":211,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":162,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":147,"org.easymock.samples.ExampleTest.addAndChangeDocument":188,"org.easymock.tests.CapturesMatcherTest.test":301,"org.easymock.tests.UsageStrictMockTest.testVerify":362,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":110,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":86,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":298,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":360,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":305,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":218,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":372,"org.easymock.tests2.UsageTest.resumeIfFailure":196,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":173,"org.easymock.tests.LimitationsTest.abstractClass":310,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":2,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":99,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":85,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":174,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":343,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":239,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":48}}]

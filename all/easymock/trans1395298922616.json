[{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:110","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"equalsMethod","method":"equalsMethod"}},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation().addCapture(((org.easymock.internal.matchers.Captures<java.lang.Object>)(this)), java.lang.Object)","type":"CtInvocationImpl"},"failures":[59,60,61,62,63,64,65,66,68,69,70,71,72,253],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:137","sourceCode":"return java.util.List<T>.toString()","type":"CtReturnImpl"},"failures":[253],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[153,154,155,295],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:85","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object));\n} ","type":"CtIfImpl"},"failures":[0,1,1,2,2,3,4,5,6,8,9,15,16,17,18,19,20,21,22,23,24,25,26,27,28,296,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,297,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,298,85,86,87,88,89,90,91,92,93,94,299,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,300,301,112,113,114,302,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,139,140,141,142,303,304,143,144,145,146,148,149,150,151,152,153,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,305,306,307,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,308,196,197,198,199,200,201,202,203,309,310,311,312,313,314,204,315,205,206,316,317,207,318,319,320,208,321,209,210,211,212,213,214,215,216,217,218,219,220,322,323,324,325,326,221,222,223,224,225,226,327,328,329,227,228,330,229,230,231,232,233,234,235,236,237,331,239,240,241,332,333,252,334,335,336,337,338,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,339,340,341,342,343,269,270,271,272,273,274,275,276,277,278,285,286,287,289,290,291,292,293,294,344,345,346],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:355","sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[347],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"transplant":{"position":"org.easymock.EasyMock:1079","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.InstanceOf(java.lang.Class<T>))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:149","sourceCode":"if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n    if (java.lang.reflect.Constructor<T> != null) {\n        throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n    } \n    java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n} ","type":"CtIfImpl"},"failures":[16,348,349,350,55,351,56,58,59,352,353,354,355,356,138,153,154],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:116","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[304],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[21,22,24,26,27,296,38,43,59,61,69],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:67","sourceCode":"return !(java.util.List<T>.isEmpty())","type":"CtReturnImpl"},"failures":[64,65,66,68,357,72],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Equals:54","failures":[358],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.EasyMock:946","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:235","failures":[1,2,16,348,359,360,350,351,361,362,363,364,365,366,153],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:256","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[84],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:69","failures":[153,154,155,295],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"failures":[367,368,369,370],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"propertyFileName"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Any:36","failures":[26,29,60,66,67,72,148,226,227,228,255,256,257,258,259,264,265,266,267,268,273,285,286,290],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:137","sourceCode":"if (int > 1) {\n    java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\");\n} else {\n    java.lang.StringBuilder.append(\":\");\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:90","sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","type":"CtIfImpl"},"failures":[98,104,105,150,371,213,214,217,218,226,276,277,289,292],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"result","matches":"i"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[98,104,105,150,207,371,213,214,217,218,226,276,277,289,292],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MockBuilder:89","failures":[372,373,52,82,83],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[348,350,352,353,354,374,375],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"failures":[376,377,378,379,380],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[365],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:63","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:225","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,22,23,24,25,27,28,29,30,32,33,35,36,38,39,40,41,42,43,51,52,54,55,57,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,80,82,83,84,88,89,92,94,95,96,98,99,100,103,104,105,107,108,109,110,111,112,114,115,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,158,159,161,166,171,178,179,181,186,191,196,197,198,204,205,206,317,208,214,217,218,219,220,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,242,243,244,245,246,248,249,250,251,252,254,255,256,257,258,259,260,264,265,266,267,268,273,276,277,279,280,281,283,284,285,286,288,289,290,291,292,293,294],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[17,18,19,20,21,22,23,24,25,26,27,28,296,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,59,60,61,62,63,64,65,66,67,68,69,70,71,72,80,381,148,226,227,228,252,255,256,257,258,259,264,265,266,267,268,273,285,286,289,290],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:137","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[0,1,1,2,2,11,12,16,50,51,297,52,53,54,55,56,57,58,73,74,76,77,78,79,80,81,82,83,84,298,92,118,119,120,121,123,124,138,139,140,141,153,155,308,196,197,198,309,312,220,237,238,331,347,334,382,335,336,337,338,383,384,254,343],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[385,386,387,388,213,289],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[21,22,24,26,27,296,38,43,59,61,69],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[21,22,23,24,25,26,27,28,296,29,38,39,43,44,59,60,61,62,69,70],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[27],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:69","failures":[153,154,155,295],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:305","failures":[0,3,4,5,6,8,15,16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,51,52,54,55,57,59,60,61,62,63,66,67,68,69,71,72,73,74,75,76,77,78,80,82,83,84,85,86,87,88,89,92,94,95,96,97,99,101,102,103,106,107,108,109,110,111,112,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,139,140,141,142,144,145,148,150,151,153,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,204,205,206,317,318,319,208,321,209,210,211,212,215,216,219,227,228,229,231,232,233,234,235,236,237,239,240,241,332,254,255,256,259,260,264,265,266,267,268,273,275,276,277,285,286,287,290,292,293],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[150,151,160,164,165,167,170,180,184,185,187,190,389,292,293],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":22,"org.easymock.tests2.UsageTest.argumentsOrdered":105,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":211,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":135,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":299,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":100,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":10,"org.easymock.tests2.DelegateToTest.testReturnException":112,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":270,"org.easymock.tests.MockingTest.testPartialClassMocking":196,"org.easymock.tests.MockClassControlTest.testToString":335,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":339,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":298,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":380,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":156,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":139,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":109,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":352,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":28,"org.easymock.tests2.UsageTest.wrongArguments":98,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":255,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":262,"org.easymock.samples.ExampleTest.answerVsDelegate":4,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":312,"org.easymock.tests2.UsageConstraintsTest.testNull":24,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":76,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":384,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":134,"org.easymock.tests2.CaptureTest.testPrimitive":62,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":259,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":175,"org.easymock.tests.UsageTest.moreThanOneArgument":212,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":75,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":201,"org.easymock.tests.UsageTest.argumentsOrdered":218,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":322,"org.easymock.tests.UsageVarargTest.varargIntAccepted":244,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":264,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":50,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":375,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":53,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":268,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":111,"org.easymock.tests2.AnswerTest.answer":142,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":296,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":49,"org.easymock.tests2.CaptureTest.testAnd":59,"org.easymock.tests2.UsageTest.strictResetToDefault":96,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":81,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":360,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":200,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":129,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":209,"org.easymock.tests2.DelegateToTest.testDelegate":115,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":326,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":171,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":273,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":225,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":318,"org.easymock.tests2.CaptureTest.testCapture1_2446744":63,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":169,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":47,"org.easymock.tests.UsageThrowableTest.throwError":229,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":311,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":203,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":363,"org.easymock.samples.PartialClassMockTest.testGetArea":0,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":265,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":345,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":157,"org.easymock.tests2.UsageTest.niceToStrict":99,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":343,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":376,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":52,"org.easymock.tests2.MockBuilderTest.testCreateMock":56,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":385,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":165,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":130,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":329,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":260,"org.easymock.tests.UsageOverloadedMethodTest.overloading":240,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":33,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":206,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":187,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":239,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":32,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":68,"org.easymock.tests2.EasyMockSupportClassTest.testAll":138,"org.easymock.tests.MockClassControlTest.testEquals":383,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":238,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":173,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":48,"org.easymock.tests2.CaptureTest.testCaptureAll":60,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":223,"org.easymock.tests.MockNameTest.defaultName":330,"org.easymock.tests2.UsageConstraintsTest.testMatches":34,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":202,"org.easymock.samples.ExampleTest.voteForRemovals":8,"org.easymock.tests.UsageVarargTest.allKinds":252,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":275,"org.easymock.samples.BasicClassMockTest.testPrintContent":12,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":224,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":235,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":146,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":274,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":302,"org.easymock.tests2.UsageConstraintsTest.greaterThan":36,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":356,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":321,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":84,"org.easymock.samples.ExampleTest.voteForRemoval":5,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":86,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":313,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":79,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":95,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":220,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":351,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":127,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":231,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":269,"org.easymock.tests2.CaptureTest.testCaptureFirst":72,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":301,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":128,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":107,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":207,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":183,"org.easymock.tests2.UsageTest.moreThanOneArgument":97,"org.easymock.tests2.CaptureTest.testCapture2_2446744":71,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":88,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":57,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":251,"org.easymock.tests.GenericTest.testBridgedEquals":347,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":283,"org.easymock.tests.UsageExpectAndReturnTest.longType":179,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":125,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":221,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":174,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":41,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":320,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":172,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":199,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":306,"org.easymock.tests.UsageCallCountTest.tooManyCalls":284,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":278,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":184,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":161,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":234,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":119,"org.easymock.tests2.UsageConstraintsTest.testContains":31,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":373,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":92,"org.easymock.tests2.UsageConstraintsTest.testFind":23,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":241,"org.easymock.tests.MockTypeTest.fromEasyMockClass":310,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":18,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":287,"org.easymock.tests.UsageExpectAndReturnTest.object":186,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":80,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":133,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":246,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":353,"org.easymock.tests.UsageTest.exactCallCountByLastCall":219,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":227,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":378,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":323,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":348,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":192,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":242,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":205,"org.easymock.tests.MockClassControlTest.testHashCode":338,"org.easymock.tests2.EasyMockSupportTest.testVerify":137,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":324,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":204,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":328,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":46,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":381,"org.easymock.tests.UsageVarargTest.varargCharAccepted":245,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":147,"org.easymock.tests2.UsageTest.openCallCountByLastCall":101,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":136,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":327,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":340,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":371,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":163,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":232,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":82,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":337,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":162,"org.easymock.tests.CapturesMatcherTest.test":253,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":193,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":305,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":141,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":336,"org.easymock.tests2.UsageTest.resumeIfFailure":106,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":309,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":272,"org.easymock.tests2.StubTest.stubWithReturnValue":117,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":350,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":185,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":42,"org.easymock.tests2.SerializationTest.testAllMockedMethod":155,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":332,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":365,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":386,"org.easymock.samples.SupportTest.voteForRemovals":15,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":168,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":295,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":333,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":303,"org.easymock.tests.UsageExpectAndThrowTest.object":166,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":39,"org.easymock.tests2.DelegateToTest.testWrongClass":114,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":285,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":286,"org.easymock.samples.ConstructorCalledMockTest.testTax":1,"org.easymock.tests.UsageStrictMockTest.range":292,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":132,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":118,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":167,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":54,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":217,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":261,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":387,"org.easymock.tests2.CaptureTest.testCaptureNone":67,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":346,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":368,"org.easymock.tests.UsageUnorderedTest.message":226,"org.easymock.tests.UsageVerifyTest.twoReturns":277,"org.easymock.tests.UsageVarargTest.varargByteAccepted":250,"org.easymock.tests2.ThreadingTest.testThreadSafe":85,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":281,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":11,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":342,"org.easymock.tests2.CaptureTest.testCapture_2617107":61,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":258,"org.easymock.tests2.UsageConstraintsTest.any":29,"org.easymock.tests2.StubTest.stub":116,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":307,"org.easymock.tests.UsageExpectAndThrowTest.longType":159,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":271,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":149,"org.easymock.tests2.SerializationTest.testClass":153,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":94,"org.easymock.tests.LimitationsTest.mockNativeMethod":254,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":195,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":331,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":152,"org.easymock.tests2.MockedExceptionTest.testMockedException":91,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":216,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":160,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":198,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":73,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":55,"org.easymock.tests.MockingTest.testNicePartialClassMocking":197,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":78,"org.easymock.tests2.CaptureTest.testCaptureLast":66,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":319,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":124,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":27,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":40,"org.easymock.tests.MockingTest.testTwoMocks":308,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":176,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":164,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":104,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":44,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":370,"org.easymock.tests.UsageStrictMockTest.differentMethods":293,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":87,"org.easymock.tests2.MockBuilderTest.testCreateMockString":58,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":334,"org.easymock.tests.UsageExpectAndThrowTest.floatType":158,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":35,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":143,"org.easymock.tests.UsageVerifyTest.twoThrows":276,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":315,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":140,"org.easymock.samples.ExampleTest.voteAgainstRemoval":6,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":344,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":83,"org.easymock.tests2.UsageConstraintsTest.testNotNull":43,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":90,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":236,"org.easymock.tests2.UsageTest.defaultResetToNice":103,"org.easymock.samples.ExampleTest.voteAgainstRemovals":3,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":191,"org.easymock.tests.UsageVarargTest.differentLength":247,"org.easymock.tests2.CallbackTest.callback":110,"org.easymock.tests2.UsageConstraintsTest.equals":358,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":366,"org.easymock.tests.UsageTest.openCallCountByLastCall":215,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":19,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":257,"org.easymock.tests.UsageCallCountTest.tooFewCalls":279,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":121,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":263,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":369,"org.easymock.tests.UsageThrowableTest.throwCheckedException":233,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":388,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":123,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":228,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":120,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":300,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":122,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":145,"org.easymock.tests.ObjectMethodsTest.testHashCode":341,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":374,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":89,"org.easymock.tests2.DependencyTest.testInterfaceMocking":108,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":354,"org.easymock.samples.ExampleTest.addDocument":7,"org.easymock.tests2.DelegateToTest.testStubDelegate":113,"org.easymock.tests2.AnswerTest.stubAnswer":144,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":290,"org.easymock.tests.UsageVarargTest.varargLongAccepted":249,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":294,"org.easymock.tests.UsageExpectAndReturnTest.floatType":178,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":194,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":16,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":2,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":37,"org.easymock.tests.UsageThrowableTest.noUpperLimit":230,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":316,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":20,"org.easymock.tests2.SerializationTest.test":154,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":64,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":177,"org.easymock.tests2.UsageConstraintsTest.testSame":25,"org.easymock.samples.SupportTest.addDocument":14,"org.easymock.tests.GenericTest.testPackageScope":237,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":325,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":377,"org.easymock.tests2.NameTest.nameForMock":349,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":188,"org.easymock.tests2.UsageStrictMockTest.differentMethods":151,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":362,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":180,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":170,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":210,"org.easymock.tests2.MockedExceptionTest.testRealException":93,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":314,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":379,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":364,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":148,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":256,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":17,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":77,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":38,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":51,"org.easymock.tests2.UsageStrictMockTest.range":150,"org.easymock.tests2.UsageConstraintsTest.lessThan":45,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":372,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":389,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":126,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":355,"org.easymock.tests2.CaptureTest.testCaptureRightOne":69,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":367,"org.easymock.tests2.UsageConstraintsTest.testOr":26,"org.easymock.tests.UsageRangeTest.combination":208,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":74,"org.easymock.tests.UsageTest.wrongArguments":214,"org.easymock.tests2.MockBuilderTest.testWithConstructor":359,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":382,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":181,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":189,"org.easymock.tests.UsageVarargTest.varargShortAccepted":248,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":282,"org.easymock.tests2.UsageConstraintsTest.cmpTo":30,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":304,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":102,"org.easymock.tests2.CaptureTest.testCaptureFromStub":70,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":297,"org.easymock.tests.UsageTest.unexpectedCallWithArray":213,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":289,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":280,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":361,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":190,"org.easymock.tests2.CaptureTest.testCapture":357,"org.easymock.tests2.UsageConstraintsTest.constraints":21,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":291,"org.easymock.samples.ExampleTest.addAndChangeDocument":9,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":13,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":288,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":222,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":65,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":266,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":182,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":267,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":317,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":131,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":243}}]

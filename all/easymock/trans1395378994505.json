[{"transplant":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","delegateTo":"value"}},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"failures":[107],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:91","sourceCode":"java.lang.StringBuilder.append(\", \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:53","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[176,177],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"buffer"}},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:147","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[178],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[161],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.Find:41","failures":[179],"status":-1,"binaryOperator":"(\"find(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\")))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation().addCapture(((org.easymock.internal.matchers.Captures<java.lang.Object>)(this)), java.lang.Object)","type":"CtInvocationImpl"},"failures":[27,28,180,29,30,181,182,31,32,33,34,183,35,36,184],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:37","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:43","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[74],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[185,186,187,188,60,189,116,118,119,120,121,122,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,156],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:116","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[88,218],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[219,219,220,220,5,221,222,14,223,18,224,20,21,22,23,25,26,225,226,227,228,37,38,40,41,42,229,43,230,231,232,44,45,46,233,234,185,186,187,235,236,237,238,239,240,89,241,90,91,242,243,92,244,245,246,247,248,249,101,250,251,102,252,253,254,255,256,257,258,259,260,103,261,262,263,264,265,104,266,267,268,269,270,271,272,273,274,275,276,277,278,126,279,127,280,281,282,149,283,284,285,286,159,160,161,287,288,289,290,291,292,293,294,295],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"result","name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:58","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalArgumentException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1432","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[80],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1221","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"failures":[296,0,1,297,2,3,298,4,299,300,221,222,6,7,8,9,10,11,301,302,12,13,303,304,15,305,16,17,306,19,224,307,23,24,27,28,180,29,30,181,182,31,32,33,34,183,35,36,37,38,39,40,41,42,229,308,43,231,232,44,46,233,309,310,185,186,187,188,311,312,313,314,315,316,317,48,318,319,320,49,50,51,52,53,54,321,57,58,59,322,178,60,61,62,63,64,65,66,67,68,69,70,323,71,72,73,74,75,76,77,78,79,80,81,82,324,83,84,85,86,325,87,326,327,328,88,218,245,246,329,330,93,94,95,331,96,332,97,98,333,334,335,99,100,247,101,251,253,259,262,265,336,105,106,107,337,338,339,340,108,189,109,110,111,112,113,114,115,341,342,343,116,344,117,118,119,120,121,122,345,346,347,123,348,124,125,349,350,351,352,353,354,268,269,270,271,272,273,355,274,356,357,358,359,360,190,191,192,193,194,195,361,362,363,364,365,366,367,368,369,370,371,126,279,280,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,196,387,148,388,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,177,281,149,389,390,391,392,393,150,217,394,395,396,397,398,399,151,152,400,401,153,154,155,156,402,403,404,405,406,407,408,409,410,411,412,157,158,413,414,415,416,417,284,285,286,159,418,419,420,287,288,421,289,290,291,292,293,294,295,422,423,424,425,426,167,168,169,170,171,172,427,428,173,174,429,430,175],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:65","sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","type":"CtIfImpl"},"failures":[15,16,17,325,431,432,433,95,331,334,335,108,189,109,347,123,124,125,177,172,428,429,430],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:390","sourceCode":"new org.easymock.internal.Range(0 , java.lang.Integer.int)","type":"CtNewClassImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[0,1,2,3,4,5,9,12,13,14,15,16,17,20,21,22,23,24,25,26,37,38,39,40,41,42,43,44,45,46,48,238,89,90,91,92,101,102,103,104,110,111,112,113,114,123,124,125,128,129,130,131,132,133,136,137,139,140,141,143,144,145,146,147,149,151,157,158,413,414,415,416,159,160,161,167,168,169,170],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"type":"returnedType"}},{"position":"org.easymock.internal.MockBuilder:205","failures":[219,220,5,14,223,434,18,229,230,44,45,234,185,236,435,238,239,436,240,89,241,90,437,91,438,242,243,92,439,244,102,103,104,276,277,278,127],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:289","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[278],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericInterface":"actualTypeArgument","typeVariableMap":"typeVariableMap","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:101","sourceCode":"return java.util.Properties.getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[440,441,442,443,308],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"failures":[107],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1079","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.InstanceOf(java.lang.Class<T>))","type":"CtInvocationImpl"},"failures":[180,63,69,80],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Injector:122","sourceCode":"java.lang.Object java.lang.Object","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:164","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1249","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:157","failures":[444],"status":-1,"binaryOperator":"(java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","name":"math","type":"mutation"},{"position":"org.easymock.internal.RecordState:274","failures":[297,307,309,310,87,326,327,328,88,218,384],"status":-1,"binaryOperator":"org.easymock.IAnswer<?> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"failures":[438],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:111","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"hashCodeMethod","equalsMethod":"hashCodeMethod"}},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[105,106,107,115],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:61","sourceCode":"throw new java.lang.RuntimeException(java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:45","sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","type":"CtThrowImpl"},"failures":[445],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"qualifier":"name","this":"this"}},{"transplant":{"position":"org.easymock.internal.Results:64","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Find:41","sourceCode":"java.lang.StringBuffer.append(((\"find(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[179],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:41","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[184],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":64,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":171,"org.easymock.tests2.UsageTest.argumentsOrdered":335,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":58,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":332,"org.easymock.tests2.DelegateToTest.testReturnException":317,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":191,"org.easymock.tests.MockingTest.testPartialClassMocking":159,"org.easymock.tests.MockClassControlTest.testToString":289,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":445,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":115,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":234,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":255,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":102,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":197,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":13,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":70,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":151,"org.easymock.tests2.UsageTest.wrongArguments":331,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":339,"org.easymock.samples.ExampleTest.answerVsDelegate":297,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":277,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":420,"org.easymock.tests2.UsageConstraintsTest.testNull":66,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":40,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":57,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":294,"org.easymock.tests2.CaptureTest.testPrimitive":29,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":153,"org.easymock.tests.UsageTest.moreThanOneArgument":172,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":216,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":39,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":415,"org.easymock.tests.UsageTest.argumentsOrdered":430,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":389,"org.easymock.tests.UsageVarargTest.varargIntAccepted":404,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":110,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":236,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":241,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":114,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":11,"org.easymock.tests.ReplayStateInvalidUsageTest.times":380,"org.easymock.tests2.DependencyTest.testClassMocking":301,"org.easymock.tests2.AnswerTest.answer":87,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":323,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":315,"org.easymock.tests2.CaptureTest.testAnd":27,"org.easymock.tests2.UsageTest.strictResetToDefault":94,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":436,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":232,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":414,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":169,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":53,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":393,"org.easymock.tests2.DelegateToTest.testDelegate":320,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":212,"org.easymock.tests.LimitationsTest.mockFinalMethod":283,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":194,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":399,"org.easymock.tests2.DependencyTest.testClassMockingSupport":302,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":341,"org.easymock.tests2.CaptureTest.testCapture1_2446744":30,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":308,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":210,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":313,"org.easymock.tests.UsageThrowableTest.throwError":116,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":374,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":417,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":267,"org.easymock.samples.PartialClassMockTest.testGetArea":5,"org.easymock.tests.MockingTest.testInterfaceMocking":418,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":375,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":111,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":106,"org.easymock.tests2.UsageTest.niceToStrict":96,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":198,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":256,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":275,"org.easymock.tests2.ThreadingTest.testChangeDefault":440,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":89,"org.easymock.tests2.MockBuilderTest.testCreateMock":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":263,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":206,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":54,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":424,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":363,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":337,"org.easymock.tests.UsageOverloadedMethodTest.overloading":155,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":260,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":265,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":75,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":196,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":154,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":139,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":74,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":33,"org.easymock.tests2.EasyMockSupportClassTest.testAll":101,"org.easymock.tests.MockClassControlTest.testEquals":293,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":279,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":214,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":225,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":397,"org.easymock.tests2.CaptureTest.testCaptureAll":28,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":314,"org.easymock.tests.MockNameTest.defaultName":394,"org.easymock.tests2.UsageConstraintsTest.testMatches":76,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":416,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":372,"org.easymock.samples.ExampleTest.voteForRemovals":4,"org.easymock.tests.UsageVarargTest.allKinds":412,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":108,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":398,"org.easymock.samples.BasicClassMockTest.testPrintContent":222,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":121,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":303,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":195,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":319,"org.easymock.tests2.UsageConstraintsTest.greaterThan":78,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":355,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":250,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":168,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":46,"org.easymock.samples.ExampleTest.voteForRemoval":2,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":274,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":7,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":233,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":229,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":93,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":295,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":242,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":51,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":117,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":248,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":190,"org.easymock.tests2.CaptureTest.testCaptureFirst":36,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":316,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":52,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":100,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":388,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":135,"org.easymock.tests2.CaptureTest.testCapture2_2446744":35,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":9,"org.easymock.tests2.UsageTest.moreThanOneArgument":95,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":92,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":411,"org.easymock.tests.GenericTest.testBridgedEquals":280,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":370,"org.easymock.tests.UsageExpectAndReturnTest.longType":131,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":395,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":49,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":215,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":324,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":336,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":213,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":413,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":352,"org.easymock.tests.UsageCallCountTest.tooManyCalls":371,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":365,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":264,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":136,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":202,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":120,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":21,"org.easymock.tests.MockingTest.testNiceClassMocking":287,"org.easymock.tests.MockingTest.testClassMocking":285,"org.easymock.tests2.UsageConstraintsTest.testContains":73,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":237,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":364,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":187,"org.easymock.tests2.UsageConstraintsTest.testFind":65,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":156,"org.easymock.tests.MockTypeTest.fromEasyMockClass":361,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":310,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":345,"org.easymock.tests.UsageExpectAndReturnTest.object":138,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":43,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":56,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":406,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":359,"org.easymock.tests.UsageTest.exactCallCountByLastCall":175,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":150,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":390,"org.easymock.tests2.ConstraintsToStringTest.findToString":179,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":223,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":402,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":144,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":386,"org.easymock.tests.MockClassControlTest.testHashCode":292,"org.easymock.tests2.EasyMockSupportTest.testVerify":322,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":258,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":391,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":423,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":384,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":312,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":311,"org.easymock.tests.UsageVarargTest.varargCharAccepted":405,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":354,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":304,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":166,"org.easymock.tests2.UsageTest.openCallCountByLastCall":97,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":59,"org.easymock.tests.DefaultClassInstantiatorTest.object":268,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":422,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":357,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":204,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":259,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":118,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":228,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":44,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":291,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":203,"org.easymock.tests.CapturesMatcherTest.test":184,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":145,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":351,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":104,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":290,"org.easymock.tests2.UsageTest.resumeIfFailure":99,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":276,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":193,"org.easymock.tests2.StubTest.stubWithReturnValue":60,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":437,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":137,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":83,"org.easymock.tests2.SerializationTest.testAllMockedMethod":224,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":425,"org.easymock.samples.SupportTest.voteForRemovals":0,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":278,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":209,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":426,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":326,"org.easymock.tests.UsageExpectAndThrowTest.object":207,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":81,"org.easymock.tests2.DelegateToTest.testWrongClass":318,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":157,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":158,"org.easymock.tests.UsageStrictMockTest.range":124,"org.easymock.samples.ConstructorCalledMockTest.testTax":219,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":329,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":321,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":20,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":208,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":90,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":429,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":247,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":382,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":338,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":107,"org.easymock.tests2.CaptureTest.testCaptureNone":32,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":441,"org.easymock.tests.UsageUnorderedTest.message":177,"org.easymock.tests.UsageVerifyTest.twoReturns":109,"org.easymock.tests.UsageVarargTest.varargByteAccepted":410,"org.easymock.tests2.ThreadingTest.testThreadSafe":6,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":261,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":368,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":221,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":360,"org.easymock.tests2.CaptureTest.testCapture_2617107":180,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":343,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":401,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":164,"org.easymock.tests2.UsageConstraintsTest.any":71,"org.easymock.tests2.StubTest.stub":178,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":379,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":353,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":165,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":192,"org.easymock.tests.UsageExpectAndThrowTest.longType":200,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":272,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":378,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":305,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":47,"org.easymock.tests2.SerializationTest.testClass":18,"org.easymock.tests.LimitationsTest.mockNativeMethod":149,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":147,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":127,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":227,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":306,"org.easymock.tests2.NameTest.nameForMocksControl":433,"org.easymock.tests2.MockedExceptionTest.testMockedException":186,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":251,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":174,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":161,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":201,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":37,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":91,"org.easymock.tests.MockingTest.testNicePartialClassMocking":160,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":42,"org.easymock.tests2.CaptureTest.testCaptureLast":31,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":342,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":26,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":69,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":82,"org.easymock.tests.MockingTest.testTwoMocks":286,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":128,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":205,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":334,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":85,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":443,"org.easymock.samples.ExampleTest.removeNonExistingDocument":299,"org.easymock.tests.UsageStrictMockTest.differentMethods":125,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":376,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":442,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":270,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":8,"org.easymock.tests2.MockBuilderTest.testCreateMockString":244,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":288,"org.easymock.tests.UsageExpectAndThrowTest.floatType":199,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":252,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":77,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":249,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":328,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":434,"org.easymock.tests.UsageVerifyTest.twoThrows":189,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":385,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":103,"org.easymock.samples.ExampleTest.voteAgainstRemoval":3,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":163,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":105,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":45,"org.easymock.tests.LimitationsTest.privateConstructor":282,"org.easymock.tests2.UsageConstraintsTest.testNotNull":84,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":185,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":122,"org.easymock.tests2.UsageTest.defaultResetToNice":333,"org.easymock.samples.ExampleTest.voteAgainstRemovals":1,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":143,"org.easymock.tests.UsageVarargTest.differentLength":407,"org.easymock.tests2.CallbackTest.callback":307,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":230,"org.easymock.tests.UsageTest.openCallCountByLastCall":173,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":61,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":400,"org.easymock.tests.UsageCallCountTest.tooFewCalls":366,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":23,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":340,"org.easymock.tests.UsageThrowableTest.throwCheckedException":119,"org.easymock.tests.MockingTest.testStrictClassMocking":284,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":25,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":217,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":22,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":381,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":24,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":218,"org.easymock.tests.ObjectMethodsTest.testHashCode":358,"org.easymock.tests2.NameTest.nameForNiceMock":432,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":10,"org.easymock.tests2.DependencyTest.testInterfaceMocking":12,"org.easymock.samples.ExampleTest.addDocument":298,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":262,"org.easymock.tests2.DelegateToTest.testStubDelegate":48,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":266,"org.easymock.tests2.AnswerTest.stubAnswer":88,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":123,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":438,"org.easymock.tests.UsageVarargTest.varargLongAccepted":409,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":349,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":162,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":146,"org.easymock.tests.UsageExpectAndReturnTest.floatType":130,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":14,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":220,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":387,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":79,"org.easymock.tests.UsageThrowableTest.noUpperLimit":344,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":62,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":245,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":181,"org.easymock.tests2.SerializationTest.test":19,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":444,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":269,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":129,"org.easymock.tests2.UsageConstraintsTest.testSame":67,"org.easymock.samples.SupportTest.addDocument":296,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":377,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":253,"org.easymock.tests.GenericTest.testPackageScope":126,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":392,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":419,"org.easymock.tests2.NameTest.nameForMock":325,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":140,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":439,"org.easymock.tests2.UsageStrictMockTest.differentMethods":17,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":231,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":132,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":211,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":356,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":170,"org.easymock.tests2.MockedExceptionTest.testRealException":188,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":362,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":330,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":15,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":152,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":383,"org.easymock.tests2.NameTest.nameForStrictMock":431,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":240,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":309,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":41,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":246,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":176,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":80,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":271,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":238,"org.easymock.tests2.UsageStrictMockTest.range":16,"org.easymock.tests2.UsageConstraintsTest.lessThan":86,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":235,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":50,"org.easymock.tests2.CaptureTest.testCaptureRightOne":34,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":257,"org.easymock.tests2.UsageConstraintsTest.testOr":68,"org.easymock.tests.UsageRangeTest.combination":167,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":38,"org.easymock.tests.UsageTest.wrongArguments":428,"org.easymock.tests2.MockBuilderTest.testWithConstructor":435,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":254,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":421,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":133,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":141,"org.easymock.tests.UsageVarargTest.varargShortAccepted":408,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":273,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":369,"org.easymock.tests2.UsageConstraintsTest.cmpTo":72,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":327,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":98,"org.easymock.tests2.CaptureTest.testCaptureFromStub":183,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":373,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":239,"org.easymock.tests.UsageTest.unexpectedCallWithArray":427,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":347,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":367,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":142,"org.easymock.tests2.UsageConstraintsTest.constraints":63,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":348,"org.easymock.samples.ExampleTest.addAndChangeDocument":300,"org.easymock.tests.UsageStrictMockTest.testVerify":350,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":346,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":396,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":182,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":112,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":226,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":134,"org.easymock.tests.LimitationsTest.abstractClass":281,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":148,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":113,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":403,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":55}}]

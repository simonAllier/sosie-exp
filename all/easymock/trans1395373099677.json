[{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:163","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1594","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(byte[]))","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"this.org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[1,2,3,4,5],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable","state":"state"}},{"transplant":{"position":"org.easymock.internal.Injector:206","sourceCode":"final java.lang.NoSuchFieldException java.lang.NoSuchFieldException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:45","sourceCode":"java.lang.StringBuffer.append(\"[\")","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:148","sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","type":"CtForEachImpl"},"failures":[6,7,8,9,10,11,12,13,14,15],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:358","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.MocksControl:35","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"failures":[16,17,18],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:681","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:67","sourceCode":"for (int int = 0 ; int < (java.lang.String[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int]);\n    if (java.lang.Class<?> != null) {\n        java.lang.Class<?>[][int] = java.lang.Class<?>;\n    } else {\n        java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n    }\n}","type":"CtForImpl"},"failures":[8,19,20],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"failures":[16,17,18],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.internal.Injector:116","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:66","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)))","type":"CtLocalVariableImpl"},"failures":[7,21,22,9,23,24,25,26,27,28,29],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"f":"field"}},{"transplant":{"position":"org.easymock.EasyMock:556","sourceCode":"final org.easymock.internal.MocksControl org.easymock.internal.MocksControl = org.easymock.internal.LastControl.org.easymock.internal.LastControl.lastControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:180","sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[7,8,9,30,31,32],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:142","failures":[33],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:95","sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.util.Stack<org.easymock.IArgumentMatcher>.pop();\n}","type":"CtForImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[34,35],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:124","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1190","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:94","failures":[36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[6,7,8,9,10,11,12,13,14,15],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[46],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:116","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"candidateMethod"}},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:52","sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion().equals(\"1.3\")","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[56,0],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:60","sourceCode":"return org.easymock.internal.Result.answer()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:59","sourceCode":"try {\n    return org.easymock.internal.Result.answer();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n        throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n    } \n    throw java.lang.Throwable;\n}","type":"CtTryImpl"},"failures":[57,58],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1915","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<T>(org.easymock.Capture<T>))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"captured"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[59,60,61,62,63,64,57,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMockSupport:480","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:88","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[97,98,99,62,100,63,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,96,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,25,174,26,36,175,176,177,178,179,180,181,182,183],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"failures":[184],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1659","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(long[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1862","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Same(T))","type":"CtInvocationImpl"},"failures":[40],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[185,185,186,186,187,117,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,95,156,210,211,38,39,40,41,212,213,214,215,216,48,49,217,55],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":37,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":63,"org.easymock.tests2.UsageTest.argumentsOrdered":152,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":181,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":150,"org.easymock.tests2.StubTest.stubWithReturnValue":95,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":9,"org.easymock.tests2.SerializationTest.testAllMockedMethod":20,"org.easymock.tests.MockClassControlTest.testToString":133,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":204,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":79,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":179,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":67,"org.easymock.tests.UsageExpectAndThrowTest.object":77,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":47,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":11,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":198,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":199,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":43,"org.easymock.tests2.UsageTest.wrongArguments":148,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":189,"org.easymock.tests.UsageStrictMockTest.range":119,"org.easymock.samples.ConstructorCalledMockTest.testTax":185,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":112,"org.easymock.tests2.UsageConstraintsTest.testNull":39,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":78,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":145,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":168,"org.easymock.tests2.CaptureTest.testPrimitive":53,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":191,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":86,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":1,"org.easymock.tests.UsageTest.moreThanOneArgument":101,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":104,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":207,"org.easymock.tests.UsageUnorderedTest.message":132,"org.easymock.tests.UsageVerifyTest.twoReturns":100,"org.easymock.tests.UsageTest.argumentsOrdered":105,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":137,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":193,"org.easymock.tests2.CaptureTest.testCapture_2617107":52,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":165,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":64,"org.easymock.tests2.UsageConstraintsTest.any":45,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":197,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":4,"org.easymock.tests.UsageExpectAndThrowTest.longType":70,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":16,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":157,"org.easymock.tests2.SerializationTest.testClass":8,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":180,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":182,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":184,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":44,"org.easymock.tests2.CaptureTest.testAnd":50,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":22,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":160,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":177,"org.easymock.tests2.NameTest.nameForMocksControl":164,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":206,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":71,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":169,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":82,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":31,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":65,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":108,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":26,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":42,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":107,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":27,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":80,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":75,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":151,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":49,"org.easymock.tests.UsageThrowableTest.throwError":88,"org.easymock.tests.UsageStrictMockTest.differentMethods":120,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":111,"org.easymock.tests2.MockBuilderTest.testCreateMockString":172,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":209,"org.easymock.tests.UsageExpectAndThrowTest.floatType":69,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":175,"org.easymock.tests.UsageVerifyTest.twoThrows":62,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":122,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":28,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":194,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":68,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":138,"org.easymock.tests2.UsageTest.niceToStrict":149,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":29,"org.easymock.tests2.UsageConstraintsTest.testNotNull":48,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":94,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":200,"org.easymock.tests2.MockBuilderTest.testCreateMock":170,"org.easymock.tests.UsageVarargTest.differentLength":97,"org.easymock.tests2.CallbackTest.callback":146,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":76,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":142,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":210,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":61,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":126,"org.easymock.tests.UsageCallCountTest.tooFewCalls":128,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":213,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":57,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":17,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":0,"org.easymock.tests.UsageThrowableTest.throwCheckedException":91,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":84,"org.easymock.tests2.CaptureTest.testCaptureAll":51,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":174,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":25,"org.easymock.tests.MockNameTest.defaultName":98,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":183,"org.easymock.tests2.UsageConstraintsTest.testMatches":214,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":208,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":192,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":32,"org.easymock.tests2.NameTest.nameForNiceMock":163,"org.easymock.tests.UsageVarargTest.allKinds":56,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":99,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":13,"org.easymock.tests2.DelegateToTest.testStubDelegate":35,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":93,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":155,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":117,"org.easymock.tests2.UsageConstraintsTest.greaterThan":215,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":15,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":178,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":121,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":113,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":6,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":186,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":216,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":123,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":211,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":96,"org.easymock.tests2.SerializationTest.test":19,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":10,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":18,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":5,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":89,"org.easymock.tests2.UsageConstraintsTest.testSame":40,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":34,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":141,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":154,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":125,"org.easymock.tests2.UsageTest.moreThanOneArgument":147,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":171,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":201,"org.easymock.tests.GenericTest.testBridgedEquals":33,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":130,"org.easymock.tests2.NameTest.nameForMock":161,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":85,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":187,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":83,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":24,"org.easymock.tests2.UsageStrictMockTest.differentMethods":159,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":205,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":3,"org.easymock.tests.UsageCallCountTest.tooManyCalls":131,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":81,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":127,"org.easymock.tests2.MockedExceptionTest.testRealException":58,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":114,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":203,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":30,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":72,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":156,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":92,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":190,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":173,"org.easymock.tests2.UsageConstraintsTest.testContains":212,"org.easymock.tests2.NameTest.nameForStrictMock":162,"org.easymock.tests2.UsageConstraintsTest.testFind":38,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":66,"org.easymock.tests.MockTypeTest.fromEasyMockClass":110,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":115,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":46,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":166,"org.easymock.tests2.UsageStrictMockTest.range":158,"org.easymock.tests2.UsageConstraintsTest.lessThan":217,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":144,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":12,"org.easymock.tests.UsageTest.exactCallCountByLastCall":106,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":188,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":202,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":14,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":140,"org.easymock.tests2.CaptureTest.testCaptureRightOne":54,"org.easymock.tests2.UsageConstraintsTest.testOr":41,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":7,"org.easymock.tests.UsageRangeTest.combination":139,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":176,"org.easymock.tests.UsageTest.wrongArguments":103,"org.easymock.tests2.MockBuilderTest.testWithConstructor":21,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":60,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":129,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":87,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":59,"org.easymock.tests2.CaptureTest.testCaptureFromStub":55,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":167,"org.easymock.tests.UsageTest.unexpectedCallWithArray":102,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":136,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":74,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":90,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":116,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":23,"org.easymock.tests2.UsageConstraintsTest.constraints":36,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":118,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":135,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":73,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":2,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":134,"org.easymock.tests2.UsageTest.resumeIfFailure":153,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":195,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":109,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":196,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":124,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":143}}]

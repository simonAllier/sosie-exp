[{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:52","sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion().equals(\"1.3\")","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:145","sourceCode":"return java.lang.reflect.Method != null ? org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isResolvedTypeMatch(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>) : false","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"method","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[1,2,3,4,5,6],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.Captures:53","failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:83","sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[38,39,40],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[41,42,43,44,45,46,47],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"failures":[48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,4,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,25,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,28,30,31,32,33,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,37,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,8,9,10,11,12,13,14,15,16,17,18,20,21],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:57","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[49,50,53,54,301,117,118,119,4,160,162,163,191,192,198,199,276,277,278,279,287,289,290],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:205","sourceCode":"java.lang.reflect.Constructor<?>.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:207","sourceCode":"T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cstr":"cstr"}},{"position":"org.easymock.EasyMock:907","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:190","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtInvocationImpl"},"failures":[100,158,162,163,193,33,254,264,268,269,272,285,289,290],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:180","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[22,32],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:126","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","type":"CtInvocationImpl"},"failures":[302,303,304,305,306,48,49,1,50,51,52,53,54,55,7,7,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,91,92,307,93,94,95,96,97,98,99,100,102,103,104,105,106,308,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,309,310,311,312,313,148,149,314,315,316,317,150,318,151,319,320,321,322,158,159,4,160,161,162,163,164,166,167,171,172,173,174,175,176,25,177,178,179,180,181,182,183,184,323,324,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,26,28,30,325,31,32,326,33,35,202,203,204,205,206,207,208,209,36,210,327,211,212,213,214,215,216,217,218,219,220,221,222,223,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,328,329,330,331,332,333,246,334,247,248,249,250,251,252,253,254,255,256,257,258,259,37,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:47","sourceCode":"java.lang.StringBuffer.append(\"and(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[335,336,337],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[338,339],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:133","sourceCode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[340],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:39","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ExpectedInvocation:85","failures":[50,53,54,95,100,109,112,115,118,140,141,143,144,145,146,147,158,4,160,162,163,192,193,194,198,199,33,214,215,216,217,218,220,221,222,223,225,227,228,229,230,231,232,233,234,235,236,238,240,241,244,254,264,265,266,267,268,269,271,272,273,274,285,287,289,290,293,8,9,10,11,12,13,14,15,17,18,19,20,21],"status":-1,"binaryOperator":"((this.org.easymock.internal.Invocation.getMock().equals(org.easymock.internal.Invocation.getMock())) && (this.org.easymock.internal.Invocation.getMethod().equals(org.easymock.internal.Invocation.getMethod()))) && org.easymock.internal.ExpectedInvocation.(matches(org.easymock.internal.Invocation.getArguments()))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[38,39,40],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:120","sourceCode":"java.lang.StringBuilder.append(\"\\n  Unexpected method call \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:57","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[49,50,53,54,301,117,118,119,4,160,162,163,191,192,198,199,276,277,278,279,287,289,290],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"failures":[341],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:133","sourceCode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:135","sourceCode":"java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cl":"cl","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[48,52,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,106,110,115,118,140,142,143,144,145,146,147,150,189,196,293],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Equals:53","failures":[53,198,342],"status":-1,"binaryOperator":"(java.lang.Object == null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[41,42,43,44,45,46,47],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[343,37,260,261],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:43","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"failures":[336,344,345],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:49","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[228],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[41,42,43,44,45,46,47],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.RecordState:136","failures":[302,303,304,305,306,95,112,113,116,160,166,167,171,172,173,174,175,323,323,324,324,214,215,218,219,220,221,227,229,230,232,233,239,240,241,287,19],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:108","sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","type":"CtThrowImpl"},"failures":[346],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[343,37,260,261],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:251","sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:136","failures":[302,303,304,305,306,95,112,113,116,160,166,167,171,172,173,174,175,323,323,324,324,214,215,218,219,220,221,227,229,230,232,233,239,240,241,287,19],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"failures":[347],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"failures":[348],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":217,"org.easymock.tests2.UsageTest.argumentsOrdered":199,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":48,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":273,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":317,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":194,"org.easymock.tests2.StubTest.stubWithReturnValue":293,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":41,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":238,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":129,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":177,"org.easymock.tests2.SerializationTest.testAllMockedMethod":261,"org.easymock.tests2.DelegateToTest.testReturnException":256,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":315,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":155,"org.easymock.tests.MockingTest.testPartialClassMocking":97,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":6,"org.easymock.samples.SupportTest.voteForRemovals":188,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":0,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":68,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":343,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":340,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":281,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":56,"org.easymock.tests.UsageExpectAndThrowTest.object":66,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":301,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":235,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":203,"org.easymock.tests2.DelegateToTest.testWrongClass":258,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":42,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":166,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":167,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":223,"org.easymock.tests2.UsageTest.wrongArguments":192,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":112,"org.easymock.samples.ConstructorCalledMockTest.testTax":323,"org.easymock.tests.UsageStrictMockTest.range":162,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":321,"org.easymock.samples.ExampleTest.answerVsDelegate":179,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":270,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":294,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":23,"org.easymock.tests2.UsageConstraintsTest.testNull":219,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":207,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":67,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":272,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":31,"org.easymock.tests2.CaptureTest.testPrimitive":11,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":116,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":75,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":53,"org.easymock.tests.UsageTest.moreThanOneArgument":49,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":320,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":206,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":304,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":2,"org.easymock.tests2.CaptureTest.testCaptureNone":16,"org.easymock.tests.UsageUnorderedTest.message":111,"org.easymock.tests.UsageVerifyTest.twoReturns":119,"org.easymock.tests.UsageVarargTest.varargByteAccepted":84,"org.easymock.tests2.ThreadingTest.testThreadSafe":249,"org.easymock.tests.UsageTest.argumentsOrdered":54,"org.easymock.tests.UsageVarargTest.varargIntAccepted":78,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":92,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":185,"org.easymock.tests2.CaptureTest.testCapture_2617107":10,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":171,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":26,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":46,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":115,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":325,"org.easymock.tests2.UsageConstraintsTest.any":225,"org.easymock.tests2.StubTest.stub":292,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":175,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":316,"org.easymock.tests.UsageExpectAndThrowTest.longType":59,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":337,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":288,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":255,"org.easymock.tests2.SerializationTest.testClass":37,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":284,"org.easymock.tests.LimitationsTest.mockNativeMethod":151,"org.easymock.tests2.AnswerTest.answer":242,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":24,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":139,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":224,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":156,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":331,"org.easymock.tests2.CaptureTest.testAnd":8,"org.easymock.tests2.UsageTest.strictResetToDefault":190,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":327,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":291,"org.easymock.tests2.NameTest.nameForMocksControl":279,"org.easymock.tests2.MockedExceptionTest.testMockedException":333,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":303,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":267,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":102,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":52,"org.easymock.tests2.DelegateToTest.testDelegate":259,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":60,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":99,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":204,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":32,"org.easymock.tests.MockingTest.testNicePartialClassMocking":98,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":71,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":209,"org.easymock.tests2.CaptureTest.testCaptureLast":15,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":150,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":300,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":222,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":313,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":236,"org.easymock.tests2.CaptureTest.testCapture1_2446744":12,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":120,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":69,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":329,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":64,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":198,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":240,"org.easymock.tests.UsageThrowableTest.throwError":140,"org.easymock.tests.UsageStrictMockTest.differentMethods":163,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":251,"org.easymock.tests2.MockBuilderTest.testCreateMockString":35,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":306,"org.easymock.tests.UsageExpectAndThrowTest.floatType":58,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":231,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":243,"org.easymock.tests.UsageVerifyTest.twoThrows":118,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":282,"org.easymock.samples.PartialClassMockTest.testGetArea":25,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":172,"org.easymock.samples.ExampleTest.voteAgainstRemoval":181,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":168,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":212,"org.easymock.tests2.UsageTest.niceToStrict":193,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":57,"org.easymock.tests2.UsageConstraintsTest.testNotNull":239,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":332,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":147,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":38,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":30,"org.easymock.tests2.MockBuilderTest.testCreateMock":326,"org.easymock.tests2.UsageTest.defaultResetToNice":197,"org.easymock.samples.ExampleTest.voteAgainstRemovals":178,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":135,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":154,"org.easymock.tests.UsageVarargTest.differentLength":81,"org.easymock.tests2.CallbackTest.callback":254,"org.easymock.tests2.UsageConstraintsTest.equals":342,"org.easymock.tests.UsageTest.openCallCountByLastCall":51,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":65,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":5,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":268,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":214,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":88,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":319,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":114,"org.easymock.tests.UsageCallCountTest.tooFewCalls":90,"org.easymock.tests.UsageOverloadedMethodTest.overloading":109,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":229,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":106,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":297,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":108,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":131,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":228,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":17,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":322,"org.easymock.tests.UsageThrowableTest.throwCheckedException":144,"org.easymock.tests2.EasyMockSupportClassTest.testAll":280,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":149,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":345,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":73,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":3,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":330,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":311,"org.easymock.tests2.CaptureTest.testCaptureAll":9,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":299,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":96,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":296,"org.easymock.tests2.UsageConstraintsTest.testMatches":230,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":298,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":245,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":305,"org.easymock.samples.ExampleTest.voteForRemovals":183,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":45,"org.easymock.tests2.NameTest.nameForNiceMock":278,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":253,"org.easymock.tests.UsageVarargTest.allKinds":86,"org.easymock.tests2.DependencyTest.testInterfaceMocking":202,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":117,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":44,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":312,"org.easymock.samples.BasicClassMockTest.testPrintContent":186,"org.easymock.samples.ExampleTest.addDocument":182,"org.easymock.tests2.DelegateToTest.testStubDelegate":257,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":146,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":285,"org.easymock.tests2.AnswerTest.stubAnswer":244,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":318,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":160,"org.easymock.tests2.UsageConstraintsTest.greaterThan":232,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":347,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":101,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":213,"org.easymock.tests.UsageVarargTest.varargLongAccepted":83,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":164,"org.easymock.samples.ExampleTest.voteForRemoval":180,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":250,"org.easymock.tests.UsageExpectAndReturnTest.floatType":122,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":138,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":262,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":36,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":324,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":233,"org.easymock.tests.UsageThrowableTest.noUpperLimit":141,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":215,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":87,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":189,"org.easymock.tests2.SerializationTest.test":260,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":13,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":338,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":265,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":142,"org.easymock.tests2.UsageConstraintsTest.testSame":220,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":121,"org.easymock.samples.SupportTest.addDocument":187,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":314,"org.easymock.tests2.CaptureTest.testCaptureFirst":21,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":266,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":201,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":308,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":127,"org.easymock.tests.GenericTest.testPackageScope":148,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":252,"org.easymock.tests2.CaptureTest.testCapture2_2446744":20,"org.easymock.tests2.UsageTest.moreThanOneArgument":191,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":33,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":157,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":85,"org.easymock.tests2.NameTest.nameForMock":276,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":93,"org.easymock.tests.UsageExpectAndReturnTest.longType":123,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":309,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":263,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":74,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":34,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":132,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":237,"org.easymock.tests2.UsageStrictMockTest.differentMethods":290,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":72,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":302,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":124,"org.easymock.tests.UsageCallCountTest.tooManyCalls":94,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":335,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":70,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":103,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":89,"org.easymock.tests2.MockedExceptionTest.testRealException":334,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":128,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":287,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":61,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":113,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":145,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":295,"org.easymock.tests2.NameTest.nameForStrictMock":277,"org.easymock.tests2.UsageConstraintsTest.testContains":227,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":27,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":246,"org.easymock.tests2.UsageConstraintsTest.testFind":218,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":110,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":247,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":40,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":208,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":248,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":158,"org.easymock.tests.UsageExpectAndReturnTest.object":130,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":234,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":210,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":28,"org.easymock.tests2.UsageStrictMockTest.range":289,"org.easymock.tests2.UsageConstraintsTest.lessThan":241,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":346,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":271,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":80,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":43,"org.easymock.tests.UsageTest.exactCallCountByLastCall":55,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":95,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":348,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":264,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":153,"org.easymock.tests2.CaptureTest.testCaptureRightOne":18,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":169,"org.easymock.tests2.UsageConstraintsTest.testOr":221,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":47,"org.easymock.tests.UsageRangeTest.combination":100,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":205,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":76,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":136,"org.easymock.tests.UsageTest.wrongArguments":50,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":105,"org.easymock.tests2.EasyMockSupportTest.testVerify":275,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":125,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":133,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":152,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":336,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":170,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":339,"org.easymock.tests.UsageVarargTest.varargShortAccepted":82,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":104,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":328,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":307,"org.easymock.tests2.UsageConstraintsTest.cmpTo":226,"org.easymock.tests.UsageVarargTest.varargCharAccepted":79,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":286,"org.easymock.tests2.UsageTest.openCallCountByLastCall":195,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":196,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":274,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":39,"org.easymock.tests2.CaptureTest.testCaptureFromStub":19,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":29,"org.easymock.tests.UsageTest.unexpectedCallWithArray":1,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":63,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":4,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":143,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":91,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":134,"org.easymock.tests2.UsageConstraintsTest.constraints":216,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":211,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":161,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":62,"org.easymock.samples.ExampleTest.addAndChangeDocument":184,"org.easymock.tests.CapturesMatcherTest.test":7,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":137,"org.easymock.tests.UsageStrictMockTest.testVerify":165,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":176,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":344,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":283,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":159,"org.easymock.tests2.CompareToTest.testGreateThan":341,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":310,"org.easymock.tests2.UsageTest.resumeIfFailure":200,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":14,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":173,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":22,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":126,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":107,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":174,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":269,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":77}}]

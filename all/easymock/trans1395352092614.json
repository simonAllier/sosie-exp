[{"transplant":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:336","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:153","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[5],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.ConstructorArgs:54","failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,0,38,39,40,41,1,42,3,4],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1291","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:140","sourceCode":"java.io.DataOutputStream.writeUTF(java.lang.Class<?>.getName())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[37,43,44,45],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[46,47,9,12,22,28,48,49,50,51,52,53,54,55,56,57,0,58,59,39,60,61,62,40,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"returnedType","type":"returnedType"}},{"position":"org.easymock.internal.matchers.Find:41","failures":[118],"status":-1,"binaryOperator":"(\"find(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\")))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2170","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[119],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"value":"key","this":"this","key":"key"}},{"transplant":{"position":"org.easymock.internal.matchers.Null:39","sourceCode":"java.lang.StringBuffer.append(\"isNull()\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[120,121,122],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[34,37],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs","constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:373","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[123,124],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:75","sourceCode":"return \"expected: \" + org.easymock.internal.Range.(toString())","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:86","sourceCode":"return org.easymock.internal.Results.getMainInterval().expectedCount()","type":"CtReturnImpl"},"failures":[125,126,127,48,128,49,50,129,130,131,132,133,52,56,134,135,136,137,138,139,140,141,142,70,72,143,144,145,146,147,148,74,149,75,76,150,151,152,153,81,154,155,156,157,158,159,160,161,162,163,164,165,166],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:364","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[167,168],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:152","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","type":"CtThrowImpl"},"failures":[169],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[170,171],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:133","sourceCode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:225","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[33,172,38,173,174,175,169,176,177,178],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"returnedType":"parameterType"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:305","sourceCode":"return ((org.easymock.internal.Result) != null) || org.easymock.internal.RecordState.(lastMethodIsVoidMethod())","type":"CtReturnImpl"},"failures":[179,180,125,181,182,183,184,185,186,187,188,189,190,191,192,193,194,126,195,196,197,198,199,200,201,202,203,204,46,47,9,12,22,28,205,206,207,208,127,209,48,128,49,50,129,210,211,212,213,214,130,215,216,217,131,132,218,219,133,220,221,222,223,224,225,51,226,52,53,54,55,56,134,227,135,136,137,138,228,229,5,139,140,230,141,231,57,232,233,37,43,44,0,234,235,170,236,237,238,239,240,241,242,171,243,244,142,245,58,59,39,60,61,62,40,246,247,63,64,65,66,67,68,69,70,71,72,143,144,145,146,73,248,249,250,251,252,253,254,255,256,257,258,147,259,148,74,149,75,76,150,260,151,152,153,77,78,79,80,261,262,263,264,81,82,83,84,154,155,156,265,266,157,158,159,160,161,162,267,268,163,164,269,270,271,272,273,165,274,275,276,277,278,89,90,91,92,93,166,94,95,96,97,98,99,279,280,100,101,281,102,103,104,282,105,106,107,108,109,110,111,283,168,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,112,316,113,114,317,115,318,319,116,320,321,322,117],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:251","sourceCode":"net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:269","sourceCode":"net.sf.cglib.proxy.Enhancer.setSuperclass(java.lang.Class<?>)","type":"CtInvocationImpl"},"failures":[323,324,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,325,326,213,327,52,328,329,53,330,54,55,34,331,56,332,37,44,0,38,58,59,39,60,62,40,63,64,66,67,68,333,69,334,335,336,70,71,72,337,338,339,340,341,342,343,344,345,346,347,348,73,349,258,350,351,352,77,78,79,353,354,355,356,357,358,359,360,361,362,363,313,314,364,365,320,321,3,3,4,4,117],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mockClass":"toMock","this":"enhancer"}},{"transplant":{"position":"org.easymock.internal.UnorderedBehavior:44","sourceCode":"final org.easymock.internal.Results org.easymock.internal.Results = new org.easymock.internal.Results()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:51","sourceCode":"public static class MockMethodInterceptor implements java.io.Serializable , net.sf.cglib.proxy.MethodInterceptor {\n    private static final long serialVersionUID = -9054190871232972342L;\n\n    private final java.lang.reflect.InvocationHandler handler;\n\n    private transient java.util.Set<java.lang.reflect.Method> mockedMethods;\n\n    public MockMethodInterceptor(final java.lang.reflect.InvocationHandler handler) {\n        this.java.lang.reflect.InvocationHandler = java.lang.reflect.InvocationHandler;\n    }\n\n    public java.lang.Object intercept(final java.lang.Object obj, java.lang.reflect.Method method, final java.lang.Object[] args, final net.sf.cglib.proxy.MethodProxy proxy) throws java.lang.Throwable {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers())) {\n            return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n        } \n        if ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) {\n            if (org.easymock.internal.ClassProxyFactory.org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable())) {\n                return java.lang.Object;\n            } \n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n        } \n        if (((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))) {\n            return net.sf.cglib.proxy.MethodProxy.invokeSuper(java.lang.Object, java.lang.Object[]);\n        } \n        return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n    }\n\n    public void setMockedMethods(final java.lang.reflect.Method... mockedMethods) {\n        this.java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Arrays.java.util.Arrays.asList(java.lang.reflect.Method[]));\n    }\n\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    private void readObject(final java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        java.io.ObjectInputStream.defaultReadObject();\n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = ((java.util.Set<org.easymock.internal.MethodSerializationWrapper>)(java.io.ObjectInputStream.readObject()));\n        if (java.util.Set<org.easymock.internal.MethodSerializationWrapper> == null) {\n            return ;\n        } \n        java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Set<org.easymock.internal.MethodSerializationWrapper>.size());\n        for (final org.easymock.internal.MethodSerializationWrapper org.easymock.internal.MethodSerializationWrapper : java.util.Set<org.easymock.internal.MethodSerializationWrapper>) {\n            try {\n                java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n            } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n                throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n            }\n        }\n    }\n\n    private void writeObject(final java.io.ObjectOutputStream stream) throws java.io.IOException {\n        java.io.ObjectOutputStream.defaultWriteObject();\n        if ((java.util.Set<java.lang.reflect.Method>) == null) {\n            java.io.ObjectOutputStream.writeObject(null);\n            return ;\n        } \n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = new java.util.HashSet<org.easymock.internal.MethodSerializationWrapper>(java.util.Set<java.lang.reflect.Method>.size());\n        for (final java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method>) {\n            java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method));\n        }\n        java.io.ObjectOutputStream.writeObject(java.util.Set<org.easymock.internal.MethodSerializationWrapper>);\n    }\n}","type":"CtClassImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[225,366],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:232","sourceCode":"org.easymock.internal.IMocksControlState.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[126,138,67],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1815","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EndsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[180],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.Capture:134","sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","type":"CtIfImpl"},"failures":[367,368],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:81","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":181,"org.easymock.tests2.UsageTest.argumentsOrdered":140,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":154,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":220,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":138,"org.easymock.tests2.StubTest.stubWithReturnValue":211,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":33,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":322,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":201,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":101,"org.easymock.tests2.SerializationTest.testAllMockedMethod":44,"org.easymock.tests2.DelegateToTest.testReturnException":231,"org.easymock.tests.MockingTest.testPartialClassMocking":77,"org.easymock.samples.SupportTest.voteForRemovals":116,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":363,"org.easymock.tests.MockClassControlTest.testToString":341,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":338,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":297,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":16,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":45,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":285,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":12,"org.easymock.tests.UsageExpectAndThrowTest.object":295,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":198,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":47,"org.easymock.tests2.DelegateToTest.testWrongClass":232,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":173,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":110,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":111,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":187,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":80,"org.easymock.tests2.UsageTest.wrongArguments":136,"org.easymock.tests.UsageStrictMockTest.range":75,"org.easymock.samples.ConstructorCalledMockTest.testTax":3,"org.easymock.samples.ExampleTest.answerVsDelegate":316,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":218,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":355,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":58,"org.easymock.tests2.UsageConstraintsTest.testNull":183,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":296,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":66,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":346,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":54,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":133,"org.easymock.tests2.CaptureTest.testPrimitive":236,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":264,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":304,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":6,"org.easymock.tests.UsageTest.moreThanOneArgument":155,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":157,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":65,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":87,"org.easymock.tests2.CaptureTest.testCaptureNone":241,"org.easymock.tests.UsageUnorderedTest.message":166,"org.easymock.tests.UsageVerifyTest.twoReturns":153,"org.easymock.tests.UsageVarargTest.varargByteAccepted":276,"org.easymock.tests2.ThreadingTest.testThreadSafe":223,"org.easymock.tests.UsageTest.argumentsOrdered":158,"org.easymock.tests.UsageVarargTest.varargIntAccepted":271,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":23,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":268,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":320,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":89,"org.easymock.tests2.CaptureTest.testCapture_2617107":170,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":327,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":177,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":263,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":330,"org.easymock.tests2.UsageConstraintsTest.any":189,"org.easymock.tests2.StubTest.stub":210,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":123,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":93,"org.easymock.tests.UsageExpectAndThrowTest.longType":288,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":360,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":121,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":128,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":212,"org.easymock.tests2.SerializationTest.testClass":37,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":245,"org.easymock.tests.LimitationsTest.mockNativeMethod":73,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":364,"org.easymock.tests2.AnswerTest.answer":205,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":109,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":188,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":124,"org.easymock.tests2.CaptureTest.testAnd":234,"org.easymock.tests2.UsageTest.strictResetToDefault":227,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":336,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":32,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":129,"org.easymock.tests2.NameTest.nameForMocksControl":146,"org.easymock.tests2.MockedExceptionTest.testMockedException":326,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":86,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":217,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":83,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":11,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":266,"org.easymock.tests2.DelegateToTest.testDelegate":233,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":289,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":79,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":63,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":55,"org.easymock.tests.MockingTest.testNicePartialClassMocking":78,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":300,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":68,"org.easymock.tests.LimitationsTest.mockFinalMethod":349,"org.easymock.tests2.CaptureTest.testCaptureLast":240,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":257,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":40,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":186,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":199,"org.easymock.tests.MockingTest.testTwoMocks":352,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":283,"org.easymock.tests2.CaptureTest.testCapture1_2446744":237,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":41,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":94,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":298,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":293,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":139,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":203,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":119,"org.easymock.tests.UsageThrowableTest.throwError":305,"org.easymock.tests.UsageStrictMockTest.differentMethods":76,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":358,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":225,"org.easymock.tests2.MockBuilderTest.testCreateMockString":332,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":339,"org.easymock.tests.UsageExpectAndThrowTest.floatType":287,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":13,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":126,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":8,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":206,"org.easymock.tests.UsageVerifyTest.twoThrows":152,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":1,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":22,"org.easymock.samples.PartialClassMockTest.testGetArea":117,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":90,"org.easymock.samples.ExampleTest.voteAgainstRemoval":114,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":71,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":17,"org.easymock.tests2.UsageTest.niceToStrict":137,"org.easymock.tests.LimitationsTest.privateConstructor":348,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":42,"org.easymock.tests2.UsageConstraintsTest.testNotNull":202,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":325,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":312,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":2,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":53,"org.easymock.tests2.MockBuilderTest.testCreateMock":331,"org.easymock.tests2.UsageTest.defaultResetToNice":5,"org.easymock.samples.ExampleTest.voteAgainstRemovals":112,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":25,"org.easymock.tests.UsageVarargTest.differentLength":165,"org.easymock.tests2.CallbackTest.callback":142,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":334,"org.easymock.tests.UsageTest.openCallCountByLastCall":265,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":294,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":131,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":179,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":160,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":262,"org.easymock.tests.UsageCallCountTest.tooFewCalls":162,"org.easymock.tests.UsageOverloadedMethodTest.overloading":251,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":21,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":27,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":255,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":193,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":250,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":60,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":102,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":192,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":242,"org.easymock.tests.UsageThrowableTest.throwCheckedException":309,"org.easymock.tests.MockClassControlTest.testEquals":345,"org.easymock.tests2.EasyMockSupportClassTest.testAll":9,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":314,"org.easymock.tests.MockingTest.testStrictClassMocking":350,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":302,"org.easymock.tests2.CaptureTest.testCaptureAll":235,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":249,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":62,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":39,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":366,"org.easymock.tests2.UsageConstraintsTest.testMatches":194,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":61,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":208,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":88,"org.easymock.samples.ExampleTest.voteForRemovals":115,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":176,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":226,"org.easymock.tests2.NameTest.nameForNiceMock":145,"org.easymock.tests.UsageVarargTest.allKinds":278,"org.easymock.tests2.DependencyTest.testInterfaceMocking":46,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":151,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":175,"org.easymock.samples.BasicClassMockTest.testPrintContent":321,"org.easymock.samples.ExampleTest.addDocument":317,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":24,"org.easymock.tests2.DelegateToTest.testStubDelegate":57,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":29,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":311,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":127,"org.easymock.tests2.AnswerTest.stubAnswer":207,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":74,"org.easymock.tests2.UsageConstraintsTest.greaterThan":195,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":178,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":10,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":82,"org.easymock.tests.UsageVarargTest.varargLongAccepted":275,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":72,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":150,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":362,"org.easymock.samples.ExampleTest.voteForRemoval":113,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":337,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":224,"org.easymock.tests.UsageExpectAndReturnTest.floatType":96,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":108,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":333,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":0,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":4,"org.easymock.tests.UsageThrowableTest.noUpperLimit":306,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":196,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":258,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":134,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":180,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":323,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":238,"org.easymock.tests2.SerializationTest.test":43,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":34,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":357,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":215,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":307,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":95,"org.easymock.tests2.UsageConstraintsTest.testSame":184,"org.easymock.samples.SupportTest.addDocument":319,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":7,"org.easymock.tests2.CaptureTest.testCaptureFirst":244,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":216,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":141,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":280,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":14,"org.easymock.tests.GenericTest.testPackageScope":313,"org.easymock.tests2.CaptureTest.testCapture2_2446744":243,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":51,"org.easymock.tests2.UsageTest.moreThanOneArgument":135,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":56,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":277,"org.easymock.tests.GenericTest.testBridgedEquals":365,"org.easymock.tests2.NameTest.nameForMock":143,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":163,"org.easymock.tests.UsageExpectAndReturnTest.longType":97,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":214,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":303,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":103,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":200,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":301,"org.easymock.tests2.UsageStrictMockTest.differentMethods":50,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":36,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":85,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":335,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":98,"org.easymock.tests.UsageCallCountTest.tooManyCalls":164,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":299,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":122,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":84,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":161,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":26,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":100,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":172,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":290,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":48,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":310,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":261,"org.easymock.tests.MockingTest.testNiceClassMocking":353,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":59,"org.easymock.tests.MockingTest.testClassMocking":351,"org.easymock.tests2.NameTest.nameForStrictMock":144,"org.easymock.tests2.UsageConstraintsTest.testContains":191,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":213,"org.easymock.tests2.UsageConstraintsTest.testFind":182,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":252,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":329,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":246,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":67,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":247,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":147,"org.easymock.tests.UsageExpectAndReturnTest.object":281,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":324,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":359,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":197,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":69,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":52,"org.easymock.tests2.UsageStrictMockTest.range":49,"org.easymock.tests2.UsageConstraintsTest.lessThan":204,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":219,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":273,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":174,"org.easymock.tests.UsageTest.exactCallCountByLastCall":159,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":248,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":130,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":169,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":18,"org.easymock.tests2.CaptureTest.testCaptureRightOne":171,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":168,"org.easymock.tests2.ConstraintsToStringTest.findToString":118,"org.easymock.tests2.UsageConstraintsTest.testOr":185,"org.easymock.tests.UsageRangeTest.combination":81,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":38,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":269,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":64,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":106,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":254,"org.easymock.tests.UsageTest.wrongArguments":156,"org.easymock.tests2.MockBuilderTest.testWithConstructor":31,"org.easymock.tests.MockClassControlTest.testHashCode":344,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":15,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":340,"org.easymock.tests2.EasyMockSupportTest.testVerify":222,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":99,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":104,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":167,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":19,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":120,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":284,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":361,"org.easymock.tests.UsageVarargTest.varargShortAccepted":274,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":253,"org.easymock.tests2.UsageConstraintsTest.cmpTo":190,"org.easymock.tests.UsageVarargTest.varargCharAccepted":272,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":209,"org.easymock.tests2.UsageTest.openCallCountByLastCall":228,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":229,"org.easymock.tests.DefaultClassInstantiatorTest.object":356,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":221,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":328,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":292,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":20,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":308,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":148,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":267,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":35,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":282,"org.easymock.tests2.CaptureTest.testCapture":367,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":343,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":70,"org.easymock.tests2.UsageConstraintsTest.constraints":125,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":149,"org.easymock.samples.ExampleTest.addAndChangeDocument":318,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":291,"org.easymock.tests.CapturesMatcherTest.test":368,"org.easymock.tests.UsageStrictMockTest.testVerify":260,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":107,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":315,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":342,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":259,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":28,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":239,"org.easymock.tests2.UsageTest.resumeIfFailure":230,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":91,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":354,"org.easymock.tests.LimitationsTest.abstractClass":347,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":279,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":256,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":92,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":270,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":132}}]

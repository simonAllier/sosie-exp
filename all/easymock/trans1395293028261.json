[{"transplant":{"position":"org.easymock.internal.MocksControl:88","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:93","sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[0,1,2],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1235","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.matchers.CompareTo:42","failures":[3],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.EasyMock:1000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:58","sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:59","sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"injection":"injection","obj":"obj","targetField":"targetField"}},{"position":"org.easymock.internal.MockBuilder:172","failures":[4],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:58","sourceCode":"java.lang.String[][int] = java.lang.Class<?>[][int].getName()","type":"CtAssignmentImpl"},"failures":[5,6,7,8],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,33,34,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:89","sourceCode":"return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object)","type":"CtReturnImpl"},"failures":[53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,22,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,37,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,4,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:128","sourceCode":"java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader()","type":"CtAssignmentImpl"},"failures":[143,144],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[145,146,147,148],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[149,43,150],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[5,6,7,8],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:68","sourceCode":"return \"at least \" + (int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:70","sourceCode":"return ((\"between \" + (int)) + \" and \") + (int)","type":"CtReturnImpl"},"failures":[70,71,111,112],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"failures":[151],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:123","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:52","sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion().equals(\"1.3\")","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:82","failures":[152,153,154,155,156,157,158,159,160,161,35,162],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:231","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[163,100,125,129,164],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1507","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"failures":[165,166],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.MocksControl:149","sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:193","sourceCode":"throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:136","failures":[9,10,11,12,13,14,15,16,22,24,25,26,27,28,29,30,31,33,33,34,34,35,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:67","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"))","type":"CtThrowImpl"},"failures":[143],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:46","failures":[68,167,145,92,147,148],"status":-1,"binaryOperator":"int < (java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:223","failures":[164],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:251","sourceCode":"java.lang.Class<?> java.lang.Class<?> = this.org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:212","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"lastInvocation":"lastInvocation"}},{"position":"org.easymock.internal.MockBuilder:223","failures":[164],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","failures":[68,167,145,92,147,148],"status":-1,"binaryOperator":"int < (java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1204","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[168],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:196","sourceCode":"java.lang.reflect.Method.setAccessible(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.Invocation:122","sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[121],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"otherArgument":"actual","myArgument":"actual"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:44","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[56,57,64,65,66,22,70,71,77,86,87,88,91,93,94,95,37,111,112,169,170,171,172,148,173,174,135,136,139,140],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[175],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"failures":[176,177],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[33,34,178,179,180,181],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[153,161],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":149,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":107,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":132,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":106,"org.easymock.tests.MockNameTest.defaultName":78,"org.easymock.tests2.UsageConstraintsTest.testMatches":46,"org.easymock.tests2.UsageTest.argumentsOrdered":140,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":90,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":123,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":30,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":23,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":138,"org.easymock.tests2.StubTest.stubWithReturnValue":36,"org.easymock.tests2.NameTest.nameForNiceMock":103,"org.easymock.tests2.SerializationTest.testAllMockedMethod":8,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":64,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":148,"org.easymock.tests.MockClassControlTest.testToString":74,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":100,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":21,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":109,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":5,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":164,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":22,"org.easymock.tests2.UsageConstraintsTest.greaterThan":47,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":99,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":72,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":24,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":25,"org.easymock.tests2.UsageTest.wrongArguments":136,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":14,"org.easymock.samples.ConstructorCalledMockTest.testTax":33,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":62,"org.easymock.tests.UsageStrictMockTest.range":70,"org.easymock.tests2.ConstraintsToStringTest.orToString":169,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":34,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":48,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":61,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":87,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":134,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":39,"org.easymock.tests2.UsageConstraintsTest.testNull":41,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":156,"org.easymock.tests2.SerializationTest.test":7,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":119,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":4,"org.easymock.tests2.CaptureTest.testPrimitive":154,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":177,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":16,"org.easymock.tests.UsageTest.moreThanOneArgument":91,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":94,"org.easymock.tests2.UsageConstraintsTest.testSame":42,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":167,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":29,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":175,"org.easymock.tests2.CaptureTest.testCaptureFirst":162,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":151,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":115,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":142,"org.easymock.tests.UsageUnorderedTest.message":77,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":89,"org.easymock.tests2.UsageTest.moreThanOneArgument":135,"org.easymock.tests.UsageVerifyTest.twoReturns":66,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":129,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":18,"org.easymock.tests.UsageTest.argumentsOrdered":95,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":54,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":173,"org.easymock.tests2.CaptureTest.testCapture_2617107":153,"org.easymock.tests2.NameTest.nameForMock":101,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":9,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":84,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":174,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":124,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":165,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":32,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":181,"org.easymock.tests2.UsageStrictMockTest.differentMethods":112,"org.easymock.tests2.StubTest.stub":166,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":27,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":13,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":176,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":171,"org.easymock.tests.UsageCallCountTest.tooManyCalls":85,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":110,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":122,"org.easymock.tests2.SerializationTest.testClass":6,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":131,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":150,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":81,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":63,"org.easymock.tests2.CaptureTest.testAnd":152,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":20,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":113,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":98,"org.easymock.tests2.NameTest.nameForMocksControl":104,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":37,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":15,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":105,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":28,"org.easymock.tests2.NameTest.nameForStrictMock":102,"org.easymock.tests2.UsageConstraintsTest.testContains":44,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":127,"org.easymock.tests2.UsageConstraintsTest.testFind":40,"org.easymock.tests2.CompareToTest.testNotComparable":3,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":2,"org.easymock.tests.MockTypeTest.fromEasyMockClass":59,"org.easymock.tests2.CaptureTest.testCaptureLast":158,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":67,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":57,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":168,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":108,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":49,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":125,"org.easymock.tests2.UsageStrictMockTest.range":111,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":56,"org.easymock.tests2.UsageConstraintsTest.lessThan":52,"org.easymock.tests2.CaptureTest.testCapture1_2446744":155,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":118,"org.easymock.tests.UsageTest.exactCallCountByLastCall":96,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":139,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":26,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":19,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":51,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":114,"org.easymock.tests2.CaptureTest.testCaptureRightOne":161,"org.easymock.tests.UsageStrictMockTest.differentMethods":71,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":143,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":60,"org.easymock.tests2.UsageConstraintsTest.testOr":43,"org.easymock.tests.UsageRangeTest.combination":73,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":97,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":144,"org.easymock.tests.UsageTest.wrongArguments":93,"org.easymock.tests2.ConstraintsToStringTest.andToString":172,"org.easymock.tests2.MockBuilderTest.testWithConstructor":179,"org.easymock.tests2.MockBuilderTest.testCreateMockString":130,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":31,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":121,"org.easymock.tests.UsageVerifyTest.twoThrows":65,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":86,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":83,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":10,"org.easymock.tests2.UsageTest.niceToStrict":137,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":55,"org.easymock.tests2.UsageConstraintsTest.testNotNull":50,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":1,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":0,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":17,"org.easymock.tests2.CaptureTest.testCaptureFromStub":35,"org.easymock.tests2.MockBuilderTest.testCreateMock":128,"org.easymock.tests.UsageVarargTest.differentLength":79,"org.easymock.tests2.CallbackTest.callback":133,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":126,"org.easymock.tests.UsageTest.unexpectedCallWithArray":92,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":53,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":178,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":146,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":147,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":116,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":68,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":38,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":80,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":180,"org.easymock.tests.UsageCallCountTest.tooFewCalls":82,"org.easymock.tests2.CaptureTest.testCapture":160,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":163,"org.easymock.tests2.UsageConstraintsTest.constraints":120,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":69,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":76,"org.easymock.tests2.ConstraintsToStringTest.notToString":170,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":45,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":159,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":75,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":157,"org.easymock.tests2.UsageTest.resumeIfFailure":141,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":11,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":58,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":145,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":12,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":88,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":117}}]

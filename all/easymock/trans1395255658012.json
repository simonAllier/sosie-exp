[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:351","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:252","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"toStringMethod","equalsMethod":"toStringMethod"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1190","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[0,1],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:161","failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:71","sourceCode":"java.util.List<java.lang.reflect.Field>.add(java.lang.reflect.Field)","type":"CtInvocationImpl"},"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ErrorMessage:50","failures":[34,35,36,37,38,39,40],"status":-1,"binaryOperator":"int == 1","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:198","failures":[2,3,5,6,7,41,10,11,12,15],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"failures":[42],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1433","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[43,44,45,46,47,48,49,50,51,52,53,54],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[55,55,56,56,57,58,59,2,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,15,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"finalizeMethod","equalsMethod":"finalizeMethod"}},{"position":"org.easymock.internal.RecordState:262","failures":[102,103,75,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,39,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151],"status":-1,"binaryOperator":"java.lang.Throwable == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:191","sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[152],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:54","sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.And:48","sourceCode":"for (final java.util.Iterator<org.easymock.IArgumentMatcher> java.util.Iterator<org.easymock.IArgumentMatcher> = java.util.List<org.easymock.IArgumentMatcher>.iterator() ; java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext() ; ) {\n    java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer);\n    if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n        java.lang.StringBuffer.append(\", \");\n    } \n}","type":"CtForImpl"},"failures":[153],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:90","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[22,30,154],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"failures":[155],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[14],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:40","sourceCode":"return java.lang.Object.equals(java.lang.Object)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:55","sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","type":"CtReturnImpl"},"failures":[156],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"actual","actual":"actual"}},{"position":"org.easymock.internal.RecordState:274","failures":[157,158,159,160,161,162,163,164,165],"status":-1,"binaryOperator":"org.easymock.IAnswer<?> == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:67","failures":[166],"status":-1,"binaryOperator":"(\"Failed to read \" + java.lang.String)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:126","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:109","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:357","sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"position":"org.easymock.internal.LastControl:92","failures":[167,168,169,0,170,171,43,44,52],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"failures":[172,173,174,175],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"position":"org.easymock.internal.ClassProxyFactory:168","failures":[58,59,176,60,177,178,179,180,181,182,183,184,64,65,66,67,68,70,185,71,74,186,187,103,75,188,189,85,86,89,190,92,191,192,193,194,195,196,197,198,199,200,201,202,203,93,94,204,205,206,96,207,208,209,97,210,101],"status":-1,"binaryOperator":"java.lang.reflect.Method[] != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:96","sourceCode":"return java.lang.Class<?>.getConstructors()[0]","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:89","sourceCode":"try {\n    return java.lang.Class<?>.getConstructor(new java.lang.Class[0]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    if ((java.lang.Class<?>.getConstructors().int) == 0) {\n        throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n    } \n    return java.lang.Class<?>.getConstructors()[0];\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"clazz"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[156,211,212,213,214],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[211,212,215,216,213,217],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:109","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[3,5,6,7,8,9,11],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:32","sourceCode":"new java.util.ArrayList<java.lang.reflect.Field>(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:852","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Integer>(int))","type":"CtInvocationImpl"},"failures":[218,167,219,220],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1482","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(byte))","type":"CtInvocationImpl"},"failures":[168,0,171],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[197,198,199,200,202,203],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1928","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[2,3,5,6,7,41,10,11,12,15],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMockSupport:480","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:61","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(org.easymock.internal.matchers.Equals.getExpected(), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[211,215],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:747","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Not:40","sourceCode":"java.lang.StringBuffer.append(\"not(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[34,36,38,39,40],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1988","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[211,212,215,216,213,217],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1432","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":168,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":148,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":30,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":118,"org.easymock.tests2.StubTest.stubWithReturnValue":105,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":11,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":220,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":17,"org.easymock.tests2.SerializationTest.testAllMockedMethod":85,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":116,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":14,"org.easymock.tests.MockingTest.testPartialClassMocking":98,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":212,"org.easymock.tests.MockClassControlTest.testToString":191,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":134,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":187,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":61,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":122,"org.easymock.tests.UsageExpectAndThrowTest.object":132,"org.easymock.tests2.DelegateToTest.testWrongClass":221,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":5,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":1,"org.easymock.samples.ConstructorCalledMockTest.testTax":55,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":25,"org.easymock.tests.UsageStrictMockTest.range":38,"org.easymock.samples.ExampleTest.answerVsDelegate":157,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":86,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":66,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":133,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":196,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":80,"org.easymock.tests2.CaptureTest.testPrimitive":45,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":141,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":176,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":216,"org.easymock.tests.UsageUnorderedTest.message":37,"org.easymock.tests.UsageVerifyTest.twoReturns":40,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":182,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":58,"org.easymock.tests2.CaptureTest.testCapture_2617107":44,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":76,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":9,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":145,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":79,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":143,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":117,"org.easymock.tests.UsageExpectAndThrowTest.longType":125,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":201,"org.easymock.tests2.SerializationTest.testClass":15,"org.easymock.tests.LimitationsTest.mockNativeMethod":96,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":95,"org.easymock.tests2.AnswerTest.answer":161,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":170,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":20,"org.easymock.tests2.CaptureTest.testAnd":43,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":71,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":21,"org.easymock.tests2.MockedExceptionTest.testMockedException":103,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":177,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":149,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":100,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":126,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":64,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":81,"org.easymock.tests.MockingTest.testNicePartialClassMocking":99,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":137,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":68,"org.easymock.tests.LimitationsTest.mockFinalMethod":207,"org.easymock.tests2.CaptureTest.testCaptureLast":49,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":18,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":4,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":119,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":91,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":0,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":173,"org.easymock.tests.MockingTest.testTwoMocks":97,"org.easymock.tests2.CaptureTest.testCapture1_2446744":46,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":135,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":130,"org.easymock.tests.UsageThrowableTest.throwError":108,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":23,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":28,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":154,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":199,"org.easymock.tests2.ConstraintsToStringTest.andToString":153,"org.easymock.tests2.MockBuilderTest.testCreateMockString":84,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":33,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":190,"org.easymock.tests.UsageExpectAndThrowTest.floatType":124,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":178,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":156,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":162,"org.easymock.tests.UsageVerifyTest.twoThrows":39,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":62,"org.easymock.samples.PartialClassMockTest.testGetArea":57,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":42,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":73,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":123,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":180,"org.easymock.tests.LimitationsTest.privateConstructor":206,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":102,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":114,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":78,"org.easymock.tests2.MockBuilderTest.testCreateMock":82,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":19,"org.easymock.tests2.CallbackTest.callback":160,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":214,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":24,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":211,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":131,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":218,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":151,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":144,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":184,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":121,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":172,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":89,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":50,"org.easymock.tests.UsageThrowableTest.throwCheckedException":111,"org.easymock.tests.MockClassControlTest.testEquals":195,"org.easymock.tests2.EasyMockSupportClassTest.testAll":60,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":94,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":213,"org.easymock.tests.MockingTest.testStrictClassMocking":208,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":139,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":90,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":147,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":88,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":22,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":164,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":8,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":7,"org.easymock.samples.BasicClassMockTest.testPrintContent":59,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":183,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":113,"org.easymock.tests2.AnswerTest.stubAnswer":163,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":31,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":120,"org.easymock.tests2.UsageConstraintsTest.greaterThan":219,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":10,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":74,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":203,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":186,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":152,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":69,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":2,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":56,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":101,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":106,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":188,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":47,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":12,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":198,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":109,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":115,"org.easymock.tests2.CaptureTest.testCaptureFirst":54,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":179,"org.easymock.tests.GenericTest.testPackageScope":93,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":155,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":83,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":32,"org.easymock.tests.GenericTest.testBridgedEquals":204,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":140,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":138,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":142,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":185,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":136,"org.easymock.tests2.MockedExceptionTest.testRealException":104,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":13,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":127,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":112,"org.easymock.tests.MockingTest.testNiceClassMocking":210,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":87,"org.easymock.tests.MockingTest.testClassMocking":209,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":75,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":146,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":158,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":67,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":159,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":189,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":200,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":35,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":171,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":70,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":77,"org.easymock.tests2.UsageStrictMockTest.range":34,"org.easymock.tests2.UsageConstraintsTest.lessThan":174,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":6,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":29,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":41,"org.easymock.tests2.CaptureTest.testCaptureRightOne":52,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":166,"org.easymock.tests2.UsageConstraintsTest.testOr":169,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":3,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":65,"org.easymock.tests.MockClassControlTest.testHashCode":194,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":27,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":92,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":202,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":150,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":165,"org.easymock.tests2.CompareToTest.testLessThan":175,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":107,"org.easymock.tests.DefaultClassInstantiatorTest.object":197,"org.easymock.tests2.CaptureTest.testCaptureFromStub":53,"org.easymock.tests.UsageTest.unexpectedCallWithArray":217,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":181,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":215,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":110,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":26,"org.easymock.tests2.CaptureTest.testCapture":51,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":193,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":72,"org.easymock.tests2.UsageConstraintsTest.constraints":167,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":128,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":16,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":192,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":63,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":48,"org.easymock.tests.LimitationsTest.abstractClass":205,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":36}}]

[{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"failures":[0,1,2,3],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:46","sourceCode":"final java.lang.ClassNotFoundException java.lang.ClassNotFoundException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:60","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Short.java.lang.Class<java.lang.Short>, java.lang.Short.java.lang.Short)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:79","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"bridgeMethod","bridgeMethod":"bridgeMethod"}},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockStatement:43","sourceCode":"org.junit.runners.model.Statement.evaluate()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.Capture:82","failures":[4,5,6,7,8,9,10,11,12,13,14,15],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:140","sourceCode":"java.lang.StringBuilder.append(\":\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[16,17,18,19,20],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:43","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"equals\", new java.lang.Class[]{ java.lang.Object.java.lang.Object })","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:242","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[21],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,44,45,46,47,48,49,50,51,52,53,54,55,0,56,57,58,59,1,60,61,62,63,64,65,66,67,68,69,70,2,4,71,5,6,7,8,9,10,72,11,13,73,15,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,17,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,18,19,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:37","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:92","sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2123","sourceCode":"final org.easymock.internal.Invocation org.easymock.internal.Invocation = org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.EndsWith:40","sourceCode":"java.lang.StringBuffer.append(((\"endsWith(\\\"\" + (java.lang.String)) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[270],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[23,145,147,271,148,272,267],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","value":"answer"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:785","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Short>(short))","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"cls":"type","type":"type"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[273,76,77,274],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[64],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:318","sourceCode":"return true","type":"CtReturnImpl"},"failures":[256,259],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"failures":[275],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.Capture:120","sourceCode":"java.util.List<T>.add(T)","type":"CtInvocationImpl"},"failures":[4,5,6,7,8,9,10,11,12,13],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:39","sourceCode":"return int == 0","type":"CtReturnImpl"},"failures":[276],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:85","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:25","sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtNewClassImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:156","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:157","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[277,278,125,279,151,280,281,282,283,182,284,285,230],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"verified":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.Results:39","sourceCode":"if (!(org.easymock.internal.Range.hasFixedCount())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:370","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[123,150,184,185,186,286],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"lastRange":"org.easymock.internal.MocksControl.ZERO_OR_MORE"}},{"transplant":{"position":"org.easymock.internal.MocksControl:311","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:94","sourceCode":"java.util.List<org.easymock.IArgumentMatcher>.addAll(java.util.Stack<org.easymock.IArgumentMatcher>.subList(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int), java.util.Stack<org.easymock.IArgumentMatcher>.size()))","type":"CtInvocationImpl"},"failures":[49,50,52,53,54,287,64,69,70,4,5,13],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:119","sourceCode":"if (java.lang.String == null) {\n    return ((java.lang.String)(java.util.Properties.remove(java.lang.String)));\n} ","type":"CtIfImpl"},"failures":[288,84,289,290,291,85,86,87,292,293,88,294,295,296,107,297,298,108,299,109,110,300,301,111,302,277,278,125,127,128,129,130,132,133,134,136,303,304,305,137,306,307,138,308,309,310,311,312,313,314,315,316,139,317,318,319,320,321,140,322,323],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:133","sourceCode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[324,324,325,325,30,34,35,78,79,81,82,83,326,84,291,85,86,87,88,296,327,107,297,108,299,109,110,301,111,328,302,125,127,128,129,130,132,133,134,136,137,138,139,140,329,330,331,152,153,332,333,189,190,191,334,335,195,336,227],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[149,337],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","answer":"answer"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:63","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>, java.lang.Long.java.lang.Long)","type":"CtInvocationImpl"},"failures":[338,165,171,178,179,226],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[49,50,51,52,53,54,55,0,287,56,64,65,69,70,4,71,5,6,13,14],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"failures":[38,39,67,69],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:79","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","type":"CtForEachImpl"},"failures":[339,152,153,332,340],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:194","sourceCode":"return false","type":"CtReturnImpl"},"failures":[294,341,342,343,344,345,346],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:32","sourceCode":"new java.util.ArrayList<java.lang.reflect.Field>(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:127","sourceCode":"java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":50,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":203,"org.easymock.tests2.UsageTest.argumentsOrdered":122,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":104,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":283,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":117,"org.easymock.tests2.StubTest.stubWithReturnValue":151,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":341,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":68,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":31,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":171,"org.easymock.tests2.SerializationTest.testAllMockedMethod":136,"org.easymock.tests2.DelegateToTest.testReturnException":145,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":281,"org.easymock.tests.MockingTest.testPartialClassMocking":189,"org.easymock.samples.SupportTest.voteForRemovals":33,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":339,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":293,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":247,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":311,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":235,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":138,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":273,"org.easymock.tests.UsageExpectAndThrowTest.object":245,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":65,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":37,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":342,"org.easymock.tests2.DelegateToTest.testWrongClass":147,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":233,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":234,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":0,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":228,"org.easymock.tests2.UsageTest.wrongArguments":115,"org.easymock.samples.ConstructorCalledMockTest.testTax":324,"org.easymock.tests.UsageStrictMockTest.range":17,"org.easymock.samples.ExampleTest.answerVsDelegate":23,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":101,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":335,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":127,"org.easymock.tests2.UsageConstraintsTest.testNull":52,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":246,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":81,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":103,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":109,"org.easymock.tests2.CaptureTest.testPrimitive":6,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":232,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":303,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":254,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":208,"org.easymock.tests.UsageTest.moreThanOneArgument":204,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":80,"org.easymock.tests2.CaptureTest.testCaptureNone":72,"org.easymock.tests.UsageUnorderedTest.message":255,"org.easymock.tests2.ConstraintsToStringTest.endsWithToString":270,"org.easymock.tests.UsageVerifyTest.twoReturns":19,"org.easymock.tests.UsageVarargTest.varargByteAccepted":219,"org.easymock.tests2.ThreadingTest.testThreadSafe":89,"org.easymock.tests.UsageTest.argumentsOrdered":209,"org.easymock.tests.UsageVarargTest.varargIntAccepted":213,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":317,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":200,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":34,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":222,"org.easymock.tests2.CaptureTest.testCapture_2617107":5,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":346,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":296,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":231,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":299,"org.easymock.tests2.UsageConstraintsTest.any":56,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":272,"org.easymock.tests2.StubTest.stub":150,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":226,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":282,"org.easymock.tests.UsageExpectAndThrowTest.longType":238,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":43,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":126,"org.easymock.tests2.SerializationTest.testClass":134,"org.easymock.tests.LimitationsTest.mockNativeMethod":195,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":46,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":332,"org.easymock.tests2.AnswerTest.answer":74,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":181,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":287,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":286,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":331,"org.easymock.tests2.CaptureTest.testAnd":4,"org.easymock.tests2.UsageTest.strictResetToDefault":113,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":291,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":45,"org.easymock.tests2.NameTest.nameForMocksControl":144,"org.easymock.tests2.MockedExceptionTest.testMockedException":278,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":338,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":307,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":98,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":185,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":207,"org.easymock.tests2.DelegateToTest.testDelegate":148,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":239,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":191,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":78,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":110,"org.easymock.tests.MockingTest.testNicePartialClassMocking":190,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":250,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":83,"org.easymock.tests2.CompareToTest.testCompareEqual":276,"org.easymock.tests2.CaptureTest.testCaptureLast":10,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":182,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":55,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":133,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":66,"org.easymock.tests.MockingTest.testTwoMocks":333,"org.easymock.tests2.CaptureTest.testCapture1_2446744":7,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":288,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":162,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":248,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":243,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":121,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":70,"org.easymock.tests.UsageThrowableTest.throwError":256,"org.easymock.tests.UsageStrictMockTest.differentMethods":159,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":91,"org.easymock.tests2.MockBuilderTest.testCreateMockString":302,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":308,"org.easymock.tests.UsageExpectAndThrowTest.floatType":237,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":61,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":305,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":75,"org.easymock.tests.UsageVerifyTest.twoThrows":18,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":323,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":139,"org.easymock.samples.PartialClassMockTest.testGetArea":30,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":21,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":223,"org.easymock.samples.ExampleTest.voteAgainstRemoval":25,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":275,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":312,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":236,"org.easymock.tests2.UsageTest.niceToStrict":116,"org.easymock.tests2.ThreadingTest.testChangeDefault":295,"org.easymock.tests2.UsageConstraintsTest.testNotNull":69,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":277,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":263,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":108,"org.easymock.tests2.MockBuilderTest.testCreateMock":301,"org.easymock.tests2.UsageTest.defaultResetToNice":120,"org.easymock.samples.ExampleTest.voteAgainstRemovals":22,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":177,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":319,"org.easymock.tests.UsageVarargTest.differentLength":216,"org.easymock.tests2.CallbackTest.callback":149,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":289,"org.easymock.tests.UsageTest.openCallCountByLastCall":206,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":244,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":99,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":47,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":196,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":230,"org.easymock.tests.UsageCallCountTest.tooFewCalls":198,"org.easymock.tests.UsageOverloadedMethodTest.overloading":193,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":321,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":316,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":268,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":1,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":192,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":130,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":173,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":59,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":11,"org.easymock.tests.UsageThrowableTest.throwCheckedException":260,"org.easymock.tests2.EasyMockSupportClassTest.testAll":137,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":153,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":252,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":329,"org.easymock.tests2.CaptureTest.testCaptureAll":71,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":285,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":132,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":129,"org.easymock.tests2.UsageConstraintsTest.testMatches":60,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":131,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":77,"org.easymock.tests2.CompareToTest.testGreateOrEqual":3,"org.easymock.samples.ExampleTest.voteForRemovals":27,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":345,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":93,"org.easymock.tests2.NameTest.nameForNiceMock":143,"org.easymock.tests.UsageVarargTest.allKinds":221,"org.easymock.tests2.DependencyTest.testInterfaceMocking":36,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":187,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":344,"org.easymock.samples.BasicClassMockTest.testPrintContent":35,"org.easymock.samples.ExampleTest.addDocument":26,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":318,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":322,"org.easymock.tests2.DelegateToTest.testStubDelegate":146,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":262,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":40,"org.easymock.tests2.AnswerTest.stubAnswer":76,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":284,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":271,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":157,"org.easymock.tests2.UsageConstraintsTest.greaterThan":62,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":306,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":184,"org.easymock.tests.UsageVarargTest.varargLongAccepted":218,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":87,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":160,"org.easymock.samples.ExampleTest.voteForRemoval":24,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":292,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":90,"org.easymock.tests.UsageExpectAndReturnTest.floatType":164,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":180,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":326,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":88,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":325,"org.easymock.tests.UsageThrowableTest.noUpperLimit":257,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":63,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":227,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":48,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":112,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":8,"org.easymock.tests2.SerializationTest.test":135,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":300,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":96,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":258,"org.easymock.tests2.UsageConstraintsTest.testSame":53,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":163,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":304,"org.easymock.samples.SupportTest.addDocument":32,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":280,"org.easymock.tests2.CaptureTest.testCaptureFirst":15,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":274,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":97,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":124,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":169,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":309,"org.easymock.tests.GenericTest.testPackageScope":152,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":92,"org.easymock.tests2.CaptureTest.testCapture2_2446744":73,"org.easymock.tests2.UsageTest.moreThanOneArgument":114,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":111,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":220,"org.easymock.tests.GenericTest.testBridgedEquals":340,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":201,"org.easymock.tests2.NameTest.nameForMock":141,"org.easymock.tests.UsageExpectAndReturnTest.longType":165,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":94,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":328,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":253,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":174,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":67,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":251,"org.easymock.tests2.UsageStrictMockTest.differentMethods":44,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":290,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":166,"org.easymock.tests.UsageCallCountTest.tooManyCalls":202,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":249,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":186,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":320,"org.easymock.tests2.MockedExceptionTest.testRealException":279,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":170,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":337,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":240,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":42,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":261,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":229,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":128,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":327,"org.easymock.tests2.UsageConstraintsTest.testContains":58,"org.easymock.tests2.NameTest.nameForStrictMock":142,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":125,"org.easymock.tests2.UsageConstraintsTest.testFind":51,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":194,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":298,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":38,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":82,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":39,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":154,"org.easymock.tests.UsageExpectAndReturnTest.object":172,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":64,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":84,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":107,"org.easymock.tests2.UsageStrictMockTest.range":16,"org.easymock.tests2.UsageConstraintsTest.lessThan":2,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":102,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":343,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":215,"org.easymock.tests.UsageTest.exactCallCountByLastCall":210,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":188,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":95,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":313,"org.easymock.tests2.CaptureTest.testCaptureRightOne":13,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":264,"org.easymock.tests2.UsageConstraintsTest.testOr":54,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":294,"org.easymock.tests.UsageRangeTest.combination":183,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":211,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":79,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":178,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":267,"org.easymock.tests.UsageTest.wrongArguments":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":310,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":336,"org.easymock.tests2.EasyMockSupportTest.testVerify":106,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":167,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":175,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":314,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":265,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":266,"org.easymock.tests.UsageVarargTest.varargShortAccepted":217,"org.easymock.tests2.UsageConstraintsTest.cmpTo":57,"org.easymock.tests.UsageVarargTest.varargCharAccepted":214,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":41,"org.easymock.tests2.UsageTest.openCallCountByLastCall":118,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":119,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":105,"org.easymock.tests2.CaptureTest.testCaptureFromStub":14,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":297,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":315,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":242,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":259,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":156,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":199,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":176,"org.easymock.tests2.CaptureTest.testCapture":12,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":85,"org.easymock.tests2.UsageConstraintsTest.constraints":49,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":158,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":241,"org.easymock.samples.ExampleTest.addAndChangeDocument":28,"org.easymock.tests.UsageStrictMockTest.testVerify":161,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":179,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":29,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":140,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":155,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":9,"org.easymock.tests2.UsageTest.resumeIfFailure":123,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":330,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":224,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":334,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":168,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":269,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":225,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":212,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":20,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":100}}]

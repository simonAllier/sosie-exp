[{"transplant":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[1],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:229","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:156","sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[2,3],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:233","sourceCode":"if ((org.easymock.internal.ExpectedInvocation) == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)));\n} ","type":"CtIfImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"failMessage","key":"failMessage"}},{"transplant":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"failures":[53],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[54,55,56,57,58,59,60,61],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"failures":[62,63,64],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[65,66,67,68,69,70,54,55,2,3,71,72,73,74,56,57,58,59,60,61],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:72","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator","type":"CtAssignmentImpl"},"failures":[75,76,77],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:101","sourceCode":"return java.util.Properties.getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[78,79,80,81,82],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:174","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[83,84],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[85,86,87],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:139","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[88,89,90],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"data":"data"}},{"position":"org.easymock.internal.LastControl:92","failures":[65,66,70,54,2,71,56,58,60],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"m"}},{"position":"org.easymock.internal.LastControl:92","failures":[65,66,70,54,2,71,56,58,60],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[71],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:41","sourceCode":"new java.util.Properties()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:491","sourceCode":"return new org.easymock.internal.MocksControl(org.easymock.MockType)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:67","sourceCode":"return !(java.util.List<T>.isEmpty())","type":"CtReturnImpl"},"failures":[91,92,93,94,95,96],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:80","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[97,98,99,100,101],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:42","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidSupport:34","sourceCode":"return org.easymock.internal.AndroidSupport.boolean","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:54","sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.NotNull:40","sourceCode":"java.lang.StringBuffer.append(\"notNull()\")","type":"CtInvocationImpl"},"failures":[102],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.EndsWith:36","sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).endsWith(java.lang.String))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"actual":"actual"}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:334","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int))","type":"CtInvocationImpl"},"failures":[16,103,30,31,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,43,121,122,123,124,125,126,57,93,127,96],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"failures":[62,63,64],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:54","sourceCode":"return java.lang.Object[] == null ? this.java.lang.Object[] : java.lang.Object[]","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:94","sourceCode":"return java.lang.Object[]","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.Invocation.NO_ARGS":"initArgs","args":"initArgs"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1568","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(T))","type":"CtInvocationImpl"},"failures":[66,68,54,2,73,56,60],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1777","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[65,66,70,54,2,71,56,58,60],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:104","sourceCode":"throw new java.lang.IllegalStateException(java.lang.String)","type":"CtThrowImpl"},"failures":[2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":66,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":14,"org.easymock.tests2.ConstraintsToStringTest.notNullToString":102,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":103,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":40,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":97,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":63,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":106,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":22,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":104,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":32,"org.easymock.tests2.UsageConstraintsTest.greaterThan":124,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":77,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":53,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":72,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":13,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":117,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":55,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":113,"org.easymock.tests.UsageStrictMockTest.range":33,"org.easymock.tests2.ConstraintsToStringTest.orToString":44,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":27,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":83,"org.easymock.tests2.UsageConstraintsTest.testNull":68,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":91,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":84,"org.easymock.tests2.CaptureTest.testPrimitive":59,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":11,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":90,"org.easymock.tests.UsageTest.moreThanOneArgument":31,"org.easymock.tests2.UsageConstraintsTest.testSame":69,"org.easymock.tests2.CaptureTest.testCaptureNone":127,"org.easymock.tests2.CaptureTest.testCaptureFirst":96,"org.easymock.tests.ClassInstantiatorFactoryTest.getInstantiator_Overriden":75,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":10,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":80,"org.easymock.tests.UsageUnorderedTest.message":30,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":29,"org.easymock.tests.GenericTest.testPackageScope":98,"org.easymock.tests2.UsageTest.moreThanOneArgument":43,"org.easymock.tests.UsageVerifyTest.twoReturns":42,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":21,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":8,"org.easymock.tests2.ThreadingTest.testThreadSafe":116,"org.easymock.tests.GenericTest.testBridgedEquals":101,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":19,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":49,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":0,"org.easymock.tests2.CaptureTest.testCapture_2617107":58,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":111,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":108,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":23,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":64,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":107,"org.easymock.tests2.UsageConstraintsTest.any":3,"org.easymock.tests2.UsageStrictMockTest.differentMethods":52,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":6,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":24,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":88,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":100,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":2,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":20,"org.easymock.tests2.CaptureTest.testAnd":56,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":18,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":38,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":17,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":50,"org.easymock.tests2.DelegateToTest.testDelegate":126,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":1,"org.easymock.tests2.UsageConstraintsTest.testFind":67,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":114,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":119,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":87,"org.easymock.tests2.CaptureTest.testCaptureLast":93,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":120,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":36,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":54,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":71,"org.easymock.tests2.UsageStrictMockTest.range":51,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":35,"org.easymock.tests2.UsageConstraintsTest.lessThan":125,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":109,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":79,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":9,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":74,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":82,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":12,"org.easymock.tests.UsageStrictMockTest.differentMethods":34,"org.easymock.tests2.CaptureTest.testCaptureRightOne":60,"org.easymock.tests2.UsageConstraintsTest.testOr":70,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":112,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":81,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":118,"org.easymock.tests2.ConstraintsToStringTest.andToString":48,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":5,"org.easymock.tests.UsageVerifyTest.twoThrows":41,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":26,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":76,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":15,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":62,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":7,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":25,"org.easymock.tests2.ThreadingTest.testChangeDefault":78,"org.easymock.tests2.UsageConstraintsTest.testNotNull":73,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":86,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":4,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":85,"org.easymock.tests2.CaptureTest.testCaptureFromStub":61,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":16,"org.easymock.tests2.CallbackTest.callback":121,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":39,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":45,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":122,"org.easymock.tests2.CaptureTest.testCapture":95,"org.easymock.tests2.UsageConstraintsTest.constraints":65,"org.easymock.samples.ExampleTest.addAndChangeDocument":115,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":105,"org.easymock.tests2.ConstraintsToStringTest.notToString":46,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":123,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":89,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":94,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":47,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":92,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":110,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":99,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":37,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":28,"org.easymock.tests2.CaptureTest.testCaptureAll":57}}]

[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[0,1,2,3,4,5,6,7,8,9],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"type":"parameterType"}},{"position":"org.easymock.Capture:82","failures":[10,11,12,13,14,15,16,17,18,19,20,21],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:136","failures":[22,22,23,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,20,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:192","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.EasyMockProperties:116","failures":[],"status":0,"binaryOperator":"(\"Invalid key (\" + java.lang.String)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Compare:53","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:49","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[56],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:154","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:126","sourceCode":"java.lang.ClassLoader java.lang.ClassLoader = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:167","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:120","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:907","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"failures":[57,58],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1249","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1332","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:106","sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject);\n    if (org.easymock.TestSubject != null) {\n        org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field);\n        continue;\n    } \n    final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock);\n    if (org.easymock.Mock == null) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.String java.lang.String = org.easymock.Mock.java.lang.String();\n    java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String;\n    final org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType();\n    java.lang.Object java.lang.Object;\n    if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n        java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    } else {\n        java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    }\n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    org.easymock.internal.InjectionPlan.addInjection(new org.easymock.internal.Injection(java.lang.Object , org.easymock.Mock));\n}","type":"CtForEachImpl"},"failures":[59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[22,23,85,86,87,88,89,90,91,92,93,94,59,60,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,24,25,137,138,139,26,27,28,29,140,141,142,143,144,30,56,31,32,145,33,34,146,147,148,149,150,35,36,37,151,152,153,154,155,156,157,158,159,160,10,161,11,12,13,14,15,16,162,17,19,20,163,21,164,165,166,167,168,57,169,170,171,58,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,0,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,61,62,63,64,65,66,67,68,69,70,71,72,246,247,248,249,250,251,9,252,73,74,75,76,77,78,79,80,81,82,83,84,253,254,255,256,257,258,38,259,260,261,262,263,264,265,266,267,268,269,39,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,40,41,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,42,43,366,367,44,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,45,46,47,48,49,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,50,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,51,52,53,54,55,488,489,490,491,492,493,494,495,496],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:199","sourceCode":"java.util.List<java.lang.reflect.Field>.addAll(java.util.Arrays.java.util.Arrays.asList(java.lang.Class<?>.getDeclaredFields()))","type":"CtInvocationImpl"},"failures":[59,60,61,67,73,79],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:61","failures":[134,136,24,25,137,138,26,27,28,29,140,141,142,143,144,30,56,31,32,145,33,34,146,147,148,149,150,35,36,37,10,161,11,12,13,14,15,16,162,17,19,20,163,21,167,199,224,38,39,270,350,40,41,42,43,366,367,44,45,46,47,48,49,468,471,50,481],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:269","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException((\"last method called on mock cannot throw \" + (java.lang.Throwable.getClass().getName()))))","type":"CtThrowImpl"},"failures":[415,416,466,467],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1249","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[137,138,27,29,140,142,146,35,10,11,19],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:324","sourceCode":"return true","type":"CtReturnImpl"},"failures":[401,421,422],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:157","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"position":"org.easymock.EasyMock:840","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:153","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:214","sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:155","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<?>.getDeclaredField(\"serialVersionUID\");\n    final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int);\n    if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n        java.lang.reflect.Field.setAccessible(true);\n        return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n    } \n} catch (final java.lang.NoSuchFieldException java.lang.NoSuchFieldException) {\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\");\n}","type":"CtTryImpl"},"failures":[497],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:281","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[22,22,23,23,85,86,87,88,89,90,91,92,93,94,59,60,95,96,97,98,99,100,101,102,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,24,25,137,138,139,26,27,28,29,140,141,142,143,144,30,56,31,32,145,33,34,146,147,148,149,150,35,36,37,151,152,153,154,155,156,157,158,159,160,10,161,11,12,13,14,15,16,162,17,19,20,163,21,164,165,166,167,168,57,169,170,171,58,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,0,209,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,238,239,240,242,243,244,245,61,62,63,64,65,66,67,68,69,70,71,72,246,247,248,249,250,251,9,252,73,74,75,76,77,78,79,80,81,82,83,84,253,254,255,256,257,258,38,259,260,261,262,263,264,265,266,267,268,269,39,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,40,41,352,353,354,355,356,357,358,359,360,361,362,363,364,365,42,43,366,367,44,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,45,46,47,48,49,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,50,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,51,52,53,54,55,488,489,490,491,492,493,494,495,496],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:44","failures":[22,23,85,86,87,88,89,90,91,92,93,94,59,60,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,24,25,137,138,139,26,27,28,29,140,141,142,143,144,30,56,31,32,145,33,34,146,147,148,149,150,35,36,37,151,152,153,154,155,156,157,158,159,160,10,161,11,12,13,14,15,16,162,17,19,20,163,21,164,165,166,167,168,57,169,170,171,58,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,0,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,61,62,63,64,65,66,67,68,69,70,71,72,246,247,248,249,250,251,9,252,73,74,75,76,77,78,79,80,81,82,83,84,253,254,255,256,257,258,38,259,260,261,262,263,264,265,266,267,268,269,39,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,40,41,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,42,43,366,367,44,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,45,46,47,48,49,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,50,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,51,52,53,54,55,488,489,490,491,492,493,494,495,496],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"failures":[57,58],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:126","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[86,169,171,172,431],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"failures":[57,58],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1915","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<T>(org.easymock.Capture<T>))","type":"CtInvocationImpl"},"failures":[10,11,13,14,15,17,19,20,163],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[99,100,101,498],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[22,22,23,23,93,94,95,99,101,112,115,125,131,200,499,202,203,206,207,208,209,212,213,500,215,216,217,219,220,221,222,224,227,228,229,230,233,234,235,236,239,240,501,251,255,282,283,284,286,324,332,333,334,353,406,411,427],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"result","equalsMethod":"result"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if ((this.org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"failures":[22,23,201,502,214,225],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[22,22,23,23,93,94,95,99,101,112,115,125,131,200,202,203,206,207,208,209,212,213,215,216,217,219,220,221,222,224,227,228,229,230,232,233,234,235,236,239,240,251,255,282,283,284,286,318,323,324,325,326,327,328,332,333,334,353,406,411,427],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"}},{"position":"org.easymock.internal.Range:36","failures":[22,23,85,86,87,88,89,90,91,92,93,94,59,60,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,24,25,137,138,139,26,27,28,29,140,141,142,143,144,30,56,31,32,145,33,34,146,147,148,149,150,35,36,37,151,152,153,154,155,156,157,158,159,160,10,161,11,12,13,14,15,16,162,17,19,20,163,21,164,165,166,167,168,57,169,170,171,58,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,0,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,61,62,63,64,65,66,67,68,69,70,71,72,246,247,248,249,250,251,9,252,73,74,75,76,77,78,79,80,81,82,83,84,253,254,255,256,257,258,38,259,260,261,262,263,264,265,266,267,268,269,39,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,40,41,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,42,43,366,367,44,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,45,46,47,48,49,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,50,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,51,52,53,54,55,488,489,490,491,492,493,494,495,496],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.Null:35","failures":[27],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:88","sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"result","candidateMethods":"candidateMethods"}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[503,504,505,506,370,471],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":138,"org.easymock.tests2.UsageTest.argumentsOrdered":183,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":368,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":196,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":79,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":446,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":178,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":60,"org.easymock.tests2.DelegateToTest.testReturnException":169,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":478,"org.easymock.tests.MockingTest.testPartialClassMocking":283,"org.easymock.tests.MockClassControlTest.testToString":325,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":246,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":337,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":455,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":232,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":119,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":115,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":377,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":245,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":2,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":141,"org.easymock.tests2.UsageTest.wrongArguments":176,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":42,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":72,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":267,"org.easymock.samples.ExampleTest.answerVsDelegate":86,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":411,"org.easymock.tests2.UsageConstraintsTest.testNull":27,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":288,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":219,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":195,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":330,"org.easymock.tests2.CaptureTest.testPrimitive":12,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":44,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":396,"org.easymock.tests.UsageTest.moreThanOneArgument":369,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":218,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":53,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":483,"org.easymock.tests.UsageTest.argumentsOrdered":375,"org.easymock.tests.UsageVarargTest.varargIntAccepted":341,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":451,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":45,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":7,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":200,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":104,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":83,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":207,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":438,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":49,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":66,"org.easymock.tests.ReplayStateInvalidUsageTest.times":362,"org.easymock.tests2.DependencyTest.testClassMocking":242,"org.easymock.tests2.AnswerTest.answer":151,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":142,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":453,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":160,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":408,"org.easymock.tests2.CaptureTest.testAnd":10,"org.easymock.tests2.UsageTest.strictResetToDefault":174,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":204,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":227,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":52,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":190,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":321,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":487,"org.easymock.tests2.DelegateToTest.testDelegate":172,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":392,"org.easymock.tests.LimitationsTest.mockFinalMethod":428,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":481,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":464,"org.easymock.tests2.DependencyTest.testClassMockingSupport":243,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":310,"org.easymock.tests2.CaptureTest.testCapture1_2446744":13,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":223,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":390,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":158,"org.easymock.tests.UsageThrowableTest.throwError":417,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":356,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":410,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":84,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":351,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":133,"org.easymock.samples.PartialClassMockTest.testGetArea":95,"org.easymock.tests.MockingTest.testInterfaceMocking":285,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":357,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":46,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":404,"org.easymock.tests2.UsageTest.niceToStrict":177,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":120,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":318,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":378,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":436,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":206,"org.easymock.tests2.MockBuilderTest.testCreateMock":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":128,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":69,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":503,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":386,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":191,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":407,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":467,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":488,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":265,"org.easymock.tests.UsageOverloadedMethodTest.overloading":398,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":130,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":124,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":432,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":31,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":397,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":301,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":497,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":56,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":17,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":342,"org.easymock.tests2.EasyMockSupportClassTest.testAll":112,"org.easymock.tests.MockClassControlTest.testEquals":329,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":333,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":394,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":462,"org.easymock.tests2.CaptureTest.testCaptureAll":161,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":159,"org.easymock.tests.MockNameTest.defaultName":269,"org.easymock.tests2.UsageConstraintsTest.testMatches":32,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":54,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":354,"org.easymock.samples.ExampleTest.voteForRemovals":90,"org.easymock.tests.UsageVarargTest.allKinds":350,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":400,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":463,"org.easymock.samples.BasicClassMockTest.testPrintContent":94,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":423,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":257,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":482,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":58,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":80,"org.easymock.tests2.UsageConstraintsTest.greaterThan":33,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":8,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":278,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":113,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":320,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":230,"org.easymock.samples.ExampleTest.voteForRemoval":87,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":279,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":165,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":231,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":412,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":105,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":222,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":173,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":353,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":211,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":443,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":188,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":419,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":110,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":477,"org.easymock.tests2.CaptureTest.testCaptureFirst":21,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":57,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":442,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":189,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":185,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":435,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":297,"org.easymock.tests2.UsageTest.moreThanOneArgument":175,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":167,"org.easymock.tests2.CaptureTest.testCapture2_2446744":163,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":454,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":213,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":349,"org.easymock.tests.GenericTest.testBridgedEquals":335,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":495,"org.easymock.tests.UsageExpectAndReturnTest.longType":293,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":460,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":186,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":500,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":395,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":149,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":352,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":393,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":415,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":51,"org.easymock.tests.UsageCallCountTest.tooManyCalls":496,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":490,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":129,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":298,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":71,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":382,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":422,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":234,"org.easymock.tests.MockingTest.testNiceClassMocking":289,"org.easymock.tests.MockingTest.testClassMocking":281,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":499,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":489,"org.easymock.tests2.UsageConstraintsTest.testContains":30,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":255,"org.easymock.tests2.UsageConstraintsTest.testFind":26,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":399,"org.easymock.tests.MockTypeTest.fromEasyMockClass":409,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":469,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":136,"org.easymock.tests.UsageExpectAndReturnTest.object":300,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":224,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":70,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":194,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":3,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":344,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":316,"org.easymock.tests.UsageTest.exactCallCountByLastCall":376,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":39,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":441,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":484,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":336,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":9,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":306,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":339,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":431,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":74,"org.easymock.tests.MockClassControlTest.testHashCode":328,"org.easymock.tests2.EasyMockSupportTest.testVerify":198,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":122,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":485,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":466,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":429,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":157,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":199,"org.easymock.tests.UsageVarargTest.varargCharAccepted":343,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":271,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":258,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":459,"org.easymock.tests2.UsageTest.openCallCountByLastCall":179,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":197,"org.easymock.tests.DefaultClassInstantiatorTest.object":272,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":465,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":314,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":384,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":123,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":420,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":64,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":73,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":228,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":327,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":383,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":307,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":414,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":131,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":326,"org.easymock.tests2.UsageTest.resumeIfFailure":184,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":406,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":103,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":480,"org.easymock.tests2.StubTest.stubWithReturnValue":264,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":0,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":150,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":299,"org.easymock.tests2.SerializationTest.testAllMockedMethod":101,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":452,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":504,"org.easymock.samples.SupportTest.voteForRemovals":97,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":331,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":76,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":389,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":498,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":458,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":152,"org.easymock.tests.UsageExpectAndThrowTest.object":387,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":338,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":147,"org.easymock.tests2.DelegateToTest.testWrongClass":171,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":40,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":41,"org.easymock.tests.UsageStrictMockTest.range":473,"org.easymock.samples.ConstructorCalledMockTest.testTax":22,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":107,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":193,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":233,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":388,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":208,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":109,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":364,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":374,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":266,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":505,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":405,"org.easymock.tests2.CaptureTest.testCaptureNone":162,"org.easymock.tests.UsageUnorderedTest.message":468,"org.easymock.tests.UsageVerifyTest.twoReturns":402,"org.easymock.tests.UsageVarargTest.varargByteAccepted":348,"org.easymock.tests2.ThreadingTest.testThreadSafe":164,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":126,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":493,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":93,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":317,"org.easymock.tests2.CaptureTest.testCapture_2617107":11,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":312,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":456,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":367,"org.easymock.tests2.UsageConstraintsTest.any":143,"org.easymock.tests2.StubTest.stub":263,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":361,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":416,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":479,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":457,"org.easymock.tests.UsageExpectAndThrowTest.longType":380,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":276,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":360,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":259,"org.easymock.tests2.SerializationTest.testClass":99,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":78,"org.easymock.tests.LimitationsTest.mockNativeMethod":427,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":309,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":334,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":63,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":262,"org.easymock.tests2.NameTest.nameForMocksControl":250,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":65,"org.easymock.tests2.MockedExceptionTest.testMockedException":254,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":114,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":373,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":135,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":286,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":381,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":216,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":209,"org.easymock.tests.MockingTest.testNicePartialClassMocking":284,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":221,"org.easymock.tests2.CaptureTest.testCaptureLast":16,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":61,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":311,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":140,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":240,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":148,"org.easymock.tests.MockingTest.testTwoMocks":282,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":241,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":290,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":385,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":182,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":36,"org.easymock.samples.ExampleTest.removeNonExistingDocument":91,"org.easymock.tests.UsageStrictMockTest.differentMethods":474,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":68,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":358,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":75,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":274,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":166,"org.easymock.tests2.MockBuilderTest.testCreateMockString":215,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":323,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":116,"org.easymock.tests.UsageExpectAndThrowTest.floatType":379,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":145,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":111,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":154,"org.easymock.tests.UsageVerifyTest.twoThrows":401,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":252,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":430,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":125,"org.easymock.samples.ExampleTest.voteAgainstRemoval":88,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":447,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":403,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":229,"org.easymock.tests.LimitationsTest.privateConstructor":426,"org.easymock.tests2.UsageConstraintsTest.testNotNull":35,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":424,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":253,"org.easymock.tests2.UsageTest.defaultResetToNice":181,"org.easymock.samples.ExampleTest.voteAgainstRemovals":85,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":448,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":305,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":62,"org.easymock.tests.UsageVarargTest.differentLength":345,"org.easymock.tests2.CallbackTest.callback":98,"org.easymock.tests2.UsageConstraintsTest.equals":139,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":225,"org.easymock.tests.UsageTest.openCallCountByLastCall":372,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":24,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":366,"org.easymock.tests.UsageCallCountTest.tooFewCalls":491,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":236,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":268,"org.easymock.tests.UsageThrowableTest.throwCheckedException":421,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":506,"org.easymock.tests.MockingTest.testStrictClassMocking":280,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":239,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":270,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":67,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":235,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":363,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":238,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":156,"org.easymock.tests.ObjectMethodsTest.testHashCode":315,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":6,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":168,"org.easymock.tests2.NameTest.nameForNiceMock":249,"org.easymock.tests2.DependencyTest.testInterfaceMocking":244,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":4,"org.easymock.samples.ExampleTest.addDocument":89,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":127,"org.easymock.tests2.DelegateToTest.testStubDelegate":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":132,"org.easymock.tests2.AnswerTest.stubAnswer":155,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":50,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":210,"org.easymock.tests.UsageVarargTest.varargLongAccepted":347,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":475,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":445,"org.easymock.tests.UsageExpectAndReturnTest.floatType":292,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":308,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":251,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":23,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":433,"org.easymock.tests.UsageThrowableTest.noUpperLimit":418,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":34,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":82,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":25,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":102,"org.easymock.tests2.SerializationTest.test":100,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":14,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":273,"org.easymock.tests2.UsageConstraintsTest.testSame":28,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":291,"org.easymock.samples.SupportTest.addDocument":96,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":237,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":359,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":117,"org.easymock.tests.GenericTest.testPackageScope":332,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":486,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":440,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":81,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":287,"org.easymock.tests2.NameTest.nameForMock":247,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":302,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":214,"org.easymock.tests2.UsageStrictMockTest.differentMethods":261,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":226,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":294,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":391,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":313,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":322,"org.easymock.tests2.MockedExceptionTest.testRealException":256,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":413,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":450,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":108,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":1,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":449,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":38,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":43,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":365,"org.easymock.tests2.NameTest.nameForStrictMock":248,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":205,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":134,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":220,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":106,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":146,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":275,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":202,"org.easymock.tests2.UsageStrictMockTest.range":260,"org.easymock.tests2.UsageConstraintsTest.lessThan":37,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":77,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":444,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":187,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":5,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":121,"org.easymock.tests2.CaptureTest.testCaptureRightOne":19,"org.easymock.tests2.UsageConstraintsTest.testOr":29,"org.easymock.tests.UsageRangeTest.combination":319,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":217,"org.easymock.tests.UsageTest.wrongArguments":371,"org.easymock.tests2.MockBuilderTest.testWithConstructor":201,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":118,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":324,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":295,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":437,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":303,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":277,"org.easymock.tests.UsageVarargTest.varargShortAccepted":346,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":494,"org.easymock.tests2.UsageConstraintsTest.cmpTo":144,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":153,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":439,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":180,"org.easymock.tests2.CaptureTest.testCaptureFromStub":20,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":355,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":203,"org.easymock.tests.UsageTest.unexpectedCallWithArray":370,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":471,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":492,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":502,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":304,"org.easymock.tests2.CaptureTest.testCapture":18,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":472,"org.easymock.tests2.UsageConstraintsTest.constraints":137,"org.easymock.samples.ExampleTest.addAndChangeDocument":92,"org.easymock.tests.UsageStrictMockTest.testVerify":476,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":59,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":470,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":461,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":15,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":501,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":47,"org.easymock.tests.LimitationsTest.abstractClass":425,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":296,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":434,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":48,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":192,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":340}}]

[{"transplant":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"this.org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","delegateTo":"value"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:182","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1506","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(double))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[176],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:112","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"finalizeMethod","equalsMethod":"finalizeMethod"}},{"position":"org.easymock.EasyMock:1483","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[15,19,177],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[178],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"m"}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:36","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:60","sourceCode":"org.easymock.internal.MocksBehavior.addBehaviorListIfNecessary(org.easymock.internal.ExpectedInvocation)","type":"CtInvocationImpl"},"failures":[0,179,1,2,180,3,181,182,4,183,184,5,185,186,6,7,187,188,189,190,8,191,9,10,192,11,12,13,14,15,16,17,18,19,20,21,177,22,23,24,25,26,27,28,29,30,31,32,33,193,34,35,36,37,38,39,194,40,41,195,196,42,43,44,45,46,47,48,197,49,198,50,51,52,53,54,55,56,57,58,59,65,199,158,164,200],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","genericType":"genericType","type":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:285","sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[179,201,202,203,204,205,206],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:355","sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:267","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[207],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:417","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[207],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[207,208],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"type":"type"}},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[209],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.Invocation:180","sourceCode":"try {\n    java.lang.Object.getClass().getDeclaredMethod(\"toString\", ((java.lang.Class[])(null))).getModifiers();\n    return true;\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    return false;\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    return false;\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:37","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[25],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"o":"actual"}},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[0,179,1,2,180,3,181,210,210,211,211,182,4,183,184,5,185,186,6,7,187,188,189,190,8,191,9,10,192,212,11,12,13,14,15,16,17,18,19,20,21,177,22,23,24,25,26,27,28,29,30,31,32,33,193,34,35,36,37,38,39,194,40,41,195,196,42,43,44,45,213,46,47,48,214,215,197,49,198,50,51,52,53,54,55,56,209,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,216,73,74,75,76,217,218,219,77,78,79,80,81,82,83,220,84,221,85,86,222,223,224,87,88,225,226,227,228,89,90,91,92,93,94,95,96,97,98,229,99,100,101,102,230,231,232,233,234,201,103,202,203,204,235,236,104,105,237,106,238,239,240,241,242,243,244,245,107,246,108,109,247,248,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,249,250,251,252,253,254,130,131,132,133,134,135,255,136,137,199,256,257,176,258,259,143,144,145,146,147,148,149,150,151,260,152,261,262,263,264,265,266,267,268,269,270,153,154,271,155,156,272,273,157,274,275,276,277,278,279,280,281,282,283,284,158,159,160,161,162,285,286,163,164,287,288,165,166,167,200,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,168,310,169,170,171,172,173,174,311,312,313,314,315,316,317,318,319,320,206,321,322,175,323],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[178],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Results:90","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:62","sourceCode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} ","type":"CtIfImpl"},"failures":[228,321],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.Capture:83","sourceCode":"throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())))","type":"CtThrowImpl"},"failures":[324],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:55","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:50","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Long.java.lang.Class<java.lang.Long>, java.lang.Long.java.lang.Long.valueOf(0))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:89","sourceCode":"return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object)","type":"CtReturnImpl"},"failures":[189,8,191,9,10,192,11,325,14,28,51,209,59,326,67,69,71,72,73,74,218,219,327,78,79,328,80,329,81,83,220,84,221,223,224,87,88,89,330,91,92,95,96,230,231,232,233,235,243,245,107,246,108,109,247,130,135,255,136,256,257,260,331,332,333,334,335,336,337,338,261,262,263,339,266,267,340,341,342,153,154,343,271,272,273,157,279,344,309,320,322,175,323],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"failures":[222],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"arg":"mock"}},{"transplant":{"position":"org.easymock.internal.LastControl:39","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:140","sourceCode":"java.lang.StringBuilder.append(\":\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[9,108,255,136,345],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.internal.MocksControl:268","sourceCode":"return this","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:213","sourceCode":"return org.easymock.internal.RecordState.createNumberObject(java.lang.Object, java.lang.Class<?>)","type":"CtReturnImpl"},"failures":[0,1,2,3,210,210,211,211,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,213,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,216,73,74,75,76,219,77,78,79,80,81,82,83,84,85,86,222,87,88,227,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,238,239,240,241,242,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,136,137,143,144,145,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:127","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:194","sourceCode":"return false","type":"CtReturnImpl"},"failures":[346,347,348,349,350,351,352],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:79","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[21,26,37,353],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"failures":[315],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation().addCapture(((org.easymock.internal.matchers.Captures<java.lang.Object>)(this)), java.lang.Object)","type":"CtInvocationImpl"},"failures":[38,39,194,40,41,195,196,42,43,44,45,213,46,47,354],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[60,346,347,355,97,348,349,350,356,357],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[15],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":15,"org.easymock.tests2.UsageTest.argumentsOrdered":224,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":153,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":75,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":330,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":252,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":221,"org.easymock.tests2.StubTest.stubWithReturnValue":104,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":347,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":34,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":119,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":183,"org.easymock.tests2.SerializationTest.testAllMockedMethod":229,"org.easymock.tests2.DelegateToTest.testReturnException":201,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":250,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":176,"org.easymock.tests.MockingTest.testPartialClassMocking":143,"org.easymock.samples.SupportTest.voteForRemovals":5,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":207,"org.easymock.tests.MockClassControlTest.testToString":340,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":134,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":326,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":301,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":289,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":258,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":100,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":214,"org.easymock.tests.UsageExpectAndThrowTest.object":299,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":7,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":32,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":348,"org.easymock.tests2.DelegateToTest.testWrongClass":202,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":166,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":167,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":21,"org.easymock.tests2.UsageTest.wrongArguments":220,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":163,"org.easymock.samples.ConstructorCalledMockTest.testTax":210,"org.easymock.tests.UsageStrictMockTest.range":108,"org.easymock.samples.ExampleTest.answerVsDelegate":179,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":216,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":336,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":90,"org.easymock.tests2.UsageConstraintsTest.testNull":17,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":300,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":53,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":78,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":74,"org.easymock.tests2.CaptureTest.testPrimitive":40,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":165,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":308,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":272,"org.easymock.tests.UsageTest.moreThanOneArgument":154,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":52,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":240,"org.easymock.tests2.CaptureTest.testCaptureNone":43,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":148,"org.easymock.tests.UsageUnorderedTest.message":309,"org.easymock.tests.UsageVerifyTest.twoReturns":136,"org.easymock.tests.UsageVarargTest.varargByteAccepted":282,"org.easymock.tests2.ThreadingTest.testThreadSafe":61,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":311,"org.easymock.tests.UsageTest.argumentsOrdered":273,"org.easymock.tests.UsageVarargTest.varargIntAccepted":276,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":265,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":331,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":185,"org.easymock.tests2.CaptureTest.testCapture_2617107":194,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":158,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":352,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":218,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":288,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":140,"org.easymock.tests2.UsageConstraintsTest.any":22,"org.easymock.tests2.StubTest.stub":236,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":205,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":270,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":162,"org.easymock.tests.UsageExpectAndThrowTest.longType":292,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":251,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":141,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":191,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":89,"org.easymock.tests2.SerializationTest.testClass":97,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":11,"org.easymock.tests.LimitationsTest.mockNativeMethod":152,"org.easymock.tests2.AnswerTest.answer":48,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":106,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":129,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":177,"org.easymock.tests2.CaptureTest.testAnd":38,"org.easymock.tests2.UsageTest.strictResetToDefault":82,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":209,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":192,"org.easymock.tests2.NameTest.nameForMocksControl":233,"org.easymock.tests2.MockedExceptionTest.testMockedException":226,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":239,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":70,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":132,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":156,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":315,"org.easymock.tests2.DelegateToTest.testDelegate":204,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":293,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":145,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":50,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":79,"org.easymock.tests.MockingTest.testNicePartialClassMocking":144,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":304,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":55,"org.easymock.tests2.CaptureTest.testCaptureLast":42,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":253,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":257,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":20,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":96,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":33,"org.easymock.tests.MockingTest.testTwoMocks":259,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":256,"org.easymock.tests2.CaptureTest.testCapture1_2446744":41,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":110,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":302,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":297,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":223,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":36,"org.easymock.tests.UsageThrowableTest.throwError":168,"org.easymock.tests.UsageStrictMockTest.differentMethods":109,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":335,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":63,"org.easymock.tests2.MockBuilderTest.testCreateMockString":329,"org.easymock.tests.UsageExpectAndThrowTest.floatType":291,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":242,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":28,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":197,"org.easymock.tests.UsageVerifyTest.twoThrows":255,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":320,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":101,"org.easymock.samples.PartialClassMockTest.testGetArea":4,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":159,"org.easymock.samples.ExampleTest.voteAgainstRemoval":2,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":139,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":146,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":147,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":58,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":332,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":290,"org.easymock.tests2.UsageTest.niceToStrict":84,"org.easymock.tests2.UsageConstraintsTest.testNotNull":35,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":225,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":174,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":77,"org.easymock.tests2.MockBuilderTest.testCreateMock":328,"org.easymock.tests2.UsageTest.defaultResetToNice":222,"org.easymock.samples.ExampleTest.voteAgainstRemovals":0,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":125,"org.easymock.tests.UsageVarargTest.differentLength":279,"org.easymock.tests2.CallbackTest.callback":235,"org.easymock.tests.UsageTest.openCallCountByLastCall":155,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":298,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":71,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":12,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":318,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":261,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":287,"org.easymock.tests.UsageCallCountTest.tooFewCalls":263,"org.easymock.tests.UsageOverloadedMethodTest.overloading":150,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":321,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":26,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":93,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":121,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":149,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":25,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":44,"org.easymock.tests.UsageThrowableTest.throwCheckedException":171,"org.easymock.tests2.EasyMockSupportClassTest.testAll":99,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":237,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":306,"org.easymock.tests2.CaptureTest.testCaptureAll":39,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":199,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":95,"org.easymock.tests.MockNameTest.defaultName":344,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":325,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":92,"org.easymock.tests2.UsageConstraintsTest.testMatches":27,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":94,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":198,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":241,"org.easymock.tests2.CompareToTest.testGreateOrEqual":353,"org.easymock.samples.ExampleTest.voteForRemovals":3,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":351,"org.easymock.tests2.NameTest.nameForNiceMock":232,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":65,"org.easymock.tests.UsageVarargTest.allKinds":284,"org.easymock.tests2.DependencyTest.testInterfaceMocking":6,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":135,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":350,"org.easymock.samples.BasicClassMockTest.testPrintContent":186,"org.easymock.samples.ExampleTest.addDocument":180,"org.easymock.tests2.DelegateToTest.testStubDelegate":103,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":173,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":189,"org.easymock.tests2.AnswerTest.stubAnswer":49,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":254,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":203,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":107,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":357,"org.easymock.tests2.UsageConstraintsTest.greaterThan":29,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":131,"org.easymock.tests.UsageVarargTest.varargLongAccepted":281,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":59,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":247,"org.easymock.samples.ExampleTest.voteForRemoval":1,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":138,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":62,"org.easymock.tests.UsageExpectAndReturnTest.floatType":112,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":128,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":178,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":337,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":60,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":211,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":322,"org.easymock.tests.UsageThrowableTest.noUpperLimit":310,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":30,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":286,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":81,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":13,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":195,"org.easymock.tests2.SerializationTest.test":98,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":355,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":68,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":169,"org.easymock.tests2.UsageConstraintsTest.testSame":18,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":111,"org.easymock.samples.SupportTest.addDocument":184,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":249,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":234,"org.easymock.tests2.CaptureTest.testCaptureFirst":47,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":69,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":88,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":323,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":117,"org.easymock.tests.GenericTest.testPackageScope":105,"org.easymock.tests2.UsageTest.moreThanOneArgument":83,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":64,"org.easymock.tests2.CaptureTest.testCapture2_2446744":46,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":314,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":80,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":283,"org.easymock.tests.GenericTest.testBridgedEquals":208,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":266,"org.easymock.tests2.NameTest.nameForMock":230,"org.easymock.tests.UsageExpectAndReturnTest.longType":113,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":200,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":66,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":307,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":122,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":285,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":193,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":305,"org.easymock.tests2.UsageStrictMockTest.differentMethods":10,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":269,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":238,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":114,"org.easymock.tests.UsageCallCountTest.tooManyCalls":267,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":303,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":133,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":262,"org.easymock.tests2.MockedExceptionTest.testRealException":228,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":338,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":118,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":294,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":8,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":164,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":172,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":91,"org.easymock.tests2.NameTest.nameForStrictMock":231,"org.easymock.tests2.UsageConstraintsTest.testContains":24,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":227,"org.easymock.tests2.UsageConstraintsTest.testFind":16,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":151,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":187,"org.easymock.tests.MockTypeTest.fromEasyMockClass":334,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":54,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":243,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":188,"org.easymock.tests.UsageExpectAndReturnTest.object":120,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":31,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":56,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":219,"org.easymock.tests2.UsageStrictMockTest.range":9,"org.easymock.tests2.UsageConstraintsTest.lessThan":37,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":73,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":349,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":278,"org.easymock.tests.UsageTest.exactCallCountByLastCall":157,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":137,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":356,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":67,"org.easymock.tests2.CaptureTest.testCaptureRightOne":45,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":312,"org.easymock.tests2.UsageConstraintsTest.testOr":19,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":346,"org.easymock.tests.UsageRangeTest.combination":130,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":274,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":51,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":126,"org.easymock.tests.UsageTest.wrongArguments":271,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":206,"org.easymock.tests2.EasyMockSupportTest.testVerify":217,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":115,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":123,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":313,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":319,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":317,"org.easymock.tests.UsageVarargTest.varargShortAccepted":280,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":339,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":212,"org.easymock.tests2.UsageConstraintsTest.cmpTo":23,"org.easymock.tests.UsageVarargTest.varargCharAccepted":277,"org.easymock.tests2.CaptureTest.testCaptureMultiple":324,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":215,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":190,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":142,"org.easymock.tests2.UsageTest.openCallCountByLastCall":85,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":86,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":76,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":316,"org.easymock.tests2.CaptureTest.testCaptureFromStub":213,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":327,"org.easymock.tests.UsageTest.unexpectedCallWithArray":343,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":260,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":296,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":245,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":170,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":264,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":124,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":342,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":246,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":57,"org.easymock.tests2.UsageConstraintsTest.constraints":14,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":295,"org.easymock.samples.ExampleTest.addAndChangeDocument":181,"org.easymock.tests.CapturesMatcherTest.test":354,"org.easymock.tests.UsageStrictMockTest.testVerify":248,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":127,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":268,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":182,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":341,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":244,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":102,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":196,"org.easymock.tests2.UsageTest.resumeIfFailure":87,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":160,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":333,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":116,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":161,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":175,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":345,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":275,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":72}}]

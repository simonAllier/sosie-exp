[{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:63","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[5],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForImpl"},"failures":[6,7],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"bridgeMethod"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:184","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[8],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1531","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:269","sourceCode":"net.sf.cglib.proxy.Enhancer.setSuperclass(java.lang.Class<?>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:273","sourceCode":"if ((java.lang.Class<?>.getSigners()) != null) {\n    net.sf.cglib.proxy.Enhancer.setNamingPolicy(org.easymock.internal.ClassProxyFactory.net.sf.cglib.core.NamingPolicy);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:160","sourceCode":"throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())))","type":"CtThrowImpl"},"failures":[25,26,27],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:309","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:40","sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[28,29,30,31,32,33],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:162","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[34,35],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:800","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[36],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:205","failures":[0,1,37,2,38,39,40,41,42,43,44,45,46,47,48,49,50,51,8,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,6,68],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[69,70,71],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:157","failures":[72],"status":-1,"binaryOperator":"(java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:25","sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:135","sourceCode":"java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:84","sourceCode":"java.lang.Object[] = new java.lang.Object[0]","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:89","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","type":"CtForImpl"},"failures":[10,73,74,75,18,19,76,32,21,77,23,33,78,79,80],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.UnorderedBehavior:41","sourceCode":"return ","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:207","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"failures":[81,82],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[6,7],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"type":"type"}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:35","sourceCode":"java.lang.StringBuffer.append(\"null\")","type":"CtInvocationImpl"},"failures":[28,29,31,83],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:55","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:385","sourceCode":"java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1519","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[84,85,86],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","shouldBeUsedInOneThread":"value"}},{"transplant":{"position":"org.easymock.internal.MocksControl:136","sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:137","sourceCode":"return org.easymock.internal.IProxyFactory","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cached":"cached"}},{"transplant":{"position":"org.easymock.internal.MocksControl:390","sourceCode":"new org.easymock.internal.Range(0 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:92","sourceCode":"for (final org.easymock.internal.Range org.easymock.internal.Range : java.util.LinkedList<org.easymock.internal.Range>) {\n    int += org.easymock.internal.Range.getMinimum();\n    if ((org.easymock.internal.Range.hasOpenCount()) || (int == (java.lang.Integer.int))) {\n        int = java.lang.Integer.int;\n    } else {\n        int += org.easymock.internal.Range.getMaximum();\n    }\n}","type":"CtForEachImpl"},"failures":[87,88,89,90,91,92,93,94,95,96,37,97,98,99,100,101,102,103,104,105,2,106,107,9,108,10,11,109,40,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,84,135,136,43,44,137,138,139,140,141,142,70,143,144,145,146,147,148,81,149,150,151,152,153,154,155,156,157,158,159,5,160,161,162,163,164,165,166,167,168,169,170,171,85,172,173,174,175,176,36,177,178,179,180,181,182,183,184,185,34,35,49,52,54,56,60,186,187,12,73,82,86,74,75,188,189,190,63,64,65,17,18,19,191,192,193,194,195,196,197,198,199,32,20,200,21,22,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,23,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,24,78,79,80,284],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cls":"returnedType","type":"returnedType"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if (java.lang.Object == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:40","sourceCode":"return java.lang.Object.equals(java.lang.Object)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"expected":"actual","actual":"actual"}},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"failures":[285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[120,121,122,123,318,124,125,126,128,129,319,320,130,321],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[69,70,71],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":5,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":283,"org.easymock.tests2.UsageTest.argumentsOrdered":75,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":152,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":71,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":86,"org.easymock.tests2.StubTest.stubWithReturnValue":156,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":55,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":221,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":36,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":96,"org.easymock.tests2.SerializationTest.testAllMockedMethod":111,"org.easymock.tests2.DelegateToTest.testReturnException":142,"org.easymock.tests.MockingTest.testPartialClassMocking":275,"org.easymock.samples.SupportTest.voteForRemovals":88,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":29,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":6,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":245,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":45,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":233,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":63,"org.easymock.tests.UsageExpectAndThrowTest.object":243,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":13,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":105,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":175,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":306,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":296,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":273,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":274,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":165,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":255,"org.easymock.tests2.UsageTest.wrongArguments":73,"org.easymock.tests.UsageStrictMockTest.range":21,"org.easymock.samples.ConstructorCalledMockTest.testTax":0,"org.easymock.samples.ExampleTest.answerVsDelegate":90,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":67,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":113,"org.easymock.tests2.UsageConstraintsTest.testNull":161,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":244,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":134,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":54,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":151,"org.easymock.tests2.CaptureTest.testPrimitive":123,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":259,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":316,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":252,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":79,"org.easymock.tests.UsageTest.moreThanOneArgument":24,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":133,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":30,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":288,"org.easymock.tests2.CaptureTest.testCaptureNone":127,"org.easymock.tests.UsageUnorderedTest.message":23,"org.easymock.tests.UsageVerifyTest.twoReturns":19,"org.easymock.tests.UsageVarargTest.varargByteAccepted":270,"org.easymock.tests2.ThreadingTest.testThreadSafe":100,"org.easymock.tests.UsageTest.argumentsOrdered":80,"org.easymock.tests.UsageVarargTest.varargIntAccepted":264,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":207,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":97,"org.easymock.tests2.CaptureTest.testCapture_2617107":122,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":191,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":47,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":258,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":26,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":53,"org.easymock.tests2.UsageConstraintsTest.any":166,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":313,"org.easymock.tests2.StubTest.stub":155,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":195,"org.easymock.tests.UsageExpectAndThrowTest.longType":236,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":290,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":312,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":108,"org.easymock.tests2.SerializationTest.testClass":40,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":141,"org.easymock.tests.ReplayStateInvalidUsageTest.times":314,"org.easymock.tests.LimitationsTest.mockNativeMethod":253,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":103,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":231,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":68,"org.easymock.tests2.AnswerTest.answer":184,"org.easymock.tests2.CaptureTest.testAnd":120,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":304,"org.easymock.tests2.UsageTest.strictResetToDefault":187,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":51,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":109,"org.easymock.tests2.NameTest.nameForMocksControl":183,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":281,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":148,"org.easymock.tests2.DelegateToTest.testDelegate":143,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":277,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":237,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":131,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":289,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":56,"org.easymock.tests.MockingTest.testNicePartialClassMocking":276,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":248,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":135,"org.easymock.tests2.CaptureTest.testCaptureLast":126,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":202,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":303,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":119,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":164,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":176,"org.easymock.tests2.CaptureTest.testCapture1_2446744":318,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":300,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":212,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":246,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":241,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":74,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":178,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":309,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":311,"org.easymock.tests.UsageStrictMockTest.differentMethods":22,"org.easymock.tests2.MockBuilderTest.testCreateMockString":62,"org.easymock.tests.UsageExpectAndThrowTest.floatType":235,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":85,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":185,"org.easymock.tests.UsageVerifyTest.twoThrows":18,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":39,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":3,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":293,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":64,"org.easymock.samples.PartialClassMockTest.testGetArea":37,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":310,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":192,"org.easymock.samples.ExampleTest.voteAgainstRemoval":92,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":44,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":234,"org.easymock.tests2.UsageTest.niceToStrict":82,"org.easymock.tests2.UsageConstraintsTest.testNotNull":177,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":46,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":4,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":52,"org.easymock.tests2.MockBuilderTest.testCreateMock":59,"org.easymock.samples.ExampleTest.voteAgainstRemovals":89,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":227,"org.easymock.tests.UsageVarargTest.differentLength":267,"org.easymock.tests2.CallbackTest.callback":112,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":83,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":42,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":242,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":28,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":81,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":157,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":203,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":257,"org.easymock.tests.UsageCallCountTest.tooFewCalls":205,"org.easymock.tests.UsageOverloadedMethodTest.overloading":260,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":170,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":223,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":116,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":169,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":128,"org.easymock.tests2.EasyMockSupportClassTest.testAll":190,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":211,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":250,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":31,"org.easymock.tests2.CaptureTest.testCaptureAll":121,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":118,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":115,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":315,"org.easymock.tests2.UsageConstraintsTest.testMatches":171,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":117,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":35,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":307,"org.easymock.samples.ExampleTest.voteForRemovals":94,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":302,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":102,"org.easymock.tests2.NameTest.nameForNiceMock":182,"org.easymock.tests.UsageVarargTest.allKinds":272,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":297,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":17,"org.easymock.tests2.DependencyTest.testInterfaceMocking":104,"org.easymock.samples.BasicClassMockTest.testPrintContent":98,"org.easymock.samples.ExampleTest.addDocument":93,"org.easymock.tests2.DelegateToTest.testStubDelegate":70,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":106,"org.easymock.tests2.AnswerTest.stubAnswer":34,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":20,"org.easymock.tests2.UsageConstraintsTest.greaterThan":172,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":57,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":280,"org.easymock.tests.UsageVarargTest.varargLongAccepted":269,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":137,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":294,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":201,"org.easymock.samples.ExampleTest.voteForRemoval":91,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":101,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":230,"org.easymock.tests.UsageExpectAndReturnTest.floatType":214,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":27,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":2,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":41,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":286,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":1,"org.easymock.tests.UsageThrowableTest.noUpperLimit":196,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":173,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":278,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":158,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":186,"org.easymock.tests2.SerializationTest.test":110,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":124,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":58,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":72,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":146,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":197,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":213,"org.easymock.tests2.UsageConstraintsTest.testSame":162,"org.easymock.samples.SupportTest.addDocument":87,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":69,"org.easymock.tests2.CaptureTest.testCaptureFirst":130,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":147,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":287,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":189,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":77,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":219,"org.easymock.tests.GenericTest.testPackageScope":210,"org.easymock.tests2.CaptureTest.testCapture2_2446744":320,"org.easymock.tests2.UsageTest.moreThanOneArgument":12,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":60,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":271,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":285,"org.easymock.tests.GenericTest.testBridgedEquals":7,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":208,"org.easymock.tests2.NameTest.nameForMock":180,"org.easymock.tests.UsageExpectAndReturnTest.longType":215,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":144,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":251,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":224,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":249,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":61,"org.easymock.tests2.UsageStrictMockTest.differentMethods":11,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":216,"org.easymock.tests.UsageCallCountTest.tooManyCalls":209,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":247,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":282,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":204,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":220,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":238,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":9,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":317,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":256,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":114,"org.easymock.tests2.UsageConstraintsTest.testContains":168,"org.easymock.tests2.NameTest.nameForStrictMock":181,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":140,"org.easymock.tests2.UsageConstraintsTest.testFind":160,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":261,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":8,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":138,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":84,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":198,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":139,"org.easymock.tests.UsageExpectAndReturnTest.object":222,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":14,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":174,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":136,"org.easymock.tests.ErrorMessageTest.testGetters":15,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":49,"org.easymock.tests2.UsageStrictMockTest.range":10,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":291,"org.easymock.tests2.UsageConstraintsTest.lessThan":179,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":150,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":266,"org.easymock.tests.UsageTest.exactCallCountByLastCall":284,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":254,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":145,"org.easymock.tests2.CaptureTest.testCaptureRightOne":129,"org.easymock.tests2.UsageConstraintsTest.testOr":163,"org.easymock.tests.UsageRangeTest.combination":279,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":38,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":262,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":228,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":132,"org.easymock.tests.UsageTest.wrongArguments":78,"org.easymock.tests2.MockBuilderTest.testWithConstructor":48,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":217,"org.easymock.tests2.EasyMockSupportTest.testVerify":154,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":225,"org.easymock.tests.UsageVarargTest.varargShortAccepted":268,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":305,"org.easymock.tests2.UsageConstraintsTest.cmpTo":167,"org.easymock.tests.UsageVarargTest.varargCharAccepted":265,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":295,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":107,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":153,"org.easymock.tests2.CaptureTest.testCaptureFromStub":319,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":308,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":50,"org.easymock.tests.UsageTest.unexpectedCallWithArray":33,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":301,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":76,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":240,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":32,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":206,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":226,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":292,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":200,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":43,"org.easymock.tests2.UsageConstraintsTest.constraints":159,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":239,"org.easymock.samples.ExampleTest.addAndChangeDocument":95,"org.easymock.tests.CapturesMatcherTest.test":321,"org.easymock.tests.ReplayStateInvalidCallsTest.times":298,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":229,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":99,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":299,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":199,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":65,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":125,"org.easymock.tests2.UsageTest.resumeIfFailure":188,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":193,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":218,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":66,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":232,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":194,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":263,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":16,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":149,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":25}}]

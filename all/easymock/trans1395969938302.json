[{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:283","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.createStrictControl()","position":"org.easymock.EasyMockSupport:480","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl() : org.easymock.EasyMockSupport.createStrictControl()","position":"org.easymock.internal.MockBuilder:229","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"resolvedType","bound":"resolvedType","this":"this"},"name":"replace","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:354","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type == null) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:335","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","position":"org.easymock.EasyMock:1708","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Character.java.lang.Class<java.lang.Character>.getName(), java.lang.Character.java.lang.Class<java.lang.Character>)","position":"org.easymock.internal.MethodSerializationWrapper:36","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:210","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new org.easymock.internal.JavaProxyFactory()","position":"org.easymock.internal.MocksControl:35","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:122","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(\", \")","position":"org.easymock.internal.ArgumentToString:91","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:409","type":"CtAssertImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>","position":"org.easymock.internal.ClassProxyFactory:193","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:52","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:257","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:275","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"this","key":"qualifier"},"name":"replace","transplant":{"sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","position":"org.easymock.internal.EasyMockProperties:115","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","position":"org.easymock.internal.InjectionPlan:60","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:178","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.matchers.Equals.matches(java.lang.Object)","position":"org.easymock.internal.matchers.ArrayEquals:55","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.NoSuchFieldException java.lang.NoSuchFieldException","position":"org.easymock.internal.Injector:206","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = org.easymock.internal.Invocation.org.easymock.internal.Invocation.createObjectArray(java.lang.Object[][((java.lang.Object[].int) - 1)])","position":"org.easymock.internal.Invocation:59","type":"CtLocalVariableImpl"},"status":-2},{"failures":[0],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","position":"org.easymock.EasyMockSupport:480","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(float[]))","position":"org.easymock.EasyMock:1633","type":"CtInvocationImpl"},"status":-1},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,0,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1204","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","position":"org.easymock.EasyMock:2079","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:309","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","constructorArgs":"constructorArgs","this":"this","mockedMethods":"mockedMethods"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:299","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:325","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.ObjectMethodsFilter:108","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"bound","bound":"bound","this":"this"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:356","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:354","type":"CtIfImpl"},"status":-2},{"failures":[215],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.MockBuilder:113","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","position":"org.easymock.internal.MockBuilder:120","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{"bridgeMethod":"method"},"name":"add","transplant":{"sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:417","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Float>(float))","position":"org.easymock.EasyMock:746","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","position":"org.easymock.internal.RecordState:98","type":"CtInvocationImpl"},"status":-2},{"failures":[0],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:94","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:47","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:154","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.StartsWith(java.lang.String))","position":"org.easymock.EasyMock:1802","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.ExpectedInvocation","position":"org.easymock.internal.ExpectedInvocationAndResult:37","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.easymock.internal.MocksBehavior:156","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-2087349195182278608L","position":"org.easymock.internal.AssertionErrorWrapper:23","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:115","type":"CtReturnImpl"},"status":-2},{"failures":[1,2,3,4,216,217,218,219,5,7,8,9,10,11,12,13,14,17,19,22,23,24,25,0,27,29,30,32,33,34,35,36,38,39,40,220,221,41,43,44,45,46,47,48,50,51,52,55,222,223,224,225,226,227,228,229,230,231,232,233,57,58,59,60,234,61,62,63,64,65,66,67,235,68,69,70,71,236,76,237,78,238,239,240,80,81,241,242,82,83,243,88,89,90,91,244,245,246,247,248,94,95,96,97,98,99,100,249,250,251,252,253,105,106,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,152,154,155,156,157,158,159,254,255,160,169,170,171,172,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,256,257,198,258,259,260,199,203,204,205,206,207,208,209,210,211,212,213,214],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"int += 1","position":"org.easymock.internal.Results:73","type":"CtOperatorAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{"maximum":"maximum","minimum":"maximum"},"name":"add","transplant":{"sourceCode":"return ((\"between \" + (this.int)) + \" and \") + (this.int)","position":"org.easymock.internal.Range:70","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","position":"org.easymock.internal.Range:67","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:172","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","position":"org.easymock.EasyMock:560","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.AndroidSupport.boolean = false","position":"org.easymock.internal.AndroidSupport:29","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:252","type":"CtLocalVariableImpl"},"status":-2},{"failures":[0],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Equals:38","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:37","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","position":"org.easymock.EasyMock:2125","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:160","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.MocksControl.ONCE":"org.easymock.internal.MocksControl.ONCE","this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.RecordState.times(this.org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:118","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:99","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"clazz":"type"},"name":"replace","transplant":{"sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:376","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:259","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:185","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ObjectMethodsFilter:55","type":"CtTryImpl"},"status":-2},{"failures":[216,217,218,219,5,11,46,261,48,262,50,263,77,264,265,78,238,239,266,267,268,269,270,271,272,273,274,274,275,275,249,276,277,132,138,139,140,157,203,278],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:170","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","position":"org.easymock.internal.ReflectionUtils:105","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = java.lang.reflect.Method.getParameterTypes()","position":"org.easymock.internal.BridgeMethodResolver:189","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getAllInterfacesForClass(java.lang.reflect.Method.getDeclaringClass())","position":"org.easymock.internal.BridgeMethodResolver:167","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.EasyMock:509","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Set<org.easymock.internal.MethodSerializationWrapper> == null) {\n    return ;\n} ","position":"org.easymock.internal.ClassProxyFactory:110","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","position":"org.easymock.internal.MockBuilder:223","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Result != null) {\n    return org.easymock.internal.Result;\n} ","position":"org.easymock.internal.MocksBehavior:88","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final org.easymock.IArgumentMatcher org.easymock.IArgumentMatcher : java.util.List<org.easymock.IArgumentMatcher>) {\n    if (!(org.easymock.IArgumentMatcher.matches(java.lang.Object))) {\n        return false;\n    } \n}","position":"org.easymock.internal.matchers.And:38","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.matchers.Or:40","type":"CtReturnImpl"},"status":-2},{"failures":[1,2,3,4,216,217,218,219,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,0,27,28,29,30,31,32,33,34,35,36,37,38,39,43,44,45,46,47,48,49,50,51,52,53,54,55,56,222,223,224,225,226,227,228,279,229,230,231,232,233,57,58,59,60,61,62,63,64,65,66,67,235,68,69,70,71,72,73,74,75,236,76,237,77,78,79,238,239,240,80,81,241,242,82,83,88,90,91,92,93,247,248,94,95,96,97,98,99,100,274,275,249,250,251,252,253,102,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    return ;\n} ","position":"org.easymock.internal.MocksBehavior:160","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.lang.InstantiationException java.lang.InstantiationException","position":"org.easymock.internal.ClassProxyFactory:208","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = java.lang.reflect.Method.isAccessible()","position":"org.easymock.internal.DefaultClassInstantiator:185","type":"CtLocalVariableImpl"},"status":-2},{"failures":[14,15,18,19,20,21,26,27,28,30,31,36,37,38,40,280,274,274,275,275,141,142,143,144,145,146,147,154,155,156,281,159,163,164,165,166,167,169],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.RecordState.closeMethod()","position":"org.easymock.internal.RecordState:76","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","position":"org.easymock.internal.RecordState:135","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.matchers.Or:54","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:136","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:68","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.createNiceControl()","position":"org.easymock.EasyMockSupport:530","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:178","type":"CtLocalVariableImpl"},"status":-2},{"failures":[1,282,283,2,3,4,216,217,218,219,5,6,7,284,8,9,285,286,10,11,12,13,14,15,16,17,18,19,20,21,22,23,287,24,25,26,0,27,28,29,30,31,32,33,34,288,35,36,37,38,289,39,40,220,221,41,42,43,290,44,45,46,47,48,262,50,291,51,52,53,54,55,56,222,223,224,225,226,227,228,279,229,230,231,232,233,57,58,59,60,234,61,62,63,64,65,66,280,292,67,235,68,69,293,294,70,71,236,76,237,264,78,238,239,266,240,80,81,241,242,82,83,84,85,86,87,243,88,89,295,90,91,244,245,92,296,297,93,246,247,248,94,95,96,97,98,99,100,274,274,275,275,249,250,251,252,253,298,299,300,101,103,104,105,106,301,302,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,303,304,305,306,307,133,308,309,310,311,312,313,134,135,314,315,316,317,318,319,136,137,320,138,139,140,141,142,321,322,323,143,144,145,146,147,148,149,150,151,152,153,154,155,324,325,156,157,281,326,158,327,159,254,255,160,161,162,163,164,165,166,167,169,328,170,171,172,329,330,331,332,333,334,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,335,336,256,257,198,337,258,259,338,339,260,199,200,201,202,203,204,278,205,206,207,208,209,340,210,211,212,213,214],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1220","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","position":"org.easymock.internal.MockInvocationHandler:38","type":"CtInvocationImpl"},"status":-1},{"failures":[341,342,343,344,345,346,347,348,349,350,252,253],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.reflect.Field.getType()","position":"org.easymock.internal.InjectionTarget:46","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.InjectionTarget:58","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n    break;\n} ","position":"org.easymock.internal.BridgeMethodResolver:199","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"bridgeMethod"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:117","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:115","type":"CtIfImpl"},"status":0},{"failures":[1,19,24,36,40,243,244,245,246,135,137,159,170,172,257,258,259,260],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.Results:64","type":"mutation","status":-1},{"failures":[32],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1372","type":"CtInvocationImpl"},"status":-1},{"failures":[290],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:392","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:346","type":"CtReturnImpl"},"status":-1},{"failures":[351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","position":"org.easymock.internal.RecordState:234","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{"clazz":"clazz"},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.ReflectionUtils:92","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Field java.lang.reflect.Field = org.easymock.internal.Injector.org.easymock.internal.Injector.getFieldByName(java.lang.Class<?>, org.easymock.internal.Injection.getQualifier())","position":"org.easymock.internal.Injector:163","type":"CtLocalVariableImpl"},"status":-2},{"failures":[373],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"Answer throwing \" + java.lang.Throwable","position":"org.easymock.internal.Result:51","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))) {\n    return net.sf.cglib.proxy.MethodProxy.invokeSuper(java.lang.Object, java.lang.Object[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:93","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"result","array":"array","this":"this"},"name":"add","transplant":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    java.lang.Object[][int] = java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int);\n}","position":"org.easymock.internal.Invocation:73","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Object[][int] = java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int)","position":"org.easymock.internal.Invocation:74","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","position":"org.easymock.internal.MockBuilder:132","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null)","position":"org.easymock.internal.ClassProxyFactory:251","type":"CtInvocationImpl"},"status":-2},{"failures":[374,375],"name":"returnValue","position":"org.easymock.internal.Invocation:201","type":"mutation","return":"return false","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:320","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.UnorderedBehavior org.easymock.internal.UnorderedBehavior : java.util.List<org.easymock.internal.UnorderedBehavior>.subList(int, java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : org.easymock.internal.UnorderedBehavior.getMessages(null)) {\n        org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, 0);\n    }\n}","position":"org.easymock.internal.MocksBehavior:167","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:356","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return \"Answer throwing \" + java.lang.Throwable","position":"org.easymock.internal.Result:51","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl","position":"org.easymock.internal.MockInvocationHandler:52","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"value":"mock"},"name":"replace","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.Injection:50","type":"CtReturnImpl"},"status":-2},{"failures":[376,377,378,379,89,295,296,297,380,381,382,327,198,383,337,338,339],"variableMapping":{"this":"this","buffer":"buffer","value":"value"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:34","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:40","type":"CtIfImpl"},"status":-1},{"failures":[],"binaryOperator":"((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\")","name":"math","position":"org.easymock.internal.ReflectionUtils:152","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.EasyMock:1235","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).startsWith(java.lang.String))","position":"org.easymock.internal.matchers.StartsWith:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","position":"org.easymock.internal.AndroidClassProxyFactory:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs())","position":"org.easymock.internal.AndroidClassProxyFactory:43","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int == (java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    int--;\n} ","position":"org.easymock.internal.MocksBehavior:114","type":"CtIfImpl"},"status":-2},{"failures":[221,255,171,172,256],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.ErrorMessage.isMatching()) {\n    int++;\n} ","position":"org.easymock.internal.MocksBehavior:131","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{"this":"this","mock":"mock"},"name":"add","transplant":{"sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","position":"org.easymock.EasyMock:2053","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","position":"org.easymock.internal.DefaultClassInstantiator:126","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"actual","o":"expected"},"name":"replace","transplant":{"sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","position":"org.easymock.internal.matchers.Equals:53","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:47","type":"CtReturnImpl"},"status":-2},{"failures":[261,49,224,226,227,279,229,235,72,73,74,75,236,77,79,238,239,90,92,107,108,109,110,111,173,174,175,176],"variableMapping":{"lastResult":"stubOrNice"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.Result = null","position":"org.easymock.internal.RecordState:186","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()))","position":"org.easymock.internal.MocksBehavior:98","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.Proxy.java.lang.reflect.Proxy.getInvocationHandler(java.lang.Object)","position":"org.easymock.internal.JavaProxyFactory:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Results:60","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"\"Delegated to \" + java.lang.Object","name":"math","position":"org.easymock.internal.DelegatingAnswer:95","type":"mutation","status":-2},{"failures":[57,58,59,60,234,61,62,63,65,66,280,292],"variableMapping":{"currentCaptures":"currentCaptures"},"name":"add","transplant":{"sourceCode":"for (final org.easymock.internal.matchers.Captures<?> org.easymock.internal.matchers.Captures<?> : this.java.util.Collection<org.easymock.internal.matchers.Captures<?>>) {\n    org.easymock.internal.matchers.Captures<?>.validateCapture();\n}","position":"org.easymock.internal.Invocation:167","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Collection<org.easymock.internal.matchers.Captures<?>>.clear()","position":"org.easymock.internal.Invocation:176","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","position":"org.easymock.internal.LastControl:80","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:233","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","position":"org.easymock.internal.RecordState:133","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result == null) && (boolean)) {\n    org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()));\n} ","position":"org.easymock.internal.MocksBehavior:97","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Equals:38","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Invocation.isPrimitiveParameter(int)) {\n    if (!(java.lang.Object.equals(java.lang.Object))) {\n        return false;\n    } \n} else {\n    if (java.lang.Object != java.lang.Object) {\n        return false;\n    } \n}","position":"org.easymock.internal.Invocation:121","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * This class was kept here for compabitility reason with frameworks using EasyMock\n * @deprecated Use org.easymock.MockType\n */\n@java.lang.Deprecated\npublic enum MockType {\nNICE(org.easymock.MockType.NICE), DEFAULT(org.easymock.MockType.DEFAULT), STRICT(org.easymock.MockType.STRICT);\n    public org.easymock.MockType realType;\n    MockType(final org.easymock.MockType realType) {\n        this.org.easymock.MockType = org.easymock.MockType;\n    }}","position":"org.easymock.internal.MocksControl:46","type":"CtEnumImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:47","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return boolean","position":"org.easymock.internal.ErrorMessage:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setClassLoader(java.lang.Object.getClass().getClassLoader())","position":"org.easymock.internal.ClassProxyFactory:183","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new org.easymock.internal.Result(new DelegatingAnswer() , false)","position":"org.easymock.internal.Result:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Injection != null) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()));\n} ","position":"org.easymock.internal.Injector:232","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToStrict();\n}","position":"org.easymock.EasyMockSupport:594","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"result","bound":"bound","this":"this"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:358","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)))","position":"org.easymock.internal.BridgeMethodResolver:359","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:65","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"(int)++","position":"org.easymock.internal.MocksBehavior:94","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[263],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","position":"org.easymock.internal.Range:37","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:90","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","position":"org.easymock.EasyMock:1746","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:1191","type":"mutation","return":"return 0","status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.Any:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:193","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.callSuper(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.AndroidClassProxyFactory:90","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers())) {\n    return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:67","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)","position":"org.easymock.internal.RecordState:97","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(org.easymock.internal.Injection.isMatched())) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"Unsatisfied qualifier: \\'%s\\'\", org.easymock.internal.Injection.getAnnotation().java.lang.String()));\n} ","position":"org.easymock.internal.Injector:89","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<java.lang.reflect.Method>.size()) == 1) {\n    java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0);\n} else {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method);\n}","position":"org.easymock.internal.BridgeMethodResolver:87","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"},"name":"add","transplant":{"sourceCode":"this.boolean = true","position":"org.easymock.internal.AndroidSupport:27","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:177","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Short>(short))","position":"org.easymock.EasyMock:878","type":"CtInvocationImpl"},"status":-2},{"failures":[0,327,214],"binaryOperator":"(java.lang.Object instanceof char[]) && ((java.lang.Object == null) || (java.lang.Object instanceof char[]))","name":"removeConditional","position":"org.easymock.internal.matchers.ArrayEquals:40","type":"mutation","status":-1},{"failures":[16,22],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1176","type":"CtInvocationImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type == null) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:335","type":"CtIfImpl"},"status":0},{"failures":[],"binaryOperator":"((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \")","name":"math","position":"org.easymock.internal.DefaultClassInstantiator:193","type":"mutation","status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":314,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":48,"org.easymock.tests2.MockedExceptionTest.testRealException":56,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":254,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":348,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":158,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":192,"org.easymock.tests.UsageVarargTest.varargIntAccepted":207,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":169,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":14,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":5,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":253,"org.easymock.tests2.UsageConstraintsTest.testContains":26,"org.easymock.tests.UsageCallCountTest.tooManyCalls":302,"org.easymock.tests2.UsageConstraintsTest.testFind":18,"org.easymock.tests2.StubTest.stubWithReturnValue":7,"org.easymock.tests.UsageVarargTest.allKinds":214,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":61,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":176,"org.easymock.tests2.CaptureTest.testCaptureAll":58,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":141,"org.easymock.samples.ExampleTest.addAndChangeDocument":100,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":77,"org.easymock.tests.UsageVarargTest.varargCharAccepted":208,"org.easymock.tests2.CaptureTest.testCaptureFromStub":280,"org.easymock.tests.UsageVerifyTest.twoThrows":171,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":350,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":155,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":209,"org.easymock.tests2.DelegateToTest.testReturnException":8,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":91,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":29,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":232,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":39,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":270,"org.easymock.tests2.CaptureTest.testAnd":57,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":300,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":269,"org.easymock.tests.UsageStrictMockTest.testVerify":162,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":185,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":65,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":305,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":189,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":276,"org.easymock.tests2.UsageConstraintsTest.testMatches":28,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":108,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":267,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":361,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":312,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":362,"org.easymock.tests2.UsageConstraintsTest.testNull":19,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":240,"org.easymock.tests2.EasyMockSupportClassTest.testAll":216,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":227,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":125,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":193,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":236,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":132,"org.easymock.tests.UsageThrowableTest.throwError":313,"org.easymock.tests2.UsageConstraintsTest.greaterThan":30,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":205,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":156,"org.easymock.samples.SupportTest.addDocument":250,"org.easymock.tests2.StubTest.stub":6,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":331,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":346,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":146,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":154,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":344,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":371,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":32,"org.easymock.tests.UsageExpectAndReturnTest.object":122,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":131,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":229,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":272,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":372,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":213,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":42,"org.easymock.tests.UsageExpectAndThrowTest.object":187,"org.easymock.tests2.DelegateToTest.testWrongClass":285,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":293,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":353,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":150,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":380,"org.easymock.tests2.UsageTest.moreThanOneArgument":89,"org.easymock.tests.UsageVarargTest.varargByteAccepted":212,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":184,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":271,"org.easymock.samples.ExampleTest.voteAgainstRemoval":97,"org.easymock.tests.UsageTest.wrongArguments":337,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":110,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":317,"org.easymock.tests.UsageVarargTest.varargShortAccepted":210,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":334,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":188,"org.easymock.tests2.UsageTest.defaultResetToNice":92,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":381,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":376,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":55,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":145,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":252,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":294,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":239,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":70,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":347,"org.easymock.tests2.SerializationTest.testAllMockedMethod":13,"org.easymock.tests2.NameTest.nameForMocksControl":87,"org.easymock.samples.ExampleTest.voteAgainstRemovals":94,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":289,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":304,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":201,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":325,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":319,"org.easymock.tests2.CaptureTest.testCapture1_2446744":234,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":246,"org.easymock.tests2.DelegateToTest.testStubDelegate":9,"org.easymock.tests.LimitationsTest.mockNativeMethod":157,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":322,"org.easymock.tests.UsageUnorderedTest.message":256,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":307,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":365,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":286,"org.easymock.samples.ExampleTest.answerVsDelegate":95,"org.easymock.samples.ExampleTest.voteForRemoval":96,"org.easymock.tests.UsageCallCountTest.tooFewCalls":104,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":121,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":2,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":106,"org.easymock.tests.UsageVerifyTest.twoReturns":172,"org.easymock.tests2.DependencyTest.testInterfaceMocking":76,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":116,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":186,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":364,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":133,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":222,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":379,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":149,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":366,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":225,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":323,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":75,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":22,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":161,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":173,"org.easymock.tests.MockingTest.testTwoMocks":320,"org.easymock.tests2.CaptureTest.testCaptureRightOne":66,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":118,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":103,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":174,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":53,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":283,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":47,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":200,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":333,"org.easymock.tests2.UsageConstraintsTest.cmpTo":25,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":101,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":123,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":81,"org.easymock.tests2.MockedExceptionTest.testMockedException":54,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":349,"org.easymock.tests.UsageThrowableTest.throwCheckedException":315,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":369,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":35,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":165,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":196,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":170,"org.easymock.samples.PartialClassMockTest.testGetArea":249,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":358,"org.easymock.samples.ExampleTest.voteForRemovals":99,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":135,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":137,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":27,"org.easymock.samples.ConstructorCalledMockTest.testTax":274,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":151,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":306,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":46,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":282,"org.easymock.tests2.UsageTest.argumentsOrdered":297,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":257,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":4,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":281,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":117,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":273,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":107,"org.easymock.tests2.AnswerTest.answer":1,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":351,"org.easymock.tests.MockingTest.testNicePartialClassMocking":139,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":159,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":113,"org.easymock.tests2.UsageConstraintsTest.any":24,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":343,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":352,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":120,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":147,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":355,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":167,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":332,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":231,"org.easymock.tests.ResultTest.createThrowResultToString":373,"org.easymock.tests.UsageExpectAndThrowTest.longType":180,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":52,"org.easymock.tests2.CallbackTest.callback":71,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":218,"org.easymock.tests2.NameTest.nameForMock":84,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":279,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":359,"org.easymock.tests.UsageTest.argumentsOrdered":339,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":17,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":238,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":0,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":130,"org.easymock.tests2.NameTest.nameForStrictMock":85,"org.easymock.tests2.MockBuilderTest.testCreateMockString":268,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":324,"org.easymock.tests2.CaptureTest.testCaptureNone":64,"org.easymock.tests2.SerializationTest.test":12,"org.easymock.tests.UsageExpectAndReturnTest.longType":115,"org.easymock.tests2.SerializationTest.testClass":11,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":62,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":357,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":370,"org.easymock.tests2.CaptureTest.testCaptureFirst":67,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":33,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":197,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":247,"org.easymock.tests2.UsageTest.niceToStrict":90,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":148,"org.easymock.tests2.EasyMockSupportTest.testVerify":233,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":111,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":79,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":329,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":326,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":182,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":288,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":243,"org.easymock.tests2.UsageTest.strictResetToDefault":88,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":190,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":50,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":129,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":266,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":328,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":177,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":23,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":119,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":242,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":72,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":261,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":31,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":45,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":206,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":43,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":153,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":140,"org.easymock.tests2.UsageConstraintsTest.testOr":21,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":263,"org.easymock.tests2.DelegateToTest.testDelegate":10,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":69,"org.easymock.tests2.UsageConstraintsTest.testNotNull":36,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":215,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":220,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":235,"org.easymock.tests2.CaptureTest.testCapture_2617107":59,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":342,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":374,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":367,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":124,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":142,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":277,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":318,"org.easymock.tests2.ThreadingTest.testThreadSafe":68,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":245,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":368,"org.easymock.tests.UsageThrowableTest.noUpperLimit":134,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":164,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":80,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":241,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":230,"org.easymock.tests.UsageExpectAndReturnTest.floatType":114,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":223,"org.easymock.tests2.UsageTest.wrongArguments":295,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":287,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":74,"org.easymock.tests2.UsageConstraintsTest.testSame":20,"org.easymock.tests2.UsageTest.resumeIfFailure":93,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":377,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":299,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":82,"org.easymock.tests.UsageOverloadedMethodTest.overloading":136,"org.easymock.tests.UsageRangeTest.combination":199,"org.easymock.samples.SupportTest.voteForRemovals":251,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":316,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":310,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":275,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":37,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":204,"org.easymock.tests.UsageTest.openCallCountByLastCall":258,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":183,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":375,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":309,"org.easymock.tests2.NameTest.nameForNiceMock":86,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":202,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":34,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":163,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":345,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":40,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":44,"org.easymock.tests2.CaptureTest.testPrimitive":60,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":126,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":191,"org.easymock.samples.BasicClassMockTest.testPrintContent":248,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":298,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":175,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":143,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":49,"org.easymock.tests.UsageExpectAndThrowTest.floatType":179,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":51,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":127,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":290,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":301,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":102,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":341,"org.easymock.tests2.UsageStrictMockTest.differentMethods":41,"org.easymock.tests.UsageTest.exactCallCountByLastCall":260,"org.easymock.tests2.AnswerTest.stubAnswer":3,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":224,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":228,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":278,"org.easymock.tests2.CaptureTest.testCaptureLast":63,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":178,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":105,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":217,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":237,"org.easymock.tests.UsageStrictMockTest.range":255,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":259,"org.easymock.tests.UsageTest.unexpectedCallWithArray":383,"org.easymock.tests.MockingTest.testPartialClassMocking":138,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":128,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":354,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":296,"org.easymock.tests2.UsageConstraintsTest.constraints":16,"org.easymock.samples.ExampleTest.addDocument":98,"org.easymock.tests2.UsageConstraintsTest.lessThan":38,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":73,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":338,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":303,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":166,"org.easymock.tests.UsageVarargTest.varargLongAccepted":211,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":330,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":262,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":291,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":284,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":363,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":327,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":195,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":378,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":219,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":308,"org.easymock.tests2.UsageStrictMockTest.range":221,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":83,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":109,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":265,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":335,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":336,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":356,"org.easymock.tests.UsageTest.moreThanOneArgument":198,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":144,"org.easymock.tests2.UsageTest.openCallCountByLastCall":244,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":264,"org.easymock.tests.UsageStrictMockTest.differentMethods":160,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":226,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":15,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":168,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":78,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":360,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":181,"org.easymock.tests.UsageVarargTest.differentLength":340,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":311,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":321,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":382,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":112,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":152,"org.easymock.tests2.CaptureTest.testCapture2_2446744":292,"org.easymock.tests.GenericTest.testPackageScope":203}}]

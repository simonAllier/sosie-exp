[{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:52","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,2,3,4,5,6,7,8,298,298,299,299,9,300,301,302,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,27,303,28,304,29,305,306,307,308,30,309,310,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,311,46,312,313,314,315,316,317,47,48,49,50,51,52,53,318,55,56,57,58,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,110,111,112,115,116,117,118,319,320,321,322,323,324,119,120,121,122,123,124,125,126,127,128,129,130,131,325,326,327,328,136,137,138,139,140,141,142,143,144,145,146,147,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,173,174,175,176,177,178,183,329,184,185,186,187,330,331,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,332,333,334,335,336,337,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,245,246,248,249,250,251,252,253,254,255,256,257,259,260,261,262,263,264,265,267,268,269,270,271,272,273,274,275,276,277,278,338,339,340,341,342,285,286,287,288,289,290,291,292,293,294,295,296,297],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:388","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"type"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:52","sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion().equals(\"1.3\")","type":"CtReturnImpl"},"failures":[343,344],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[345,346,347,348,349,350],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"argType":"paramType","paramType":"paramType"}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:225","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[31,33,41,82,88],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ErrorMessage:40","sourceCode":"return this.java.lang.String","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:98","sourceCode":"return (java.lang.String) != null ? java.lang.String : \"EasyMock for \" + org.easymock.internal.MocksControl.(org.easymock.internal.MocksControl.getMockedType(java.lang.Object))","type":"CtReturnImpl"},"failures":[16,21,23,24,25,26,27,29,307,309,311,351,53,66,70,74,82,97,352,321,353,119,121,122,123,124,128,129,130,131,140,141,142,149,150,159,161,162,163,164,165,166,171,172,354,179,355,182,183,184,185,188,189,190,212,215,216,217,238,247,266,356,357,358,285,289,290,291,292,295,296,297],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"message":"name"}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"failures":[359],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:48","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"toString\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:81","sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[9,10,360,361,362,363,17,364,365,366,367,368,369,370,54,371,372,373],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:216","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[150,334],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,298,299,9,300,301,302,10,11,12,15,16,18,19,20,22,23,26,27,303,28,304,29,305,306,307,308,30,309,310,31,32,33,34,36,37,38,39,40,41,44,45,46,312,313,314,315,316,317,47,48,49,50,51,52,53,55,56,57,58,60,61,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,110,111,112,115,116,117,118,319,320,321,322,120,121,123,124,127,130,325,326,327,328,136,137,138,139,140,141,142,143,144,145,146,147,374,152,153,160,162,165,166,167,173,174,175,176,177,178,183,329,184,185,186,187,330,331,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,239,245,248,249,250,251,252,253,254,257,259,260,261,262,263,264,265,267,268,269,270,271,272,273,274,275,276,277,278,338,339,340,341,342,285,286,287,288,290],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"failures":[284],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:48","sourceCode":"if (org.easymock.internal.MocksControl != null) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl);\n} else {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove();\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"this.org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"failures":[375,376,49,118,320],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:89","sourceCode":"return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object)","type":"CtReturnImpl"},"failures":[16,17,21,23,24,25,26,27,29,306,307,309,310,311,316,351,376,53,54,66,68,70,71,73,74,82,97,108,109,110,111,118,352,377,321,322,353,323,324,119,121,122,123,124,128,129,130,131,140,141,142,149,150,159,161,162,163,164,165,166,171,172,354,378,179,180,355,181,182,183,184,185,188,189,190,212,215,216,217,238,247,266,356,357,358,285,289,290,291,292,295,296,297],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"proxy"}},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplant":{"position":"org.easymock.Capture:117","sourceCode":"if (this.org.easymock.Capture<T>.hasCaptured()) {\n    this.org.easymock.Capture<T>.reset();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[31,32,33,34,35,36,37,38,40,41,42,43,44,379],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"capture"}},{"transplant":{"position":"org.easymock.internal.AndroidClassProxyFactory:52","sourceCode":"java.lang.InstantiationException java.lang.InstantiationException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:193","sourceCode":"if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[380,381,382,383,384,385,386],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:323","sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:310","sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","type":"CtReturnImpl"},"failures":[1,2,4,5,7,298,298,299,299,300,11,12,13,14,15,16,18,19,20,23,25,26,303,28,305,306,307,308,30,309,310,31,32,34,35,38,39,40,41,42,43,44,45,311,46,312,313,314,315,387,317,351,51,53,61,65,66,67,68,69,70,71,72,73,74,75,76,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,112,116,352,319,321,322,323,119,120,121,123,125,126,127,130,131,325,326,327,328,132,134,135,140,142,143,144,145,146,147,148,149,150,151,153,154,155,156,157,158,162,164,165,330,388,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,216,239,245,253,254,257,258,259,260,272,273,274,275,276,277,278,338,339,340,283,284,285,286,287,288,289,290,293,294,297],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"exception":"returnType","throwableClass":"returnType"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:79","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"bridgeMethod"}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:229","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.get(java.lang.Class<?>)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,298,298,299,299,9,300,301,302,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,27,303,28,304,29,305,306,307,308,30,309,310,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,311,46,312,313,314,375,315,316,387,317,351,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,352,319,320,321,322,323,119,120,121,122,123,124,125,126,127,128,129,130,131,325,326,327,328,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,389,390,173,174,175,176,177,178,183,184,185,186,187,189,190,330,331,388,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,338,339,340,342,280,281,282,283,284,285,286,287,288,289,290,292,293,294,295,296,297],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[303,28,304,391],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:62","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:63","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtInvocationImpl"},"failures":[23,31,32,33,34,35,36,37,38,39,40,41,42,43,44,315,47,48,318,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,143,144,145,146,147,161,162,177,238,245,246,253,254,255,256,257,271,272,273],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:290","sourceCode":"return ","type":"CtReturnImpl"},"failures":[0,1,2,4,5,6,7,8,9,301,302,10,21,22,23,24,25,26,27,304,29,32,33,36,37,38,39,44,45,47,48,68,74,75,76,77,78,90,91,103,104,108,109,110,111,115,352,319,323,122,124,128,129,152,159,160,161,162,163,164,165,166,167,183,184,185,186,187,189,190,331,238,241,242,255,256,261,262,263,264,265,266,267,268,269,270,271,272,342,292,295,296],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"methodName","key":"methodName"}},{"transplant":{"position":"org.easymock.internal.ReplayState:63","sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:46","sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","type":"CtThrowImpl"},"failures":[49,50,51,52,79,119,126,141,151,153,154,155,156,157,158,173,174,175,176,177,178,214,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,246,255,256,260,289,294],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":83,"org.easymock.tests2.UsageTest.argumentsOrdered":129,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":289,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":75,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":54,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":124,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":9,"org.easymock.tests2.DelegateToTest.testReturnException":60,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":174,"org.easymock.tests.MockingTest.testPartialClassMocking":338,"org.easymock.tests.MockClassControlTest.testToString":356,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":148,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":376,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":218,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":326,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":19,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":381,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":89,"org.easymock.tests2.UsageTest.wrongArguments":122,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":253,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":366,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":138,"org.easymock.samples.ExampleTest.answerVsDelegate":3,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":355,"org.easymock.tests2.UsageConstraintsTest.testNull":85,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":312,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":74,"org.easymock.tests2.CaptureTest.testPrimitive":34,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":257,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":237,"org.easymock.tests.UsageTest.moreThanOneArgument":290,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":46,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":276,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":240,"org.easymock.tests.UsageTest.argumentsOrdered":296,"org.easymock.tests.UsageVarargTest.varargIntAccepted":263,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":143,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":385,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":118,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":320,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":147,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":16,"org.easymock.tests2.AnswerTest.answer":112,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":90,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":58,"org.easymock.tests2.CaptureTest.testAnd":31,"org.easymock.tests2.UsageTest.strictResetToDefault":120,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":316,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":275,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":69,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":287,"org.easymock.tests2.DelegateToTest.testDelegate":64,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":244,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":233,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":177,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":252,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":149,"org.easymock.tests2.CaptureTest.testCapture1_2446744":35,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":231,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":56,"org.easymock.tests.UsageThrowableTest.throwError":151,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":180,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":373,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":278,"org.easymock.samples.PartialClassMockTest.testGetArea":300,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":333,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":144,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":134,"org.easymock.tests2.UsageTest.niceToStrict":123,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":219,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":354,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":319,"org.easymock.tests2.MockBuilderTest.testCreateMock":353,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":365,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":227,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":70,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":282,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":183,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":136,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":348,"org.easymock.tests.UsageOverloadedMethodTest.overloading":259,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":95,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":214,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":202,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":258,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":94,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":40,"org.easymock.tests2.EasyMockSupportClassTest.testAll":325,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":331,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":235,"org.easymock.tests2.CaptureTest.testCaptureAll":32,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":57,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":250,"org.easymock.tests.MockNameTest.defaultName":247,"org.easymock.tests2.UsageConstraintsTest.testMatches":96,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":277,"org.easymock.samples.ExampleTest.voteForRemovals":7,"org.easymock.tests.UsageVarargTest.allKinds":271,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":140,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":251,"org.easymock.samples.BasicClassMockTest.testPrintContent":302,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":157,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":21,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":178,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":63,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":371,"org.easymock.tests2.UsageConstraintsTest.greaterThan":98,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":286,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":351,"org.easymock.samples.ExampleTest.voteForRemoval":4,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":12,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":181,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":375,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":119,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":342,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":67,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":153,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":173,"org.easymock.tests2.CaptureTest.testCaptureFirst":44,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":59,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":68,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":131,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":217,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":198,"org.easymock.tests2.UsageTest.moreThanOneArgument":121,"org.easymock.tests2.CaptureTest.testCapture2_2446744":43,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":14,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":323,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":270,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":349,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":189,"org.easymock.tests.UsageExpectAndReturnTest.longType":194,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":65,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":248,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":236,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":132,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":103,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":234,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":169,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":274,"org.easymock.tests.UsageCallCountTest.tooManyCalls":190,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":184,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":199,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":223,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":156,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":306,"org.easymock.tests2.UsageConstraintsTest.testContains":93,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":329,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":51,"org.easymock.tests2.UsageConstraintsTest.testFind":84,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":260,"org.easymock.tests.MockTypeTest.fromEasyMockClass":179,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":159,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":48,"org.easymock.tests.UsageExpectAndReturnTest.object":201,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":315,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":73,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":265,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":382,"org.easymock.tests.UsageTest.exactCallCountByLastCall":297,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":350,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":245,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":241,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":380,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":207,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":261,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":213,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":368,"org.easymock.tests2.EasyMockSupportTest.testVerify":77,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":242,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":211,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":281,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":55,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":318,"org.easymock.tests.UsageVarargTest.varargCharAccepted":264,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":22,"org.easymock.tests2.UsageTest.openCallCountByLastCall":125,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":76,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":345,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":280,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":171,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":225,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":154,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":367,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":387,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":358,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":224,"org.easymock.tests.CapturesMatcherTest.test":379,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":208,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":168,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":328,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":357,"org.easymock.tests2.UsageTest.resumeIfFailure":130,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":378,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":176,"org.easymock.tests2.StubTest.stubWithReturnValue":79,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":386,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":104,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":200,"org.easymock.tests2.SerializationTest.testAllMockedMethod":304,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":283,"org.easymock.samples.SupportTest.voteForRemovals":1,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":230,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":391,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":284,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":113,"org.easymock.tests.UsageExpectAndThrowTest.object":228,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":101,"org.easymock.tests2.DelegateToTest.testWrongClass":62,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":272,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":273,"org.easymock.tests.UsageStrictMockTest.range":164,"org.easymock.samples.ConstructorCalledMockTest.testTax":298,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":72,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":305,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":347,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":229,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":321,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":295,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":137,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":135,"org.easymock.tests2.CaptureTest.testCaptureNone":39,"org.easymock.tests.UsageUnorderedTest.message":238,"org.easymock.tests.UsageVerifyTest.twoReturns":142,"org.easymock.tests.UsageVarargTest.varargByteAccepted":269,"org.easymock.tests2.ThreadingTest.testThreadSafe":11,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":187,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":172,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":301,"org.easymock.tests2.CaptureTest.testCapture_2617107":33,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":374,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":256,"org.easymock.tests2.UsageConstraintsTest.any":91,"org.easymock.tests2.StubTest.stub":78,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":170,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":175,"org.easymock.tests.UsageExpectAndThrowTest.longType":221,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":343,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":335,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":24,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":53,"org.easymock.tests2.SerializationTest.testClass":303,"org.easymock.tests.LimitationsTest.mockNativeMethod":239,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":388,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":210,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":362,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":27,"org.easymock.tests2.NameTest.nameForMocksControl":111,"org.easymock.tests2.MockedExceptionTest.testMockedException":50,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":363,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":294,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":222,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":340,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":45,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":322,"org.easymock.tests.MockingTest.testNicePartialClassMocking":339,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":314,"org.easymock.tests2.CaptureTest.testCaptureLast":38,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":360,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":150,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":88,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":310,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":102,"org.easymock.tests.MockingTest.testTwoMocks":279,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":191,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":226,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":128,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":106,"org.easymock.tests.UsageStrictMockTest.differentMethods":165,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":334,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":364,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":369,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":13,"org.easymock.tests2.MockBuilderTest.testCreateMockString":324,"org.easymock.tests.UsageExpectAndThrowTest.floatType":220,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":97,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":115,"org.easymock.tests.UsageVerifyTest.twoThrows":141,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":327,"org.easymock.samples.ExampleTest.voteAgainstRemoval":5,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":133,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":317,"org.easymock.tests2.UsageConstraintsTest.testNotNull":105,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":158,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":49,"org.easymock.tests2.UsageTest.defaultResetToNice":127,"org.easymock.samples.ExampleTest.voteAgainstRemovals":2,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":206,"org.easymock.tests.UsageVarargTest.differentLength":266,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":361,"org.easymock.tests2.CallbackTest.callback":29,"org.easymock.tests.UsageTest.openCallCountByLastCall":293,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":80,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":255,"org.easymock.tests.UsageCallCountTest.tooFewCalls":185,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":308,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":139,"org.easymock.tests.UsageThrowableTest.throwCheckedException":155,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":246,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":309,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":17,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":307,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":336,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":30,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":117,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":384,"org.easymock.tests2.NameTest.nameForNiceMock":110,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":15,"org.easymock.tests2.DependencyTest.testInterfaceMocking":18,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":383,"org.easymock.samples.ExampleTest.addDocument":6,"org.easymock.tests2.DelegateToTest.testStubDelegate":61,"org.easymock.tests2.AnswerTest.stubAnswer":116,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":162,"org.easymock.tests.UsageVarargTest.varargLongAccepted":268,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":166,"org.easymock.tests.UsageExpectAndReturnTest.floatType":193,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":209,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":20,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":299,"org.easymock.tests.UsageThrowableTest.noUpperLimit":152,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":99,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":215,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":81,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":36,"org.easymock.tests2.SerializationTest.test":28,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":344,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":389,"org.easymock.tests2.UsageConstraintsTest.testSame":86,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":192,"org.easymock.samples.SupportTest.addDocument":0,"org.easymock.tests.GenericTest.testPackageScope":330,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":243,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":372,"org.easymock.tests2.NameTest.nameForMock":108,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":203,"org.easymock.tests2.UsageStrictMockTest.differentMethods":26,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":195,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":232,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":288,"org.easymock.tests2.MockedExceptionTest.testRealException":52,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":182,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":23,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":254,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":337,"org.easymock.tests2.NameTest.nameForStrictMock":109,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":47,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":346,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":313,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":100,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":352,"org.easymock.tests2.UsageStrictMockTest.range":25,"org.easymock.tests2.UsageConstraintsTest.lessThan":107,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":370,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":66,"org.easymock.tests2.CaptureTest.testCaptureRightOne":41,"org.easymock.tests2.UsageConstraintsTest.testOr":87,"org.easymock.tests.UsageRangeTest.combination":285,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":311,"org.easymock.tests.UsageTest.wrongArguments":292,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":341,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":196,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":204,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":390,"org.easymock.tests.UsageVarargTest.varargShortAccepted":267,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":188,"org.easymock.tests2.UsageConstraintsTest.cmpTo":92,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":114,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":126,"org.easymock.tests2.CaptureTest.testCaptureFromStub":42,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":332,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":377,"org.easymock.tests.UsageTest.unexpectedCallWithArray":291,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":161,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":186,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":205,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":163,"org.easymock.tests2.UsageConstraintsTest.constraints":82,"org.easymock.samples.ExampleTest.addAndChangeDocument":8,"org.easymock.tests.UsageStrictMockTest.testVerify":167,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":10,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":160,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":249,"org.easymock.tests2.CompareToTest.testGreateThan":359,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":37,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":145,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":197,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":146,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":216,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":71,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":262}}]

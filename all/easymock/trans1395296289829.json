[{"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[13,14],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[15,16,17,18],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:435","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:79","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","type":"CtForEachImpl"},"failures":[19],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"methods":"methods","list":"candidateMethods"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"failures":[20,21,22,23,24,25],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:171","sourceCode":"net.sf.cglib.proxy.Enhancer.setCallbackType(org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.getClass())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[26,27,28,29,30,31,32,33,34,35,36],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:44","failures":[37,38,39,40,41,42,43,44,45,46,47,48,15,16,17,49,50,51,52,0,53,54,55,56,57,58,59,60,61,62,63,64,1,65,66,67,68,69,2,3,70,71,72,73,4,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,26,151,27,152,153,154,155,156,157,158,28,159,160,161,162,163,164,165,166,167,168,169,170,23,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,29,30,186,187,31,188,32,33,189,34,190,191,192,193,194,195,196,197,198,35,199,200,201,202,36,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,5,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,24,25,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,6,301,302,303,7,8,304,305,9,13,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,19,456,457,458,459,460,461,462,463,464,10,465,11,466,467,468,469,470,471,472,473,474,475,476,477,14,478,479,480,481,482,483,484,485,486,487,488,489,490,491,12,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511],"status":-1,"binaryOperator":"(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[453],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:946","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:37","sourceCode":"return java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[193],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"expected","actual":"expected","this":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[42,15,16,17,49,50,51,52,0,55,56,57,60,61,62,64,1,65,66,67,68,69,2,3,70,71,72,73,4,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,101,103,108,111,121,127,135,136,137,138,141,142,143,144,147,148,149,26,151,27,152,153,154,155,156,157,158,28,159,160,161,162,163,164,165,166,167,168,170,172,173,174,175,184,185,29,30,187,31,188,32,33,189,190,191,192,193,194,195,196,197,198,35,199,200,201,202,36,203,204,205,206,207,208,214,222,223,224,226,227,229,230,231,232,233,234,5,235,236,237,238,239,240,241,242,243,244,245,246,247,249,250,24,25,251,252,253,257,258,259,260,261,262,263,264,265,267,268,269,270,271,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,6,301,302,303,7,8,304,305,9,332,333,334,335,336,337,338,339,340,341,342,343,344,367,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,392,393,394,395,396,397,398,399,400,401,435,436,437,438,439,440,441,442,443,445,446,447,448,449,450,451,452,454,455,10,465,11,466,467,468,469,470,471,473,474,477,480,481,482,483,484,485,487,488,512,512,489,490,491,12,492,493,494,495,500,501,503],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"position":"org.easymock.internal.matchers.CompareTo:49","failures":[513,514,515,516,517],"status":-1,"binaryOperator":"((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:70","failures":[42,15,16,17,49,50,51,52,0,53,54,55,56,57,60,61,62,64,150,26,151,27,152,153,154,155,156,157,158,28,159,160,161,170,184,185,29,30,187,31,188,32,33,189,34,190,191,192,193,194,195,196,197,198,35,199,200,201,202,36,203,204,232,5,257,258,267,268,269,270,271,339,340,341,342,343,344,400,401,439,452,491,12],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[26,151,27,152,28,159,29,30,187,31,188,32,33,189,34,190,35,199,36,203],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:89","sourceCode":"return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object)","type":"CtReturnImpl"},"failures":[42,43,1,66,67,68,69,71,72,73,4,81,83,85,86,88,89,93,95,96,100,101,131,132,133,134,137,138,139,143,144,147,148,149,163,172,175,177,29,196,214,215,233,5,235,236,237,238,272,275,276,277,278,279,6,301,302,303,304,305,9,330,332,333,336,337,338,344,352,389,390,430,433,434,447,459,460,461,10,465,11,472,475,476,477,485,489,491,12,492,493,494,495],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"proxy"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:184","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[140],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[518,519,520],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:131","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","type":"CtThrowImpl"},"failures":[169],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1518","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(float))","type":"CtInvocationImpl"},"failures":[30,33,35],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[176,230,356],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:207","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:986","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[200],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockStatement:42","sourceCode":"org.easymock.EasyMockSupport.org.easymock.EasyMockSupport.injectMocks(java.lang.Object)","type":"CtInvocationImpl"},"failures":[42,214,241,250],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:144","sourceCode":"java.io.DataOutputStream.writeLong(java.lang.Long.longValue())","type":"CtInvocationImpl"},"failures":[349,521,522],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[37,38,39,40,41,42,43,44,45,46,47,48,15,16,17,49,50,51,52,0,53,54,55,56,57,60,61,62,63,64,1,65,66,67,68,69,2,3,70,71,72,73,4,74,77,78,79,80,81,82,84,85,87,89,90,91,92,93,96,97,99,100,103,104,105,108,110,111,113,114,117,118,119,120,121,123,126,127,128,129,130,135,136,138,140,141,142,143,146,147,150,26,151,27,152,153,154,155,156,157,158,28,159,160,161,162,163,164,165,166,167,168,170,23,171,172,173,174,175,176,184,185,29,30,186,187,31,188,32,33,189,34,190,191,192,193,194,195,196,197,198,35,199,200,201,202,36,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,229,230,231,232,233,234,5,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,24,24,25,25,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,275,277,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,6,301,302,303,7,8,304,305,9,13,306,307,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,19,456,457,458,459,460,461,462,463,464,10,465,11,466,467,468,469,470,471,472,473,474,475,476,477,14,478,479,480,481,482,483,484,485,486,487,488,489,490,491,12,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511],"status":-1,"binaryOperator":"(java.lang.String != null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:593","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:351","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:893","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[1,67,68,69,71,72,73,4,81,85,86,89,93,138,147,148,149,163,173,175,29,196,233,235,236,237,6,302,303,304,305,9,336,337,338,344,447,465,11,523,524,525,526,485,489,491,492,493,494],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:69","failures":[15,16,17,18],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:52","sourceCode":"return (int) == (int)","type":"CtReturnImpl"},"failures":[236,237,10,493,494,508,509],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[37,38,39,40,41,42,43,44,45,46,47,48,15,16,17,49,50,51,52,0,53,54,55,56,57,58,59,60,61,62,63,64,1,65,66,67,68,69,2,3,70,71,72,73,4,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,101,103,104,527,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,20,138,139,528,140,141,142,143,529,144,146,147,148,22,149,150,26,151,27,152,153,154,155,156,157,158,28,159,160,161,162,163,164,165,166,167,168,169,170,23,171,172,173,174,175,176,177,184,185,29,30,186,187,31,188,32,33,189,34,190,191,192,193,194,195,196,197,198,35,199,200,201,202,36,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,229,230,231,232,233,234,5,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,24,24,25,25,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,6,301,302,303,7,8,304,305,9,13,306,307,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,530,345,346,347,348,349,350,531,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,19,456,457,458,459,460,461,462,463,464,10,465,11,466,467,468,469,470,471,472,473,474,475,476,477,14,478,479,480,481,482,483,484,485,486,487,488,489,490,491,12,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[221,412],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"delegateTo"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[15,16,17,18],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"method","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.EasyMock:773","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"failures":[15,16,17,0,55,56,57,60,62,64,1,65,66,67,68,69,2,3,71,72,73,4,93,95,96,100,101,103,135,136,141,26,151,27,152,153,154,155,156,157,158,28,159,160,161,162,163,164,165,166,167,170,174,184,185,29,30,187,31,188,32,33,189,190,191,192,193,194,195,196,197,198,35,199,200,201,202,36,203,204,205,206,207,208,222,223,224,226,227,229,230,231,232,234,5,235,236,237,238,242,243,244,245,246,247,249,257,258,259,260,261,267,268,269,270,271,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,6,301,303,7,8,304,305,9,332,333,334,335,337,338,339,340,341,342,343,344,357,367,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,390,392,393,394,395,396,397,398,399,400,401,435,436,437,438,439,440,441,442,443,445,446,448,449,450,451,452,454,455,10,465,11,466,467,468,469,470,471,473,474,476,485,487,488,490,491,12,492,493,494,495,500,501,503],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Any:36","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:189","sourceCode":"return this.boolean","type":"CtReturnImpl"},"failures":[228],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1862","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Same(T))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[65,66,67,69,71,72,80,82,86,89,94,532,533,534,535,536,537,538,539,540,541,542,163,164,174,175,30,197,234,5,235,236,237,238,239,301,302,303,7,304,305,13,344,345,389,390,392,448,10,465,11,472,473,474,475,476,477,543,544,545,546,547,548,526,485,490,491,12,493,494,495,496],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:67","sourceCode":"return !(java.util.List<T>.isEmpty())","type":"CtReturnImpl"},"failures":[154,155,156,158,549,161],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[67,71,72,236,302,303,304,305,344,465,11,477,526,491,493],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:120","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"cls":"searchType","type":"searchType"}},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[42,15,16,17,0,53,54,55,56,57,60,61,62,64,1,65,66,67,68,69,2,3,70,71,72,73,4,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,101,103,108,111,121,127,131,132,133,134,135,136,137,138,141,143,144,148,26,151,27,152,153,154,155,156,157,158,28,159,160,161,162,163,164,165,166,167,168,170,172,173,174,175,184,185,29,30,187,31,188,32,33,189,34,190,191,192,193,194,195,196,197,198,35,199,200,201,202,36,203,204,205,206,207,208,214,221,222,223,224,225,226,227,229,230,231,232,233,234,5,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,24,24,25,25,251,252,253,254,255,256,257,258,259,260,261,262,266,267,268,269,270,271,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,6,301,302,303,7,8,304,305,9,13,306,307,330,332,333,334,335,337,338,339,340,341,342,343,344,345,367,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,392,393,394,395,396,397,398,399,400,401,418,424,427,435,436,437,438,439,440,441,442,443,445,446,447,448,449,450,451,452,454,455,19,457,10,465,11,466,467,468,469,470,471,472,473,474,475,476,14,478,479,485,486,487,488,489,490,491,12,492,493,494,495,496,499,500,501,503,507,508,509,510,511],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[533,540,302,543,545,491],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":30,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":6,"org.easymock.tests2.UsageTest.argumentsOrdered":72,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":90,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":215,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":412,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":69,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":241,"org.easymock.tests2.DelegateToTest.testReturnException":222,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":436,"org.easymock.tests.MockingTest.testPartialClassMocking":500,"org.easymock.tests.MockClassControlTest.testToString":459,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":130,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":427,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":421,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":177,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":115,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":111,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":369,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":61,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":329,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":189,"org.easymock.tests2.UsageTest.wrongArguments":67,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":267,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":48,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":264,"org.easymock.samples.ExampleTest.answerVsDelegate":243,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":277,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":505,"org.easymock.tests2.UsageConstraintsTest.testNull":31,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":165,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":464,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":89,"org.easymock.tests2.CaptureTest.testPrimitive":152,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":271,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":388,"org.easymock.tests.UsageTest.moreThanOneArgument":301,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":164,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":468,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":507,"org.easymock.tests.UsageTest.argumentsOrdered":305,"org.easymock.tests.UsageVarargTest.varargIntAccepted":443,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":541,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":417,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":339,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":137,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":76,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":219,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":142,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":404,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":343,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":313,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":536,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":42,"org.easymock.tests.ReplayStateInvalidUsageTest.times":361,"org.easymock.tests2.DependencyTest.testClassMocking":58,"org.easymock.tests2.AnswerTest.answer":0,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":34,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":419,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":52,"org.easymock.tests2.CaptureTest.testAnd":26,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":274,"org.easymock.tests2.UsageTest.strictResetToDefault":65,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":528,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":172,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":467,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":487,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":84,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":511,"org.easymock.tests2.DelegateToTest.testDelegate":226,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":312,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":384,"org.easymock.tests.LimitationsTest.mockFinalMethod":368,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":439,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":484,"org.easymock.tests2.DependencyTest.testClassMockingSupport":59,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":389,"org.easymock.tests2.CaptureTest.testCapture1_2446744":153,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":169,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":382,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":50,"org.easymock.tests.UsageThrowableTest.throwError":392,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":355,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":276,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":524,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":220,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":470,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":129,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":316,"org.easymock.samples.PartialClassMockTest.testGetArea":251,"org.easymock.tests.MockingTest.testInterfaceMocking":502,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":356,"org.easymock.tests2.CompareToTest.testLessOrEqual":517,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":340,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":255,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":434,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":116,"org.easymock.tests2.UsageTest.niceToStrict":68,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":370,"org.easymock.tests2.ThreadingTest.testChangeDefault":228,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":520,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":402,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":141,"org.easymock.tests2.MockBuilderTest.testCreateMock":147,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":124,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":45,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":533,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":378,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":85,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":273,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":479,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":330,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":262,"org.easymock.tests.UsageOverloadedMethodTest.overloading":260,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":126,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":120,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":474,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":194,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":259,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":291,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":521,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":193,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":158,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":444,"org.easymock.tests.MockClassControlTest.testEquals":463,"org.easymock.tests2.EasyMockSupportClassTest.testAll":108,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":455,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":538,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":386,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":482,"org.easymock.tests2.CaptureTest.testCaptureAll":151,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":51,"org.easymock.tests.MockNameTest.defaultName":352,"org.easymock.tests2.UsageConstraintsTest.testMatches":195,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":469,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":353,"org.easymock.samples.ExampleTest.voteForRemovals":247,"org.easymock.tests.UsageVarargTest.allKinds":452,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":10,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":483,"org.easymock.samples.BasicClassMockTest.testPrintContent":253,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":398,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":233,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":440,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":216,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":225,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":531,"org.easymock.tests2.UsageConstraintsTest.greaterThan":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":109,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":486,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":175,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":317,"org.easymock.samples.ExampleTest.voteForRemoval":244,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":351,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":176,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":229,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":278,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":168,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":309,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":1,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":300,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":146,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":409,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":82,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":394,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":106,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":435,"org.easymock.tests2.CaptureTest.testCaptureFirst":161,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":221,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":408,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":83,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":4,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":477,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":287,"org.easymock.tests2.CaptureTest.testCapture2_2446744":160,"org.easymock.tests2.UsageTest.moreThanOneArgument":66,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":231,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":420,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":148,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":451,"org.easymock.tests.GenericTest.testBridgedEquals":456,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":337,"org.easymock.tests.UsageExpectAndReturnTest.longType":283,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":480,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":80,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":387,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":201,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":266,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":385,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":466,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":306,"org.easymock.tests.UsageCallCountTest.tooManyCalls":338,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":544,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":332,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":125,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":288,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":47,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":374,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":397,"org.easymock.tests.MockingTest.testNiceClassMocking":506,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":95,"org.easymock.tests.MockingTest.testClassMocking":498,"org.easymock.tests2.UsageConstraintsTest.testContains":192,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":331,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":207,"org.easymock.tests2.UsageConstraintsTest.testFind":187,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":261,"org.easymock.tests.MockTypeTest.fromEasyMockClass":275,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":489,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":64,"org.easymock.tests.UsageExpectAndReturnTest.object":290,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":170,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":46,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":88,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":446,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":432,"org.easymock.tests.UsageTest.exactCallCountByLastCall":9,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":257,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":407,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":508,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":426,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":548,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":104,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":441,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":296,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":473,"org.easymock.tests.MockClassControlTest.testHashCode":462,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":210,"org.easymock.tests2.EasyMockSupportTest.testVerify":92,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":118,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":535,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":509,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":478,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":471,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":525,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":49,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":150,"org.easymock.tests.UsageVarargTest.varargCharAccepted":445,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":530,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":234,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":425,"org.easymock.tests2.UsageTest.openCallCountByLastCall":2,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":518,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":91,"org.easymock.tests.DefaultClassInstantiatorTest.object":345,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":14,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":430,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":526,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":119,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":376,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":395,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":40,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":209,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":461,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":173,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":315,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":375,"org.easymock.tests.CapturesMatcherTest.test":512,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":297,"org.easymock.tests.ReplayStateInvalidCallsTest.times":321,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":13,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":322,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":537,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":460,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":127,"org.easymock.tests2.UsageTest.resumeIfFailure":73,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":272,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":75,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":438,"org.easymock.tests2.StubTest.stubWithReturnValue":136,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":529,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":202,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":289,"org.easymock.tests2.SerializationTest.testAllMockedMethod":17,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":418,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":540,"org.easymock.samples.SupportTest.voteForRemovals":240,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":453,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":212,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":381,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":18,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":424,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":53,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":428,"org.easymock.tests.UsageExpectAndThrowTest.object":379,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":199,"org.easymock.tests2.DelegateToTest.testWrongClass":224,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":400,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":319,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":401,"org.easymock.tests.UsageStrictMockTest.range":493,"org.easymock.samples.ConstructorCalledMockTest.testTax":24,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":78,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":87,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":94,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":380,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":105,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":304,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":363,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":263,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":543,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":311,"org.easymock.tests2.CaptureTest.testCaptureNone":157,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":256,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":179,"org.easymock.tests.UsageUnorderedTest.message":344,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":523,"org.easymock.tests.UsageVerifyTest.twoReturns":11,"org.easymock.tests.UsageVarargTest.varargByteAccepted":450,"org.easymock.tests2.ThreadingTest.testThreadSafe":227,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":122,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":335,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":433,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":252,"org.easymock.tests2.CaptureTest.testCapture_2617107":27,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":542,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":391,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":422,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":270,"org.easymock.tests2.UsageConstraintsTest.any":190,"org.easymock.tests2.StubTest.stub":135,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":360,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":307,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":437,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":423,"org.easymock.tests.UsageExpectAndThrowTest.longType":372,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":349,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":359,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":235,"org.easymock.tests2.SerializationTest.testClass":15,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":214,"org.easymock.tests.LimitationsTest.mockNativeMethod":367,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":19,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":299,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":39,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":327,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":238,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":180,"org.easymock.tests2.NameTest.nameForMocksControl":134,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":41,"org.easymock.tests2.MockedExceptionTest.testMockedException":206,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":110,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":8,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":503,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":63,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":373,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":162,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":144,"org.easymock.tests.MockingTest.testNicePartialClassMocking":501,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":167,"org.easymock.tests2.CompareToTest.testCompareEqual":515,"org.easymock.tests2.CaptureTest.testCaptureLast":156,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":37,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":390,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":101,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":33,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":326,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":200,"org.easymock.tests.MockingTest.testTwoMocks":499,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":323,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":102,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":280,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":377,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":71,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":203,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":183,"org.easymock.samples.ExampleTest.removeNonExistingDocument":248,"org.easymock.tests.UsageStrictMockTest.differentMethods":494,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":44,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":357,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":211,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":182,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":347,"org.easymock.tests2.ConstraintsToStringTest.andToString":539,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":230,"org.easymock.tests2.MockBuilderTest.testCreateMockString":149,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":457,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":112,"org.easymock.tests.UsageExpectAndThrowTest.floatType":371,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":196,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":107,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":55,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":527,"org.easymock.tests.UsageVerifyTest.twoThrows":465,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":472,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":121,"org.easymock.samples.ExampleTest.voteAgainstRemoval":245,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":413,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":254,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":174,"org.easymock.tests.LimitationsTest.privateConstructor":366,"org.easymock.tests2.UsageConstraintsTest.testNotNull":36,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":399,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":205,"org.easymock.tests2.UsageTest.defaultResetToNice":70,"org.easymock.samples.ExampleTest.voteAgainstRemovals":242,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":414,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":295,"org.easymock.tests.UsageVarargTest.differentLength":447,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":38,"org.easymock.tests2.CallbackTest.callback":93,"org.easymock.tests2.UsageConstraintsTest.equals":186,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":546,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":23,"org.easymock.tests.UsageTest.openCallCountByLastCall":7,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":184,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":269,"org.easymock.tests.UsageCallCountTest.tooFewCalls":333,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":97,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":265,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":181,"org.easymock.tests.UsageThrowableTest.throwCheckedException":396,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":545,"org.easymock.tests.MockingTest.testStrictClassMocking":497,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":100,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":258,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":96,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":43,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":362,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":99,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":57,"org.easymock.tests2.CompareToTest.testGreateOrEqual":516,"org.easymock.tests.ObjectMethodsTest.testHashCode":431,"org.easymock.tests2.NameTest.nameForNiceMock":133,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":232,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":325,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":320,"org.easymock.tests2.DependencyTest.testInterfaceMocking":60,"org.easymock.samples.ExampleTest.addDocument":246,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":123,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":128,"org.easymock.tests2.DelegateToTest.testStubDelegate":223,"org.easymock.tests2.AnswerTest.stubAnswer":56,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":12,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":145,"org.easymock.tests.UsageVarargTest.varargLongAccepted":449,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":495,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":411,"org.easymock.tests.UsageExpectAndReturnTest.floatType":282,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":298,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":103,"org.easymock.tests2.ConstraintsToStringTest.orToString":532,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":25,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":475,"org.easymock.tests.UsageThrowableTest.noUpperLimit":393,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":198,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":218,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":185,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":74,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":154,"org.easymock.tests2.SerializationTest.test":16,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":522,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":346,"org.easymock.tests2.UsageConstraintsTest.testSame":188,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":281,"org.easymock.samples.SupportTest.addDocument":239,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":98,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":310,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":358,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":113,"org.easymock.tests.GenericTest.testPackageScope":454,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":510,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":406,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":217,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":504,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":308,"org.easymock.tests2.NameTest.nameForMock":131,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":292,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":22,"org.easymock.tests2.UsageStrictMockTest.differentMethods":237,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":171,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":284,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":383,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":429,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":488,"org.easymock.tests2.MockedExceptionTest.testRealException":208,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":279,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":416,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":79,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":547,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":415,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":5,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":268,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":364,"org.easymock.tests2.NameTest.nameForStrictMock":132,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":140,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":519,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":62,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":166,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":77,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":35,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":348,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":138,"org.easymock.tests2.UsageStrictMockTest.range":236,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":314,"org.easymock.tests2.UsageConstraintsTest.lessThan":204,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":213,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":410,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":81,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":117,"org.easymock.tests2.CaptureTest.testCaptureRightOne":28,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":178,"org.easymock.tests2.UsageConstraintsTest.testOr":32,"org.easymock.tests.UsageRangeTest.combination":485,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":163,"org.easymock.tests.UsageTest.wrongArguments":303,"org.easymock.tests2.MockBuilderTest.testWithConstructor":20,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":114,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":458,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":285,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":403,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":293,"org.easymock.tests.UsageVarargTest.varargShortAccepted":448,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":350,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":336,"org.easymock.tests2.UsageConstraintsTest.cmpTo":191,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":328,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":54,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":318,"org.easymock.tests2.CompareToTest.testLessThan":513,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":405,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":3,"org.easymock.tests2.CaptureTest.testCaptureFromStub":159,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":354,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":139,"org.easymock.tests.UsageTest.unexpectedCallWithArray":302,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":324,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":491,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":334,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":21,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":294,"org.easymock.tests2.CaptureTest.testCapture":549,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":492,"org.easymock.tests2.UsageConstraintsTest.constraints":29,"org.easymock.samples.ExampleTest.addAndChangeDocument":249,"org.easymock.tests2.ConstraintsToStringTest.notToString":534,"org.easymock.tests.UsageStrictMockTest.testVerify":496,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":250,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":490,"org.easymock.tests2.CompareToTest.testGreateThan":514,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":481,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":155,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":341,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":286,"org.easymock.tests.LimitationsTest.abstractClass":365,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":476,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":342,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":442,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":86}}]

[{"transplantationPoint":{"position":"org.easymock.internal.matchers.Not:40","sourceCode":"java.lang.StringBuffer.append(\"not(\")","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:176","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.InstanceOf:36","sourceCode":"return (java.lang.Object != null) && (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))","type":"CtReturnImpl"},"failures":[1,2,3],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:217","sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[4,5,6,7],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,2,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,3,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[162,163,164,10,165,11,12,166,167,168,25,27,28,29,31,32,33,169,34,170,171,35,172,173,36,64,65,66,67,83,84,85,86,88,89,90,174,174,175,175,92,102,103,176,177,178,179,180,181,112,113,114,182,183,128,129,130,147,184,185,186],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1064","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Short>(short))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:155","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[29,173,187,188],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:126","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:127","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1190","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[189],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:270","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[190,4,5,6],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[191,192,134,193,194,195],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"failures":[196,197],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1802","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.StartsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[198],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"prefix"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:109","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[25,26,27],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"toStringMethod","method":"toStringMethod"}},{"position":"org.easymock.internal.MockBuilder:80","failures":[162,196,163,164,10,165,11,12,166,167,197,168,25,169,92,182,185,186],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2123","sourceCode":"final org.easymock.internal.Invocation org.easymock.internal.Invocation = org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:114","sourceCode":"return this","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:256","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"returnValue"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:76","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[199],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"m","method":"m"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[200,201,202],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[1,2,72,3,80],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[191,192,134,193,194,195],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","genericType":"genericType","type":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"failures":[203],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"result"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[59],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1190","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[2,54],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:43","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[57],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:52","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double.valueOf(0))","type":"CtInvocationImpl"},"failures":[204,205,206,207,208,119,209,210,211,141,212,213,214],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[215,216,217,218,219,25,36,220,201,221,222,223,64,224,225,65,226,227,228,229,230,231,232,233,234,66,235,236,237,238,239,67,240,241,242,243,244,245,246,247,248,202,85,89,249,174,175],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":53,"org.easymock.tests2.UsageTest.argumentsOrdered":49,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":22,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":47,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":217,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":91,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":63,"org.easymock.tests2.SerializationTest.testAllMockedMethod":27,"org.easymock.tests2.DelegateToTest.testReturnException":38,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":189,"org.easymock.tests.MockingTest.testPartialClassMocking":128,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":192,"org.easymock.samples.SupportTest.voteForRemovals":95,"org.easymock.tests.MockClassControlTest.testToString":178,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":187,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":173,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":229,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":206,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":65,"org.easymock.tests.UsageExpectAndThrowTest.object":118,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":69,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":60,"org.easymock.tests2.DelegateToTest.testWrongClass":39,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":214,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":54,"org.easymock.tests2.UsageTest.wrongArguments":45,"org.easymock.samples.ConstructorCalledMockTest.testTax":174,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":213,"org.easymock.samples.ExampleTest.answerVsDelegate":97,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":83,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":186,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":245,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":31,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":21,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":11,"org.easymock.tests2.CaptureTest.testPrimitive":74,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":221,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":143,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":30,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":194,"org.easymock.tests2.CaptureTest.testCaptureNone":78,"org.easymock.tests.UsageVerifyTest.twoReturns":151,"org.easymock.tests.UsageVarargTest.varargByteAccepted":159,"org.easymock.tests.UsageTest.argumentsOrdered":144,"org.easymock.tests.UsageVarargTest.varargIntAccepted":154,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":235,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":105,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":102,"org.easymock.tests2.CaptureTest.testCapture_2617107":3,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":162,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":146,"org.easymock.tests2.UsageConstraintsTest.any":55,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":165,"org.easymock.tests.UsageExpectAndThrowTest.longType":116,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":41,"org.easymock.tests2.SerializationTest.testClass":25,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":37,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":82,"org.easymock.tests.LimitationsTest.mockNativeMethod":147,"org.easymock.tests2.AnswerTest.answer":8,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":182,"org.easymock.tests2.CaptureTest.testAnd":72,"org.easymock.tests2.UsageTest.strictResetToDefault":44,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":216,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":42,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":225,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":17,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":130,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":28,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":12,"org.easymock.tests.MockingTest.testNicePartialClassMocking":129,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":119,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":33,"org.easymock.tests2.CaptureTest.testCaptureLast":77,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":132,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":89,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":2,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":61,"org.easymock.tests.MockingTest.testTwoMocks":183,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":249,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":209,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":208,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":48,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":198,"org.easymock.tests.UsageThrowableTest.throwError":120,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":131,"org.easymock.tests2.MockBuilderTest.testCreateMockString":168,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":176,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":226,"org.easymock.tests.UsageExpectAndThrowTest.floatType":115,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":58,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":223,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":9,"org.easymock.tests.UsageVerifyTest.twoThrows":150,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":242,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":241,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":66,"org.easymock.samples.PartialClassMockTest.testGetArea":92,"org.easymock.samples.ExampleTest.voteAgainstRemoval":99,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":35,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":230,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":207,"org.easymock.tests2.UsageTest.niceToStrict":46,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":184,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":243,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":127,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":202,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":10,"org.easymock.tests2.MockBuilderTest.testCreateMock":166,"org.easymock.samples.ExampleTest.voteAgainstRemovals":96,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":141,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":237,"org.easymock.tests2.UsageConstraintsTest.equals":203,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":191,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":18,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":52,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":6,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":246,"org.easymock.tests.UsageOverloadedMethodTest.overloading":149,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":239,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":234,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":110,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":86,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":148,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":57,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":79,"org.easymock.tests.UsageThrowableTest.throwCheckedException":124,"org.easymock.tests2.EasyMockSupportClassTest.testAll":64,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":114,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":195,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":204,"org.easymock.tests2.CaptureTest.testCaptureAll":73,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":88,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":85,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":87,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":205,"org.easymock.samples.ExampleTest.voteForRemovals":101,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":71,"org.easymock.tests.UsageVarargTest.allKinds":161,"org.easymock.tests2.DependencyTest.testInterfaceMocking":68,"org.easymock.samples.BasicClassMockTest.testPrintContent":103,"org.easymock.samples.ExampleTest.addDocument":100,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":236,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":240,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":126,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":224,"org.easymock.tests.UsageVarargTest.varargLongAccepted":158,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":172,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":136,"org.easymock.samples.ExampleTest.voteForRemoval":98,"org.easymock.tests.UsageExpectAndReturnTest.floatType":137,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":36,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":169,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":175,"org.easymock.tests.UsageThrowableTest.noUpperLimit":121,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":43,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":112,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":75,"org.easymock.tests2.SerializationTest.test":26,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":218,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":15,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":122,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":210,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":222,"org.easymock.samples.SupportTest.addDocument":94,"org.easymock.tests2.CaptureTest.testCaptureFirst":81,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":16,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":227,"org.easymock.tests.GenericTest.testPackageScope":113,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":70,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":167,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":160,"org.easymock.tests.GenericTest.testBridgedEquals":199,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":247,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":244,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":106,"org.easymock.tests2.NameTest.nameForMock":188,"org.easymock.tests.UsageExpectAndReturnTest.longType":138,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":13,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":197,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":62,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":219,"org.easymock.tests.UsageCallCountTest.tooManyCalls":107,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":238,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":211,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":117,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":125,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":84,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":196,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":90,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":7,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":201,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":32,"org.easymock.tests.UsageExpectAndReturnTest.object":140,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":59,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":34,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":163,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":20,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":156,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":248,"org.easymock.tests.UsageTest.exactCallCountByLastCall":145,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":14,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":231,"org.easymock.tests2.CaptureTest.testCaptureRightOne":80,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":220,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":29,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":152,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":109,"org.easymock.tests.UsageTest.wrongArguments":142,"org.easymock.tests2.MockBuilderTest.testWithConstructor":215,"org.easymock.tests.MockClassControlTest.testHashCode":181,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":228,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":177,"org.easymock.tests2.EasyMockSupportTest.testVerify":24,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":139,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":232,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":5,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":108,"org.easymock.tests.UsageVarargTest.varargShortAccepted":157,"org.easymock.tests2.UsageConstraintsTest.cmpTo":56,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":51,"org.easymock.tests.UsageVarargTest.varargCharAccepted":155,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":40,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":190,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":200,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":23,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":4,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":164,"org.easymock.tests.UsageTest.unexpectedCallWithArray":193,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":233,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":123,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":134,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":104,"org.easymock.tests2.UsageConstraintsTest.constraints":1,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":135,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":171,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":180,"org.easymock.tests2.ConstraintsToStringTest.notToString":0,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":93,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":67,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":133,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":179,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":76,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":185,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":111,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":19,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":153}}]

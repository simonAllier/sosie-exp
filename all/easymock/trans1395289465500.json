[{"position":"org.easymock.EasyMock:1205","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,7,8,9],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"proxy":"proxy"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[10,11,12,13,14,15],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:110","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[16,17,18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"equalsMethod","equalsMethod":"equalsMethod"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:357","sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:137","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:79","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:158","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[19],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"bridgeMethod"}},{"transplant":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[20,21,22,23,24],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,20,93,94,95,96,97,98,22,99,100,101,102,103,104,105,106,107,108,109,10,11,110,111,112,113,114,115,116,117,7,118,119,8,120,121,122,123,16,17,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,23,139,140,141,142,143,24,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,12,9,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:81","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[184],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:117","failures":[185,1,186,45,187,46,188,54,189,59,60,61,190,191,192,192,193,193,87,101,103,104,106,107,108,194,109,195,10,11,110,116,117,7,118,8,120,16,18,196,197,162,198,12,199,9,163,200,164,201,202,166,167,168,169,181,13,203],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.UnorderedBehavior:79","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:323","sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[204,205],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[113],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.EasyMock:613","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1092","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Contains(java.lang.String))","type":"CtInvocationImpl"},"failures":[23,24,147,154],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Range:68","sourceCode":"return \"at least \" + (this.int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:65","sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","type":"CtIfImpl"},"failures":[33,206,34,207,38,39,40,208,83,209,210,211,212,213,214,215,121,122,123,174,216,217,218],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"minimum":"maximum"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:124","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"hashCodeMethod"}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[16,219,220,181,221,222,223,224,225,226],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"failures":[227],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[144,149,160,228],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:438","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cls":"leafClass","type":"leafClass"}},{"position":"org.easymock.EasyMock:1397","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[229,205,230],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1725","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1647","sourceCode":"return null","type":"CtReturnImpl"},"failures":[148],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:223","failures":[231,194,232,196,199,167],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"failures":[233],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:69","sourceCode":"return java.lang.StringBuffer.toString()","type":"CtReturnImpl"},"failures":[206,34,207,39,208,234,235,236,209,210,211,122,216,217,218],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:63","sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","type":"CtThrowImpl"},"failures":[237,238,239,240,241,242,243,244,206,37,47,48,49,50,51,52,53,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,82,85,231,267,101,268,102,172,177],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","threadSafe":"shouldBeUsedInOneThread"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[269,113],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:98","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"result"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[270,271,272,273,274],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:46","sourceCode":"return java.lang.reflect.Field.getType().isAssignableFrom(org.easymock.internal.Injection.getMock().getClass())","type":"CtReturnImpl"},"failures":[275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:243","failures":[293,25,26,27,28,29,30,35,38,39,40,41,42,43,44,45,46,54,55,56,294,295,296,297,59,60,61,298,299,62,63,64,65,66,67,70,71,73,74,75,77,78,79,80,81,300,87,88,89,90,91,92,103,104,105,106,107,108,109,10,11,110,114,116,117,7,118,119,8,120,121,122,123,136,162,12,9,163,164,166,167,168,169,170,171,181],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[20,21,94,95,301,302,96,98,303,22,304,100],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"failures":[305],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[270,271,272,273,274],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":139,"org.easymock.tests2.UsageTest.argumentsOrdered":218,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":82,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":134,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":281,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":242,"org.easymock.tests2.StubTest.stubWithReturnValue":102,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":219,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":276,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":71,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":157,"org.easymock.tests2.SerializationTest.testAllMockedMethod":18,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":240,"org.easymock.tests.MockingTest.testPartialClassMocking":59,"org.easymock.samples.SupportTest.voteForRemovals":92,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":19,"org.easymock.tests.MockClassControlTest.testToString":2,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":293,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":257,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":232,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":245,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":167,"org.easymock.tests.UsageExpectAndThrowTest.object":255,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":155,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":171,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":222,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":55,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":56,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":144,"org.easymock.tests2.UsageTest.wrongArguments":216,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":30,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":292,"org.easymock.samples.ConstructorCalledMockTest.testTax":192,"org.easymock.tests.UsageStrictMockTest.range":39,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":131,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":1,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":116,"org.easymock.tests2.UsageConstraintsTest.testNull":141,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":256,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":106,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":9,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":133,"org.easymock.tests2.CaptureTest.testPrimitive":94,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":32,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":264,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":210,"org.easymock.tests.UsageTest.moreThanOneArgument":83,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":105,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":296,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":299,"org.easymock.tests2.CaptureTest.testCaptureNone":97,"org.easymock.tests.UsageUnorderedTest.message":208,"org.easymock.tests.UsageVerifyTest.twoReturns":34,"org.easymock.tests2.ThreadingTest.testThreadSafe":111,"org.easymock.tests.UsageTest.argumentsOrdered":211,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":190,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":233,"org.easymock.tests2.CaptureTest.testCapture_2617107":21,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":25,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":196,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":238,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":199,"org.easymock.tests2.UsageConstraintsTest.any":145,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":29,"org.easymock.tests.UsageExpectAndThrowTest.longType":248,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":241,"org.easymock.tests2.SerializationTest.testClass":16,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":161,"org.easymock.tests.LimitationsTest.mockNativeMethod":54,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":165,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":81,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":46,"org.easymock.tests2.AnswerTest.answer":182,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":287,"org.easymock.tests2.CaptureTest.testAnd":20,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":14,"org.easymock.tests2.UsageTest.strictResetToDefault":173,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":195,"org.easymock.tests2.NameTest.nameForMocksControl":215,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":288,"org.easymock.tests2.MockedExceptionTest.testMockedException":267,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":295,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":43,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":128,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":85,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":249,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":61,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":103,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":163,"org.easymock.tests.MockingTest.testNicePartialClassMocking":60,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":260,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":108,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":285,"org.easymock.tests2.CaptureTest.testCaptureLast":96,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":243,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":24,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":120,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":156,"org.easymock.tests.MockingTest.testTwoMocks":189,"org.easymock.tests2.CaptureTest.testCapture1_2446744":95,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":62,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":258,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":253,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":217,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":159,"org.easymock.tests.UsageThrowableTest.throwError":47,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":290,"org.easymock.tests.UsageStrictMockTest.differentMethods":40,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":279,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":271,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":113,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":284,"org.easymock.tests2.MockBuilderTest.testCreateMockString":202,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":5,"org.easymock.tests.UsageExpectAndThrowTest.floatType":247,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":151,"org.easymock.tests.UsageVerifyTest.twoThrows":206,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":168,"org.easymock.samples.PartialClassMockTest.testGetArea":87,"org.easymock.tests2.CompareToTest.testLessOrEqual":305,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":26,"org.easymock.samples.ExampleTest.voteAgainstRemoval":90,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":298,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":11,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":246,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":0,"org.easymock.tests2.UsageTest.niceToStrict":175,"org.easymock.tests2.UsageConstraintsTest.testNotNull":158,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":231,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":53,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":184,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":12,"org.easymock.tests2.MockBuilderTest.testCreateMock":200,"org.easymock.tests2.UsageTest.defaultResetToNice":178,"org.easymock.samples.ExampleTest.voteAgainstRemovals":88,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":77,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":286,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":291,"org.easymock.tests.UsageTest.openCallCountByLastCall":84,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":254,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":129,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":137,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":230,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":237,"org.easymock.tests.UsageOverloadedMethodTest.overloading":36,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":266,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":149,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":73,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":35,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":118,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":148,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":98,"org.easymock.tests.UsageThrowableTest.throwCheckedException":50,"org.easymock.tests2.EasyMockSupportClassTest.testAll":166,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":187,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":262,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":13,"org.easymock.tests2.CaptureTest.testCaptureAll":93,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":265,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":8,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":289,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":7,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":269,"org.easymock.tests2.UsageConstraintsTest.testMatches":150,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":119,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":297,"org.easymock.tests2.CompareToTest.testGreateOrEqual":228,"org.easymock.samples.ExampleTest.voteForRemovals":91,"org.easymock.tests2.NameTest.nameForNiceMock":214,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":115,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":33,"org.easymock.tests2.DependencyTest.testInterfaceMocking":170,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":224,"org.easymock.samples.BasicClassMockTest.testPrintContent":191,"org.easymock.tests2.DelegateToTest.testStubDelegate":136,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":52,"org.easymock.tests2.AnswerTest.stubAnswer":183,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":282,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":244,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":38,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":226,"org.easymock.tests2.UsageConstraintsTest.greaterThan":152,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":42,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":110,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":274,"org.easymock.samples.ExampleTest.voteForRemoval":89,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":112,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":80,"org.easymock.tests.UsageExpectAndReturnTest.floatType":64,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":194,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":181,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":193,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":153,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":138,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":172,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":186,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":6,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":301,"org.easymock.tests2.SerializationTest.test":17,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":220,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":270,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":126,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":48,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":63,"org.easymock.tests2.UsageConstraintsTest.testSame":142,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":239,"org.easymock.tests2.CaptureTest.testCaptureFirst":100,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":127,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":180,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":69,"org.easymock.tests.GenericTest.testPackageScope":45,"org.easymock.tests2.CaptureTest.testCapture2_2446744":99,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":114,"org.easymock.tests2.UsageTest.moreThanOneArgument":174,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":164,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":283,"org.easymock.tests2.NameTest.nameForMock":212,"org.easymock.tests.UsageExpectAndReturnTest.longType":65,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":124,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":263,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":201,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":74,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":300,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":261,"org.easymock.tests2.UsageStrictMockTest.differentMethods":123,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":294,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":204,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":66,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":259,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":44,"org.easymock.tests2.MockedExceptionTest.testRealException":268,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":70,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":234,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":250,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":121,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":51,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":31,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":117,"org.easymock.tests2.NameTest.nameForStrictMock":213,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":197,"org.easymock.tests2.UsageConstraintsTest.testContains":147,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":101,"org.easymock.tests2.UsageConstraintsTest.testFind":140,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":37,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":107,"org.easymock.tests.UsageExpectAndReturnTest.object":72,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":272,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":154,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":109,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":162,"org.easymock.tests2.UsageStrictMockTest.range":122,"org.easymock.tests2.UsageConstraintsTest.lessThan":160,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":132,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":223,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":280,"org.easymock.tests.UsageTest.exactCallCountByLastCall":86,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":57,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":225,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":125,"org.easymock.tests2.CaptureTest.testCaptureRightOne":22,"org.easymock.tests2.UsageConstraintsTest.testOr":143,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":221,"org.easymock.tests.UsageRangeTest.combination":41,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":78,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":104,"org.easymock.tests.UsageTest.wrongArguments":209,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":278,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":188,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":67,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":75,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":273,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":205,"org.easymock.tests2.UsageConstraintsTest.cmpTo":146,"org.easymock.tests2.CompareToTest.testLessThan":227,"org.easymock.tests2.UsageTest.openCallCountByLastCall":176,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":177,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":135,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":229,"org.easymock.tests2.CaptureTest.testCaptureFromStub":304,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":198,"org.easymock.tests.UsageTest.unexpectedCallWithArray":236,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":235,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":252,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":207,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":49,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":15,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":277,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":76,"org.easymock.tests2.CaptureTest.testCapture":303,"org.easymock.tests2.UsageConstraintsTest.constraints":23,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":4,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":10,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":251,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":79,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":275,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":3,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":169,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":302,"org.easymock.tests2.UsageTest.resumeIfFailure":179,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":203,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":27,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":68,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":185,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":58,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":28,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":130}}]

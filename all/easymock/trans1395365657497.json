[{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:46","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:257","sourceCode":"final net.sf.cglib.proxy.Enhancer net.sf.cglib.proxy.Enhancer = new net.sf.cglib.proxy.Enhancer() {\n    /** \n     * Filter all private constructors but do not check that there are\n     * some left\n     */\n@java.lang.SuppressWarnings(value = \"rawtypes\")\n    @java.lang.Override\n    protected void filterConstructors(final java.lang.Class sc, final java.util.List constructors) {\n        net.sf.cglib.core.CollectionUtils.net.sf.cglib.core.CollectionUtils.filter(java.util.List, new net.sf.cglib.core.VisibilityPredicate(java.lang.Class , true));\n    }\n}","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:233","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,2,3,4,5,6,7,8,8,9,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:65","sourceCode":"throw java.lang.Throwable","type":"CtThrowImpl"},"failures":[94,225,227,472,474],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:139","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[252,479,480],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:262","failures":[155,162,168,169,170,171,232,285,286,287,288,289,290,299,302,345,392,393,394,399,425,426,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,456,458,459,460,461,462,463,470,471,475],"status":-1,"binaryOperator":"java.lang.Throwable == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[237],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[28,30,31,32,33,34,53,69,102,113,115,127,131,132,135,155,157,158,159,160,164,165,167,481,482,483,484,485,486,487,488,489,490,491,230,256,258,259,260,261,262,263,298,299,300,303,304,492,493,494,495,496,497,498,394,395,396,397,400,401,402,409,455,473,476,477,478],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:108","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","value":"threadSafe"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:127","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[150,499,191],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[8,8,9,9,11,15,16,101,102,104,105,106,107,109,112,113,114,115,118,139,500,141,142,145,146,147,149,151,152,501,154,170,184,185,186,187,189,190,191,193,197,200,210,216,502,238,239,240,332,333,334,336,352,355,360,384,422],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:411","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[237],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"clazz"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:252","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[0,2,3,5,11,14,19,20,30,32,33,101,102,103,104,105,106,109,113,114,115,118,124,141,145,147,149,152,184,185,186,187,188,189,190,197,200,210,216,226,242,243,244,245,259,261,262,265,266,267,268,269,270,273,274,276,277,278,280,281,282,283,284,291,292,293,294,333,334,336,360,415,416,417,418,419,423,428,429],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2170","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[503,504,505],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:229","failures":[113,117,141,152,200],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.Capture:83","sourceCode":"throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())))","type":"CtThrowImpl"},"failures":[506],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1263","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:32","sourceCode":"new java.util.concurrent.locks.ReentrantLock()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[0,1,2,3,4,5,7,10,12,13,14,19,20,25,27,28,29,30,31,32,33,34,35,36,37,38,44,45,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,177,178,188,192,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,242,243,244,245,246,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,296,298,299,300,301,302,303,304,322,328,332,340,341,342,343,344,345,346,347,348,349,350,353,354,356,357,362,364,365,366,367,368,369,370,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:194","failures":[119,148,507,508,509,510,511],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:49","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[66],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:71","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocation:58","sourceCode":"return java.util.List<org.easymock.IArgumentMatcher>","type":"CtReturnImpl"},"failures":[25,27,30,51,52,53,54,56,57,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,109,124,258,259,289,301,302,414,415,416,417,418,419,423,424,425,426,427,428,429,455],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[391,469],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"failures":[512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:92","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:54","sourceCode":"try {\n    return java.lang.reflect.Constructor<?>.newInstance(java.lang.Object[]);\n} catch (final java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalArgumentException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException);\n}","type":"CtTryImpl"},"failures":[248,249,250,251,253,255],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:113","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"method"}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:72","sourceCode":"java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader())","type":"CtAssignmentImpl"},"failures":[191,192,193,534],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":54,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":394,"org.easymock.tests2.UsageTest.argumentsOrdered":165,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":136,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":178,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":316,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":160,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":12,"org.easymock.tests2.DelegateToTest.testReturnException":225,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":286,"org.easymock.tests.MockingTest.testPartialClassMocking":333,"org.easymock.tests.MockClassControlTest.testToString":385,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":219,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":296,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":117,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":325,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":204,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":435,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":200,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":20,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":533,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":507,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":61,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":423,"org.easymock.tests2.UsageTest.wrongArguments":158,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":50,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":235,"org.easymock.samples.ExampleTest.answerVsDelegate":1,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":355,"org.easymock.tests2.UsageConstraintsTest.testNull":57,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":338,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":104,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":390,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":135,"org.easymock.tests2.CaptureTest.testPrimitive":83,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":427,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":454,"org.easymock.tests.UsageTest.moreThanOneArgument":395,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":103,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":244,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":464,"org.easymock.tests.UsageTest.argumentsOrdered":401,"org.easymock.tests.UsageVarargTest.varargIntAccepted":405,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":490,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":321,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":415,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":511,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":139,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":182,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":146,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":308,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":419,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":517,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":485,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":44,"org.easymock.tests.ReplayStateInvalidUsageTest.times":379,"org.easymock.tests2.DependencyTest.testClassMocking":17,"org.easymock.tests2.AnswerTest.answer":94,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":62,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":323,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":38,"org.easymock.tests2.CaptureTest.testAnd":80,"org.easymock.tests2.UsageTest.strictResetToDefault":156,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":143,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":112,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":243,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":130,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":293,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":468,"org.easymock.tests2.DelegateToTest.testDelegate":229,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":516,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":450,"org.easymock.tests.LimitationsTest.mockFinalMethod":361,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":289,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":434,"org.easymock.tests2.DependencyTest.testClassMockingSupport":18,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":303,"org.easymock.tests2.CaptureTest.testCapture1_2446744":84,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":108,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":448,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":36,"org.easymock.tests.UsageThrowableTest.throwError":456,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":373,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":354,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":183,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":246,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":218,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":520,"org.easymock.samples.PartialClassMockTest.testGetArea":11,"org.easymock.tests.MockingTest.testInterfaceMocking":335,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":374,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":416,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":341,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":436,"org.easymock.tests2.UsageTest.niceToStrict":159,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":205,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":351,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":306,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":145,"org.easymock.tests2.MockBuilderTest.testCreateMock":151,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":213,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":47,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":482,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":444,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":131,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":471,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":362,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":233,"org.easymock.tests.UsageOverloadedMethodTest.overloading":344,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":209,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":215,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":475,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":67,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":276,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":343,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":479,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":66,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":89,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":406,"org.easymock.tests.MockClassControlTest.testEquals":389,"org.easymock.tests2.EasyMockSupportClassTest.testAll":197,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":239,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":487,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":452,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":432,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":37,"org.easymock.tests2.CaptureTest.testCaptureAll":81,"org.easymock.tests.MockNameTest.defaultName":421,"org.easymock.tests2.UsageConstraintsTest.testMatches":68,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":245,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":371,"org.easymock.samples.ExampleTest.voteForRemovals":5,"org.easymock.tests.UsageVarargTest.allKinds":414,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":298,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":433,"org.easymock.samples.BasicClassMockTest.testPrintContent":16,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":462,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":28,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":179,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":228,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":290,"org.easymock.tests2.UsageConstraintsTest.greaterThan":70,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":254,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":198,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":292,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":115,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":521,"org.easymock.samples.ExampleTest.voteForRemoval":2,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":255,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":122,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":116,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":356,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":107,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":513,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":422,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":155,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":150,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":313,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":128,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":458,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":195,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":285,"org.easymock.tests2.CaptureTest.testCaptureFirst":93,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":224,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":312,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":129,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":167,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":478,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":272,"org.easymock.tests2.UsageTest.moreThanOneArgument":157,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":124,"org.easymock.tests2.CaptureTest.testCapture2_2446744":92,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":152,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":324,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":413,"org.easymock.tests.GenericTest.testBridgedEquals":241,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":369,"org.easymock.tests.UsageExpectAndReturnTest.longType":268,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":430,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":126,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":501,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":453,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":420,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":75,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":451,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":392,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":242,"org.easymock.tests.UsageCallCountTest.tooManyCalls":370,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":493,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":364,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":214,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":273,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":49,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":440,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":461,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":185,"org.easymock.tests.MockingTest.testNiceClassMocking":339,"org.easymock.tests.MockingTest.testClassMocking":331,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":500,"org.easymock.tests2.UsageConstraintsTest.testContains":65,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":363,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":170,"org.easymock.tests2.UsageConstraintsTest.testFind":56,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":345,"org.easymock.tests.MockTypeTest.fromEasyMockClass":353,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":27,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":256,"org.easymock.tests.UsageExpectAndReturnTest.object":275,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":109,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":48,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":134,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":508,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":408,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":349,"org.easymock.tests.UsageTest.exactCallCountByLastCall":402,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":301,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":311,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":465,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":295,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":497,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":119,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":403,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":281,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":474,"org.easymock.tests.MockClassControlTest.testHashCode":388,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":173,"org.easymock.tests2.EasyMockSupportTest.testVerify":138,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":207,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":484,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":466,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":472,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":470,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":35,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":100,"org.easymock.tests.UsageVarargTest.varargCharAccepted":407,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":247,"org.easymock.tests2.CaptureTest.testCaptureMultiple":506,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":29,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":329,"org.easymock.tests2.UsageTest.openCallCountByLastCall":161,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":137,"org.easymock.tests.DefaultClassInstantiatorTest.object":248,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":469,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":347,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":498,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":442,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":208,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":459,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":42,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":172,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":519,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":387,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":113,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":441,"org.easymock.tests.ReplayStateInvalidCallsTest.times":525,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":282,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":391,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":526,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":486,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":386,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":216,"org.easymock.tests2.UsageTest.resumeIfFailure":166,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":352,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":288,"org.easymock.tests2.StubTest.stubWithReturnValue":232,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":148,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":76,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":274,"org.easymock.tests2.SerializationTest.testAllMockedMethod":193,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":322,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":499,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":489,"org.easymock.samples.SupportTest.voteForRemovals":14,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":237,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":175,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":447,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":534,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":328,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":95,"org.easymock.tests.UsageExpectAndThrowTest.object":445,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":297,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":73,"org.easymock.tests2.DelegateToTest.testWrongClass":227,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":523,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":428,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":429,"org.easymock.samples.ConstructorCalledMockTest.testTax":8,"org.easymock.tests.UsageStrictMockTest.range":261,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":23,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":133,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":184,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":446,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":147,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":400,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":194,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":381,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":234,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":492,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":515,"org.easymock.tests2.CaptureTest.testCaptureNone":88,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":342,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":503,"org.easymock.tests.UsageUnorderedTest.message":455,"org.easymock.tests.UsageVerifyTest.twoReturns":300,"org.easymock.tests.UsageVarargTest.varargByteAccepted":412,"org.easymock.tests2.ThreadingTest.testThreadSafe":121,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":211,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":367,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":15,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":350,"org.easymock.tests2.CaptureTest.testCapture_2617107":82,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":491,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":305,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":426,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":326,"org.easymock.tests2.UsageConstraintsTest.any":63,"org.easymock.tests2.StubTest.stub":231,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":378,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":393,"org.easymock.tests.UsageExpectAndThrowTest.longType":438,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":287,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":327,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":252,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":377,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":31,"org.easymock.tests2.SerializationTest.testClass":191,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":177,"org.easymock.tests.LimitationsTest.mockNativeMethod":360,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":240,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":284,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":41,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":531,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":34,"org.easymock.tests2.NameTest.nameForMocksControl":223,"org.easymock.tests2.MockedExceptionTest.testMockedException":169,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":43,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":199,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":399,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":439,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":26,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":336,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":101,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":149,"org.easymock.tests.MockingTest.testNicePartialClassMocking":334,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":106,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":39,"org.easymock.tests2.CaptureTest.testCaptureLast":87,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":304,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":530,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":190,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":60,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":74,"org.easymock.tests.MockingTest.testTwoMocks":332,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":527,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":265,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":443,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":164,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":78,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":505,"org.easymock.samples.ExampleTest.removeNonExistingDocument":6,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":46,"org.easymock.tests.UsageStrictMockTest.differentMethods":262,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":375,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":174,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":504,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":250,"org.easymock.tests2.ConstraintsToStringTest.andToString":488,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":123,"org.easymock.tests2.MockBuilderTest.testCreateMockString":154,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":383,"org.easymock.tests.UsageExpectAndThrowTest.floatType":437,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":201,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":69,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":196,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":97,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":120,"org.easymock.tests.UsageVerifyTest.twoThrows":299,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":473,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":210,"org.easymock.samples.ExampleTest.voteAgainstRemoval":3,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":317,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":340,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":114,"org.easymock.tests.LimitationsTest.privateConstructor":359,"org.easymock.tests2.UsageConstraintsTest.testNotNull":77,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":463,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":168,"org.easymock.tests2.UsageTest.defaultResetToNice":163,"org.easymock.samples.ExampleTest.voteAgainstRemovals":0,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":280,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":318,"org.easymock.tests.UsageVarargTest.differentLength":409,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":40,"org.easymock.tests2.CallbackTest.callback":230,"org.easymock.tests2.UsageConstraintsTest.equals":55,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":495,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":110,"org.easymock.tests.UsageTest.openCallCountByLastCall":398,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":51,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":425,"org.easymock.tests.UsageCallCountTest.tooFewCalls":365,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":187,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":236,"org.easymock.tests.UsageThrowableTest.throwCheckedException":460,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":494,"org.easymock.tests.MockingTest.testStrictClassMocking":330,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":189,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":302,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":186,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":45,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":380,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":188,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":99,"org.easymock.tests.ObjectMethodsTest.testHashCode":348,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":510,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":529,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":125,"org.easymock.tests2.NameTest.nameForNiceMock":222,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":524,"org.easymock.tests2.DependencyTest.testInterfaceMocking":19,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":509,"org.easymock.samples.ExampleTest.addDocument":4,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":217,"org.easymock.tests2.DelegateToTest.testStubDelegate":226,"org.easymock.tests2.AnswerTest.stubAnswer":98,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":259,"org.easymock.tests.UsageVarargTest.varargLongAccepted":411,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":263,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":315,"org.easymock.tests.UsageExpectAndReturnTest.floatType":267,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":283,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":118,"org.easymock.tests2.ConstraintsToStringTest.orToString":481,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":9,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":476,"org.easymock.tests.UsageThrowableTest.noUpperLimit":457,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":181,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":71,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":52,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":21,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":85,"org.easymock.tests2.SerializationTest.test":192,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":480,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":249,"org.easymock.tests2.UsageConstraintsTest.testSame":58,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":266,"org.easymock.samples.SupportTest.addDocument":13,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":514,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":376,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":202,"org.easymock.tests.GenericTest.testPackageScope":238,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":467,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":310,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":180,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":337,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":512,"org.easymock.tests2.NameTest.nameForMock":220,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":277,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":153,"org.easymock.tests2.UsageStrictMockTest.differentMethods":33,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":111,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":269,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":449,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":346,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":294,"org.easymock.tests2.MockedExceptionTest.testRealException":171,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":357,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":24,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":320,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":496,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":30,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":319,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":424,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":382,"org.easymock.tests2.NameTest.nameForStrictMock":221,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":144,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":25,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":105,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":22,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":72,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":251,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":141,"org.easymock.tests2.UsageStrictMockTest.range":32,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":518,"org.easymock.tests2.UsageConstraintsTest.lessThan":79,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":176,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":127,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":314,"org.easymock.tests2.CaptureTest.testCaptureRightOne":90,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":206,"org.easymock.tests2.UsageConstraintsTest.testOr":59,"org.easymock.tests.UsageRangeTest.combination":291,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":102,"org.easymock.tests.UsageTest.wrongArguments":397,"org.easymock.tests2.MockBuilderTest.testWithConstructor":140,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":203,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":384,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":270,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":278,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":307,"org.easymock.tests.UsageVarargTest.varargShortAccepted":410,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":253,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":368,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":532,"org.easymock.tests2.UsageConstraintsTest.cmpTo":64,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":96,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":522,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":309,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":162,"org.easymock.tests2.CaptureTest.testCaptureFromStub":91,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":372,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":142,"org.easymock.tests.UsageTest.unexpectedCallWithArray":396,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":528,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":258,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":366,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":279,"org.easymock.tests2.UsageConstraintsTest.constraints":53,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":260,"org.easymock.samples.ExampleTest.addAndChangeDocument":7,"org.easymock.tests2.ConstraintsToStringTest.notToString":483,"org.easymock.tests.UsageStrictMockTest.testVerify":264,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":10,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":257,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":431,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":86,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":502,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":417,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":271,"org.easymock.tests.LimitationsTest.abstractClass":358,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":477,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":418,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":404,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":132}}]

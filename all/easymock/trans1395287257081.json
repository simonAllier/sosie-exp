[{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[0,1,2,3,4],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:156","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:177","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[5],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"verified":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:89","sourceCode":"return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object)","type":"CtReturnImpl"},"failures":[6,0,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"value"}},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[98],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:326","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:204","sourceCode":"try {\n    java.lang.reflect.Constructor<?>.setAccessible(true);\n    T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n}","type":"CtTryImpl"},"failures":[99,99,100,100,101,102,103,104,105,106,107,108,31,109,32,33,36,38,110,111],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"args"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"m"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:44","sourceCode":"final java.io.IOException java.io.IOException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:582","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[112,113],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[7,114,115,116,117],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1408","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:79","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[101,118,119,120],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1204","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[1],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[121,122],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1373","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.Captures:53","failures":[2,123,3,124,125,126,127,128,129,130,4,131,132,133,134],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[50,51,135,136,137,138,139,140,141,142,143,144,145,89,90,146,147,148],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[101,118,119,120],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","failures":[99,100,149,150,101,151,152,102,153,103,154,155,156,157,158,104,159,160,161,162,105,163,164,165,166,167,168,169,106,107,170,171,172,108,173,174,36,38,175,110,111],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:102","sourceCode":"if (!boolean) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove();\n    throw new java.lang.IllegalStateException(java.lang.String);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"message"}},{"position":"org.easymock.internal.Range:44","failures":[99,100,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,6,101,118,119,191,192,193,194,195,196,197,151,152,102,153,103,154,155,156,157,158,104,159,160,161,162,105,163,164,165,166,167,168,169,106,107,198,199,200,201,202,0,203,204,205,206,207,208,1,209,210,112,211,212,213,214,215,7,216,217,218,219,220,221,222,223,224,225,226,227,228,229,121,122,230,231,232,233,2,123,3,124,125,126,127,128,129,130,4,131,132,133,234,235,236,237,238,239,240,5,241,242,243,8,98,9,10,11,12,244,245,246,13,14,15,16,247,17,248,18,249,19,20,250,21,22,251,252,253,254,23,170,24,25,171,255,256,257,26,172,27,258,108,28,29,174,30,259,31,260,261,262,263,264,265,266,109,267,32,268,269,33,270,34,271,35,36,272,273,274,37,38,175,275,276,277,278,279,280,281,282,283,39,40,284,285,286,287,288,289,41,42,43,44,110,111,290,291,292,293,294,295,45,46,296,297,298,299,300,301,302,303,304,47,305,48,49,50,51,52,306,307,308,309,310,311,53,113,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,135,336,337,338,136,137,339,138,340,341,139,342,343,344,345,346,54,55,347,348,56,349,350,57,58,59,351,352,353,354,355,60,61,62,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,63,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,64,65,66,67,400,401,68,69,70,402,403,404,405,140,406,407,408,141,142,409,143,410,411,144,412,413,414,415,416,417,418,419,71,72,73,420,421,422,74,423,424,75,76,77,78,79,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,80,441,442,81,82,83,443,444,445,446,447,448,449,450,451,452,453,454,455,145,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,84,85,479,86,87,88,89,90,91,480,481,482,483,484,485,486,146,487,488,147,148,489,490,491,492,493,92,494,93,94,495,496,95,96,97],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:36","failures":[99,100,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,6,101,118,119,191,192,193,194,195,196,197,151,152,102,153,103,154,155,156,157,158,104,159,160,161,162,105,163,164,165,166,167,168,169,106,107,198,199,200,201,202,0,203,204,205,206,207,208,1,209,210,112,211,212,213,214,215,7,216,217,218,219,220,221,222,223,224,225,226,227,228,229,121,122,230,231,232,233,2,123,3,124,125,126,127,128,129,130,4,131,132,133,234,235,236,237,238,239,240,5,241,242,243,8,98,9,10,11,12,244,245,246,13,14,15,16,247,17,248,18,249,19,20,250,21,22,251,252,253,254,23,170,24,25,171,255,256,257,26,172,27,258,108,28,29,174,30,259,31,260,261,262,263,264,265,266,109,267,32,268,269,33,270,34,271,35,36,272,273,274,37,38,175,275,276,277,278,279,280,281,282,283,39,40,284,285,286,287,288,289,41,42,43,44,110,111,290,291,292,293,294,295,45,46,296,297,298,299,300,301,302,303,304,47,305,48,49,50,51,52,306,307,308,309,310,311,53,113,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,135,336,337,338,136,137,339,138,340,341,139,342,343,344,345,346,54,55,347,348,56,349,350,57,58,59,351,352,353,354,355,60,61,62,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,63,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,64,65,66,67,400,401,68,69,70,402,403,404,405,140,406,407,408,141,142,409,143,410,411,144,412,413,414,415,416,417,418,419,71,72,73,420,421,422,74,423,424,75,76,77,78,79,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,80,441,442,81,82,83,443,444,445,446,447,448,449,450,451,452,453,454,455,145,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,84,85,479,86,87,88,89,90,91,480,481,482,483,484,485,486,146,487,488,147,148,489,490,491,492,493,92,494,93,94,495,496,95,96,97],"status":-1,"binaryOperator":"(int <= int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[301,302,303,304,312,393,397,425,426,427,481,482,483,484,485,486],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:98","sourceCode":"return (java.lang.String) != null ? java.lang.String : \"EasyMock for \" + org.easymock.internal.MocksControl.(org.easymock.internal.MocksControl.getMockedType(java.lang.Object))","type":"CtReturnImpl"},"failures":[18,20,21,23,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,53,56,57,58,60,61,62,74,75,76,77,78,79],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:243","failures":[176,178,179,181,188,190,153,155,163,169,237,5,24,256,26,27,29,259,31,260,261,262,263,266,268,269,33,271,35,36,272,274,37,38,277,278,110,48,50,51,325,326,328,332,333,334,335,135,336,136,137,138,340,341,342,343,344,345,346,59,351,352,353,360,362,365,378,379,381,395,417,421,422,438,443,444,445,446,447,87,89,90,489,490,491,492],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:194","sourceCode":"return false","type":"CtReturnImpl"},"failures":[172,497,498,499,500,501,111],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:582","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:39","sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.vm.vendor\")","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:149","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[318,502,503],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:49","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[213],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1815","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EndsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"suffix","key":"suffix"}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[6,0,7,8,10,11,12,13,14,15,16,17,19,20,22,24,28,29,30,31,268,33,47,49,50,51,504,505,59,63,506,380,64,66,67,68,69,70,72,73,84,85,86,88,89,90,95,96,97],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[101,118,119,120],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[101,118,119,120],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:129","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.Capture:121","sourceCode":"break","type":"CtBreakImpl"},"failures":[2,3,124,125,126,127,128,130,507,4],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:201","sourceCode":"java.util.Set<java.lang.reflect.Method>.toArray(new java.lang.reflect.Method[java.util.Set<java.lang.reflect.Method>.size()])","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockMethodInterceptor:136","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method>) {\n    java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method));\n}","type":"CtForEachImpl"},"failures":[101],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[149,150,508,170,171,172,173,174,36,38,175,111],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"arg"}},{"position":"org.easymock.internal.ReflectionUtils:93","failures":[99,99,100,100,184,185,188,101,119,153,155,163,169,23,509,24,25,256,257,26,27,28,29,510,30,259,31,261,262,263,264,266,32,268,269,33,271,35,36,272,37,38,511,512,513,110,303,324,325,326,328,355,360,361,362,382,74,77,438],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:51","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":203,"org.easymock.tests2.UsageTest.argumentsOrdered":14,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":64,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":251,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":46,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":457,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":12,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":187,"org.easymock.tests2.DelegateToTest.testReturnException":240,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":482,"org.easymock.tests.MockingTest.testPartialClassMocking":325,"org.easymock.tests.MockClassControlTest.testToString":60,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":289,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":365,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":466,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":34,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":104,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":402,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":155,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":278,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":497,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":209,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":395,"org.easymock.tests2.UsageTest.wrongArguments":10,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":288,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":310,"org.easymock.samples.ExampleTest.answerVsDelegate":177,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":77,"org.easymock.tests2.UsageConstraintsTest.testNull":206,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":330,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":261,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":22,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":358,"org.easymock.tests2.CaptureTest.testPrimitive":124,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":399,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":416,"org.easymock.tests.UsageTest.moreThanOneArgument":65,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":260,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":491,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":146,"org.easymock.tests.UsageTest.argumentsOrdered":69,"org.easymock.tests.UsageVarargTest.varargIntAccepted":369,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":462,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":443,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":501,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":23,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":193,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":299,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":257,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":450,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":447,"org.easymock.tests.ReplayStateInvalidUsageTest.times":391,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":39,"org.easymock.tests2.DependencyTest.testClassMocking":275,"org.easymock.tests2.AnswerTest.answer":226,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":210,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":464,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":233,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":424,"org.easymock.tests2.CaptureTest.testAnd":2,"org.easymock.tests2.UsageTest.strictResetToDefault":98,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":171,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":32,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":490,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":249,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":352,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":148,"org.easymock.tests2.DelegateToTest.testDelegate":243,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":412,"org.easymock.tests.LimitationsTest.mockFinalMethod":439,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":485,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":475,"org.easymock.tests2.DependencyTest.testClassMockingSupport":276,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":54,"org.easymock.tests2.CaptureTest.testCapture1_2446744":125,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":265,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":411,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":231,"org.easymock.tests.UsageThrowableTest.throwError":428,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":385,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":76,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":300,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":380,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":493,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":149,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":107,"org.easymock.samples.PartialClassMockTest.testGetArea":188,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":386,"org.easymock.tests.MockingTest.testInterfaceMocking":327,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":444,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":421,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":403,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":159,"org.easymock.tests2.UsageTest.niceToStrict":11,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":58,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":448,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":256,"org.easymock.tests2.MockBuilderTest.testCreateMock":28,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":166,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":285,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":142,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":114,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":19,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":423,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":478,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":92,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":308,"org.easymock.tests.UsageOverloadedMethodTest.overloading":418,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":168,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":105,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":442,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":214,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":417,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":138,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":502,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":213,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":130,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":370,"org.easymock.tests2.EasyMockSupportClassTest.testAll":153,"org.easymock.tests.MockClassControlTest.testEquals":357,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":361,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":414,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":511,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":473,"org.easymock.tests2.CaptureTest.testCaptureAll":123,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":232,"org.easymock.tests.MockNameTest.defaultName":53,"org.easymock.tests2.UsageConstraintsTest.testMatches":215,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":492,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":383,"org.easymock.samples.ExampleTest.voteForRemovals":181,"org.easymock.tests.UsageVarargTest.allKinds":377,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":71,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":474,"org.easymock.samples.BasicClassMockTest.testPrintContent":185,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":434,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":47,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":486,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":242,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":296,"org.easymock.tests2.UsageConstraintsTest.greaterThan":216,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":320,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":103,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":351,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":33,"org.easymock.samples.ExampleTest.voteForRemoval":178,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":321,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":235,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":270,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":78,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":194,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":264,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":8,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":382,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":108,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":455,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":248,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":430,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":152,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":481,"org.easymock.tests2.CaptureTest.testCaptureFirst":133,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":239,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":454,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":18,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":16,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":83,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":338,"org.easymock.tests2.CaptureTest.testCapture2_2446744":132,"org.easymock.tests2.UsageTest.moreThanOneArgument":9,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":237,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":465,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":29,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":376,"org.easymock.tests.GenericTest.testBridgedEquals":363,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":508,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":96,"org.easymock.tests.UsageExpectAndReturnTest.longType":335,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":471,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":247,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":510,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":415,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":221,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":381,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":413,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":489,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":426,"org.easymock.tests.UsageCallCountTest.tooManyCalls":97,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":93,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":167,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":136,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":287,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":406,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":433,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":35,"org.easymock.tests.MockingTest.testNiceClassMocking":331,"org.easymock.tests.MockingTest.testClassMocking":323,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":509,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":494,"org.easymock.tests2.UsageConstraintsTest.testContains":212,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":303,"org.easymock.tests2.UsageConstraintsTest.testFind":205,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":419,"org.easymock.tests.MockTypeTest.fromEasyMockClass":75,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":85,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":200,"org.easymock.tests.UsageExpectAndReturnTest.object":339,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":266,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":286,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":21,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":498,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":372,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":350,"org.easymock.tests.UsageTest.exactCallCountByLastCall":70,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":113,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":453,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":487,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":364,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":111,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":343,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":367,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":441,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":292,"org.easymock.tests.MockClassControlTest.testHashCode":356,"org.easymock.tests2.EasyMockSupportTest.testVerify":253,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":161,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":488,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":477,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":440,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":504,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":230,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":254,"org.easymock.tests.UsageVarargTest.varargCharAccepted":371,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":313,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":305,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":470,"org.easymock.tests2.UsageTest.openCallCountByLastCall":244,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":252,"org.easymock.tests.DefaultClassInstantiatorTest.object":314,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":476,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":56,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":505,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":408,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":162,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":431,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":282,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":291,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":62,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":268,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":407,"org.easymock.tests.CapturesMatcherTest.test":134,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":344,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":425,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":169,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":61,"org.easymock.tests2.UsageTest.resumeIfFailure":15,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":74,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":192,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":484,"org.easymock.tests2.StubTest.stubWithReturnValue":307,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":172,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":137,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":222,"org.easymock.tests2.SerializationTest.testAllMockedMethod":119,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":463,"org.easymock.samples.SupportTest.voteForRemovals":190,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":115,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":359,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":294,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":410,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":120,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":469,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":227,"org.easymock.tests.UsageExpectAndThrowTest.object":409,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":366,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":219,"org.easymock.tests2.DelegateToTest.testWrongClass":241,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":378,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":379,"org.easymock.samples.ConstructorCalledMockTest.testTax":99,"org.easymock.tests.UsageStrictMockTest.range":89,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":196,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":250,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":271,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":143,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":26,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":393,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":151,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":68,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":309,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":422,"org.easymock.tests2.CaptureTest.testCaptureNone":129,"org.easymock.tests.UsageUnorderedTest.message":84,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":506,"org.easymock.tests.UsageVerifyTest.twoReturns":73,"org.easymock.tests.UsageVarargTest.varargByteAccepted":375,"org.easymock.tests2.ThreadingTest.testThreadSafe":234,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":164,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":496,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":184,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":57,"org.easymock.tests2.CaptureTest.testCapture_2617107":3,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":347,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":467,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":398,"org.easymock.tests2.UsageConstraintsTest.any":112,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":390,"org.easymock.tests2.StubTest.stub":306,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":427,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":483,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":468,"org.easymock.tests.UsageExpectAndThrowTest.longType":405,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":318,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":389,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":49,"org.easymock.tests2.SerializationTest.testClass":101,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":45,"org.easymock.tests.LimitationsTest.mockNativeMethod":438,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":346,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":362,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":513,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":281,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":52,"org.easymock.tests2.NameTest.nameForMocksControl":44,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":283,"org.easymock.tests2.MockedExceptionTest.testMockedException":302,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":154,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":401,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":140,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":199,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":328,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":259,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":27,"org.easymock.tests.MockingTest.testNicePartialClassMocking":326,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":263,"org.easymock.tests2.CaptureTest.testCaptureLast":128,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":279,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":55,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":38,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":1,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":220,"org.easymock.tests.MockingTest.testTwoMocks":324,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":175,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":332,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":141,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":13,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":224,"org.easymock.samples.ExampleTest.removeNonExistingDocument":182,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":387,"org.easymock.tests.UsageStrictMockTest.differentMethods":90,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":284,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":293,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":316,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":236,"org.easymock.tests2.MockBuilderTest.testCreateMockString":30,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":354,"org.easymock.tests.UsageExpectAndThrowTest.floatType":404,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":156,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":7,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":102,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":229,"org.easymock.tests.UsageVerifyTest.twoThrows":72,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":290,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":80,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":163,"org.easymock.samples.ExampleTest.voteAgainstRemoval":179,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":458,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":420,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":269,"org.easymock.tests.LimitationsTest.privateConstructor":437,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":150,"org.easymock.tests2.UsageConstraintsTest.testNotNull":223,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":435,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":301,"org.easymock.tests2.UsageTest.defaultResetToNice":246,"org.easymock.samples.ExampleTest.voteAgainstRemovals":176,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":459,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":342,"org.easymock.tests.UsageVarargTest.differentLength":63,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":280,"org.easymock.tests2.CallbackTest.callback":6,"org.easymock.tests2.UsageConstraintsTest.equals":204,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":117,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":109,"org.easymock.tests.UsageTest.openCallCountByLastCall":400,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":201,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":397,"org.easymock.tests.UsageCallCountTest.tooFewCalls":94,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":272,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":311,"org.easymock.tests.UsageThrowableTest.throwCheckedException":432,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":116,"org.easymock.tests.MockingTest.testStrictClassMocking":322,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":37,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":312,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":40,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":36,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":392,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":274,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":122,"org.easymock.tests.ObjectMethodsTest.testHashCode":349,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":500,"org.easymock.tests2.NameTest.nameForNiceMock":43,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":238,"org.easymock.tests2.DependencyTest.testInterfaceMocking":277,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":499,"org.easymock.samples.ExampleTest.addDocument":180,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":165,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":106,"org.easymock.tests2.DelegateToTest.testStubDelegate":5,"org.easymock.tests2.AnswerTest.stubAnswer":121,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":87,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":258,"org.easymock.tests.UsageVarargTest.varargLongAccepted":374,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":91,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":456,"org.easymock.tests.UsageExpectAndReturnTest.floatType":334,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":345,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":110,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":100,"org.easymock.tests.UsageThrowableTest.noUpperLimit":429,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":81,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":217,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":298,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":202,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":191,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":126,"org.easymock.tests2.SerializationTest.test":118,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":503,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":315,"org.easymock.tests2.UsageConstraintsTest.testSame":207,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":333,"org.easymock.samples.SupportTest.addDocument":189,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":273,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":388,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":157,"org.easymock.tests.GenericTest.testPackageScope":360,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":147,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":452,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":297,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":329,"org.easymock.tests2.NameTest.nameForMock":41,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":340,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":174,"org.easymock.tests2.UsageStrictMockTest.differentMethods":51,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":267,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":135,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":144,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":348,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":353,"org.easymock.tests2.MockedExceptionTest.testRealException":304,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":79,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":461,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":197,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":460,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":48,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":396,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":394,"org.easymock.tests2.NameTest.nameForStrictMock":42,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":255,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":198,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":262,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":195,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":218,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":317,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":24,"org.easymock.tests2.UsageStrictMockTest.range":50,"org.easymock.tests2.UsageConstraintsTest.lessThan":225,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":295,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":145,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":17,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":160,"org.easymock.tests2.CaptureTest.testCaptureRightOne":4,"org.easymock.tests2.UsageConstraintsTest.testOr":208,"org.easymock.tests.UsageRangeTest.combination":59,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":31,"org.easymock.tests.UsageTest.wrongArguments":67,"org.easymock.tests2.MockBuilderTest.testWithConstructor":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":158,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":355,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":336,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":449,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":341,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":319,"org.easymock.tests.UsageVarargTest.varargShortAccepted":373,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":95,"org.easymock.tests2.UsageConstraintsTest.cmpTo":211,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":228,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":451,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":245,"org.easymock.tests2.CaptureTest.testCaptureFromStub":131,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":384,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":25,"org.easymock.tests.UsageTest.unexpectedCallWithArray":66,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":86,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":495,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":173,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":139,"org.easymock.tests2.CaptureTest.testCapture":507,"org.easymock.tests2.UsageConstraintsTest.constraints":0,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":88,"org.easymock.samples.ExampleTest.addAndChangeDocument":183,"org.easymock.tests.UsageStrictMockTest.testVerify":480,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":186,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":479,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":472,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":127,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":512,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":445,"org.easymock.tests.LimitationsTest.abstractClass":436,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":337,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":446,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":82,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":20,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":368}}]

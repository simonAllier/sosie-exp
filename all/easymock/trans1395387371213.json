[{"transplant":{"position":"org.easymock.internal.MocksBehavior:138","sourceCode":"java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:53","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[0,1],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:147","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[2,3,4,5,6,7,8,9,10,11],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:73","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:61","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","type":"CtIfImpl"},"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,1,74,75,76,77],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:153","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[78,79,80,81,82,83,84,85,86,65,87,77],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.Results:56","sourceCode":"if (int > (this.int)) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:52","sourceCode":"return (int) == (int)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"currentPosition":"maximum","callCount":"maximum"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[88,89],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:331","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[33,90],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:47","sourceCode":"if (int > 0) {\n    java.lang.StringBuffer.append(\", \");\n} ","type":"CtIfImpl"},"failures":[91,92,66,93,94],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:181","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[30,73],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:338","sourceCode":"if (java.lang.reflect.Type != null) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","resolvedType":"actualTypeArgument","variable":"variable"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[88],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:207","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"failures":[95,96],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"failures":[13,97,98,99,100,101,102,103,104,105,106,10,107,108,109,110,111,112,113,114,115,116,117,118,61,119,120,121,122],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[123,124,125,126,127,12,128,129,130,131,2,132,133,134,135,13,136,98,99,100,14,15,137,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,34,35,36,37,38,40,41,42,43,102,103,104,105,45,46,47,48,49,50,51,54,55,138,139,140,141,142,95,143,144,145,80,146,106,147,148,149,150,151,152,96,153,154,155,156,157,158,10,107,108,109,110,111,112,113,82,114,115,116,117,159,160,118,161,162,163,164,165,166,60,61,62,63,64,167,168,169,66,67,170,171,172,173,174,175,176,119,177,68,69,71,72,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,1,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,74,75,231,232,233,234,235,236,237,76,120,121,122],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:40","sourceCode":"if (org.easymock.internal.DefaultClassInstantiator.isSerializable(java.lang.Class<?>)) {\n    try {\n        return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n    } catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:41","sourceCode":"try {\n    return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:44","sourceCode":"throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()","type":"CtThrowImpl"},"failures":[127,128,129,130,135,137,18,33,101,238,105,239,240,95,241,242,149,152,96,153,156,157,243,158,244,245,246,169,66,170,171,172,174,179,180,247,1,221,248,223,226,227,228,249,250,251],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[252],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"failures":[253,254],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:196","sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","type":"CtAssignmentImpl"},"failures":[255,256],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1633","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(float[]))","type":"CtInvocationImpl"},"failures":[30],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:109","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[2,132,257],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"toStringMethod","method":"toStringMethod"}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[258,16,34,40],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[253,106,259],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:90","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[260],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"actual":"actual"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[18,24],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":19,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":221,"org.easymock.tests2.UsageTest.argumentsOrdered":157,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":144,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":86,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":259,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":153,"org.easymock.tests2.StubTest.stubWithReturnValue":82,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":8,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":40,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":190,"org.easymock.tests2.SerializationTest.testAllMockedMethod":257,"org.easymock.tests2.DelegateToTest.testReturnException":146,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":84,"org.easymock.tests.MockingTest.testPartialClassMocking":120,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":92,"org.easymock.samples.SupportTest.voteForRemovals":161,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":88,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":213,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":252,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":201,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":98,"org.easymock.tests.UsageExpectAndThrowTest.object":211,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":37,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":160,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":3,"org.easymock.tests2.DelegateToTest.testWrongClass":147,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":74,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":75,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":25,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":68,"org.easymock.tests2.UsageTest.wrongArguments":152,"org.easymock.tests.UsageStrictMockTest.range":171,"org.easymock.samples.ExampleTest.answerVsDelegate":163,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":255,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":107,"org.easymock.tests2.UsageConstraintsTest.testNull":21,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":212,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":116,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":242,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":103,"org.easymock.tests2.CaptureTest.testPrimitive":48,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":72,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":226,"org.easymock.tests.UsageTest.moreThanOneArgument":222,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":220,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":115,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":93,"org.easymock.tests2.CaptureTest.testCaptureNone":53,"org.easymock.tests.UsageUnorderedTest.message":1,"org.easymock.tests.UsageVerifyTest.twoReturns":180,"org.easymock.tests2.ThreadingTest.testThreadSafe":134,"org.easymock.tests.UsageTest.argumentsOrdered":227,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":60,"org.easymock.tests2.CaptureTest.testCapture_2617107":47,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":71,"org.easymock.tests2.UsageConstraintsTest.any":27,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":64,"org.easymock.tests.UsageExpectAndThrowTest.longType":204,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":85,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":128,"org.easymock.tests2.SerializationTest.testClass":2,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":138,"org.easymock.tests.LimitationsTest.mockNativeMethod":119,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":133,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":200,"org.easymock.tests2.AnswerTest.answer":123,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":26,"org.easymock.tests2.CaptureTest.testAnd":45,"org.easymock.tests2.UsageTest.strictResetToDefault":150,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":131,"org.easymock.tests2.MockedExceptionTest.testMockedException":79,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":142,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":175,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":225,"org.easymock.tests2.DelegateToTest.testDelegate":148,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":205,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":122,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":114,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":104,"org.easymock.tests.MockingTest.testNicePartialClassMocking":121,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":216,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":117,"org.easymock.tests2.CaptureTest.testCaptureLast":52,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":65,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":24,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":113,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":38,"org.easymock.tests2.CaptureTest.testCapture1_2446744":49,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":181,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":214,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":209,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":156,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":42,"org.easymock.tests.UsageThrowableTest.throwError":231,"org.easymock.tests.UsageStrictMockTest.differentMethods":172,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":135,"org.easymock.tests2.MockBuilderTest.testCreateMockString":239,"org.easymock.tests.UsageExpectAndThrowTest.floatType":203,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":33,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":124,"org.easymock.tests.UsageVerifyTest.twoThrows":179,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":99,"org.easymock.samples.PartialClassMockTest.testGetArea":118,"org.easymock.tests2.CompareToTest.testLessOrEqual":258,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":61,"org.easymock.samples.ExampleTest.voteAgainstRemoval":165,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":202,"org.easymock.tests2.UsageTest.niceToStrict":96,"org.easymock.tests2.UsageConstraintsTest.testNotNull":41,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":237,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":78,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":102,"org.easymock.tests2.UsageTest.defaultResetToNice":256,"org.easymock.tests2.MockBuilderTest.testCreateMock":238,"org.easymock.samples.ExampleTest.voteAgainstRemovals":162,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":196,"org.easymock.tests.UsageVarargTest.differentLength":247,"org.easymock.tests2.CallbackTest.callback":137,"org.easymock.tests.UsageTest.openCallCountByLastCall":224,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":210,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":91,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":95,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":16,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":70,"org.easymock.tests.UsageOverloadedMethodTest.overloading":167,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":31,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":192,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":110,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":30,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":54,"org.easymock.tests.UsageThrowableTest.throwCheckedException":234,"org.easymock.tests2.EasyMockSupportClassTest.testAll":97,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":218,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":94,"org.easymock.tests2.CaptureTest.testCaptureAll":46,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":77,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":112,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":109,"org.easymock.tests2.UsageConstraintsTest.testMatches":32,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":111,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":126,"org.easymock.samples.ExampleTest.voteForRemovals":166,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":136,"org.easymock.tests.UsageVarargTest.allKinds":73,"org.easymock.tests2.DependencyTest.testInterfaceMocking":159,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":178,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":5,"org.easymock.tests2.DelegateToTest.testStubDelegate":106,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":236,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":127,"org.easymock.tests2.AnswerTest.stubAnswer":125,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":254,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":87,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":67,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":7,"org.easymock.tests2.UsageConstraintsTest.greaterThan":34,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":246,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":173,"org.easymock.samples.ExampleTest.voteForRemoval":164,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":199,"org.easymock.tests.UsageExpectAndReturnTest.floatType":183,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":10,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":35,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":17,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":149,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":50,"org.easymock.tests2.SerializationTest.test":132,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":9,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":140,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":232,"org.easymock.tests2.UsageConstraintsTest.testSame":22,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":182,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":83,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":253,"org.easymock.tests2.CaptureTest.testCaptureFirst":58,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":141,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":158,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":188,"org.easymock.tests2.CaptureTest.testCapture2_2446744":57,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":13,"org.easymock.tests2.UsageTest.moreThanOneArgument":151,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":105,"org.easymock.tests.GenericTest.testBridgedEquals":89,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":250,"org.easymock.tests.UsageExpectAndReturnTest.longType":184,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":139,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":219,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":193,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":39,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":217,"org.easymock.tests2.UsageStrictMockTest.differentMethods":130,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":185,"org.easymock.tests.UsageCallCountTest.tooManyCalls":251,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":215,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":176,"org.easymock.tests2.MockedExceptionTest.testRealException":81,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":189,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":206,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":12,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":235,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":69,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":108,"org.easymock.tests2.UsageConstraintsTest.testContains":29,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":80,"org.easymock.tests2.UsageConstraintsTest.testFind":20,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":168,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":14,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":90,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":15,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":169,"org.easymock.tests.UsageExpectAndReturnTest.object":191,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":0,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":36,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":59,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":101,"org.easymock.tests2.UsageStrictMockTest.range":129,"org.easymock.tests2.UsageConstraintsTest.lessThan":43,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":143,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":4,"org.easymock.tests.UsageTest.exactCallCountByLastCall":228,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":260,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":76,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":240,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":6,"org.easymock.tests2.CaptureTest.testCaptureRightOne":55,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":229,"org.easymock.tests2.UsageConstraintsTest.testOr":23,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":11,"org.easymock.tests.UsageRangeTest.combination":174,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":244,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":197,"org.easymock.tests.UsageTest.wrongArguments":223,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":186,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":194,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":230,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":249,"org.easymock.tests2.UsageConstraintsTest.cmpTo":28,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":44,"org.easymock.tests2.UsageTest.openCallCountByLastCall":154,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":155,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":145,"org.easymock.tests2.CaptureTest.testCaptureFromStub":56,"org.easymock.tests.UsageTest.unexpectedCallWithArray":248,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":208,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":233,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":66,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":195,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":245,"org.easymock.tests2.UsageConstraintsTest.constraints":18,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":170,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":207,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":198,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":100,"org.easymock.tests2.UsageTest.resumeIfFailure":243,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":51,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":62,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":187,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":63,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":177,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":241}}]

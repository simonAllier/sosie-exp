[{"transplant":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[25],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.LastControl:35","sourceCode":"new java.lang.ThreadLocal<org.easymock.internal.MocksControl>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:49","sourceCode":"org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1433","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:93","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[26,27,28,29,30],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:76","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"m","equalsMethod":"m"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:163","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[31,32,33,34,34,35,35,36,37,38,39,40,41,26,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,28,29,30,81],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:71","failures":[33,44,45,46,47,50,52,53,54,55,56,57,58,59,61,67,70,71,82,75,76,77],"status":-1,"binaryOperator":"(java.util.Set<java.lang.reflect.Method>) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[83,84,85,86,87,88,89,90,91,92,93],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1531","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:310","sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","type":"CtReturnImpl"},"failures":[94,95,96,97,98,33,34,34,35,35,36,37,99,100,101,38,39,40,41,102,26,42,103,104,105,106,0,107,108,109,110,1,111,112,113,2,43,44,45,46,114,115,116,117,118,119,120,83,84,121,85,122,86,87,123,124,125,126,127,128,129,130,131,132,89,133,134,135,90,136,137,138,91,139,140,141,142,143,144,93,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,47,160,161,162,52,54,56,57,59,62,63,163,64,65,66,68,70,71,72,164,165,3,166,167,168,169,73,75,170,171,172,173,174,175,176,177,178,6,179,180,7,181,78,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,28,29,30,222,223,224,225,226,227,228,229],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[47,160,48,230],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:356","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[231,232],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MocksControl:190","failures":[233,105,106,234,109,235,236,84,87,123,124,127,89,133,134,135,93,149,151,153,154,157,158,159,59,63,71,165,166,237,4,238,177,178,239,212,240,214,215,216,217,218],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[47,160,48,230],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[31,32,33,34,34,35,35,241,242,36,37,243,244,38,39,40,41,26,42,245,246,247,248,249,43,250,251,44,252,253,254,255,256,257,258,259,260,45,261,262,263,264,265,46,266,267,47,48,268,49,50,269,51,52,53,270,271,54,55,56,272,57,273,58,59,274,60,61,62,63,64,65,66,67,68,275,276,69,70,71,72,277,82,278,73,74,75,279,76,77,280,281,78,282,79,283,284,285,80,28,29,30,286,287,81,288,289,290,291,292,293,294,295,231,296,297,298,232,299,300],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"position":"org.easymock.EasyMock:1988","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:100","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[104,0,110,1,113,161,172,173,176,6,180,7,181],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:93","failures":[295,231,232],"status":-1,"binaryOperator":"(java.lang.Class<?>.getConstructors().int) == 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:319","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Not:42","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:62","sourceCode":"final org.easymock.internal.InjectionPlan org.easymock.internal.InjectionPlan = new org.easymock.internal.InjectionPlan()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:46","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:130","failures":[75],"status":-1,"binaryOperator":"(((!(java.lang.reflect.Method.isBridge())) && (!(java.lang.reflect.Method.equals(java.lang.reflect.Method)))) && (java.lang.reflect.Method.getName().equals(java.lang.reflect.Method.getName())))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Same:42","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:49","sourceCode":"java.lang.StringBuffer.append((((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\"))","type":"CtInvocationImpl"},"failures":[301,302,303,304,305],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1862","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Same(T))","type":"CtInvocationImpl"},"failures":[122],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:43","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"equals\", new java.lang.Class[]{ java.lang.Object.java.lang.Object })","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:116","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[306],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1177","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:53","sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"o":"actual","this":"actual"}},{"position":"org.easymock.EasyMock:1121","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":84,"org.easymock.tests2.UsageTest.argumentsOrdered":236,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":6,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":158,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":235,"org.easymock.tests2.StubTest.stubWithReturnValue":2,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":272,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":200,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":135,"org.easymock.tests2.SerializationTest.testAllMockedMethod":48,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":174,"org.easymock.tests.MockingTest.testPartialClassMocking":28,"org.easymock.samples.SupportTest.voteForRemovals":98,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":278,"org.easymock.tests.MockClassControlTest.testToString":288,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":222,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":82,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":18,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":255,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":230,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":10,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":44,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":175,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":101,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":133,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":170,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":171,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":123,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":183,"org.easymock.samples.ConstructorCalledMockTest.testTax":34,"org.easymock.tests.UsageStrictMockTest.range":177,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":155,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":77,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":38,"org.easymock.tests2.UsageConstraintsTest.testNull":85,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":64,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":17,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":293,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":56,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":157,"org.easymock.tests2.CaptureTest.testPrimitive":140,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":185,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":247,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":24,"org.easymock.tests.UsageTest.moreThanOneArgument":179,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":163,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":225,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":221,"org.easymock.tests2.CaptureTest.testCaptureNone":143,"org.easymock.tests.UsageUnorderedTest.message":237,"org.easymock.tests.UsageVerifyTest.twoReturns":173,"org.easymock.tests2.ThreadingTest.testThreadSafe":114,"org.easymock.tests.UsageTest.argumentsOrdered":239,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":261,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":31,"org.easymock.tests2.CaptureTest.testCapture_2617107":92,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":186,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":50,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":9,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":55,"org.easymock.tests2.UsageConstraintsTest.any":124,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":190,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":298,"org.easymock.tests2.SerializationTest.testClass":47,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":103,"org.easymock.tests.LimitationsTest.mockNativeMethod":78,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":99,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":210,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":75,"org.easymock.tests2.AnswerTest.answer":161,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":88,"org.easymock.tests2.CaptureTest.testAnd":91,"org.easymock.tests2.UsageTest.strictResetToDefault":107,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":270,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":69,"org.easymock.tests2.MockedExceptionTest.testMockedException":242,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":224,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":251,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":152,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":168,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":7,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":12,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":30,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":62,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":57,"org.easymock.tests.MockingTest.testNicePartialClassMocking":29,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":66,"org.easymock.tests.LimitationsTest.mockFinalMethod":282,"org.easymock.tests2.CompareToTest.testCompareEqual":303,"org.easymock.tests2.CaptureTest.testCaptureLast":142,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":8,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":229,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":87,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":42,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":134,"org.easymock.tests.MockingTest.testTwoMocks":80,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":228,"org.easymock.tests2.CaptureTest.testCapture1_2446744":141,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":27,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":191,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":19,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":15,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":136,"org.easymock.tests.UsageThrowableTest.throwError":212,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":25,"org.easymock.tests.UsageStrictMockTest.differentMethods":178,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":296,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":116,"org.easymock.tests2.MockBuilderTest.testCreateMockString":61,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":287,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":252,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":227,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":130,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":249,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":244,"org.easymock.tests.UsageVerifyTest.twoThrows":4,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":267,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":45,"org.easymock.samples.PartialClassMockTest.testGetArea":33,"org.easymock.tests2.CompareToTest.testLessOrEqual":305,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":187,"org.easymock.samples.ExampleTest.voteAgainstRemoval":96,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":220,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":71,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":283,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":256,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":11,"org.easymock.tests2.UsageTest.niceToStrict":109,"org.easymock.tests.LimitationsTest.privateConstructor":281,"org.easymock.tests2.UsageConstraintsTest.testNotNull":90,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":241,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":218,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":54,"org.easymock.tests2.MockBuilderTest.testCreateMock":58,"org.easymock.tests2.UsageTest.defaultResetToNice":111,"org.easymock.samples.ExampleTest.voteAgainstRemovals":94,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":206,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":263,"org.easymock.tests2.CallbackTest.callback":234,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":275,"org.easymock.tests.UsageTest.openCallCountByLastCall":180,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":16,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":153,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":119,"org.easymock.tests.UsageOverloadedMethodTest.overloading":165,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":265,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":260,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":128,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":202,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":41,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":164,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":127,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":144,"org.easymock.tests.UsageThrowableTest.throwCheckedException":215,"org.easymock.tests.MockClassControlTest.testEquals":292,"org.easymock.tests2.EasyMockSupportClassTest.testAll":43,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":74,"org.easymock.tests.MockingTest.testStrictClassMocking":284,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":22,"org.easymock.tests2.CaptureTest.testCaptureAll":139,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":26,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":40,"org.easymock.tests2.UsageConstraintsTest.testMatches":129,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":102,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":226,"org.easymock.tests2.CompareToTest.testGreateOrEqual":304,"org.easymock.samples.ExampleTest.voteForRemovals":97,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":118,"org.easymock.tests2.DependencyTest.testInterfaceMocking":100,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":172,"org.easymock.samples.BasicClassMockTest.testPrintContent":32,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":262,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":266,"org.easymock.tests2.DelegateToTest.testStubDelegate":138,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":217,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":233,"org.easymock.tests2.AnswerTest.stubAnswer":162,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":176,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":299,"org.easymock.tests2.UsageConstraintsTest.greaterThan":131,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":250,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":167,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":72,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":300,"org.easymock.samples.ExampleTest.voteForRemoval":95,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":277,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":115,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":209,"org.easymock.tests.UsageExpectAndReturnTest.floatType":193,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":67,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":37,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":35,"org.easymock.tests.UsageThrowableTest.noUpperLimit":240,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":132,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":79,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":0,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":120,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":245,"org.easymock.tests2.SerializationTest.test":160,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":273,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":231,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":150,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":213,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":192,"org.easymock.tests2.UsageConstraintsTest.testSame":122,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":248,"org.easymock.tests2.CaptureTest.testCaptureFirst":147,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":151,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":113,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":198,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":253,"org.easymock.tests.GenericTest.testPackageScope":73,"org.easymock.tests2.UsageTest.moreThanOneArgument":108,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":117,"org.easymock.tests2.CaptureTest.testCapture2_2446744":146,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":59,"org.easymock.tests.GenericTest.testBridgedEquals":279,"org.easymock.tests.UsageExpectAndReturnTest.longType":194,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":148,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":203,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":60,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":23,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":219,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":274,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":21,"org.easymock.tests2.UsageStrictMockTest.differentMethods":106,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":223,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":276,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":195,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":20,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":169,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":264,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":199,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":104,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":216,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":184,"org.easymock.tests.MockingTest.testNiceClassMocking":286,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":39,"org.easymock.tests.MockingTest.testClassMocking":285,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":51,"org.easymock.tests2.UsageConstraintsTest.testContains":126,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":36,"org.easymock.tests2.UsageConstraintsTest.testFind":121,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":3,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":271,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":65,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":238,"org.easymock.tests.UsageExpectAndReturnTest.object":201,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":246,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":297,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":89,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":68,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":52,"org.easymock.tests2.UsageStrictMockTest.range":105,"org.easymock.tests2.UsageConstraintsTest.lessThan":137,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":268,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":156,"org.easymock.tests.UsageTest.exactCallCountByLastCall":181,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":211,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":149,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":257,"org.easymock.tests2.CaptureTest.testCaptureRightOne":93,"org.easymock.tests2.UsageConstraintsTest.testOr":86,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":243,"org.easymock.tests.UsageRangeTest.combination":166,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":207,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":63,"org.easymock.tests2.MockBuilderTest.testWithConstructor":269,"org.easymock.tests.MockClassControlTest.testHashCode":291,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":254,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":81,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":196,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":204,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":258,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":232,"org.easymock.tests2.UsageConstraintsTest.cmpTo":125,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":294,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":306,"org.easymock.tests2.CompareToTest.testLessThan":301,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":5,"org.easymock.tests2.UsageTest.openCallCountByLastCall":110,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":1,"org.easymock.tests.DefaultClassInstantiatorTest.object":295,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":159,"org.easymock.tests2.CaptureTest.testCaptureFromStub":145,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":53,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":259,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":14,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":214,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":205,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":290,"org.easymock.tests2.UsageConstraintsTest.constraints":83,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":70,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":13,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":208,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":289,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":46,"org.easymock.tests2.CompareToTest.testGreateThan":302,"org.easymock.tests2.UsageTest.resumeIfFailure":112,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":49,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":188,"org.easymock.tests.LimitationsTest.abstractClass":280,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":197,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":76,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":182,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":189,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":154}}]

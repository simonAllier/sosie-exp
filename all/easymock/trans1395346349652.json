[{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[0,1],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"finalizeMethod","equalsMethod":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.MocksControl:202","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"failures":[2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,155,156,156,157,158,159,160,161,162,163,164,165,166,167,168,0,1,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.Capture:110","sourceCode":"break","type":"CtBreakImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[16,18,19,20,21,22,23,298,33,53,58,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,130,135,144,182,189,196],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[55,84,299,300,301,302],"status":-1,"binaryOperator":"int > 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:55","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:150","sourceCode":"return java.io.ByteArrayOutputStream.toByteArray()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ExpectedInvocation:48","failures":[303],"status":-1,"binaryOperator":"(\"\" + (org.easymock.internal.Invocation.getArguments().int))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.AndroidSupport:34","sourceCode":"return this.boolean","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:82","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"matched"}},{"transplant":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"failures":[304,305,47,54,55,56,59,60,84,85,87,88,306,307,308,93,309,129,130,131,191,192,198,199,227,229,230,310,260,269],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[14,15,33,44,47,84,85,91,92,124,125,126,127,128,132,133,134,135,136,169,179,180,208,227,233,234,235,236,237,238,239,240,241,242,303,243,244,245,246,247,248,249,250,251,252,253,254,311,255,256,257,258,284,285,286,287,288,289,290,291,292,293,294,295,296,297],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:127","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:139","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(this.java.lang.Class<T>, java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[259],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this","constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[312,313,24,314,315,47,53,54,55,56,59,60,61,82,84,85,86,87,88,89,308,93,299,316,300,317,318,319,320,129,130,131,189,191,192,193,194,198,199,201,203,321,322,211,213,217,218,221,323,301,324,325,326,327,328,329,302,330,331,225,227,228,229,230,231,235,249],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:167","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[263,264],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:117","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[179,180,211,262],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[332,333,3,5,6,7,8,334,335,13,14,15,16,17,18,19,20,21,22,23,336,312,337,298,313,24,314,338,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,315,40,41,42,43,44,45,46,339,47,48,340,341,342,53,54,56,57,58,59,60,61,343,344,345,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,346,82,83,84,85,86,87,88,89,90,91,92,308,93,347,348,349,350,351,352,353,354,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,355,132,133,134,135,136,356,138,139,140,141,142,357,143,144,145,146,147,148,149,150,151,152,153,154,155,155,156,156,157,158,159,160,358,162,164,165,166,168,0,1,169,170,171,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,359,208,209,321,210,322,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,233,234,235,236,237,238,239,240,241,242,303,243,244,245,246,247,248,249,250,251,252,253,254,311,255,256,257,258,259,260,261,360,361,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,362,280,281,282,363,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:894","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidClassProxyFactory:39","sourceCode":"try {\n    com.google.dexmaker.stock.ProxyBuilder<T> com.google.dexmaker.stock.ProxyBuilder<T> = com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.forClass(java.lang.Class<T>).handler(org.easymock.internal.AndroidClassProxyFactory.MockHandler);\n    if (org.easymock.ConstructorArgs != null) {\n        com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs());\n    } else {\n        try {\n            org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator();\n            java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>);\n            java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes());\n            com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[]);\n        } catch (java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>));\n        }\n    }\n    return com.google.dexmaker.stock.ProxyBuilder<T>.build();\n} catch (java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException((\"Failed to mock \" + java.lang.Class<T>) , java.io.IOException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:157","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1901","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Compare<T>(T , java.util.Comparator<? super T> , org.easymock.LogicalOperator))","type":"CtInvocationImpl"},"failures":[249],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"failures":[364],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"arg"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"failures":[25,26,27,28,125,158,358,162,164,165,166,169,175,176,177,178,202,204,205,207,259,273,274,275,276,277,278,279,281],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[246],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"actual":"actual"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:112","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"finalizeMethod","equalsMethod":"finalizeMethod"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:43","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"failures":[325,327,328],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":236,"org.easymock.tests2.UsageTest.argumentsOrdered":199,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":53,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":222,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":32,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":194,"org.easymock.tests2.StubTest.stubWithReturnValue":182,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":255,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":109,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":157,"org.easymock.tests2.SerializationTest.testAllMockedMethod":272,"org.easymock.tests2.DelegateToTest.testReturnException":280,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":332,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":30,"org.easymock.tests.MockingTest.testPartialClassMocking":25,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":302,"org.easymock.samples.SupportTest.voteForRemovals":154,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":346,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":74,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":333,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":62,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":176,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":360,"org.easymock.tests.UsageExpectAndThrowTest.object":72,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":253,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":188,"org.easymock.tests2.DelegateToTest.testWrongClass":282,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":91,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":92,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":242,"org.easymock.tests2.UsageTest.wrongArguments":192,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":132,"org.easymock.tests.UsageStrictMockTest.range":87,"org.easymock.samples.ConstructorCalledMockTest.testTax":155,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":11,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":310,"org.easymock.samples.ExampleTest.answerVsDelegate":146,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":219,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":273,"org.easymock.tests2.UsageConstraintsTest.testNull":238,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":205,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":73,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":221,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":164,"org.easymock.tests2.CaptureTest.testPrimitive":287,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":136,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":81,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":59,"org.easymock.tests.UsageTest.moreThanOneArgument":54,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":204,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":10,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":299,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":140,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":342,"org.easymock.tests2.CaptureTest.testCaptureNone":292,"org.easymock.tests.UsageUnorderedTest.message":47,"org.easymock.tests.UsageVerifyTest.twoReturns":131,"org.easymock.tests.UsageVarargTest.varargByteAccepted":42,"org.easymock.tests2.ThreadingTest.testThreadSafe":168,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":350,"org.easymock.tests.UsageTest.argumentsOrdered":60,"org.easymock.tests.UsageVarargTest.varargIntAccepted":37,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":8,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":307,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":159,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":330,"org.easymock.tests2.CaptureTest.testCapture_2617107":286,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":124,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":331,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":161,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":135,"org.easymock.tests2.UsageConstraintsTest.any":243,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":163,"org.easymock.tests2.StubTest.stub":181,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":349,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":128,"org.easymock.tests.UsageExpectAndThrowTest.longType":65,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":31,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":326,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":97,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":228,"org.easymock.tests2.SerializationTest.testClass":270,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":269,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":260,"org.easymock.tests.LimitationsTest.mockNativeMethod":28,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":339,"org.easymock.tests2.AnswerTest.answer":261,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":119,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":303,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":174,"org.easymock.tests2.CaptureTest.testAnd":284,"org.easymock.tests2.UsageTest.strictResetToDefault":190,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":231,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":209,"org.easymock.tests2.NameTest.nameForMocksControl":186,"org.easymock.tests2.MockedExceptionTest.testMockedException":266,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":139,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":216,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":122,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":58,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":354,"org.easymock.tests2.DelegateToTest.testDelegate":283,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":66,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":27,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":202,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":165,"org.easymock.tests.MockingTest.testNicePartialClassMocking":26,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":77,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":207,"org.easymock.tests2.CaptureTest.testCaptureLast":291,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":33,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":93,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":279,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":241,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":254,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":52,"org.easymock.tests.MockingTest.testTwoMocks":338,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":308,"org.easymock.tests2.CaptureTest.testCapture1_2446744":288,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":100,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":75,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":70,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":172,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":198,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":257,"org.easymock.tests.UsageThrowableTest.throwError":16,"org.easymock.tests.UsageStrictMockTest.differentMethods":88,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":96,"org.easymock.tests2.ConstraintsToStringTest.andToString":329,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":1,"org.easymock.tests2.MockBuilderTest.testCreateMockString":167,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":356,"org.easymock.tests.UsageExpectAndThrowTest.floatType":64,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":142,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":249,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":262,"org.easymock.tests.UsageVerifyTest.twoThrows":130,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":312,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":177,"org.easymock.samples.PartialClassMockTest.testGetArea":158,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":95,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":125,"org.easymock.samples.ExampleTest.voteAgainstRemoval":148,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":341,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":340,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":210,"org.easymock.tests2.UsageTest.niceToStrict":193,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":63,"org.easymock.tests2.UsageConstraintsTest.testNotNull":256,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":265,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":23,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":162,"org.easymock.tests2.UsageTest.defaultResetToNice":197,"org.easymock.samples.ExampleTest.voteAgainstRemovals":145,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":115,"org.easymock.tests.UsageVarargTest.differentLength":315,"org.easymock.tests2.CallbackTest.callback":211,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":317,"org.easymock.tests.UsageTest.openCallCountByLastCall":57,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":301,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":71,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":217,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":233,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":345,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":3,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":9,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":134,"org.easymock.tests.UsageCallCountTest.tooFewCalls":6,"org.easymock.tests.UsageOverloadedMethodTest.overloading":143,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":298,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":247,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":357,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":276,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":111,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":246,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":293,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":12,"org.easymock.tests.UsageThrowableTest.throwCheckedException":20,"org.easymock.tests2.EasyMockSupportClassTest.testAll":175,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":46,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":328,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":300,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":79,"org.easymock.tests2.CaptureTest.testCaptureAll":285,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":50,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":173,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":278,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":15,"org.easymock.tests.MockNameTest.defaultName":309,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":275,"org.easymock.tests2.UsageConstraintsTest.testMatches":248,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":98,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":277,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":264,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":141,"org.easymock.samples.ExampleTest.voteForRemovals":150,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":170,"org.easymock.tests2.NameTest.nameForNiceMock":185,"org.easymock.tests.UsageVarargTest.allKinds":44,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":129,"org.easymock.tests2.DependencyTest.testInterfaceMocking":187,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":51,"org.easymock.samples.BasicClassMockTest.testPrintContent":160,"org.easymock.samples.ExampleTest.addDocument":149,"org.easymock.tests2.DelegateToTest.testStubDelegate":281,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":22,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":225,"org.easymock.tests2.AnswerTest.stubAnswer":263,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":363,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":34,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":85,"org.easymock.tests2.UsageConstraintsTest.greaterThan":250,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":121,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":322,"org.easymock.tests.UsageVarargTest.varargLongAccepted":41,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":89,"org.easymock.samples.ExampleTest.voteForRemoval":147,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":0,"org.easymock.tests.UsageExpectAndReturnTest.floatType":102,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":118,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":359,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":259,"org.easymock.tests2.ConstraintsToStringTest.orToString":323,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":156,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":313,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":251,"org.easymock.tests.UsageThrowableTest.noUpperLimit":17,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":234,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":13,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":189,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":289,"org.easymock.tests2.SerializationTest.test":271,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":214,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":18,"org.easymock.tests2.UsageConstraintsTest.testSame":239,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":101,"org.easymock.samples.SupportTest.addDocument":153,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":29,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":362,"org.easymock.tests2.CaptureTest.testCaptureFirst":297,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":215,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":201,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":314,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":107,"org.easymock.tests.GenericTest.testPackageScope":45,"org.easymock.tests2.CaptureTest.testCapture2_2446744":296,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":169,"org.easymock.tests2.UsageTest.moreThanOneArgument":191,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":353,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":166,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":43,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":364,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":334,"org.easymock.tests2.NameTest.nameForMock":183,"org.easymock.tests.UsageExpectAndReturnTest.longType":103,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":212,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":48,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":80,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":112,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":355,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":311,"org.easymock.tests2.UsageStrictMockTest.differentMethods":230,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":78,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":348,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":138,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":104,"org.easymock.tests.UsageCallCountTest.tooManyCalls":335,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":316,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":76,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":123,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":5,"org.easymock.tests2.MockedExceptionTest.testRealException":268,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":305,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":108,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":318,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":227,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":67,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":21,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":99,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":133,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":274,"org.easymock.tests2.UsageConstraintsTest.testContains":245,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":4,"org.easymock.tests2.NameTest.nameForStrictMock":184,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":267,"org.easymock.tests2.UsageConstraintsTest.testFind":237,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":144,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":179,"org.easymock.tests.MockTypeTest.fromEasyMockClass":304,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":206,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":82,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":180,"org.easymock.tests.UsageExpectAndReturnTest.object":110,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":252,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":208,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":358,"org.easymock.tests2.UsageStrictMockTest.range":229,"org.easymock.tests2.UsageConstraintsTest.lessThan":258,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":220,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":39,"org.easymock.tests.UsageTest.exactCallCountByLastCall":61,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":14,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":213,"org.easymock.tests2.CaptureTest.testCaptureRightOne":294,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":351,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":319,"org.easymock.tests2.UsageConstraintsTest.testOr":240,"org.easymock.tests.UsageRangeTest.combination":120,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":203,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":35,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":116,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":337,"org.easymock.tests.UsageTest.wrongArguments":56,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":137,"org.easymock.tests2.EasyMockSupportTest.testVerify":224,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":105,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":113,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":325,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":352,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":344,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":336,"org.easymock.tests.UsageVarargTest.varargShortAccepted":40,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":171,"org.easymock.tests2.UsageConstraintsTest.cmpTo":244,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":232,"org.easymock.tests.UsageVarargTest.varargCharAccepted":38,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":361,"org.easymock.tests2.CompareToTest.testLessThan":2,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":226,"org.easymock.tests2.UsageTest.openCallCountByLastCall":195,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":196,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":223,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":343,"org.easymock.tests2.CaptureTest.testCaptureFromStub":295,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":94,"org.easymock.tests.UsageTest.unexpectedCallWithArray":55,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":306,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":320,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":69,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":84,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":19,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":7,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":114,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":321,"org.easymock.tests2.UsageConstraintsTest.constraints":235,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":86,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":68,"org.easymock.samples.ExampleTest.addAndChangeDocument":151,"org.easymock.tests2.ConstraintsToStringTest.notToString":324,"org.easymock.tests.UsageStrictMockTest.testVerify":90,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":117,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":347,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":152,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":327,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":83,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":178,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":49,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":290,"org.easymock.tests2.UsageTest.resumeIfFailure":200,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":126,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":106,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":24,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":127,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":218,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":36}}]

[{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[24,25,26,27,34,35,40,41,42,43,44,45,46,47,48,49,58,59,63,64],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:91","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:88","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[66,67,68,69,70,71,7,72,8,9,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,19,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,40,55,153],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:127","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[7,8,74,154,81,82,83,84,106,107,112,121,124,125],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[155],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:643","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1495","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.Range:40","failures":[0,1,156,157,158,66,159,67,68,160,161,69,70,71,162,163,164,165,166,167,2,3,4,5,6,7,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,72,184,8,9,73,74,75,76,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,77,78,214,215,216,217,79,80,81,82,218,219,83,84,85,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,10,11,12,13,14,248,249,250,251,252,253,86,254,255,87,88,89,256,257,258,259,260,261,90,262,263,264,265,15,266,267,268,269,91,270,271,92,93,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,16,287,288,289,290,291,292,94,293,294,95,96,97,98,99,17,18,100,295,296,101,102,103,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,104,323,324,325,105,106,107,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,108,109,366,367,368,369,370,371,372,373,374,110,375,19,111,112,113,114,376,377,378,379,380,381,382,383,384,385,115,116,386,387,388,117,118,389,119,390,120,121,122,123,391,392,393,124,125,126,127,394,395,396,397,398,399,400,20,401,402,403,404,405,128,129,130,131,132,406,133,134,407,408,409,410,135,411,136,412,413,137,138,414,139,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,140,441,442,443,444,445,446,21,447,448,141,449,450,142,451,143,452,453,454,455,456,457,22,144,23,458,459,460,461,462,463,24,25,26,27,28,29,30,31,32,33,34,35,36,37,464,145,465,146,466,147,148,467,149,150,468,469,470,471,472,473,474,475,476,151,152,477,478,479,480,481,482,483,484,485,38,39,40,41,486,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,487,488,489,153],"status":-1,"binaryOperator":"(int >= 0)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Any:36","failures":[0,1,2,3,4,5,6,7,9,10,11,12,13,14,16,17,18,19,25,31,32,37,45,49],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[490,487,488,489],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,471,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[1,186,189,190,191,192,193,255,283,284,285,286,16,287,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,106,377,394,395,396,397],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:603","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[7,9,74,75,80,491,492,493,494,105,106,107,19,112,113,120],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:233","failures":[0,1,156,157,158,66,67,68,160,161,70,71,163,164,165,2,3,4,5,6,7,182,72,184,8,9,73,74,75,76,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,216,79,80,82,218,219,83,84,85,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,10,11,12,13,14,253,254,255,88,256,257,258,260,261,90,262,263,264,265,15,266,267,268,272,276,277,279,283,284,285,286,16,287,289,290,17,18,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,104,323,324,325,105,106,107,339,340,341,342,343,344,345,346,347,348,349,351,352,352,353,353,354,355,356,357,358,359,360,108,373,374,110,375,19,111,112,113,114,376,377,385,115,116,386,388,117,118,119,390,120,121,122,123,391,392,393,124,125,126,127,394,395,396,397,398,399,400,20,401,402,128,129,130,131,133,409,135,136,138,418,421,431,437,440,140,441,442,443,444,21,449,450,142,452,453,454,455,456,457,22,23,458,459,460,461,462,463,24,25,26,27,28,29,30,31,32,33,34,35,36,37,464,145,465,146,466,147,148,467,149,150,468,469,470,151,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,487,488,489,153],"status":-1,"binaryOperator":"(org.easymock.internal.ExpectedInvocation) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:94","sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:166","sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","type":"CtThrowImpl"},"failures":[495,496,497],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:163","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.EasyMockProperties:62","failures":[0,1,156,157,158,66,159,67,68,160,161,69,70,71,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,162,163,164,165,166,2,3,4,5,6,7,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,72,184,8,9,73,74,75,76,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,77,78,214,215,216,217,79,80,81,82,218,219,83,84,85,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,10,11,12,13,14,248,249,250,251,252,253,86,254,255,87,88,89,256,257,258,259,260,261,90,262,263,264,265,15,266,267,268,269,91,270,271,92,93,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,16,287,288,289,290,291,292,94,293,294,95,96,97,98,99,17,18,100,295,296,101,102,103,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,104,323,324,325,105,106,107,326,327,328,329,331,332,333,334,335,336,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,108,109,366,367,368,369,370,371,372,373,374,110,375,19,111,112,113,114,376,377,378,379,380,382,383,384,385,115,116,386,387,388,117,118,389,119,390,120,121,122,123,391,392,393,124,125,126,127,394,395,396,397,398,520,399,400,20,401,402,403,405,128,129,130,131,132,133,134,408,409,410,135,136,412,413,137,138,139,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,140,441,442,443,444,445,446,21,447,448,141,449,450,142,451,143,452,453,454,455,456,457,22,144,23,521,522,523,524,525,458,459,460,461,462,463,24,25,26,27,28,29,30,31,32,33,34,35,36,37,464,145,465,146,466,147,148,467,149,150,468,469,470,471,472,473,474,475,476,151,152,477,478,479,480,481,482,483,484,485,38,39,40,41,486,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,487,488,489,153],"status":-1,"binaryOperator":"java.io.InputStream != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:192","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:52","sourceCode":"return (int) == (int)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:137","sourceCode":"return java.util.List<T>.toString()","type":"CtReturnImpl"},"failures":[526],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:907","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","failures":[69,70,71,527,167,7,72,8,73,74,75,528,154,79,81,82,83,84,85,90,104,106,107,110,111,112,113,119,121,122,123,124,125,126,127,133,137,138,139,140,449,142,145,147,148,150,40,55,153],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[0,1,156,157,158,66,159,67,68,160,161,69,70,71,162,163,164,165,166,167,2,3,4,5,6,7,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,72,184,8,9,73,74,75,76,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,77,78,214,215,216,217,79,80,81,82,218,219,83,84,85,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,10,11,12,13,14,248,249,250,251,252,253,86,254,255,87,88,89,256,257,258,259,260,261,90,262,263,264,265,15,266,267,268,269,91,270,271,92,93,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,16,287,288,289,290,291,292,94,293,294,95,96,97,98,99,17,18,100,295,296,101,102,103,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,104,323,324,325,105,106,107,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,108,109,366,367,368,369,370,371,372,373,374,110,375,19,111,112,113,114,376,377,378,379,380,381,382,383,384,385,115,116,386,387,388,117,118,389,119,390,120,121,122,123,391,392,393,124,125,126,127,394,395,396,397,398,399,400,20,401,402,403,404,405,128,129,130,131,132,406,133,134,407,408,409,410,135,411,136,412,413,137,138,414,139,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,140,441,442,443,444,445,446,21,447,448,141,449,450,142,451,143,452,453,454,455,456,457,22,144,23,458,459,460,461,462,463,24,25,26,27,28,29,30,31,32,33,34,35,36,37,464,145,465,146,466,147,148,467,149,150,468,469,470,471,472,473,474,475,476,151,152,477,478,479,480,481,482,483,484,485,38,39,40,41,486,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,487,488,489,153],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1594","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(byte[]))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:63","sourceCode":"java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:69","sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"in":"in"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[163,164,165,166,182,247,93,275,276,277,279,94,97,296,101,102,103,299,352,352,353,353,354,357,358,385,115,116,386,117,118,396,402,132,133,134,409,410,135,136,137,138,139,418,421,431,437,440,140,442,443,444,445,21,141,449,450,142,143,487,489],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation().addCapture(((org.easymock.internal.matchers.Captures<java.lang.Object>)(this)), java.lang.Object)","type":"CtInvocationImpl"},"failures":[526,526,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.Range:75","sourceCode":"return \"expected: \" + org.easymock.internal.Range.(toString())","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:65","sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","type":"CtIfImpl"},"failures":[66,67,68,70,71,7,72,8,9,73,74,75,76,79,80,82,83,84,85,90,104,105,106,107,110,19,111,112,113,114,119,120,121,122,123,124,125,127,128,129,130,131,133,138,449,142,145,147,148,150,40,55,153],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[529,38,56,62],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:128","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:288","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[222,462],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"failures":[5,235,242,376],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:243","sourceCode":"if (java.lang.Object == null) {\n    final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType();\n    if (java.lang.Class<?>.isPrimitive()) {\n        throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n    } \n    return ;\n} ","type":"CtIfImpl"},"failures":[163,165,268,300],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1445","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[8,9,74,75,185,81,19,112,113,140,442,444,141,142],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:37","sourceCode":"return java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:41","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[52],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"expected","actual":"actual","this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:152","failures":[],"status":0,"binaryOperator":"(\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName()))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[530,56],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[254,459,461,462,463],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"value":"delegateTo","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[162],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:107","failures":[162,163,164,165,166,180,181,182,183,247,93,273,274,275,276,277,279,282,94,97,295,296,101,102,103,297,298,299,331,332,333,334,335,336,338,352,352,353,353,354,357,358,531,378,382,385,115,116,386,117,118,394,395,396,402,403,132,532,133,134,408,409,410,135,136,413,137,138,533,139,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,140,442,443,444,445,21,447,448,141,449,450,142,451,143,487,489],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:69","failures":[490,487,488,489],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:237","sourceCode":"return org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findMethod(java.lang.Class<?>, java.lang.reflect.Method.getName(), java.lang.reflect.Method.getParameterTypes())","type":"CtReturnImpl"},"failures":[162],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"bridgeMethod"}},{"position":"org.easymock.EasyMock:946","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":41,"org.easymock.tests2.UsageTest.argumentsOrdered":125,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":79,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":468,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":109,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":230,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":123,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":355,"org.easymock.tests2.DelegateToTest.testReturnException":459,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":284,"org.easymock.tests.MockingTest.testPartialClassMocking":276,"org.easymock.tests.MockClassControlTest.testToString":101,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":405,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":216,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":143,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":239,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":425,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":421,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":303,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":491,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":374,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":519,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":47,"org.easymock.tests2.UsageTest.wrongArguments":121,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":2,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":481,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":328,"org.easymock.samples.ExampleTest.answerVsDelegate":345,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":97,"org.easymock.tests2.UsageConstraintsTest.testNull":43,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":281,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":442,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":150,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":299,"org.easymock.tests2.CaptureTest.testPrimitive":27,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":6,"org.easymock.tests.UsageTest.moreThanOneArgument":80,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":322,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":441,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":341,"org.easymock.tests.UsageTest.argumentsOrdered":84,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":288,"org.easymock.tests.UsageVarargTest.varargIntAccepted":258,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":235,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":10,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":497,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":132,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":369,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":380,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":410,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":222,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":14,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":503,"org.easymock.tests.ReplayStateInvalidUsageTest.times":176,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":151,"org.easymock.tests2.DependencyTest.testClassMocking":371,"org.easymock.tests2.AnswerTest.answer":452,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":48,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":237,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":485,"org.easymock.tests2.CaptureTest.testAnd":24,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":294,"org.easymock.tests2.UsageTest.strictResetToDefault":390,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":407,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":141,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":340,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":466,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":324,"org.easymock.tests2.DelegateToTest.testDelegate":463,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":292,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":502,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":318,"org.easymock.tests.LimitationsTest.mockFinalMethod":183,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":16,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":252,"org.easymock.tests2.DependencyTest.testClassMockingSupport":372,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":77,"org.easymock.tests2.CaptureTest.testCapture1_2446744":28,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":446,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":316,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":483,"org.easymock.tests.UsageThrowableTest.throwError":186,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":170,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":96,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":167,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":370,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":343,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":439,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":506,"org.easymock.samples.PartialClassMockTest.testGetArea":354,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":171,"org.easymock.tests.MockingTest.testInterfaceMocking":278,"org.easymock.tests2.CompareToTest.testLessOrEqual":529,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":11,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":267,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":426,"org.easymock.tests2.UsageTest.niceToStrict":122,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":93,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":304,"org.easymock.tests2.ThreadingTest.testChangeDefault":520,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":220,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":409,"org.easymock.tests2.MockBuilderTest.testCreateMock":137,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":434,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":478,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":312,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":147,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":293,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":158,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":66,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":326,"org.easymock.tests.UsageOverloadedMethodTest.overloading":301,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":436,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":430,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":53,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":255,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":205,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":300,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":52,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":33,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":259,"org.easymock.tests2.EasyMockSupportClassTest.testAll":418,"org.easymock.tests.MockClassControlTest.testEquals":298,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":164,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":320,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":484,"org.easymock.tests2.CaptureTest.testCaptureAll":25,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":250,"org.easymock.tests.MockNameTest.defaultName":100,"org.easymock.tests2.UsageConstraintsTest.testMatches":54,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":168,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":342,"org.easymock.samples.ExampleTest.voteForRemovals":349,"org.easymock.tests.UsageVarargTest.allKinds":15,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":105,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":251,"org.easymock.samples.BasicClassMockTest.testPrintContent":358,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":192,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":110,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":462,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":287,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":366,"org.easymock.tests2.UsageConstraintsTest.greaterThan":56,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":337,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":419,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":323,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":142,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":507,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":338,"org.easymock.samples.ExampleTest.voteForRemoval":346,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":451,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":399,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":155,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":98,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":381,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":445,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":499,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":119,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":247,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":413,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":227,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":465,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":188,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":416,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":283,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":458,"org.easymock.tests2.CaptureTest.testCaptureFirst":37,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":226,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":146,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":127,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":89,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":201,"org.easymock.tests2.UsageTest.moreThanOneArgument":120,"org.easymock.tests2.CaptureTest.testCapture2_2446744":36,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":20,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":138,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":238,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":265,"org.easymock.tests.GenericTest.testBridgedEquals":166,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":70,"org.easymock.tests.UsageExpectAndReturnTest.longType":197,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":464,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":248,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":533,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":321,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":61,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":272,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":319,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":245,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":339,"org.easymock.tests.UsageCallCountTest.tooManyCalls":71,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":67,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":435,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":202,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":480,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":308,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":191,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":115,"org.easymock.tests.MockingTest.testNiceClassMocking":282,"org.easymock.tests.MockingTest.testClassMocking":274,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":532,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":159,"org.easymock.tests2.UsageConstraintsTest.testContains":51,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":396,"org.easymock.tests2.UsageConstraintsTest.testFind":42,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":302,"org.easymock.tests.MockTypeTest.fromEasyMockClass":95,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":23,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":72,"org.easymock.tests.UsageExpectAndReturnTest.object":204,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":21,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":479,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":149,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":261,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":271,"org.easymock.tests.UsageTest.exactCallCountByLastCall":85,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":0,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":225,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":215,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":289,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":403,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":210,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":256,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":254,"org.easymock.tests.MockClassControlTest.testHashCode":297,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":362,"org.easymock.tests2.EasyMockSupportTest.testVerify":470,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":428,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":290,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":157,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":253,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":528,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":482,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":471,"org.easymock.tests.UsageVarargTest.varargCharAccepted":260,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":330,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":375,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":243,"org.easymock.tests2.UsageTest.openCallCountByLastCall":391,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":469,"org.easymock.tests.DefaultClassInstantiatorTest.object":331,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":156,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":91,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":154,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":429,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":310,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":189,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":475,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":361,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":505,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":449,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":103,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":309,"org.easymock.tests.CapturesMatcherTest.test":526,"org.easymock.tests.ReplayStateInvalidCallsTest.times":511,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":211,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":244,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":512,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":437,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":102,"org.easymock.tests2.UsageTest.resumeIfFailure":126,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":94,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":379,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":286,"org.easymock.tests2.StubTest.stubWithReturnValue":377,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":411,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":62,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":203,"org.easymock.tests2.SerializationTest.testAllMockedMethod":489,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":236,"org.easymock.samples.SupportTest.voteForRemovals":360,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":162,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":364,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":315,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":490,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":242,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":453,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":217,"org.easymock.tests.UsageExpectAndThrowTest.object":313,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":59,"org.easymock.tests2.DelegateToTest.testWrongClass":461,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":509,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":17,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":18,"org.easymock.tests.UsageStrictMockTest.range":74,"org.easymock.samples.ConstructorCalledMockTest.testTax":352,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":383,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":467,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":385,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":314,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":135,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":415,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":178,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":83,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":327,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":501,"org.easymock.tests2.CaptureTest.testCaptureNone":32,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":268,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":522,"org.easymock.tests.UsageUnorderedTest.message":7,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":527,"org.easymock.tests.UsageVerifyTest.twoReturns":107,"org.easymock.tests.UsageVarargTest.varargByteAccepted":264,"org.easymock.tests2.ThreadingTest.testThreadSafe":398,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":432,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":161,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":92,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":357,"org.easymock.tests2.CaptureTest.testCapture_2617107":26,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":214,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":5,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":240,"org.easymock.tests2.UsageConstraintsTest.any":49,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":175,"org.easymock.tests2.StubTest.stub":376,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":246,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":241,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":285,"org.easymock.tests.UsageExpectAndThrowTest.longType":306,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":335,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":174,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":111,"org.easymock.tests2.SerializationTest.testClass":487,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":108,"org.easymock.tests.LimitationsTest.mockNativeMethod":182,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":165,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":213,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":474,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":517,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":114,"org.easymock.tests2.NameTest.nameForMocksControl":131,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":476,"org.easymock.tests2.MockedExceptionTest.testMockedException":395,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":420,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":219,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":144,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":279,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":307,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":440,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":136,"org.easymock.tests.MockingTest.testNicePartialClassMocking":277,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":444,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":495,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":472,"org.easymock.tests2.CaptureTest.testCaptureLast":31,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":78,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":516,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":118,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":46,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":60,"org.easymock.tests.MockingTest.testTwoMocks":275,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":513,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":389,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":194,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":311,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":124,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":64,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":525,"org.easymock.samples.ExampleTest.removeNonExistingDocument":350,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":477,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":172,"org.easymock.tests.UsageStrictMockTest.differentMethods":75,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":363,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":524,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":333,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":400,"org.easymock.tests2.MockBuilderTest.testCreateMockString":139,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":295,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":422,"org.easymock.tests.UsageExpectAndThrowTest.floatType":305,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":417,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":455,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":404,"org.easymock.tests.UsageVerifyTest.twoThrows":106,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":431,"org.easymock.samples.ExampleTest.voteAgainstRemoval":347,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":231,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":266,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":450,"org.easymock.tests.LimitationsTest.privateConstructor":181,"org.easymock.tests2.UsageConstraintsTest.testNotNull":63,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":394,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":193,"org.easymock.tests2.UsageTest.defaultResetToNice":393,"org.easymock.samples.ExampleTest.voteAgainstRemovals":344,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":209,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":232,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":473,"org.easymock.tests.UsageVarargTest.differentLength":90,"org.easymock.tests2.CallbackTest.callback":153,"org.easymock.tests2.UsageConstraintsTest.equals":486,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":447,"org.easymock.tests.UsageTest.openCallCountByLastCall":218,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":38,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":4,"org.easymock.tests.UsageCallCountTest.tooFewCalls":68,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":386,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":329,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":523,"org.easymock.tests.UsageThrowableTest.throwCheckedException":190,"org.easymock.tests.MockingTest.testStrictClassMocking":273,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":117,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":1,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":152,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":116,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":177,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":388,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":457,"org.easymock.tests.ObjectMethodsTest.testHashCode":270,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":496,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":515,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":401,"org.easymock.tests2.NameTest.nameForNiceMock":130,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":510,"org.easymock.tests2.DependencyTest.testInterfaceMocking":373,"org.easymock.samples.ExampleTest.addDocument":348,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":433,"org.easymock.tests2.DelegateToTest.testStubDelegate":460,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":438,"org.easymock.tests2.AnswerTest.stubAnswer":456,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":9,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":412,"org.easymock.tests.UsageVarargTest.varargLongAccepted":263,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":76,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":229,"org.easymock.tests.UsageExpectAndReturnTest.floatType":196,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":212,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":402,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":353,"org.easymock.tests.UsageThrowableTest.noUpperLimit":187,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":57,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":87,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":368,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":39,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":378,"org.easymock.tests2.SerializationTest.test":488,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":29,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":332,"org.easymock.tests2.UsageConstraintsTest.testSame":44,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":195,"org.easymock.samples.SupportTest.addDocument":359,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":387,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":500,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":173,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":423,"org.easymock.tests.GenericTest.testPackageScope":163,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":291,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":224,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":367,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":280,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":498,"org.easymock.tests2.NameTest.nameForMock":128,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":206,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":414,"org.easymock.tests2.UsageStrictMockTest.differentMethods":113,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":448,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":198,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":317,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":269,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":325,"org.easymock.tests2.MockedExceptionTest.testRealException":397,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":99,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":384,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":234,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":19,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":233,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":179,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":3,"org.easymock.tests2.NameTest.nameForStrictMock":129,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":408,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":22,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":443,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":382,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":492,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":58,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":334,"org.easymock.tests.ErrorMessageTest.testGetters":493,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":133,"org.easymock.tests2.UsageStrictMockTest.range":112,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":504,"org.easymock.tests2.UsageConstraintsTest.lessThan":65,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":365,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":145,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":228,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":427,"org.easymock.tests2.CaptureTest.testCaptureRightOne":34,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":521,"org.easymock.tests2.UsageConstraintsTest.testOr":45,"org.easymock.tests.UsageRangeTest.combination":104,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":140,"org.easymock.tests.UsageTest.wrongArguments":82,"org.easymock.tests2.MockBuilderTest.testWithConstructor":406,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":424,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":296,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":199,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":207,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":221,"org.easymock.tests.UsageVarargTest.varargShortAccepted":262,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":336,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":69,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":518,"org.easymock.tests2.UsageConstraintsTest.cmpTo":50,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":454,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":508,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":223,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":392,"org.easymock.tests2.CaptureTest.testCaptureFromStub":35,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":169,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":134,"org.easymock.tests.UsageTest.unexpectedCallWithArray":81,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":514,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":8,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":160,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":208,"org.easymock.tests2.UsageConstraintsTest.constraints":40,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":73,"org.easymock.samples.ExampleTest.addAndChangeDocument":351,"org.easymock.tests.UsageStrictMockTest.testVerify":185,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":356,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":184,"org.easymock.tests2.CompareToTest.testGreateThan":530,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":249,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":30,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":531,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":12,"org.easymock.tests.LimitationsTest.abstractClass":180,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":200,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":13,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":88,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":494,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":148,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":257}}]
